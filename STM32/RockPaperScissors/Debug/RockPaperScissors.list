
RockPaperScissors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000115c  08007280  08007280  00017280  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083dc  080083dc  000205b4  2**0
                  CONTENTS
  4 .ARM          00000008  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e4  080083e4  000205b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b4  20000000  080083ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200005c0  080089a0  000205c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000096c  080089a0  0002096c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa67  00000000  00000000  00020677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a99  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000921  00000000  00000000  000337a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002912e  00000000  00000000  000340c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010844  00000000  00000000  0005d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f67e5  00000000  00000000  0006da3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037fc  00000000  00000000  00164220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00167a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c0 	.word	0x200005c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800724c 	.word	0x0800724c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005c4 	.word	0x200005c4
 80001cc:	0800724c 	.word	0x0800724c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fad8 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f80b 	bl	800058e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8ac 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f87a 	bl	8000674 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000580:	f000 f856 	bl	8000630 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000584:	f003 fbe4 	bl	8003d50 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000588:	f003 fbf0 	bl	8003d6c <MX_X_CUBE_AI_Process>
 800058c:	e7fc      	b.n	8000588 <main+0x1c>

0800058e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b096      	sub	sp, #88	; 0x58
 8000592:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2244      	movs	r2, #68	; 0x44
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f006 f845 	bl	800662c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b4:	f000 ff86 	bl	80014c4 <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005be:	f000 f8ef 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005dc:	230a      	movs	r3, #10
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 ffbd 	bl	8001570 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005fc:	f000 f8d0 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fb85 	bl	8001d28 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000624:	f000 f8bc 	bl	80007a0 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_CRC_Init+0x3c>)
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <MX_CRC_Init+0x40>)
 8000638:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_CRC_Init+0x3c>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_CRC_Init+0x3c>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_CRC_Init+0x3c>)
 8000654:	2201      	movs	r2, #1
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_CRC_Init+0x3c>)
 800065a:	f000 fbf1 	bl	8000e40 <HAL_CRC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000664:	f000 f89c 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200005dc 	.word	0x200005dc
 8000670:	40023000 	.word	0x40023000

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_USART2_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b8:	f002 fa16 	bl	8002ae8 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f86d 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000600 	.word	0x20000600
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a24      	ldr	r2, [pc, #144]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fe91 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0xc8>)
 800076e:	f000 fcd9 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000772:	2320      	movs	r3, #32
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 fcca 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	; 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_CRC_MspInit+0x38>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d10b      	bne.n	800081e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_CRC_MspInit+0x3c>)
 8000808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_CRC_MspInit+0x3c>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6493      	str	r3, [r2, #72]	; 0x48
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_CRC_MspInit+0x3c>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023000 	.word	0x40023000
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	; 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2288      	movs	r2, #136	; 0x88
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fee9 	bl	800662c <memset>
  if(huart->Instance==USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <HAL_UART_MspInit+0xc0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d143      	bne.n	80008ec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fc7d 	bl	8002170 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ff90 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b0:	230c      	movs	r3, #12
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fc24 	bl	8001124 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2026      	movs	r0, #38	; 0x26
 80008e2:	f000 fa76 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e6:	2026      	movs	r0, #38	; 0x26
 80008e8:	f000 fa8f 	bl	8000e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	37b0      	adds	r7, #176	; 0xb0
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f948 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <USART2_IRQHandler+0x10>)
 8000956:	f002 f915 	bl	8002b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000600 	.word	0x20000600

08000964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
  }

  return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e009      	b.n	80009c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf1      	blt.n	80009b0 <_write+0x12>
  }
  return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_close>:

int _close(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_isatty>:

int _isatty(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f005 fe3a 	bl	80066e8 <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20018000 	.word	0x20018000
 8000aa0:	00000800 	.word	0x00000800
 8000aa4:	20000688 	.word	0x20000688
 8000aa8:	20000970 	.word	0x20000970

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f005 fdf9 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b02:	f7ff fd33 	bl	800056c <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	200005b4 	.word	0x200005b4
  ldr r2, =_sidata
 8000b14:	080083ec 	.word	0x080083ec
  ldr r2, =_sbss
 8000b18:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8000b1c:	2000096c 	.word	0x2000096c

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_Init+0x3c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_Init+0x3c>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 f93e 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f80f 	bl	8000b64 <HAL_InitTick>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	e001      	b.n	8000b56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b52:	f7ff fe2b 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d023      	beq.n	8000bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_InitTick+0x70>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f949 	bl	8000e26 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d809      	bhi.n	8000bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f913 	bl	8000dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0x74>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	2000068c 	.word	0x2000068c

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000068c 	.word	0x2000068c

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff29 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff3e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff31 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa2 	bl	8000d78 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e054      	b.n	8000efc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7f5b      	ldrb	r3, [r3, #29]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d105      	bne.n	8000e68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fcc6 	bl	80007f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_CRC_Init+0xc4>)
 8000e7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0218 	bic.w	r2, r2, #24
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	e00c      	b.n	8000eaa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6899      	ldr	r1, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f834 	bl	8000f08 <HAL_CRCEx_Polynomial_Set>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e028      	b.n	8000efc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	e004      	b.n	8000ec8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6912      	ldr	r2, [r2, #16]
 8000ec6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	04c11db7 	.word	0x04c11db7

08000f08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000f18:	231f      	movs	r3, #31
 8000f1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
 8000f2a:	e063      	b.n	8000ff4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000f2c:	bf00      	nop
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1e5a      	subs	r2, r3, #1
 8000f32:	613a      	str	r2, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d009      	beq.n	8000f4c <HAL_CRCEx_Polynomial_Set+0x44>
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b18      	cmp	r3, #24
 8000f50:	d846      	bhi.n	8000fe0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000fe7 	.word	0x08000fe7
 8000f5c:	08000fe1 	.word	0x08000fe1
 8000f60:	08000fe1 	.word	0x08000fe1
 8000f64:	08000fe1 	.word	0x08000fe1
 8000f68:	08000fe1 	.word	0x08000fe1
 8000f6c:	08000fe1 	.word	0x08000fe1
 8000f70:	08000fe1 	.word	0x08000fe1
 8000f74:	08000fe1 	.word	0x08000fe1
 8000f78:	08000fd5 	.word	0x08000fd5
 8000f7c:	08000fe1 	.word	0x08000fe1
 8000f80:	08000fe1 	.word	0x08000fe1
 8000f84:	08000fe1 	.word	0x08000fe1
 8000f88:	08000fe1 	.word	0x08000fe1
 8000f8c:	08000fe1 	.word	0x08000fe1
 8000f90:	08000fe1 	.word	0x08000fe1
 8000f94:	08000fe1 	.word	0x08000fe1
 8000f98:	08000fc9 	.word	0x08000fc9
 8000f9c:	08000fe1 	.word	0x08000fe1
 8000fa0:	08000fe1 	.word	0x08000fe1
 8000fa4:	08000fe1 	.word	0x08000fe1
 8000fa8:	08000fe1 	.word	0x08000fe1
 8000fac:	08000fe1 	.word	0x08000fe1
 8000fb0:	08000fe1 	.word	0x08000fe1
 8000fb4:	08000fe1 	.word	0x08000fe1
 8000fb8:	08000fbd 	.word	0x08000fbd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d913      	bls.n	8000fea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000fc6:	e010      	b.n	8000fea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	d90f      	bls.n	8000fee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000fd2:	e00c      	b.n	8000fee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d90b      	bls.n	8000ff2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000fde:	e008      	b.n	8000ff2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
        break;
 8000fe4:	e006      	b.n	8000ff4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fe6:	bf00      	nop
 8000fe8:	e004      	b.n	8000ff4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fea:	bf00      	nop
 8000fec:	e002      	b.n	8000ff4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fee:	bf00      	nop
 8000ff0:	e000      	b.n	8000ff4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000ff2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10d      	bne.n	8001016 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 0118 	bic.w	r1, r3, #24
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001016:	7dfb      	ldrb	r3, [r7, #23]
}
 8001018:	4618      	mov	r0, r3
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d008      	beq.n	800104e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e022      	b.n	8001094 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 020e 	bic.w	r2, r2, #14
 800105c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0201 	bic.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f003 021c 	and.w	r2, r3, #28
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2101      	movs	r1, #1
 800107c:	fa01 f202 	lsl.w	r2, r1, r2
 8001080:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d005      	beq.n	80010c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2204      	movs	r2, #4
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e029      	b.n	8001118 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 020e 	bic.w	r2, r2, #14
 80010d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f003 021c 	and.w	r2, r3, #28
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	4798      	blx	r3
    }
  }
  return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e17f      	b.n	8001434 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8171 	beq.w	800142e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d118      	bne.n	8001204 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	6939      	ldr	r1, [r7, #16]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80ac 	beq.w	800142e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a5e      	ldr	r2, [pc, #376]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ee:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <HAL_GPIO_Init+0x334>)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x242>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x338>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x33c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x340>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x344>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x348>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_GPIO_Init+0x34c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x22a>
 800134a:	2306      	movs	r3, #6
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800134e:	2307      	movs	r3, #7
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001366:	2300      	movs	r3, #0
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001378:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x334>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fe:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_GPIO_Init+0x350>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f ae78 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	48001400 	.word	0x48001400
 8001470:	48001800 	.word	0x48001800
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000

080014c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d2:	d130      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e0:	d038      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001508:	e002      	b.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d102      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x60>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f2      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001530:	d110      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e00f      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d007      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40007000 	.word	0x40007000
 8001568:	20000000 	.word	0x20000000
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e3ca      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001582:	4b97      	ldr	r3, [pc, #604]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158c:	4b94      	ldr	r3, [pc, #592]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80e4 	beq.w	800176c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_RCC_OscConfig+0x4a>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	f040 808b 	bne.w	80016c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f040 8087 	bne.w	80016c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x62>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3a2      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_RCC_OscConfig+0x7c>
 80015e2:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ea:	e005      	b.n	80015f8 <HAL_RCC_OscConfig+0x88>
 80015ec:	4b7c      	ldr	r3, [pc, #496]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d223      	bcs.n	8001644 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fd55 	bl	80020b0 <RCC_SetFlashLatencyFromMSIRange>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e383      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001610:	4b73      	ldr	r3, [pc, #460]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	496d      	ldr	r1, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162e:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	4968      	ldr	r1, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
 8001642:	e025      	b.n	8001690 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4960      	ldr	r1, [pc, #384]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	495b      	ldr	r1, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fd15 	bl	80020b0 <RCC_SetFlashLatencyFromMSIRange>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e343      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001690:	f000 fc4a 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	4950      	ldr	r1, [pc, #320]	; (80017e4 <HAL_RCC_OscConfig+0x274>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_RCC_OscConfig+0x278>)
 80016ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016b0:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fa55 	bl	8000b64 <HAL_InitTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d052      	beq.n	800176a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	e327      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d032      	beq.n	8001736 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fa92 	bl	8000c04 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e4:	f7ff fa8e 	bl	8000c04 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e310      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a36      	ldr	r2, [pc, #216]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4931      	ldr	r1, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	492c      	ldr	r1, [pc, #176]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e01a      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa5f 	bl	8000c04 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174a:	f7ff fa5b 	bl	8000c04 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e2dd      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x1da>
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d074      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x21a>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	d10e      	bne.n	80017a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d064      	beq.n	8001860 <HAL_RCC_OscConfig+0x2f0>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d160      	bne.n	8001860 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e2ba      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x24a>
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x298>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c2:	d115      	bne.n	80017f0 <HAL_RCC_OscConfig+0x280>
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a02      	ldr	r2, [pc, #8]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x298>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08007390 	.word	0x08007390
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004
 80017f0:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a9c      	ldr	r2, [pc, #624]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff f9f8 	bl	8000c04 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff f9f4 	bl	8000c04 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e276      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182a:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x2a8>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f9e4 	bl	8000c04 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff f9e0 	bl	8000c04 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e262      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d0>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d060      	beq.n	8001930 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x310>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d119      	bne.n	80018ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d116      	bne.n	80018ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001880:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x328>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e23f      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	4973      	ldr	r1, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	e040      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d023      	beq.n	80018fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f99f 	bl	8000c04 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff f99b 	bl	8000c04 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e21d      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	4b65      	ldr	r3, [pc, #404]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b62      	ldr	r3, [pc, #392]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	495f      	ldr	r1, [pc, #380]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
 80018fc:	e018      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5c      	ldr	r2, [pc, #368]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f97b 	bl	8000c04 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f977 	bl	8000c04 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1f9      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f956 	bl	8000c04 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff f952 	bl	8000c04 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1d4      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ef      	beq.n	800195c <HAL_RCC_OscConfig+0x3ec>
 800197c:	e01b      	b.n	80019b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001984:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff f939 	bl	8000c04 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f935 	bl	8000c04 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1b7      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a6 	beq.w	8001b10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d118      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a08:	f7ff f8fc 	bl	8000c04 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a10:	f7ff f8f8 	bl	8000c04 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e17a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_RCC_OscConfig+0x508>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4d8>
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a46:	e029      	b.n	8001a9c <HAL_RCC_OscConfig+0x52c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d115      	bne.n	8001a7c <HAL_RCC_OscConfig+0x50c>
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a70:	e014      	b.n	8001a9c <HAL_RCC_OscConfig+0x52c>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	4b9c      	ldr	r3, [pc, #624]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a9b      	ldr	r2, [pc, #620]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8c:	4b98      	ldr	r3, [pc, #608]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	4a97      	ldr	r2, [pc, #604]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d016      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f8ae 	bl	8000c04 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff f8aa 	bl	8000c04 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e12a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ed      	beq.n	8001aac <HAL_RCC_OscConfig+0x53c>
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f897 	bl	8000c04 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f893 	bl	8000c04 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e113      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ed      	bne.n	8001ada <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80fe 	beq.w	8001d16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	f040 80d0 	bne.w	8001cc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b24:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d130      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	3b01      	subs	r3, #1
 8001b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d127      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d11f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b64:	2a07      	cmp	r2, #7
 8001b66:	bf14      	ite	ne
 8001b68:	2201      	movne	r2, #1
 8001b6a:	2200      	moveq	r2, #0
 8001b6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d113      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d06e      	beq.n	8001c78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d069      	beq.n	8001c74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0ad      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc8:	f7ff f81c 	bl	8000c04 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff f818 	bl	8000c04 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e09a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_RCC_OscConfig+0x784>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bfe:	3a01      	subs	r2, #1
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c08:	0212      	lsls	r2, r2, #8
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c10:	0852      	lsrs	r2, r2, #1
 8001c12:	3a01      	subs	r2, #1
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1c:	0852      	lsrs	r2, r2, #1
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	0652      	lsls	r2, r2, #25
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c28:	0912      	lsrs	r2, r2, #4
 8001c2a:	0452      	lsls	r2, r2, #17
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4930      	ldr	r1, [pc, #192]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c4c:	f7fe ffda 	bl	8000c04 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe ffd6 	bl	8000c04 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e058      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c72:	e050      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e04f      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d148      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c9c:	f7fe ffb2 	bl	8000c04 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ffae 	bl	8000c04 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e030      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x734>
 8001cc2:	e028      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d023      	beq.n	8001d12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_RCC_OscConfig+0x780>)
 8001cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7fe ff95 	bl	8000c04 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	e00c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7fe ff91 	bl	8000c04 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d905      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e013      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x7b0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ec      	bne.n	8001cde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x7b0>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4905      	ldr	r1, [pc, #20]	; (8001d20 <HAL_RCC_OscConfig+0x7b0>)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x7b4>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
 8001d10:	e001      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	feeefffc 	.word	0xfeeefffc

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0e7      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4970      	ldr	r1, [pc, #448]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cf      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d010      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d908      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4960      	ldr	r1, [pc, #384]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d04c      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d121      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0a6      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e09a      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e08e      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e086      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4943      	ldr	r1, [pc, #268]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7fe fef8 	bl	8000c04 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7fe fef4 	bl	8000c04 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e06e      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d208      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	492b      	ldr	r1, [pc, #172]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d210      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 0207 	bic.w	r2, r3, #7
 8001e84:	4923      	ldr	r1, [pc, #140]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e036      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	4918      	ldr	r1, [pc, #96]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4910      	ldr	r1, [pc, #64]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001edc:	f000 f824 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	490b      	ldr	r1, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x1f4>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1fc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fe2f 	bl	8000b64 <HAL_InitTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08007390 	.word	0x08007390
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x34>
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d121      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d11e      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e005      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f84:	4a2b      	ldr	r2, [pc, #172]	; (8002034 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10d      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	e004      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d134      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0xa6>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d003      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fcc:	e005      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd0:	617b      	str	r3, [r7, #20]
      break;
 8001fd2:	e005      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd6:	617b      	str	r3, [r7, #20]
      break;
 8001fd8:	e002      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	617b      	str	r3, [r7, #20]
      break;
 8001fde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	fb03 f202 	mul.w	r2, r3, r2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	0e5b      	lsrs	r3, r3, #25
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	3301      	adds	r3, #1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002020:	69bb      	ldr	r3, [r7, #24]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	080073a8 	.word	0x080073a8
 8002038:	00f42400 	.word	0x00f42400
 800203c:	007a1200 	.word	0x007a1200

08002040 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_GetHCLKFreq+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800205c:	f7ff fff0 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4904      	ldr	r1, [pc, #16]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	080073a0 	.word	0x080073a0

08002084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002088:	f7ff ffda 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0adb      	lsrs	r3, r3, #11
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	080073a0 	.word	0x080073a0

080020b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c8:	f7ff f9ee 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 80020cc:	6178      	str	r0, [r7, #20]
 80020ce:	e014      	b.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6593      	str	r3, [r2, #88]	; 0x58
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020e8:	f7ff f9de 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 80020ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002100:	d10b      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b80      	cmp	r3, #128	; 0x80
 8002106:	d919      	bls.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2ba0      	cmp	r3, #160	; 0xa0
 800210c:	d902      	bls.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800210e:	2302      	movs	r3, #2
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e013      	b.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002114:	2301      	movs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e010      	b.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d902      	bls.n	8002126 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002120:	2303      	movs	r3, #3
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	e00a      	b.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d102      	bne.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800212c:	2302      	movs	r3, #2
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	e004      	b.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b70      	cmp	r3, #112	; 0x70
 8002136:	d101      	bne.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002138:	2301      	movs	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 0207 	bic.w	r2, r3, #7
 8002144:	4909      	ldr	r1, [pc, #36]	; (800216c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002178:	2300      	movs	r3, #0
 800217a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800217c:	2300      	movs	r3, #0
 800217e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002188:	2b00      	cmp	r3, #0
 800218a:	d041      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002194:	d02a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002196:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800219a:	d824      	bhi.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800219c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021a0:	d008      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021a6:	d81e      	bhi.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b0:	d010      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021b2:	e018      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021b4:	4b86      	ldr	r3, [pc, #536]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c0:	e015      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fabb 	bl	8002744 <RCCEx_PLLSAI1_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d2:	e00c      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3320      	adds	r3, #32
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fba6 	bl	800292c <RCCEx_PLLSAI2_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e4:	e003      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	74fb      	strb	r3, [r7, #19]
      break;
 80021ea:	e000      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10b      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f4:	4b76      	ldr	r3, [pc, #472]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002202:	4973      	ldr	r1, [pc, #460]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800220a:	e001      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d041      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002224:	d02a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002226:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800222a:	d824      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800222c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002230:	d008      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002236:	d81e      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d010      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002242:	e018      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002244:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a61      	ldr	r2, [pc, #388]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002250:	e015      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa73 	bl	8002744 <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002262:	e00c      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3320      	adds	r3, #32
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fb5e 	bl	800292c <RCCEx_PLLSAI2_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002274:	e003      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	74fb      	strb	r3, [r7, #19]
      break;
 800227a:	e000      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800227c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002284:	4b52      	ldr	r3, [pc, #328]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002292:	494f      	ldr	r1, [pc, #316]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800229a:	e001      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a0 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a40      	ldr	r2, [pc, #256]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3a      	ldr	r2, [pc, #232]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f0:	f7fe fc88 	bl	8000c04 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f6:	e009      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe fc84 	bl	8000c04 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d902      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	74fb      	strb	r3, [r7, #19]
        break;
 800230a:	e005      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d15c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800231e:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01f      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	d019      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002346:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fc43 	bl	8000c04 <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002380:	e00b      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fc3f 	bl	8000c04 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d902      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	74fb      	strb	r3, [r7, #19]
            break;
 8002398:	e006      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ec      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023be:	4904      	ldr	r1, [pc, #16]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023c6:	e009      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
 80023cc:	e006      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023dc:	7c7b      	ldrb	r3, [r7, #17]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a9d      	ldr	r2, [pc, #628]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fa:	4b98      	ldr	r3, [pc, #608]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f023 0203 	bic.w	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	4994      	ldr	r1, [pc, #592]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 020c 	bic.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	498c      	ldr	r1, [pc, #560]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243e:	4b87      	ldr	r3, [pc, #540]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4983      	ldr	r1, [pc, #524]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	497b      	ldr	r1, [pc, #492]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	4972      	ldr	r1, [pc, #456]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a4:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	496a      	ldr	r1, [pc, #424]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024c6:	4b65      	ldr	r3, [pc, #404]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	4961      	ldr	r1, [pc, #388]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024e8:	4b5c      	ldr	r3, [pc, #368]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	4959      	ldr	r1, [pc, #356]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800250a:	4b54      	ldr	r3, [pc, #336]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002518:	4950      	ldr	r1, [pc, #320]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	4948      	ldr	r1, [pc, #288]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254e:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	493f      	ldr	r1, [pc, #252]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d028      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002570:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257e:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258e:	d106      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a31      	ldr	r2, [pc, #196]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259a:	60d3      	str	r3, [r2, #12]
 800259c:	e011      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f8c8 	bl	8002744 <RCCEx_PLLSAI1_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d028      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	491f      	ldr	r1, [pc, #124]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ec:	d106      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f8:	60d3      	str	r3, [r2, #12]
 80025fa:	e011      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002604:	d10c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f899 	bl	8002744 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d02b      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264a:	d109      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a02      	ldr	r2, [pc, #8]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002656:	60d3      	str	r3, [r2, #12]
 8002658:	e014      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002668:	d10c      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
 800266e:	2101      	movs	r1, #1
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f867 	bl	8002744 <RCCEx_PLLSAI1_Config>
 8002676:	4603      	mov	r3, r0
 8002678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267a:	7cfb      	ldrb	r3, [r7, #19]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d02f      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	4928      	ldr	r1, [pc, #160]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ae:	d10d      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	2102      	movs	r1, #2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f844 	bl	8002744 <RCCEx_PLLSAI1_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d014      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	74bb      	strb	r3, [r7, #18]
 80026ca:	e011      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3320      	adds	r3, #32
 80026da:	2102      	movs	r1, #2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f925 	bl	800292c <RCCEx_PLLSAI2_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800270a:	490d      	ldr	r1, [pc, #52]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272e:	4904      	ldr	r1, [pc, #16]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002736:	7cbb      	ldrb	r3, [r7, #18]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000

08002744 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002752:	4b75      	ldr	r3, [pc, #468]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800275e:	4b72      	ldr	r3, [pc, #456]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
       ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002776:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
       ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d047      	beq.n	800281a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e044      	b.n	800281a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d018      	beq.n	80027ca <RCCEx_PLLSAI1_Config+0x86>
 8002798:	2b03      	cmp	r3, #3
 800279a:	d825      	bhi.n	80027e8 <RCCEx_PLLSAI1_Config+0xa4>
 800279c:	2b01      	cmp	r3, #1
 800279e:	d002      	beq.n	80027a6 <RCCEx_PLLSAI1_Config+0x62>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d009      	beq.n	80027b8 <RCCEx_PLLSAI1_Config+0x74>
 80027a4:	e020      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a6:	4b60      	ldr	r3, [pc, #384]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11d      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e01a      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b8:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e013      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ca:	4b57      	ldr	r3, [pc, #348]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d6:	4b54      	ldr	r3, [pc, #336]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e6:	e006      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e004      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	430b      	orrs	r3, r1
 8002814:	4944      	ldr	r1, [pc, #272]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d17d      	bne.n	800291c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a40      	ldr	r2, [pc, #256]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800282a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe f9ea 	bl	8000c04 <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002832:	e009      	b.n	8002848 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002834:	f7fe f9e6 	bl	8000c04 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	73fb      	strb	r3, [r7, #15]
        break;
 8002846:	e005      	b.n	8002854 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002848:	4b37      	ldr	r3, [pc, #220]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ef      	bne.n	8002834 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d160      	bne.n	800291c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	0211      	lsls	r1, r2, #8
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	0912      	lsrs	r2, r2, #4
 8002878:	0452      	lsls	r2, r2, #17
 800287a:	430a      	orrs	r2, r1
 800287c:	492a      	ldr	r1, [pc, #168]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	610b      	str	r3, [r1, #16]
 8002882:	e027      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d112      	bne.n	80028b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002892:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	0211      	lsls	r1, r2, #8
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6912      	ldr	r2, [r2, #16]
 80028a0:	0852      	lsrs	r2, r2, #1
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0552      	lsls	r2, r2, #21
 80028a6:	430a      	orrs	r2, r1
 80028a8:	491f      	ldr	r1, [pc, #124]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	610b      	str	r3, [r1, #16]
 80028ae:	e011      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6892      	ldr	r2, [r2, #8]
 80028c0:	0211      	lsls	r1, r2, #8
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6952      	ldr	r2, [r2, #20]
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0652      	lsls	r2, r2, #25
 80028cc:	430a      	orrs	r2, r1
 80028ce:	4916      	ldr	r1, [pc, #88]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe f990 	bl	8000c04 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e6:	e009      	b.n	80028fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e8:	f7fe f98c 	bl	8000c04 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d902      	bls.n	80028fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	73fb      	strb	r3, [r7, #15]
          break;
 80028fa:	e005      	b.n	8002908 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ef      	beq.n	80028e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000

0800292c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d018      	beq.n	8002978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002946:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d10d      	bne.n	8002972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
       ||
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
       ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d047      	beq.n	8002a02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	e044      	b.n	8002a02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d018      	beq.n	80029b2 <RCCEx_PLLSAI2_Config+0x86>
 8002980:	2b03      	cmp	r3, #3
 8002982:	d825      	bhi.n	80029d0 <RCCEx_PLLSAI2_Config+0xa4>
 8002984:	2b01      	cmp	r3, #1
 8002986:	d002      	beq.n	800298e <RCCEx_PLLSAI2_Config+0x62>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d009      	beq.n	80029a0 <RCCEx_PLLSAI2_Config+0x74>
 800298c:	e020      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800298e:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11d      	bne.n	80029d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299e:	e01a      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d116      	bne.n	80029da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b0:	e013      	b.n	80029da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ce:	e006      	b.n	80029de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      break;
 80029d4:	e004      	b.n	80029e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029de:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	430b      	orrs	r3, r1
 80029fc:	4939      	ldr	r1, [pc, #228]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d167      	bne.n	8002ad8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a35      	ldr	r2, [pc, #212]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe f8f6 	bl	8000c04 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a1a:	e009      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a1c:	f7fe f8f2 	bl	8000c04 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a2e:	e005      	b.n	8002a3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ef      	bne.n	8002a1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d14a      	bne.n	8002ad8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6892      	ldr	r2, [r2, #8]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68d2      	ldr	r2, [r2, #12]
 8002a5e:	0912      	lsrs	r2, r2, #4
 8002a60:	0452      	lsls	r2, r2, #17
 8002a62:	430a      	orrs	r2, r1
 8002a64:	491f      	ldr	r1, [pc, #124]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	614b      	str	r3, [r1, #20]
 8002a6a:	e011      	b.n	8002a90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6892      	ldr	r2, [r2, #8]
 8002a7c:	0211      	lsls	r1, r2, #8
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6912      	ldr	r2, [r2, #16]
 8002a82:	0852      	lsrs	r2, r2, #1
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0652      	lsls	r2, r2, #25
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe f8b2 	bl	8000c04 <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa2:	e009      	b.n	8002ab8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa4:	f7fe f8ae 	bl	8000c04 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ab6:	e005      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ef      	beq.n	8002aa4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e040      	b.n	8002b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fe92 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fdea 	bl	8003708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb2f 	bl	8003198 <UART_SetConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e01b      	b.n	8002b7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fe69 	bl	800384c <UART_CheckIdleState>
 8002b7a:	4603      	mov	r3, r0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0ba      	sub	sp, #232	; 0xe8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002baa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002bae:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d115      	bne.n	8002bec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00f      	beq.n	8002bec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 82ae 	beq.w	800313e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
      }
      return;
 8002bea:	e2a8      	b.n	800313e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8117 	beq.w	8002e24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c06:	4b85      	ldr	r3, [pc, #532]	; (8002e1c <HAL_UART_IRQHandler+0x298>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 810a 	beq.w	8002e24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d011      	beq.n	8002c40 <HAL_UART_IRQHandler+0xbc>
 8002c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d011      	beq.n	8002c70 <HAL_UART_IRQHandler+0xec>
 8002c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d011      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x11c>
 8002c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c96:	f043 0202 	orr.w	r2, r3, #2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd2:	f043 0208 	orr.w	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_UART_IRQHandler+0x18a>
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8214 	beq.w	8003142 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d005      	beq.n	8002d66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d04f      	beq.n	8002e06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fe7f 	bl	8003a6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d141      	bne.n	8002dfe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3308      	adds	r3, #8
 8002d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3308      	adds	r3, #8
 8002da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d9      	bne.n	8002d7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <HAL_UART_IRQHandler+0x29c>)
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f960 	bl	80010a0 <HAL_DMA_Abort_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df4:	e00f      	b.n	8002e16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9b8 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	e00b      	b.n	8002e16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9b4 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e007      	b.n	8002e16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9b0 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e14:	e195      	b.n	8003142 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e16:	bf00      	nop
    return;
 8002e18:	e193      	b.n	8003142 <HAL_UART_IRQHandler+0x5be>
 8002e1a:	bf00      	nop
 8002e1c:	04000120 	.word	0x04000120
 8002e20:	08003b33 	.word	0x08003b33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	f040 814e 	bne.w	80030ca <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8147 	beq.w	80030ca <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8140 	beq.w	80030ca <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2210      	movs	r2, #16
 8002e50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	f040 80b8 	bne.w	8002fd2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8167 	beq.w	8003146 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 815f 	bcs.w	8003146 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 8086 	bne.w	8002fb0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ed2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1da      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e1      	bne.n	8002eee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e3      	bne.n	8002f2a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e4      	bne.n	8002f70 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe f83a 	bl	8001024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8d8 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fd0:	e0b9      	b.n	8003146 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80ab 	beq.w	800314a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a6 	beq.w	800314a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
 8003022:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e4      	bne.n	8002ffe <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	623b      	str	r3, [r7, #32]
   return(result);
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3308      	adds	r3, #8
 8003054:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003058:	633a      	str	r2, [r7, #48]	; 0x30
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e3      	bne.n	8003034 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	60fb      	str	r3, [r7, #12]
   return(result);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f023 0310 	bic.w	r3, r3, #16
 8003094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	617b      	str	r3, [r7, #20]
   return(result);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e4      	bne.n	8003080 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f85c 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030c8:	e03f      	b.n	800314a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00e      	beq.n	80030f4 <HAL_UART_IRQHandler+0x570>
 80030d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fd60 	bl	8003bb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030f2:	e02d      	b.n	8003150 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01c      	beq.n	800314e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
    }
    return;
 800311c:	e017      	b.n	800314e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d012      	beq.n	8003150 <HAL_UART_IRQHandler+0x5cc>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fd11 	bl	8003b5e <UART_EndTransmit_IT>
    return;
 800313c:	e008      	b.n	8003150 <HAL_UART_IRQHandler+0x5cc>
      return;
 800313e:	bf00      	nop
 8003140:	e006      	b.n	8003150 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_UART_IRQHandler+0x5cc>
      return;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_UART_IRQHandler+0x5cc>
    return;
 800314e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003150:	37e8      	adds	r7, #232	; 0xe8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop

08003158 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b08a      	sub	sp, #40	; 0x28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4313      	orrs	r3, r2
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4ba4      	ldr	r3, [pc, #656]	; (8003458 <UART_SetConfig+0x2c0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a99      	ldr	r2, [pc, #612]	; (800345c <UART_SetConfig+0x2c4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4313      	orrs	r3, r2
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a90      	ldr	r2, [pc, #576]	; (8003460 <UART_SetConfig+0x2c8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d126      	bne.n	8003270 <UART_SetConfig+0xd8>
 8003222:	4b90      	ldr	r3, [pc, #576]	; (8003464 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d81b      	bhi.n	8003268 <UART_SetConfig+0xd0>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <UART_SetConfig+0xa0>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003249 	.word	0x08003249
 800323c:	08003259 	.word	0x08003259
 8003240:	08003251 	.word	0x08003251
 8003244:	08003261 	.word	0x08003261
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324e:	e116      	b.n	800347e <UART_SetConfig+0x2e6>
 8003250:	2302      	movs	r3, #2
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e112      	b.n	800347e <UART_SetConfig+0x2e6>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e10e      	b.n	800347e <UART_SetConfig+0x2e6>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e10a      	b.n	800347e <UART_SetConfig+0x2e6>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e106      	b.n	800347e <UART_SetConfig+0x2e6>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7c      	ldr	r2, [pc, #496]	; (8003468 <UART_SetConfig+0x2d0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d138      	bne.n	80032ec <UART_SetConfig+0x154>
 800327a:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <UART_SetConfig+0x2cc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d82d      	bhi.n	80032e4 <UART_SetConfig+0x14c>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <UART_SetConfig+0xf8>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032c5 	.word	0x080032c5
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032e5 	.word	0x080032e5
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032e5 	.word	0x080032e5
 80032ac:	080032e5 	.word	0x080032e5
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e0d8      	b.n	800347e <UART_SetConfig+0x2e6>
 80032cc:	2302      	movs	r3, #2
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e0d4      	b.n	800347e <UART_SetConfig+0x2e6>
 80032d4:	2304      	movs	r3, #4
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e0d0      	b.n	800347e <UART_SetConfig+0x2e6>
 80032dc:	2308      	movs	r3, #8
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e0cc      	b.n	800347e <UART_SetConfig+0x2e6>
 80032e4:	2310      	movs	r3, #16
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e0c8      	b.n	800347e <UART_SetConfig+0x2e6>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5e      	ldr	r2, [pc, #376]	; (800346c <UART_SetConfig+0x2d4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d125      	bne.n	8003342 <UART_SetConfig+0x1aa>
 80032f6:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <UART_SetConfig+0x2cc>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d016      	beq.n	8003332 <UART_SetConfig+0x19a>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d818      	bhi.n	800333a <UART_SetConfig+0x1a2>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d00a      	beq.n	8003322 <UART_SetConfig+0x18a>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d814      	bhi.n	800333a <UART_SetConfig+0x1a2>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <UART_SetConfig+0x182>
 8003314:	2b10      	cmp	r3, #16
 8003316:	d008      	beq.n	800332a <UART_SetConfig+0x192>
 8003318:	e00f      	b.n	800333a <UART_SetConfig+0x1a2>
 800331a:	2300      	movs	r3, #0
 800331c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003320:	e0ad      	b.n	800347e <UART_SetConfig+0x2e6>
 8003322:	2302      	movs	r3, #2
 8003324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003328:	e0a9      	b.n	800347e <UART_SetConfig+0x2e6>
 800332a:	2304      	movs	r3, #4
 800332c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003330:	e0a5      	b.n	800347e <UART_SetConfig+0x2e6>
 8003332:	2308      	movs	r3, #8
 8003334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003338:	e0a1      	b.n	800347e <UART_SetConfig+0x2e6>
 800333a:	2310      	movs	r3, #16
 800333c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003340:	e09d      	b.n	800347e <UART_SetConfig+0x2e6>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <UART_SetConfig+0x2d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d125      	bne.n	8003398 <UART_SetConfig+0x200>
 800334c:	4b45      	ldr	r3, [pc, #276]	; (8003464 <UART_SetConfig+0x2cc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003356:	2bc0      	cmp	r3, #192	; 0xc0
 8003358:	d016      	beq.n	8003388 <UART_SetConfig+0x1f0>
 800335a:	2bc0      	cmp	r3, #192	; 0xc0
 800335c:	d818      	bhi.n	8003390 <UART_SetConfig+0x1f8>
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d00a      	beq.n	8003378 <UART_SetConfig+0x1e0>
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d814      	bhi.n	8003390 <UART_SetConfig+0x1f8>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <UART_SetConfig+0x1d8>
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d008      	beq.n	8003380 <UART_SetConfig+0x1e8>
 800336e:	e00f      	b.n	8003390 <UART_SetConfig+0x1f8>
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	e082      	b.n	800347e <UART_SetConfig+0x2e6>
 8003378:	2302      	movs	r3, #2
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e07e      	b.n	800347e <UART_SetConfig+0x2e6>
 8003380:	2304      	movs	r3, #4
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e07a      	b.n	800347e <UART_SetConfig+0x2e6>
 8003388:	2308      	movs	r3, #8
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e076      	b.n	800347e <UART_SetConfig+0x2e6>
 8003390:	2310      	movs	r3, #16
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e072      	b.n	800347e <UART_SetConfig+0x2e6>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a35      	ldr	r2, [pc, #212]	; (8003474 <UART_SetConfig+0x2dc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d12a      	bne.n	80033f8 <UART_SetConfig+0x260>
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <UART_SetConfig+0x2cc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b0:	d01a      	beq.n	80033e8 <UART_SetConfig+0x250>
 80033b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b6:	d81b      	bhi.n	80033f0 <UART_SetConfig+0x258>
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d00c      	beq.n	80033d8 <UART_SetConfig+0x240>
 80033be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c2:	d815      	bhi.n	80033f0 <UART_SetConfig+0x258>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <UART_SetConfig+0x238>
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033cc:	d008      	beq.n	80033e0 <UART_SetConfig+0x248>
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x258>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e052      	b.n	800347e <UART_SetConfig+0x2e6>
 80033d8:	2302      	movs	r3, #2
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e04e      	b.n	800347e <UART_SetConfig+0x2e6>
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e04a      	b.n	800347e <UART_SetConfig+0x2e6>
 80033e8:	2308      	movs	r3, #8
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e046      	b.n	800347e <UART_SetConfig+0x2e6>
 80033f0:	2310      	movs	r3, #16
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	e042      	b.n	800347e <UART_SetConfig+0x2e6>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a17      	ldr	r2, [pc, #92]	; (800345c <UART_SetConfig+0x2c4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d13a      	bne.n	8003478 <UART_SetConfig+0x2e0>
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <UART_SetConfig+0x2cc>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800340c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003410:	d01a      	beq.n	8003448 <UART_SetConfig+0x2b0>
 8003412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003416:	d81b      	bhi.n	8003450 <UART_SetConfig+0x2b8>
 8003418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341c:	d00c      	beq.n	8003438 <UART_SetConfig+0x2a0>
 800341e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003422:	d815      	bhi.n	8003450 <UART_SetConfig+0x2b8>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <UART_SetConfig+0x298>
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d008      	beq.n	8003440 <UART_SetConfig+0x2a8>
 800342e:	e00f      	b.n	8003450 <UART_SetConfig+0x2b8>
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003436:	e022      	b.n	800347e <UART_SetConfig+0x2e6>
 8003438:	2302      	movs	r3, #2
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343e:	e01e      	b.n	800347e <UART_SetConfig+0x2e6>
 8003440:	2304      	movs	r3, #4
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003446:	e01a      	b.n	800347e <UART_SetConfig+0x2e6>
 8003448:	2308      	movs	r3, #8
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344e:	e016      	b.n	800347e <UART_SetConfig+0x2e6>
 8003450:	2310      	movs	r3, #16
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003456:	e012      	b.n	800347e <UART_SetConfig+0x2e6>
 8003458:	efff69f3 	.word	0xefff69f3
 800345c:	40008000 	.word	0x40008000
 8003460:	40013800 	.word	0x40013800
 8003464:	40021000 	.word	0x40021000
 8003468:	40004400 	.word	0x40004400
 800346c:	40004800 	.word	0x40004800
 8003470:	40004c00 	.word	0x40004c00
 8003474:	40005000 	.word	0x40005000
 8003478:	2310      	movs	r3, #16
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a9f      	ldr	r2, [pc, #636]	; (8003700 <UART_SetConfig+0x568>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d17a      	bne.n	800357e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800348c:	2b08      	cmp	r3, #8
 800348e:	d824      	bhi.n	80034da <UART_SetConfig+0x342>
 8003490:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <UART_SetConfig+0x300>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034db 	.word	0x080034db
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034db 	.word	0x080034db
 80034a8:	080034cb 	.word	0x080034cb
 80034ac:	080034db 	.word	0x080034db
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034db 	.word	0x080034db
 80034b8:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7fe fdcc 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 80034c0:	61f8      	str	r0, [r7, #28]
        break;
 80034c2:	e010      	b.n	80034e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <UART_SetConfig+0x56c>)
 80034c6:	61fb      	str	r3, [r7, #28]
        break;
 80034c8:	e00d      	b.n	80034e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7fe fd2d 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 80034ce:	61f8      	str	r0, [r7, #28]
        break;
 80034d0:	e009      	b.n	80034e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e005      	b.n	80034e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80fb 	beq.w	80036e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d305      	bcc.n	800350a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	429a      	cmp	r2, r3
 8003508:	d903      	bls.n	8003512 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003510:	e0e8      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2200      	movs	r2, #0
 8003516:	461c      	mov	r4, r3
 8003518:	4615      	mov	r5, r2
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	022b      	lsls	r3, r5, #8
 8003524:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003528:	0222      	lsls	r2, r4, #8
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	6849      	ldr	r1, [r1, #4]
 800352e:	0849      	lsrs	r1, r1, #1
 8003530:	2000      	movs	r0, #0
 8003532:	4688      	mov	r8, r1
 8003534:	4681      	mov	r9, r0
 8003536:	eb12 0a08 	adds.w	sl, r2, r8
 800353a:	eb43 0b09 	adc.w	fp, r3, r9
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354c:	4650      	mov	r0, sl
 800354e:	4659      	mov	r1, fp
 8003550:	f7fc fe8e 	bl	8000270 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4613      	mov	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003562:	d308      	bcc.n	8003576 <UART_SetConfig+0x3de>
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356a:	d204      	bcs.n	8003576 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	e0b6      	b.n	80036e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800357c:	e0b2      	b.n	80036e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003586:	d15e      	bne.n	8003646 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800358c:	2b08      	cmp	r3, #8
 800358e:	d828      	bhi.n	80035e2 <UART_SetConfig+0x44a>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x400>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035cd 	.word	0x080035cd
 80035a4:	080035e3 	.word	0x080035e3
 80035a8:	080035d3 	.word	0x080035d3
 80035ac:	080035e3 	.word	0x080035e3
 80035b0:	080035e3 	.word	0x080035e3
 80035b4:	080035e3 	.word	0x080035e3
 80035b8:	080035db 	.word	0x080035db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe fd4c 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 80035c0:	61f8      	str	r0, [r7, #28]
        break;
 80035c2:	e014      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7fe fd5e 	bl	8002084 <HAL_RCC_GetPCLK2Freq>
 80035c8:	61f8      	str	r0, [r7, #28]
        break;
 80035ca:	e010      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <UART_SetConfig+0x56c>)
 80035ce:	61fb      	str	r3, [r7, #28]
        break;
 80035d0:	e00d      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7fe fca9 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 80035d6:	61f8      	str	r0, [r7, #28]
        break;
 80035d8:	e009      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035de:	61fb      	str	r3, [r7, #28]
        break;
 80035e0:	e005      	b.n	80035ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d077      	beq.n	80036e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005a      	lsls	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	441a      	add	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d916      	bls.n	800363e <UART_SetConfig+0x4a6>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d212      	bcs.n	800363e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f023 030f 	bic.w	r3, r3, #15
 8003620:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	b29a      	uxth	r2, r3
 800362e:	8afb      	ldrh	r3, [r7, #22]
 8003630:	4313      	orrs	r3, r2
 8003632:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	8afa      	ldrh	r2, [r7, #22]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e052      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003644:	e04e      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800364a:	2b08      	cmp	r3, #8
 800364c:	d827      	bhi.n	800369e <UART_SetConfig+0x506>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x4bc>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003679 	.word	0x08003679
 8003658:	08003681 	.word	0x08003681
 800365c:	08003689 	.word	0x08003689
 8003660:	0800369f 	.word	0x0800369f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800369f 	.word	0x0800369f
 800366c:	0800369f 	.word	0x0800369f
 8003670:	0800369f 	.word	0x0800369f
 8003674:	08003697 	.word	0x08003697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fcee 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 800367c:	61f8      	str	r0, [r7, #28]
        break;
 800367e:	e014      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe fd00 	bl	8002084 <HAL_RCC_GetPCLK2Freq>
 8003684:	61f8      	str	r0, [r7, #28]
        break;
 8003686:	e010      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <UART_SetConfig+0x56c>)
 800368a:	61fb      	str	r3, [r7, #28]
        break;
 800368c:	e00d      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368e:	f7fe fc4b 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8003692:	61f8      	str	r0, [r7, #28]
        break;
 8003694:	e009      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369a:	61fb      	str	r3, [r7, #28]
        break;
 800369c:	e005      	b.n	80036aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036a8:	bf00      	nop
    }

    if (pclk != 0U)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d019      	beq.n	80036e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	085a      	lsrs	r2, r3, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	441a      	add	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0f      	cmp	r3, #15
 80036c8:	d909      	bls.n	80036de <UART_SetConfig+0x546>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d205      	bcs.n	80036de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e002      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	40008000 	.word	0x40008000
 8003704:	00f42400 	.word	0x00f42400

08003708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01a      	beq.n	800381e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003806:	d10a      	bne.n	800381e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b098      	sub	sp, #96	; 0x60
 8003850:	af02      	add	r7, sp, #8
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800385c:	f7fd f9d2 	bl	8000c04 <HAL_GetTick>
 8003860:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b08      	cmp	r3, #8
 800386e:	d12e      	bne.n	80038ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f88c 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d021      	beq.n	80038ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e062      	b.n	8003994 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d149      	bne.n	8003970 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e4:	2200      	movs	r2, #0
 80038e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f856 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03c      	beq.n	8003970 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	623b      	str	r3, [r7, #32]
   return(result);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
 8003916:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	60fb      	str	r3, [r7, #12]
   return(result);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003948:	61fa      	str	r2, [r7, #28]
 800394a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	617b      	str	r3, [r7, #20]
   return(result);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e011      	b.n	8003994 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3758      	adds	r7, #88	; 0x58
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ac:	e049      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d045      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fd f925 	bl	8000c04 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <UART_WaitOnFlagUntilTimeout+0x30>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e048      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d031      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d110      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f838 	bl	8003a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2208      	movs	r2, #8
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e029      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1c:	d111      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f81e 	bl	8003a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e00f      	b.n	8003a62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d0a6      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b095      	sub	sp, #84	; 0x54
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40
 8003a92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e6      	bne.n	8003a72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d118      	bne.n	8003b12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e6      	bne.n	8003ae0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b26:	bf00      	nop
 8003b28:	3754      	adds	r7, #84	; 0x54
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff fb0b 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	613b      	str	r3, [r7, #16]
   return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fad7 	bl	8003158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003baa:	bf00      	nop
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003bd8:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003bda:	461a      	mov	r2, r3
        err.type, err.code);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	4806      	ldr	r0, [pc, #24]	; (8003c00 <ai_log_err+0x38>)
 8003be6:	f002 fbdb 	bl	80063a0 <iprintf>
 8003bea:	e008      	b.n	8003bfe <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003bec:	793b      	ldrb	r3, [r7, #4]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <ai_log_err+0x3c>)
 8003bfa:	f002 fbd1 	bl	80063a0 <iprintf>

  do {} while (1);
 8003bfe:	e7fe      	b.n	8003bfe <ai_log_err+0x36>
 8003c00:	08007280 	.word	0x08007280
 8003c04:	080072b4 	.word	0x080072b4

08003c08 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8003c10:	2200      	movs	r2, #0
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4828      	ldr	r0, [pc, #160]	; (8003cb8 <ai_boostrap+0xb0>)
 8003c16:	f000 f9c5 	bl	8003fa4 <ai_network_create_and_init>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8003c1e:	7b3b      	ldrb	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8003c24:	4925      	ldr	r1, [pc, #148]	; (8003cbc <ai_boostrap+0xb4>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ffce 	bl	8003bc8 <ai_log_err>
    return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	e03e      	b.n	8003cb0 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <ai_boostrap+0xb0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa27 	bl	800408c <ai_network_inputs_get>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <ai_boostrap+0xb8>)
 8003c42:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <ai_boostrap+0xb0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fa38 	bl	80040c0 <ai_network_outputs_get>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <ai_boostrap+0xbc>)
 8003c54:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e00f      	b.n	8003c7c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <ai_boostrap+0xb8>)
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <ai_boostrap+0xc0>)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	ddec      	ble.n	8003c5c <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e00f      	b.n	8003ca8 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <ai_boostrap+0xbc>)
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	490c      	ldr	r1, [pc, #48]	; (8003ccc <ai_boostrap+0xc4>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	ddec      	ble.n	8003c88 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	2000078c 	.word	0x2000078c
 8003cbc:	080072e4 	.word	0x080072e4
 8003cc0:	20000790 	.word	0x20000790
 8003cc4:	20000794 	.word	0x20000794
 8003cc8:	20000690 	.word	0x20000690
 8003ccc:	20000694 	.word	0x20000694

08003cd0 <ai_run>:

static int ai_run(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <ai_run+0x44>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <ai_run+0x48>)
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <ai_run+0x4c>)
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa42 	bl	800416c <ai_network_run>
 8003ce8:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d00c      	beq.n	8003d0a <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <ai_run+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f933 	bl	8003f60 <ai_network_get_error>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4908      	ldr	r1, [pc, #32]	; (8003d20 <ai_run+0x50>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff62 	bl	8003bc8 <ai_log_err>
        "ai_network_run");
    return -1;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	e000      	b.n	8003d0c <ai_run+0x3c>
  }

  return 0;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	2000078c 	.word	0x2000078c
 8003d18:	20000790 	.word	0x20000790
 8003d1c:	20000794 	.word	0x20000794
 8003d20:	08007300 	.word	0x08007300

08003d24 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <post_process>:

int post_process(ai_i8* data[])
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003d54:	4803      	ldr	r0, [pc, #12]	; (8003d64 <MX_X_CUBE_AI_Init+0x14>)
 8003d56:	f002 fb89 	bl	800646c <puts>

  ai_boostrap(data_activations0);
 8003d5a:	4803      	ldr	r0, [pc, #12]	; (8003d68 <MX_X_CUBE_AI_Init+0x18>)
 8003d5c:	f7ff ff54 	bl	8003c08 <ai_boostrap>
    /* USER CODE END 5 */
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	08007310 	.word	0x08007310
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8003d78:	4816      	ldr	r0, [pc, #88]	; (8003dd4 <MX_X_CUBE_AI_Process+0x68>)
 8003d7a:	f002 fb77 	bl	800646c <puts>

  if (network) {
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <MX_X_CUBE_AI_Process+0x6c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8003d86:	4815      	ldr	r0, [pc, #84]	; (8003ddc <MX_X_CUBE_AI_Process+0x70>)
 8003d88:	f7ff ffcc 	bl	8003d24 <acquire_and_process_data>
 8003d8c:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8003d94:	f7ff ff9c 	bl	8003cd0 <ai_run>
 8003d98:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8003da0:	480f      	ldr	r0, [pc, #60]	; (8003de0 <MX_X_CUBE_AI_Process+0x74>)
 8003da2:	f7ff ffca 	bl	8003d3a <post_process>
 8003da6:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0eb      	beq.n	8003d86 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8003db4:	2311      	movs	r3, #17
 8003db6:	703b      	strb	r3, [r7, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	f362 231f 	bfi	r3, r2, #8, #24
 8003dc0:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8003dc2:	4908      	ldr	r1, [pc, #32]	; (8003de4 <MX_X_CUBE_AI_Process+0x78>)
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f7ff feff 	bl	8003bc8 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	08007330 	.word	0x08007330
 8003dd8:	2000078c 	.word	0x2000078c
 8003ddc:	20000690 	.word	0x20000690
 8003de0:	20000694 	.word	0x20000694
 8003de4:	0800734c 	.word	0x0800734c

08003de8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	4820      	ldr	r0, [pc, #128]	; (8003e78 <network_configure_activations+0x90>)
 8003df8:	f000 fa96 	bl	8004328 <ai_platform_get_activations_map>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02f      	beq.n	8003e62 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <network_configure_activations+0x90>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <network_configure_activations+0x94>)
 8003e08:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <network_configure_activations+0x90>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <network_configure_activations+0x94>)
 8003e10:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <network_configure_activations+0x90>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	336c      	adds	r3, #108	; 0x6c
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <network_configure_activations+0x98>)
 8003e1a:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <network_configure_activations+0x90>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	336c      	adds	r3, #108	; 0x6c
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <network_configure_activations+0x98>)
 8003e24:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <network_configure_activations+0x90>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	336c      	adds	r3, #108	; 0x6c
 8003e2c:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <network_configure_activations+0x9c>)
 8003e2e:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <network_configure_activations+0x90>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	336c      	adds	r3, #108	; 0x6c
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <network_configure_activations+0x9c>)
 8003e38:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <network_configure_activations+0x90>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <network_configure_activations+0xa0>)
 8003e40:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <network_configure_activations+0x90>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <network_configure_activations+0xa0>)
 8003e48:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <network_configure_activations+0x90>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <network_configure_activations+0xa4>)
 8003e52:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <network_configure_activations+0x90>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <network_configure_activations+0xa4>)
 8003e5c:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e005      	b.n	8003e6e <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003e62:	2213      	movs	r2, #19
 8003e64:	2130      	movs	r1, #48	; 0x30
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fb42 	bl	80044f0 <ai_platform_network_set_error>
  return false;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000798 	.word	0x20000798
 8003e7c:	20000010 	.word	0x20000010
 8003e80:	20000020 	.word	0x20000020
 8003e84:	20000030 	.word	0x20000030
 8003e88:	20000040 	.word	0x20000040
 8003e8c:	20000050 	.word	0x20000050

08003e90 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	482b      	ldr	r0, [pc, #172]	; (8003f4c <network_configure_weights+0xbc>)
 8003ea0:	f000 f9ee 	bl	8004280 <ai_platform_get_weights_map>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d045      	beq.n	8003f36 <network_configure_weights+0xa6>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003eaa:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <network_configure_weights+0xc0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eb2:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <network_configure_weights+0xc0>)
 8003eb4:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <network_configure_weights+0xbc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <network_configure_weights+0xc0>)
 8003ebc:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8003ebe:	4b23      	ldr	r3, [pc, #140]	; (8003f4c <network_configure_weights+0xbc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <network_configure_weights+0xc0>)
 8003ec4:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <network_configure_weights+0xc4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <network_configure_weights+0xc4>)
 8003ed0:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <network_configure_weights+0xbc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <network_configure_weights+0xc4>)
 8003edc:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <network_configure_weights+0xbc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <network_configure_weights+0xc4>)
 8003ee8:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <network_configure_weights+0xc8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ef2:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <network_configure_weights+0xc8>)
 8003ef4:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <network_configure_weights+0xbc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <network_configure_weights+0xc8>)
 8003f00:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <network_configure_weights+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <network_configure_weights+0xc8>)
 8003f0c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <network_configure_weights+0xcc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f16:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <network_configure_weights+0xcc>)
 8003f18:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <network_configure_weights+0xbc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <network_configure_weights+0xcc>)
 8003f24:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <network_configure_weights+0xbc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8003f2e:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <network_configure_weights+0xcc>)
 8003f30:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e005      	b.n	8003f42 <network_configure_weights+0xb2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003f36:	2212      	movs	r2, #18
 8003f38:	2130      	movs	r1, #48	; 0x30
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fad8 	bl	80044f0 <ai_platform_network_set_error>
  return false;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000079c 	.word	0x2000079c
 8003f50:	20000060 	.word	0x20000060
 8003f54:	20000070 	.word	0x20000070
 8003f58:	20000080 	.word	0x20000080
 8003f5c:	20000090 	.word	0x20000090

08003f60 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa53 	bl	8004414 <ai_platform_network_get_error>
 8003f6e:	4603      	mov	r3, r0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003f82:	2300      	movs	r3, #0
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2305      	movs	r3, #5
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <ai_network_create+0x28>)
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fc59 	bl	8004848 <ai_platform_network_create>
 8003f96:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200004b4 	.word	0x200004b4

08003fa4 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b096      	sub	sp, #88	; 0x58
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ffe0 	bl	8003f78 <ai_network_create>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8003fbc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <ai_network_create_and_init+0x24>
        return err;
 8003fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc6:	e05d      	b.n	8004084 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f8dd 	bl	800418c <ai_network_data_params_get>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f083 0301 	eor.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ffbc 	bl	8003f60 <ai_network_get_error>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8003fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fee:	e049      	b.n	8004084 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffa:	e00e      	b.n	800401a <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4413      	add	r3, r2
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	330c      	adds	r3, #12
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f922 	bl	8004258 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004016:	3301      	adds	r3, #1
 8004018:	657b      	str	r3, [r7, #84]	; 0x54
 800401a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800401c:	461a      	mov	r2, r3
 800401e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004020:	4293      	cmp	r3, r2
 8004022:	dbeb      	blt.n	8003ffc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800402a:	2300      	movs	r3, #0
 800402c:	653b      	str	r3, [r7, #80]	; 0x50
 800402e:	e00e      	b.n	800404e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004030:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	3304      	adds	r3, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f908 	bl	8004258 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	3301      	adds	r3, #1
 800404c:	653b      	str	r3, [r7, #80]	; 0x50
 800404e:	8b7b      	ldrh	r3, [r7, #26]
 8004050:	461a      	mov	r2, r3
 8004052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004054:	4293      	cmp	r3, r2
 8004056:	dbeb      	blt.n	8004030 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f107 0214 	add.w	r2, r7, #20
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f846 	bl	80040f4 <ai_network_init>
 8004068:	4603      	mov	r3, r0
 800406a:	f083 0301 	eor.w	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff71 	bl	8003f60 <ai_network_get_error>
 800407e:	4603      	mov	r3, r0
 8004080:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8004082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004084:	4618      	mov	r0, r3
 8004086:	3758      	adds	r7, #88	; 0x58
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <ai_network_inputs_get+0x2c>)
 800409e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a06      	ldr	r2, [pc, #24]	; (80040bc <ai_network_inputs_get+0x30>)
 80040a4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fa27 	bl	80044fc <ai_platform_inputs_get>
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200004b4 	.word	0x200004b4
 80040bc:	a1c00100 	.word	0xa1c00100

080040c0 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <ai_network_outputs_get+0x2c>)
 80040d2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a06      	ldr	r2, [pc, #24]	; (80040f0 <ai_network_outputs_get+0x30>)
 80040d8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fae3 	bl	80046a8 <ai_platform_outputs_get>
 80040e2:	4603      	mov	r3, r0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200004b4 	.word	0x200004b4
 80040f0:	a1c00100 	.word	0xa1c00100

080040f4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fc77 	bl	80049f4 <ai_platform_network_init>
 8004106:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <ai_network_init+0x1e>
 800410e:	2300      	movs	r3, #0
 8004110:	e028      	b.n	8004164 <ai_network_init+0x70>

  ai_bool ok = true;
 8004112:	2301      	movs	r3, #1
 8004114:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff feb9 	bl	8003e90 <network_configure_weights>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fe58 	bl	8003de8 <network_configure_activations>
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fd40 	bl	8004bd0 <ai_platform_network_post_init>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004162:	7afb      	ldrb	r3, [r7, #11]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fdaf 	bl	8004ce0 <ai_platform_network_process>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <ai_network_data_params_get+0x12>
 800419a:	2300      	movs	r3, #0
 800419c:	e016      	b.n	80041cc <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800419e:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <ai_network_data_params_get+0x48>)
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041a8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <ai_network_data_params_get+0x4c>)
 80041ae:	f107 0308 	add.w	r3, r7, #8
 80041b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041b6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80041ba:	f107 0210 	add.w	r2, r7, #16
 80041be:	f107 0308 	add.w	r3, r7, #8
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f903 	bl	80043d0 <ai_platform_bind_network_params>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	08007380 	.word	0x08007380
 80041d8:	08007388 	.word	0x08007388

080041dc <ai_buffer_get_size>:
 80041dc:	b378      	cbz	r0, 800423e <ai_buffer_get_size+0x62>
 80041de:	b410      	push	{r4}
 80041e0:	6803      	ldr	r3, [r0, #0]
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <ai_buffer_get_size+0x64>)
 80041e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80041e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d01e      	beq.n	800422e <ai_buffer_get_size+0x52>
 80041f0:	6984      	ldr	r4, [r0, #24]
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	7d03      	ldrb	r3, [r0, #20]
 80041f6:	6941      	ldr	r1, [r0, #20]
 80041f8:	f1a3 0301 	sub.w	r3, r3, #1
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004206:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800420a:	da0b      	bge.n	8004224 <ai_buffer_get_size+0x48>
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <ai_buffer_get_size+0x3a>
 8004210:	2802      	cmp	r0, #2
 8004212:	d007      	beq.n	8004224 <ai_buffer_get_size+0x48>
 8004214:	2302      	movs	r3, #2
 8004216:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800421a:	3301      	adds	r3, #1
 800421c:	4298      	cmp	r0, r3
 800421e:	fb01 f202 	mul.w	r2, r1, r2
 8004222:	d1f3      	bne.n	800420c <ai_buffer_get_size+0x30>
 8004224:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	2900      	cmp	r1, #0
 8004230:	d0de      	beq.n	80041f0 <ai_buffer_get_size+0x14>
 8004232:	6984      	ldr	r4, [r0, #24]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	331f      	adds	r3, #31
 8004238:	f023 021f 	bic.w	r2, r3, #31
 800423c:	e7da      	b.n	80041f4 <ai_buffer_get_size+0x18>
 800423e:	4770      	bx	lr
 8004240:	000400c0 	.word	0x000400c0

08004244 <ai_buffer_array_sane>:
 8004244:	b138      	cbz	r0, 8004256 <ai_buffer_array_sane+0x12>
 8004246:	6843      	ldr	r3, [r0, #4]
 8004248:	b123      	cbz	r3, 8004254 <ai_buffer_array_sane+0x10>
 800424a:	8840      	ldrh	r0, [r0, #2]
 800424c:	3800      	subs	r0, #0
 800424e:	bf18      	it	ne
 8004250:	2001      	movne	r0, #1
 8004252:	4770      	bx	lr
 8004254:	4618      	mov	r0, r3
 8004256:	4770      	bx	lr

08004258 <ai_buffer_array_item_set_address>:
 8004258:	b150      	cbz	r0, 8004270 <ai_buffer_array_item_set_address+0x18>
 800425a:	6843      	ldr	r3, [r0, #4]
 800425c:	b14b      	cbz	r3, 8004272 <ai_buffer_array_item_set_address+0x1a>
 800425e:	8840      	ldrh	r0, [r0, #2]
 8004260:	b900      	cbnz	r0, 8004264 <ai_buffer_array_item_set_address+0xc>
 8004262:	4770      	bx	lr
 8004264:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004268:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800426c:	2001      	movs	r0, #1
 800426e:	604a      	str	r2, [r1, #4]
 8004270:	4770      	bx	lr
 8004272:	4618      	mov	r0, r3
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <_ai_platform_acquire_crc>:
 8004278:	2001      	movs	r0, #1
 800427a:	4770      	bx	lr

0800427c <_ai_platform_release_crc>:
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <ai_platform_get_weights_map>:
 8004280:	2a00      	cmp	r2, #0
 8004282:	d037      	beq.n	80042f4 <ai_platform_get_weights_map+0x74>
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	b1a0      	cbz	r0, 80042b4 <ai_platform_get_weights_map+0x34>
 800428a:	460f      	mov	r7, r1
 800428c:	b191      	cbz	r1, 80042b4 <ai_platform_get_weights_map+0x34>
 800428e:	4b25      	ldr	r3, [pc, #148]	; (8004324 <ai_platform_get_weights_map+0xa4>)
 8004290:	6810      	ldr	r0, [r2, #0]
 8004292:	4298      	cmp	r0, r3
 8004294:	4615      	mov	r5, r2
 8004296:	d00f      	beq.n	80042b8 <ai_platform_get_weights_map+0x38>
 8004298:	6855      	ldr	r5, [r2, #4]
 800429a:	b15d      	cbz	r5, 80042b4 <ai_platform_get_weights_map+0x34>
 800429c:	682e      	ldr	r6, [r5, #0]
 800429e:	429e      	cmp	r6, r3
 80042a0:	d02a      	beq.n	80042f8 <ai_platform_get_weights_map+0x78>
 80042a2:	f1a1 0001 	sub.w	r0, r1, #1
 80042a6:	6025      	str	r5, [r4, #0]
 80042a8:	fab0 f080 	clz	r0, r0
 80042ac:	0940      	lsrs	r0, r0, #5
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b0:	42a7      	cmp	r7, r4
 80042b2:	d034      	beq.n	800431e <ai_platform_get_weights_map+0x9e>
 80042b4:	2000      	movs	r0, #0
 80042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b8:	1d10      	adds	r0, r2, #4
 80042ba:	f7ff ffc3 	bl	8004244 <ai_buffer_array_sane>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0f8      	beq.n	80042b4 <ai_platform_get_weights_map+0x34>
 80042c2:	88eb      	ldrh	r3, [r5, #6]
 80042c4:	429f      	cmp	r7, r3
 80042c6:	d1f5      	bne.n	80042b4 <ai_platform_get_weights_map+0x34>
 80042c8:	f04f 0e00 	mov.w	lr, #0
 80042cc:	1f23      	subs	r3, r4, #4
 80042ce:	4670      	mov	r0, lr
 80042d0:	68aa      	ldr	r2, [r5, #8]
 80042d2:	eb02 0c0e 	add.w	ip, r2, lr
 80042d6:	f10e 0e1c 	add.w	lr, lr, #28
 80042da:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80042de:	b124      	cbz	r4, 80042ea <ai_platform_get_weights_map+0x6a>
 80042e0:	3001      	adds	r0, #1
 80042e2:	4287      	cmp	r7, r0
 80042e4:	f843 4f04 	str.w	r4, [r3, #4]!
 80042e8:	d1f2      	bne.n	80042d0 <ai_platform_get_weights_map+0x50>
 80042ea:	1a38      	subs	r0, r7, r0
 80042ec:	fab0 f080 	clz	r0, r0
 80042f0:	0940      	lsrs	r0, r0, #5
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f4:	2000      	movs	r0, #0
 80042f6:	4770      	bx	lr
 80042f8:	1f23      	subs	r3, r4, #4
 80042fa:	4628      	mov	r0, r5
 80042fc:	2400      	movs	r4, #0
 80042fe:	e000      	b.n	8004302 <ai_platform_get_weights_map+0x82>
 8004300:	4614      	mov	r4, r2
 8004302:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004306:	42b2      	cmp	r2, r6
 8004308:	d0d2      	beq.n	80042b0 <ai_platform_get_weights_map+0x30>
 800430a:	f843 2f04 	str.w	r2, [r3, #4]!
 800430e:	1c62      	adds	r2, r4, #1
 8004310:	4297      	cmp	r7, r2
 8004312:	d1f5      	bne.n	8004300 <ai_platform_get_weights_map+0x80>
 8004314:	3402      	adds	r4, #2
 8004316:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800431a:	42b3      	cmp	r3, r6
 800431c:	d1ca      	bne.n	80042b4 <ai_platform_get_weights_map+0x34>
 800431e:	2001      	movs	r0, #1
 8004320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004322:	bf00      	nop
 8004324:	a1facade 	.word	0xa1facade

08004328 <ai_platform_get_activations_map>:
 8004328:	2a00      	cmp	r2, #0
 800432a:	d038      	beq.n	800439e <ai_platform_get_activations_map+0x76>
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	4604      	mov	r4, r0
 8004330:	b1a0      	cbz	r0, 800435c <ai_platform_get_activations_map+0x34>
 8004332:	460f      	mov	r7, r1
 8004334:	b191      	cbz	r1, 800435c <ai_platform_get_activations_map+0x34>
 8004336:	4b25      	ldr	r3, [pc, #148]	; (80043cc <ai_platform_get_activations_map+0xa4>)
 8004338:	6810      	ldr	r0, [r2, #0]
 800433a:	4298      	cmp	r0, r3
 800433c:	4615      	mov	r5, r2
 800433e:	d00f      	beq.n	8004360 <ai_platform_get_activations_map+0x38>
 8004340:	6a15      	ldr	r5, [r2, #32]
 8004342:	b15d      	cbz	r5, 800435c <ai_platform_get_activations_map+0x34>
 8004344:	682e      	ldr	r6, [r5, #0]
 8004346:	429e      	cmp	r6, r3
 8004348:	d02b      	beq.n	80043a2 <ai_platform_get_activations_map+0x7a>
 800434a:	f1a1 0001 	sub.w	r0, r1, #1
 800434e:	6025      	str	r5, [r4, #0]
 8004350:	fab0 f080 	clz	r0, r0
 8004354:	0940      	lsrs	r0, r0, #5
 8004356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004358:	42a7      	cmp	r7, r4
 800435a:	d035      	beq.n	80043c8 <ai_platform_get_activations_map+0xa0>
 800435c:	2000      	movs	r0, #0
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004360:	f102 000c 	add.w	r0, r2, #12
 8004364:	f7ff ff6e 	bl	8004244 <ai_buffer_array_sane>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0f7      	beq.n	800435c <ai_platform_get_activations_map+0x34>
 800436c:	89eb      	ldrh	r3, [r5, #14]
 800436e:	429f      	cmp	r7, r3
 8004370:	d1f4      	bne.n	800435c <ai_platform_get_activations_map+0x34>
 8004372:	f04f 0e00 	mov.w	lr, #0
 8004376:	1f23      	subs	r3, r4, #4
 8004378:	4670      	mov	r0, lr
 800437a:	692a      	ldr	r2, [r5, #16]
 800437c:	eb02 0c0e 	add.w	ip, r2, lr
 8004380:	f10e 0e1c 	add.w	lr, lr, #28
 8004384:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004388:	b124      	cbz	r4, 8004394 <ai_platform_get_activations_map+0x6c>
 800438a:	3001      	adds	r0, #1
 800438c:	4287      	cmp	r7, r0
 800438e:	f843 4f04 	str.w	r4, [r3, #4]!
 8004392:	d1f2      	bne.n	800437a <ai_platform_get_activations_map+0x52>
 8004394:	1a38      	subs	r0, r7, r0
 8004396:	fab0 f080 	clz	r0, r0
 800439a:	0940      	lsrs	r0, r0, #5
 800439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800439e:	2000      	movs	r0, #0
 80043a0:	4770      	bx	lr
 80043a2:	1f23      	subs	r3, r4, #4
 80043a4:	4628      	mov	r0, r5
 80043a6:	2400      	movs	r4, #0
 80043a8:	e000      	b.n	80043ac <ai_platform_get_activations_map+0x84>
 80043aa:	4614      	mov	r4, r2
 80043ac:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80043b0:	42b2      	cmp	r2, r6
 80043b2:	d0d1      	beq.n	8004358 <ai_platform_get_activations_map+0x30>
 80043b4:	f843 2f04 	str.w	r2, [r3, #4]!
 80043b8:	1c62      	adds	r2, r4, #1
 80043ba:	4297      	cmp	r7, r2
 80043bc:	d1f5      	bne.n	80043aa <ai_platform_get_activations_map+0x82>
 80043be:	3402      	adds	r4, #2
 80043c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80043c4:	42b3      	cmp	r3, r6
 80043c6:	d1c9      	bne.n	800435c <ai_platform_get_activations_map+0x34>
 80043c8:	2001      	movs	r0, #1
 80043ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043cc:	a1facade 	.word	0xa1facade

080043d0 <ai_platform_bind_network_params>:
 80043d0:	b1a0      	cbz	r0, 80043fc <ai_platform_bind_network_params+0x2c>
 80043d2:	b1b1      	cbz	r1, 8004402 <ai_platform_bind_network_params+0x32>
 80043d4:	b1c2      	cbz	r2, 8004408 <ai_platform_bind_network_params+0x38>
 80043d6:	b410      	push	{r4}
 80043d8:	4603      	mov	r3, r0
 80043da:	4c0d      	ldr	r4, [pc, #52]	; (8004410 <ai_platform_bind_network_params+0x40>)
 80043dc:	f843 4b04 	str.w	r4, [r3], #4
 80043e0:	f100 0c0c 	add.w	ip, r0, #12
 80043e4:	c903      	ldmia	r1, {r0, r1}
 80043e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80043ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 80043f2:	2301      	movs	r3, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	4603      	mov	r3, r0
 80043fe:	4618      	mov	r0, r3
 8004400:	4770      	bx	lr
 8004402:	460b      	mov	r3, r1
 8004404:	4618      	mov	r0, r3
 8004406:	4770      	bx	lr
 8004408:	4613      	mov	r3, r2
 800440a:	4618      	mov	r0, r3
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	a1facade 	.word	0xa1facade

08004414 <ai_platform_network_get_error>:
 8004414:	b510      	push	{r4, lr}
 8004416:	b1f0      	cbz	r0, 8004456 <ai_platform_network_get_error+0x42>
 8004418:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <ai_platform_network_get_error+0xc4>)
 800441a:	6802      	ldr	r2, [r0, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	4604      	mov	r4, r0
 8004420:	d119      	bne.n	8004456 <ai_platform_network_get_error+0x42>
 8004422:	f7ff ff29 	bl	8004278 <_ai_platform_acquire_crc>
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <ai_platform_network_get_error+0xc8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d03c      	beq.n	80044ae <ai_platform_network_get_error+0x9a>
 8004434:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <ai_platform_network_get_error+0xcc>)
 8004436:	2301      	movs	r3, #1
 8004438:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800443c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1fb      	bne.n	800443c <ai_platform_network_get_error+0x28>
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <ai_platform_network_get_error+0xd0>)
 8004446:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800444a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <ai_platform_network_get_error+0xd4>)
 8004450:	429a      	cmp	r2, r3
 8004452:	d038      	beq.n	80044c6 <ai_platform_network_get_error+0xb2>
 8004454:	e7fe      	b.n	8004454 <ai_platform_network_get_error+0x40>
 8004456:	f7ff ff0f 	bl	8004278 <_ai_platform_acquire_crc>
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <ai_platform_network_get_error+0xc8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004466:	d010      	beq.n	800448a <ai_platform_network_get_error+0x76>
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <ai_platform_network_get_error+0xcc>)
 800446a:	2301      	movs	r3, #1
 800446c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004470:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1fb      	bne.n	8004470 <ai_platform_network_get_error+0x5c>
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <ai_platform_network_get_error+0xd0>)
 800447a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800447e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <ai_platform_network_get_error+0xd4>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d00d      	beq.n	80044a4 <ai_platform_network_get_error+0x90>
 8004488:	e7fe      	b.n	8004488 <ai_platform_network_get_error+0x74>
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <ai_platform_network_get_error+0xd8>)
 800448c:	2301      	movs	r3, #1
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	6893      	ldr	r3, [r2, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1fc      	bne.n	8004490 <ai_platform_network_get_error+0x7c>
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <ai_platform_network_get_error+0xd0>)
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <ai_platform_network_get_error+0xd4>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d000      	beq.n	80044a4 <ai_platform_network_get_error+0x90>
 80044a2:	e7fe      	b.n	80044a2 <ai_platform_network_get_error+0x8e>
 80044a4:	f7ff feea 	bl	800427c <_ai_platform_release_crc>
 80044a8:	f241 0010 	movw	r0, #4112	; 0x1010
 80044ac:	bd10      	pop	{r4, pc}
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <ai_platform_network_get_error+0xd8>)
 80044b0:	2301      	movs	r3, #1
 80044b2:	6093      	str	r3, [r2, #8]
 80044b4:	6893      	ldr	r3, [r2, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1fc      	bne.n	80044b4 <ai_platform_network_get_error+0xa0>
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <ai_platform_network_get_error+0xd0>)
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <ai_platform_network_get_error+0xd4>)
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d107      	bne.n	80044d6 <ai_platform_network_get_error+0xc2>
 80044c6:	f7ff fed9 	bl	800427c <_ai_platform_release_crc>
 80044ca:	f104 0010 	add.w	r0, r4, #16
 80044ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d2:	f000 be8b 	b.w	80051ec <core_get_error>
 80044d6:	e7fe      	b.n	80044d6 <ai_platform_network_get_error+0xc2>
 80044d8:	a1c00100 	.word	0xa1c00100
 80044dc:	e0042000 	.word	0xe0042000
 80044e0:	58024000 	.word	0x58024000
 80044e4:	f407a5c2 	.word	0xf407a5c2
 80044e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80044ec:	40023000 	.word	0x40023000

080044f0 <ai_platform_network_set_error>:
 80044f0:	b110      	cbz	r0, 80044f8 <ai_platform_network_set_error+0x8>
 80044f2:	3010      	adds	r0, #16
 80044f4:	f000 be80 	b.w	80051f8 <core_set_error>
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop

080044fc <ai_platform_inputs_get>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	b085      	sub	sp, #20
 8004502:	9102      	str	r1, [sp, #8]
 8004504:	b1f0      	cbz	r0, 8004544 <ai_platform_inputs_get+0x48>
 8004506:	4b62      	ldr	r3, [pc, #392]	; (8004690 <ai_platform_inputs_get+0x194>)
 8004508:	6802      	ldr	r2, [r0, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	4607      	mov	r7, r0
 800450e:	d119      	bne.n	8004544 <ai_platform_inputs_get+0x48>
 8004510:	f7ff feb2 	bl	8004278 <_ai_platform_acquire_crc>
 8004514:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <ai_platform_inputs_get+0x198>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004520:	d03d      	beq.n	800459e <ai_platform_inputs_get+0xa2>
 8004522:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <ai_platform_inputs_get+0x19c>)
 8004524:	2301      	movs	r3, #1
 8004526:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800452a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1fb      	bne.n	800452a <ai_platform_inputs_get+0x2e>
 8004532:	4b5a      	ldr	r3, [pc, #360]	; (800469c <ai_platform_inputs_get+0x1a0>)
 8004534:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004538:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800453c:	4b58      	ldr	r3, [pc, #352]	; (80046a0 <ai_platform_inputs_get+0x1a4>)
 800453e:	429a      	cmp	r2, r3
 8004540:	d039      	beq.n	80045b6 <ai_platform_inputs_get+0xba>
 8004542:	e7fe      	b.n	8004542 <ai_platform_inputs_get+0x46>
 8004544:	f7ff fe98 	bl	8004278 <_ai_platform_acquire_crc>
 8004548:	4b52      	ldr	r3, [pc, #328]	; (8004694 <ai_platform_inputs_get+0x198>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004554:	d010      	beq.n	8004578 <ai_platform_inputs_get+0x7c>
 8004556:	4a50      	ldr	r2, [pc, #320]	; (8004698 <ai_platform_inputs_get+0x19c>)
 8004558:	2301      	movs	r3, #1
 800455a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800455e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1fb      	bne.n	800455e <ai_platform_inputs_get+0x62>
 8004566:	4b4d      	ldr	r3, [pc, #308]	; (800469c <ai_platform_inputs_get+0x1a0>)
 8004568:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800456c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <ai_platform_inputs_get+0x1a4>)
 8004572:	429a      	cmp	r2, r3
 8004574:	d00d      	beq.n	8004592 <ai_platform_inputs_get+0x96>
 8004576:	e7fe      	b.n	8004576 <ai_platform_inputs_get+0x7a>
 8004578:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <ai_platform_inputs_get+0x1a8>)
 800457a:	2301      	movs	r3, #1
 800457c:	6093      	str	r3, [r2, #8]
 800457e:	6893      	ldr	r3, [r2, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1fc      	bne.n	800457e <ai_platform_inputs_get+0x82>
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <ai_platform_inputs_get+0x1a0>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <ai_platform_inputs_get+0x1a4>)
 800458c:	429a      	cmp	r2, r3
 800458e:	d000      	beq.n	8004592 <ai_platform_inputs_get+0x96>
 8004590:	e7fe      	b.n	8004590 <ai_platform_inputs_get+0x94>
 8004592:	f7ff fe73 	bl	800427c <_ai_platform_release_crc>
 8004596:	2000      	movs	r0, #0
 8004598:	b005      	add	sp, #20
 800459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459e:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <ai_platform_inputs_get+0x1a8>)
 80045a0:	2301      	movs	r3, #1
 80045a2:	6093      	str	r3, [r2, #8]
 80045a4:	6893      	ldr	r3, [r2, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1fc      	bne.n	80045a4 <ai_platform_inputs_get+0xa8>
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <ai_platform_inputs_get+0x1a0>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <ai_platform_inputs_get+0x1a4>)
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d155      	bne.n	8004662 <ai_platform_inputs_get+0x166>
 80045b6:	f7ff fe61 	bl	800427c <_ai_platform_release_crc>
 80045ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d051      	beq.n	8004664 <ai_platform_inputs_get+0x168>
 80045c0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80045c4:	f1ba 0f00 	cmp.w	sl, #0
 80045c8:	d04c      	beq.n	8004664 <ai_platform_inputs_get+0x168>
 80045ca:	f04f 0b00 	mov.w	fp, #0
 80045ce:	465d      	mov	r5, fp
 80045d0:	9703      	str	r7, [sp, #12]
 80045d2:	e016      	b.n	8004602 <ai_platform_inputs_get+0x106>
 80045d4:	9901      	ldr	r1, [sp, #4]
 80045d6:	2301      	movs	r3, #1
 80045d8:	507b      	str	r3, [r7, r1]
 80045da:	69b1      	ldr	r1, [r6, #24]
 80045dc:	6849      	ldr	r1, [r1, #4]
 80045de:	6121      	str	r1, [r4, #16]
 80045e0:	f04f 0301 	mov.w	r3, #1
 80045e4:	7523      	strb	r3, [r4, #20]
 80045e6:	e9c4 c200 	strd	ip, r2, [r4]
 80045ea:	6962      	ldr	r2, [r4, #20]
 80045ec:	60a0      	str	r0, [r4, #8]
 80045ee:	2300      	movs	r3, #0
 80045f0:	f369 221f 	bfi	r2, r9, #8, #24
 80045f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80045f8:	60e3      	str	r3, [r4, #12]
 80045fa:	3501      	adds	r5, #1
 80045fc:	f10b 0b1c 	add.w	fp, fp, #28
 8004600:	6162      	str	r2, [r4, #20]
 8004602:	f8ba 3000 	ldrh.w	r3, [sl]
 8004606:	42ab      	cmp	r3, r5
 8004608:	b2aa      	uxth	r2, r5
 800460a:	d93a      	bls.n	8004682 <ai_platform_inputs_get+0x186>
 800460c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004610:	00e9      	lsls	r1, r5, #3
 8004612:	9101      	str	r1, [sp, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d034      	beq.n	8004682 <ai_platform_inputs_get+0x186>
 8004618:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800461c:	2e00      	cmp	r6, #0
 800461e:	d030      	beq.n	8004682 <ai_platform_inputs_get+0x186>
 8004620:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004624:	69b2      	ldr	r2, [r6, #24]
 8004626:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800462a:	6810      	ldr	r0, [r2, #0]
 800462c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004630:	68b3      	ldr	r3, [r6, #8]
 8004632:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004636:	f001 fc93 	bl	8005f60 <ai_array_to_buffer_fmt>
 800463a:	69b1      	ldr	r1, [r6, #24]
 800463c:	4684      	mov	ip, r0
 800463e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004642:	688a      	ldr	r2, [r1, #8]
 8004644:	445c      	add	r4, fp
 8004646:	2800      	cmp	r0, #0
 8004648:	d0c8      	beq.n	80045dc <ai_platform_inputs_get+0xe0>
 800464a:	2100      	movs	r1, #0
 800464c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004650:	6831      	ldr	r1, [r6, #0]
 8004652:	6041      	str	r1, [r0, #4]
 8004654:	b111      	cbz	r1, 800465c <ai_platform_inputs_get+0x160>
 8004656:	8849      	ldrh	r1, [r1, #2]
 8004658:	2900      	cmp	r1, #0
 800465a:	d1bb      	bne.n	80045d4 <ai_platform_inputs_get+0xd8>
 800465c:	69b1      	ldr	r1, [r6, #24]
 800465e:	2000      	movs	r0, #0
 8004660:	e7bc      	b.n	80045dc <ai_platform_inputs_get+0xe0>
 8004662:	e7fe      	b.n	8004662 <ai_platform_inputs_get+0x166>
 8004664:	2218      	movs	r2, #24
 8004666:	2111      	movs	r1, #17
 8004668:	f107 0010 	add.w	r0, r7, #16
 800466c:	f000 fdc4 	bl	80051f8 <core_set_error>
 8004670:	2200      	movs	r2, #0
 8004672:	4610      	mov	r0, r2
 8004674:	9b02      	ldr	r3, [sp, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d08e      	beq.n	8004598 <ai_platform_inputs_get+0x9c>
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	b005      	add	sp, #20
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	9f03      	ldr	r7, [sp, #12]
 8004684:	2a00      	cmp	r2, #0
 8004686:	d0ed      	beq.n	8004664 <ai_platform_inputs_get+0x168>
 8004688:	f8da 3008 	ldr.w	r3, [sl, #8]
 800468c:	6858      	ldr	r0, [r3, #4]
 800468e:	e7f1      	b.n	8004674 <ai_platform_inputs_get+0x178>
 8004690:	a1c00100 	.word	0xa1c00100
 8004694:	e0042000 	.word	0xe0042000
 8004698:	58024000 	.word	0x58024000
 800469c:	f407a5c2 	.word	0xf407a5c2
 80046a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80046a4:	40023000 	.word	0x40023000

080046a8 <ai_platform_outputs_get>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	b085      	sub	sp, #20
 80046ae:	9102      	str	r1, [sp, #8]
 80046b0:	b1f0      	cbz	r0, 80046f0 <ai_platform_outputs_get+0x48>
 80046b2:	4b5f      	ldr	r3, [pc, #380]	; (8004830 <ai_platform_outputs_get+0x188>)
 80046b4:	6802      	ldr	r2, [r0, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	4607      	mov	r7, r0
 80046ba:	d119      	bne.n	80046f0 <ai_platform_outputs_get+0x48>
 80046bc:	f7ff fddc 	bl	8004278 <_ai_platform_acquire_crc>
 80046c0:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <ai_platform_outputs_get+0x18c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d03d      	beq.n	800474a <ai_platform_outputs_get+0xa2>
 80046ce:	4a5a      	ldr	r2, [pc, #360]	; (8004838 <ai_platform_outputs_get+0x190>)
 80046d0:	2301      	movs	r3, #1
 80046d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80046d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1fb      	bne.n	80046d6 <ai_platform_outputs_get+0x2e>
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <ai_platform_outputs_get+0x194>)
 80046e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80046e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80046e8:	4b55      	ldr	r3, [pc, #340]	; (8004840 <ai_platform_outputs_get+0x198>)
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d039      	beq.n	8004762 <ai_platform_outputs_get+0xba>
 80046ee:	e7fe      	b.n	80046ee <ai_platform_outputs_get+0x46>
 80046f0:	f7ff fdc2 	bl	8004278 <_ai_platform_acquire_crc>
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <ai_platform_outputs_get+0x18c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004700:	d010      	beq.n	8004724 <ai_platform_outputs_get+0x7c>
 8004702:	4a4d      	ldr	r2, [pc, #308]	; (8004838 <ai_platform_outputs_get+0x190>)
 8004704:	2301      	movs	r3, #1
 8004706:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800470a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1fb      	bne.n	800470a <ai_platform_outputs_get+0x62>
 8004712:	4b4a      	ldr	r3, [pc, #296]	; (800483c <ai_platform_outputs_get+0x194>)
 8004714:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004718:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800471c:	4b48      	ldr	r3, [pc, #288]	; (8004840 <ai_platform_outputs_get+0x198>)
 800471e:	429a      	cmp	r2, r3
 8004720:	d00d      	beq.n	800473e <ai_platform_outputs_get+0x96>
 8004722:	e7fe      	b.n	8004722 <ai_platform_outputs_get+0x7a>
 8004724:	4a47      	ldr	r2, [pc, #284]	; (8004844 <ai_platform_outputs_get+0x19c>)
 8004726:	2301      	movs	r3, #1
 8004728:	6093      	str	r3, [r2, #8]
 800472a:	6893      	ldr	r3, [r2, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1fc      	bne.n	800472a <ai_platform_outputs_get+0x82>
 8004730:	4b42      	ldr	r3, [pc, #264]	; (800483c <ai_platform_outputs_get+0x194>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	4b42      	ldr	r3, [pc, #264]	; (8004840 <ai_platform_outputs_get+0x198>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d000      	beq.n	800473e <ai_platform_outputs_get+0x96>
 800473c:	e7fe      	b.n	800473c <ai_platform_outputs_get+0x94>
 800473e:	f7ff fd9d 	bl	800427c <_ai_platform_release_crc>
 8004742:	2000      	movs	r0, #0
 8004744:	b005      	add	sp, #20
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474a:	4a3e      	ldr	r2, [pc, #248]	; (8004844 <ai_platform_outputs_get+0x19c>)
 800474c:	2301      	movs	r3, #1
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	6893      	ldr	r3, [r2, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1fc      	bne.n	8004750 <ai_platform_outputs_get+0xa8>
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <ai_platform_outputs_get+0x194>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	4b38      	ldr	r3, [pc, #224]	; (8004840 <ai_platform_outputs_get+0x198>)
 800475e:	429a      	cmp	r2, r3
 8004760:	d150      	bne.n	8004804 <ai_platform_outputs_get+0x15c>
 8004762:	f7ff fd8b 	bl	800427c <_ai_platform_release_crc>
 8004766:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d958      	bls.n	800481e <ai_platform_outputs_get+0x176>
 800476c:	f04f 0b00 	mov.w	fp, #0
 8004770:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004774:	9703      	str	r7, [sp, #12]
 8004776:	465d      	mov	r5, fp
 8004778:	e016      	b.n	80047a8 <ai_platform_outputs_get+0x100>
 800477a:	9901      	ldr	r1, [sp, #4]
 800477c:	2301      	movs	r3, #1
 800477e:	507b      	str	r3, [r7, r1]
 8004780:	69b1      	ldr	r1, [r6, #24]
 8004782:	6849      	ldr	r1, [r1, #4]
 8004784:	6121      	str	r1, [r4, #16]
 8004786:	f04f 0301 	mov.w	r3, #1
 800478a:	7523      	strb	r3, [r4, #20]
 800478c:	e9c4 c200 	strd	ip, r2, [r4]
 8004790:	6962      	ldr	r2, [r4, #20]
 8004792:	60a0      	str	r0, [r4, #8]
 8004794:	2300      	movs	r3, #0
 8004796:	f369 221f 	bfi	r2, r9, #8, #24
 800479a:	f8c4 8018 	str.w	r8, [r4, #24]
 800479e:	60e3      	str	r3, [r4, #12]
 80047a0:	3501      	adds	r5, #1
 80047a2:	f10b 0b1c 	add.w	fp, fp, #28
 80047a6:	6162      	str	r2, [r4, #20]
 80047a8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	b2aa      	uxth	r2, r5
 80047b0:	d929      	bls.n	8004806 <ai_platform_outputs_get+0x15e>
 80047b2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80047b6:	00e9      	lsls	r1, r5, #3
 80047b8:	9101      	str	r1, [sp, #4]
 80047ba:	b323      	cbz	r3, 8004806 <ai_platform_outputs_get+0x15e>
 80047bc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80047c0:	b30e      	cbz	r6, 8004806 <ai_platform_outputs_get+0x15e>
 80047c2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80047c6:	69b2      	ldr	r2, [r6, #24]
 80047c8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80047cc:	6810      	ldr	r0, [r2, #0]
 80047ce:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80047d2:	68b3      	ldr	r3, [r6, #8]
 80047d4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80047d8:	f001 fbc2 	bl	8005f60 <ai_array_to_buffer_fmt>
 80047dc:	69b1      	ldr	r1, [r6, #24]
 80047de:	4684      	mov	ip, r0
 80047e0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80047e4:	688a      	ldr	r2, [r1, #8]
 80047e6:	445c      	add	r4, fp
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d0ca      	beq.n	8004782 <ai_platform_outputs_get+0xda>
 80047ec:	2100      	movs	r1, #0
 80047ee:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80047f2:	6831      	ldr	r1, [r6, #0]
 80047f4:	6041      	str	r1, [r0, #4]
 80047f6:	b111      	cbz	r1, 80047fe <ai_platform_outputs_get+0x156>
 80047f8:	8849      	ldrh	r1, [r1, #2]
 80047fa:	2900      	cmp	r1, #0
 80047fc:	d1bd      	bne.n	800477a <ai_platform_outputs_get+0xd2>
 80047fe:	69b1      	ldr	r1, [r6, #24]
 8004800:	2000      	movs	r0, #0
 8004802:	e7be      	b.n	8004782 <ai_platform_outputs_get+0xda>
 8004804:	e7fe      	b.n	8004804 <ai_platform_outputs_get+0x15c>
 8004806:	9f03      	ldr	r7, [sp, #12]
 8004808:	b14a      	cbz	r2, 800481e <ai_platform_outputs_get+0x176>
 800480a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800480e:	6858      	ldr	r0, [r3, #4]
 8004810:	9b02      	ldr	r3, [sp, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d096      	beq.n	8004744 <ai_platform_outputs_get+0x9c>
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	b005      	add	sp, #20
 800481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481e:	2218      	movs	r2, #24
 8004820:	2111      	movs	r1, #17
 8004822:	f107 0010 	add.w	r0, r7, #16
 8004826:	f000 fce7 	bl	80051f8 <core_set_error>
 800482a:	2200      	movs	r2, #0
 800482c:	4610      	mov	r0, r2
 800482e:	e7ef      	b.n	8004810 <ai_platform_outputs_get+0x168>
 8004830:	a1c00100 	.word	0xa1c00100
 8004834:	e0042000 	.word	0xe0042000
 8004838:	58024000 	.word	0x58024000
 800483c:	f407a5c2 	.word	0xf407a5c2
 8004840:	b5e8b5cd 	.word	0xb5e8b5cd
 8004844:	40023000 	.word	0x40023000

08004848 <ai_platform_network_create>:
 8004848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800484c:	b083      	sub	sp, #12
 800484e:	4606      	mov	r6, r0
 8004850:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004854:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004858:	4615      	mov	r5, r2
 800485a:	461f      	mov	r7, r3
 800485c:	f7ff fd0c 	bl	8004278 <_ai_platform_acquire_crc>
 8004860:	b188      	cbz	r0, 8004886 <ai_platform_network_create+0x3e>
 8004862:	4a5d      	ldr	r2, [pc, #372]	; (80049d8 <ai_platform_network_create+0x190>)
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800486a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800486e:	4603      	mov	r3, r0
 8004870:	d00e      	beq.n	8004890 <ai_platform_network_create+0x48>
 8004872:	4a5a      	ldr	r2, [pc, #360]	; (80049dc <ai_platform_network_create+0x194>)
 8004874:	2118      	movs	r1, #24
 8004876:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800487a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800487e:	2918      	cmp	r1, #24
 8004880:	d018      	beq.n	80048b4 <ai_platform_network_create+0x6c>
 8004882:	f7ff fcfb 	bl	800427c <_ai_platform_release_crc>
 8004886:	f244 1033 	movw	r0, #16691	; 0x4133
 800488a:	b003      	add	sp, #12
 800488c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004890:	4a53      	ldr	r2, [pc, #332]	; (80049e0 <ai_platform_network_create+0x198>)
 8004892:	2101      	movs	r1, #1
 8004894:	6091      	str	r1, [r2, #8]
 8004896:	2114      	movs	r1, #20
 8004898:	e001      	b.n	800489e <ai_platform_network_create+0x56>
 800489a:	3901      	subs	r1, #1
 800489c:	d002      	beq.n	80048a4 <ai_platform_network_create+0x5c>
 800489e:	6894      	ldr	r4, [r2, #8]
 80048a0:	2c00      	cmp	r4, #0
 80048a2:	d1fa      	bne.n	800489a <ai_platform_network_create+0x52>
 80048a4:	4a4e      	ldr	r2, [pc, #312]	; (80049e0 <ai_platform_network_create+0x198>)
 80048a6:	6891      	ldr	r1, [r2, #8]
 80048a8:	b911      	cbnz	r1, 80048b0 <ai_platform_network_create+0x68>
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	3201      	adds	r2, #1
 80048ae:	d008      	beq.n	80048c2 <ai_platform_network_create+0x7a>
 80048b0:	4618      	mov	r0, r3
 80048b2:	e7e6      	b.n	8004882 <ai_platform_network_create+0x3a>
 80048b4:	2101      	movs	r1, #1
 80048b6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80048ba:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80048be:	2900      	cmp	r1, #0
 80048c0:	d1fb      	bne.n	80048ba <ai_platform_network_create+0x72>
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fcda 	bl	800427c <_ai_platform_release_crc>
 80048c8:	f7ff fcd6 	bl	8004278 <_ai_platform_acquire_crc>
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <ai_platform_network_create+0x190>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d010      	beq.n	80048fc <ai_platform_network_create+0xb4>
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <ai_platform_network_create+0x194>)
 80048dc:	2201      	movs	r2, #1
 80048de:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80048e2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80048e6:	2900      	cmp	r1, #0
 80048e8:	d1fb      	bne.n	80048e2 <ai_platform_network_create+0x9a>
 80048ea:	4a3e      	ldr	r2, [pc, #248]	; (80049e4 <ai_platform_network_create+0x19c>)
 80048ec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80048f0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80048f4:	4b3c      	ldr	r3, [pc, #240]	; (80049e8 <ai_platform_network_create+0x1a0>)
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d00c      	beq.n	8004914 <ai_platform_network_create+0xcc>
 80048fa:	e7fe      	b.n	80048fa <ai_platform_network_create+0xb2>
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <ai_platform_network_create+0x198>)
 80048fe:	2301      	movs	r3, #1
 8004900:	6093      	str	r3, [r2, #8]
 8004902:	6893      	ldr	r3, [r2, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1fc      	bne.n	8004902 <ai_platform_network_create+0xba>
 8004908:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <ai_platform_network_create+0x19c>)
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4b36      	ldr	r3, [pc, #216]	; (80049e8 <ai_platform_network_create+0x1a0>)
 8004910:	429a      	cmp	r2, r3
 8004912:	d122      	bne.n	800495a <ai_platform_network_create+0x112>
 8004914:	f7ff fcb2 	bl	800427c <_ai_platform_release_crc>
 8004918:	b38e      	cbz	r6, 800497e <ai_platform_network_create+0x136>
 800491a:	4b34      	ldr	r3, [pc, #208]	; (80049ec <ai_platform_network_create+0x1a4>)
 800491c:	602b      	str	r3, [r5, #0]
 800491e:	6035      	str	r5, [r6, #0]
 8004920:	f000 fc62 	bl	80051e8 <core_init>
 8004924:	b1d0      	cbz	r0, 800495c <ai_platform_network_create+0x114>
 8004926:	f7ff fca7 	bl	8004278 <_ai_platform_acquire_crc>
 800492a:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <ai_platform_network_create+0x190>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d025      	beq.n	8004984 <ai_platform_network_create+0x13c>
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <ai_platform_network_create+0x194>)
 800493a:	2301      	movs	r3, #1
 800493c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004940:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1fb      	bne.n	8004940 <ai_platform_network_create+0xf8>
 8004948:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <ai_platform_network_create+0x19c>)
 800494a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800494e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004952:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <ai_platform_network_create+0x1a0>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d022      	beq.n	800499e <ai_platform_network_create+0x156>
 8004958:	e7fe      	b.n	8004958 <ai_platform_network_create+0x110>
 800495a:	e7fe      	b.n	800495a <ai_platform_network_create+0x112>
 800495c:	2430      	movs	r4, #48	; 0x30
 800495e:	2300      	movs	r3, #0
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	2610      	movs	r6, #16
 8004964:	464a      	mov	r2, r9
 8004966:	4641      	mov	r1, r8
 8004968:	4638      	mov	r0, r7
 800496a:	f001 fb9f 	bl	80060ac <ai_version_get>
 800496e:	4603      	mov	r3, r0
 8004970:	2000      	movs	r0, #0
 8004972:	f364 0007 	bfi	r0, r4, #0, #8
 8004976:	64ab      	str	r3, [r5, #72]	; 0x48
 8004978:	f366 201f 	bfi	r0, r6, #8, #24
 800497c:	e785      	b.n	800488a <ai_platform_network_create+0x42>
 800497e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004982:	e782      	b.n	800488a <ai_platform_network_create+0x42>
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <ai_platform_network_create+0x198>)
 8004986:	2301      	movs	r3, #1
 8004988:	6093      	str	r3, [r2, #8]
 800498a:	6893      	ldr	r3, [r2, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1fc      	bne.n	800498a <ai_platform_network_create+0x142>
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <ai_platform_network_create+0x19c>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <ai_platform_network_create+0x1a0>)
 8004998:	429a      	cmp	r2, r3
 800499a:	d000      	beq.n	800499e <ai_platform_network_create+0x156>
 800499c:	e7fe      	b.n	800499c <ai_platform_network_create+0x154>
 800499e:	f7ff fc6d 	bl	800427c <_ai_platform_release_crc>
 80049a2:	2200      	movs	r2, #0
 80049a4:	4641      	mov	r1, r8
 80049a6:	4638      	mov	r0, r7
 80049a8:	f001 fb80 	bl	80060ac <ai_version_get>
 80049ac:	2200      	movs	r2, #0
 80049ae:	4604      	mov	r4, r0
 80049b0:	2105      	movs	r1, #5
 80049b2:	2001      	movs	r0, #1
 80049b4:	f001 fb7a 	bl	80060ac <ai_version_get>
 80049b8:	4284      	cmp	r4, r0
 80049ba:	d001      	beq.n	80049c0 <ai_platform_network_create+0x178>
 80049bc:	2401      	movs	r4, #1
 80049be:	e7ce      	b.n	800495e <ai_platform_network_create+0x116>
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <ai_platform_network_create+0x1a8>)
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	a801      	add	r0, sp, #4
 80049c6:	f000 fc23 	bl	8005210 <ai_check_custom_types>
 80049ca:	b110      	cbz	r0, 80049d2 <ai_platform_network_create+0x18a>
 80049cc:	2600      	movs	r6, #0
 80049ce:	4634      	mov	r4, r6
 80049d0:	e7c8      	b.n	8004964 <ai_platform_network_create+0x11c>
 80049d2:	2402      	movs	r4, #2
 80049d4:	e7c3      	b.n	800495e <ai_platform_network_create+0x116>
 80049d6:	bf00      	nop
 80049d8:	e0042000 	.word	0xe0042000
 80049dc:	58024000 	.word	0x58024000
 80049e0:	40023000 	.word	0x40023000
 80049e4:	f407a5c2 	.word	0xf407a5c2
 80049e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80049ec:	a1c00100 	.word	0xa1c00100
 80049f0:	84048403 	.word	0x84048403

080049f4 <ai_platform_network_init>:
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	b1f8      	cbz	r0, 8004a3a <ai_platform_network_init+0x46>
 80049fa:	4b6e      	ldr	r3, [pc, #440]	; (8004bb4 <ai_platform_network_init+0x1c0>)
 80049fc:	6802      	ldr	r2, [r0, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	4604      	mov	r4, r0
 8004a02:	d11a      	bne.n	8004a3a <ai_platform_network_init+0x46>
 8004a04:	460e      	mov	r6, r1
 8004a06:	f7ff fc37 	bl	8004278 <_ai_platform_acquire_crc>
 8004a0a:	4b6b      	ldr	r3, [pc, #428]	; (8004bb8 <ai_platform_network_init+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d03d      	beq.n	8004a94 <ai_platform_network_init+0xa0>
 8004a18:	4a68      	ldr	r2, [pc, #416]	; (8004bbc <ai_platform_network_init+0x1c8>)
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1fb      	bne.n	8004a20 <ai_platform_network_init+0x2c>
 8004a28:	4b65      	ldr	r3, [pc, #404]	; (8004bc0 <ai_platform_network_init+0x1cc>)
 8004a2a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a32:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <ai_platform_network_init+0x1d0>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d039      	beq.n	8004aac <ai_platform_network_init+0xb8>
 8004a38:	e7fe      	b.n	8004a38 <ai_platform_network_init+0x44>
 8004a3a:	f7ff fc1d 	bl	8004278 <_ai_platform_acquire_crc>
 8004a3e:	4b5e      	ldr	r3, [pc, #376]	; (8004bb8 <ai_platform_network_init+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4a:	d010      	beq.n	8004a6e <ai_platform_network_init+0x7a>
 8004a4c:	4a5b      	ldr	r2, [pc, #364]	; (8004bbc <ai_platform_network_init+0x1c8>)
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1fb      	bne.n	8004a54 <ai_platform_network_init+0x60>
 8004a5c:	4b58      	ldr	r3, [pc, #352]	; (8004bc0 <ai_platform_network_init+0x1cc>)
 8004a5e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a62:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a66:	4b57      	ldr	r3, [pc, #348]	; (8004bc4 <ai_platform_network_init+0x1d0>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d00d      	beq.n	8004a88 <ai_platform_network_init+0x94>
 8004a6c:	e7fe      	b.n	8004a6c <ai_platform_network_init+0x78>
 8004a6e:	4a56      	ldr	r2, [pc, #344]	; (8004bc8 <ai_platform_network_init+0x1d4>)
 8004a70:	2301      	movs	r3, #1
 8004a72:	6093      	str	r3, [r2, #8]
 8004a74:	6893      	ldr	r3, [r2, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1fc      	bne.n	8004a74 <ai_platform_network_init+0x80>
 8004a7a:	4b51      	ldr	r3, [pc, #324]	; (8004bc0 <ai_platform_network_init+0x1cc>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <ai_platform_network_init+0x1d0>)
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d000      	beq.n	8004a88 <ai_platform_network_init+0x94>
 8004a86:	e7fe      	b.n	8004a86 <ai_platform_network_init+0x92>
 8004a88:	f7ff fbf8 	bl	800427c <_ai_platform_release_crc>
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	4630      	mov	r0, r6
 8004a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a94:	4a4c      	ldr	r2, [pc, #304]	; (8004bc8 <ai_platform_network_init+0x1d4>)
 8004a96:	2301      	movs	r3, #1
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	6893      	ldr	r3, [r2, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1fc      	bne.n	8004a9a <ai_platform_network_init+0xa6>
 8004aa0:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <ai_platform_network_init+0x1cc>)
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <ai_platform_network_init+0x1d0>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d11c      	bne.n	8004ae6 <ai_platform_network_init+0xf2>
 8004aac:	f7ff fbe6 	bl	800427c <_ai_platform_release_crc>
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	d06f      	beq.n	8004b94 <ai_platform_network_init+0x1a0>
 8004ab4:	4b45      	ldr	r3, [pc, #276]	; (8004bcc <ai_platform_network_init+0x1d8>)
 8004ab6:	6832      	ldr	r2, [r6, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d115      	bne.n	8004ae8 <ai_platform_network_init+0xf4>
 8004abc:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004ac0:	6933      	ldr	r3, [r6, #16]
 8004ac2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8004ac6:	89f7      	ldrh	r7, [r6, #14]
 8004ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aca:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004ace:	2303      	movs	r3, #3
 8004ad0:	84e7      	strh	r7, [r4, #38]	; 0x26
 8004ad2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004ad6:	60e3      	str	r3, [r4, #12]
 8004ad8:	4620      	mov	r0, r4
 8004ada:	4626      	mov	r6, r4
 8004adc:	f000 fbc2 	bl	8005264 <ai_layers_init_all>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae6:	e7fe      	b.n	8004ae6 <ai_platform_network_init+0xf2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4630      	mov	r0, r6
 8004aec:	4635      	mov	r5, r6
 8004aee:	6876      	ldr	r6, [r6, #4]
 8004af0:	f7ff fb74 	bl	80041dc <ai_buffer_get_size>
 8004af4:	f105 081c 	add.w	r8, r5, #28
 8004af8:	4681      	mov	r9, r0
 8004afa:	2101      	movs	r1, #1
 8004afc:	4640      	mov	r0, r8
 8004afe:	6a2f      	ldr	r7, [r5, #32]
 8004b00:	f7ff fb6c 	bl	80041dc <ai_buffer_get_size>
 8004b04:	f1b9 0f00 	cmp.w	r9, #0
 8004b08:	d025      	beq.n	8004b56 <ai_platform_network_init+0x162>
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4696      	mov	lr, r2
 8004b0e:	bb30      	cbnz	r0, 8004b5e <ai_platform_network_init+0x16a>
 8004b10:	4680      	mov	r8, r0
 8004b12:	4607      	mov	r7, r0
 8004b14:	b376      	cbz	r6, 8004b74 <ai_platform_network_init+0x180>
 8004b16:	8be3      	ldrh	r3, [r4, #30]
 8004b18:	4573      	cmp	r3, lr
 8004b1a:	d323      	bcc.n	8004b64 <ai_platform_network_init+0x170>
 8004b1c:	b142      	cbz	r2, 8004b30 <ai_platform_network_init+0x13c>
 8004b1e:	46ac      	mov	ip, r5
 8004b20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004b24:	6a25      	ldr	r5, [r4, #32]
 8004b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b28:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004b2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b30:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004b32:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004b36:	2600      	movs	r6, #0
 8004b38:	42bb      	cmp	r3, r7
 8004b3a:	83a6      	strh	r6, [r4, #28]
 8004b3c:	d323      	bcc.n	8004b86 <ai_platform_network_init+0x192>
 8004b3e:	b37f      	cbz	r7, 8004ba0 <ai_platform_network_init+0x1ac>
 8004b40:	46c4      	mov	ip, r8
 8004b42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004b46:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b4a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004b4e:	46b6      	mov	lr, r6
 8004b50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b54:	e7bb      	b.n	8004ace <ai_platform_network_init+0xda>
 8004b56:	464a      	mov	r2, r9
 8004b58:	46ce      	mov	lr, r9
 8004b5a:	464d      	mov	r5, r9
 8004b5c:	e7d7      	b.n	8004b0e <ai_platform_network_init+0x11a>
 8004b5e:	b30f      	cbz	r7, 8004ba4 <ai_platform_network_init+0x1b0>
 8004b60:	2701      	movs	r7, #1
 8004b62:	e7d7      	b.n	8004b14 <ai_platform_network_init+0x120>
 8004b64:	2212      	movs	r2, #18
 8004b66:	2116      	movs	r1, #22
 8004b68:	f104 0010 	add.w	r0, r4, #16
 8004b6c:	f000 fb44 	bl	80051f8 <core_set_error>
 8004b70:	2600      	movs	r6, #0
 8004b72:	e78c      	b.n	8004a8e <ai_platform_network_init+0x9a>
 8004b74:	f1b9 0f00 	cmp.w	r9, #0
 8004b78:	d0cd      	beq.n	8004b16 <ai_platform_network_init+0x122>
 8004b7a:	2110      	movs	r1, #16
 8004b7c:	2212      	movs	r2, #18
 8004b7e:	1860      	adds	r0, r4, r1
 8004b80:	f000 fb3a 	bl	80051f8 <core_set_error>
 8004b84:	e783      	b.n	8004a8e <ai_platform_network_init+0x9a>
 8004b86:	2213      	movs	r2, #19
 8004b88:	2116      	movs	r1, #22
 8004b8a:	f104 0010 	add.w	r0, r4, #16
 8004b8e:	f000 fb33 	bl	80051f8 <core_set_error>
 8004b92:	e77c      	b.n	8004a8e <ai_platform_network_init+0x9a>
 8004b94:	2110      	movs	r1, #16
 8004b96:	2211      	movs	r2, #17
 8004b98:	1860      	adds	r0, r4, r1
 8004b9a:	f000 fb2d 	bl	80051f8 <core_set_error>
 8004b9e:	e776      	b.n	8004a8e <ai_platform_network_init+0x9a>
 8004ba0:	46be      	mov	lr, r7
 8004ba2:	e794      	b.n	8004ace <ai_platform_network_init+0xda>
 8004ba4:	2110      	movs	r1, #16
 8004ba6:	2213      	movs	r2, #19
 8004ba8:	1860      	adds	r0, r4, r1
 8004baa:	f000 fb25 	bl	80051f8 <core_set_error>
 8004bae:	463e      	mov	r6, r7
 8004bb0:	e76d      	b.n	8004a8e <ai_platform_network_init+0x9a>
 8004bb2:	bf00      	nop
 8004bb4:	a1c00100 	.word	0xa1c00100
 8004bb8:	e0042000 	.word	0xe0042000
 8004bbc:	58024000 	.word	0x58024000
 8004bc0:	f407a5c2 	.word	0xf407a5c2
 8004bc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004bc8:	40023000 	.word	0x40023000
 8004bcc:	a1facade 	.word	0xa1facade

08004bd0 <ai_platform_network_post_init>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	b1f0      	cbz	r0, 8004c12 <ai_platform_network_post_init+0x42>
 8004bd4:	4b3c      	ldr	r3, [pc, #240]	; (8004cc8 <ai_platform_network_post_init+0xf8>)
 8004bd6:	6802      	ldr	r2, [r0, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	4604      	mov	r4, r0
 8004bdc:	d119      	bne.n	8004c12 <ai_platform_network_post_init+0x42>
 8004bde:	f7ff fb4b 	bl	8004278 <_ai_platform_acquire_crc>
 8004be2:	4b3a      	ldr	r3, [pc, #232]	; (8004ccc <ai_platform_network_post_init+0xfc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bee:	d03b      	beq.n	8004c68 <ai_platform_network_post_init+0x98>
 8004bf0:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <ai_platform_network_post_init+0x100>)
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004bf8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1fb      	bne.n	8004bf8 <ai_platform_network_post_init+0x28>
 8004c00:	4b34      	ldr	r3, [pc, #208]	; (8004cd4 <ai_platform_network_post_init+0x104>)
 8004c02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c0a:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <ai_platform_network_post_init+0x108>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d037      	beq.n	8004c80 <ai_platform_network_post_init+0xb0>
 8004c10:	e7fe      	b.n	8004c10 <ai_platform_network_post_init+0x40>
 8004c12:	f7ff fb31 	bl	8004278 <_ai_platform_acquire_crc>
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <ai_platform_network_post_init+0xfc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d010      	beq.n	8004c46 <ai_platform_network_post_init+0x76>
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <ai_platform_network_post_init+0x100>)
 8004c26:	2301      	movs	r3, #1
 8004c28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1fb      	bne.n	8004c2c <ai_platform_network_post_init+0x5c>
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <ai_platform_network_post_init+0x104>)
 8004c36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c3e:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <ai_platform_network_post_init+0x108>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d00d      	beq.n	8004c60 <ai_platform_network_post_init+0x90>
 8004c44:	e7fe      	b.n	8004c44 <ai_platform_network_post_init+0x74>
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <ai_platform_network_post_init+0x10c>)
 8004c48:	2301      	movs	r3, #1
 8004c4a:	6093      	str	r3, [r2, #8]
 8004c4c:	6893      	ldr	r3, [r2, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1fc      	bne.n	8004c4c <ai_platform_network_post_init+0x7c>
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <ai_platform_network_post_init+0x104>)
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <ai_platform_network_post_init+0x108>)
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d000      	beq.n	8004c60 <ai_platform_network_post_init+0x90>
 8004c5e:	e7fe      	b.n	8004c5e <ai_platform_network_post_init+0x8e>
 8004c60:	f7ff fb0c 	bl	800427c <_ai_platform_release_crc>
 8004c64:	2000      	movs	r0, #0
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <ai_platform_network_post_init+0x10c>)
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	6093      	str	r3, [r2, #8]
 8004c6e:	6893      	ldr	r3, [r2, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1fc      	bne.n	8004c6e <ai_platform_network_post_init+0x9e>
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <ai_platform_network_post_init+0x104>)
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <ai_platform_network_post_init+0x108>)
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d11a      	bne.n	8004cb6 <ai_platform_network_post_init+0xe6>
 8004c80:	f7ff fafc 	bl	800427c <_ai_platform_release_crc>
 8004c84:	68e3      	ldr	r3, [r4, #12]
 8004c86:	f013 0502 	ands.w	r5, r3, #2
 8004c8a:	d015      	beq.n	8004cb8 <ai_platform_network_post_init+0xe8>
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 faf7 	bl	8005280 <ai_layers_post_init_all>
 8004c92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c94:	b16b      	cbz	r3, 8004cb2 <ai_platform_network_post_init+0xe2>
 8004c96:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004c98:	e007      	b.n	8004caa <ai_platform_network_post_init+0xda>
 8004c9a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004c9e:	4798      	blx	r3
 8004ca0:	692b      	ldr	r3, [r5, #16]
 8004ca2:	42ab      	cmp	r3, r5
 8004ca4:	d005      	beq.n	8004cb2 <ai_platform_network_post_init+0xe2>
 8004ca6:	b123      	cbz	r3, 8004cb2 <ai_platform_network_post_init+0xe2>
 8004ca8:	461d      	mov	r5, r3
 8004caa:	4629      	mov	r1, r5
 8004cac:	2000      	movs	r0, #0
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	d1f3      	bne.n	8004c9a <ai_platform_network_post_init+0xca>
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	e7fe      	b.n	8004cb6 <ai_platform_network_post_init+0xe6>
 8004cb8:	2210      	movs	r2, #16
 8004cba:	2111      	movs	r1, #17
 8004cbc:	18a0      	adds	r0, r4, r2
 8004cbe:	f000 fa9b 	bl	80051f8 <core_set_error>
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
 8004cc6:	bf00      	nop
 8004cc8:	a1c00100 	.word	0xa1c00100
 8004ccc:	e0042000 	.word	0xe0042000
 8004cd0:	58024000 	.word	0x58024000
 8004cd4:	f407a5c2 	.word	0xf407a5c2
 8004cd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004cdc:	40023000 	.word	0x40023000

08004ce0 <ai_platform_network_process>:
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	460e      	mov	r6, r1
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	4693      	mov	fp, r2
 8004cea:	4605      	mov	r5, r0
 8004cec:	b120      	cbz	r0, 8004cf8 <ai_platform_network_process+0x18>
 8004cee:	4bb8      	ldr	r3, [pc, #736]	; (8004fd0 <ai_platform_network_process+0x2f0>)
 8004cf0:	6802      	ldr	r2, [r0, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	bf18      	it	ne
 8004cf6:	2500      	movne	r5, #0
 8004cf8:	f7ff fabe 	bl	8004278 <_ai_platform_acquire_crc>
 8004cfc:	4bb5      	ldr	r3, [pc, #724]	; (8004fd4 <ai_platform_network_process+0x2f4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	d010      	beq.n	8004d2c <ai_platform_network_process+0x4c>
 8004d0a:	4ab3      	ldr	r2, [pc, #716]	; (8004fd8 <ai_platform_network_process+0x2f8>)
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1fb      	bne.n	8004d12 <ai_platform_network_process+0x32>
 8004d1a:	4bb0      	ldr	r3, [pc, #704]	; (8004fdc <ai_platform_network_process+0x2fc>)
 8004d1c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d20:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d24:	4bae      	ldr	r3, [pc, #696]	; (8004fe0 <ai_platform_network_process+0x300>)
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d00d      	beq.n	8004d46 <ai_platform_network_process+0x66>
 8004d2a:	e7fe      	b.n	8004d2a <ai_platform_network_process+0x4a>
 8004d2c:	4aad      	ldr	r2, [pc, #692]	; (8004fe4 <ai_platform_network_process+0x304>)
 8004d2e:	2301      	movs	r3, #1
 8004d30:	6093      	str	r3, [r2, #8]
 8004d32:	6893      	ldr	r3, [r2, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1fc      	bne.n	8004d32 <ai_platform_network_process+0x52>
 8004d38:	4ba8      	ldr	r3, [pc, #672]	; (8004fdc <ai_platform_network_process+0x2fc>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	4ba8      	ldr	r3, [pc, #672]	; (8004fe0 <ai_platform_network_process+0x300>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f040 812c 	bne.w	8004f9e <ai_platform_network_process+0x2be>
 8004d46:	f7ff fa99 	bl	800427c <_ai_platform_release_crc>
 8004d4a:	2d00      	cmp	r5, #0
 8004d4c:	f000 8154 	beq.w	8004ff8 <ai_platform_network_process+0x318>
 8004d50:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8124 	beq.w	8004fa0 <ai_platform_network_process+0x2c0>
 8004d58:	68eb      	ldr	r3, [r5, #12]
 8004d5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2700      	movs	r7, #0
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	616f      	str	r7, [r5, #20]
 8004d68:	f040 813e 	bne.w	8004fe8 <ai_platform_network_process+0x308>
 8004d6c:	2e00      	cmp	r6, #0
 8004d6e:	f000 811d 	beq.w	8004fac <ai_platform_network_process+0x2cc>
 8004d72:	f1ba 0f00 	cmp.w	sl, #0
 8004d76:	f000 8119 	beq.w	8004fac <ai_platform_network_process+0x2cc>
 8004d7a:	f8ba 3000 	ldrh.w	r3, [sl]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8114 	beq.w	8004fac <ai_platform_network_process+0x2cc>
 8004d84:	69b3      	ldr	r3, [r6, #24]
 8004d86:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004d90:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d072      	beq.n	8004e7e <ai_platform_network_process+0x19e>
 8004d98:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004d9c:	2c00      	cmp	r4, #0
 8004d9e:	d06e      	beq.n	8004e7e <ai_platform_network_process+0x19e>
 8004da0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004da4:	f8d3 9000 	ldr.w	r9, [r3]
 8004da8:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004dac:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004db0:	f000 81de 	beq.w	8005170 <ai_platform_network_process+0x490>
 8004db4:	69a3      	ldr	r3, [r4, #24]
 8004db6:	2101      	movs	r1, #1
 8004db8:	4630      	mov	r0, r6
 8004dba:	685d      	ldr	r5, [r3, #4]
 8004dbc:	f7ff fa0e 	bl	80041dc <ai_buffer_get_size>
 8004dc0:	4285      	cmp	r5, r0
 8004dc2:	f0c0 811b 	bcc.w	8004ffc <ai_platform_network_process+0x31c>
 8004dc6:	68e0      	ldr	r0, [r4, #12]
 8004dc8:	69b1      	ldr	r1, [r6, #24]
 8004dca:	68c2      	ldr	r2, [r0, #12]
 8004dcc:	68cb      	ldr	r3, [r1, #12]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	f040 8114 	bne.w	8004ffc <ai_platform_network_process+0x31c>
 8004dd4:	6882      	ldr	r2, [r0, #8]
 8004dd6:	688b      	ldr	r3, [r1, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	f040 810f 	bne.w	8004ffc <ai_platform_network_process+0x31c>
 8004dde:	6842      	ldr	r2, [r0, #4]
 8004de0:	684b      	ldr	r3, [r1, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	f040 810a 	bne.w	8004ffc <ai_platform_network_process+0x31c>
 8004de8:	69a3      	ldr	r3, [r4, #24]
 8004dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dee:	f001 f94b 	bl	8006088 <ai_array_get_data_byte_size>
 8004df2:	4605      	mov	r5, r0
 8004df4:	4620      	mov	r0, r4
 8004df6:	f001 f95f 	bl	80060b8 <get_tensor_byte_size>
 8004dfa:	4285      	cmp	r5, r0
 8004dfc:	f0c0 80fe 	bcc.w	8004ffc <ai_platform_network_process+0x31c>
 8004e00:	69a3      	ldr	r3, [r4, #24]
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	f001 f8ac 	bl	8005f60 <ai_array_to_buffer_fmt>
 8004e08:	6833      	ldr	r3, [r6, #0]
 8004e0a:	4058      	eors	r0, r3
 8004e0c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004e10:	f040 81b9 	bne.w	8005186 <ai_platform_network_process+0x4a6>
 8004e14:	6873      	ldr	r3, [r6, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 81ac 	beq.w	8005174 <ai_platform_network_process+0x494>
 8004e1c:	69b3      	ldr	r3, [r6, #24]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 819c 	beq.w	800515e <ai_platform_network_process+0x47e>
 8004e26:	9a01      	ldr	r2, [sp, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	bf38      	it	cc
 8004e2c:	461a      	movcc	r2, r3
 8004e2e:	4620      	mov	r0, r4
 8004e30:	9201      	str	r2, [sp, #4]
 8004e32:	f001 f941 	bl	80060b8 <get_tensor_byte_size>
 8004e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e3a:	69b3      	ldr	r3, [r6, #24]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	fb00 f303 	mul.w	r3, r0, r3
 8004e42:	f8c8 300c 	str.w	r3, [r8, #12]
 8004e46:	6871      	ldr	r1, [r6, #4]
 8004e48:	f8c8 1004 	str.w	r1, [r8, #4]
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f849 300b 	str.w	r3, [r9, fp]
 8004e52:	69a0      	ldr	r0, [r4, #24]
 8004e54:	6803      	ldr	r3, [r0, #0]
 8004e56:	009a      	lsls	r2, r3, #2
 8004e58:	f107 0701 	add.w	r7, r7, #1
 8004e5c:	f106 061c 	add.w	r6, r6, #28
 8004e60:	f100 80af 	bmi.w	8004fc2 <ai_platform_network_process+0x2e2>
 8004e64:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	4419      	add	r1, r3
 8004e6c:	6081      	str	r1, [r0, #8]
 8004e6e:	69a3      	ldr	r3, [r4, #24]
 8004e70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	f8ba 3000 	ldrh.w	r3, [sl]
 8004e7a:	42bb      	cmp	r3, r7
 8004e7c:	d888      	bhi.n	8004d90 <ai_platform_network_process+0xb0>
 8004e7e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8004e82:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8004e84:	f1bb 0f00 	cmp.w	fp, #0
 8004e88:	f000 8186 	beq.w	8005198 <ai_platform_network_process+0x4b8>
 8004e8c:	2a01      	cmp	r2, #1
 8004e8e:	f240 815e 	bls.w	800514e <ai_platform_network_process+0x46e>
 8004e92:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8004e96:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8157 	beq.w	800514e <ai_platform_network_process+0x46e>
 8004ea0:	465e      	mov	r6, fp
 8004ea2:	2700      	movs	r7, #0
 8004ea4:	462c      	mov	r4, r5
 8004ea6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80b4 	beq.w	8005018 <ai_platform_network_process+0x338>
 8004eb0:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	f000 80af 	beq.w	8005018 <ai_platform_network_process+0x338>
 8004eba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004ebe:	f8d3 8000 	ldr.w	r8, [r3]
 8004ec2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8004ec6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004eca:	f000 8171 	beq.w	80051b0 <ai_platform_network_process+0x4d0>
 8004ece:	69ab      	ldr	r3, [r5, #24]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	9302      	str	r3, [sp, #8]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff f980 	bl	80041dc <ai_buffer_get_size>
 8004edc:	9b02      	ldr	r3, [sp, #8]
 8004ede:	4283      	cmp	r3, r0
 8004ee0:	f0c0 8134 	bcc.w	800514c <ai_platform_network_process+0x46c>
 8004ee4:	68e8      	ldr	r0, [r5, #12]
 8004ee6:	69b1      	ldr	r1, [r6, #24]
 8004ee8:	68c2      	ldr	r2, [r0, #12]
 8004eea:	68cb      	ldr	r3, [r1, #12]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f040 812d 	bne.w	800514c <ai_platform_network_process+0x46c>
 8004ef2:	6882      	ldr	r2, [r0, #8]
 8004ef4:	688b      	ldr	r3, [r1, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	f040 8128 	bne.w	800514c <ai_platform_network_process+0x46c>
 8004efc:	6842      	ldr	r2, [r0, #4]
 8004efe:	684b      	ldr	r3, [r1, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	f040 8123 	bne.w	800514c <ai_platform_network_process+0x46c>
 8004f06:	69ab      	ldr	r3, [r5, #24]
 8004f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f0c:	f001 f8bc 	bl	8006088 <ai_array_get_data_byte_size>
 8004f10:	9002      	str	r0, [sp, #8]
 8004f12:	4628      	mov	r0, r5
 8004f14:	f001 f8d0 	bl	80060b8 <get_tensor_byte_size>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	4283      	cmp	r3, r0
 8004f1c:	f0c0 8116 	bcc.w	800514c <ai_platform_network_process+0x46c>
 8004f20:	69ab      	ldr	r3, [r5, #24]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	f001 f81c 	bl	8005f60 <ai_array_to_buffer_fmt>
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	4058      	eors	r0, r3
 8004f2c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004f30:	f040 8136 	bne.w	80051a0 <ai_platform_network_process+0x4c0>
 8004f34:	6873      	ldr	r3, [r6, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 814d 	beq.w	80051d6 <ai_platform_network_process+0x4f6>
 8004f3c:	69b3      	ldr	r3, [r6, #24]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 813f 	beq.w	80051c4 <ai_platform_network_process+0x4e4>
 8004f46:	9a01      	ldr	r2, [sp, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	bf38      	it	cc
 8004f4c:	461a      	movcc	r2, r3
 8004f4e:	4628      	mov	r0, r5
 8004f50:	9201      	str	r2, [sp, #4]
 8004f52:	f001 f8b1 	bl	80060b8 <get_tensor_byte_size>
 8004f56:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f5a:	69b3      	ldr	r3, [r6, #24]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	fb00 f303 	mul.w	r3, r0, r3
 8004f62:	f8ca 300c 	str.w	r3, [sl, #12]
 8004f66:	6871      	ldr	r1, [r6, #4]
 8004f68:	f8ca 1004 	str.w	r1, [sl, #4]
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f848 300b 	str.w	r3, [r8, fp]
 8004f72:	69a8      	ldr	r0, [r5, #24]
 8004f74:	6803      	ldr	r3, [r0, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f107 0701 	add.w	r7, r7, #1
 8004f7c:	f106 061c 	add.w	r6, r6, #28
 8004f80:	d445      	bmi.n	800500e <ai_platform_network_process+0x32e>
 8004f82:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	4419      	add	r1, r3
 8004f8a:	6081      	str	r1, [r0, #8]
 8004f8c:	69ab      	ldr	r3, [r5, #24]
 8004f8e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004f98:	429f      	cmp	r7, r3
 8004f9a:	d384      	bcc.n	8004ea6 <ai_platform_network_process+0x1c6>
 8004f9c:	e03c      	b.n	8005018 <ai_platform_network_process+0x338>
 8004f9e:	e7fe      	b.n	8004f9e <ai_platform_network_process+0x2be>
 8004fa0:	68ea      	ldr	r2, [r5, #12]
 8004fa2:	616b      	str	r3, [r5, #20]
 8004fa4:	f002 0203 	and.w	r2, r2, #3
 8004fa8:	2a03      	cmp	r2, #3
 8004faa:	d11d      	bne.n	8004fe8 <ai_platform_network_process+0x308>
 8004fac:	2217      	movs	r2, #23
 8004fae:	2112      	movs	r1, #18
 8004fb0:	f105 0010 	add.w	r0, r5, #16
 8004fb4:	f000 f920 	bl	80051f8 <core_set_error>
 8004fb8:	2400      	movs	r4, #0
 8004fba:	4620      	mov	r0, r4
 8004fbc:	b005      	add	sp, #20
 8004fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc2:	f8ba 3000 	ldrh.w	r3, [sl]
 8004fc6:	429f      	cmp	r7, r3
 8004fc8:	f4ff aee2 	bcc.w	8004d90 <ai_platform_network_process+0xb0>
 8004fcc:	e757      	b.n	8004e7e <ai_platform_network_process+0x19e>
 8004fce:	bf00      	nop
 8004fd0:	a1c00100 	.word	0xa1c00100
 8004fd4:	e0042000 	.word	0xe0042000
 8004fd8:	58024000 	.word	0x58024000
 8004fdc:	f407a5c2 	.word	0xf407a5c2
 8004fe0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004fe4:	40023000 	.word	0x40023000
 8004fe8:	2230      	movs	r2, #48	; 0x30
 8004fea:	2111      	movs	r1, #17
 8004fec:	f105 0010 	add.w	r0, r5, #16
 8004ff0:	f000 f902 	bl	80051f8 <core_set_error>
 8004ff4:	2400      	movs	r4, #0
 8004ff6:	e7e0      	b.n	8004fba <ai_platform_network_process+0x2da>
 8004ff8:	462c      	mov	r4, r5
 8004ffa:	e7de      	b.n	8004fba <ai_platform_network_process+0x2da>
 8004ffc:	9d02      	ldr	r5, [sp, #8]
 8004ffe:	2218      	movs	r2, #24
 8005000:	2112      	movs	r1, #18
 8005002:	f105 0010 	add.w	r0, r5, #16
 8005006:	f000 f8f7 	bl	80051f8 <core_set_error>
 800500a:	2400      	movs	r4, #0
 800500c:	e7d5      	b.n	8004fba <ai_platform_network_process+0x2da>
 800500e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005012:	429f      	cmp	r7, r3
 8005014:	f4ff af47 	bcc.w	8004ea6 <ai_platform_network_process+0x1c6>
 8005018:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800501c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800501e:	82a3      	strh	r3, [r4, #20]
 8005020:	4625      	mov	r5, r4
 8005022:	2a00      	cmp	r2, #0
 8005024:	f040 808c 	bne.w	8005140 <ai_platform_network_process+0x460>
 8005028:	4616      	mov	r6, r2
 800502a:	4617      	mov	r7, r2
 800502c:	8aec      	ldrh	r4, [r5, #22]
 800502e:	429c      	cmp	r4, r3
 8005030:	bf38      	it	cc
 8005032:	46ab      	movcc	fp, r5
 8005034:	d2c1      	bcs.n	8004fba <ai_platform_network_process+0x2da>
 8005036:	2e00      	cmp	r6, #0
 8005038:	d030      	beq.n	800509c <ai_platform_network_process+0x3bc>
 800503a:	f04f 0800 	mov.w	r8, #0
 800503e:	e014      	b.n	800506a <ai_platform_network_process+0x38a>
 8005040:	6882      	ldr	r2, [r0, #8]
 8005042:	68c5      	ldr	r5, [r0, #12]
 8005044:	6863      	ldr	r3, [r4, #4]
 8005046:	1b52      	subs	r2, r2, r5
 8005048:	4413      	add	r3, r2
 800504a:	6083      	str	r3, [r0, #8]
 800504c:	698b      	ldr	r3, [r1, #24]
 800504e:	6862      	ldr	r2, [r4, #4]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005056:	f859 200a 	ldr.w	r2, [r9, sl]
 800505a:	440b      	add	r3, r1
 800505c:	4293      	cmp	r3, r2
 800505e:	bf24      	itt	cs
 8005060:	68e3      	ldrcs	r3, [r4, #12]
 8005062:	1ad3      	subcs	r3, r2, r3
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	f108 0801 	add.w	r8, r8, #1
 800506a:	8833      	ldrh	r3, [r6, #0]
 800506c:	4543      	cmp	r3, r8
 800506e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005072:	d913      	bls.n	800509c <ai_platform_network_process+0x3bc>
 8005074:	6873      	ldr	r3, [r6, #4]
 8005076:	b18b      	cbz	r3, 800509c <ai_platform_network_process+0x3bc>
 8005078:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800507c:	b171      	cbz	r1, 800509c <ai_platform_network_process+0x3bc>
 800507e:	6988      	ldr	r0, [r1, #24]
 8005080:	68b2      	ldr	r2, [r6, #8]
 8005082:	6803      	ldr	r3, [r0, #0]
 8005084:	f8d2 9000 	ldr.w	r9, [r2]
 8005088:	009d      	lsls	r5, r3, #2
 800508a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800508e:	d5d7      	bpl.n	8005040 <ai_platform_network_process+0x360>
 8005090:	6881      	ldr	r1, [r0, #8]
 8005092:	68a2      	ldr	r2, [r4, #8]
 8005094:	6860      	ldr	r0, [r4, #4]
 8005096:	f000 fedd 	bl	8005e54 <st_int8_copy>
 800509a:	e7da      	b.n	8005052 <ai_platform_network_process+0x372>
 800509c:	4658      	mov	r0, fp
 800509e:	f000 f903 	bl	80052a8 <ai_layers_forward_all>
 80050a2:	2f00      	cmp	r7, #0
 80050a4:	d03d      	beq.n	8005122 <ai_platform_network_process+0x442>
 80050a6:	2400      	movs	r4, #0
 80050a8:	e016      	b.n	80050d8 <ai_platform_network_process+0x3f8>
 80050aa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80050ae:	f859 100a 	ldr.w	r1, [r9, sl]
 80050b2:	4413      	add	r3, r2
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf24      	itt	cs
 80050b8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80050bc:	1acb      	subcs	r3, r1, r3
 80050be:	f8c8 3004 	str.w	r3, [r8, #4]
 80050c2:	6981      	ldr	r1, [r0, #24]
 80050c4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80050c8:	1b52      	subs	r2, r2, r5
 80050ca:	4413      	add	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
 80050ce:	6983      	ldr	r3, [r0, #24]
 80050d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	3401      	adds	r4, #1
 80050d8:	883b      	ldrh	r3, [r7, #0]
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d921      	bls.n	8005122 <ai_platform_network_process+0x442>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	b1fb      	cbz	r3, 8005122 <ai_platform_network_process+0x442>
 80050e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80050e6:	b1e0      	cbz	r0, 8005122 <ai_platform_network_process+0x442>
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	6983      	ldr	r3, [r0, #24]
 80050ec:	f8d2 9000 	ldr.w	r9, [r2]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80050f8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80050fc:	d5d5      	bpl.n	80050aa <ai_platform_network_process+0x3ca>
 80050fe:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005102:	6898      	ldr	r0, [r3, #8]
 8005104:	f000 fea6 	bl	8005e54 <st_int8_copy>
 8005108:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800510c:	f859 200a 	ldr.w	r2, [r9, sl]
 8005110:	440b      	add	r3, r1
 8005112:	4293      	cmp	r3, r2
 8005114:	bf24      	itt	cs
 8005116:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800511a:	1ad3      	subcs	r3, r2, r3
 800511c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005120:	e7d9      	b.n	80050d6 <ai_platform_network_process+0x3f6>
 8005122:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005126:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800512a:	3401      	adds	r4, #1
 800512c:	b2a4      	uxth	r4, r4
 800512e:	42a3      	cmp	r3, r4
 8005130:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005134:	f63f af7f 	bhi.w	8005036 <ai_platform_network_process+0x356>
 8005138:	4620      	mov	r0, r4
 800513a:	b005      	add	sp, #20
 800513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005140:	2a01      	cmp	r2, #1
 8005142:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005144:	d03c      	beq.n	80051c0 <ai_platform_network_process+0x4e0>
 8005146:	f106 070c 	add.w	r7, r6, #12
 800514a:	e76f      	b.n	800502c <ai_platform_network_process+0x34c>
 800514c:	4625      	mov	r5, r4
 800514e:	2218      	movs	r2, #24
 8005150:	2113      	movs	r1, #19
 8005152:	f105 0010 	add.w	r0, r5, #16
 8005156:	f000 f84f 	bl	80051f8 <core_set_error>
 800515a:	2400      	movs	r4, #0
 800515c:	e72d      	b.n	8004fba <ai_platform_network_process+0x2da>
 800515e:	9d02      	ldr	r5, [sp, #8]
 8005160:	4604      	mov	r4, r0
 8005162:	2221      	movs	r2, #33	; 0x21
 8005164:	2112      	movs	r1, #18
 8005166:	f105 0010 	add.w	r0, r5, #16
 800516a:	f000 f845 	bl	80051f8 <core_set_error>
 800516e:	e724      	b.n	8004fba <ai_platform_network_process+0x2da>
 8005170:	9d02      	ldr	r5, [sp, #8]
 8005172:	e71b      	b.n	8004fac <ai_platform_network_process+0x2cc>
 8005174:	9d02      	ldr	r5, [sp, #8]
 8005176:	4604      	mov	r4, r0
 8005178:	2217      	movs	r2, #23
 800517a:	2112      	movs	r1, #18
 800517c:	f105 0010 	add.w	r0, r5, #16
 8005180:	f000 f83a 	bl	80051f8 <core_set_error>
 8005184:	e719      	b.n	8004fba <ai_platform_network_process+0x2da>
 8005186:	9d02      	ldr	r5, [sp, #8]
 8005188:	2219      	movs	r2, #25
 800518a:	2112      	movs	r1, #18
 800518c:	f105 0010 	add.w	r0, r5, #16
 8005190:	f000 f832 	bl	80051f8 <core_set_error>
 8005194:	2400      	movs	r4, #0
 8005196:	e710      	b.n	8004fba <ai_platform_network_process+0x2da>
 8005198:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800519c:	82ab      	strh	r3, [r5, #20]
 800519e:	e740      	b.n	8005022 <ai_platform_network_process+0x342>
 80051a0:	f104 0010 	add.w	r0, r4, #16
 80051a4:	2219      	movs	r2, #25
 80051a6:	2113      	movs	r1, #19
 80051a8:	f000 f826 	bl	80051f8 <core_set_error>
 80051ac:	2400      	movs	r4, #0
 80051ae:	e704      	b.n	8004fba <ai_platform_network_process+0x2da>
 80051b0:	f104 0010 	add.w	r0, r4, #16
 80051b4:	2217      	movs	r2, #23
 80051b6:	2113      	movs	r1, #19
 80051b8:	f000 f81e 	bl	80051f8 <core_set_error>
 80051bc:	4654      	mov	r4, sl
 80051be:	e6fc      	b.n	8004fba <ai_platform_network_process+0x2da>
 80051c0:	2700      	movs	r7, #0
 80051c2:	e733      	b.n	800502c <ai_platform_network_process+0x34c>
 80051c4:	4625      	mov	r5, r4
 80051c6:	2221      	movs	r2, #33	; 0x21
 80051c8:	4604      	mov	r4, r0
 80051ca:	2113      	movs	r1, #19
 80051cc:	f105 0010 	add.w	r0, r5, #16
 80051d0:	f000 f812 	bl	80051f8 <core_set_error>
 80051d4:	e6f1      	b.n	8004fba <ai_platform_network_process+0x2da>
 80051d6:	4625      	mov	r5, r4
 80051d8:	2217      	movs	r2, #23
 80051da:	4604      	mov	r4, r0
 80051dc:	2113      	movs	r1, #19
 80051de:	f105 0010 	add.w	r0, r5, #16
 80051e2:	f000 f809 	bl	80051f8 <core_set_error>
 80051e6:	e6e8      	b.n	8004fba <ai_platform_network_process+0x2da>

080051e8 <core_init>:
 80051e8:	2001      	movs	r0, #1
 80051ea:	4770      	bx	lr

080051ec <core_get_error>:
 80051ec:	4603      	mov	r3, r0
 80051ee:	2200      	movs	r2, #0
 80051f0:	6800      	ldr	r0, [r0, #0]
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop

080051f8 <core_set_error>:
 80051f8:	4603      	mov	r3, r0
 80051fa:	7800      	ldrb	r0, [r0, #0]
 80051fc:	b108      	cbz	r0, 8005202 <core_set_error+0xa>
 80051fe:	2000      	movs	r0, #0
 8005200:	4770      	bx	lr
 8005202:	7019      	strb	r1, [r3, #0]
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	f362 211f 	bfi	r1, r2, #8, #24
 800520a:	2001      	movs	r0, #1
 800520c:	6019      	str	r1, [r3, #0]
 800520e:	4770      	bx	lr

08005210 <ai_check_custom_types>:
 8005210:	b082      	sub	sp, #8
 8005212:	4b13      	ldr	r3, [pc, #76]	; (8005260 <ai_check_custom_types+0x50>)
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	b118      	cbz	r0, 8005220 <ai_check_custom_types+0x10>
 8005218:	7803      	ldrb	r3, [r0, #0]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d002      	beq.n	8005224 <ai_check_custom_types+0x14>
 800521e:	2000      	movs	r0, #0
 8005220:	b002      	add	sp, #8
 8005222:	4770      	bx	lr
 8005224:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005228:	4293      	cmp	r3, r2
 800522a:	d004      	beq.n	8005236 <ai_check_custom_types+0x26>
 800522c:	2001      	movs	r0, #1
 800522e:	f080 0001 	eor.w	r0, r0, #1
 8005232:	b002      	add	sp, #8
 8005234:	4770      	bx	lr
 8005236:	7842      	ldrb	r2, [r0, #1]
 8005238:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800523c:	429a      	cmp	r2, r3
 800523e:	f100 0001 	add.w	r0, r0, #1
 8005242:	d1f3      	bne.n	800522c <ai_check_custom_types+0x1c>
 8005244:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005248:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800524c:	429a      	cmp	r2, r3
 800524e:	d1ed      	bne.n	800522c <ai_check_custom_types+0x1c>
 8005250:	7842      	ldrb	r2, [r0, #1]
 8005252:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005256:	429a      	cmp	r2, r3
 8005258:	d1e8      	bne.n	800522c <ai_check_custom_types+0x1c>
 800525a:	2000      	movs	r0, #0
 800525c:	e7e7      	b.n	800522e <ai_check_custom_types+0x1e>
 800525e:	bf00      	nop
 8005260:	84048403 	.word	0x84048403

08005264 <ai_layers_init_all>:
 8005264:	4601      	mov	r1, r0
 8005266:	2000      	movs	r0, #0
 8005268:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800526a:	b143      	cbz	r3, 800527e <ai_layers_init_all+0x1a>
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	60d9      	str	r1, [r3, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	f100 0001 	add.w	r0, r0, #1
 8005276:	d002      	beq.n	800527e <ai_layers_init_all+0x1a>
 8005278:	b10a      	cbz	r2, 800527e <ai_layers_init_all+0x1a>
 800527a:	4613      	mov	r3, r2
 800527c:	e7f5      	b.n	800526a <ai_layers_init_all+0x6>
 800527e:	4770      	bx	lr

08005280 <ai_layers_post_init_all>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005284:	2500      	movs	r5, #0
 8005286:	b16c      	cbz	r4, 80052a4 <ai_layers_post_init_all+0x24>
 8005288:	6863      	ldr	r3, [r4, #4]
 800528a:	07db      	lsls	r3, r3, #31
 800528c:	d504      	bpl.n	8005298 <ai_layers_post_init_all+0x18>
 800528e:	6a23      	ldr	r3, [r4, #32]
 8005290:	4620      	mov	r0, r4
 8005292:	b10b      	cbz	r3, 8005298 <ai_layers_post_init_all+0x18>
 8005294:	4798      	blx	r3
 8005296:	3501      	adds	r5, #1
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	42a3      	cmp	r3, r4
 800529c:	d002      	beq.n	80052a4 <ai_layers_post_init_all+0x24>
 800529e:	b10b      	cbz	r3, 80052a4 <ai_layers_post_init_all+0x24>
 80052a0:	461c      	mov	r4, r3
 80052a2:	e7f0      	b.n	8005286 <ai_layers_post_init_all+0x6>
 80052a4:	4628      	mov	r0, r5
 80052a6:	bd38      	pop	{r3, r4, r5, pc}

080052a8 <ai_layers_forward_all>:
 80052a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ac:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80052b0:	4604      	mov	r4, r0
 80052b2:	f1b8 0f00 	cmp.w	r8, #0
 80052b6:	d02b      	beq.n	8005310 <ai_layers_forward_all+0x68>
 80052b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80052ba:	6381      	str	r1, [r0, #56]	; 0x38
 80052bc:	b321      	cbz	r1, 8005308 <ai_layers_forward_all+0x60>
 80052be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80052c0:	2001      	movs	r0, #1
 80052c2:	47c0      	blx	r8
 80052c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80052c6:	b1fe      	cbz	r6, 8005308 <ai_layers_forward_all+0x60>
 80052c8:	2700      	movs	r7, #0
 80052ca:	4631      	mov	r1, r6
 80052cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052ce:	2002      	movs	r0, #2
 80052d0:	47c0      	blx	r8
 80052d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80052d4:	4628      	mov	r0, r5
 80052d6:	696b      	ldr	r3, [r5, #20]
 80052d8:	4798      	blx	r3
 80052da:	692e      	ldr	r6, [r5, #16]
 80052dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052e0:	42b5      	cmp	r5, r6
 80052e2:	f04f 0003 	mov.w	r0, #3
 80052e6:	d007      	beq.n	80052f8 <ai_layers_forward_all+0x50>
 80052e8:	47c0      	blx	r8
 80052ea:	3701      	adds	r7, #1
 80052ec:	63a6      	str	r6, [r4, #56]	; 0x38
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	d1eb      	bne.n	80052ca <ai_layers_forward_all+0x22>
 80052f2:	4638      	mov	r0, r7
 80052f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f8:	2003      	movs	r0, #3
 80052fa:	47c0      	blx	r8
 80052fc:	2300      	movs	r3, #0
 80052fe:	3701      	adds	r7, #1
 8005300:	63a3      	str	r3, [r4, #56]	; 0x38
 8005302:	4638      	mov	r0, r7
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	2700      	movs	r7, #0
 800530a:	4638      	mov	r0, r7
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005312:	6385      	str	r5, [r0, #56]	; 0x38
 8005314:	2d00      	cmp	r5, #0
 8005316:	d0f7      	beq.n	8005308 <ai_layers_forward_all+0x60>
 8005318:	4647      	mov	r7, r8
 800531a:	696b      	ldr	r3, [r5, #20]
 800531c:	4628      	mov	r0, r5
 800531e:	4798      	blx	r3
 8005320:	462b      	mov	r3, r5
 8005322:	692d      	ldr	r5, [r5, #16]
 8005324:	429d      	cmp	r5, r3
 8005326:	d004      	beq.n	8005332 <ai_layers_forward_all+0x8a>
 8005328:	63a5      	str	r5, [r4, #56]	; 0x38
 800532a:	3701      	adds	r7, #1
 800532c:	2d00      	cmp	r5, #0
 800532e:	d1f4      	bne.n	800531a <ai_layers_forward_all+0x72>
 8005330:	e7df      	b.n	80052f2 <ai_layers_forward_all+0x4a>
 8005332:	2300      	movs	r3, #0
 8005334:	63a3      	str	r3, [r4, #56]	; 0x38
 8005336:	3701      	adds	r7, #1
 8005338:	e7db      	b.n	80052f2 <ai_layers_forward_all+0x4a>
 800533a:	bf00      	nop

0800533c <forward_dense>:
 800533c:	6983      	ldr	r3, [r0, #24]
 800533e:	881a      	ldrh	r2, [r3, #0]
 8005340:	2a00      	cmp	r2, #0
 8005342:	f000 8181 	beq.w	8005648 <forward_dense+0x30c>
 8005346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	ed2d 8b02 	vpush	{d8}
 800534e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005352:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005356:	b095      	sub	sp, #84	; 0x54
 8005358:	b105      	cbz	r5, 800535c <forward_dense+0x20>
 800535a:	682d      	ldr	r5, [r5, #0]
 800535c:	2a01      	cmp	r2, #1
 800535e:	f000 828f 	beq.w	8005880 <forward_dense+0x544>
 8005362:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8005366:	b106      	cbz	r6, 800536a <forward_dense+0x2e>
 8005368:	6836      	ldr	r6, [r6, #0]
 800536a:	2a02      	cmp	r2, #2
 800536c:	f000 816e 	beq.w	800564c <forward_dense+0x310>
 8005370:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005374:	930b      	str	r3, [sp, #44]	; 0x2c
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8274 	beq.w	8005864 <forward_dense+0x528>
 800537c:	4619      	mov	r1, r3
 800537e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8005382:	6809      	ldr	r1, [r1, #0]
 8005384:	910d      	str	r1, [sp, #52]	; 0x34
 8005386:	2b01      	cmp	r3, #1
 8005388:	f240 826e 	bls.w	8005868 <forward_dense+0x52c>
 800538c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	930b      	str	r3, [sp, #44]	; 0x2c
 8005392:	460b      	mov	r3, r1
 8005394:	68e8      	ldr	r0, [r5, #12]
 8005396:	68f7      	ldr	r7, [r6, #12]
 8005398:	6840      	ldr	r0, [r0, #4]
 800539a:	6999      	ldr	r1, [r3, #24]
 800539c:	9013      	str	r0, [sp, #76]	; 0x4c
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	680b      	ldr	r3, [r1, #0]
 80053a2:	9012      	str	r0, [sp, #72]	; 0x48
 80053a4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80053a8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80053ac:	fb00 f404 	mul.w	r4, r0, r4
 80053b0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80053b4:	fa4e f000 	asr.w	r0, lr, r0
 80053b8:	2a03      	cmp	r2, #3
 80053ba:	9010      	str	r0, [sp, #64]	; 0x40
 80053bc:	f000 825d 	beq.w	800587a <forward_dense+0x53e>
 80053c0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80053c4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	f000 8246 	beq.w	800585a <forward_dense+0x51e>
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	2a00      	cmp	r2, #0
 80053d2:	f000 8242 	beq.w	800585a <forward_dense+0x51e>
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80053dc:	f000 822c 	beq.w	8005838 <forward_dense+0x4fc>
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	f000 8229 	beq.w	8005838 <forward_dense+0x4fc>
 80053e6:	f04f 0b00 	mov.w	fp, #0
 80053ea:	69b2      	ldr	r2, [r6, #24]
 80053ec:	69ab      	ldr	r3, [r5, #24]
 80053ee:	6891      	ldr	r1, [r2, #8]
 80053f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	6952      	ldr	r2, [r2, #20]
 80053f6:	9106      	str	r1, [sp, #24]
 80053f8:	fb07 f404 	mul.w	r4, r7, r4
 80053fc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005400:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005402:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005406:	4281      	cmp	r1, r0
 8005408:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800540c:	900e      	str	r0, [sp, #56]	; 0x38
 800540e:	940c      	str	r4, [sp, #48]	; 0x30
 8005410:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005414:	f080 8113 	bcs.w	800563e <forward_dense+0x302>
 8005418:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800541a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8005668 <forward_dense+0x32c>
 800541e:	f021 0201 	bic.w	r2, r1, #1
 8005422:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005426:	9204      	str	r2, [sp, #16]
 8005428:	f001 0201 	and.w	r2, r1, #1
 800542c:	08c8      	lsrs	r0, r1, #3
 800542e:	9208      	str	r2, [sp, #32]
 8005430:	008a      	lsls	r2, r1, #2
 8005432:	f001 0a07 	and.w	sl, r1, #7
 8005436:	920f      	str	r2, [sp, #60]	; 0x3c
 8005438:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800543c:	3320      	adds	r3, #32
 800543e:	465c      	mov	r4, fp
 8005440:	9007      	str	r0, [sp, #28]
 8005442:	46cb      	mov	fp, r9
 8005444:	9205      	str	r2, [sp, #20]
 8005446:	9302      	str	r3, [sp, #8]
 8005448:	46c1      	mov	r9, r8
 800544a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800544e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	3b20      	subs	r3, #32
 8005458:	930a      	str	r3, [sp, #40]	; 0x28
 800545a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800545c:	b10b      	cbz	r3, 8005462 <forward_dense+0x126>
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2c00      	cmp	r4, #0
 8005464:	f000 81da 	beq.w	800581c <forward_dense+0x4e0>
 8005468:	9910      	ldr	r1, [sp, #64]	; 0x40
 800546a:	2904      	cmp	r1, #4
 800546c:	9906      	ldr	r1, [sp, #24]
 800546e:	f000 80fd 	beq.w	800566c <forward_dense+0x330>
 8005472:	4549      	cmp	r1, r9
 8005474:	f080 80d2 	bcs.w	800561c <forward_dense+0x2e0>
 8005478:	460f      	mov	r7, r1
 800547a:	9907      	ldr	r1, [sp, #28]
 800547c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005480:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005484:	1c4e      	adds	r6, r1, #1
 8005486:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800548a:	4694      	mov	ip, r2
 800548c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800548e:	468e      	mov	lr, r1
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80de 	beq.w	8005652 <forward_dense+0x316>
 8005496:	ecf3 2a01 	vldmia	r3!, {s5}
 800549a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005668 <forward_dense+0x32c>
 800549e:	f1be 0f00 	cmp.w	lr, #0
 80054a2:	f000 80de 	beq.w	8005662 <forward_dense+0x326>
 80054a6:	f10c 0108 	add.w	r1, ip, #8
 80054aa:	4640      	mov	r0, r8
 80054ac:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80054b0:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80054b4:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80054b8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80054bc:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80054c0:	ed10 5a04 	vldr	s10, [r0, #-16]
 80054c4:	ed50 5a03 	vldr	s11, [r0, #-12]
 80054c8:	ed10 6a02 	vldr	s12, [r0, #-8]
 80054cc:	ed50 6a01 	vldr	s13, [r0, #-4]
 80054d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054d4:	edd5 7a00 	vldr	s15, [r5]
 80054d8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80054dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80054e4:	ed95 3a00 	vldr	s6, [r5]
 80054e8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80054ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 80054f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054f4:	3108      	adds	r1, #8
 80054f6:	edd5 3a00 	vldr	s7, [r5]
 80054fa:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80054fe:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005502:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005506:	3020      	adds	r0, #32
 8005508:	ed95 4a00 	vldr	s8, [r5]
 800550c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005510:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005514:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005518:	edd5 4a00 	vldr	s9, [r5]
 800551c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005520:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005524:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005528:	ed95 5a00 	vldr	s10, [r5]
 800552c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005530:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005534:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005538:	edd5 5a00 	vldr	s11, [r5]
 800553c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005540:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005544:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005548:	428e      	cmp	r6, r1
 800554a:	ed95 6a00 	vldr	s12, [r5]
 800554e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005556:	d1a9      	bne.n	80054ac <forward_dense+0x170>
 8005558:	f1a6 0108 	sub.w	r1, r6, #8
 800555c:	4650      	mov	r0, sl
 800555e:	2a00      	cmp	r2, #0
 8005560:	d04a      	beq.n	80055f8 <forward_dense+0x2bc>
 8005562:	780d      	ldrb	r5, [r1, #0]
 8005564:	edd0 6a00 	vldr	s13, [r0]
 8005568:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800556c:	edd5 7a00 	vldr	s15, [r5]
 8005570:	2a01      	cmp	r2, #1
 8005572:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005576:	d03f      	beq.n	80055f8 <forward_dense+0x2bc>
 8005578:	784d      	ldrb	r5, [r1, #1]
 800557a:	edd0 6a01 	vldr	s13, [r0, #4]
 800557e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005582:	edd5 7a00 	vldr	s15, [r5]
 8005586:	2a02      	cmp	r2, #2
 8005588:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800558c:	d034      	beq.n	80055f8 <forward_dense+0x2bc>
 800558e:	788d      	ldrb	r5, [r1, #2]
 8005590:	edd0 6a02 	vldr	s13, [r0, #8]
 8005594:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005598:	edd5 7a00 	vldr	s15, [r5]
 800559c:	2a03      	cmp	r2, #3
 800559e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055a2:	d029      	beq.n	80055f8 <forward_dense+0x2bc>
 80055a4:	78cd      	ldrb	r5, [r1, #3]
 80055a6:	edd0 6a03 	vldr	s13, [r0, #12]
 80055aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80055ae:	edd5 7a00 	vldr	s15, [r5]
 80055b2:	2a04      	cmp	r2, #4
 80055b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055b8:	d01e      	beq.n	80055f8 <forward_dense+0x2bc>
 80055ba:	790d      	ldrb	r5, [r1, #4]
 80055bc:	edd0 6a04 	vldr	s13, [r0, #16]
 80055c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80055c4:	edd5 7a00 	vldr	s15, [r5]
 80055c8:	2a05      	cmp	r2, #5
 80055ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055ce:	d013      	beq.n	80055f8 <forward_dense+0x2bc>
 80055d0:	794d      	ldrb	r5, [r1, #5]
 80055d2:	edd0 6a05 	vldr	s13, [r0, #20]
 80055d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80055da:	edd5 7a00 	vldr	s15, [r5]
 80055de:	2a06      	cmp	r2, #6
 80055e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055e4:	d008      	beq.n	80055f8 <forward_dense+0x2bc>
 80055e6:	7989      	ldrb	r1, [r1, #6]
 80055e8:	edd0 7a06 	vldr	s15, [r0, #24]
 80055ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80055f0:	edd1 6a00 	vldr	s13, [r1]
 80055f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055f8:	44dc      	add	ip, fp
 80055fa:	445e      	add	r6, fp
 80055fc:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005600:	eca7 7a01 	vstmia	r7!, {s14}
 8005604:	454f      	cmp	r7, r9
 8005606:	f4ff af43 	bcc.w	8005490 <forward_dense+0x154>
 800560a:	9a06      	ldr	r2, [sp, #24]
 800560c:	eba9 0302 	sub.w	r3, r9, r2
 8005610:	3b01      	subs	r3, #1
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	3304      	adds	r3, #4
 8005618:	18d3      	adds	r3, r2, r3
 800561a:	9306      	str	r3, [sp, #24]
 800561c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800561e:	9a05      	ldr	r2, [sp, #20]
 8005620:	4499      	add	r9, r3
 8005622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005624:	441a      	add	r2, r3
 8005626:	9205      	str	r2, [sp, #20]
 8005628:	9a02      	ldr	r2, [sp, #8]
 800562a:	441a      	add	r2, r3
 800562c:	9202      	str	r2, [sp, #8]
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	441a      	add	r2, r3
 8005632:	9204      	str	r2, [sp, #16]
 8005634:	9b06      	ldr	r3, [sp, #24]
 8005636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005638:	4293      	cmp	r3, r2
 800563a:	f4ff af08 	bcc.w	800544e <forward_dense+0x112>
 800563e:	b015      	add	sp, #84	; 0x54
 8005640:	ecbd 8b02 	vpop	{d8}
 8005644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005648:	6853      	ldr	r3, [r2, #4]
 800564a:	deff      	udf	#255	; 0xff
 800564c:	2300      	movs	r3, #0
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	deff      	udf	#255	; 0xff
 8005652:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005668 <forward_dense+0x32c>
 8005656:	eef0 2a48 	vmov.f32	s5, s16
 800565a:	f1be 0f00 	cmp.w	lr, #0
 800565e:	f47f af22 	bne.w	80054a6 <forward_dense+0x16a>
 8005662:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005664:	4661      	mov	r1, ip
 8005666:	e77a      	b.n	800555e <forward_dense+0x222>
 8005668:	00000000 	.word	0x00000000
 800566c:	4549      	cmp	r1, r9
 800566e:	d2d5      	bcs.n	800561c <forward_dense+0x2e0>
 8005670:	9807      	ldr	r0, [sp, #28]
 8005672:	9103      	str	r1, [sp, #12]
 8005674:	9904      	ldr	r1, [sp, #16]
 8005676:	f100 0c01 	add.w	ip, r0, #1
 800567a:	3901      	subs	r1, #1
 800567c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005680:	9109      	str	r1, [sp, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80b2 	beq.w	80057ec <forward_dense+0x4b0>
 8005688:	9907      	ldr	r1, [sp, #28]
 800568a:	ecf3 2a01 	vldmia	r3!, {s5}
 800568e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8005668 <forward_dense+0x32c>
 8005692:	2900      	cmp	r1, #0
 8005694:	f000 80b2 	beq.w	80057fc <forward_dense+0x4c0>
 8005698:	9902      	ldr	r1, [sp, #8]
 800569a:	1d10      	adds	r0, r2, #4
 800569c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80056a0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80056a4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80056a8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80056ac:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80056b0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80056b4:	ed11 5a04 	vldr	s10, [r1, #-16]
 80056b8:	ed51 5a03 	vldr	s11, [r1, #-12]
 80056bc:	ed11 6a02 	vldr	s12, [r1, #-8]
 80056c0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80056c4:	f006 070f 	and.w	r7, r6, #15
 80056c8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80056cc:	edd7 7a00 	vldr	s15, [r7]
 80056d0:	0936      	lsrs	r6, r6, #4
 80056d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80056d6:	ed96 3a00 	vldr	s6, [r6]
 80056da:	ee67 7a82 	vmul.f32	s15, s15, s4
 80056de:	092e      	lsrs	r6, r5, #4
 80056e0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80056e4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80056e8:	f005 050f 	and.w	r5, r5, #15
 80056ec:	edd6 3a00 	vldr	s7, [r6]
 80056f0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80056f4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80056f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80056fc:	0937      	lsrs	r7, r6, #4
 80056fe:	ed95 4a00 	vldr	s8, [r5]
 8005702:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8005706:	eee4 7a24 	vfma.f32	s15, s8, s9
 800570a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800570e:	f006 060f 	and.w	r6, r6, #15
 8005712:	edd7 4a00 	vldr	s9, [r7]
 8005716:	eee4 7a85 	vfma.f32	s15, s9, s10
 800571a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800571e:	3004      	adds	r0, #4
 8005720:	ed96 5a00 	vldr	s10, [r6]
 8005724:	092e      	lsrs	r6, r5, #4
 8005726:	eee5 7a25 	vfma.f32	s15, s10, s11
 800572a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800572e:	f005 050f 	and.w	r5, r5, #15
 8005732:	edd6 5a00 	vldr	s11, [r6]
 8005736:	eee5 7a86 	vfma.f32	s15, s11, s12
 800573a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800573e:	4584      	cmp	ip, r0
 8005740:	ed95 6a00 	vldr	s12, [r5]
 8005744:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005748:	f101 0120 	add.w	r1, r1, #32
 800574c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005750:	d1a4      	bne.n	800569c <forward_dense+0x360>
 8005752:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005756:	f1ac 0804 	sub.w	r8, ip, #4
 800575a:	9904      	ldr	r1, [sp, #16]
 800575c:	458e      	cmp	lr, r1
 800575e:	d22a      	bcs.n	80057b6 <forward_dense+0x47a>
 8005760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005762:	eba1 070e 	sub.w	r7, r1, lr
 8005766:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800576a:	f10e 0008 	add.w	r0, lr, #8
 800576e:	f108 36ff 	add.w	r6, r8, #4294967295
 8005772:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8005776:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800577a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800577e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005782:	f001 050f 	and.w	r5, r1, #15
 8005786:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800578a:	edd5 7a00 	vldr	s15, [r5]
 800578e:	0909      	lsrs	r1, r1, #4
 8005790:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005794:	ed91 6a00 	vldr	s12, [r1]
 8005798:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800579c:	42b7      	cmp	r7, r6
 800579e:	eee6 7a26 	vfma.f32	s15, s12, s13
 80057a2:	f100 0008 	add.w	r0, r0, #8
 80057a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057aa:	d1e4      	bne.n	8005776 <forward_dense+0x43a>
 80057ac:	f10a 0a01 	add.w	sl, sl, #1
 80057b0:	44d0      	add	r8, sl
 80057b2:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80057b6:	9908      	ldr	r1, [sp, #32]
 80057b8:	b321      	cbz	r1, 8005804 <forward_dense+0x4c8>
 80057ba:	f898 1000 	ldrb.w	r1, [r8]
 80057be:	edde 7a00 	vldr	s15, [lr]
 80057c2:	0909      	lsrs	r1, r1, #4
 80057c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80057c8:	edd1 6a00 	vldr	s13, [r1]
 80057cc:	9903      	ldr	r1, [sp, #12]
 80057ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057d2:	445a      	add	r2, fp
 80057d4:	44dc      	add	ip, fp
 80057d6:	ee72 2a87 	vadd.f32	s5, s5, s14
 80057da:	ece1 2a01 	vstmia	r1!, {s5}
 80057de:	4589      	cmp	r9, r1
 80057e0:	9103      	str	r1, [sp, #12]
 80057e2:	f67f af12 	bls.w	800560a <forward_dense+0x2ce>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f47f af4e 	bne.w	8005688 <forward_dense+0x34c>
 80057ec:	9907      	ldr	r1, [sp, #28]
 80057ee:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8005668 <forward_dense+0x32c>
 80057f2:	eef0 2a48 	vmov.f32	s5, s16
 80057f6:	2900      	cmp	r1, #0
 80057f8:	f47f af4e 	bne.w	8005698 <forward_dense+0x35c>
 80057fc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005800:	4690      	mov	r8, r2
 8005802:	e7aa      	b.n	800575a <forward_dense+0x41e>
 8005804:	9903      	ldr	r1, [sp, #12]
 8005806:	ee32 7a87 	vadd.f32	s14, s5, s14
 800580a:	445a      	add	r2, fp
 800580c:	eca1 7a01 	vstmia	r1!, {s14}
 8005810:	4549      	cmp	r1, r9
 8005812:	9103      	str	r1, [sp, #12]
 8005814:	44dc      	add	ip, fp
 8005816:	f4ff af34 	bcc.w	8005682 <forward_dense+0x346>
 800581a:	e6f6      	b.n	800560a <forward_dense+0x2ce>
 800581c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800581e:	9d06      	ldr	r5, [sp, #24]
 8005820:	9101      	str	r1, [sp, #4]
 8005822:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005824:	9100      	str	r1, [sp, #0]
 8005826:	4628      	mov	r0, r5
 8005828:	990a      	ldr	r1, [sp, #40]	; 0x28
 800582a:	f000 f9ef 	bl	8005c0c <forward_lite_dense_if32of32wf32>
 800582e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005830:	462b      	mov	r3, r5
 8005832:	4413      	add	r3, r2
 8005834:	9306      	str	r3, [sp, #24]
 8005836:	e6f1      	b.n	800561c <forward_dense+0x2e0>
 8005838:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800583c:	f1b9 0f00 	cmp.w	r9, #0
 8005840:	d016      	beq.n	8005870 <forward_dense+0x534>
 8005842:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005846:	f000 fbf7 	bl	8006038 <ai_array_get_byte_size>
 800584a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800584e:	4602      	mov	r2, r0
 8005850:	4659      	mov	r1, fp
 8005852:	4640      	mov	r0, r8
 8005854:	f000 fafe 	bl	8005e54 <st_int8_copy>
 8005858:	e5c7      	b.n	80053ea <forward_dense+0xae>
 800585a:	2b04      	cmp	r3, #4
 800585c:	d00a      	beq.n	8005874 <forward_dense+0x538>
 800585e:	f04f 0900 	mov.w	r9, #0
 8005862:	e5bd      	b.n	80053e0 <forward_dense+0xa4>
 8005864:	930d      	str	r3, [sp, #52]	; 0x34
 8005866:	e595      	b.n	8005394 <forward_dense+0x58>
 8005868:	2300      	movs	r3, #0
 800586a:	930b      	str	r3, [sp, #44]	; 0x2c
 800586c:	460b      	mov	r3, r1
 800586e:	e591      	b.n	8005394 <forward_dense+0x58>
 8005870:	46c3      	mov	fp, r8
 8005872:	e5ba      	b.n	80053ea <forward_dense+0xae>
 8005874:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005878:	e5b7      	b.n	80053ea <forward_dense+0xae>
 800587a:	2300      	movs	r3, #0
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	deff      	udf	#255	; 0xff
 8005880:	2300      	movs	r3, #0
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	deff      	udf	#255	; 0xff
 8005886:	bf00      	nop

08005888 <forward_relu>:
 8005888:	6982      	ldr	r2, [r0, #24]
 800588a:	8813      	ldrh	r3, [r2, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d05b      	beq.n	8005948 <forward_relu+0xc0>
 8005890:	6851      	ldr	r1, [r2, #4]
 8005892:	684a      	ldr	r2, [r1, #4]
 8005894:	b102      	cbz	r2, 8005898 <forward_relu+0x10>
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	f000 8123 	beq.w	8005ae4 <forward_relu+0x25c>
 800589e:	b470      	push	{r4, r5, r6}
 80058a0:	6909      	ldr	r1, [r1, #16]
 80058a2:	b101      	cbz	r1, 80058a6 <forward_relu+0x1e>
 80058a4:	6809      	ldr	r1, [r1, #0]
 80058a6:	69c6      	ldr	r6, [r0, #28]
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	f000 8097 	beq.w	80059dc <forward_relu+0x154>
 80058ae:	6873      	ldr	r3, [r6, #4]
 80058b0:	6988      	ldr	r0, [r1, #24]
 80058b2:	6991      	ldr	r1, [r2, #24]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	f000 80c1 	beq.w	8005a3c <forward_relu+0x1b4>
 80058ba:	6893      	ldr	r3, [r2, #8]
 80058bc:	6880      	ldr	r0, [r0, #8]
 80058be:	688c      	ldr	r4, [r1, #8]
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	f000 80f2 	beq.w	8005aaa <forward_relu+0x222>
 80058c6:	68d5      	ldr	r5, [r2, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80058ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058d2:	42ab      	cmp	r3, r5
 80058d4:	fb01 f202 	mul.w	r2, r1, r2
 80058d8:	d1f9      	bne.n	80058ce <forward_relu+0x46>
 80058da:	68b3      	ldr	r3, [r6, #8]
 80058dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80058e0:	edd3 6a00 	vldr	s13, [r3]
 80058e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80058e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80058ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80058f0:	3a01      	subs	r2, #1
 80058f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80058fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80058fe:	d425      	bmi.n	800594c <forward_relu+0xc4>
 8005900:	429c      	cmp	r4, r3
 8005902:	d81f      	bhi.n	8005944 <forward_relu+0xbc>
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	1d01      	adds	r1, r0, #4
 8005908:	e00d      	b.n	8005926 <forward_relu+0x9e>
 800590a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800590e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005912:	db03      	blt.n	800591c <forward_relu+0x94>
 8005914:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005918:	ee67 7a86 	vmul.f32	s15, s15, s12
 800591c:	3b08      	subs	r3, #8
 800591e:	429c      	cmp	r4, r3
 8005920:	ed61 7a01 	vstmdb	r1!, {s15}
 8005924:	d80e      	bhi.n	8005944 <forward_relu+0xbc>
 8005926:	4613      	mov	r3, r2
 8005928:	ed72 7a01 	vldmdb	r2!, {s15}
 800592c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	d9e9      	bls.n	800590a <forward_relu+0x82>
 8005936:	3b08      	subs	r3, #8
 8005938:	eef0 7a47 	vmov.f32	s15, s14
 800593c:	429c      	cmp	r4, r3
 800593e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005942:	d9f0      	bls.n	8005926 <forward_relu+0x9e>
 8005944:	bc70      	pop	{r4, r5, r6}
 8005946:	4770      	bx	lr
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	deff      	udf	#255	; 0xff
 800594c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	d11f      	bne.n	8005996 <forward_relu+0x10e>
 8005956:	429c      	cmp	r4, r3
 8005958:	d8f4      	bhi.n	8005944 <forward_relu+0xbc>
 800595a:	1b1c      	subs	r4, r3, r4
 800595c:	f024 0403 	bic.w	r4, r4, #3
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	2500      	movs	r5, #0
 8005964:	1b1b      	subs	r3, r3, r4
 8005966:	1d01      	adds	r1, r0, #4
 8005968:	ed72 7a01 	vldmdb	r2!, {s15}
 800596c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005974:	dc0a      	bgt.n	800598c <forward_relu+0x104>
 8005976:	429a      	cmp	r2, r3
 8005978:	f841 5d04 	str.w	r5, [r1, #-4]!
 800597c:	d0e2      	beq.n	8005944 <forward_relu+0xbc>
 800597e:	ed72 7a01 	vldmdb	r2!, {s15}
 8005982:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598a:	ddf4      	ble.n	8005976 <forward_relu+0xee>
 800598c:	429a      	cmp	r2, r3
 800598e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005992:	d1e9      	bne.n	8005968 <forward_relu+0xe0>
 8005994:	e7d6      	b.n	8005944 <forward_relu+0xbc>
 8005996:	429c      	cmp	r4, r3
 8005998:	d8d4      	bhi.n	8005944 <forward_relu+0xbc>
 800599a:	1b1c      	subs	r4, r3, r4
 800599c:	f024 0403 	bic.w	r4, r4, #3
 80059a0:	1d1a      	adds	r2, r3, #4
 80059a2:	1d01      	adds	r1, r0, #4
 80059a4:	1b1b      	subs	r3, r3, r4
 80059a6:	ed72 7a01 	vldmdb	r2!, {s15}
 80059aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80059ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b2:	db0e      	blt.n	80059d2 <forward_relu+0x14a>
 80059b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059b8:	4293      	cmp	r3, r2
 80059ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059be:	ed61 7a01 	vstmdb	r1!, {s15}
 80059c2:	d0bf      	beq.n	8005944 <forward_relu+0xbc>
 80059c4:	ed72 7a01 	vldmdb	r2!, {s15}
 80059c8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80059cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d0:	daf0      	bge.n	80059b4 <forward_relu+0x12c>
 80059d2:	4293      	cmp	r3, r2
 80059d4:	ed61 7a01 	vstmdb	r1!, {s15}
 80059d8:	d1e5      	bne.n	80059a6 <forward_relu+0x11e>
 80059da:	e7b3      	b.n	8005944 <forward_relu+0xbc>
 80059dc:	6893      	ldr	r3, [r2, #8]
 80059de:	6989      	ldr	r1, [r1, #24]
 80059e0:	6990      	ldr	r0, [r2, #24]
 80059e2:	6889      	ldr	r1, [r1, #8]
 80059e4:	6884      	ldr	r4, [r0, #8]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	d075      	beq.n	8005ad6 <forward_relu+0x24e>
 80059ea:	68d5      	ldr	r5, [r2, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80059f2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80059f6:	429d      	cmp	r5, r3
 80059f8:	fb00 f202 	mul.w	r2, r0, r2
 80059fc:	d1f9      	bne.n	80059f2 <forward_relu+0x16a>
 80059fe:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005a02:	3b01      	subs	r3, #1
 8005a04:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005a08:	4294      	cmp	r4, r2
 8005a0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005a0e:	d899      	bhi.n	8005944 <forward_relu+0xbc>
 8005a10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005aec <forward_relu+0x264>
 8005a14:	3204      	adds	r2, #4
 8005a16:	3104      	adds	r1, #4
 8005a18:	4613      	mov	r3, r2
 8005a1a:	ed72 7a01 	vldmdb	r2!, {s15}
 8005a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a26:	f1a3 0308 	sub.w	r3, r3, #8
 8005a2a:	bfb8      	it	lt
 8005a2c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005a30:	429c      	cmp	r4, r3
 8005a32:	ed61 7a01 	vstmdb	r1!, {s15}
 8005a36:	d9ef      	bls.n	8005a18 <forward_relu+0x190>
 8005a38:	bc70      	pop	{r4, r5, r6}
 8005a3a:	4770      	bx	lr
 8005a3c:	688c      	ldr	r4, [r1, #8]
 8005a3e:	6891      	ldr	r1, [r2, #8]
 8005a40:	6880      	ldr	r0, [r0, #8]
 8005a42:	0a09      	lsrs	r1, r1, #8
 8005a44:	d049      	beq.n	8005ada <forward_relu+0x252>
 8005a46:	68d5      	ldr	r5, [r2, #12]
 8005a48:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005a4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a50:	42aa      	cmp	r2, r5
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	d1f9      	bne.n	8005a4c <forward_relu+0x1c4>
 8005a58:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	68b1      	ldr	r1, [r6, #8]
 8005a60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a64:	429c      	cmp	r4, r3
 8005a66:	ed91 7a00 	vldr	s14, [r1]
 8005a6a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005a6e:	f63f af69 	bhi.w	8005944 <forward_relu+0xbc>
 8005a72:	2500      	movs	r5, #0
 8005a74:	3304      	adds	r3, #4
 8005a76:	1d02      	adds	r2, r0, #4
 8005a78:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a84:	f1a3 0104 	sub.w	r1, r3, #4
 8005a88:	f1a3 0308 	sub.w	r3, r3, #8
 8005a8c:	d406      	bmi.n	8005a9c <forward_relu+0x214>
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005a94:	f63f af56 	bhi.w	8005944 <forward_relu+0xbc>
 8005a98:	460b      	mov	r3, r1
 8005a9a:	e7ed      	b.n	8005a78 <forward_relu+0x1f0>
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005aa2:	f63f af4f 	bhi.w	8005944 <forward_relu+0xbc>
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	e7e6      	b.n	8005a78 <forward_relu+0x1f0>
 8005aaa:	68b3      	ldr	r3, [r6, #8]
 8005aac:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ab0:	edd3 6a00 	vldr	s13, [r3]
 8005ab4:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ab8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac0:	d401      	bmi.n	8005ac6 <forward_relu+0x23e>
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	e71e      	b.n	8005904 <forward_relu+0x7c>
 8005ac6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ace:	4623      	mov	r3, r4
 8005ad0:	f47f af63 	bne.w	800599a <forward_relu+0x112>
 8005ad4:	e741      	b.n	800595a <forward_relu+0xd2>
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	e79a      	b.n	8005a10 <forward_relu+0x188>
 8005ada:	68b2      	ldr	r2, [r6, #8]
 8005adc:	4623      	mov	r3, r4
 8005ade:	ed92 7a00 	vldr	s14, [r2]
 8005ae2:	e7c6      	b.n	8005a72 <forward_relu+0x1ea>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	deff      	udf	#255	; 0xff
 8005aea:	bf00      	nop
 8005aec:	00000000 	.word	0x00000000

08005af0 <forward_sm>:
 8005af0:	6982      	ldr	r2, [r0, #24]
 8005af2:	8813      	ldrh	r3, [r2, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d07c      	beq.n	8005bf2 <forward_sm+0x102>
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	ed2d 8b04 	vpush	{d8-d9}
 8005b00:	6852      	ldr	r2, [r2, #4]
 8005b02:	6854      	ldr	r4, [r2, #4]
 8005b04:	b085      	sub	sp, #20
 8005b06:	b104      	cbz	r4, 8005b0a <forward_sm+0x1a>
 8005b08:	6824      	ldr	r4, [r4, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d076      	beq.n	8005bfc <forward_sm+0x10c>
 8005b0e:	6913      	ldr	r3, [r2, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d076      	beq.n	8005c02 <forward_sm+0x112>
 8005b14:	681e      	ldr	r6, [r3, #0]
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	68e0      	ldr	r0, [r4, #12]
 8005b1a:	68f2      	ldr	r2, [r6, #12]
 8005b1c:	6845      	ldr	r5, [r0, #4]
 8005b1e:	6857      	ldr	r7, [r2, #4]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	d068      	beq.n	8005bf6 <forward_sm+0x106>
 8005b24:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b2e:	4298      	cmp	r0, r3
 8005b30:	fb01 f202 	mul.w	r2, r1, r2
 8005b34:	d1f9      	bne.n	8005b2a <forward_sm+0x3a>
 8005b36:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8005b3a:	69a2      	ldr	r2, [r4, #24]
 8005b3c:	69b3      	ldr	r3, [r6, #24]
 8005b3e:	6892      	ldr	r2, [r2, #8]
 8005b40:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8005b44:	eb02 0309 	add.w	r3, r2, r9
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	d24c      	bcs.n	8005be8 <forward_sm+0xf8>
 8005b4e:	00bb      	lsls	r3, r7, #2
 8005b50:	9303      	str	r3, [sp, #12]
 8005b52:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8005b56:	00ab      	lsls	r3, r5, #2
 8005b58:	2d01      	cmp	r5, #1
 8005b5a:	ed92 8a00 	vldr	s16, [r2]
 8005b5e:	9302      	str	r3, [sp, #8]
 8005b60:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005b64:	463e      	mov	r6, r7
 8005b66:	d93c      	bls.n	8005be2 <forward_sm+0xf2>
 8005b68:	1d13      	adds	r3, r2, #4
 8005b6a:	ecf3 7a01 	vldmia	r3!, {s15}
 8005b6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	bfb8      	it	lt
 8005b78:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005b7c:	429e      	cmp	r6, r3
 8005b7e:	d1f4      	bne.n	8005b6a <forward_sm+0x7a>
 8005b80:	eddf 8a21 	vldr	s17, [pc, #132]	; 8005c08 <forward_sm+0x118>
 8005b84:	4692      	mov	sl, r2
 8005b86:	46c3      	mov	fp, r8
 8005b88:	46c1      	mov	r9, r8
 8005b8a:	2400      	movs	r4, #0
 8005b8c:	ecba 0a01 	vldmia	sl!, {s0}
 8005b90:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005b94:	f001 fa26 	bl	8006fe4 <expf>
 8005b98:	3401      	adds	r4, #1
 8005b9a:	42a5      	cmp	r5, r4
 8005b9c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005ba0:	eca9 0a01 	vstmia	r9!, {s0}
 8005ba4:	d8f2      	bhi.n	8005b8c <forward_sm+0x9c>
 8005ba6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	d00b      	beq.n	8005bc8 <forward_sm+0xd8>
 8005bb0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	429d      	cmp	r5, r3
 8005bba:	eddb 7a00 	vldr	s15, [fp]
 8005bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc2:	eceb 7a01 	vstmia	fp!, {s15}
 8005bc6:	d8f6      	bhi.n	8005bb6 <forward_sm+0xc6>
 8005bc8:	9b03      	ldr	r3, [sp, #12]
 8005bca:	9901      	ldr	r1, [sp, #4]
 8005bcc:	4498      	add	r8, r3
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	42b9      	cmp	r1, r7
 8005bd2:	463a      	mov	r2, r7
 8005bd4:	441e      	add	r6, r3
 8005bd6:	d907      	bls.n	8005be8 <forward_sm+0xf8>
 8005bd8:	2d01      	cmp	r5, #1
 8005bda:	ed92 8a00 	vldr	s16, [r2]
 8005bde:	441f      	add	r7, r3
 8005be0:	d8c2      	bhi.n	8005b68 <forward_sm+0x78>
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	d0f0      	beq.n	8005bc8 <forward_sm+0xd8>
 8005be6:	e7cb      	b.n	8005b80 <forward_sm+0x90>
 8005be8:	b005      	add	sp, #20
 8005bea:	ecbd 8b04 	vpop	{d8-d9}
 8005bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	deff      	udf	#255	; 0xff
 8005bf6:	f04f 0904 	mov.w	r9, #4
 8005bfa:	e79e      	b.n	8005b3a <forward_sm+0x4a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	deff      	udf	#255	; 0xff
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	deff      	udf	#255	; 0xff
 8005c06:	bf00      	nop
 8005c08:	00000000 	.word	0x00000000

08005c0c <forward_lite_dense_if32of32wf32>:
 8005c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c10:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8005c14:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8005c18:	4287      	cmp	r7, r0
 8005c1a:	f240 8106 	bls.w	8005e2a <forward_lite_dense_if32of32wf32+0x21e>
 8005c1e:	f1a6 0810 	sub.w	r8, r6, #16
 8005c22:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8005c26:	f108 0801 	add.w	r8, r8, #1
 8005c2a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8005c2e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8005c32:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8005c36:	4605      	mov	r5, r0
 8005c38:	f006 0a0f 	and.w	sl, r6, #15
 8005c3c:	2e0f      	cmp	r6, #15
 8005c3e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005e50 <forward_lite_dense_if32of32wf32+0x244>
 8005c42:	f240 8101 	bls.w	8005e48 <forward_lite_dense_if32of32wf32+0x23c>
 8005c46:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8005c4a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8005c4e:	46b6      	mov	lr, r6
 8005c50:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8005c54:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8005c58:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8005c5c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8005c60:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8005c64:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8005c68:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8005c6c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8005c70:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8005c74:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8005c78:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8005c7c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8005c80:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005c84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c88:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8005c8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c90:	f1ae 0e10 	sub.w	lr, lr, #16
 8005c94:	f1be 0f0f 	cmp.w	lr, #15
 8005c98:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8005c9c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8005ca0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005ca4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005ca8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005cac:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8005cb0:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8005cb4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005cb8:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8005cbc:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8005cc0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005cc4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8005cc8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8005ccc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005cd0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8005cd4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8005cd8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005cdc:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005ce0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8005ce4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005ce8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8005cec:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005cf0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005cf4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005cf8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8005cfc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d00:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8005d04:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005d08:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005d0c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005d10:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d14:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d18:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d1c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d24:	d894      	bhi.n	8005c50 <forward_lite_dense_if32of32wf32+0x44>
 8005d26:	eb02 0e0b 	add.w	lr, r2, fp
 8005d2a:	4654      	mov	r4, sl
 8005d2c:	46c4      	mov	ip, r8
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d075      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d32:	eddc 6a00 	vldr	s13, [ip]
 8005d36:	edde 7a00 	vldr	s15, [lr]
 8005d3a:	2c01      	cmp	r4, #1
 8005d3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d40:	d06d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d42:	eddc 6a01 	vldr	s13, [ip, #4]
 8005d46:	edde 7a01 	vldr	s15, [lr, #4]
 8005d4a:	2c02      	cmp	r4, #2
 8005d4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d50:	d065      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d52:	eddc 6a02 	vldr	s13, [ip, #8]
 8005d56:	edde 7a02 	vldr	s15, [lr, #8]
 8005d5a:	2c03      	cmp	r4, #3
 8005d5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d60:	d05d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d62:	eddc 6a03 	vldr	s13, [ip, #12]
 8005d66:	edde 7a03 	vldr	s15, [lr, #12]
 8005d6a:	2c04      	cmp	r4, #4
 8005d6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d70:	d055      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d72:	eddc 6a04 	vldr	s13, [ip, #16]
 8005d76:	edde 7a04 	vldr	s15, [lr, #16]
 8005d7a:	2c05      	cmp	r4, #5
 8005d7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d80:	d04d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d82:	eddc 6a05 	vldr	s13, [ip, #20]
 8005d86:	edde 7a05 	vldr	s15, [lr, #20]
 8005d8a:	2c06      	cmp	r4, #6
 8005d8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d90:	d045      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005d92:	eddc 6a06 	vldr	s13, [ip, #24]
 8005d96:	edde 7a06 	vldr	s15, [lr, #24]
 8005d9a:	2c07      	cmp	r4, #7
 8005d9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005da0:	d03d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005da2:	eddc 6a07 	vldr	s13, [ip, #28]
 8005da6:	edde 7a07 	vldr	s15, [lr, #28]
 8005daa:	2c08      	cmp	r4, #8
 8005dac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005db0:	d035      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005db2:	eddc 6a08 	vldr	s13, [ip, #32]
 8005db6:	edde 7a08 	vldr	s15, [lr, #32]
 8005dba:	2c09      	cmp	r4, #9
 8005dbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dc0:	d02d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005dc2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8005dc6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8005dca:	2c0a      	cmp	r4, #10
 8005dcc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dd0:	d025      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005dd2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8005dd6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8005dda:	2c0b      	cmp	r4, #11
 8005ddc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005de0:	d01d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005de2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8005de6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8005dea:	2c0c      	cmp	r4, #12
 8005dec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005df0:	d015      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005df2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8005df6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8005dfa:	3c0d      	subs	r4, #13
 8005dfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e00:	d00d      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005e02:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8005e06:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8005e0a:	2c01      	cmp	r4, #1
 8005e0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e10:	d005      	beq.n	8005e1e <forward_lite_dense_if32of32wf32+0x212>
 8005e12:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8005e16:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8005e1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e1e:	444a      	add	r2, r9
 8005e20:	eca5 7a01 	vstmia	r5!, {s14}
 8005e24:	42af      	cmp	r7, r5
 8005e26:	f63f af09 	bhi.w	8005c3c <forward_lite_dense_if32of32wf32+0x30>
 8005e2a:	b15b      	cbz	r3, 8005e44 <forward_lite_dense_if32of32wf32+0x238>
 8005e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e2e:	b14a      	cbz	r2, 8005e44 <forward_lite_dense_if32of32wf32+0x238>
 8005e30:	edd0 7a00 	vldr	s15, [r0]
 8005e34:	ecb3 7a01 	vldmia	r3!, {s14}
 8005e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e3c:	ece0 7a01 	vstmia	r0!, {s15}
 8005e40:	4287      	cmp	r7, r0
 8005e42:	d1f5      	bne.n	8005e30 <forward_lite_dense_if32of32wf32+0x224>
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	4634      	mov	r4, r6
 8005e4a:	4696      	mov	lr, r2
 8005e4c:	468c      	mov	ip, r1
 8005e4e:	e76e      	b.n	8005d2e <forward_lite_dense_if32of32wf32+0x122>
 8005e50:	00000000 	.word	0x00000000

08005e54 <st_int8_copy>:
 8005e54:	4288      	cmp	r0, r1
 8005e56:	d057      	beq.n	8005f08 <st_int8_copy+0xb4>
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d055      	beq.n	8005f08 <st_int8_copy+0xb4>
 8005e5c:	4288      	cmp	r0, r1
 8005e5e:	d354      	bcc.n	8005f0a <st_int8_copy+0xb6>
 8005e60:	078b      	lsls	r3, r1, #30
 8005e62:	d102      	bne.n	8005e6a <st_int8_copy+0x16>
 8005e64:	e009      	b.n	8005e7a <st_int8_copy+0x26>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d05c      	beq.n	8005f24 <st_int8_copy+0xd0>
 8005e6a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8005e6e:	f801 3b01 	strb.w	r3, [r1], #1
 8005e72:	078b      	lsls	r3, r1, #30
 8005e74:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e78:	d1f5      	bne.n	8005e66 <st_int8_copy+0x12>
 8005e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8005e82:	d069      	beq.n	8005f58 <st_int8_copy+0x104>
 8005e84:	ea41 0300 	orr.w	r3, r1, r0
 8005e88:	075b      	lsls	r3, r3, #29
 8005e8a:	d14c      	bne.n	8005f26 <st_int8_copy+0xd2>
 8005e8c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d948      	bls.n	8005f26 <st_int8_copy+0xd2>
 8005e94:	f100 0310 	add.w	r3, r0, #16
 8005e98:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005e9c:	f101 0c10 	add.w	ip, r1, #16
 8005ea0:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8005ea4:	ed13 6b04 	vldr	d6, [r3, #-16]
 8005ea8:	ed13 7b02 	vldr	d7, [r3, #-8]
 8005eac:	3310      	adds	r3, #16
 8005eae:	4573      	cmp	r3, lr
 8005eb0:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8005eb4:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8005eb8:	f10c 0c10 	add.w	ip, ip, #16
 8005ebc:	d1f2      	bne.n	8005ea4 <st_int8_copy+0x50>
 8005ebe:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8005ec2:	4421      	add	r1, r4
 8005ec4:	4420      	add	r0, r4
 8005ec6:	f002 0203 	and.w	r2, r2, #3
 8005eca:	b16b      	cbz	r3, 8005ee8 <st_int8_copy+0x94>
 8005ecc:	6804      	ldr	r4, [r0, #0]
 8005ece:	600c      	str	r4, [r1, #0]
 8005ed0:	1e5c      	subs	r4, r3, #1
 8005ed2:	d005      	beq.n	8005ee0 <st_int8_copy+0x8c>
 8005ed4:	6845      	ldr	r5, [r0, #4]
 8005ed6:	604d      	str	r5, [r1, #4]
 8005ed8:	2c01      	cmp	r4, #1
 8005eda:	bf1c      	itt	ne
 8005edc:	6884      	ldrne	r4, [r0, #8]
 8005ede:	608c      	strne	r4, [r1, #8]
 8005ee0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ee4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005ee8:	b162      	cbz	r2, 8005f04 <st_int8_copy+0xb0>
 8005eea:	f990 3000 	ldrsb.w	r3, [r0]
 8005eee:	700b      	strb	r3, [r1, #0]
 8005ef0:	3a01      	subs	r2, #1
 8005ef2:	d007      	beq.n	8005f04 <st_int8_copy+0xb0>
 8005ef4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005ef8:	704b      	strb	r3, [r1, #1]
 8005efa:	2a01      	cmp	r2, #1
 8005efc:	bf1c      	itt	ne
 8005efe:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8005f02:	708b      	strbne	r3, [r1, #2]
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4770      	bx	lr
 8005f0a:	1883      	adds	r3, r0, r2
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	d9a7      	bls.n	8005e60 <st_int8_copy+0xc>
 8005f10:	4283      	cmp	r3, r0
 8005f12:	440a      	add	r2, r1
 8005f14:	d9f8      	bls.n	8005f08 <st_int8_copy+0xb4>
 8005f16:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005f1a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	d1f9      	bne.n	8005f16 <st_int8_copy+0xc2>
 8005f22:	4770      	bx	lr
 8005f24:	4770      	bx	lr
 8005f26:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8005f30:	4684      	mov	ip, r0
 8005f32:	f8dc 7000 	ldr.w	r7, [ip]
 8005f36:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005f3a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8005f3e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8005f42:	f8c3 800c 	str.w	r8, [r3, #12]
 8005f46:	601f      	str	r7, [r3, #0]
 8005f48:	605e      	str	r6, [r3, #4]
 8005f4a:	609d      	str	r5, [r3, #8]
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	459e      	cmp	lr, r3
 8005f50:	f10c 0c10 	add.w	ip, ip, #16
 8005f54:	d1ed      	bne.n	8005f32 <st_int8_copy+0xde>
 8005f56:	e7b2      	b.n	8005ebe <st_int8_copy+0x6a>
 8005f58:	0893      	lsrs	r3, r2, #2
 8005f5a:	f002 0203 	and.w	r2, r2, #3
 8005f5e:	e7b4      	b.n	8005eca <st_int8_copy+0x76>

08005f60 <ai_array_to_buffer_fmt>:
 8005f60:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d050      	beq.n	800600a <ai_array_to_buffer_fmt+0xaa>
 8005f68:	4b2a      	ldr	r3, [pc, #168]	; (8006014 <ai_array_to_buffer_fmt+0xb4>)
 8005f6a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d00b      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005f72:	dc1c      	bgt.n	8005fae <ai_array_to_buffer_fmt+0x4e>
 8005f74:	4b28      	ldr	r3, [pc, #160]	; (8006018 <ai_array_to_buffer_fmt+0xb8>)
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d007      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005f7a:	dd0b      	ble.n	8005f94 <ai_array_to_buffer_fmt+0x34>
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <ai_array_to_buffer_fmt+0xbc>)
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d003      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005f82:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d131      	bne.n	8005fee <ai_array_to_buffer_fmt+0x8e>
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005f90:	4318      	orrs	r0, r3
 8005f92:	4770      	bx	lr
 8005f94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d0f6      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005f9c:	dd2c      	ble.n	8005ff8 <ai_array_to_buffer_fmt+0x98>
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <ai_array_to_buffer_fmt+0xc0>)
 8005fa0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	bf18      	it	ne
 8005fa8:	2340      	movne	r3, #64	; 0x40
 8005faa:	4318      	orrs	r0, r3
 8005fac:	4770      	bx	lr
 8005fae:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <ai_array_to_buffer_fmt+0xc4>)
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d0ea      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005fb4:	dd0e      	ble.n	8005fd4 <ai_array_to_buffer_fmt+0x74>
 8005fb6:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <ai_array_to_buffer_fmt+0xc8>)
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d0e6      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005fbc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d0e2      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <ai_array_to_buffer_fmt+0xcc>)
 8005fc6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	bf18      	it	ne
 8005fce:	2340      	movne	r3, #64	; 0x40
 8005fd0:	4318      	orrs	r0, r3
 8005fd2:	4770      	bx	lr
 8005fd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d0d6      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005fdc:	3307      	adds	r3, #7
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d0d3      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8005fe2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf18      	it	ne
 8005fea:	2340      	movne	r3, #64	; 0x40
 8005fec:	e7ce      	b.n	8005f8c <ai_array_to_buffer_fmt+0x2c>
 8005fee:	4b10      	ldr	r3, [pc, #64]	; (8006030 <ai_array_to_buffer_fmt+0xd0>)
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bf18      	it	ne
 8005ff4:	2340      	movne	r3, #64	; 0x40
 8005ff6:	e7c9      	b.n	8005f8c <ai_array_to_buffer_fmt+0x2c>
 8005ff8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d0c4      	beq.n	8005f8a <ai_array_to_buffer_fmt+0x2a>
 8006000:	3380      	adds	r3, #128	; 0x80
 8006002:	429a      	cmp	r2, r3
 8006004:	bf18      	it	ne
 8006006:	2340      	movne	r3, #64	; 0x40
 8006008:	e7c0      	b.n	8005f8c <ai_array_to_buffer_fmt+0x2c>
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <ai_array_to_buffer_fmt+0xd4>)
 800600c:	4003      	ands	r3, r0
 800600e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006012:	e7bb      	b.n	8005f8c <ai_array_to_buffer_fmt+0x2c>
 8006014:	00840040 	.word	0x00840040
 8006018:	00040840 	.word	0x00040840
 800601c:	00041040 	.word	0x00041040
 8006020:	00040447 	.word	0x00040447
 8006024:	00840840 	.word	0x00840840
 8006028:	00841040 	.word	0x00841040
 800602c:	0084084f 	.word	0x0084084f
 8006030:	0004084f 	.word	0x0004084f
 8006034:	00803fff 	.word	0x00803fff

08006038 <ai_array_get_byte_size>:
 8006038:	b319      	cbz	r1, 8006082 <ai_array_get_byte_size+0x4a>
 800603a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800603e:	fb03 f101 	mul.w	r1, r3, r1
 8006042:	3107      	adds	r1, #7
 8006044:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8006048:	f021 0307 	bic.w	r3, r1, #7
 800604c:	2a04      	cmp	r2, #4
 800604e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8006052:	fa23 f101 	lsr.w	r1, r3, r1
 8006056:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800605a:	d00b      	beq.n	8006074 <ai_array_get_byte_size+0x3c>
 800605c:	2a08      	cmp	r2, #8
 800605e:	d002      	beq.n	8006066 <ai_array_get_byte_size+0x2e>
 8006060:	3107      	adds	r1, #7
 8006062:	08c8      	lsrs	r0, r1, #3
 8006064:	4770      	bx	lr
 8006066:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800606a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800606e:	3107      	adds	r1, #7
 8006070:	08c8      	lsrs	r0, r1, #3
 8006072:	4770      	bx	lr
 8006074:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006078:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800607c:	3107      	adds	r1, #7
 800607e:	08c8      	lsrs	r0, r1, #3
 8006080:	4770      	bx	lr
 8006082:	4608      	mov	r0, r1
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop

08006088 <ai_array_get_data_byte_size>:
 8006088:	b169      	cbz	r1, 80060a6 <ai_array_get_data_byte_size+0x1e>
 800608a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800608e:	fb02 f101 	mul.w	r1, r2, r1
 8006092:	1dcb      	adds	r3, r1, #7
 8006094:	f023 0307 	bic.w	r3, r3, #7
 8006098:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800609c:	fa23 f000 	lsr.w	r0, r3, r0
 80060a0:	3007      	adds	r0, #7
 80060a2:	08c0      	lsrs	r0, r0, #3
 80060a4:	4770      	bx	lr
 80060a6:	4608      	mov	r0, r1
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop

080060ac <ai_version_get>:
 80060ac:	0212      	lsls	r2, r2, #8
 80060ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80060b2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80060b6:	4770      	bx	lr

080060b8 <get_tensor_byte_size>:
 80060b8:	b410      	push	{r4}
 80060ba:	6983      	ldr	r3, [r0, #24]
 80060bc:	68c4      	ldr	r4, [r0, #12]
 80060be:	6941      	ldr	r1, [r0, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68e0      	ldr	r0, [r4, #12]
 80060c4:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <get_tensor_byte_size+0x2c>)
 80060c6:	68c9      	ldr	r1, [r1, #12]
 80060c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80060d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060d4:	fb01 f000 	mul.w	r0, r1, r0
 80060d8:	4293      	cmp	r3, r2
 80060da:	bf04      	itt	eq
 80060dc:	3007      	addeq	r0, #7
 80060de:	08c0      	lsreq	r0, r0, #3
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	000400c0 	.word	0x000400c0

080060e8 <sbrk_aligned>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4e0e      	ldr	r6, [pc, #56]	; (8006124 <sbrk_aligned+0x3c>)
 80060ec:	460c      	mov	r4, r1
 80060ee:	6831      	ldr	r1, [r6, #0]
 80060f0:	4605      	mov	r5, r0
 80060f2:	b911      	cbnz	r1, 80060fa <sbrk_aligned+0x12>
 80060f4:	f000 fad6 	bl	80066a4 <_sbrk_r>
 80060f8:	6030      	str	r0, [r6, #0]
 80060fa:	4621      	mov	r1, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fad1 	bl	80066a4 <_sbrk_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d00a      	beq.n	800611c <sbrk_aligned+0x34>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d007      	beq.n	8006120 <sbrk_aligned+0x38>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4628      	mov	r0, r5
 8006114:	f000 fac6 	bl	80066a4 <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d101      	bne.n	8006120 <sbrk_aligned+0x38>
 800611c:	f04f 34ff 	mov.w	r4, #4294967295
 8006120:	4620      	mov	r0, r4
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	20000824 	.word	0x20000824

08006128 <_malloc_r>:
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	1ccd      	adds	r5, r1, #3
 800612e:	f025 0503 	bic.w	r5, r5, #3
 8006132:	3508      	adds	r5, #8
 8006134:	2d0c      	cmp	r5, #12
 8006136:	bf38      	it	cc
 8006138:	250c      	movcc	r5, #12
 800613a:	2d00      	cmp	r5, #0
 800613c:	4607      	mov	r7, r0
 800613e:	db01      	blt.n	8006144 <_malloc_r+0x1c>
 8006140:	42a9      	cmp	r1, r5
 8006142:	d905      	bls.n	8006150 <_malloc_r+0x28>
 8006144:	230c      	movs	r3, #12
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	2600      	movs	r6, #0
 800614a:	4630      	mov	r0, r6
 800614c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006224 <_malloc_r+0xfc>
 8006154:	f000 f868 	bl	8006228 <__malloc_lock>
 8006158:	f8d8 3000 	ldr.w	r3, [r8]
 800615c:	461c      	mov	r4, r3
 800615e:	bb5c      	cbnz	r4, 80061b8 <_malloc_r+0x90>
 8006160:	4629      	mov	r1, r5
 8006162:	4638      	mov	r0, r7
 8006164:	f7ff ffc0 	bl	80060e8 <sbrk_aligned>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	4604      	mov	r4, r0
 800616c:	d155      	bne.n	800621a <_malloc_r+0xf2>
 800616e:	f8d8 4000 	ldr.w	r4, [r8]
 8006172:	4626      	mov	r6, r4
 8006174:	2e00      	cmp	r6, #0
 8006176:	d145      	bne.n	8006204 <_malloc_r+0xdc>
 8006178:	2c00      	cmp	r4, #0
 800617a:	d048      	beq.n	800620e <_malloc_r+0xe6>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	4631      	mov	r1, r6
 8006180:	4638      	mov	r0, r7
 8006182:	eb04 0903 	add.w	r9, r4, r3
 8006186:	f000 fa8d 	bl	80066a4 <_sbrk_r>
 800618a:	4581      	cmp	r9, r0
 800618c:	d13f      	bne.n	800620e <_malloc_r+0xe6>
 800618e:	6821      	ldr	r1, [r4, #0]
 8006190:	1a6d      	subs	r5, r5, r1
 8006192:	4629      	mov	r1, r5
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff ffa7 	bl	80060e8 <sbrk_aligned>
 800619a:	3001      	adds	r0, #1
 800619c:	d037      	beq.n	800620e <_malloc_r+0xe6>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	442b      	add	r3, r5
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	f8d8 3000 	ldr.w	r3, [r8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d038      	beq.n	800621e <_malloc_r+0xf6>
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	42a2      	cmp	r2, r4
 80061b0:	d12b      	bne.n	800620a <_malloc_r+0xe2>
 80061b2:	2200      	movs	r2, #0
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	e00f      	b.n	80061d8 <_malloc_r+0xb0>
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	1b52      	subs	r2, r2, r5
 80061bc:	d41f      	bmi.n	80061fe <_malloc_r+0xd6>
 80061be:	2a0b      	cmp	r2, #11
 80061c0:	d917      	bls.n	80061f2 <_malloc_r+0xca>
 80061c2:	1961      	adds	r1, r4, r5
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	6025      	str	r5, [r4, #0]
 80061c8:	bf18      	it	ne
 80061ca:	6059      	strne	r1, [r3, #4]
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	bf08      	it	eq
 80061d0:	f8c8 1000 	streq.w	r1, [r8]
 80061d4:	5162      	str	r2, [r4, r5]
 80061d6:	604b      	str	r3, [r1, #4]
 80061d8:	4638      	mov	r0, r7
 80061da:	f104 060b 	add.w	r6, r4, #11
 80061de:	f000 f829 	bl	8006234 <__malloc_unlock>
 80061e2:	f026 0607 	bic.w	r6, r6, #7
 80061e6:	1d23      	adds	r3, r4, #4
 80061e8:	1af2      	subs	r2, r6, r3
 80061ea:	d0ae      	beq.n	800614a <_malloc_r+0x22>
 80061ec:	1b9b      	subs	r3, r3, r6
 80061ee:	50a3      	str	r3, [r4, r2]
 80061f0:	e7ab      	b.n	800614a <_malloc_r+0x22>
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	6862      	ldr	r2, [r4, #4]
 80061f6:	d1dd      	bne.n	80061b4 <_malloc_r+0x8c>
 80061f8:	f8c8 2000 	str.w	r2, [r8]
 80061fc:	e7ec      	b.n	80061d8 <_malloc_r+0xb0>
 80061fe:	4623      	mov	r3, r4
 8006200:	6864      	ldr	r4, [r4, #4]
 8006202:	e7ac      	b.n	800615e <_malloc_r+0x36>
 8006204:	4634      	mov	r4, r6
 8006206:	6876      	ldr	r6, [r6, #4]
 8006208:	e7b4      	b.n	8006174 <_malloc_r+0x4c>
 800620a:	4613      	mov	r3, r2
 800620c:	e7cc      	b.n	80061a8 <_malloc_r+0x80>
 800620e:	230c      	movs	r3, #12
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4638      	mov	r0, r7
 8006214:	f000 f80e 	bl	8006234 <__malloc_unlock>
 8006218:	e797      	b.n	800614a <_malloc_r+0x22>
 800621a:	6025      	str	r5, [r4, #0]
 800621c:	e7dc      	b.n	80061d8 <_malloc_r+0xb0>
 800621e:	605b      	str	r3, [r3, #4]
 8006220:	deff      	udf	#255	; 0xff
 8006222:	bf00      	nop
 8006224:	20000820 	.word	0x20000820

08006228 <__malloc_lock>:
 8006228:	4801      	ldr	r0, [pc, #4]	; (8006230 <__malloc_lock+0x8>)
 800622a:	f000 ba87 	b.w	800673c <__retarget_lock_acquire_recursive>
 800622e:	bf00      	nop
 8006230:	20000968 	.word	0x20000968

08006234 <__malloc_unlock>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__malloc_unlock+0x8>)
 8006236:	f000 ba82 	b.w	800673e <__retarget_lock_release_recursive>
 800623a:	bf00      	nop
 800623c:	20000968 	.word	0x20000968

08006240 <std>:
 8006240:	2300      	movs	r3, #0
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	e9c0 3300 	strd	r3, r3, [r0]
 800624a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800624e:	6083      	str	r3, [r0, #8]
 8006250:	8181      	strh	r1, [r0, #12]
 8006252:	6643      	str	r3, [r0, #100]	; 0x64
 8006254:	81c2      	strh	r2, [r0, #14]
 8006256:	6183      	str	r3, [r0, #24]
 8006258:	4619      	mov	r1, r3
 800625a:	2208      	movs	r2, #8
 800625c:	305c      	adds	r0, #92	; 0x5c
 800625e:	f000 f9e5 	bl	800662c <memset>
 8006262:	4b05      	ldr	r3, [pc, #20]	; (8006278 <std+0x38>)
 8006264:	6263      	str	r3, [r4, #36]	; 0x24
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <std+0x3c>)
 8006268:	62a3      	str	r3, [r4, #40]	; 0x28
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <std+0x40>)
 800626c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <std+0x44>)
 8006270:	6224      	str	r4, [r4, #32]
 8006272:	6323      	str	r3, [r4, #48]	; 0x30
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	0800647d 	.word	0x0800647d
 800627c:	0800649f 	.word	0x0800649f
 8006280:	080064d7 	.word	0x080064d7
 8006284:	080064fb 	.word	0x080064fb

08006288 <stdio_exit_handler>:
 8006288:	4a02      	ldr	r2, [pc, #8]	; (8006294 <stdio_exit_handler+0xc>)
 800628a:	4903      	ldr	r1, [pc, #12]	; (8006298 <stdio_exit_handler+0x10>)
 800628c:	4803      	ldr	r0, [pc, #12]	; (800629c <stdio_exit_handler+0x14>)
 800628e:	f000 b869 	b.w	8006364 <_fwalk_sglue>
 8006292:	bf00      	nop
 8006294:	20000558 	.word	0x20000558
 8006298:	08006e8d 	.word	0x08006e8d
 800629c:	20000564 	.word	0x20000564

080062a0 <cleanup_stdio>:
 80062a0:	6841      	ldr	r1, [r0, #4]
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <cleanup_stdio+0x34>)
 80062a4:	4299      	cmp	r1, r3
 80062a6:	b510      	push	{r4, lr}
 80062a8:	4604      	mov	r4, r0
 80062aa:	d001      	beq.n	80062b0 <cleanup_stdio+0x10>
 80062ac:	f000 fdee 	bl	8006e8c <_fflush_r>
 80062b0:	68a1      	ldr	r1, [r4, #8]
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <cleanup_stdio+0x38>)
 80062b4:	4299      	cmp	r1, r3
 80062b6:	d002      	beq.n	80062be <cleanup_stdio+0x1e>
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fde7 	bl	8006e8c <_fflush_r>
 80062be:	68e1      	ldr	r1, [r4, #12]
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <cleanup_stdio+0x3c>)
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d004      	beq.n	80062d0 <cleanup_stdio+0x30>
 80062c6:	4620      	mov	r0, r4
 80062c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062cc:	f000 bdde 	b.w	8006e8c <_fflush_r>
 80062d0:	bd10      	pop	{r4, pc}
 80062d2:	bf00      	nop
 80062d4:	20000828 	.word	0x20000828
 80062d8:	20000890 	.word	0x20000890
 80062dc:	200008f8 	.word	0x200008f8

080062e0 <global_stdio_init.part.0>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <global_stdio_init.part.0+0x30>)
 80062e4:	4c0b      	ldr	r4, [pc, #44]	; (8006314 <global_stdio_init.part.0+0x34>)
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <global_stdio_init.part.0+0x38>)
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	4620      	mov	r0, r4
 80062ec:	2200      	movs	r2, #0
 80062ee:	2104      	movs	r1, #4
 80062f0:	f7ff ffa6 	bl	8006240 <std>
 80062f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80062f8:	2201      	movs	r2, #1
 80062fa:	2109      	movs	r1, #9
 80062fc:	f7ff ffa0 	bl	8006240 <std>
 8006300:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006304:	2202      	movs	r2, #2
 8006306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800630a:	2112      	movs	r1, #18
 800630c:	f7ff bf98 	b.w	8006240 <std>
 8006310:	20000960 	.word	0x20000960
 8006314:	20000828 	.word	0x20000828
 8006318:	08006289 	.word	0x08006289

0800631c <__sfp_lock_acquire>:
 800631c:	4801      	ldr	r0, [pc, #4]	; (8006324 <__sfp_lock_acquire+0x8>)
 800631e:	f000 ba0d 	b.w	800673c <__retarget_lock_acquire_recursive>
 8006322:	bf00      	nop
 8006324:	20000969 	.word	0x20000969

08006328 <__sfp_lock_release>:
 8006328:	4801      	ldr	r0, [pc, #4]	; (8006330 <__sfp_lock_release+0x8>)
 800632a:	f000 ba08 	b.w	800673e <__retarget_lock_release_recursive>
 800632e:	bf00      	nop
 8006330:	20000969 	.word	0x20000969

08006334 <__sinit>:
 8006334:	b510      	push	{r4, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	f7ff fff0 	bl	800631c <__sfp_lock_acquire>
 800633c:	6a23      	ldr	r3, [r4, #32]
 800633e:	b11b      	cbz	r3, 8006348 <__sinit+0x14>
 8006340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006344:	f7ff bff0 	b.w	8006328 <__sfp_lock_release>
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <__sinit+0x28>)
 800634a:	6223      	str	r3, [r4, #32]
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <__sinit+0x2c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f5      	bne.n	8006340 <__sinit+0xc>
 8006354:	f7ff ffc4 	bl	80062e0 <global_stdio_init.part.0>
 8006358:	e7f2      	b.n	8006340 <__sinit+0xc>
 800635a:	bf00      	nop
 800635c:	080062a1 	.word	0x080062a1
 8006360:	20000960 	.word	0x20000960

08006364 <_fwalk_sglue>:
 8006364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006368:	4607      	mov	r7, r0
 800636a:	4688      	mov	r8, r1
 800636c:	4614      	mov	r4, r2
 800636e:	2600      	movs	r6, #0
 8006370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006374:	f1b9 0901 	subs.w	r9, r9, #1
 8006378:	d505      	bpl.n	8006386 <_fwalk_sglue+0x22>
 800637a:	6824      	ldr	r4, [r4, #0]
 800637c:	2c00      	cmp	r4, #0
 800637e:	d1f7      	bne.n	8006370 <_fwalk_sglue+0xc>
 8006380:	4630      	mov	r0, r6
 8006382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d907      	bls.n	800639c <_fwalk_sglue+0x38>
 800638c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006390:	3301      	adds	r3, #1
 8006392:	d003      	beq.n	800639c <_fwalk_sglue+0x38>
 8006394:	4629      	mov	r1, r5
 8006396:	4638      	mov	r0, r7
 8006398:	47c0      	blx	r8
 800639a:	4306      	orrs	r6, r0
 800639c:	3568      	adds	r5, #104	; 0x68
 800639e:	e7e9      	b.n	8006374 <_fwalk_sglue+0x10>

080063a0 <iprintf>:
 80063a0:	b40f      	push	{r0, r1, r2, r3}
 80063a2:	b507      	push	{r0, r1, r2, lr}
 80063a4:	4906      	ldr	r1, [pc, #24]	; (80063c0 <iprintf+0x20>)
 80063a6:	ab04      	add	r3, sp, #16
 80063a8:	6808      	ldr	r0, [r1, #0]
 80063aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ae:	6881      	ldr	r1, [r0, #8]
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	f000 fa3b 	bl	800682c <_vfiprintf_r>
 80063b6:	b003      	add	sp, #12
 80063b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063bc:	b004      	add	sp, #16
 80063be:	4770      	bx	lr
 80063c0:	200005b0 	.word	0x200005b0

080063c4 <_puts_r>:
 80063c4:	6a03      	ldr	r3, [r0, #32]
 80063c6:	b570      	push	{r4, r5, r6, lr}
 80063c8:	6884      	ldr	r4, [r0, #8]
 80063ca:	4605      	mov	r5, r0
 80063cc:	460e      	mov	r6, r1
 80063ce:	b90b      	cbnz	r3, 80063d4 <_puts_r+0x10>
 80063d0:	f7ff ffb0 	bl	8006334 <__sinit>
 80063d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d405      	bmi.n	80063e6 <_puts_r+0x22>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	0598      	lsls	r0, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_puts_r+0x22>
 80063e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e2:	f000 f9ab 	bl	800673c <__retarget_lock_acquire_recursive>
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	0719      	lsls	r1, r3, #28
 80063ea:	d513      	bpl.n	8006414 <_puts_r+0x50>
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	b18b      	cbz	r3, 8006414 <_puts_r+0x50>
 80063f0:	3e01      	subs	r6, #1
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063f8:	3b01      	subs	r3, #1
 80063fa:	60a3      	str	r3, [r4, #8]
 80063fc:	b9e9      	cbnz	r1, 800643a <_puts_r+0x76>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da2e      	bge.n	8006460 <_puts_r+0x9c>
 8006402:	4622      	mov	r2, r4
 8006404:	210a      	movs	r1, #10
 8006406:	4628      	mov	r0, r5
 8006408:	f000 f87b 	bl	8006502 <__swbuf_r>
 800640c:	3001      	adds	r0, #1
 800640e:	d007      	beq.n	8006420 <_puts_r+0x5c>
 8006410:	250a      	movs	r5, #10
 8006412:	e007      	b.n	8006424 <_puts_r+0x60>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f8b0 	bl	800657c <__swsetup_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	d0e7      	beq.n	80063f0 <_puts_r+0x2c>
 8006420:	f04f 35ff 	mov.w	r5, #4294967295
 8006424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006426:	07da      	lsls	r2, r3, #31
 8006428:	d405      	bmi.n	8006436 <_puts_r+0x72>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	059b      	lsls	r3, r3, #22
 800642e:	d402      	bmi.n	8006436 <_puts_r+0x72>
 8006430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006432:	f000 f984 	bl	800673e <__retarget_lock_release_recursive>
 8006436:	4628      	mov	r0, r5
 8006438:	bd70      	pop	{r4, r5, r6, pc}
 800643a:	2b00      	cmp	r3, #0
 800643c:	da04      	bge.n	8006448 <_puts_r+0x84>
 800643e:	69a2      	ldr	r2, [r4, #24]
 8006440:	429a      	cmp	r2, r3
 8006442:	dc06      	bgt.n	8006452 <_puts_r+0x8e>
 8006444:	290a      	cmp	r1, #10
 8006446:	d004      	beq.n	8006452 <_puts_r+0x8e>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	6022      	str	r2, [r4, #0]
 800644e:	7019      	strb	r1, [r3, #0]
 8006450:	e7cf      	b.n	80063f2 <_puts_r+0x2e>
 8006452:	4622      	mov	r2, r4
 8006454:	4628      	mov	r0, r5
 8006456:	f000 f854 	bl	8006502 <__swbuf_r>
 800645a:	3001      	adds	r0, #1
 800645c:	d1c9      	bne.n	80063f2 <_puts_r+0x2e>
 800645e:	e7df      	b.n	8006420 <_puts_r+0x5c>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	250a      	movs	r5, #10
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	6022      	str	r2, [r4, #0]
 8006468:	701d      	strb	r5, [r3, #0]
 800646a:	e7db      	b.n	8006424 <_puts_r+0x60>

0800646c <puts>:
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <puts+0xc>)
 800646e:	4601      	mov	r1, r0
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	f7ff bfa7 	b.w	80063c4 <_puts_r>
 8006476:	bf00      	nop
 8006478:	200005b0 	.word	0x200005b0

0800647c <__sread>:
 800647c:	b510      	push	{r4, lr}
 800647e:	460c      	mov	r4, r1
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	f000 f8fc 	bl	8006680 <_read_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	bfab      	itete	ge
 800648c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800648e:	89a3      	ldrhlt	r3, [r4, #12]
 8006490:	181b      	addge	r3, r3, r0
 8006492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006496:	bfac      	ite	ge
 8006498:	6563      	strge	r3, [r4, #84]	; 0x54
 800649a:	81a3      	strhlt	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__swrite>:
 800649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a2:	461f      	mov	r7, r3
 80064a4:	898b      	ldrh	r3, [r1, #12]
 80064a6:	05db      	lsls	r3, r3, #23
 80064a8:	4605      	mov	r5, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	4616      	mov	r6, r2
 80064ae:	d505      	bpl.n	80064bc <__swrite+0x1e>
 80064b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b4:	2302      	movs	r3, #2
 80064b6:	2200      	movs	r2, #0
 80064b8:	f000 f8d0 	bl	800665c <_lseek_r>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	4632      	mov	r2, r6
 80064ca:	463b      	mov	r3, r7
 80064cc:	4628      	mov	r0, r5
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	f000 b8f7 	b.w	80066c4 <_write_r>

080064d6 <__sseek>:
 80064d6:	b510      	push	{r4, lr}
 80064d8:	460c      	mov	r4, r1
 80064da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064de:	f000 f8bd 	bl	800665c <_lseek_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	bf15      	itete	ne
 80064e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064f2:	81a3      	strheq	r3, [r4, #12]
 80064f4:	bf18      	it	ne
 80064f6:	81a3      	strhne	r3, [r4, #12]
 80064f8:	bd10      	pop	{r4, pc}

080064fa <__sclose>:
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 b89d 	b.w	800663c <_close_r>

08006502 <__swbuf_r>:
 8006502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006504:	460e      	mov	r6, r1
 8006506:	4614      	mov	r4, r2
 8006508:	4605      	mov	r5, r0
 800650a:	b118      	cbz	r0, 8006514 <__swbuf_r+0x12>
 800650c:	6a03      	ldr	r3, [r0, #32]
 800650e:	b90b      	cbnz	r3, 8006514 <__swbuf_r+0x12>
 8006510:	f7ff ff10 	bl	8006334 <__sinit>
 8006514:	69a3      	ldr	r3, [r4, #24]
 8006516:	60a3      	str	r3, [r4, #8]
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	071a      	lsls	r2, r3, #28
 800651c:	d525      	bpl.n	800656a <__swbuf_r+0x68>
 800651e:	6923      	ldr	r3, [r4, #16]
 8006520:	b31b      	cbz	r3, 800656a <__swbuf_r+0x68>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	6922      	ldr	r2, [r4, #16]
 8006526:	1a98      	subs	r0, r3, r2
 8006528:	6963      	ldr	r3, [r4, #20]
 800652a:	b2f6      	uxtb	r6, r6
 800652c:	4283      	cmp	r3, r0
 800652e:	4637      	mov	r7, r6
 8006530:	dc04      	bgt.n	800653c <__swbuf_r+0x3a>
 8006532:	4621      	mov	r1, r4
 8006534:	4628      	mov	r0, r5
 8006536:	f000 fca9 	bl	8006e8c <_fflush_r>
 800653a:	b9e0      	cbnz	r0, 8006576 <__swbuf_r+0x74>
 800653c:	68a3      	ldr	r3, [r4, #8]
 800653e:	3b01      	subs	r3, #1
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	701e      	strb	r6, [r3, #0]
 800654a:	6962      	ldr	r2, [r4, #20]
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	429a      	cmp	r2, r3
 8006550:	d004      	beq.n	800655c <__swbuf_r+0x5a>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	07db      	lsls	r3, r3, #31
 8006556:	d506      	bpl.n	8006566 <__swbuf_r+0x64>
 8006558:	2e0a      	cmp	r6, #10
 800655a:	d104      	bne.n	8006566 <__swbuf_r+0x64>
 800655c:	4621      	mov	r1, r4
 800655e:	4628      	mov	r0, r5
 8006560:	f000 fc94 	bl	8006e8c <_fflush_r>
 8006564:	b938      	cbnz	r0, 8006576 <__swbuf_r+0x74>
 8006566:	4638      	mov	r0, r7
 8006568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f805 	bl	800657c <__swsetup_r>
 8006572:	2800      	cmp	r0, #0
 8006574:	d0d5      	beq.n	8006522 <__swbuf_r+0x20>
 8006576:	f04f 37ff 	mov.w	r7, #4294967295
 800657a:	e7f4      	b.n	8006566 <__swbuf_r+0x64>

0800657c <__swsetup_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <__swsetup_r+0xac>)
 8006580:	4605      	mov	r5, r0
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	460c      	mov	r4, r1
 8006586:	b118      	cbz	r0, 8006590 <__swsetup_r+0x14>
 8006588:	6a03      	ldr	r3, [r0, #32]
 800658a:	b90b      	cbnz	r3, 8006590 <__swsetup_r+0x14>
 800658c:	f7ff fed2 	bl	8006334 <__sinit>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006596:	0718      	lsls	r0, r3, #28
 8006598:	d422      	bmi.n	80065e0 <__swsetup_r+0x64>
 800659a:	06d9      	lsls	r1, r3, #27
 800659c:	d407      	bmi.n	80065ae <__swsetup_r+0x32>
 800659e:	2309      	movs	r3, #9
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e034      	b.n	8006618 <__swsetup_r+0x9c>
 80065ae:	0758      	lsls	r0, r3, #29
 80065b0:	d512      	bpl.n	80065d8 <__swsetup_r+0x5c>
 80065b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b4:	b141      	cbz	r1, 80065c8 <__swsetup_r+0x4c>
 80065b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ba:	4299      	cmp	r1, r3
 80065bc:	d002      	beq.n	80065c4 <__swsetup_r+0x48>
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f8be 	bl	8006740 <_free_r>
 80065c4:	2300      	movs	r3, #0
 80065c6:	6363      	str	r3, [r4, #52]	; 0x34
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	2300      	movs	r3, #0
 80065d2:	6063      	str	r3, [r4, #4]
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f043 0308 	orr.w	r3, r3, #8
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	b94b      	cbnz	r3, 80065f8 <__swsetup_r+0x7c>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ee:	d003      	beq.n	80065f8 <__swsetup_r+0x7c>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 fc98 	bl	8006f28 <__smakebuf_r>
 80065f8:	89a0      	ldrh	r0, [r4, #12]
 80065fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065fe:	f010 0301 	ands.w	r3, r0, #1
 8006602:	d00a      	beq.n	800661a <__swsetup_r+0x9e>
 8006604:	2300      	movs	r3, #0
 8006606:	60a3      	str	r3, [r4, #8]
 8006608:	6963      	ldr	r3, [r4, #20]
 800660a:	425b      	negs	r3, r3
 800660c:	61a3      	str	r3, [r4, #24]
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	b943      	cbnz	r3, 8006624 <__swsetup_r+0xa8>
 8006612:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006616:	d1c4      	bne.n	80065a2 <__swsetup_r+0x26>
 8006618:	bd38      	pop	{r3, r4, r5, pc}
 800661a:	0781      	lsls	r1, r0, #30
 800661c:	bf58      	it	pl
 800661e:	6963      	ldrpl	r3, [r4, #20]
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	e7f4      	b.n	800660e <__swsetup_r+0x92>
 8006624:	2000      	movs	r0, #0
 8006626:	e7f7      	b.n	8006618 <__swsetup_r+0x9c>
 8006628:	200005b0 	.word	0x200005b0

0800662c <memset>:
 800662c:	4402      	add	r2, r0
 800662e:	4603      	mov	r3, r0
 8006630:	4293      	cmp	r3, r2
 8006632:	d100      	bne.n	8006636 <memset+0xa>
 8006634:	4770      	bx	lr
 8006636:	f803 1b01 	strb.w	r1, [r3], #1
 800663a:	e7f9      	b.n	8006630 <memset+0x4>

0800663c <_close_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d06      	ldr	r5, [pc, #24]	; (8006658 <_close_r+0x1c>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fa f9c5 	bl	80009d6 <_close>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_close_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_close_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20000964 	.word	0x20000964

0800665c <_lseek_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d07      	ldr	r5, [pc, #28]	; (800667c <_lseek_r+0x20>)
 8006660:	4604      	mov	r4, r0
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	2200      	movs	r2, #0
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f7fa f9da 	bl	8000a24 <_lseek>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_lseek_r+0x1e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_lseek_r+0x1e>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20000964 	.word	0x20000964

08006680 <_read_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4d07      	ldr	r5, [pc, #28]	; (80066a0 <_read_r+0x20>)
 8006684:	4604      	mov	r4, r0
 8006686:	4608      	mov	r0, r1
 8006688:	4611      	mov	r1, r2
 800668a:	2200      	movs	r2, #0
 800668c:	602a      	str	r2, [r5, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	f7fa f968 	bl	8000964 <_read>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	d102      	bne.n	800669e <_read_r+0x1e>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b103      	cbz	r3, 800669e <_read_r+0x1e>
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	20000964 	.word	0x20000964

080066a4 <_sbrk_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d06      	ldr	r5, [pc, #24]	; (80066c0 <_sbrk_r+0x1c>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	f7fa f9c6 	bl	8000a40 <_sbrk>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_sbrk_r+0x1a>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_sbrk_r+0x1a>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	20000964 	.word	0x20000964

080066c4 <_write_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d07      	ldr	r5, [pc, #28]	; (80066e4 <_write_r+0x20>)
 80066c8:	4604      	mov	r4, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fa f963 	bl	800099e <_write>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_write_r+0x1e>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_write_r+0x1e>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000964 	.word	0x20000964

080066e8 <__errno>:
 80066e8:	4b01      	ldr	r3, [pc, #4]	; (80066f0 <__errno+0x8>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	200005b0 	.word	0x200005b0

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f000 fda0 	bl	800724c <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	080083e4 	.word	0x080083e4
 8006730:	080083e4 	.word	0x080083e4
 8006734:	080083e4 	.word	0x080083e4
 8006738:	080083e8 	.word	0x080083e8

0800673c <__retarget_lock_acquire_recursive>:
 800673c:	4770      	bx	lr

0800673e <__retarget_lock_release_recursive>:
 800673e:	4770      	bx	lr

08006740 <_free_r>:
 8006740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006742:	2900      	cmp	r1, #0
 8006744:	d044      	beq.n	80067d0 <_free_r+0x90>
 8006746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674a:	9001      	str	r0, [sp, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f1a1 0404 	sub.w	r4, r1, #4
 8006752:	bfb8      	it	lt
 8006754:	18e4      	addlt	r4, r4, r3
 8006756:	f7ff fd67 	bl	8006228 <__malloc_lock>
 800675a:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <_free_r+0x94>)
 800675c:	9801      	ldr	r0, [sp, #4]
 800675e:	6813      	ldr	r3, [r2, #0]
 8006760:	b933      	cbnz	r3, 8006770 <_free_r+0x30>
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	6014      	str	r4, [r2, #0]
 8006766:	b003      	add	sp, #12
 8006768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800676c:	f7ff bd62 	b.w	8006234 <__malloc_unlock>
 8006770:	42a3      	cmp	r3, r4
 8006772:	d908      	bls.n	8006786 <_free_r+0x46>
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	1961      	adds	r1, r4, r5
 8006778:	428b      	cmp	r3, r1
 800677a:	bf01      	itttt	eq
 800677c:	6819      	ldreq	r1, [r3, #0]
 800677e:	685b      	ldreq	r3, [r3, #4]
 8006780:	1949      	addeq	r1, r1, r5
 8006782:	6021      	streq	r1, [r4, #0]
 8006784:	e7ed      	b.n	8006762 <_free_r+0x22>
 8006786:	461a      	mov	r2, r3
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b10b      	cbz	r3, 8006790 <_free_r+0x50>
 800678c:	42a3      	cmp	r3, r4
 800678e:	d9fa      	bls.n	8006786 <_free_r+0x46>
 8006790:	6811      	ldr	r1, [r2, #0]
 8006792:	1855      	adds	r5, r2, r1
 8006794:	42a5      	cmp	r5, r4
 8006796:	d10b      	bne.n	80067b0 <_free_r+0x70>
 8006798:	6824      	ldr	r4, [r4, #0]
 800679a:	4421      	add	r1, r4
 800679c:	1854      	adds	r4, r2, r1
 800679e:	42a3      	cmp	r3, r4
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	d1e0      	bne.n	8006766 <_free_r+0x26>
 80067a4:	681c      	ldr	r4, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	6053      	str	r3, [r2, #4]
 80067aa:	440c      	add	r4, r1
 80067ac:	6014      	str	r4, [r2, #0]
 80067ae:	e7da      	b.n	8006766 <_free_r+0x26>
 80067b0:	d902      	bls.n	80067b8 <_free_r+0x78>
 80067b2:	230c      	movs	r3, #12
 80067b4:	6003      	str	r3, [r0, #0]
 80067b6:	e7d6      	b.n	8006766 <_free_r+0x26>
 80067b8:	6825      	ldr	r5, [r4, #0]
 80067ba:	1961      	adds	r1, r4, r5
 80067bc:	428b      	cmp	r3, r1
 80067be:	bf04      	itt	eq
 80067c0:	6819      	ldreq	r1, [r3, #0]
 80067c2:	685b      	ldreq	r3, [r3, #4]
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	bf04      	itt	eq
 80067c8:	1949      	addeq	r1, r1, r5
 80067ca:	6021      	streq	r1, [r4, #0]
 80067cc:	6054      	str	r4, [r2, #4]
 80067ce:	e7ca      	b.n	8006766 <_free_r+0x26>
 80067d0:	b003      	add	sp, #12
 80067d2:	bd30      	pop	{r4, r5, pc}
 80067d4:	20000820 	.word	0x20000820

080067d8 <__sfputc_r>:
 80067d8:	6893      	ldr	r3, [r2, #8]
 80067da:	3b01      	subs	r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	b410      	push	{r4}
 80067e0:	6093      	str	r3, [r2, #8]
 80067e2:	da08      	bge.n	80067f6 <__sfputc_r+0x1e>
 80067e4:	6994      	ldr	r4, [r2, #24]
 80067e6:	42a3      	cmp	r3, r4
 80067e8:	db01      	blt.n	80067ee <__sfputc_r+0x16>
 80067ea:	290a      	cmp	r1, #10
 80067ec:	d103      	bne.n	80067f6 <__sfputc_r+0x1e>
 80067ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067f2:	f7ff be86 	b.w	8006502 <__swbuf_r>
 80067f6:	6813      	ldr	r3, [r2, #0]
 80067f8:	1c58      	adds	r0, r3, #1
 80067fa:	6010      	str	r0, [r2, #0]
 80067fc:	7019      	strb	r1, [r3, #0]
 80067fe:	4608      	mov	r0, r1
 8006800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006804:	4770      	bx	lr

08006806 <__sfputs_r>:
 8006806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006808:	4606      	mov	r6, r0
 800680a:	460f      	mov	r7, r1
 800680c:	4614      	mov	r4, r2
 800680e:	18d5      	adds	r5, r2, r3
 8006810:	42ac      	cmp	r4, r5
 8006812:	d101      	bne.n	8006818 <__sfputs_r+0x12>
 8006814:	2000      	movs	r0, #0
 8006816:	e007      	b.n	8006828 <__sfputs_r+0x22>
 8006818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681c:	463a      	mov	r2, r7
 800681e:	4630      	mov	r0, r6
 8006820:	f7ff ffda 	bl	80067d8 <__sfputc_r>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d1f3      	bne.n	8006810 <__sfputs_r+0xa>
 8006828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800682c <_vfiprintf_r>:
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	460d      	mov	r5, r1
 8006832:	b09d      	sub	sp, #116	; 0x74
 8006834:	4614      	mov	r4, r2
 8006836:	4698      	mov	r8, r3
 8006838:	4606      	mov	r6, r0
 800683a:	b118      	cbz	r0, 8006844 <_vfiprintf_r+0x18>
 800683c:	6a03      	ldr	r3, [r0, #32]
 800683e:	b90b      	cbnz	r3, 8006844 <_vfiprintf_r+0x18>
 8006840:	f7ff fd78 	bl	8006334 <__sinit>
 8006844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006846:	07d9      	lsls	r1, r3, #31
 8006848:	d405      	bmi.n	8006856 <_vfiprintf_r+0x2a>
 800684a:	89ab      	ldrh	r3, [r5, #12]
 800684c:	059a      	lsls	r2, r3, #22
 800684e:	d402      	bmi.n	8006856 <_vfiprintf_r+0x2a>
 8006850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006852:	f7ff ff73 	bl	800673c <__retarget_lock_acquire_recursive>
 8006856:	89ab      	ldrh	r3, [r5, #12]
 8006858:	071b      	lsls	r3, r3, #28
 800685a:	d501      	bpl.n	8006860 <_vfiprintf_r+0x34>
 800685c:	692b      	ldr	r3, [r5, #16]
 800685e:	b99b      	cbnz	r3, 8006888 <_vfiprintf_r+0x5c>
 8006860:	4629      	mov	r1, r5
 8006862:	4630      	mov	r0, r6
 8006864:	f7ff fe8a 	bl	800657c <__swsetup_r>
 8006868:	b170      	cbz	r0, 8006888 <_vfiprintf_r+0x5c>
 800686a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800686c:	07dc      	lsls	r4, r3, #31
 800686e:	d504      	bpl.n	800687a <_vfiprintf_r+0x4e>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	b01d      	add	sp, #116	; 0x74
 8006876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	0598      	lsls	r0, r3, #22
 800687e:	d4f7      	bmi.n	8006870 <_vfiprintf_r+0x44>
 8006880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006882:	f7ff ff5c 	bl	800673e <__retarget_lock_release_recursive>
 8006886:	e7f3      	b.n	8006870 <_vfiprintf_r+0x44>
 8006888:	2300      	movs	r3, #0
 800688a:	9309      	str	r3, [sp, #36]	; 0x24
 800688c:	2320      	movs	r3, #32
 800688e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006892:	f8cd 800c 	str.w	r8, [sp, #12]
 8006896:	2330      	movs	r3, #48	; 0x30
 8006898:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a4c <_vfiprintf_r+0x220>
 800689c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a0:	f04f 0901 	mov.w	r9, #1
 80068a4:	4623      	mov	r3, r4
 80068a6:	469a      	mov	sl, r3
 80068a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ac:	b10a      	cbz	r2, 80068b2 <_vfiprintf_r+0x86>
 80068ae:	2a25      	cmp	r2, #37	; 0x25
 80068b0:	d1f9      	bne.n	80068a6 <_vfiprintf_r+0x7a>
 80068b2:	ebba 0b04 	subs.w	fp, sl, r4
 80068b6:	d00b      	beq.n	80068d0 <_vfiprintf_r+0xa4>
 80068b8:	465b      	mov	r3, fp
 80068ba:	4622      	mov	r2, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	4630      	mov	r0, r6
 80068c0:	f7ff ffa1 	bl	8006806 <__sfputs_r>
 80068c4:	3001      	adds	r0, #1
 80068c6:	f000 80a9 	beq.w	8006a1c <_vfiprintf_r+0x1f0>
 80068ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068cc:	445a      	add	r2, fp
 80068ce:	9209      	str	r2, [sp, #36]	; 0x24
 80068d0:	f89a 3000 	ldrb.w	r3, [sl]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80a1 	beq.w	8006a1c <_vfiprintf_r+0x1f0>
 80068da:	2300      	movs	r3, #0
 80068dc:	f04f 32ff 	mov.w	r2, #4294967295
 80068e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e4:	f10a 0a01 	add.w	sl, sl, #1
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f0:	931a      	str	r3, [sp, #104]	; 0x68
 80068f2:	4654      	mov	r4, sl
 80068f4:	2205      	movs	r2, #5
 80068f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fa:	4854      	ldr	r0, [pc, #336]	; (8006a4c <_vfiprintf_r+0x220>)
 80068fc:	f7f9 fc68 	bl	80001d0 <memchr>
 8006900:	9a04      	ldr	r2, [sp, #16]
 8006902:	b9d8      	cbnz	r0, 800693c <_vfiprintf_r+0x110>
 8006904:	06d1      	lsls	r1, r2, #27
 8006906:	bf44      	itt	mi
 8006908:	2320      	movmi	r3, #32
 800690a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690e:	0713      	lsls	r3, r2, #28
 8006910:	bf44      	itt	mi
 8006912:	232b      	movmi	r3, #43	; 0x2b
 8006914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006918:	f89a 3000 	ldrb.w	r3, [sl]
 800691c:	2b2a      	cmp	r3, #42	; 0x2a
 800691e:	d015      	beq.n	800694c <_vfiprintf_r+0x120>
 8006920:	9a07      	ldr	r2, [sp, #28]
 8006922:	4654      	mov	r4, sl
 8006924:	2000      	movs	r0, #0
 8006926:	f04f 0c0a 	mov.w	ip, #10
 800692a:	4621      	mov	r1, r4
 800692c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006930:	3b30      	subs	r3, #48	; 0x30
 8006932:	2b09      	cmp	r3, #9
 8006934:	d94d      	bls.n	80069d2 <_vfiprintf_r+0x1a6>
 8006936:	b1b0      	cbz	r0, 8006966 <_vfiprintf_r+0x13a>
 8006938:	9207      	str	r2, [sp, #28]
 800693a:	e014      	b.n	8006966 <_vfiprintf_r+0x13a>
 800693c:	eba0 0308 	sub.w	r3, r0, r8
 8006940:	fa09 f303 	lsl.w	r3, r9, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	46a2      	mov	sl, r4
 800694a:	e7d2      	b.n	80068f2 <_vfiprintf_r+0xc6>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	1d19      	adds	r1, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	9103      	str	r1, [sp, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	bfbb      	ittet	lt
 8006958:	425b      	neglt	r3, r3
 800695a:	f042 0202 	orrlt.w	r2, r2, #2
 800695e:	9307      	strge	r3, [sp, #28]
 8006960:	9307      	strlt	r3, [sp, #28]
 8006962:	bfb8      	it	lt
 8006964:	9204      	strlt	r2, [sp, #16]
 8006966:	7823      	ldrb	r3, [r4, #0]
 8006968:	2b2e      	cmp	r3, #46	; 0x2e
 800696a:	d10c      	bne.n	8006986 <_vfiprintf_r+0x15a>
 800696c:	7863      	ldrb	r3, [r4, #1]
 800696e:	2b2a      	cmp	r3, #42	; 0x2a
 8006970:	d134      	bne.n	80069dc <_vfiprintf_r+0x1b0>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	1d1a      	adds	r2, r3, #4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	9203      	str	r2, [sp, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	bfb8      	it	lt
 800697e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006982:	3402      	adds	r4, #2
 8006984:	9305      	str	r3, [sp, #20]
 8006986:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a5c <_vfiprintf_r+0x230>
 800698a:	7821      	ldrb	r1, [r4, #0]
 800698c:	2203      	movs	r2, #3
 800698e:	4650      	mov	r0, sl
 8006990:	f7f9 fc1e 	bl	80001d0 <memchr>
 8006994:	b138      	cbz	r0, 80069a6 <_vfiprintf_r+0x17a>
 8006996:	9b04      	ldr	r3, [sp, #16]
 8006998:	eba0 000a 	sub.w	r0, r0, sl
 800699c:	2240      	movs	r2, #64	; 0x40
 800699e:	4082      	lsls	r2, r0
 80069a0:	4313      	orrs	r3, r2
 80069a2:	3401      	adds	r4, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4829      	ldr	r0, [pc, #164]	; (8006a50 <_vfiprintf_r+0x224>)
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	2206      	movs	r2, #6
 80069b2:	f7f9 fc0d 	bl	80001d0 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d03f      	beq.n	8006a3a <_vfiprintf_r+0x20e>
 80069ba:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <_vfiprintf_r+0x228>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_vfiprintf_r+0x1da>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	443b      	add	r3, r7
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e768      	b.n	80068a4 <_vfiprintf_r+0x78>
 80069d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	e7a6      	b.n	800692a <_vfiprintf_r+0xfe>
 80069dc:	2300      	movs	r3, #0
 80069de:	3401      	adds	r4, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_vfiprintf_r+0x1d0>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c6      	beq.n	8006986 <_vfiprintf_r+0x15a>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c4      	b.n	8006986 <_vfiprintf_r+0x15a>
 80069fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f0      	b.n	80069e8 <_vfiprintf_r+0x1bc>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <_vfiprintf_r+0x22c>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4630      	mov	r0, r6
 8006a12:	f3af 8000 	nop.w
 8006a16:	4607      	mov	r7, r0
 8006a18:	1c78      	adds	r0, r7, #1
 8006a1a:	d1d6      	bne.n	80069ca <_vfiprintf_r+0x19e>
 8006a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a1e:	07d9      	lsls	r1, r3, #31
 8006a20:	d405      	bmi.n	8006a2e <_vfiprintf_r+0x202>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	059a      	lsls	r2, r3, #22
 8006a26:	d402      	bmi.n	8006a2e <_vfiprintf_r+0x202>
 8006a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a2a:	f7ff fe88 	bl	800673e <__retarget_lock_release_recursive>
 8006a2e:	89ab      	ldrh	r3, [r5, #12]
 8006a30:	065b      	lsls	r3, r3, #25
 8006a32:	f53f af1d 	bmi.w	8006870 <_vfiprintf_r+0x44>
 8006a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a38:	e71c      	b.n	8006874 <_vfiprintf_r+0x48>
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	462a      	mov	r2, r5
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <_vfiprintf_r+0x22c>)
 8006a42:	a904      	add	r1, sp, #16
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 f879 	bl	8006b3c <_printf_i>
 8006a4a:	e7e4      	b.n	8006a16 <_vfiprintf_r+0x1ea>
 8006a4c:	08008390 	.word	0x08008390
 8006a50:	0800839a 	.word	0x0800839a
 8006a54:	00000000 	.word	0x00000000
 8006a58:	08006807 	.word	0x08006807
 8006a5c:	08008396 	.word	0x08008396

08006a60 <_printf_common>:
 8006a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	4616      	mov	r6, r2
 8006a66:	4699      	mov	r9, r3
 8006a68:	688a      	ldr	r2, [r1, #8]
 8006a6a:	690b      	ldr	r3, [r1, #16]
 8006a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	bfb8      	it	lt
 8006a74:	4613      	movlt	r3, r2
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	b10a      	cbz	r2, 8006a86 <_printf_common+0x26>
 8006a82:	3301      	adds	r3, #1
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	0699      	lsls	r1, r3, #26
 8006a8a:	bf42      	ittt	mi
 8006a8c:	6833      	ldrmi	r3, [r6, #0]
 8006a8e:	3302      	addmi	r3, #2
 8006a90:	6033      	strmi	r3, [r6, #0]
 8006a92:	6825      	ldr	r5, [r4, #0]
 8006a94:	f015 0506 	ands.w	r5, r5, #6
 8006a98:	d106      	bne.n	8006aa8 <_printf_common+0x48>
 8006a9a:	f104 0a19 	add.w	sl, r4, #25
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	6832      	ldr	r2, [r6, #0]
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	dc26      	bgt.n	8006af6 <_printf_common+0x96>
 8006aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aac:	1e13      	subs	r3, r2, #0
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	bf18      	it	ne
 8006ab2:	2301      	movne	r3, #1
 8006ab4:	0692      	lsls	r2, r2, #26
 8006ab6:	d42b      	bmi.n	8006b10 <_printf_common+0xb0>
 8006ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006abc:	4649      	mov	r1, r9
 8006abe:	4638      	mov	r0, r7
 8006ac0:	47c0      	blx	r8
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d01e      	beq.n	8006b04 <_printf_common+0xa4>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	f003 0306 	and.w	r3, r3, #6
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	bf02      	ittt	eq
 8006ad2:	68e5      	ldreq	r5, [r4, #12]
 8006ad4:	6833      	ldreq	r3, [r6, #0]
 8006ad6:	1aed      	subeq	r5, r5, r3
 8006ad8:	68a3      	ldr	r3, [r4, #8]
 8006ada:	bf0c      	ite	eq
 8006adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae0:	2500      	movne	r5, #0
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	bfc4      	itt	gt
 8006ae6:	1a9b      	subgt	r3, r3, r2
 8006ae8:	18ed      	addgt	r5, r5, r3
 8006aea:	2600      	movs	r6, #0
 8006aec:	341a      	adds	r4, #26
 8006aee:	42b5      	cmp	r5, r6
 8006af0:	d11a      	bne.n	8006b28 <_printf_common+0xc8>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e008      	b.n	8006b08 <_printf_common+0xa8>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4652      	mov	r2, sl
 8006afa:	4649      	mov	r1, r9
 8006afc:	4638      	mov	r0, r7
 8006afe:	47c0      	blx	r8
 8006b00:	3001      	adds	r0, #1
 8006b02:	d103      	bne.n	8006b0c <_printf_common+0xac>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	e7c6      	b.n	8006a9e <_printf_common+0x3e>
 8006b10:	18e1      	adds	r1, r4, r3
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	2030      	movs	r0, #48	; 0x30
 8006b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b1a:	4422      	add	r2, r4
 8006b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b24:	3302      	adds	r3, #2
 8006b26:	e7c7      	b.n	8006ab8 <_printf_common+0x58>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d0e6      	beq.n	8006b04 <_printf_common+0xa4>
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7d9      	b.n	8006aee <_printf_common+0x8e>
	...

08006b3c <_printf_i>:
 8006b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	7e0f      	ldrb	r7, [r1, #24]
 8006b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b44:	2f78      	cmp	r7, #120	; 0x78
 8006b46:	4691      	mov	r9, r2
 8006b48:	4680      	mov	r8, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	469a      	mov	sl, r3
 8006b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b52:	d807      	bhi.n	8006b64 <_printf_i+0x28>
 8006b54:	2f62      	cmp	r7, #98	; 0x62
 8006b56:	d80a      	bhi.n	8006b6e <_printf_i+0x32>
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	f000 80d4 	beq.w	8006d06 <_printf_i+0x1ca>
 8006b5e:	2f58      	cmp	r7, #88	; 0x58
 8006b60:	f000 80c0 	beq.w	8006ce4 <_printf_i+0x1a8>
 8006b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b6c:	e03a      	b.n	8006be4 <_printf_i+0xa8>
 8006b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b72:	2b15      	cmp	r3, #21
 8006b74:	d8f6      	bhi.n	8006b64 <_printf_i+0x28>
 8006b76:	a101      	add	r1, pc, #4	; (adr r1, 8006b7c <_printf_i+0x40>)
 8006b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	08006be9 	.word	0x08006be9
 8006b84:	08006b65 	.word	0x08006b65
 8006b88:	08006b65 	.word	0x08006b65
 8006b8c:	08006b65 	.word	0x08006b65
 8006b90:	08006b65 	.word	0x08006b65
 8006b94:	08006be9 	.word	0x08006be9
 8006b98:	08006b65 	.word	0x08006b65
 8006b9c:	08006b65 	.word	0x08006b65
 8006ba0:	08006b65 	.word	0x08006b65
 8006ba4:	08006b65 	.word	0x08006b65
 8006ba8:	08006ced 	.word	0x08006ced
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006ca7 	.word	0x08006ca7
 8006bb4:	08006b65 	.word	0x08006b65
 8006bb8:	08006b65 	.word	0x08006b65
 8006bbc:	08006d0f 	.word	0x08006d0f
 8006bc0:	08006b65 	.word	0x08006b65
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006b65 	.word	0x08006b65
 8006bcc:	08006b65 	.word	0x08006b65
 8006bd0:	08006caf 	.word	0x08006caf
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	1d1a      	adds	r2, r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	602a      	str	r2, [r5, #0]
 8006bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be4:	2301      	movs	r3, #1
 8006be6:	e09f      	b.n	8006d28 <_printf_i+0x1ec>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	0607      	lsls	r7, r0, #24
 8006bee:	f103 0104 	add.w	r1, r3, #4
 8006bf2:	6029      	str	r1, [r5, #0]
 8006bf4:	d501      	bpl.n	8006bfa <_printf_i+0xbe>
 8006bf6:	681e      	ldr	r6, [r3, #0]
 8006bf8:	e003      	b.n	8006c02 <_printf_i+0xc6>
 8006bfa:	0646      	lsls	r6, r0, #25
 8006bfc:	d5fb      	bpl.n	8006bf6 <_printf_i+0xba>
 8006bfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c02:	2e00      	cmp	r6, #0
 8006c04:	da03      	bge.n	8006c0e <_printf_i+0xd2>
 8006c06:	232d      	movs	r3, #45	; 0x2d
 8006c08:	4276      	negs	r6, r6
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0e:	485a      	ldr	r0, [pc, #360]	; (8006d78 <_printf_i+0x23c>)
 8006c10:	230a      	movs	r3, #10
 8006c12:	e012      	b.n	8006c3a <_printf_i+0xfe>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1d19      	adds	r1, r3, #4
 8006c1a:	6029      	str	r1, [r5, #0]
 8006c1c:	0605      	lsls	r5, r0, #24
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0xe8>
 8006c20:	681e      	ldr	r6, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <_printf_i+0xee>
 8006c24:	0641      	lsls	r1, r0, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0xe4>
 8006c28:	881e      	ldrh	r6, [r3, #0]
 8006c2a:	4853      	ldr	r0, [pc, #332]	; (8006d78 <_printf_i+0x23c>)
 8006c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c2e:	bf0c      	ite	eq
 8006c30:	2308      	moveq	r3, #8
 8006c32:	230a      	movne	r3, #10
 8006c34:	2100      	movs	r1, #0
 8006c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c3a:	6865      	ldr	r5, [r4, #4]
 8006c3c:	60a5      	str	r5, [r4, #8]
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	bfa2      	ittt	ge
 8006c42:	6821      	ldrge	r1, [r4, #0]
 8006c44:	f021 0104 	bicge.w	r1, r1, #4
 8006c48:	6021      	strge	r1, [r4, #0]
 8006c4a:	b90e      	cbnz	r6, 8006c50 <_printf_i+0x114>
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	d04b      	beq.n	8006ce8 <_printf_i+0x1ac>
 8006c50:	4615      	mov	r5, r2
 8006c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c56:	fb03 6711 	mls	r7, r3, r1, r6
 8006c5a:	5dc7      	ldrb	r7, [r0, r7]
 8006c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c60:	4637      	mov	r7, r6
 8006c62:	42bb      	cmp	r3, r7
 8006c64:	460e      	mov	r6, r1
 8006c66:	d9f4      	bls.n	8006c52 <_printf_i+0x116>
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d10b      	bne.n	8006c84 <_printf_i+0x148>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	07de      	lsls	r6, r3, #31
 8006c70:	d508      	bpl.n	8006c84 <_printf_i+0x148>
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6861      	ldr	r1, [r4, #4]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	bfde      	ittt	le
 8006c7a:	2330      	movle	r3, #48	; 0x30
 8006c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c84:	1b52      	subs	r2, r2, r5
 8006c86:	6122      	str	r2, [r4, #16]
 8006c88:	f8cd a000 	str.w	sl, [sp]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	aa03      	add	r2, sp, #12
 8006c90:	4621      	mov	r1, r4
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff fee4 	bl	8006a60 <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d14a      	bne.n	8006d32 <_printf_i+0x1f6>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	b004      	add	sp, #16
 8006ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	f043 0320 	orr.w	r3, r3, #32
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	4833      	ldr	r0, [pc, #204]	; (8006d7c <_printf_i+0x240>)
 8006cb0:	2778      	movs	r7, #120	; 0x78
 8006cb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	6829      	ldr	r1, [r5, #0]
 8006cba:	061f      	lsls	r7, r3, #24
 8006cbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cc0:	d402      	bmi.n	8006cc8 <_printf_i+0x18c>
 8006cc2:	065f      	lsls	r7, r3, #25
 8006cc4:	bf48      	it	mi
 8006cc6:	b2b6      	uxthmi	r6, r6
 8006cc8:	07df      	lsls	r7, r3, #31
 8006cca:	bf48      	it	mi
 8006ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd0:	6029      	str	r1, [r5, #0]
 8006cd2:	bf48      	it	mi
 8006cd4:	6023      	strmi	r3, [r4, #0]
 8006cd6:	b91e      	cbnz	r6, 8006ce0 <_printf_i+0x1a4>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	f023 0320 	bic.w	r3, r3, #32
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	e7a7      	b.n	8006c34 <_printf_i+0xf8>
 8006ce4:	4824      	ldr	r0, [pc, #144]	; (8006d78 <_printf_i+0x23c>)
 8006ce6:	e7e4      	b.n	8006cb2 <_printf_i+0x176>
 8006ce8:	4615      	mov	r5, r2
 8006cea:	e7bd      	b.n	8006c68 <_printf_i+0x12c>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	6826      	ldr	r6, [r4, #0]
 8006cf0:	6961      	ldr	r1, [r4, #20]
 8006cf2:	1d18      	adds	r0, r3, #4
 8006cf4:	6028      	str	r0, [r5, #0]
 8006cf6:	0635      	lsls	r5, r6, #24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0x1c4>
 8006cfc:	6019      	str	r1, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <_printf_i+0x1ca>
 8006d00:	0670      	lsls	r0, r6, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0x1c0>
 8006d04:	8019      	strh	r1, [r3, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	4615      	mov	r5, r2
 8006d0c:	e7bc      	b.n	8006c88 <_printf_i+0x14c>
 8006d0e:	682b      	ldr	r3, [r5, #0]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	602a      	str	r2, [r5, #0]
 8006d14:	681d      	ldr	r5, [r3, #0]
 8006d16:	6862      	ldr	r2, [r4, #4]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f7f9 fa58 	bl	80001d0 <memchr>
 8006d20:	b108      	cbz	r0, 8006d26 <_printf_i+0x1ea>
 8006d22:	1b40      	subs	r0, r0, r5
 8006d24:	6060      	str	r0, [r4, #4]
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d30:	e7aa      	b.n	8006c88 <_printf_i+0x14c>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	462a      	mov	r2, r5
 8006d36:	4649      	mov	r1, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	47d0      	blx	sl
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0ad      	beq.n	8006c9c <_printf_i+0x160>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	079b      	lsls	r3, r3, #30
 8006d44:	d413      	bmi.n	8006d6e <_printf_i+0x232>
 8006d46:	68e0      	ldr	r0, [r4, #12]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	4298      	cmp	r0, r3
 8006d4c:	bfb8      	it	lt
 8006d4e:	4618      	movlt	r0, r3
 8006d50:	e7a6      	b.n	8006ca0 <_printf_i+0x164>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4632      	mov	r2, r6
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	47d0      	blx	sl
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d09d      	beq.n	8006c9c <_printf_i+0x160>
 8006d60:	3501      	adds	r5, #1
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	9903      	ldr	r1, [sp, #12]
 8006d66:	1a5b      	subs	r3, r3, r1
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dcf2      	bgt.n	8006d52 <_printf_i+0x216>
 8006d6c:	e7eb      	b.n	8006d46 <_printf_i+0x20a>
 8006d6e:	2500      	movs	r5, #0
 8006d70:	f104 0619 	add.w	r6, r4, #25
 8006d74:	e7f5      	b.n	8006d62 <_printf_i+0x226>
 8006d76:	bf00      	nop
 8006d78:	080083a1 	.word	0x080083a1
 8006d7c:	080083b2 	.word	0x080083b2

08006d80 <__sflush_r>:
 8006d80:	898a      	ldrh	r2, [r1, #12]
 8006d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	4605      	mov	r5, r0
 8006d88:	0710      	lsls	r0, r2, #28
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	d458      	bmi.n	8006e40 <__sflush_r+0xc0>
 8006d8e:	684b      	ldr	r3, [r1, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dc05      	bgt.n	8006da0 <__sflush_r+0x20>
 8006d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dc02      	bgt.n	8006da0 <__sflush_r+0x20>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	d0f9      	beq.n	8006d9a <__sflush_r+0x1a>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dac:	682f      	ldr	r7, [r5, #0]
 8006dae:	6a21      	ldr	r1, [r4, #32]
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	d032      	beq.n	8006e1a <__sflush_r+0x9a>
 8006db4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	075a      	lsls	r2, r3, #29
 8006dba:	d505      	bpl.n	8006dc8 <__sflush_r+0x48>
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	1ac0      	subs	r0, r0, r3
 8006dc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dc2:	b10b      	cbz	r3, 8006dc8 <__sflush_r+0x48>
 8006dc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dc6:	1ac0      	subs	r0, r0, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4602      	mov	r2, r0
 8006dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dce:	6a21      	ldr	r1, [r4, #32]
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b0      	blx	r6
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	d106      	bne.n	8006de8 <__sflush_r+0x68>
 8006dda:	6829      	ldr	r1, [r5, #0]
 8006ddc:	291d      	cmp	r1, #29
 8006dde:	d82b      	bhi.n	8006e38 <__sflush_r+0xb8>
 8006de0:	4a29      	ldr	r2, [pc, #164]	; (8006e88 <__sflush_r+0x108>)
 8006de2:	410a      	asrs	r2, r1
 8006de4:	07d6      	lsls	r6, r2, #31
 8006de6:	d427      	bmi.n	8006e38 <__sflush_r+0xb8>
 8006de8:	2200      	movs	r2, #0
 8006dea:	6062      	str	r2, [r4, #4]
 8006dec:	04d9      	lsls	r1, r3, #19
 8006dee:	6922      	ldr	r2, [r4, #16]
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	d504      	bpl.n	8006dfe <__sflush_r+0x7e>
 8006df4:	1c42      	adds	r2, r0, #1
 8006df6:	d101      	bne.n	8006dfc <__sflush_r+0x7c>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b903      	cbnz	r3, 8006dfe <__sflush_r+0x7e>
 8006dfc:	6560      	str	r0, [r4, #84]	; 0x54
 8006dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e00:	602f      	str	r7, [r5, #0]
 8006e02:	2900      	cmp	r1, #0
 8006e04:	d0c9      	beq.n	8006d9a <__sflush_r+0x1a>
 8006e06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	d002      	beq.n	8006e14 <__sflush_r+0x94>
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f7ff fc96 	bl	8006740 <_free_r>
 8006e14:	2000      	movs	r0, #0
 8006e16:	6360      	str	r0, [r4, #52]	; 0x34
 8006e18:	e7c0      	b.n	8006d9c <__sflush_r+0x1c>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b0      	blx	r6
 8006e20:	1c41      	adds	r1, r0, #1
 8006e22:	d1c8      	bne.n	8006db6 <__sflush_r+0x36>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0c5      	beq.n	8006db6 <__sflush_r+0x36>
 8006e2a:	2b1d      	cmp	r3, #29
 8006e2c:	d001      	beq.n	8006e32 <__sflush_r+0xb2>
 8006e2e:	2b16      	cmp	r3, #22
 8006e30:	d101      	bne.n	8006e36 <__sflush_r+0xb6>
 8006e32:	602f      	str	r7, [r5, #0]
 8006e34:	e7b1      	b.n	8006d9a <__sflush_r+0x1a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	e7ad      	b.n	8006d9c <__sflush_r+0x1c>
 8006e40:	690f      	ldr	r7, [r1, #16]
 8006e42:	2f00      	cmp	r7, #0
 8006e44:	d0a9      	beq.n	8006d9a <__sflush_r+0x1a>
 8006e46:	0793      	lsls	r3, r2, #30
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	bf08      	it	eq
 8006e4c:	694b      	ldreq	r3, [r1, #20]
 8006e4e:	600f      	str	r7, [r1, #0]
 8006e50:	bf18      	it	ne
 8006e52:	2300      	movne	r3, #0
 8006e54:	eba6 0807 	sub.w	r8, r6, r7
 8006e58:	608b      	str	r3, [r1, #8]
 8006e5a:	f1b8 0f00 	cmp.w	r8, #0
 8006e5e:	dd9c      	ble.n	8006d9a <__sflush_r+0x1a>
 8006e60:	6a21      	ldr	r1, [r4, #32]
 8006e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e64:	4643      	mov	r3, r8
 8006e66:	463a      	mov	r2, r7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b0      	blx	r6
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	dc06      	bgt.n	8006e7e <__sflush_r+0xfe>
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e78e      	b.n	8006d9c <__sflush_r+0x1c>
 8006e7e:	4407      	add	r7, r0
 8006e80:	eba8 0800 	sub.w	r8, r8, r0
 8006e84:	e7e9      	b.n	8006e5a <__sflush_r+0xda>
 8006e86:	bf00      	nop
 8006e88:	dfbffffe 	.word	0xdfbffffe

08006e8c <_fflush_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	690b      	ldr	r3, [r1, #16]
 8006e90:	4605      	mov	r5, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	b913      	cbnz	r3, 8006e9c <_fflush_r+0x10>
 8006e96:	2500      	movs	r5, #0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	b118      	cbz	r0, 8006ea6 <_fflush_r+0x1a>
 8006e9e:	6a03      	ldr	r3, [r0, #32]
 8006ea0:	b90b      	cbnz	r3, 8006ea6 <_fflush_r+0x1a>
 8006ea2:	f7ff fa47 	bl	8006334 <__sinit>
 8006ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f3      	beq.n	8006e96 <_fflush_r+0xa>
 8006eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006eb0:	07d0      	lsls	r0, r2, #31
 8006eb2:	d404      	bmi.n	8006ebe <_fflush_r+0x32>
 8006eb4:	0599      	lsls	r1, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_fflush_r+0x32>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eba:	f7ff fc3f 	bl	800673c <__retarget_lock_acquire_recursive>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f7ff ff5d 	bl	8006d80 <__sflush_r>
 8006ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ec8:	07da      	lsls	r2, r3, #31
 8006eca:	4605      	mov	r5, r0
 8006ecc:	d4e4      	bmi.n	8006e98 <_fflush_r+0xc>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	059b      	lsls	r3, r3, #22
 8006ed2:	d4e1      	bmi.n	8006e98 <_fflush_r+0xc>
 8006ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed6:	f7ff fc32 	bl	800673e <__retarget_lock_release_recursive>
 8006eda:	e7dd      	b.n	8006e98 <_fflush_r+0xc>

08006edc <__swhatbuf_r>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	b096      	sub	sp, #88	; 0x58
 8006ee8:	4615      	mov	r5, r2
 8006eea:	461e      	mov	r6, r3
 8006eec:	da0d      	bge.n	8006f0a <__swhatbuf_r+0x2e>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	bf0c      	ite	eq
 8006efa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006efe:	2340      	movne	r3, #64	; 0x40
 8006f00:	2000      	movs	r0, #0
 8006f02:	6031      	str	r1, [r6, #0]
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	b016      	add	sp, #88	; 0x58
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	466a      	mov	r2, sp
 8006f0c:	f000 f848 	bl	8006fa0 <_fstat_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dbec      	blt.n	8006eee <__swhatbuf_r+0x12>
 8006f14:	9901      	ldr	r1, [sp, #4]
 8006f16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f1e:	4259      	negs	r1, r3
 8006f20:	4159      	adcs	r1, r3
 8006f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f26:	e7eb      	b.n	8006f00 <__swhatbuf_r+0x24>

08006f28 <__smakebuf_r>:
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f2c:	079d      	lsls	r5, r3, #30
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	d507      	bpl.n	8006f44 <__smakebuf_r+0x1c>
 8006f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6163      	str	r3, [r4, #20]
 8006f40:	b002      	add	sp, #8
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	ab01      	add	r3, sp, #4
 8006f46:	466a      	mov	r2, sp
 8006f48:	f7ff ffc8 	bl	8006edc <__swhatbuf_r>
 8006f4c:	9900      	ldr	r1, [sp, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4630      	mov	r0, r6
 8006f52:	f7ff f8e9 	bl	8006128 <_malloc_r>
 8006f56:	b948      	cbnz	r0, 8006f6c <__smakebuf_r+0x44>
 8006f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5c:	059a      	lsls	r2, r3, #22
 8006f5e:	d4ef      	bmi.n	8006f40 <__smakebuf_r+0x18>
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	e7e3      	b.n	8006f34 <__smakebuf_r+0xc>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	6020      	str	r0, [r4, #0]
 8006f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	6163      	str	r3, [r4, #20]
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	6120      	str	r0, [r4, #16]
 8006f7e:	b15b      	cbz	r3, 8006f98 <__smakebuf_r+0x70>
 8006f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f81d 	bl	8006fc4 <_isatty_r>
 8006f8a:	b128      	cbz	r0, 8006f98 <__smakebuf_r+0x70>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	431d      	orrs	r5, r3
 8006f9c:	81a5      	strh	r5, [r4, #12]
 8006f9e:	e7cf      	b.n	8006f40 <__smakebuf_r+0x18>

08006fa0 <_fstat_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d07      	ldr	r5, [pc, #28]	; (8006fc0 <_fstat_r+0x20>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	f7f9 fd1e 	bl	80009ee <_fstat>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	d102      	bne.n	8006fbc <_fstat_r+0x1c>
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	b103      	cbz	r3, 8006fbc <_fstat_r+0x1c>
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000964 	.word	0x20000964

08006fc4 <_isatty_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	; (8006fe0 <_isatty_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7f9 fd1d 	bl	8000a0e <_isatty>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_isatty_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_isatty_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20000964 	.word	0x20000964

08006fe4 <expf>:
 8006fe4:	b508      	push	{r3, lr}
 8006fe6:	ed2d 8b02 	vpush	{d8}
 8006fea:	eef0 8a40 	vmov.f32	s17, s0
 8006fee:	f000 f85f 	bl	80070b0 <__ieee754_expf>
 8006ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8006ff6:	eeb0 0a68 	vmov.f32	s0, s17
 8006ffa:	f000 f829 	bl	8007050 <finitef>
 8006ffe:	b160      	cbz	r0, 800701a <expf+0x36>
 8007000:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007040 <expf+0x5c>
 8007004:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	dd0a      	ble.n	8007024 <expf+0x40>
 800700e:	f7ff fb6b 	bl	80066e8 <__errno>
 8007012:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007044 <expf+0x60>
 8007016:	2322      	movs	r3, #34	; 0x22
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	eeb0 0a48 	vmov.f32	s0, s16
 800701e:	ecbd 8b02 	vpop	{d8}
 8007022:	bd08      	pop	{r3, pc}
 8007024:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007048 <expf+0x64>
 8007028:	eef4 8ae7 	vcmpe.f32	s17, s15
 800702c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007030:	d5f3      	bpl.n	800701a <expf+0x36>
 8007032:	f7ff fb59 	bl	80066e8 <__errno>
 8007036:	2322      	movs	r3, #34	; 0x22
 8007038:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800704c <expf+0x68>
 800703c:	6003      	str	r3, [r0, #0]
 800703e:	e7ec      	b.n	800701a <expf+0x36>
 8007040:	42b17217 	.word	0x42b17217
 8007044:	7f800000 	.word	0x7f800000
 8007048:	c2cff1b5 	.word	0xc2cff1b5
 800704c:	00000000 	.word	0x00000000

08007050 <finitef>:
 8007050:	b082      	sub	sp, #8
 8007052:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007056:	9801      	ldr	r0, [sp, #4]
 8007058:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800705c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007060:	bfac      	ite	ge
 8007062:	2000      	movge	r0, #0
 8007064:	2001      	movlt	r0, #1
 8007066:	b002      	add	sp, #8
 8007068:	4770      	bx	lr

0800706a <with_errnof>:
 800706a:	b513      	push	{r0, r1, r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007072:	f7ff fb39 	bl	80066e8 <__errno>
 8007076:	ed9d 0a01 	vldr	s0, [sp, #4]
 800707a:	6004      	str	r4, [r0, #0]
 800707c:	b002      	add	sp, #8
 800707e:	bd10      	pop	{r4, pc}

08007080 <xflowf>:
 8007080:	b130      	cbz	r0, 8007090 <xflowf+0x10>
 8007082:	eef1 7a40 	vneg.f32	s15, s0
 8007086:	ee27 0a80 	vmul.f32	s0, s15, s0
 800708a:	2022      	movs	r0, #34	; 0x22
 800708c:	f7ff bfed 	b.w	800706a <with_errnof>
 8007090:	eef0 7a40 	vmov.f32	s15, s0
 8007094:	e7f7      	b.n	8007086 <xflowf+0x6>
	...

08007098 <__math_uflowf>:
 8007098:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070a0 <__math_uflowf+0x8>
 800709c:	f7ff bff0 	b.w	8007080 <xflowf>
 80070a0:	10000000 	.word	0x10000000

080070a4 <__math_oflowf>:
 80070a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070ac <__math_oflowf+0x8>
 80070a8:	f7ff bfea 	b.w	8007080 <xflowf>
 80070ac:	70000000 	.word	0x70000000

080070b0 <__ieee754_expf>:
 80070b0:	ee10 2a10 	vmov	r2, s0
 80070b4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80070b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070bc:	d902      	bls.n	80070c4 <__ieee754_expf+0x14>
 80070be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070c2:	4770      	bx	lr
 80070c4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80070c8:	d106      	bne.n	80070d8 <__ieee754_expf+0x28>
 80070ca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007204 <__ieee754_expf+0x154>
 80070ce:	2900      	cmp	r1, #0
 80070d0:	bf18      	it	ne
 80070d2:	eeb0 0a67 	vmovne.f32	s0, s15
 80070d6:	4770      	bx	lr
 80070d8:	484b      	ldr	r0, [pc, #300]	; (8007208 <__ieee754_expf+0x158>)
 80070da:	4282      	cmp	r2, r0
 80070dc:	dd02      	ble.n	80070e4 <__ieee754_expf+0x34>
 80070de:	2000      	movs	r0, #0
 80070e0:	f7ff bfe0 	b.w	80070a4 <__math_oflowf>
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	da05      	bge.n	80070f4 <__ieee754_expf+0x44>
 80070e8:	4a48      	ldr	r2, [pc, #288]	; (800720c <__ieee754_expf+0x15c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d902      	bls.n	80070f4 <__ieee754_expf+0x44>
 80070ee:	2000      	movs	r0, #0
 80070f0:	f7ff bfd2 	b.w	8007098 <__math_uflowf>
 80070f4:	4a46      	ldr	r2, [pc, #280]	; (8007210 <__ieee754_expf+0x160>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80070fc:	d952      	bls.n	80071a4 <__ieee754_expf+0xf4>
 80070fe:	4a45      	ldr	r2, [pc, #276]	; (8007214 <__ieee754_expf+0x164>)
 8007100:	4293      	cmp	r3, r2
 8007102:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8007106:	d834      	bhi.n	8007172 <__ieee754_expf+0xc2>
 8007108:	4b43      	ldr	r3, [pc, #268]	; (8007218 <__ieee754_expf+0x168>)
 800710a:	4413      	add	r3, r2
 800710c:	ed93 7a00 	vldr	s14, [r3]
 8007110:	4b42      	ldr	r3, [pc, #264]	; (800721c <__ieee754_expf+0x16c>)
 8007112:	4413      	add	r3, r2
 8007114:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007118:	f1c1 0201 	rsb	r2, r1, #1
 800711c:	edd3 7a00 	vldr	s15, [r3]
 8007120:	1a52      	subs	r2, r2, r1
 8007122:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007126:	ee20 6a00 	vmul.f32	s12, s0, s0
 800712a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007220 <__ieee754_expf+0x170>
 800712e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007224 <__ieee754_expf+0x174>
 8007132:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007136:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007228 <__ieee754_expf+0x178>
 800713a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800713e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800722c <__ieee754_expf+0x17c>
 8007142:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007146:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007230 <__ieee754_expf+0x180>
 800714a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800714e:	eef0 6a40 	vmov.f32	s13, s0
 8007152:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007156:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800715a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800715e:	bb92      	cbnz	r2, 80071c6 <__ieee754_expf+0x116>
 8007160:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007164:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007168:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800716c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007170:	4770      	bx	lr
 8007172:	4b30      	ldr	r3, [pc, #192]	; (8007234 <__ieee754_expf+0x184>)
 8007174:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007238 <__ieee754_expf+0x188>
 8007178:	eddf 6a30 	vldr	s13, [pc, #192]	; 800723c <__ieee754_expf+0x18c>
 800717c:	4413      	add	r3, r2
 800717e:	edd3 7a00 	vldr	s15, [r3]
 8007182:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007186:	eeb0 7a40 	vmov.f32	s14, s0
 800718a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800718e:	ee17 2a90 	vmov	r2, s15
 8007192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007196:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800719a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007240 <__ieee754_expf+0x190>
 800719e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071a2:	e7be      	b.n	8007122 <__ieee754_expf+0x72>
 80071a4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80071a8:	d20b      	bcs.n	80071c2 <__ieee754_expf+0x112>
 80071aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007244 <__ieee754_expf+0x194>
 80071ae:	ee70 6a26 	vadd.f32	s13, s0, s13
 80071b2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	dd02      	ble.n	80071c2 <__ieee754_expf+0x112>
 80071bc:	ee30 0a25 	vadd.f32	s0, s0, s11
 80071c0:	4770      	bx	lr
 80071c2:	2200      	movs	r2, #0
 80071c4:	e7af      	b.n	8007126 <__ieee754_expf+0x76>
 80071c6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80071ca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80071ce:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80071d2:	bfb8      	it	lt
 80071d4:	3264      	addlt	r2, #100	; 0x64
 80071d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071de:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80071e2:	ee17 3a90 	vmov	r3, s15
 80071e6:	bfab      	itete	ge
 80071e8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80071ec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80071f0:	ee00 3a10 	vmovge	s0, r3
 80071f4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007248 <__ieee754_expf+0x198>
 80071f8:	bfbc      	itt	lt
 80071fa:	ee00 3a10 	vmovlt	s0, r3
 80071fe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007202:	4770      	bx	lr
 8007204:	00000000 	.word	0x00000000
 8007208:	42b17217 	.word	0x42b17217
 800720c:	42cff1b5 	.word	0x42cff1b5
 8007210:	3eb17218 	.word	0x3eb17218
 8007214:	3f851591 	.word	0x3f851591
 8007218:	080083cc 	.word	0x080083cc
 800721c:	080083d4 	.word	0x080083d4
 8007220:	3331bb4c 	.word	0x3331bb4c
 8007224:	b5ddea0e 	.word	0xb5ddea0e
 8007228:	388ab355 	.word	0x388ab355
 800722c:	bb360b61 	.word	0xbb360b61
 8007230:	3e2aaaab 	.word	0x3e2aaaab
 8007234:	080083c4 	.word	0x080083c4
 8007238:	3fb8aa3b 	.word	0x3fb8aa3b
 800723c:	3f317180 	.word	0x3f317180
 8007240:	3717f7d1 	.word	0x3717f7d1
 8007244:	7149f2ca 	.word	0x7149f2ca
 8007248:	0d800000 	.word	0x0d800000

0800724c <_init>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr

08007258 <_fini>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr
