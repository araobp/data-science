
AcousticFeatureCamera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080076b8  080076b8  000176b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a74  08007a74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a7c  08007a7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001d4  08007c58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08007c58  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f062  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002247  00000000  00000000  0002f2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009df  00000000  00000000  000321d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252cc  00000000  00000000  00032bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eecd  00000000  00000000  00057e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec21e  00000000  00000000  00066d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b0  00000000  00000000  00152f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00157420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800769c 	.word	0x0800769c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800769c 	.word	0x0800769c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 fc5c 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f809 	bl	8000ec2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f90c 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb4:	f000 f8ec 	bl	8001090 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eb8:	f000 f8ba 	bl	8001030 <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8000ebc:	f000 f852 	bl	8000f64 <MX_DFSDM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x1c>

08000ec2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b096      	sub	sp, #88	; 0x58
 8000ec6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2244      	movs	r2, #68	; 0x44
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 fd54 	bl	800597e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ee4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ee8:	f001 fbac 	bl	8002644 <HAL_PWREx_ControlVoltageScaling>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ef2:	f000 f951 	bl	8001198 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f10:	230a      	movs	r3, #10
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f14:	2307      	movs	r3, #7
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fbe3 	bl	80026f0 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f30:	f000 f932 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 ffab 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f58:	f000 f91e 	bl	8001198 <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3758      	adds	r7, #88	; 0x58
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f6a:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <MX_DFSDM1_Init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f86:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f8a:	2240      	movs	r2, #64	; 0x40
 8000f8c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f96:	f000 fe33 	bl	8001c00 <HAL_DFSDM_FilterInit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000fa0:	f000 f8fa 	bl	8001198 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <MX_DFSDM1_Init+0xc4>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 64;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x09;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fee:	2209      	movs	r2, #9
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000ff4:	f000 fd44 	bl	8001a80 <HAL_DFSDM_ChannelInit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000ffe:	f000 f8cb 	bl	8001198 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001002:	2201      	movs	r2, #1
 8001004:	4909      	ldr	r1, [pc, #36]	; (800102c <MX_DFSDM1_Init+0xc8>)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8001008:	f000 fed4 	bl	8001db4 <HAL_DFSDM_FilterConfigRegChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8001012:	f000 f8c1 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001f0 	.word	0x200001f0
 8001020:	40016100 	.word	0x40016100
 8001024:	20000244 	.word	0x20000244
 8001028:	40016060 	.word	0x40016060
 800102c:	00030008 	.word	0x00030008

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <MX_USART2_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800103c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001074:	f002 fdf8 	bl	8003c68 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f88b 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002c4 	.word	0x200002c4
 800108c:	40004400 	.word	0x40004400

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_DMA_Init+0x38>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <MX_DMA_Init+0x38>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	; 0x48
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_DMA_Init+0x38>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	200e      	movs	r0, #14
 80010b4:	f000 fcad 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010b8:	200e      	movs	r0, #14
 80010ba:	f000 fcc6 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_GPIO_Init+0xc4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2120      	movs	r1, #32
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f001 fa55 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001154:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_GPIO_Init+0xc8>)
 8001166:	f001 f89d 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116a:	2320      	movs	r3, #32
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f001 f88e 	bl	80022a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	; 0x60
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ac      	sub	sp, #176	; 0xb0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2288      	movs	r2, #136	; 0x88
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fbb6 	bl	800597e <memset>
  if(DFSDM1_Init == 0)
 8001212:	4b44      	ldr	r3, [pc, #272]	; (8001324 <HAL_DFSDM_FilterMspInit+0x138>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d14a      	bne.n	80012b0 <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800121a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f860 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff ffaf 	bl	8001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_DFSDM_FilterMspInit+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a39      	ldr	r2, [pc, #228]	; (8001328 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001242:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10b      	bne.n	8001264 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <HAL_DFSDM_FilterMspInit+0x140>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	4a36      	ldr	r2, [pc, #216]	; (800132c <HAL_DFSDM_FilterMspInit+0x140>)
 8001252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001256:	6613      	str	r3, [r2, #96]	; 0x60
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_DFSDM_FilterMspInit+0x140>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4b31      	ldr	r3, [pc, #196]	; (800132c <HAL_DFSDM_FilterMspInit+0x140>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_DFSDM_FilterMspInit+0x140>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_DFSDM_FilterMspInit+0x140>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 800127c:	2384      	movs	r3, #132	; 0x84
 800127e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001294:	2306      	movs	r3, #6
 8001296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129e:	4619      	mov	r1, r3
 80012a0:	4823      	ldr	r0, [pc, #140]	; (8001330 <HAL_DFSDM_FilterMspInit+0x144>)
 80012a2:	f000 ffff 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_DFSDM_FilterMspInit+0x138>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_DFSDM_FilterMspInit+0x138>)
 80012ae:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_DFSDM_FilterMspInit+0x148>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d130      	bne.n	800131c <HAL_DFSDM_FilterMspInit+0x130>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_DFSDM_FilterMspInit+0x150>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012de:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012ea:	2220      	movs	r2, #32
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80012f4:	4810      	ldr	r0, [pc, #64]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012f6:	f000 fdef 	bl	8001ed8 <HAL_DMA_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_DFSDM_FilterMspInit+0x118>
    {
      Error_Handler();
 8001300:	f7ff ff4a 	bl	8001198 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800131c:	bf00      	nop
 800131e:	37b0      	adds	r7, #176	; 0xb0
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000350 	.word	0x20000350
 8001328:	2000034c 	.word	0x2000034c
 800132c:	40021000 	.word	0x40021000
 8001330:	48000800 	.word	0x48000800
 8001334:	40016100 	.word	0x40016100
 8001338:	2000027c 	.word	0x2000027c
 800133c:	40020044 	.word	0x40020044

08001340 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ac      	sub	sp, #176	; 0xb0
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2288      	movs	r2, #136	; 0x88
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fb0c 	bl	800597e <memset>
  if(DFSDM1_Init == 0)
 8001366:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d14a      	bne.n	8001404 <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800136e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001372:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4618      	mov	r0, r3
 8001380:	f001 ffb6 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800138a:	f7ff ff05 	bl	8001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001396:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10b      	bne.n	80013b8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	6613      	str	r3, [r2, #96]	; 0x60
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80013d0:	2384      	movs	r3, #132	; 0x84
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013e8:	2306      	movs	r3, #6
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f2:	4619      	mov	r1, r3
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80013f6:	f000 ff55 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_DFSDM_ChannelMspInit+0xcc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a02      	ldr	r2, [pc, #8]	; (800140c <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001402:	6013      	str	r3, [r2, #0]
  }

}
 8001404:	bf00      	nop
 8001406:	37b0      	adds	r7, #176	; 0xb0
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000350 	.word	0x20000350
 8001410:	2000034c 	.word	0x2000034c
 8001414:	40021000 	.word	0x40021000
 8001418:	48000800 	.word	0x48000800

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0ac      	sub	sp, #176	; 0xb0
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2288      	movs	r2, #136	; 0x88
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fa9e 	bl	800597e <memset>
  if(huart->Instance==USART2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a25      	ldr	r2, [pc, #148]	; (80014dc <HAL_UART_MspInit+0xc0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d143      	bne.n	80014d4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800144c:	2302      	movs	r3, #2
 800144e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001450:	2300      	movs	r3, #0
 8001452:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4618      	mov	r0, r3
 800145a:	f001 ff49 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001464:	f7ff fe98 	bl	8001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 800146e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001472:	6593      	str	r3, [r2, #88]	; 0x58
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0xc4>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001498:	230c      	movs	r3, #12
 800149a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b0:	2307      	movs	r3, #7
 80014b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f000 fef0 	bl	80022a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2026      	movs	r0, #38	; 0x26
 80014ca:	f000 faa2 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014ce:	2026      	movs	r0, #38	; 0x26
 80014d0:	f000 fabb 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	37b0      	adds	r7, #176	; 0xb0
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f974 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Channel4_IRQHandler+0x10>)
 800153e:	f000 fe02 	bl	8002146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000027c 	.word	0x2000027c

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART2_IRQHandler+0x10>)
 8001552:	f002 fbd7 	bl	8003d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002c4 	.word	0x200002c4

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157a:	f004 fa63 	bl	8005a44 <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	e7fe      	b.n	80015a2 <_exit+0x12>

080015a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
  }

  return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e009      	b.n	8001604 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf1      	blt.n	80015f0 <_write+0x12>
  }
  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_close>:

int _close(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	605a      	str	r2, [r3, #4]
  return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_isatty>:

int _isatty(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f004 f9c8 	bl	8005a44 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20018000 	.word	0x20018000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000354 	.word	0x20000354
 80016e8:	200004d0 	.word	0x200004d0

080016ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001714:	f7ff ffea 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <LoopForever+0x6>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	; (8001750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <LoopForever+0xe>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	; (800175c <LoopForever+0x16>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f004 f987 	bl	8005a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001742:	f7ff fbaf 	bl	8000ea4 <main>

08001746 <LoopForever>:

LoopForever:
    b LoopForever
 8001746:	e7fe      	b.n	8001746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001748:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001754:	08007a84 	.word	0x08007a84
  ldr r2, =_sbss
 8001758:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800175c:	200004cc 	.word	0x200004cc

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>
	...

08001764 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_Init+0x3c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_Init+0x3c>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177a:	2003      	movs	r0, #3
 800177c:	f000 f93e 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f80f 	bl	80017a4 <HAL_InitTick>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	e001      	b.n	8001796 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001792:	f7ff fd07 	bl	80011a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001796:	79fb      	ldrb	r3, [r7, #7]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40022000 	.word	0x40022000

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_InitTick+0x6c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_InitTick+0x70>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_InitTick+0x6c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f949 	bl	8001a66 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d809      	bhi.n	80017f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 f913 	bl	8001a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_InitTick+0x74>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e007      	b.n	8001804 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e004      	b.n	8001804 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e001      	b.n	8001804 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	20000358 	.word	0x20000358

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000358 	.word	0x20000358

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0ac      	b.n	8001bec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f9d2 	bl	8001e40 <DFSDM_GetChannelFromInstance>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a55      	ldr	r2, [pc, #340]	; (8001bf4 <HAL_DFSDM_ChannelInit+0x174>)
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e09f      	b.n	8001bec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fc47 	bl	8001340 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8001aba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001abc:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d125      	bne.n	8001b10 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ace:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4948      	ldr	r1, [pc, #288]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001ae8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001af2:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	493f      	ldr	r1, [pc, #252]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b04:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	; (8001bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8001b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b0e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b2e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b34:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020f 	bic.w	r2, r2, #15
 8001b4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	3b01      	subs	r3, #1
 8001b86:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f002 0207 	and.w	r2, r2, #7
 8001ba0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f930 	bl	8001e40 <DFSDM_GetChannelFromInstance>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <HAL_DFSDM_ChannelInit+0x174>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000360 	.word	0x20000360
 8001bf8:	2000035c 	.word	0x2000035c
 8001bfc:	40016000 	.word	0x40016000

08001c00 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0ca      	b.n	8001da8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a66      	ldr	r2, [pc, #408]	; (8001db0 <HAL_DFSDM_FilterInit+0x1b0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d109      	bne.n	8001c30 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d003      	beq.n	8001c2c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0bb      	b.n	8001da8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff facf 	bl	80011ec <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001c5c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d108      	bne.n	8001c78 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e007      	b.n	8001c88 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001c86:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7a5b      	ldrb	r3, [r3, #9]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001cc0:	f023 0308 	bic.w	r3, r3, #8
 8001cc4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d108      	bne.n	8001ce0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7c1b      	ldrb	r3, [r3, #16]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0210 	orr.w	r2, r2, #16
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0210 	bic.w	r2, r2, #16
 8001d08:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7c5b      	ldrb	r3, [r3, #17]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e007      	b.n	8001d34 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0220 	bic.w	r2, r2, #32
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001d42:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001d46:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6959      	ldr	r1, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d5a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d62:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7c1a      	ldrb	r2, [r3, #16]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40016100 	.word	0x40016100

08001db4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02e      	beq.n	8001e2c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001dd4:	2bff      	cmp	r3, #255	; 0xff
 8001dd6:	d029      	beq.n	8001e2c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10d      	bne.n	8001e0e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e00a      	b.n	8001e24 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2a:	e001      	b.n	8001e30 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <DFSDM_GetChannelFromInstance+0x7c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e02b      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <DFSDM_GetChannelFromInstance+0x80>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d102      	bne.n	8001e64 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e024      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <DFSDM_GetChannelFromInstance+0x84>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d102      	bne.n	8001e72 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e01d      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <DFSDM_GetChannelFromInstance+0x88>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d102      	bne.n	8001e80 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e016      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <DFSDM_GetChannelFromInstance+0x8c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d102      	bne.n	8001e8e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001e88:	2305      	movs	r3, #5
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e00f      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <DFSDM_GetChannelFromInstance+0x90>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d102      	bne.n	8001e9c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001e96:	2306      	movs	r3, #6
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e008      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <DFSDM_GetChannelFromInstance+0x94>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d102      	bne.n	8001eaa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e001      	b.n	8001eae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40016000 	.word	0x40016000
 8001ec0:	40016020 	.word	0x40016020
 8001ec4:	40016040 	.word	0x40016040
 8001ec8:	40016080 	.word	0x40016080
 8001ecc:	400160a0 	.word	0x400160a0
 8001ed0:	400160c0 	.word	0x400160c0
 8001ed4:	400160e0 	.word	0x400160e0

08001ed8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e098      	b.n	800201c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_DMA_Init+0x150>)
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d80f      	bhi.n	8001f16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_DMA_Init+0x154>)
 8001efe:	4413      	add	r3, r2
 8001f00:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <HAL_DMA_Init+0x158>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	009a      	lsls	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a48      	ldr	r2, [pc, #288]	; (8002034 <HAL_DMA_Init+0x15c>)
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
 8001f14:	e00e      	b.n	8001f34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_DMA_Init+0x160>)
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a43      	ldr	r2, [pc, #268]	; (8002030 <HAL_DMA_Init+0x158>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	009a      	lsls	r2, r3, #2
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a42      	ldr	r2, [pc, #264]	; (800203c <HAL_DMA_Init+0x164>)
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f8e:	d039      	beq.n	8002004 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_DMA_Init+0x15c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11a      	bne.n	8001fd0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_DMA_Init+0x168>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f003 031c 	and.w	r3, r3, #28
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4924      	ldr	r1, [pc, #144]	; (8002040 <HAL_DMA_Init+0x168>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_DMA_Init+0x168>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	491d      	ldr	r1, [pc, #116]	; (8002040 <HAL_DMA_Init+0x168>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
 8001fce:	e019      	b.n	8002004 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_DMA_Init+0x16c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f003 031c 	and.w	r3, r3, #28
 8001fdc:	210f      	movs	r1, #15
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4917      	ldr	r1, [pc, #92]	; (8002044 <HAL_DMA_Init+0x16c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_DMA_Init+0x16c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f003 031c 	and.w	r3, r3, #28
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	4911      	ldr	r1, [pc, #68]	; (8002044 <HAL_DMA_Init+0x16c>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40020407 	.word	0x40020407
 800202c:	bffdfff8 	.word	0xbffdfff8
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	40020000 	.word	0x40020000
 8002038:	bffdfbf8 	.word	0xbffdfbf8
 800203c:	40020400 	.word	0x40020400
 8002040:	400200a8 	.word	0x400200a8
 8002044:	400204a8 	.word	0x400204a8

08002048 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2204      	movs	r2, #4
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e022      	b.n	80020b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f003 021c 	and.w	r2, r3, #28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d005      	beq.n	80020e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2204      	movs	r2, #4
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e029      	b.n	800213c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 020e 	bic.w	r2, r2, #14
 80020f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f003 021c 	and.w	r2, r3, #28
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
    }
  }
  return status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f003 031c 	and.w	r3, r3, #28
 8002166:	2204      	movs	r2, #4
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d026      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x7a>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d021      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0204 	bic.w	r2, r2, #4
 8002198:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 021c 	and.w	r2, r3, #28
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2104      	movs	r1, #4
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d071      	beq.n	800229a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021be:	e06c      	b.n	800229a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	f003 031c 	and.w	r3, r3, #28
 80021c8:	2202      	movs	r2, #2
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d02e      	beq.n	8002232 <HAL_DMA_IRQHandler+0xec>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d029      	beq.n	8002232 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020a 	bic.w	r2, r2, #10
 80021fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f003 021c 	and.w	r2, r3, #28
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2102      	movs	r1, #2
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d038      	beq.n	800229a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002230:	e033      	b.n	800229a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f003 031c 	and.w	r3, r3, #28
 800223a:	2208      	movs	r2, #8
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d02a      	beq.n	800229c <HAL_DMA_IRQHandler+0x156>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d025      	beq.n	800229c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 020e 	bic.w	r2, r2, #14
 800225e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f003 021c 	and.w	r2, r3, #28
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800229a:	bf00      	nop
 800229c:	bf00      	nop
}
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e17f      	b.n	80025b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8171 	beq.w	80025ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x40>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d118      	bne.n	8002384 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	6939      	ldr	r1, [r7, #16]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80ac 	beq.w	80025ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	4a5e      	ldr	r2, [pc, #376]	; (80025d4 <HAL_GPIO_Init+0x330>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6613      	str	r3, [r2, #96]	; 0x60
 8002462:	4b5c      	ldr	r3, [pc, #368]	; (80025d4 <HAL_GPIO_Init+0x330>)
 8002464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800246e:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002498:	d025      	beq.n	80024e6 <HAL_GPIO_Init+0x242>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4f      	ldr	r2, [pc, #316]	; (80025dc <HAL_GPIO_Init+0x338>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01f      	beq.n	80024e2 <HAL_GPIO_Init+0x23e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_Init+0x33c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_Init+0x23a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x340>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x236>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_GPIO_Init+0x344>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x232>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_GPIO_Init+0x348>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x22e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4a      	ldr	r2, [pc, #296]	; (80025f0 <HAL_GPIO_Init+0x34c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x22a>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e00c      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e00a      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x244>
 80024e6:	2300      	movs	r3, #0
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024f8:	4937      	ldr	r1, [pc, #220]	; (80025d8 <HAL_GPIO_Init+0x334>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800252a:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_GPIO_Init+0x350>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x350>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_GPIO_Init+0x350>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f47f ae78 	bne.w	80022b4 <HAL_GPIO_Init+0x10>
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	48000400 	.word	0x48000400
 80025e0:	48000800 	.word	0x48000800
 80025e4:	48000c00 	.word	0x48000c00
 80025e8:	48001000 	.word	0x48001000
 80025ec:	48001400 	.word	0x48001400
 80025f0:	48001800 	.word	0x48001800
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e002      	b.n	800261c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_PWREx_GetVoltageRange+0x18>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40007000 	.word	0x40007000

08002644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002652:	d130      	bne.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800265c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002660:	d038      	beq.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2232      	movs	r2, #50	; 0x32
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002688:	e002      	b.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	d102      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f2      	bne.n	800268a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b0:	d110      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e00f      	b.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d007      	beq.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026cc:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000
 80026e8:	20000000 	.word	0x20000000
 80026ec:	431bde83 	.word	0x431bde83

080026f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e3ca      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002702:	4b97      	ldr	r3, [pc, #604]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270c:	4b94      	ldr	r3, [pc, #592]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80e4 	beq.w	80028ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_RCC_OscConfig+0x4a>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	f040 808b 	bne.w	8002848 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 8087 	bne.w	8002848 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e3a2      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	4b82      	ldr	r3, [pc, #520]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_RCC_OscConfig+0x7c>
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276a:	e005      	b.n	8002778 <HAL_RCC_OscConfig+0x88>
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002778:	4293      	cmp	r3, r2
 800277a:	d223      	bcs.n	80027c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fd55 	bl	8003230 <RCC_SetFlashLatencyFromMSIRange>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e383      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002790:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a72      	ldr	r2, [pc, #456]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	496d      	ldr	r1, [pc, #436]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	4968      	ldr	r1, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
 80027c2:	e025      	b.n	8002810 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4960      	ldr	r1, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	495b      	ldr	r1, [pc, #364]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fd15 	bl	8003230 <RCC_SetFlashLatencyFromMSIRange>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e343      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002810:	f000 fc4a 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	4950      	ldr	r1, [pc, #320]	; (8002964 <HAL_RCC_OscConfig+0x274>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	4a4e      	ldr	r2, [pc, #312]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800282e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002830:	4b4e      	ldr	r3, [pc, #312]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe ffb5 	bl	80017a4 <HAL_InitTick>
 800283a:	4603      	mov	r3, r0
 800283c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d052      	beq.n	80028ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	e327      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d032      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800285c:	f7fe fff2 	bl	8001844 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002864:	f7fe ffee 	bl	8001844 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e310      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002876:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a36      	ldr	r2, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4931      	ldr	r1, [pc, #196]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	e01a      	b.n	80028ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c2:	f7fe ffbf 	bl	8001844 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ca:	f7fe ffbb 	bl	8001844 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e2dd      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x1da>
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d074      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x21a>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d10e      	bne.n	8002922 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d10b      	bne.n	8002922 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d064      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d160      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e2ba      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x24a>
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	e026      	b.n	8002988 <HAL_RCC_OscConfig+0x298>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002942:	d115      	bne.n	8002970 <HAL_RCC_OscConfig+0x280>
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 800294a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a02      	ldr	r2, [pc, #8]	; (8002960 <HAL_RCC_OscConfig+0x270>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e014      	b.n	8002988 <HAL_RCC_OscConfig+0x298>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	080076b8 	.word	0x080076b8
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004
 8002970:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a9f      	ldr	r2, [pc, #636]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a9c      	ldr	r2, [pc, #624]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe ff58 	bl	8001844 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe ff54 	bl	8001844 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e276      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029aa:	4b92      	ldr	r3, [pc, #584]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x2a8>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe ff44 	bl	8001844 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe ff40 	bl	8001844 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e262      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2d0>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d060      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x310>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d119      	bne.n	8002a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d116      	bne.n	8002a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a00:	4b7c      	ldr	r3, [pc, #496]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x328>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e23f      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	4973      	ldr	r1, [pc, #460]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2c:	e040      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d023      	beq.n	8002a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6e      	ldr	r2, [pc, #440]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe feff 	bl	8001844 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fefb 	bl	8001844 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e21d      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5c:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	495f      	ldr	r1, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
 8002a7c:	e018      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5c      	ldr	r2, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fedb 	bl	8001844 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fed7 	bl	8001844 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1f9      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d03c      	beq.n	8002b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01c      	beq.n	8002afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe feb6 	bl	8001844 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe feb2 	bl	8001844 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1d4      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <HAL_RCC_OscConfig+0x3ec>
 8002afc:	e01b      	b.n	8002b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fe99 	bl	8001844 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fe fe95 	bl	8001844 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e1b7      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a6 	beq.w	8002c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b88:	f7fe fe5c 	bl	8001844 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fe fe58 	bl	8001844 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e17a      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCC_OscConfig+0x508>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4d8>
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc6:	e029      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d115      	bne.n	8002bfc <HAL_RCC_OscConfig+0x50c>
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	4a03      	ldr	r2, [pc, #12]	; (8002bf4 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	4b9c      	ldr	r3, [pc, #624]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	4a9b      	ldr	r2, [pc, #620]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c0c:	4b98      	ldr	r3, [pc, #608]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	4a97      	ldr	r2, [pc, #604]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d016      	beq.n	8002c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe fe0e 	bl	8001844 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fe0a 	bl	8001844 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e12a      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ed      	beq.n	8002c2c <HAL_RCC_OscConfig+0x53c>
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe fdf7 	bl	8001844 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fdf3 	bl	8001844 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e113      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c70:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ed      	bne.n	8002c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7e:	7ffb      	ldrb	r3, [r7, #31]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c84:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	4a79      	ldr	r2, [pc, #484]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80fe 	beq.w	8002e96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	f040 80d0 	bne.w	8002e44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ca4:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d130      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d127      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d11f      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce4:	2a07      	cmp	r2, #7
 8002ce6:	bf14      	ite	ne
 8002ce8:	2201      	movne	r2, #1
 8002cea:	2200      	moveq	r2, #0
 8002cec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d06e      	beq.n	8002df8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d069      	beq.n	8002df4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d20:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ad      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d48:	f7fe fd7c 	bl	8001844 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fd78 	bl	8001844 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e09a      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_RCC_OscConfig+0x784>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d88:	0212      	lsls	r2, r2, #8
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0552      	lsls	r2, r2, #21
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d9c:	0852      	lsrs	r2, r2, #1
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	0652      	lsls	r2, r2, #25
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da8:	0912      	lsrs	r2, r2, #4
 8002daa:	0452      	lsls	r2, r2, #17
 8002dac:	430a      	orrs	r2, r1
 8002dae:	4930      	ldr	r1, [pc, #192]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dcc:	f7fe fd3a 	bl	8001844 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fd36 	bl	8001844 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df2:	e050      	b.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04f      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d148      	bne.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e1c:	f7fe fd12 	bl	8001844 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fd0e 	bl	8001844 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e030      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x734>
 8002e42:	e028      	b.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d023      	beq.n	8002e92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_RCC_OscConfig+0x780>)
 8002e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe fcf5 	bl	8001844 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fcf1 	bl	8001844 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d905      	bls.n	8002e78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e013      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_OscConfig+0x7b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ec      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_OscConfig+0x7b0>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4905      	ldr	r1, [pc, #20]	; (8002ea0 <HAL_RCC_OscConfig+0x7b0>)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x7b4>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60cb      	str	r3, [r1, #12]
 8002e90:	e001      	b.n	8002e96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	feeefffc 	.word	0xfeeefffc

08002ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0e7      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b75      	ldr	r3, [pc, #468]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4970      	ldr	r1, [pc, #448]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cf      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4960      	ldr	r1, [pc, #384]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04c      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0a6      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	4b54      	ldr	r3, [pc, #336]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d115      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e09a      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f5e:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e08e      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e086      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f7e:	4b46      	ldr	r3, [pc, #280]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4943      	ldr	r1, [pc, #268]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe fc58 	bl	8001844 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fe fc54 	bl	8001844 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e06e      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 020c 	and.w	r2, r3, #12
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1eb      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d208      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	492b      	ldr	r1, [pc, #172]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fee:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d210      	bcs.n	800301e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 0207 	bic.w	r2, r3, #7
 8003004:	4923      	ldr	r1, [pc, #140]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_ClockConfig+0x1ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e036      	b.n	800308c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4918      	ldr	r1, [pc, #96]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4910      	ldr	r1, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800305c:	f000 f824 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	490b      	ldr	r1, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1f4>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1f8>)
 800307a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1fc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe fb8f 	bl	80017a4 <HAL_InitTick>
 8003086:	4603      	mov	r3, r0
 8003088:	72fb      	strb	r3, [r7, #11]

  return status;
 800308a:	7afb      	ldrb	r3, [r7, #11]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	080076b8 	.word	0x080076b8
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000004 	.word	0x20000004

080030a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x34>
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d121      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d11e      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e005      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d102      	bne.n	8003126 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e004      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d101      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_RCC_GetSysClockFreq+0x114>)
 800312e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d134      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0xa6>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d003      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0xac>
 800314c:	e005      	b.n	800315a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003150:	617b      	str	r3, [r7, #20]
      break;
 8003152:	e005      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003156:	617b      	str	r3, [r7, #20]
      break;
 8003158:	e002      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	617b      	str	r3, [r7, #20]
      break;
 800315e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	3301      	adds	r3, #1
 800316c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	fb03 f202 	mul.w	r2, r3, r2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	0e5b      	lsrs	r3, r3, #25
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	3301      	adds	r3, #1
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031a0:	69bb      	ldr	r3, [r7, #24]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	080076d0 	.word	0x080076d0
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4904      	ldr	r1, [pc, #16]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	080076c8 	.word	0x080076c8

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003208:	f7ff ffda 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4904      	ldr	r1, [pc, #16]	; (800322c <HAL_RCC_GetPCLK2Freq+0x28>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	080076c8 	.word	0x080076c8

08003230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7ff f9ee 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
 800324e:	e014      	b.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	; 0x58
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003268:	f7ff f9de 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 800326c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003280:	d10b      	bne.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d919      	bls.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2ba0      	cmp	r3, #160	; 0xa0
 800328c:	d902      	bls.n	8003294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328e:	2302      	movs	r3, #2
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e013      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e010      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d902      	bls.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032a0:	2303      	movs	r3, #3
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e00a      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d102      	bne.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ac:	2302      	movs	r3, #2
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e004      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b70      	cmp	r3, #112	; 0x70
 80032b6:	d101      	bne.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 0207 	bic.w	r2, r3, #7
 80032c4:	4909      	ldr	r1, [pc, #36]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fc:	2300      	movs	r3, #0
 80032fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003308:	2b00      	cmp	r3, #0
 800330a:	d041      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003314:	d02a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003316:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800331a:	d824      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800331c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003320:	d008      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003326:	d81e      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800332c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003330:	d010      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003332:	e018      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003334:	4b86      	ldr	r3, [pc, #536]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a85      	ldr	r2, [pc, #532]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003340:	e015      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fabb 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003352:	e00c      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3320      	adds	r3, #32
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fba6 	bl	8003aac <RCCEx_PLLSAI2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003364:	e003      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	74fb      	strb	r3, [r7, #19]
      break;
 800336a:	e000      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800336c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003374:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003382:	4973      	ldr	r1, [pc, #460]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800338a:	e001      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d041      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033a4:	d02a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033aa:	d824      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033b0:	d008      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033b6:	d81e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c0:	d010      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033c2:	e018      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c4:	4b62      	ldr	r3, [pc, #392]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a61      	ldr	r2, [pc, #388]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fa73 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e2:	e00c      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3320      	adds	r3, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fb5e 	bl	8003aac <RCCEx_PLLSAI2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	74fb      	strb	r3, [r7, #19]
      break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003404:	4b52      	ldr	r3, [pc, #328]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003412:	494f      	ldr	r1, [pc, #316]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a0 	beq.w	800356e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	4a40      	ldr	r2, [pc, #256]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	; 0x58
 8003454:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003460:	2301      	movs	r3, #1
 8003462:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003464:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3a      	ldr	r2, [pc, #232]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003470:	f7fe f9e8 	bl	8001844 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003476:	e009      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003478:	f7fe f9e4 	bl	8001844 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d902      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	74fb      	strb	r3, [r7, #19]
        break;
 800348a:	e005      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800348c:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ef      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d15c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01f      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d019      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a20      	ldr	r2, [pc, #128]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe f9a3 	bl	8001844 <HAL_GetTick>
 80034fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003500:	e00b      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe f99f 	bl	8001844 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d902      	bls.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	74fb      	strb	r3, [r7, #19]
            break;
 8003518:	e006      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ec      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353e:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003546:	e009      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355c:	7c7b      	ldrb	r3, [r7, #17]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b9e      	ldr	r3, [pc, #632]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	4a9d      	ldr	r2, [pc, #628]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800357a:	4b98      	ldr	r3, [pc, #608]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f023 0203 	bic.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	4994      	ldr	r1, [pc, #592]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800359c:	4b8f      	ldr	r3, [pc, #572]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f023 020c 	bic.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	498c      	ldr	r1, [pc, #560]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035be:	4b87      	ldr	r3, [pc, #540]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	4983      	ldr	r1, [pc, #524]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e0:	4b7e      	ldr	r3, [pc, #504]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	497b      	ldr	r1, [pc, #492]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	4972      	ldr	r1, [pc, #456]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003624:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	496a      	ldr	r1, [pc, #424]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	4961      	ldr	r1, [pc, #388]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003668:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	4959      	ldr	r1, [pc, #356]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003698:	4950      	ldr	r1, [pc, #320]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ac:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	4948      	ldr	r1, [pc, #288]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ce:	4b43      	ldr	r3, [pc, #268]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	493f      	ldr	r1, [pc, #252]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d028      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f0:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	4937      	ldr	r1, [pc, #220]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800370e:	d106      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a31      	ldr	r2, [pc, #196]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371a:	60d3      	str	r3, [r2, #12]
 800371c:	e011      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003726:	d10c      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f8c8 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800374e:	4b23      	ldr	r3, [pc, #140]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	491f      	ldr	r1, [pc, #124]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376c:	d106      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003778:	60d3      	str	r3, [r2, #12]
 800377a:	e011      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f899 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ca:	d109      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a02      	ldr	r2, [pc, #8]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d6:	60d3      	str	r3, [r2, #12]
 80037d8:	e014      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f867 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02f      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	4928      	ldr	r1, [pc, #160]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800382e:	d10d      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f844 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d014      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	74bb      	strb	r3, [r7, #18]
 800384a:	e011      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003854:	d10c      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3320      	adds	r3, #32
 800385a:	2102      	movs	r1, #2
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f925 	bl	8003aac <RCCEx_PLLSAI2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800387c:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388a:	490d      	ldr	r1, [pc, #52]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ae:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000

080038c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038d2:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10d      	bne.n	800390a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
       ||
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038f6:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
       ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d047      	beq.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	e044      	b.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d018      	beq.n	800394a <RCCEx_PLLSAI1_Config+0x86>
 8003918:	2b03      	cmp	r3, #3
 800391a:	d825      	bhi.n	8003968 <RCCEx_PLLSAI1_Config+0xa4>
 800391c:	2b01      	cmp	r3, #1
 800391e:	d002      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x62>
 8003920:	2b02      	cmp	r3, #2
 8003922:	d009      	beq.n	8003938 <RCCEx_PLLSAI1_Config+0x74>
 8003924:	e020      	b.n	8003968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003926:	4b60      	ldr	r3, [pc, #384]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11d      	bne.n	800396e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e01a      	b.n	800396e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003938:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e013      	b.n	8003972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800394a:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003966:	e006      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e004      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003976:	bf00      	nop
    }

    if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	430b      	orrs	r3, r1
 8003994:	4944      	ldr	r1, [pc, #272]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d17d      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039a0:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd ff4a 	bl	8001844 <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b2:	e009      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b4:	f7fd ff46 	bl	8001844 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	73fb      	strb	r3, [r7, #15]
        break;
 80039c6:	e005      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c8:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ef      	bne.n	80039b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d160      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d111      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	0912      	lsrs	r2, r2, #4
 80039f8:	0452      	lsls	r2, r2, #17
 80039fa:	430a      	orrs	r2, r1
 80039fc:	492a      	ldr	r1, [pc, #168]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	610b      	str	r3, [r1, #16]
 8003a02:	e027      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d112      	bne.n	8003a30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0a:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0211      	lsls	r1, r2, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6912      	ldr	r2, [r2, #16]
 8003a20:	0852      	lsrs	r2, r2, #1
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0552      	lsls	r2, r2, #21
 8003a26:	430a      	orrs	r2, r1
 8003a28:	491f      	ldr	r1, [pc, #124]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
 8003a2e:	e011      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6892      	ldr	r2, [r2, #8]
 8003a40:	0211      	lsls	r1, r2, #8
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6952      	ldr	r2, [r2, #20]
 8003a46:	0852      	lsrs	r2, r2, #1
 8003a48:	3a01      	subs	r2, #1
 8003a4a:	0652      	lsls	r2, r2, #25
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fef0 	bl	8001844 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a68:	f7fd feec 	bl	8001844 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
          break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ef      	beq.n	8003a68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000

08003aac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aba:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d018      	beq.n	8003af8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ac6:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0203 	and.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d10d      	bne.n	8003af2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ade:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
       ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d047      	beq.n	8003b82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	e044      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d018      	beq.n	8003b32 <RCCEx_PLLSAI2_Config+0x86>
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d825      	bhi.n	8003b50 <RCCEx_PLLSAI2_Config+0xa4>
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d002      	beq.n	8003b0e <RCCEx_PLLSAI2_Config+0x62>
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d009      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x74>
 8003b0c:	e020      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b0e:	4b55      	ldr	r3, [pc, #340]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11d      	bne.n	8003b56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1e:	e01a      	b.n	8003b56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b20:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d116      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e013      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b32:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b3e:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b4e:	e006      	b.n	8003b5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	e004      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	4939      	ldr	r1, [pc, #228]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d167      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a35      	ldr	r2, [pc, #212]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b94:	f7fd fe56 	bl	8001844 <HAL_GetTick>
 8003b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b9a:	e009      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b9c:	f7fd fe52 	bl	8001844 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d902      	bls.n	8003bb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	73fb      	strb	r3, [r7, #15]
        break;
 8003bae:	e005      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ef      	bne.n	8003b9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d14a      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d111      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc8:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	0211      	lsls	r1, r2, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	0912      	lsrs	r2, r2, #4
 8003be0:	0452      	lsls	r2, r2, #17
 8003be2:	430a      	orrs	r2, r1
 8003be4:	491f      	ldr	r1, [pc, #124]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	614b      	str	r3, [r1, #20]
 8003bea:	e011      	b.n	8003c10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6892      	ldr	r2, [r2, #8]
 8003bfc:	0211      	lsls	r1, r2, #8
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6912      	ldr	r2, [r2, #16]
 8003c02:	0852      	lsrs	r2, r2, #1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	0652      	lsls	r2, r2, #25
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4916      	ldr	r1, [pc, #88]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c10:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fe12 	bl	8001844 <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c24:	f7fd fe0e 	bl	8001844 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
          break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4904      	ldr	r1, [pc, #16]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e040      	b.n	8003cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fbc6 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fdea 	bl	8004888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fb2f 	bl	8004318 <UART_SetConfig>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e01b      	b.n	8003cfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fe69 	bl	80049cc <UART_CheckIdleState>
 8003cfa:	4603      	mov	r3, r0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b0ba      	sub	sp, #232	; 0xe8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d32:	4013      	ands	r3, r2
 8003d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d115      	bne.n	8003d6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00f      	beq.n	8003d6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 82ae 	beq.w	80042be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
      }
      return;
 8003d6a:	e2a8      	b.n	80042be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8117 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d86:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_UART_IRQHandler+0x298>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 810a 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d011      	beq.n	8003dc0 <HAL_UART_IRQHandler+0xbc>
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2201      	movs	r2, #1
 8003dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d011      	beq.n	8003df0 <HAL_UART_IRQHandler+0xec>
 8003dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d011      	beq.n	8003e20 <HAL_UART_IRQHandler+0x11c>
 8003dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d017      	beq.n	8003e5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e52:	f043 0208 	orr.w	r2, r3, #8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_UART_IRQHandler+0x18a>
 8003e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00c      	beq.n	8003e8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8214 	beq.w	80042c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04f      	beq.n	8003f86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fe7f 	bl	8004bea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d141      	bne.n	8003f7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1d9      	bne.n	8003efa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <HAL_UART_IRQHandler+0x29c>)
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe f8b2 	bl	80020c4 <HAL_DMA_Abort_IT>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f70:	4610      	mov	r0, r2
 8003f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e00f      	b.n	8003f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9b8 	bl	80042ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00b      	b.n	8003f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9b4 	bl	80042ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e007      	b.n	8003f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9b0 	bl	80042ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f94:	e195      	b.n	80042c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f96:	bf00      	nop
    return;
 8003f98:	e193      	b.n	80042c2 <HAL_UART_IRQHandler+0x5be>
 8003f9a:	bf00      	nop
 8003f9c:	04000120 	.word	0x04000120
 8003fa0:	08004cb3 	.word	0x08004cb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	f040 814e 	bne.w	800424a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8147 	beq.w	800424a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8140 	beq.w	800424a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2210      	movs	r2, #16
 8003fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	f040 80b8 	bne.w	8004152 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8167 	beq.w	80042c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004002:	429a      	cmp	r2, r3
 8004004:	f080 815f 	bcs.w	80042c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800400e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 8086 	bne.w	8004130 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800404e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004052:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800405a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1da      	bne.n	8004024 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800407e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004092:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004096:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800409a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e1      	bne.n	800406e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e3      	bne.n	80040aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004112:	65bb      	str	r3, [r7, #88]	; 0x58
 8004114:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e4      	bne.n	80040f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd ff8c 	bl	8002048 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004142:	b29b      	uxth	r3, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8d8 	bl	8004300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004150:	e0b9      	b.n	80042c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800415e:	b29b      	uxth	r3, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80ab 	beq.w	80042ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a6 	beq.w	80042ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e4      	bne.n	800417e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	623b      	str	r3, [r7, #32]
   return(result);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3308      	adds	r3, #8
 80041d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041d8:	633a      	str	r2, [r7, #48]	; 0x30
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	60fb      	str	r3, [r7, #12]
   return(result);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0310 	bic.w	r3, r3, #16
 8004214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	617b      	str	r3, [r7, #20]
   return(result);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e4      	bne.n	8004200 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f85c 	bl	8004300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004248:	e03f      	b.n	80042ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00e      	beq.n	8004274 <HAL_UART_IRQHandler+0x570>
 8004256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800426a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fd60 	bl	8004d32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004272:	e02d      	b.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00e      	beq.n	800429e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01c      	beq.n	80042ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
    }
    return;
 800429c:	e017      	b.n	80042ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
 80042aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fd11 	bl	8004cde <UART_EndTransmit_IT>
    return;
 80042bc:	e008      	b.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80042be:	bf00      	nop
 80042c0:	e006      	b.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80042c2:	bf00      	nop
 80042c4:	e004      	b.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80042ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042d0:	37e8      	adds	r7, #232	; 0xe8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop

080042d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b08a      	sub	sp, #40	; 0x28
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	431a      	orrs	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4ba4      	ldr	r3, [pc, #656]	; (80045d8 <UART_SetConfig+0x2c0>)
 8004348:	4013      	ands	r3, r2
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004350:	430b      	orrs	r3, r1
 8004352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a99      	ldr	r2, [pc, #612]	; (80045dc <UART_SetConfig+0x2c4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	4313      	orrs	r3, r2
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a90      	ldr	r2, [pc, #576]	; (80045e0 <UART_SetConfig+0x2c8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d126      	bne.n	80043f0 <UART_SetConfig+0xd8>
 80043a2:	4b90      	ldr	r3, [pc, #576]	; (80045e4 <UART_SetConfig+0x2cc>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d81b      	bhi.n	80043e8 <UART_SetConfig+0xd0>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0xa0>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ce:	e116      	b.n	80045fe <UART_SetConfig+0x2e6>
 80043d0:	2302      	movs	r3, #2
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d6:	e112      	b.n	80045fe <UART_SetConfig+0x2e6>
 80043d8:	2304      	movs	r3, #4
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e10e      	b.n	80045fe <UART_SetConfig+0x2e6>
 80043e0:	2308      	movs	r3, #8
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e10a      	b.n	80045fe <UART_SetConfig+0x2e6>
 80043e8:	2310      	movs	r3, #16
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e106      	b.n	80045fe <UART_SetConfig+0x2e6>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7c      	ldr	r2, [pc, #496]	; (80045e8 <UART_SetConfig+0x2d0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d138      	bne.n	800446c <UART_SetConfig+0x154>
 80043fa:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <UART_SetConfig+0x2cc>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b0c      	cmp	r3, #12
 8004406:	d82d      	bhi.n	8004464 <UART_SetConfig+0x14c>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <UART_SetConfig+0xf8>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004445 	.word	0x08004445
 8004414:	08004465 	.word	0x08004465
 8004418:	08004465 	.word	0x08004465
 800441c:	08004465 	.word	0x08004465
 8004420:	08004455 	.word	0x08004455
 8004424:	08004465 	.word	0x08004465
 8004428:	08004465 	.word	0x08004465
 800442c:	08004465 	.word	0x08004465
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004465 	.word	0x08004465
 8004438:	08004465 	.word	0x08004465
 800443c:	08004465 	.word	0x08004465
 8004440:	0800445d 	.word	0x0800445d
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444a:	e0d8      	b.n	80045fe <UART_SetConfig+0x2e6>
 800444c:	2302      	movs	r3, #2
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004452:	e0d4      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004454:	2304      	movs	r3, #4
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445a:	e0d0      	b.n	80045fe <UART_SetConfig+0x2e6>
 800445c:	2308      	movs	r3, #8
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e0cc      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004464:	2310      	movs	r3, #16
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e0c8      	b.n	80045fe <UART_SetConfig+0x2e6>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5e      	ldr	r2, [pc, #376]	; (80045ec <UART_SetConfig+0x2d4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d125      	bne.n	80044c2 <UART_SetConfig+0x1aa>
 8004476:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <UART_SetConfig+0x2cc>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004480:	2b30      	cmp	r3, #48	; 0x30
 8004482:	d016      	beq.n	80044b2 <UART_SetConfig+0x19a>
 8004484:	2b30      	cmp	r3, #48	; 0x30
 8004486:	d818      	bhi.n	80044ba <UART_SetConfig+0x1a2>
 8004488:	2b20      	cmp	r3, #32
 800448a:	d00a      	beq.n	80044a2 <UART_SetConfig+0x18a>
 800448c:	2b20      	cmp	r3, #32
 800448e:	d814      	bhi.n	80044ba <UART_SetConfig+0x1a2>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <UART_SetConfig+0x182>
 8004494:	2b10      	cmp	r3, #16
 8004496:	d008      	beq.n	80044aa <UART_SetConfig+0x192>
 8004498:	e00f      	b.n	80044ba <UART_SetConfig+0x1a2>
 800449a:	2300      	movs	r3, #0
 800449c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a0:	e0ad      	b.n	80045fe <UART_SetConfig+0x2e6>
 80044a2:	2302      	movs	r3, #2
 80044a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a8:	e0a9      	b.n	80045fe <UART_SetConfig+0x2e6>
 80044aa:	2304      	movs	r3, #4
 80044ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b0:	e0a5      	b.n	80045fe <UART_SetConfig+0x2e6>
 80044b2:	2308      	movs	r3, #8
 80044b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b8:	e0a1      	b.n	80045fe <UART_SetConfig+0x2e6>
 80044ba:	2310      	movs	r3, #16
 80044bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c0:	e09d      	b.n	80045fe <UART_SetConfig+0x2e6>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4a      	ldr	r2, [pc, #296]	; (80045f0 <UART_SetConfig+0x2d8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d125      	bne.n	8004518 <UART_SetConfig+0x200>
 80044cc:	4b45      	ldr	r3, [pc, #276]	; (80045e4 <UART_SetConfig+0x2cc>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044d6:	2bc0      	cmp	r3, #192	; 0xc0
 80044d8:	d016      	beq.n	8004508 <UART_SetConfig+0x1f0>
 80044da:	2bc0      	cmp	r3, #192	; 0xc0
 80044dc:	d818      	bhi.n	8004510 <UART_SetConfig+0x1f8>
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d00a      	beq.n	80044f8 <UART_SetConfig+0x1e0>
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d814      	bhi.n	8004510 <UART_SetConfig+0x1f8>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <UART_SetConfig+0x1d8>
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d008      	beq.n	8004500 <UART_SetConfig+0x1e8>
 80044ee:	e00f      	b.n	8004510 <UART_SetConfig+0x1f8>
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e082      	b.n	80045fe <UART_SetConfig+0x2e6>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e07e      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e07a      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e076      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e072      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a35      	ldr	r2, [pc, #212]	; (80045f4 <UART_SetConfig+0x2dc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d12a      	bne.n	8004578 <UART_SetConfig+0x260>
 8004522:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <UART_SetConfig+0x2cc>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004530:	d01a      	beq.n	8004568 <UART_SetConfig+0x250>
 8004532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004536:	d81b      	bhi.n	8004570 <UART_SetConfig+0x258>
 8004538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453c:	d00c      	beq.n	8004558 <UART_SetConfig+0x240>
 800453e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004542:	d815      	bhi.n	8004570 <UART_SetConfig+0x258>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <UART_SetConfig+0x238>
 8004548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454c:	d008      	beq.n	8004560 <UART_SetConfig+0x248>
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0x258>
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004556:	e052      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004558:	2302      	movs	r3, #2
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455e:	e04e      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e04a      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e046      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e042      	b.n	80045fe <UART_SetConfig+0x2e6>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a17      	ldr	r2, [pc, #92]	; (80045dc <UART_SetConfig+0x2c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d13a      	bne.n	80045f8 <UART_SetConfig+0x2e0>
 8004582:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <UART_SetConfig+0x2cc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800458c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004590:	d01a      	beq.n	80045c8 <UART_SetConfig+0x2b0>
 8004592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004596:	d81b      	bhi.n	80045d0 <UART_SetConfig+0x2b8>
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	d00c      	beq.n	80045b8 <UART_SetConfig+0x2a0>
 800459e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a2:	d815      	bhi.n	80045d0 <UART_SetConfig+0x2b8>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <UART_SetConfig+0x298>
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ac:	d008      	beq.n	80045c0 <UART_SetConfig+0x2a8>
 80045ae:	e00f      	b.n	80045d0 <UART_SetConfig+0x2b8>
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e022      	b.n	80045fe <UART_SetConfig+0x2e6>
 80045b8:	2302      	movs	r3, #2
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e01e      	b.n	80045fe <UART_SetConfig+0x2e6>
 80045c0:	2304      	movs	r3, #4
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e01a      	b.n	80045fe <UART_SetConfig+0x2e6>
 80045c8:	2308      	movs	r3, #8
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e016      	b.n	80045fe <UART_SetConfig+0x2e6>
 80045d0:	2310      	movs	r3, #16
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e012      	b.n	80045fe <UART_SetConfig+0x2e6>
 80045d8:	efff69f3 	.word	0xefff69f3
 80045dc:	40008000 	.word	0x40008000
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40004400 	.word	0x40004400
 80045ec:	40004800 	.word	0x40004800
 80045f0:	40004c00 	.word	0x40004c00
 80045f4:	40005000 	.word	0x40005000
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a9f      	ldr	r2, [pc, #636]	; (8004880 <UART_SetConfig+0x568>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d17a      	bne.n	80046fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800460c:	2b08      	cmp	r3, #8
 800460e:	d824      	bhi.n	800465a <UART_SetConfig+0x342>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x300>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800463d 	.word	0x0800463d
 800461c:	0800465b 	.word	0x0800465b
 8004620:	08004645 	.word	0x08004645
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800464b 	.word	0x0800464b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800465b 	.word	0x0800465b
 8004638:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe fdcc 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004640:	61f8      	str	r0, [r7, #28]
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b8f      	ldr	r3, [pc, #572]	; (8004884 <UART_SetConfig+0x56c>)
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe fd2d 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 800464e:	61f8      	str	r0, [r7, #28]
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80fb 	beq.w	8004864 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	429a      	cmp	r2, r3
 800467c:	d305      	bcc.n	800468a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	429a      	cmp	r2, r3
 8004688:	d903      	bls.n	8004692 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004690:	e0e8      	b.n	8004864 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2200      	movs	r2, #0
 8004696:	461c      	mov	r4, r3
 8004698:	4615      	mov	r5, r2
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	022b      	lsls	r3, r5, #8
 80046a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046a8:	0222      	lsls	r2, r4, #8
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6849      	ldr	r1, [r1, #4]
 80046ae:	0849      	lsrs	r1, r1, #1
 80046b0:	2000      	movs	r0, #0
 80046b2:	4688      	mov	r8, r1
 80046b4:	4681      	mov	r9, r0
 80046b6:	eb12 0a08 	adds.w	sl, r2, r8
 80046ba:	eb43 0b09 	adc.w	fp, r3, r9
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046cc:	4650      	mov	r0, sl
 80046ce:	4659      	mov	r1, fp
 80046d0:	f7fc fa6a 	bl	8000ba8 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e2:	d308      	bcc.n	80046f6 <UART_SetConfig+0x3de>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ea:	d204      	bcs.n	80046f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e0b6      	b.n	8004864 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046fc:	e0b2      	b.n	8004864 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004706:	d15e      	bne.n	80047c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800470c:	2b08      	cmp	r3, #8
 800470e:	d828      	bhi.n	8004762 <UART_SetConfig+0x44a>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0x400>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
 8004724:	08004763 	.word	0x08004763
 8004728:	08004753 	.word	0x08004753
 800472c:	08004763 	.word	0x08004763
 8004730:	08004763 	.word	0x08004763
 8004734:	08004763 	.word	0x08004763
 8004738:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473c:	f7fe fd4c 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004740:	61f8      	str	r0, [r7, #28]
        break;
 8004742:	e014      	b.n	800476e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe fd5e 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8004748:	61f8      	str	r0, [r7, #28]
        break;
 800474a:	e010      	b.n	800476e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b4d      	ldr	r3, [pc, #308]	; (8004884 <UART_SetConfig+0x56c>)
 800474e:	61fb      	str	r3, [r7, #28]
        break;
 8004750:	e00d      	b.n	800476e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe fca9 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8004756:	61f8      	str	r0, [r7, #28]
        break;
 8004758:	e009      	b.n	800476e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475e:	61fb      	str	r3, [r7, #28]
        break;
 8004760:	e005      	b.n	800476e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800476c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d077      	beq.n	8004864 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005a      	lsls	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	441a      	add	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d916      	bls.n	80047be <UART_SetConfig+0x4a6>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d212      	bcs.n	80047be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f023 030f 	bic.w	r3, r3, #15
 80047a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	8afb      	ldrh	r3, [r7, #22]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	8afa      	ldrh	r2, [r7, #22]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e052      	b.n	8004864 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047c4:	e04e      	b.n	8004864 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d827      	bhi.n	800481e <UART_SetConfig+0x506>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x4bc>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	08004801 	.word	0x08004801
 80047dc:	08004809 	.word	0x08004809
 80047e0:	0800481f 	.word	0x0800481f
 80047e4:	0800480f 	.word	0x0800480f
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	0800481f 	.word	0x0800481f
 80047f0:	0800481f 	.word	0x0800481f
 80047f4:	08004817 	.word	0x08004817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7fe fcee 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 80047fc:	61f8      	str	r0, [r7, #28]
        break;
 80047fe:	e014      	b.n	800482a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7fe fd00 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8004804:	61f8      	str	r0, [r7, #28]
        break;
 8004806:	e010      	b.n	800482a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004808:	4b1e      	ldr	r3, [pc, #120]	; (8004884 <UART_SetConfig+0x56c>)
 800480a:	61fb      	str	r3, [r7, #28]
        break;
 800480c:	e00d      	b.n	800482a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480e:	f7fe fc4b 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8004812:	61f8      	str	r0, [r7, #28]
        break;
 8004814:	e009      	b.n	800482a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481a:	61fb      	str	r3, [r7, #28]
        break;
 800481c:	e005      	b.n	800482a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004828:	bf00      	nop
    }

    if (pclk != 0U)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d019      	beq.n	8004864 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	085a      	lsrs	r2, r3, #1
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b0f      	cmp	r3, #15
 8004848:	d909      	bls.n	800485e <UART_SetConfig+0x546>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d205      	bcs.n	800485e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60da      	str	r2, [r3, #12]
 800485c:	e002      	b.n	8004864 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	; 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487e:	bf00      	nop
 8004880:	40008000 	.word	0x40008000
 8004884:	00f42400 	.word	0x00f42400

08004888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01a      	beq.n	800499e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004986:	d10a      	bne.n	800499e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b098      	sub	sp, #96	; 0x60
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049dc:	f7fc ff32 	bl	8001844 <HAL_GetTick>
 80049e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d12e      	bne.n	8004a4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f8:	2200      	movs	r2, #0
 80049fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f88c 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d021      	beq.n	8004a4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e6      	bne.n	8004a0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e062      	b.n	8004b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d149      	bne.n	8004af0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a64:	2200      	movs	r2, #0
 8004a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f856 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d03c      	beq.n	8004af0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	623b      	str	r3, [r7, #32]
   return(result);
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30
 8004a96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e6      	bne.n	8004a76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac8:	61fa      	str	r2, [r7, #28]
 8004aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	69b9      	ldr	r1, [r7, #24]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e011      	b.n	8004b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3758      	adds	r7, #88	; 0x58
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	e049      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d045      	beq.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fc fe85 	bl	8001844 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e048      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d031      	beq.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d110      	bne.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2208      	movs	r2, #8
 8004b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f838 	bl	8004bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e029      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9c:	d111      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f81e 	bl	8004bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e00f      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d0a6      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b095      	sub	sp, #84	; 0x54
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	643b      	str	r3, [r7, #64]	; 0x40
 8004c12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d118      	bne.n	8004c92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 0310 	bic.w	r3, r3, #16
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ca6:	bf00      	nop
 8004ca8:	3754      	adds	r7, #84	; 0x54
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fb0b 	bl	80042ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	613b      	str	r3, [r7, #16]
   return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fad7 	bl	80042d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d2a:	bf00      	nop
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <_calloc_r>:
 8004d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d48:	fba1 2402 	umull	r2, r4, r1, r2
 8004d4c:	b94c      	cbnz	r4, 8004d62 <_calloc_r+0x1c>
 8004d4e:	4611      	mov	r1, r2
 8004d50:	9201      	str	r2, [sp, #4]
 8004d52:	f000 f82f 	bl	8004db4 <_malloc_r>
 8004d56:	9a01      	ldr	r2, [sp, #4]
 8004d58:	4605      	mov	r5, r0
 8004d5a:	b930      	cbnz	r0, 8004d6a <_calloc_r+0x24>
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	b003      	add	sp, #12
 8004d60:	bd30      	pop	{r4, r5, pc}
 8004d62:	220c      	movs	r2, #12
 8004d64:	6002      	str	r2, [r0, #0]
 8004d66:	2500      	movs	r5, #0
 8004d68:	e7f8      	b.n	8004d5c <_calloc_r+0x16>
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	f000 fe07 	bl	800597e <memset>
 8004d70:	e7f4      	b.n	8004d5c <_calloc_r+0x16>
	...

08004d74 <sbrk_aligned>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4e0e      	ldr	r6, [pc, #56]	; (8004db0 <sbrk_aligned+0x3c>)
 8004d78:	460c      	mov	r4, r1
 8004d7a:	6831      	ldr	r1, [r6, #0]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	b911      	cbnz	r1, 8004d86 <sbrk_aligned+0x12>
 8004d80:	f000 fe3e 	bl	8005a00 <_sbrk_r>
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fe39 	bl	8005a00 <_sbrk_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	d00a      	beq.n	8004da8 <sbrk_aligned+0x34>
 8004d92:	1cc4      	adds	r4, r0, #3
 8004d94:	f024 0403 	bic.w	r4, r4, #3
 8004d98:	42a0      	cmp	r0, r4
 8004d9a:	d007      	beq.n	8004dac <sbrk_aligned+0x38>
 8004d9c:	1a21      	subs	r1, r4, r0
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 fe2e 	bl	8005a00 <_sbrk_r>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d101      	bne.n	8004dac <sbrk_aligned+0x38>
 8004da8:	f04f 34ff 	mov.w	r4, #4294967295
 8004dac:	4620      	mov	r0, r4
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	20000384 	.word	0x20000384

08004db4 <_malloc_r>:
 8004db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db8:	1ccd      	adds	r5, r1, #3
 8004dba:	f025 0503 	bic.w	r5, r5, #3
 8004dbe:	3508      	adds	r5, #8
 8004dc0:	2d0c      	cmp	r5, #12
 8004dc2:	bf38      	it	cc
 8004dc4:	250c      	movcc	r5, #12
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	4607      	mov	r7, r0
 8004dca:	db01      	blt.n	8004dd0 <_malloc_r+0x1c>
 8004dcc:	42a9      	cmp	r1, r5
 8004dce:	d905      	bls.n	8004ddc <_malloc_r+0x28>
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ddc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004eb0 <_malloc_r+0xfc>
 8004de0:	f000 f868 	bl	8004eb4 <__malloc_lock>
 8004de4:	f8d8 3000 	ldr.w	r3, [r8]
 8004de8:	461c      	mov	r4, r3
 8004dea:	bb5c      	cbnz	r4, 8004e44 <_malloc_r+0x90>
 8004dec:	4629      	mov	r1, r5
 8004dee:	4638      	mov	r0, r7
 8004df0:	f7ff ffc0 	bl	8004d74 <sbrk_aligned>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	4604      	mov	r4, r0
 8004df8:	d155      	bne.n	8004ea6 <_malloc_r+0xf2>
 8004dfa:	f8d8 4000 	ldr.w	r4, [r8]
 8004dfe:	4626      	mov	r6, r4
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	d145      	bne.n	8004e90 <_malloc_r+0xdc>
 8004e04:	2c00      	cmp	r4, #0
 8004e06:	d048      	beq.n	8004e9a <_malloc_r+0xe6>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	eb04 0903 	add.w	r9, r4, r3
 8004e12:	f000 fdf5 	bl	8005a00 <_sbrk_r>
 8004e16:	4581      	cmp	r9, r0
 8004e18:	d13f      	bne.n	8004e9a <_malloc_r+0xe6>
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	1a6d      	subs	r5, r5, r1
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ffa7 	bl	8004d74 <sbrk_aligned>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d037      	beq.n	8004e9a <_malloc_r+0xe6>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	442b      	add	r3, r5
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	f8d8 3000 	ldr.w	r3, [r8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d038      	beq.n	8004eaa <_malloc_r+0xf6>
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	42a2      	cmp	r2, r4
 8004e3c:	d12b      	bne.n	8004e96 <_malloc_r+0xe2>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e00f      	b.n	8004e64 <_malloc_r+0xb0>
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	1b52      	subs	r2, r2, r5
 8004e48:	d41f      	bmi.n	8004e8a <_malloc_r+0xd6>
 8004e4a:	2a0b      	cmp	r2, #11
 8004e4c:	d917      	bls.n	8004e7e <_malloc_r+0xca>
 8004e4e:	1961      	adds	r1, r4, r5
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	6025      	str	r5, [r4, #0]
 8004e54:	bf18      	it	ne
 8004e56:	6059      	strne	r1, [r3, #4]
 8004e58:	6863      	ldr	r3, [r4, #4]
 8004e5a:	bf08      	it	eq
 8004e5c:	f8c8 1000 	streq.w	r1, [r8]
 8004e60:	5162      	str	r2, [r4, r5]
 8004e62:	604b      	str	r3, [r1, #4]
 8004e64:	4638      	mov	r0, r7
 8004e66:	f104 060b 	add.w	r6, r4, #11
 8004e6a:	f000 f829 	bl	8004ec0 <__malloc_unlock>
 8004e6e:	f026 0607 	bic.w	r6, r6, #7
 8004e72:	1d23      	adds	r3, r4, #4
 8004e74:	1af2      	subs	r2, r6, r3
 8004e76:	d0ae      	beq.n	8004dd6 <_malloc_r+0x22>
 8004e78:	1b9b      	subs	r3, r3, r6
 8004e7a:	50a3      	str	r3, [r4, r2]
 8004e7c:	e7ab      	b.n	8004dd6 <_malloc_r+0x22>
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	6862      	ldr	r2, [r4, #4]
 8004e82:	d1dd      	bne.n	8004e40 <_malloc_r+0x8c>
 8004e84:	f8c8 2000 	str.w	r2, [r8]
 8004e88:	e7ec      	b.n	8004e64 <_malloc_r+0xb0>
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	6864      	ldr	r4, [r4, #4]
 8004e8e:	e7ac      	b.n	8004dea <_malloc_r+0x36>
 8004e90:	4634      	mov	r4, r6
 8004e92:	6876      	ldr	r6, [r6, #4]
 8004e94:	e7b4      	b.n	8004e00 <_malloc_r+0x4c>
 8004e96:	4613      	mov	r3, r2
 8004e98:	e7cc      	b.n	8004e34 <_malloc_r+0x80>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f000 f80e 	bl	8004ec0 <__malloc_unlock>
 8004ea4:	e797      	b.n	8004dd6 <_malloc_r+0x22>
 8004ea6:	6025      	str	r5, [r4, #0]
 8004ea8:	e7dc      	b.n	8004e64 <_malloc_r+0xb0>
 8004eaa:	605b      	str	r3, [r3, #4]
 8004eac:	deff      	udf	#255	; 0xff
 8004eae:	bf00      	nop
 8004eb0:	20000380 	.word	0x20000380

08004eb4 <__malloc_lock>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	; (8004ebc <__malloc_lock+0x8>)
 8004eb6:	f000 bdef 	b.w	8005a98 <__retarget_lock_acquire_recursive>
 8004eba:	bf00      	nop
 8004ebc:	200004c8 	.word	0x200004c8

08004ec0 <__malloc_unlock>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__malloc_unlock+0x8>)
 8004ec2:	f000 bdea 	b.w	8005a9a <__retarget_lock_release_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	200004c8 	.word	0x200004c8

08004ecc <__cvt>:
 8004ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	ec55 4b10 	vmov	r4, r5, d0
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	4619      	mov	r1, r3
 8004eda:	462b      	mov	r3, r5
 8004edc:	bfbb      	ittet	lt
 8004ede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ee2:	461d      	movlt	r5, r3
 8004ee4:	2300      	movge	r3, #0
 8004ee6:	232d      	movlt	r3, #45	; 0x2d
 8004ee8:	700b      	strb	r3, [r1, #0]
 8004eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ef0:	4691      	mov	r9, r2
 8004ef2:	f023 0820 	bic.w	r8, r3, #32
 8004ef6:	bfbc      	itt	lt
 8004ef8:	4622      	movlt	r2, r4
 8004efa:	4614      	movlt	r4, r2
 8004efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f00:	d005      	beq.n	8004f0e <__cvt+0x42>
 8004f02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f06:	d100      	bne.n	8004f0a <__cvt+0x3e>
 8004f08:	3601      	adds	r6, #1
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	e000      	b.n	8004f10 <__cvt+0x44>
 8004f0e:	2103      	movs	r1, #3
 8004f10:	ab03      	add	r3, sp, #12
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	ab02      	add	r3, sp, #8
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	ec45 4b10 	vmov	d0, r4, r5
 8004f1c:	4653      	mov	r3, sl
 8004f1e:	4632      	mov	r2, r6
 8004f20:	f000 fe46 	bl	8005bb0 <_dtoa_r>
 8004f24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f28:	4607      	mov	r7, r0
 8004f2a:	d102      	bne.n	8004f32 <__cvt+0x66>
 8004f2c:	f019 0f01 	tst.w	r9, #1
 8004f30:	d022      	beq.n	8004f78 <__cvt+0xac>
 8004f32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f36:	eb07 0906 	add.w	r9, r7, r6
 8004f3a:	d110      	bne.n	8004f5e <__cvt+0x92>
 8004f3c:	783b      	ldrb	r3, [r7, #0]
 8004f3e:	2b30      	cmp	r3, #48	; 0x30
 8004f40:	d10a      	bne.n	8004f58 <__cvt+0x8c>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fb fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f4e:	b918      	cbnz	r0, 8004f58 <__cvt+0x8c>
 8004f50:	f1c6 0601 	rsb	r6, r6, #1
 8004f54:	f8ca 6000 	str.w	r6, [sl]
 8004f58:	f8da 3000 	ldr.w	r3, [sl]
 8004f5c:	4499      	add	r9, r3
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2300      	movs	r3, #0
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f6a:	b108      	cbz	r0, 8004f70 <__cvt+0xa4>
 8004f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f70:	2230      	movs	r2, #48	; 0x30
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	454b      	cmp	r3, r9
 8004f76:	d307      	bcc.n	8004f88 <__cvt+0xbc>
 8004f78:	9b03      	ldr	r3, [sp, #12]
 8004f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f7c:	1bdb      	subs	r3, r3, r7
 8004f7e:	4638      	mov	r0, r7
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	b004      	add	sp, #16
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	1c59      	adds	r1, r3, #1
 8004f8a:	9103      	str	r1, [sp, #12]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e7f0      	b.n	8004f72 <__cvt+0xa6>

08004f90 <__exponent>:
 8004f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f92:	4603      	mov	r3, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	bfb8      	it	lt
 8004f98:	4249      	neglt	r1, r1
 8004f9a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f9e:	bfb4      	ite	lt
 8004fa0:	222d      	movlt	r2, #45	; 0x2d
 8004fa2:	222b      	movge	r2, #43	; 0x2b
 8004fa4:	2909      	cmp	r1, #9
 8004fa6:	7042      	strb	r2, [r0, #1]
 8004fa8:	dd2a      	ble.n	8005000 <__exponent+0x70>
 8004faa:	f10d 0207 	add.w	r2, sp, #7
 8004fae:	4617      	mov	r7, r2
 8004fb0:	260a      	movs	r6, #10
 8004fb2:	4694      	mov	ip, r2
 8004fb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fb8:	fb06 1415 	mls	r4, r6, r5, r1
 8004fbc:	3430      	adds	r4, #48	; 0x30
 8004fbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	2c63      	cmp	r4, #99	; 0x63
 8004fc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8004fca:	4629      	mov	r1, r5
 8004fcc:	dcf1      	bgt.n	8004fb2 <__exponent+0x22>
 8004fce:	3130      	adds	r1, #48	; 0x30
 8004fd0:	f1ac 0402 	sub.w	r4, ip, #2
 8004fd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fd8:	1c41      	adds	r1, r0, #1
 8004fda:	4622      	mov	r2, r4
 8004fdc:	42ba      	cmp	r2, r7
 8004fde:	d30a      	bcc.n	8004ff6 <__exponent+0x66>
 8004fe0:	f10d 0209 	add.w	r2, sp, #9
 8004fe4:	eba2 020c 	sub.w	r2, r2, ip
 8004fe8:	42bc      	cmp	r4, r7
 8004fea:	bf88      	it	hi
 8004fec:	2200      	movhi	r2, #0
 8004fee:	4413      	add	r3, r2
 8004ff0:	1a18      	subs	r0, r3, r0
 8004ff2:	b003      	add	sp, #12
 8004ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ffa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ffe:	e7ed      	b.n	8004fdc <__exponent+0x4c>
 8005000:	2330      	movs	r3, #48	; 0x30
 8005002:	3130      	adds	r1, #48	; 0x30
 8005004:	7083      	strb	r3, [r0, #2]
 8005006:	70c1      	strb	r1, [r0, #3]
 8005008:	1d03      	adds	r3, r0, #4
 800500a:	e7f1      	b.n	8004ff0 <__exponent+0x60>

0800500c <_printf_float>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	ed2d 8b02 	vpush	{d8}
 8005014:	b08d      	sub	sp, #52	; 0x34
 8005016:	460c      	mov	r4, r1
 8005018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800501c:	4616      	mov	r6, r2
 800501e:	461f      	mov	r7, r3
 8005020:	4605      	mov	r5, r0
 8005022:	f000 fcb5 	bl	8005990 <_localeconv_r>
 8005026:	f8d0 a000 	ldr.w	sl, [r0]
 800502a:	4650      	mov	r0, sl
 800502c:	f7fb f920 	bl	8000270 <strlen>
 8005030:	2300      	movs	r3, #0
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	9305      	str	r3, [sp, #20]
 8005038:	f8d8 3000 	ldr.w	r3, [r8]
 800503c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005040:	3307      	adds	r3, #7
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	f8c8 2000 	str.w	r2, [r8]
 800504e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	f8cd 8018 	str.w	r8, [sp, #24]
 800505c:	ee08 0a10 	vmov	s16, r0
 8005060:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005068:	4b9e      	ldr	r3, [pc, #632]	; (80052e4 <_printf_float+0x2d8>)
 800506a:	f04f 32ff 	mov.w	r2, #4294967295
 800506e:	f7fb fd5d 	bl	8000b2c <__aeabi_dcmpun>
 8005072:	bb88      	cbnz	r0, 80050d8 <_printf_float+0xcc>
 8005074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005078:	4b9a      	ldr	r3, [pc, #616]	; (80052e4 <_printf_float+0x2d8>)
 800507a:	f04f 32ff 	mov.w	r2, #4294967295
 800507e:	f7fb fd37 	bl	8000af0 <__aeabi_dcmple>
 8005082:	bb48      	cbnz	r0, 80050d8 <_printf_float+0xcc>
 8005084:	2200      	movs	r2, #0
 8005086:	2300      	movs	r3, #0
 8005088:	4640      	mov	r0, r8
 800508a:	4649      	mov	r1, r9
 800508c:	f7fb fd26 	bl	8000adc <__aeabi_dcmplt>
 8005090:	b110      	cbz	r0, 8005098 <_printf_float+0x8c>
 8005092:	232d      	movs	r3, #45	; 0x2d
 8005094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005098:	4a93      	ldr	r2, [pc, #588]	; (80052e8 <_printf_float+0x2dc>)
 800509a:	4b94      	ldr	r3, [pc, #592]	; (80052ec <_printf_float+0x2e0>)
 800509c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050a0:	bf94      	ite	ls
 80050a2:	4690      	movls	r8, r2
 80050a4:	4698      	movhi	r8, r3
 80050a6:	2303      	movs	r3, #3
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	9b05      	ldr	r3, [sp, #20]
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	f04f 0900 	mov.w	r9, #0
 80050b6:	9700      	str	r7, [sp, #0]
 80050b8:	4633      	mov	r3, r6
 80050ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80050bc:	4621      	mov	r1, r4
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 f9da 	bl	8005478 <_printf_common>
 80050c4:	3001      	adds	r0, #1
 80050c6:	f040 8090 	bne.w	80051ea <_printf_float+0x1de>
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	b00d      	add	sp, #52	; 0x34
 80050d0:	ecbd 8b02 	vpop	{d8}
 80050d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	4640      	mov	r0, r8
 80050de:	4649      	mov	r1, r9
 80050e0:	f7fb fd24 	bl	8000b2c <__aeabi_dcmpun>
 80050e4:	b140      	cbz	r0, 80050f8 <_printf_float+0xec>
 80050e6:	464b      	mov	r3, r9
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bfbc      	itt	lt
 80050ec:	232d      	movlt	r3, #45	; 0x2d
 80050ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050f2:	4a7f      	ldr	r2, [pc, #508]	; (80052f0 <_printf_float+0x2e4>)
 80050f4:	4b7f      	ldr	r3, [pc, #508]	; (80052f4 <_printf_float+0x2e8>)
 80050f6:	e7d1      	b.n	800509c <_printf_float+0x90>
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050fe:	9206      	str	r2, [sp, #24]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	d13f      	bne.n	8005184 <_printf_float+0x178>
 8005104:	2306      	movs	r3, #6
 8005106:	6063      	str	r3, [r4, #4]
 8005108:	9b05      	ldr	r3, [sp, #20]
 800510a:	6861      	ldr	r1, [r4, #4]
 800510c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005110:	2300      	movs	r3, #0
 8005112:	9303      	str	r3, [sp, #12]
 8005114:	ab0a      	add	r3, sp, #40	; 0x28
 8005116:	e9cd b301 	strd	fp, r3, [sp, #4]
 800511a:	ab09      	add	r3, sp, #36	; 0x24
 800511c:	ec49 8b10 	vmov	d0, r8, r9
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6022      	str	r2, [r4, #0]
 8005124:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005128:	4628      	mov	r0, r5
 800512a:	f7ff fecf 	bl	8004ecc <__cvt>
 800512e:	9b06      	ldr	r3, [sp, #24]
 8005130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005132:	2b47      	cmp	r3, #71	; 0x47
 8005134:	4680      	mov	r8, r0
 8005136:	d108      	bne.n	800514a <_printf_float+0x13e>
 8005138:	1cc8      	adds	r0, r1, #3
 800513a:	db02      	blt.n	8005142 <_printf_float+0x136>
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	4299      	cmp	r1, r3
 8005140:	dd41      	ble.n	80051c6 <_printf_float+0x1ba>
 8005142:	f1ab 0302 	sub.w	r3, fp, #2
 8005146:	fa5f fb83 	uxtb.w	fp, r3
 800514a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800514e:	d820      	bhi.n	8005192 <_printf_float+0x186>
 8005150:	3901      	subs	r1, #1
 8005152:	465a      	mov	r2, fp
 8005154:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005158:	9109      	str	r1, [sp, #36]	; 0x24
 800515a:	f7ff ff19 	bl	8004f90 <__exponent>
 800515e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005160:	1813      	adds	r3, r2, r0
 8005162:	2a01      	cmp	r2, #1
 8005164:	4681      	mov	r9, r0
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	dc02      	bgt.n	8005170 <_printf_float+0x164>
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	07d2      	lsls	r2, r2, #31
 800516e:	d501      	bpl.n	8005174 <_printf_float+0x168>
 8005170:	3301      	adds	r3, #1
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005178:	2b00      	cmp	r3, #0
 800517a:	d09c      	beq.n	80050b6 <_printf_float+0xaa>
 800517c:	232d      	movs	r3, #45	; 0x2d
 800517e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005182:	e798      	b.n	80050b6 <_printf_float+0xaa>
 8005184:	9a06      	ldr	r2, [sp, #24]
 8005186:	2a47      	cmp	r2, #71	; 0x47
 8005188:	d1be      	bne.n	8005108 <_printf_float+0xfc>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1bc      	bne.n	8005108 <_printf_float+0xfc>
 800518e:	2301      	movs	r3, #1
 8005190:	e7b9      	b.n	8005106 <_printf_float+0xfa>
 8005192:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005196:	d118      	bne.n	80051ca <_printf_float+0x1be>
 8005198:	2900      	cmp	r1, #0
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	dd0b      	ble.n	80051b6 <_printf_float+0x1aa>
 800519e:	6121      	str	r1, [r4, #16]
 80051a0:	b913      	cbnz	r3, 80051a8 <_printf_float+0x19c>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	07d0      	lsls	r0, r2, #31
 80051a6:	d502      	bpl.n	80051ae <_printf_float+0x1a2>
 80051a8:	3301      	adds	r3, #1
 80051aa:	440b      	add	r3, r1
 80051ac:	6123      	str	r3, [r4, #16]
 80051ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80051b0:	f04f 0900 	mov.w	r9, #0
 80051b4:	e7de      	b.n	8005174 <_printf_float+0x168>
 80051b6:	b913      	cbnz	r3, 80051be <_printf_float+0x1b2>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	07d2      	lsls	r2, r2, #31
 80051bc:	d501      	bpl.n	80051c2 <_printf_float+0x1b6>
 80051be:	3302      	adds	r3, #2
 80051c0:	e7f4      	b.n	80051ac <_printf_float+0x1a0>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7f2      	b.n	80051ac <_printf_float+0x1a0>
 80051c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051cc:	4299      	cmp	r1, r3
 80051ce:	db05      	blt.n	80051dc <_printf_float+0x1d0>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	6121      	str	r1, [r4, #16]
 80051d4:	07d8      	lsls	r0, r3, #31
 80051d6:	d5ea      	bpl.n	80051ae <_printf_float+0x1a2>
 80051d8:	1c4b      	adds	r3, r1, #1
 80051da:	e7e7      	b.n	80051ac <_printf_float+0x1a0>
 80051dc:	2900      	cmp	r1, #0
 80051de:	bfd4      	ite	le
 80051e0:	f1c1 0202 	rsble	r2, r1, #2
 80051e4:	2201      	movgt	r2, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	e7e0      	b.n	80051ac <_printf_float+0x1a0>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	055a      	lsls	r2, r3, #21
 80051ee:	d407      	bmi.n	8005200 <_printf_float+0x1f4>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	4642      	mov	r2, r8
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	d12c      	bne.n	8005258 <_printf_float+0x24c>
 80051fe:	e764      	b.n	80050ca <_printf_float+0xbe>
 8005200:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005204:	f240 80e0 	bls.w	80053c8 <_printf_float+0x3bc>
 8005208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800520c:	2200      	movs	r2, #0
 800520e:	2300      	movs	r3, #0
 8005210:	f7fb fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005214:	2800      	cmp	r0, #0
 8005216:	d034      	beq.n	8005282 <_printf_float+0x276>
 8005218:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <_printf_float+0x2ec>)
 800521a:	2301      	movs	r3, #1
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	47b8      	blx	r7
 8005222:	3001      	adds	r0, #1
 8005224:	f43f af51 	beq.w	80050ca <_printf_float+0xbe>
 8005228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800522c:	429a      	cmp	r2, r3
 800522e:	db02      	blt.n	8005236 <_printf_float+0x22a>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	07d8      	lsls	r0, r3, #31
 8005234:	d510      	bpl.n	8005258 <_printf_float+0x24c>
 8005236:	ee18 3a10 	vmov	r3, s16
 800523a:	4652      	mov	r2, sl
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f af41 	beq.w	80050ca <_printf_float+0xbe>
 8005248:	f04f 0800 	mov.w	r8, #0
 800524c:	f104 091a 	add.w	r9, r4, #26
 8005250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	4543      	cmp	r3, r8
 8005256:	dc09      	bgt.n	800526c <_printf_float+0x260>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	079b      	lsls	r3, r3, #30
 800525c:	f100 8107 	bmi.w	800546e <_printf_float+0x462>
 8005260:	68e0      	ldr	r0, [r4, #12]
 8005262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005264:	4298      	cmp	r0, r3
 8005266:	bfb8      	it	lt
 8005268:	4618      	movlt	r0, r3
 800526a:	e730      	b.n	80050ce <_printf_float+0xc2>
 800526c:	2301      	movs	r3, #1
 800526e:	464a      	mov	r2, r9
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f af27 	beq.w	80050ca <_printf_float+0xbe>
 800527c:	f108 0801 	add.w	r8, r8, #1
 8005280:	e7e6      	b.n	8005250 <_printf_float+0x244>
 8005282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	dc39      	bgt.n	80052fc <_printf_float+0x2f0>
 8005288:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <_printf_float+0x2ec>)
 800528a:	2301      	movs	r3, #1
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f af19 	beq.w	80050ca <_printf_float+0xbe>
 8005298:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800529c:	4313      	orrs	r3, r2
 800529e:	d102      	bne.n	80052a6 <_printf_float+0x29a>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	07d9      	lsls	r1, r3, #31
 80052a4:	d5d8      	bpl.n	8005258 <_printf_float+0x24c>
 80052a6:	ee18 3a10 	vmov	r3, s16
 80052aa:	4652      	mov	r2, sl
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	f43f af09 	beq.w	80050ca <_printf_float+0xbe>
 80052b8:	f04f 0900 	mov.w	r9, #0
 80052bc:	f104 0a1a 	add.w	sl, r4, #26
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	425b      	negs	r3, r3
 80052c4:	454b      	cmp	r3, r9
 80052c6:	dc01      	bgt.n	80052cc <_printf_float+0x2c0>
 80052c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ca:	e792      	b.n	80051f2 <_printf_float+0x1e6>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4652      	mov	r2, sl
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f aef7 	beq.w	80050ca <_printf_float+0xbe>
 80052dc:	f109 0901 	add.w	r9, r9, #1
 80052e0:	e7ee      	b.n	80052c0 <_printf_float+0x2b4>
 80052e2:	bf00      	nop
 80052e4:	7fefffff 	.word	0x7fefffff
 80052e8:	08007700 	.word	0x08007700
 80052ec:	08007704 	.word	0x08007704
 80052f0:	08007708 	.word	0x08007708
 80052f4:	0800770c 	.word	0x0800770c
 80052f8:	08007710 	.word	0x08007710
 80052fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005300:	429a      	cmp	r2, r3
 8005302:	bfa8      	it	ge
 8005304:	461a      	movge	r2, r3
 8005306:	2a00      	cmp	r2, #0
 8005308:	4691      	mov	r9, r2
 800530a:	dc37      	bgt.n	800537c <_printf_float+0x370>
 800530c:	f04f 0b00 	mov.w	fp, #0
 8005310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005314:	f104 021a 	add.w	r2, r4, #26
 8005318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	eba3 0309 	sub.w	r3, r3, r9
 8005320:	455b      	cmp	r3, fp
 8005322:	dc33      	bgt.n	800538c <_printf_float+0x380>
 8005324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005328:	429a      	cmp	r2, r3
 800532a:	db3b      	blt.n	80053a4 <_printf_float+0x398>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07da      	lsls	r2, r3, #31
 8005330:	d438      	bmi.n	80053a4 <_printf_float+0x398>
 8005332:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005336:	eba2 0903 	sub.w	r9, r2, r3
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	4591      	cmp	r9, r2
 8005340:	bfa8      	it	ge
 8005342:	4691      	movge	r9, r2
 8005344:	f1b9 0f00 	cmp.w	r9, #0
 8005348:	dc35      	bgt.n	80053b6 <_printf_float+0x3aa>
 800534a:	f04f 0800 	mov.w	r8, #0
 800534e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005352:	f104 0a1a 	add.w	sl, r4, #26
 8005356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	eba3 0309 	sub.w	r3, r3, r9
 8005360:	4543      	cmp	r3, r8
 8005362:	f77f af79 	ble.w	8005258 <_printf_float+0x24c>
 8005366:	2301      	movs	r3, #1
 8005368:	4652      	mov	r2, sl
 800536a:	4631      	mov	r1, r6
 800536c:	4628      	mov	r0, r5
 800536e:	47b8      	blx	r7
 8005370:	3001      	adds	r0, #1
 8005372:	f43f aeaa 	beq.w	80050ca <_printf_float+0xbe>
 8005376:	f108 0801 	add.w	r8, r8, #1
 800537a:	e7ec      	b.n	8005356 <_printf_float+0x34a>
 800537c:	4613      	mov	r3, r2
 800537e:	4631      	mov	r1, r6
 8005380:	4642      	mov	r2, r8
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d1c0      	bne.n	800530c <_printf_float+0x300>
 800538a:	e69e      	b.n	80050ca <_printf_float+0xbe>
 800538c:	2301      	movs	r3, #1
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	9205      	str	r2, [sp, #20]
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f ae97 	beq.w	80050ca <_printf_float+0xbe>
 800539c:	9a05      	ldr	r2, [sp, #20]
 800539e:	f10b 0b01 	add.w	fp, fp, #1
 80053a2:	e7b9      	b.n	8005318 <_printf_float+0x30c>
 80053a4:	ee18 3a10 	vmov	r3, s16
 80053a8:	4652      	mov	r2, sl
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	d1be      	bne.n	8005332 <_printf_float+0x326>
 80053b4:	e689      	b.n	80050ca <_printf_float+0xbe>
 80053b6:	9a05      	ldr	r2, [sp, #20]
 80053b8:	464b      	mov	r3, r9
 80053ba:	4442      	add	r2, r8
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	d1c1      	bne.n	800534a <_printf_float+0x33e>
 80053c6:	e680      	b.n	80050ca <_printf_float+0xbe>
 80053c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ca:	2a01      	cmp	r2, #1
 80053cc:	dc01      	bgt.n	80053d2 <_printf_float+0x3c6>
 80053ce:	07db      	lsls	r3, r3, #31
 80053d0:	d53a      	bpl.n	8005448 <_printf_float+0x43c>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4642      	mov	r2, r8
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae74 	beq.w	80050ca <_printf_float+0xbe>
 80053e2:	ee18 3a10 	vmov	r3, s16
 80053e6:	4652      	mov	r2, sl
 80053e8:	4631      	mov	r1, r6
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b8      	blx	r7
 80053ee:	3001      	adds	r0, #1
 80053f0:	f43f ae6b 	beq.w	80050ca <_printf_float+0xbe>
 80053f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005400:	f7fb fb62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005404:	b9d8      	cbnz	r0, 800543e <_printf_float+0x432>
 8005406:	f10a 33ff 	add.w	r3, sl, #4294967295
 800540a:	f108 0201 	add.w	r2, r8, #1
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	d10e      	bne.n	8005436 <_printf_float+0x42a>
 8005418:	e657      	b.n	80050ca <_printf_float+0xbe>
 800541a:	2301      	movs	r3, #1
 800541c:	4652      	mov	r2, sl
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae50 	beq.w	80050ca <_printf_float+0xbe>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005430:	3b01      	subs	r3, #1
 8005432:	4543      	cmp	r3, r8
 8005434:	dcf1      	bgt.n	800541a <_printf_float+0x40e>
 8005436:	464b      	mov	r3, r9
 8005438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800543c:	e6da      	b.n	80051f4 <_printf_float+0x1e8>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	f104 0a1a 	add.w	sl, r4, #26
 8005446:	e7f2      	b.n	800542e <_printf_float+0x422>
 8005448:	2301      	movs	r3, #1
 800544a:	4642      	mov	r2, r8
 800544c:	e7df      	b.n	800540e <_printf_float+0x402>
 800544e:	2301      	movs	r3, #1
 8005450:	464a      	mov	r2, r9
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f ae36 	beq.w	80050ca <_printf_float+0xbe>
 800545e:	f108 0801 	add.w	r8, r8, #1
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005466:	1a5b      	subs	r3, r3, r1
 8005468:	4543      	cmp	r3, r8
 800546a:	dcf0      	bgt.n	800544e <_printf_float+0x442>
 800546c:	e6f8      	b.n	8005260 <_printf_float+0x254>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	f104 0919 	add.w	r9, r4, #25
 8005476:	e7f4      	b.n	8005462 <_printf_float+0x456>

08005478 <_printf_common>:
 8005478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	4616      	mov	r6, r2
 800547e:	4699      	mov	r9, r3
 8005480:	688a      	ldr	r2, [r1, #8]
 8005482:	690b      	ldr	r3, [r1, #16]
 8005484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005488:	4293      	cmp	r3, r2
 800548a:	bfb8      	it	lt
 800548c:	4613      	movlt	r3, r2
 800548e:	6033      	str	r3, [r6, #0]
 8005490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005494:	4607      	mov	r7, r0
 8005496:	460c      	mov	r4, r1
 8005498:	b10a      	cbz	r2, 800549e <_printf_common+0x26>
 800549a:	3301      	adds	r3, #1
 800549c:	6033      	str	r3, [r6, #0]
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	0699      	lsls	r1, r3, #26
 80054a2:	bf42      	ittt	mi
 80054a4:	6833      	ldrmi	r3, [r6, #0]
 80054a6:	3302      	addmi	r3, #2
 80054a8:	6033      	strmi	r3, [r6, #0]
 80054aa:	6825      	ldr	r5, [r4, #0]
 80054ac:	f015 0506 	ands.w	r5, r5, #6
 80054b0:	d106      	bne.n	80054c0 <_printf_common+0x48>
 80054b2:	f104 0a19 	add.w	sl, r4, #25
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	6832      	ldr	r2, [r6, #0]
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	42ab      	cmp	r3, r5
 80054be:	dc26      	bgt.n	800550e <_printf_common+0x96>
 80054c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054c4:	1e13      	subs	r3, r2, #0
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	bf18      	it	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	0692      	lsls	r2, r2, #26
 80054ce:	d42b      	bmi.n	8005528 <_printf_common+0xb0>
 80054d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d4:	4649      	mov	r1, r9
 80054d6:	4638      	mov	r0, r7
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d01e      	beq.n	800551c <_printf_common+0xa4>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	6922      	ldr	r2, [r4, #16]
 80054e2:	f003 0306 	and.w	r3, r3, #6
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	bf02      	ittt	eq
 80054ea:	68e5      	ldreq	r5, [r4, #12]
 80054ec:	6833      	ldreq	r3, [r6, #0]
 80054ee:	1aed      	subeq	r5, r5, r3
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	bf0c      	ite	eq
 80054f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f8:	2500      	movne	r5, #0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bfc4      	itt	gt
 80054fe:	1a9b      	subgt	r3, r3, r2
 8005500:	18ed      	addgt	r5, r5, r3
 8005502:	2600      	movs	r6, #0
 8005504:	341a      	adds	r4, #26
 8005506:	42b5      	cmp	r5, r6
 8005508:	d11a      	bne.n	8005540 <_printf_common+0xc8>
 800550a:	2000      	movs	r0, #0
 800550c:	e008      	b.n	8005520 <_printf_common+0xa8>
 800550e:	2301      	movs	r3, #1
 8005510:	4652      	mov	r2, sl
 8005512:	4649      	mov	r1, r9
 8005514:	4638      	mov	r0, r7
 8005516:	47c0      	blx	r8
 8005518:	3001      	adds	r0, #1
 800551a:	d103      	bne.n	8005524 <_printf_common+0xac>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	3501      	adds	r5, #1
 8005526:	e7c6      	b.n	80054b6 <_printf_common+0x3e>
 8005528:	18e1      	adds	r1, r4, r3
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	2030      	movs	r0, #48	; 0x30
 800552e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005532:	4422      	add	r2, r4
 8005534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800553c:	3302      	adds	r3, #2
 800553e:	e7c7      	b.n	80054d0 <_printf_common+0x58>
 8005540:	2301      	movs	r3, #1
 8005542:	4622      	mov	r2, r4
 8005544:	4649      	mov	r1, r9
 8005546:	4638      	mov	r0, r7
 8005548:	47c0      	blx	r8
 800554a:	3001      	adds	r0, #1
 800554c:	d0e6      	beq.n	800551c <_printf_common+0xa4>
 800554e:	3601      	adds	r6, #1
 8005550:	e7d9      	b.n	8005506 <_printf_common+0x8e>
	...

08005554 <_printf_i>:
 8005554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	7e0f      	ldrb	r7, [r1, #24]
 800555a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800555c:	2f78      	cmp	r7, #120	; 0x78
 800555e:	4691      	mov	r9, r2
 8005560:	4680      	mov	r8, r0
 8005562:	460c      	mov	r4, r1
 8005564:	469a      	mov	sl, r3
 8005566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800556a:	d807      	bhi.n	800557c <_printf_i+0x28>
 800556c:	2f62      	cmp	r7, #98	; 0x62
 800556e:	d80a      	bhi.n	8005586 <_printf_i+0x32>
 8005570:	2f00      	cmp	r7, #0
 8005572:	f000 80d4 	beq.w	800571e <_printf_i+0x1ca>
 8005576:	2f58      	cmp	r7, #88	; 0x58
 8005578:	f000 80c0 	beq.w	80056fc <_printf_i+0x1a8>
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005584:	e03a      	b.n	80055fc <_printf_i+0xa8>
 8005586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800558a:	2b15      	cmp	r3, #21
 800558c:	d8f6      	bhi.n	800557c <_printf_i+0x28>
 800558e:	a101      	add	r1, pc, #4	; (adr r1, 8005594 <_printf_i+0x40>)
 8005590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005594:	080055ed 	.word	0x080055ed
 8005598:	08005601 	.word	0x08005601
 800559c:	0800557d 	.word	0x0800557d
 80055a0:	0800557d 	.word	0x0800557d
 80055a4:	0800557d 	.word	0x0800557d
 80055a8:	0800557d 	.word	0x0800557d
 80055ac:	08005601 	.word	0x08005601
 80055b0:	0800557d 	.word	0x0800557d
 80055b4:	0800557d 	.word	0x0800557d
 80055b8:	0800557d 	.word	0x0800557d
 80055bc:	0800557d 	.word	0x0800557d
 80055c0:	08005705 	.word	0x08005705
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	080056bf 	.word	0x080056bf
 80055cc:	0800557d 	.word	0x0800557d
 80055d0:	0800557d 	.word	0x0800557d
 80055d4:	08005727 	.word	0x08005727
 80055d8:	0800557d 	.word	0x0800557d
 80055dc:	0800562d 	.word	0x0800562d
 80055e0:	0800557d 	.word	0x0800557d
 80055e4:	0800557d 	.word	0x0800557d
 80055e8:	080056c7 	.word	0x080056c7
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	602a      	str	r2, [r5, #0]
 80055f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e09f      	b.n	8005740 <_printf_i+0x1ec>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	0607      	lsls	r7, r0, #24
 8005606:	f103 0104 	add.w	r1, r3, #4
 800560a:	6029      	str	r1, [r5, #0]
 800560c:	d501      	bpl.n	8005612 <_printf_i+0xbe>
 800560e:	681e      	ldr	r6, [r3, #0]
 8005610:	e003      	b.n	800561a <_printf_i+0xc6>
 8005612:	0646      	lsls	r6, r0, #25
 8005614:	d5fb      	bpl.n	800560e <_printf_i+0xba>
 8005616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800561a:	2e00      	cmp	r6, #0
 800561c:	da03      	bge.n	8005626 <_printf_i+0xd2>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	4276      	negs	r6, r6
 8005622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005626:	485a      	ldr	r0, [pc, #360]	; (8005790 <_printf_i+0x23c>)
 8005628:	230a      	movs	r3, #10
 800562a:	e012      	b.n	8005652 <_printf_i+0xfe>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	6029      	str	r1, [r5, #0]
 8005634:	0605      	lsls	r5, r0, #24
 8005636:	d501      	bpl.n	800563c <_printf_i+0xe8>
 8005638:	681e      	ldr	r6, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0xee>
 800563c:	0641      	lsls	r1, r0, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0xe4>
 8005640:	881e      	ldrh	r6, [r3, #0]
 8005642:	4853      	ldr	r0, [pc, #332]	; (8005790 <_printf_i+0x23c>)
 8005644:	2f6f      	cmp	r7, #111	; 0x6f
 8005646:	bf0c      	ite	eq
 8005648:	2308      	moveq	r3, #8
 800564a:	230a      	movne	r3, #10
 800564c:	2100      	movs	r1, #0
 800564e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005652:	6865      	ldr	r5, [r4, #4]
 8005654:	60a5      	str	r5, [r4, #8]
 8005656:	2d00      	cmp	r5, #0
 8005658:	bfa2      	ittt	ge
 800565a:	6821      	ldrge	r1, [r4, #0]
 800565c:	f021 0104 	bicge.w	r1, r1, #4
 8005660:	6021      	strge	r1, [r4, #0]
 8005662:	b90e      	cbnz	r6, 8005668 <_printf_i+0x114>
 8005664:	2d00      	cmp	r5, #0
 8005666:	d04b      	beq.n	8005700 <_printf_i+0x1ac>
 8005668:	4615      	mov	r5, r2
 800566a:	fbb6 f1f3 	udiv	r1, r6, r3
 800566e:	fb03 6711 	mls	r7, r3, r1, r6
 8005672:	5dc7      	ldrb	r7, [r0, r7]
 8005674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005678:	4637      	mov	r7, r6
 800567a:	42bb      	cmp	r3, r7
 800567c:	460e      	mov	r6, r1
 800567e:	d9f4      	bls.n	800566a <_printf_i+0x116>
 8005680:	2b08      	cmp	r3, #8
 8005682:	d10b      	bne.n	800569c <_printf_i+0x148>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07de      	lsls	r6, r3, #31
 8005688:	d508      	bpl.n	800569c <_printf_i+0x148>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	6861      	ldr	r1, [r4, #4]
 800568e:	4299      	cmp	r1, r3
 8005690:	bfde      	ittt	le
 8005692:	2330      	movle	r3, #48	; 0x30
 8005694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800569c:	1b52      	subs	r2, r2, r5
 800569e:	6122      	str	r2, [r4, #16]
 80056a0:	f8cd a000 	str.w	sl, [sp]
 80056a4:	464b      	mov	r3, r9
 80056a6:	aa03      	add	r2, sp, #12
 80056a8:	4621      	mov	r1, r4
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff fee4 	bl	8005478 <_printf_common>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d14a      	bne.n	800574a <_printf_i+0x1f6>
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	b004      	add	sp, #16
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f043 0320 	orr.w	r3, r3, #32
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	4833      	ldr	r0, [pc, #204]	; (8005794 <_printf_i+0x240>)
 80056c8:	2778      	movs	r7, #120	; 0x78
 80056ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	6829      	ldr	r1, [r5, #0]
 80056d2:	061f      	lsls	r7, r3, #24
 80056d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80056d8:	d402      	bmi.n	80056e0 <_printf_i+0x18c>
 80056da:	065f      	lsls	r7, r3, #25
 80056dc:	bf48      	it	mi
 80056de:	b2b6      	uxthmi	r6, r6
 80056e0:	07df      	lsls	r7, r3, #31
 80056e2:	bf48      	it	mi
 80056e4:	f043 0320 	orrmi.w	r3, r3, #32
 80056e8:	6029      	str	r1, [r5, #0]
 80056ea:	bf48      	it	mi
 80056ec:	6023      	strmi	r3, [r4, #0]
 80056ee:	b91e      	cbnz	r6, 80056f8 <_printf_i+0x1a4>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	f023 0320 	bic.w	r3, r3, #32
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	2310      	movs	r3, #16
 80056fa:	e7a7      	b.n	800564c <_printf_i+0xf8>
 80056fc:	4824      	ldr	r0, [pc, #144]	; (8005790 <_printf_i+0x23c>)
 80056fe:	e7e4      	b.n	80056ca <_printf_i+0x176>
 8005700:	4615      	mov	r5, r2
 8005702:	e7bd      	b.n	8005680 <_printf_i+0x12c>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	6826      	ldr	r6, [r4, #0]
 8005708:	6961      	ldr	r1, [r4, #20]
 800570a:	1d18      	adds	r0, r3, #4
 800570c:	6028      	str	r0, [r5, #0]
 800570e:	0635      	lsls	r5, r6, #24
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	d501      	bpl.n	8005718 <_printf_i+0x1c4>
 8005714:	6019      	str	r1, [r3, #0]
 8005716:	e002      	b.n	800571e <_printf_i+0x1ca>
 8005718:	0670      	lsls	r0, r6, #25
 800571a:	d5fb      	bpl.n	8005714 <_printf_i+0x1c0>
 800571c:	8019      	strh	r1, [r3, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	4615      	mov	r5, r2
 8005724:	e7bc      	b.n	80056a0 <_printf_i+0x14c>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	1d1a      	adds	r2, r3, #4
 800572a:	602a      	str	r2, [r5, #0]
 800572c:	681d      	ldr	r5, [r3, #0]
 800572e:	6862      	ldr	r2, [r4, #4]
 8005730:	2100      	movs	r1, #0
 8005732:	4628      	mov	r0, r5
 8005734:	f7fa fd4c 	bl	80001d0 <memchr>
 8005738:	b108      	cbz	r0, 800573e <_printf_i+0x1ea>
 800573a:	1b40      	subs	r0, r0, r5
 800573c:	6060      	str	r0, [r4, #4]
 800573e:	6863      	ldr	r3, [r4, #4]
 8005740:	6123      	str	r3, [r4, #16]
 8005742:	2300      	movs	r3, #0
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005748:	e7aa      	b.n	80056a0 <_printf_i+0x14c>
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	462a      	mov	r2, r5
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	47d0      	blx	sl
 8005754:	3001      	adds	r0, #1
 8005756:	d0ad      	beq.n	80056b4 <_printf_i+0x160>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	079b      	lsls	r3, r3, #30
 800575c:	d413      	bmi.n	8005786 <_printf_i+0x232>
 800575e:	68e0      	ldr	r0, [r4, #12]
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	4298      	cmp	r0, r3
 8005764:	bfb8      	it	lt
 8005766:	4618      	movlt	r0, r3
 8005768:	e7a6      	b.n	80056b8 <_printf_i+0x164>
 800576a:	2301      	movs	r3, #1
 800576c:	4632      	mov	r2, r6
 800576e:	4649      	mov	r1, r9
 8005770:	4640      	mov	r0, r8
 8005772:	47d0      	blx	sl
 8005774:	3001      	adds	r0, #1
 8005776:	d09d      	beq.n	80056b4 <_printf_i+0x160>
 8005778:	3501      	adds	r5, #1
 800577a:	68e3      	ldr	r3, [r4, #12]
 800577c:	9903      	ldr	r1, [sp, #12]
 800577e:	1a5b      	subs	r3, r3, r1
 8005780:	42ab      	cmp	r3, r5
 8005782:	dcf2      	bgt.n	800576a <_printf_i+0x216>
 8005784:	e7eb      	b.n	800575e <_printf_i+0x20a>
 8005786:	2500      	movs	r5, #0
 8005788:	f104 0619 	add.w	r6, r4, #25
 800578c:	e7f5      	b.n	800577a <_printf_i+0x226>
 800578e:	bf00      	nop
 8005790:	08007712 	.word	0x08007712
 8005794:	08007723 	.word	0x08007723

08005798 <std>:
 8005798:	2300      	movs	r3, #0
 800579a:	b510      	push	{r4, lr}
 800579c:	4604      	mov	r4, r0
 800579e:	e9c0 3300 	strd	r3, r3, [r0]
 80057a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057a6:	6083      	str	r3, [r0, #8]
 80057a8:	8181      	strh	r1, [r0, #12]
 80057aa:	6643      	str	r3, [r0, #100]	; 0x64
 80057ac:	81c2      	strh	r2, [r0, #14]
 80057ae:	6183      	str	r3, [r0, #24]
 80057b0:	4619      	mov	r1, r3
 80057b2:	2208      	movs	r2, #8
 80057b4:	305c      	adds	r0, #92	; 0x5c
 80057b6:	f000 f8e2 	bl	800597e <memset>
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <std+0x38>)
 80057bc:	6263      	str	r3, [r4, #36]	; 0x24
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <std+0x3c>)
 80057c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <std+0x40>)
 80057c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <std+0x44>)
 80057c8:	6224      	str	r4, [r4, #32]
 80057ca:	6323      	str	r3, [r4, #48]	; 0x30
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	080058f9 	.word	0x080058f9
 80057d4:	0800591b 	.word	0x0800591b
 80057d8:	08005953 	.word	0x08005953
 80057dc:	08005977 	.word	0x08005977

080057e0 <stdio_exit_handler>:
 80057e0:	4a02      	ldr	r2, [pc, #8]	; (80057ec <stdio_exit_handler+0xc>)
 80057e2:	4903      	ldr	r1, [pc, #12]	; (80057f0 <stdio_exit_handler+0x10>)
 80057e4:	4803      	ldr	r0, [pc, #12]	; (80057f4 <stdio_exit_handler+0x14>)
 80057e6:	f000 b869 	b.w	80058bc <_fwalk_sglue>
 80057ea:	bf00      	nop
 80057ec:	2000000c 	.word	0x2000000c
 80057f0:	08007041 	.word	0x08007041
 80057f4:	20000018 	.word	0x20000018

080057f8 <cleanup_stdio>:
 80057f8:	6841      	ldr	r1, [r0, #4]
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <cleanup_stdio+0x34>)
 80057fc:	4299      	cmp	r1, r3
 80057fe:	b510      	push	{r4, lr}
 8005800:	4604      	mov	r4, r0
 8005802:	d001      	beq.n	8005808 <cleanup_stdio+0x10>
 8005804:	f001 fc1c 	bl	8007040 <_fflush_r>
 8005808:	68a1      	ldr	r1, [r4, #8]
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <cleanup_stdio+0x38>)
 800580c:	4299      	cmp	r1, r3
 800580e:	d002      	beq.n	8005816 <cleanup_stdio+0x1e>
 8005810:	4620      	mov	r0, r4
 8005812:	f001 fc15 	bl	8007040 <_fflush_r>
 8005816:	68e1      	ldr	r1, [r4, #12]
 8005818:	4b06      	ldr	r3, [pc, #24]	; (8005834 <cleanup_stdio+0x3c>)
 800581a:	4299      	cmp	r1, r3
 800581c:	d004      	beq.n	8005828 <cleanup_stdio+0x30>
 800581e:	4620      	mov	r0, r4
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f001 bc0c 	b.w	8007040 <_fflush_r>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	20000388 	.word	0x20000388
 8005830:	200003f0 	.word	0x200003f0
 8005834:	20000458 	.word	0x20000458

08005838 <global_stdio_init.part.0>:
 8005838:	b510      	push	{r4, lr}
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <global_stdio_init.part.0+0x30>)
 800583c:	4c0b      	ldr	r4, [pc, #44]	; (800586c <global_stdio_init.part.0+0x34>)
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <global_stdio_init.part.0+0x38>)
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	4620      	mov	r0, r4
 8005844:	2200      	movs	r2, #0
 8005846:	2104      	movs	r1, #4
 8005848:	f7ff ffa6 	bl	8005798 <std>
 800584c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005850:	2201      	movs	r2, #1
 8005852:	2109      	movs	r1, #9
 8005854:	f7ff ffa0 	bl	8005798 <std>
 8005858:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800585c:	2202      	movs	r2, #2
 800585e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005862:	2112      	movs	r1, #18
 8005864:	f7ff bf98 	b.w	8005798 <std>
 8005868:	200004c0 	.word	0x200004c0
 800586c:	20000388 	.word	0x20000388
 8005870:	080057e1 	.word	0x080057e1

08005874 <__sfp_lock_acquire>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__sfp_lock_acquire+0x8>)
 8005876:	f000 b90f 	b.w	8005a98 <__retarget_lock_acquire_recursive>
 800587a:	bf00      	nop
 800587c:	200004c9 	.word	0x200004c9

08005880 <__sfp_lock_release>:
 8005880:	4801      	ldr	r0, [pc, #4]	; (8005888 <__sfp_lock_release+0x8>)
 8005882:	f000 b90a 	b.w	8005a9a <__retarget_lock_release_recursive>
 8005886:	bf00      	nop
 8005888:	200004c9 	.word	0x200004c9

0800588c <__sinit>:
 800588c:	b510      	push	{r4, lr}
 800588e:	4604      	mov	r4, r0
 8005890:	f7ff fff0 	bl	8005874 <__sfp_lock_acquire>
 8005894:	6a23      	ldr	r3, [r4, #32]
 8005896:	b11b      	cbz	r3, 80058a0 <__sinit+0x14>
 8005898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589c:	f7ff bff0 	b.w	8005880 <__sfp_lock_release>
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <__sinit+0x28>)
 80058a2:	6223      	str	r3, [r4, #32]
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <__sinit+0x2c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f5      	bne.n	8005898 <__sinit+0xc>
 80058ac:	f7ff ffc4 	bl	8005838 <global_stdio_init.part.0>
 80058b0:	e7f2      	b.n	8005898 <__sinit+0xc>
 80058b2:	bf00      	nop
 80058b4:	080057f9 	.word	0x080057f9
 80058b8:	200004c0 	.word	0x200004c0

080058bc <_fwalk_sglue>:
 80058bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c0:	4607      	mov	r7, r0
 80058c2:	4688      	mov	r8, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	2600      	movs	r6, #0
 80058c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058cc:	f1b9 0901 	subs.w	r9, r9, #1
 80058d0:	d505      	bpl.n	80058de <_fwalk_sglue+0x22>
 80058d2:	6824      	ldr	r4, [r4, #0]
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	d1f7      	bne.n	80058c8 <_fwalk_sglue+0xc>
 80058d8:	4630      	mov	r0, r6
 80058da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d907      	bls.n	80058f4 <_fwalk_sglue+0x38>
 80058e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058e8:	3301      	adds	r3, #1
 80058ea:	d003      	beq.n	80058f4 <_fwalk_sglue+0x38>
 80058ec:	4629      	mov	r1, r5
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	4306      	orrs	r6, r0
 80058f4:	3568      	adds	r5, #104	; 0x68
 80058f6:	e7e9      	b.n	80058cc <_fwalk_sglue+0x10>

080058f8 <__sread>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	460c      	mov	r4, r1
 80058fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005900:	f000 f86c 	bl	80059dc <_read_r>
 8005904:	2800      	cmp	r0, #0
 8005906:	bfab      	itete	ge
 8005908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800590a:	89a3      	ldrhlt	r3, [r4, #12]
 800590c:	181b      	addge	r3, r3, r0
 800590e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005912:	bfac      	ite	ge
 8005914:	6563      	strge	r3, [r4, #84]	; 0x54
 8005916:	81a3      	strhlt	r3, [r4, #12]
 8005918:	bd10      	pop	{r4, pc}

0800591a <__swrite>:
 800591a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591e:	461f      	mov	r7, r3
 8005920:	898b      	ldrh	r3, [r1, #12]
 8005922:	05db      	lsls	r3, r3, #23
 8005924:	4605      	mov	r5, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4616      	mov	r6, r2
 800592a:	d505      	bpl.n	8005938 <__swrite+0x1e>
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	2302      	movs	r3, #2
 8005932:	2200      	movs	r2, #0
 8005934:	f000 f840 	bl	80059b8 <_lseek_r>
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800593e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	4632      	mov	r2, r6
 8005946:	463b      	mov	r3, r7
 8005948:	4628      	mov	r0, r5
 800594a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594e:	f000 b867 	b.w	8005a20 <_write_r>

08005952 <__sseek>:
 8005952:	b510      	push	{r4, lr}
 8005954:	460c      	mov	r4, r1
 8005956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595a:	f000 f82d 	bl	80059b8 <_lseek_r>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	bf15      	itete	ne
 8005964:	6560      	strne	r0, [r4, #84]	; 0x54
 8005966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800596a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800596e:	81a3      	strheq	r3, [r4, #12]
 8005970:	bf18      	it	ne
 8005972:	81a3      	strhne	r3, [r4, #12]
 8005974:	bd10      	pop	{r4, pc}

08005976 <__sclose>:
 8005976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597a:	f000 b80d 	b.w	8005998 <_close_r>

0800597e <memset>:
 800597e:	4402      	add	r2, r0
 8005980:	4603      	mov	r3, r0
 8005982:	4293      	cmp	r3, r2
 8005984:	d100      	bne.n	8005988 <memset+0xa>
 8005986:	4770      	bx	lr
 8005988:	f803 1b01 	strb.w	r1, [r3], #1
 800598c:	e7f9      	b.n	8005982 <memset+0x4>
	...

08005990 <_localeconv_r>:
 8005990:	4800      	ldr	r0, [pc, #0]	; (8005994 <_localeconv_r+0x4>)
 8005992:	4770      	bx	lr
 8005994:	20000158 	.word	0x20000158

08005998 <_close_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_close_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb fe37 	bl	8001616 <_close>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_close_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_close_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	200004c4 	.word	0x200004c4

080059b8 <_lseek_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_lseek_r+0x20>)
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fb fe4c 	bl	8001664 <_lseek>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_lseek_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_lseek_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200004c4 	.word	0x200004c4

080059dc <_read_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d07      	ldr	r5, [pc, #28]	; (80059fc <_read_r+0x20>)
 80059e0:	4604      	mov	r4, r0
 80059e2:	4608      	mov	r0, r1
 80059e4:	4611      	mov	r1, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	602a      	str	r2, [r5, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f7fb fdda 	bl	80015a4 <_read>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_read_r+0x1e>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_read_r+0x1e>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200004c4 	.word	0x200004c4

08005a00 <_sbrk_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d06      	ldr	r5, [pc, #24]	; (8005a1c <_sbrk_r+0x1c>)
 8005a04:	2300      	movs	r3, #0
 8005a06:	4604      	mov	r4, r0
 8005a08:	4608      	mov	r0, r1
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	f7fb fe38 	bl	8001680 <_sbrk>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_sbrk_r+0x1a>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_sbrk_r+0x1a>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	200004c4 	.word	0x200004c4

08005a20 <_write_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	; (8005a40 <_write_r+0x20>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb fdd5 	bl	80015de <_write>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_write_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_write_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	200004c4 	.word	0x200004c4

08005a44 <__errno>:
 8005a44:	4b01      	ldr	r3, [pc, #4]	; (8005a4c <__errno+0x8>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000064 	.word	0x20000064

08005a50 <__libc_init_array>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4d0d      	ldr	r5, [pc, #52]	; (8005a88 <__libc_init_array+0x38>)
 8005a54:	4c0d      	ldr	r4, [pc, #52]	; (8005a8c <__libc_init_array+0x3c>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	42a6      	cmp	r6, r4
 8005a5e:	d109      	bne.n	8005a74 <__libc_init_array+0x24>
 8005a60:	4d0b      	ldr	r5, [pc, #44]	; (8005a90 <__libc_init_array+0x40>)
 8005a62:	4c0c      	ldr	r4, [pc, #48]	; (8005a94 <__libc_init_array+0x44>)
 8005a64:	f001 fe1a 	bl	800769c <_init>
 8005a68:	1b64      	subs	r4, r4, r5
 8005a6a:	10a4      	asrs	r4, r4, #2
 8005a6c:	2600      	movs	r6, #0
 8005a6e:	42a6      	cmp	r6, r4
 8005a70:	d105      	bne.n	8005a7e <__libc_init_array+0x2e>
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a78:	4798      	blx	r3
 8005a7a:	3601      	adds	r6, #1
 8005a7c:	e7ee      	b.n	8005a5c <__libc_init_array+0xc>
 8005a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a82:	4798      	blx	r3
 8005a84:	3601      	adds	r6, #1
 8005a86:	e7f2      	b.n	8005a6e <__libc_init_array+0x1e>
 8005a88:	08007a7c 	.word	0x08007a7c
 8005a8c:	08007a7c 	.word	0x08007a7c
 8005a90:	08007a7c 	.word	0x08007a7c
 8005a94:	08007a80 	.word	0x08007a80

08005a98 <__retarget_lock_acquire_recursive>:
 8005a98:	4770      	bx	lr

08005a9a <__retarget_lock_release_recursive>:
 8005a9a:	4770      	bx	lr

08005a9c <quorem>:
 8005a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	6903      	ldr	r3, [r0, #16]
 8005aa2:	690c      	ldr	r4, [r1, #16]
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	db7e      	blt.n	8005ba8 <quorem+0x10c>
 8005aaa:	3c01      	subs	r4, #1
 8005aac:	f101 0814 	add.w	r8, r1, #20
 8005ab0:	f100 0514 	add.w	r5, r0, #20
 8005ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005aca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ace:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ad2:	d331      	bcc.n	8005b38 <quorem+0x9c>
 8005ad4:	f04f 0e00 	mov.w	lr, #0
 8005ad8:	4640      	mov	r0, r8
 8005ada:	46ac      	mov	ip, r5
 8005adc:	46f2      	mov	sl, lr
 8005ade:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ae2:	b293      	uxth	r3, r2
 8005ae4:	fb06 e303 	mla	r3, r6, r3, lr
 8005ae8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aec:	0c1a      	lsrs	r2, r3, #16
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ebaa 0303 	sub.w	r3, sl, r3
 8005af4:	f8dc a000 	ldr.w	sl, [ip]
 8005af8:	fa13 f38a 	uxtah	r3, r3, sl
 8005afc:	fb06 220e 	mla	r2, r6, lr, r2
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	9b00      	ldr	r3, [sp, #0]
 8005b04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b08:	b292      	uxth	r2, r2
 8005b0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b12:	f8bd 3000 	ldrh.w	r3, [sp]
 8005b16:	4581      	cmp	r9, r0
 8005b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b1c:	f84c 3b04 	str.w	r3, [ip], #4
 8005b20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b24:	d2db      	bcs.n	8005ade <quorem+0x42>
 8005b26:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b2a:	b92b      	cbnz	r3, 8005b38 <quorem+0x9c>
 8005b2c:	9b01      	ldr	r3, [sp, #4]
 8005b2e:	3b04      	subs	r3, #4
 8005b30:	429d      	cmp	r5, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	d32c      	bcc.n	8005b90 <quorem+0xf4>
 8005b36:	613c      	str	r4, [r7, #16]
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f001 f8fb 	bl	8006d34 <__mcmp>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	db22      	blt.n	8005b88 <quorem+0xec>
 8005b42:	3601      	adds	r6, #1
 8005b44:	4629      	mov	r1, r5
 8005b46:	2000      	movs	r0, #0
 8005b48:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b4c:	f8d1 c000 	ldr.w	ip, [r1]
 8005b50:	b293      	uxth	r3, r2
 8005b52:	1ac3      	subs	r3, r0, r3
 8005b54:	0c12      	lsrs	r2, r2, #16
 8005b56:	fa13 f38c 	uxtah	r3, r3, ip
 8005b5a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b68:	45c1      	cmp	r9, r8
 8005b6a:	f841 3b04 	str.w	r3, [r1], #4
 8005b6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b72:	d2e9      	bcs.n	8005b48 <quorem+0xac>
 8005b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b7c:	b922      	cbnz	r2, 8005b88 <quorem+0xec>
 8005b7e:	3b04      	subs	r3, #4
 8005b80:	429d      	cmp	r5, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	d30a      	bcc.n	8005b9c <quorem+0x100>
 8005b86:	613c      	str	r4, [r7, #16]
 8005b88:	4630      	mov	r0, r6
 8005b8a:	b003      	add	sp, #12
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	3b04      	subs	r3, #4
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	d1ce      	bne.n	8005b36 <quorem+0x9a>
 8005b98:	3c01      	subs	r4, #1
 8005b9a:	e7c9      	b.n	8005b30 <quorem+0x94>
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d1f0      	bne.n	8005b86 <quorem+0xea>
 8005ba4:	3c01      	subs	r4, #1
 8005ba6:	e7eb      	b.n	8005b80 <quorem+0xe4>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7ee      	b.n	8005b8a <quorem+0xee>
 8005bac:	0000      	movs	r0, r0
	...

08005bb0 <_dtoa_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b04 	vpush	{d8-d9}
 8005bb8:	69c5      	ldr	r5, [r0, #28]
 8005bba:	b093      	sub	sp, #76	; 0x4c
 8005bbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bc0:	ec57 6b10 	vmov	r6, r7, d0
 8005bc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bc8:	9107      	str	r1, [sp, #28]
 8005bca:	4604      	mov	r4, r0
 8005bcc:	920a      	str	r2, [sp, #40]	; 0x28
 8005bce:	930d      	str	r3, [sp, #52]	; 0x34
 8005bd0:	b975      	cbnz	r5, 8005bf0 <_dtoa_r+0x40>
 8005bd2:	2010      	movs	r0, #16
 8005bd4:	f000 fe2a 	bl	800682c <malloc>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	61e0      	str	r0, [r4, #28]
 8005bdc:	b920      	cbnz	r0, 8005be8 <_dtoa_r+0x38>
 8005bde:	4bae      	ldr	r3, [pc, #696]	; (8005e98 <_dtoa_r+0x2e8>)
 8005be0:	21ef      	movs	r1, #239	; 0xef
 8005be2:	48ae      	ldr	r0, [pc, #696]	; (8005e9c <_dtoa_r+0x2ec>)
 8005be4:	f001 fa62 	bl	80070ac <__assert_func>
 8005be8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bec:	6005      	str	r5, [r0, #0]
 8005bee:	60c5      	str	r5, [r0, #12]
 8005bf0:	69e3      	ldr	r3, [r4, #28]
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	b151      	cbz	r1, 8005c0c <_dtoa_r+0x5c>
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	604a      	str	r2, [r1, #4]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4093      	lsls	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 fe5b 	bl	80068bc <_Bfree>
 8005c06:	69e3      	ldr	r3, [r4, #28]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	1e3b      	subs	r3, r7, #0
 8005c0e:	bfbb      	ittet	lt
 8005c10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	9303      	strlt	r3, [sp, #12]
 8005c16:	2300      	movge	r3, #0
 8005c18:	2201      	movlt	r2, #1
 8005c1a:	bfac      	ite	ge
 8005c1c:	f8c8 3000 	strge.w	r3, [r8]
 8005c20:	f8c8 2000 	strlt.w	r2, [r8]
 8005c24:	4b9e      	ldr	r3, [pc, #632]	; (8005ea0 <_dtoa_r+0x2f0>)
 8005c26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c2a:	ea33 0308 	bics.w	r3, r3, r8
 8005c2e:	d11b      	bne.n	8005c68 <_dtoa_r+0xb8>
 8005c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c32:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c3c:	4333      	orrs	r3, r6
 8005c3e:	f000 8593 	beq.w	8006768 <_dtoa_r+0xbb8>
 8005c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c44:	b963      	cbnz	r3, 8005c60 <_dtoa_r+0xb0>
 8005c46:	4b97      	ldr	r3, [pc, #604]	; (8005ea4 <_dtoa_r+0x2f4>)
 8005c48:	e027      	b.n	8005c9a <_dtoa_r+0xea>
 8005c4a:	4b97      	ldr	r3, [pc, #604]	; (8005ea8 <_dtoa_r+0x2f8>)
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	9800      	ldr	r0, [sp, #0]
 8005c56:	b013      	add	sp, #76	; 0x4c
 8005c58:	ecbd 8b04 	vpop	{d8-d9}
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c60:	4b90      	ldr	r3, [pc, #576]	; (8005ea4 <_dtoa_r+0x2f4>)
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	3303      	adds	r3, #3
 8005c66:	e7f3      	b.n	8005c50 <_dtoa_r+0xa0>
 8005c68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	ec51 0b17 	vmov	r0, r1, d7
 8005c72:	eeb0 8a47 	vmov.f32	s16, s14
 8005c76:	eef0 8a67 	vmov.f32	s17, s15
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f7fa ff24 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c80:	4681      	mov	r9, r0
 8005c82:	b160      	cbz	r0, 8005c9e <_dtoa_r+0xee>
 8005c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c86:	2301      	movs	r3, #1
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8568 	beq.w	8006762 <_dtoa_r+0xbb2>
 8005c92:	4b86      	ldr	r3, [pc, #536]	; (8005eac <_dtoa_r+0x2fc>)
 8005c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	e7da      	b.n	8005c54 <_dtoa_r+0xa4>
 8005c9e:	aa10      	add	r2, sp, #64	; 0x40
 8005ca0:	a911      	add	r1, sp, #68	; 0x44
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ca8:	eef0 0a68 	vmov.f32	s1, s17
 8005cac:	f001 f8e8 	bl	8006e80 <__d2b>
 8005cb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	d07f      	beq.n	8005dba <_dtoa_r+0x20a>
 8005cba:	ee18 3a90 	vmov	r3, s17
 8005cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005cc6:	ec51 0b18 	vmov	r0, r1, d8
 8005cca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	2200      	movs	r2, #0
 8005cda:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <_dtoa_r+0x300>)
 8005cdc:	f7fa fad4 	bl	8000288 <__aeabi_dsub>
 8005ce0:	a367      	add	r3, pc, #412	; (adr r3, 8005e80 <_dtoa_r+0x2d0>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fc87 	bl	80005f8 <__aeabi_dmul>
 8005cea:	a367      	add	r3, pc, #412	; (adr r3, 8005e88 <_dtoa_r+0x2d8>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa facc 	bl	800028c <__adddf3>
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	f7fa fc13 	bl	8000524 <__aeabi_i2d>
 8005cfe:	a364      	add	r3, pc, #400	; (adr r3, 8005e90 <_dtoa_r+0x2e0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fc78 	bl	80005f8 <__aeabi_dmul>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	4639      	mov	r1, r7
 8005d10:	f7fa fabc 	bl	800028c <__adddf3>
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	f7fa ff1e 	bl	8000b58 <__aeabi_d2iz>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4683      	mov	fp, r0
 8005d20:	2300      	movs	r3, #0
 8005d22:	4630      	mov	r0, r6
 8005d24:	4639      	mov	r1, r7
 8005d26:	f7fa fed9 	bl	8000adc <__aeabi_dcmplt>
 8005d2a:	b148      	cbz	r0, 8005d40 <_dtoa_r+0x190>
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	f7fa fbf9 	bl	8000524 <__aeabi_i2d>
 8005d32:	4632      	mov	r2, r6
 8005d34:	463b      	mov	r3, r7
 8005d36:	f7fa fec7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d3a:	b908      	cbnz	r0, 8005d40 <_dtoa_r+0x190>
 8005d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d40:	f1bb 0f16 	cmp.w	fp, #22
 8005d44:	d857      	bhi.n	8005df6 <_dtoa_r+0x246>
 8005d46:	4b5b      	ldr	r3, [pc, #364]	; (8005eb4 <_dtoa_r+0x304>)
 8005d48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	ec51 0b18 	vmov	r0, r1, d8
 8005d54:	f7fa fec2 	bl	8000adc <__aeabi_dcmplt>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d04e      	beq.n	8005dfa <_dtoa_r+0x24a>
 8005d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d60:	2300      	movs	r3, #0
 8005d62:	930c      	str	r3, [sp, #48]	; 0x30
 8005d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d66:	1b5b      	subs	r3, r3, r5
 8005d68:	1e5a      	subs	r2, r3, #1
 8005d6a:	bf45      	ittet	mi
 8005d6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d70:	9305      	strmi	r3, [sp, #20]
 8005d72:	2300      	movpl	r3, #0
 8005d74:	2300      	movmi	r3, #0
 8005d76:	9206      	str	r2, [sp, #24]
 8005d78:	bf54      	ite	pl
 8005d7a:	9305      	strpl	r3, [sp, #20]
 8005d7c:	9306      	strmi	r3, [sp, #24]
 8005d7e:	f1bb 0f00 	cmp.w	fp, #0
 8005d82:	db3c      	blt.n	8005dfe <_dtoa_r+0x24e>
 8005d84:	9b06      	ldr	r3, [sp, #24]
 8005d86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005d8a:	445b      	add	r3, fp
 8005d8c:	9306      	str	r3, [sp, #24]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9308      	str	r3, [sp, #32]
 8005d92:	9b07      	ldr	r3, [sp, #28]
 8005d94:	2b09      	cmp	r3, #9
 8005d96:	d868      	bhi.n	8005e6a <_dtoa_r+0x2ba>
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	bfc4      	itt	gt
 8005d9c:	3b04      	subgt	r3, #4
 8005d9e:	9307      	strgt	r3, [sp, #28]
 8005da0:	9b07      	ldr	r3, [sp, #28]
 8005da2:	f1a3 0302 	sub.w	r3, r3, #2
 8005da6:	bfcc      	ite	gt
 8005da8:	2500      	movgt	r5, #0
 8005daa:	2501      	movle	r5, #1
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	f200 8085 	bhi.w	8005ebc <_dtoa_r+0x30c>
 8005db2:	e8df f003 	tbb	[pc, r3]
 8005db6:	3b2e      	.short	0x3b2e
 8005db8:	5839      	.short	0x5839
 8005dba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005dbe:	441d      	add	r5, r3
 8005dc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	bfc1      	itttt	gt
 8005dc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005dcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005dd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005dd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005dd8:	bfd6      	itet	le
 8005dda:	f1c3 0320 	rsble	r3, r3, #32
 8005dde:	ea48 0003 	orrgt.w	r0, r8, r3
 8005de2:	fa06 f003 	lslle.w	r0, r6, r3
 8005de6:	f7fa fb8d 	bl	8000504 <__aeabi_ui2d>
 8005dea:	2201      	movs	r2, #1
 8005dec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005df0:	3d01      	subs	r5, #1
 8005df2:	920e      	str	r2, [sp, #56]	; 0x38
 8005df4:	e76f      	b.n	8005cd6 <_dtoa_r+0x126>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e7b3      	b.n	8005d62 <_dtoa_r+0x1b2>
 8005dfa:	900c      	str	r0, [sp, #48]	; 0x30
 8005dfc:	e7b2      	b.n	8005d64 <_dtoa_r+0x1b4>
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	eba3 030b 	sub.w	r3, r3, fp
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	f1cb 0300 	rsb	r3, fp, #0
 8005e0a:	9308      	str	r3, [sp, #32]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e10:	e7bf      	b.n	8005d92 <_dtoa_r+0x1e2>
 8005e12:	2300      	movs	r3, #0
 8005e14:	9309      	str	r3, [sp, #36]	; 0x24
 8005e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	dc52      	bgt.n	8005ec2 <_dtoa_r+0x312>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	461a      	mov	r2, r3
 8005e24:	920a      	str	r2, [sp, #40]	; 0x28
 8005e26:	e00b      	b.n	8005e40 <_dtoa_r+0x290>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7f3      	b.n	8005e14 <_dtoa_r+0x264>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e32:	445b      	add	r3, fp
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	3301      	adds	r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	bfb8      	it	lt
 8005e3e:	2301      	movlt	r3, #1
 8005e40:	69e0      	ldr	r0, [r4, #28]
 8005e42:	2100      	movs	r1, #0
 8005e44:	2204      	movs	r2, #4
 8005e46:	f102 0614 	add.w	r6, r2, #20
 8005e4a:	429e      	cmp	r6, r3
 8005e4c:	d93d      	bls.n	8005eca <_dtoa_r+0x31a>
 8005e4e:	6041      	str	r1, [r0, #4]
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fcf3 	bl	800683c <_Balloc>
 8005e56:	9000      	str	r0, [sp, #0]
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d139      	bne.n	8005ed0 <_dtoa_r+0x320>
 8005e5c:	4b16      	ldr	r3, [pc, #88]	; (8005eb8 <_dtoa_r+0x308>)
 8005e5e:	4602      	mov	r2, r0
 8005e60:	f240 11af 	movw	r1, #431	; 0x1af
 8005e64:	e6bd      	b.n	8005be2 <_dtoa_r+0x32>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e7e1      	b.n	8005e2e <_dtoa_r+0x27e>
 8005e6a:	2501      	movs	r5, #1
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	9509      	str	r5, [sp, #36]	; 0x24
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2312      	movs	r3, #18
 8005e7e:	e7d1      	b.n	8005e24 <_dtoa_r+0x274>
 8005e80:	636f4361 	.word	0x636f4361
 8005e84:	3fd287a7 	.word	0x3fd287a7
 8005e88:	8b60c8b3 	.word	0x8b60c8b3
 8005e8c:	3fc68a28 	.word	0x3fc68a28
 8005e90:	509f79fb 	.word	0x509f79fb
 8005e94:	3fd34413 	.word	0x3fd34413
 8005e98:	08007741 	.word	0x08007741
 8005e9c:	08007758 	.word	0x08007758
 8005ea0:	7ff00000 	.word	0x7ff00000
 8005ea4:	0800773d 	.word	0x0800773d
 8005ea8:	08007734 	.word	0x08007734
 8005eac:	08007711 	.word	0x08007711
 8005eb0:	3ff80000 	.word	0x3ff80000
 8005eb4:	08007848 	.word	0x08007848
 8005eb8:	080077b0 	.word	0x080077b0
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	e7d7      	b.n	8005e72 <_dtoa_r+0x2c2>
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	e7ba      	b.n	8005e40 <_dtoa_r+0x290>
 8005eca:	3101      	adds	r1, #1
 8005ecc:	0052      	lsls	r2, r2, #1
 8005ece:	e7ba      	b.n	8005e46 <_dtoa_r+0x296>
 8005ed0:	69e3      	ldr	r3, [r4, #28]
 8005ed2:	9a00      	ldr	r2, [sp, #0]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	2b0e      	cmp	r3, #14
 8005eda:	f200 80a8 	bhi.w	800602e <_dtoa_r+0x47e>
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	f000 80a5 	beq.w	800602e <_dtoa_r+0x47e>
 8005ee4:	f1bb 0f00 	cmp.w	fp, #0
 8005ee8:	dd38      	ble.n	8005f5c <_dtoa_r+0x3ac>
 8005eea:	4bc0      	ldr	r3, [pc, #768]	; (80061ec <_dtoa_r+0x63c>)
 8005eec:	f00b 020f 	and.w	r2, fp, #15
 8005ef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ef4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ef8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005efc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005f00:	d019      	beq.n	8005f36 <_dtoa_r+0x386>
 8005f02:	4bbb      	ldr	r3, [pc, #748]	; (80061f0 <_dtoa_r+0x640>)
 8005f04:	ec51 0b18 	vmov	r0, r1, d8
 8005f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f0c:	f7fa fc9e 	bl	800084c <__aeabi_ddiv>
 8005f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f14:	f008 080f 	and.w	r8, r8, #15
 8005f18:	2503      	movs	r5, #3
 8005f1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80061f0 <_dtoa_r+0x640>
 8005f1e:	f1b8 0f00 	cmp.w	r8, #0
 8005f22:	d10a      	bne.n	8005f3a <_dtoa_r+0x38a>
 8005f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa fc8e 	bl	800084c <__aeabi_ddiv>
 8005f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f34:	e02b      	b.n	8005f8e <_dtoa_r+0x3de>
 8005f36:	2502      	movs	r5, #2
 8005f38:	e7ef      	b.n	8005f1a <_dtoa_r+0x36a>
 8005f3a:	f018 0f01 	tst.w	r8, #1
 8005f3e:	d008      	beq.n	8005f52 <_dtoa_r+0x3a2>
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f48:	f7fa fb56 	bl	80005f8 <__aeabi_dmul>
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	4606      	mov	r6, r0
 8005f50:	460f      	mov	r7, r1
 8005f52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f56:	f109 0908 	add.w	r9, r9, #8
 8005f5a:	e7e0      	b.n	8005f1e <_dtoa_r+0x36e>
 8005f5c:	f000 809f 	beq.w	800609e <_dtoa_r+0x4ee>
 8005f60:	f1cb 0600 	rsb	r6, fp, #0
 8005f64:	4ba1      	ldr	r3, [pc, #644]	; (80061ec <_dtoa_r+0x63c>)
 8005f66:	4fa2      	ldr	r7, [pc, #648]	; (80061f0 <_dtoa_r+0x640>)
 8005f68:	f006 020f 	and.w	r2, r6, #15
 8005f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	ec51 0b18 	vmov	r0, r1, d8
 8005f78:	f7fa fb3e 	bl	80005f8 <__aeabi_dmul>
 8005f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f80:	1136      	asrs	r6, r6, #4
 8005f82:	2300      	movs	r3, #0
 8005f84:	2502      	movs	r5, #2
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	d17e      	bne.n	8006088 <_dtoa_r+0x4d8>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d0      	bne.n	8005f30 <_dtoa_r+0x380>
 8005f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8084 	beq.w	80060a2 <_dtoa_r+0x4f2>
 8005f9a:	4b96      	ldr	r3, [pc, #600]	; (80061f4 <_dtoa_r+0x644>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	f7fa fd9b 	bl	8000adc <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d07b      	beq.n	80060a2 <_dtoa_r+0x4f2>
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d078      	beq.n	80060a2 <_dtoa_r+0x4f2>
 8005fb0:	9b01      	ldr	r3, [sp, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dd39      	ble.n	800602a <_dtoa_r+0x47a>
 8005fb6:	4b90      	ldr	r3, [pc, #576]	; (80061f8 <_dtoa_r+0x648>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc6:	9e01      	ldr	r6, [sp, #4]
 8005fc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005fcc:	3501      	adds	r5, #1
 8005fce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7fa faa6 	bl	8000524 <__aeabi_i2d>
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f7fa fb0c 	bl	80005f8 <__aeabi_dmul>
 8005fe0:	4b86      	ldr	r3, [pc, #536]	; (80061fc <_dtoa_r+0x64c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f7fa f952 	bl	800028c <__adddf3>
 8005fe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	d158      	bne.n	80060a8 <_dtoa_r+0x4f8>
 8005ff6:	4b82      	ldr	r3, [pc, #520]	; (8006200 <_dtoa_r+0x650>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa f943 	bl	8000288 <__aeabi_dsub>
 8006002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006006:	4680      	mov	r8, r0
 8006008:	4689      	mov	r9, r1
 800600a:	f7fa fd85 	bl	8000b18 <__aeabi_dcmpgt>
 800600e:	2800      	cmp	r0, #0
 8006010:	f040 8296 	bne.w	8006540 <_dtoa_r+0x990>
 8006014:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006018:	4640      	mov	r0, r8
 800601a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa fd5c 	bl	8000adc <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 8289 	bne.w	800653c <_dtoa_r+0x98c>
 800602a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800602e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	f2c0 814e 	blt.w	80062d2 <_dtoa_r+0x722>
 8006036:	f1bb 0f0e 	cmp.w	fp, #14
 800603a:	f300 814a 	bgt.w	80062d2 <_dtoa_r+0x722>
 800603e:	4b6b      	ldr	r3, [pc, #428]	; (80061ec <_dtoa_r+0x63c>)
 8006040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006044:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	f280 80dc 	bge.w	8006208 <_dtoa_r+0x658>
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f300 80d8 	bgt.w	8006208 <_dtoa_r+0x658>
 8006058:	f040 826f 	bne.w	800653a <_dtoa_r+0x98a>
 800605c:	4b68      	ldr	r3, [pc, #416]	; (8006200 <_dtoa_r+0x650>)
 800605e:	2200      	movs	r2, #0
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa fac8 	bl	80005f8 <__aeabi_dmul>
 8006068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800606c:	f7fa fd4a 	bl	8000b04 <__aeabi_dcmpge>
 8006070:	9e04      	ldr	r6, [sp, #16]
 8006072:	4637      	mov	r7, r6
 8006074:	2800      	cmp	r0, #0
 8006076:	f040 8245 	bne.w	8006504 <_dtoa_r+0x954>
 800607a:	9d00      	ldr	r5, [sp, #0]
 800607c:	2331      	movs	r3, #49	; 0x31
 800607e:	f805 3b01 	strb.w	r3, [r5], #1
 8006082:	f10b 0b01 	add.w	fp, fp, #1
 8006086:	e241      	b.n	800650c <_dtoa_r+0x95c>
 8006088:	07f2      	lsls	r2, r6, #31
 800608a:	d505      	bpl.n	8006098 <_dtoa_r+0x4e8>
 800608c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006090:	f7fa fab2 	bl	80005f8 <__aeabi_dmul>
 8006094:	3501      	adds	r5, #1
 8006096:	2301      	movs	r3, #1
 8006098:	1076      	asrs	r6, r6, #1
 800609a:	3708      	adds	r7, #8
 800609c:	e773      	b.n	8005f86 <_dtoa_r+0x3d6>
 800609e:	2502      	movs	r5, #2
 80060a0:	e775      	b.n	8005f8e <_dtoa_r+0x3de>
 80060a2:	9e04      	ldr	r6, [sp, #16]
 80060a4:	465f      	mov	r7, fp
 80060a6:	e792      	b.n	8005fce <_dtoa_r+0x41e>
 80060a8:	9900      	ldr	r1, [sp, #0]
 80060aa:	4b50      	ldr	r3, [pc, #320]	; (80061ec <_dtoa_r+0x63c>)
 80060ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060b0:	4431      	add	r1, r6
 80060b2:	9102      	str	r1, [sp, #8]
 80060b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b6:	eeb0 9a47 	vmov.f32	s18, s14
 80060ba:	eef0 9a67 	vmov.f32	s19, s15
 80060be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d044      	beq.n	8006154 <_dtoa_r+0x5a4>
 80060ca:	494e      	ldr	r1, [pc, #312]	; (8006204 <_dtoa_r+0x654>)
 80060cc:	2000      	movs	r0, #0
 80060ce:	f7fa fbbd 	bl	800084c <__aeabi_ddiv>
 80060d2:	ec53 2b19 	vmov	r2, r3, d9
 80060d6:	f7fa f8d7 	bl	8000288 <__aeabi_dsub>
 80060da:	9d00      	ldr	r5, [sp, #0]
 80060dc:	ec41 0b19 	vmov	d9, r0, r1
 80060e0:	4649      	mov	r1, r9
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7fa fd38 	bl	8000b58 <__aeabi_d2iz>
 80060e8:	4606      	mov	r6, r0
 80060ea:	f7fa fa1b 	bl	8000524 <__aeabi_i2d>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f8c7 	bl	8000288 <__aeabi_dsub>
 80060fa:	3630      	adds	r6, #48	; 0x30
 80060fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006100:	ec53 2b19 	vmov	r2, r3, d9
 8006104:	4680      	mov	r8, r0
 8006106:	4689      	mov	r9, r1
 8006108:	f7fa fce8 	bl	8000adc <__aeabi_dcmplt>
 800610c:	2800      	cmp	r0, #0
 800610e:	d164      	bne.n	80061da <_dtoa_r+0x62a>
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	4937      	ldr	r1, [pc, #220]	; (80061f4 <_dtoa_r+0x644>)
 8006116:	2000      	movs	r0, #0
 8006118:	f7fa f8b6 	bl	8000288 <__aeabi_dsub>
 800611c:	ec53 2b19 	vmov	r2, r3, d9
 8006120:	f7fa fcdc 	bl	8000adc <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	f040 80b6 	bne.w	8006296 <_dtoa_r+0x6e6>
 800612a:	9b02      	ldr	r3, [sp, #8]
 800612c:	429d      	cmp	r5, r3
 800612e:	f43f af7c 	beq.w	800602a <_dtoa_r+0x47a>
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <_dtoa_r+0x648>)
 8006134:	ec51 0b19 	vmov	r0, r1, d9
 8006138:	2200      	movs	r2, #0
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <_dtoa_r+0x648>)
 8006140:	ec41 0b19 	vmov	d9, r0, r1
 8006144:	2200      	movs	r2, #0
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	f7fa fa55 	bl	80005f8 <__aeabi_dmul>
 800614e:	4680      	mov	r8, r0
 8006150:	4689      	mov	r9, r1
 8006152:	e7c5      	b.n	80060e0 <_dtoa_r+0x530>
 8006154:	ec51 0b17 	vmov	r0, r1, d7
 8006158:	f7fa fa4e 	bl	80005f8 <__aeabi_dmul>
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	9d00      	ldr	r5, [sp, #0]
 8006160:	930f      	str	r3, [sp, #60]	; 0x3c
 8006162:	ec41 0b19 	vmov	d9, r0, r1
 8006166:	4649      	mov	r1, r9
 8006168:	4640      	mov	r0, r8
 800616a:	f7fa fcf5 	bl	8000b58 <__aeabi_d2iz>
 800616e:	4606      	mov	r6, r0
 8006170:	f7fa f9d8 	bl	8000524 <__aeabi_i2d>
 8006174:	3630      	adds	r6, #48	; 0x30
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa f883 	bl	8000288 <__aeabi_dsub>
 8006182:	f805 6b01 	strb.w	r6, [r5], #1
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	429d      	cmp	r5, r3
 800618a:	4680      	mov	r8, r0
 800618c:	4689      	mov	r9, r1
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	d124      	bne.n	80061de <_dtoa_r+0x62e>
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <_dtoa_r+0x654>)
 8006196:	ec51 0b19 	vmov	r0, r1, d9
 800619a:	f7fa f877 	bl	800028c <__adddf3>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4640      	mov	r0, r8
 80061a4:	4649      	mov	r1, r9
 80061a6:	f7fa fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d173      	bne.n	8006296 <_dtoa_r+0x6e6>
 80061ae:	ec53 2b19 	vmov	r2, r3, d9
 80061b2:	4914      	ldr	r1, [pc, #80]	; (8006204 <_dtoa_r+0x654>)
 80061b4:	2000      	movs	r0, #0
 80061b6:	f7fa f867 	bl	8000288 <__aeabi_dsub>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa fc8b 	bl	8000adc <__aeabi_dcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f43f af2f 	beq.w	800602a <_dtoa_r+0x47a>
 80061cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80061ce:	1e6b      	subs	r3, r5, #1
 80061d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061d6:	2b30      	cmp	r3, #48	; 0x30
 80061d8:	d0f8      	beq.n	80061cc <_dtoa_r+0x61c>
 80061da:	46bb      	mov	fp, r7
 80061dc:	e04a      	b.n	8006274 <_dtoa_r+0x6c4>
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <_dtoa_r+0x648>)
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	4680      	mov	r8, r0
 80061e6:	4689      	mov	r9, r1
 80061e8:	e7bd      	b.n	8006166 <_dtoa_r+0x5b6>
 80061ea:	bf00      	nop
 80061ec:	08007848 	.word	0x08007848
 80061f0:	08007820 	.word	0x08007820
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	401c0000 	.word	0x401c0000
 8006200:	40140000 	.word	0x40140000
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800620c:	9d00      	ldr	r5, [sp, #0]
 800620e:	4642      	mov	r2, r8
 8006210:	464b      	mov	r3, r9
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa fb19 	bl	800084c <__aeabi_ddiv>
 800621a:	f7fa fc9d 	bl	8000b58 <__aeabi_d2iz>
 800621e:	9001      	str	r0, [sp, #4]
 8006220:	f7fa f980 	bl	8000524 <__aeabi_i2d>
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f7fa f828 	bl	8000288 <__aeabi_dsub>
 8006238:	9e01      	ldr	r6, [sp, #4]
 800623a:	9f04      	ldr	r7, [sp, #16]
 800623c:	3630      	adds	r6, #48	; 0x30
 800623e:	f805 6b01 	strb.w	r6, [r5], #1
 8006242:	9e00      	ldr	r6, [sp, #0]
 8006244:	1bae      	subs	r6, r5, r6
 8006246:	42b7      	cmp	r7, r6
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	d134      	bne.n	80062b8 <_dtoa_r+0x708>
 800624e:	f7fa f81d 	bl	800028c <__adddf3>
 8006252:	4642      	mov	r2, r8
 8006254:	464b      	mov	r3, r9
 8006256:	4606      	mov	r6, r0
 8006258:	460f      	mov	r7, r1
 800625a:	f7fa fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800625e:	b9c8      	cbnz	r0, 8006294 <_dtoa_r+0x6e4>
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	4630      	mov	r0, r6
 8006266:	4639      	mov	r1, r7
 8006268:	f7fa fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800626c:	b110      	cbz	r0, 8006274 <_dtoa_r+0x6c4>
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	07db      	lsls	r3, r3, #31
 8006272:	d40f      	bmi.n	8006294 <_dtoa_r+0x6e4>
 8006274:	4651      	mov	r1, sl
 8006276:	4620      	mov	r0, r4
 8006278:	f000 fb20 	bl	80068bc <_Bfree>
 800627c:	2300      	movs	r3, #0
 800627e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006280:	702b      	strb	r3, [r5, #0]
 8006282:	f10b 0301 	add.w	r3, fp, #1
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800628a:	2b00      	cmp	r3, #0
 800628c:	f43f ace2 	beq.w	8005c54 <_dtoa_r+0xa4>
 8006290:	601d      	str	r5, [r3, #0]
 8006292:	e4df      	b.n	8005c54 <_dtoa_r+0xa4>
 8006294:	465f      	mov	r7, fp
 8006296:	462b      	mov	r3, r5
 8006298:	461d      	mov	r5, r3
 800629a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800629e:	2a39      	cmp	r2, #57	; 0x39
 80062a0:	d106      	bne.n	80062b0 <_dtoa_r+0x700>
 80062a2:	9a00      	ldr	r2, [sp, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d1f7      	bne.n	8006298 <_dtoa_r+0x6e8>
 80062a8:	9900      	ldr	r1, [sp, #0]
 80062aa:	2230      	movs	r2, #48	; 0x30
 80062ac:	3701      	adds	r7, #1
 80062ae:	700a      	strb	r2, [r1, #0]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	3201      	adds	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e790      	b.n	80061da <_dtoa_r+0x62a>
 80062b8:	4ba3      	ldr	r3, [pc, #652]	; (8006548 <_dtoa_r+0x998>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	f7fa f99c 	bl	80005f8 <__aeabi_dmul>
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	f7fa fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d09e      	beq.n	800620e <_dtoa_r+0x65e>
 80062d0:	e7d0      	b.n	8006274 <_dtoa_r+0x6c4>
 80062d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	f000 80ca 	beq.w	800646e <_dtoa_r+0x8be>
 80062da:	9a07      	ldr	r2, [sp, #28]
 80062dc:	2a01      	cmp	r2, #1
 80062de:	f300 80ad 	bgt.w	800643c <_dtoa_r+0x88c>
 80062e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	f000 80a5 	beq.w	8006434 <_dtoa_r+0x884>
 80062ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062ee:	9e08      	ldr	r6, [sp, #32]
 80062f0:	9d05      	ldr	r5, [sp, #20]
 80062f2:	9a05      	ldr	r2, [sp, #20]
 80062f4:	441a      	add	r2, r3
 80062f6:	9205      	str	r2, [sp, #20]
 80062f8:	9a06      	ldr	r2, [sp, #24]
 80062fa:	2101      	movs	r1, #1
 80062fc:	441a      	add	r2, r3
 80062fe:	4620      	mov	r0, r4
 8006300:	9206      	str	r2, [sp, #24]
 8006302:	f000 fb91 	bl	8006a28 <__i2b>
 8006306:	4607      	mov	r7, r0
 8006308:	b165      	cbz	r5, 8006324 <_dtoa_r+0x774>
 800630a:	9b06      	ldr	r3, [sp, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dd09      	ble.n	8006324 <_dtoa_r+0x774>
 8006310:	42ab      	cmp	r3, r5
 8006312:	9a05      	ldr	r2, [sp, #20]
 8006314:	bfa8      	it	ge
 8006316:	462b      	movge	r3, r5
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	9205      	str	r2, [sp, #20]
 800631c:	9a06      	ldr	r2, [sp, #24]
 800631e:	1aed      	subs	r5, r5, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	9306      	str	r3, [sp, #24]
 8006324:	9b08      	ldr	r3, [sp, #32]
 8006326:	b1f3      	cbz	r3, 8006366 <_dtoa_r+0x7b6>
 8006328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a3 	beq.w	8006476 <_dtoa_r+0x8c6>
 8006330:	2e00      	cmp	r6, #0
 8006332:	dd10      	ble.n	8006356 <_dtoa_r+0x7a6>
 8006334:	4639      	mov	r1, r7
 8006336:	4632      	mov	r2, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fc35 	bl	8006ba8 <__pow5mult>
 800633e:	4652      	mov	r2, sl
 8006340:	4601      	mov	r1, r0
 8006342:	4607      	mov	r7, r0
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fb85 	bl	8006a54 <__multiply>
 800634a:	4651      	mov	r1, sl
 800634c:	4680      	mov	r8, r0
 800634e:	4620      	mov	r0, r4
 8006350:	f000 fab4 	bl	80068bc <_Bfree>
 8006354:	46c2      	mov	sl, r8
 8006356:	9b08      	ldr	r3, [sp, #32]
 8006358:	1b9a      	subs	r2, r3, r6
 800635a:	d004      	beq.n	8006366 <_dtoa_r+0x7b6>
 800635c:	4651      	mov	r1, sl
 800635e:	4620      	mov	r0, r4
 8006360:	f000 fc22 	bl	8006ba8 <__pow5mult>
 8006364:	4682      	mov	sl, r0
 8006366:	2101      	movs	r1, #1
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fb5d 	bl	8006a28 <__i2b>
 800636e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	4606      	mov	r6, r0
 8006374:	f340 8081 	ble.w	800647a <_dtoa_r+0x8ca>
 8006378:	461a      	mov	r2, r3
 800637a:	4601      	mov	r1, r0
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fc13 	bl	8006ba8 <__pow5mult>
 8006382:	9b07      	ldr	r3, [sp, #28]
 8006384:	2b01      	cmp	r3, #1
 8006386:	4606      	mov	r6, r0
 8006388:	dd7a      	ble.n	8006480 <_dtoa_r+0x8d0>
 800638a:	f04f 0800 	mov.w	r8, #0
 800638e:	6933      	ldr	r3, [r6, #16]
 8006390:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006394:	6918      	ldr	r0, [r3, #16]
 8006396:	f000 faf9 	bl	800698c <__hi0bits>
 800639a:	f1c0 0020 	rsb	r0, r0, #32
 800639e:	9b06      	ldr	r3, [sp, #24]
 80063a0:	4418      	add	r0, r3
 80063a2:	f010 001f 	ands.w	r0, r0, #31
 80063a6:	f000 8094 	beq.w	80064d2 <_dtoa_r+0x922>
 80063aa:	f1c0 0320 	rsb	r3, r0, #32
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	f340 8085 	ble.w	80064be <_dtoa_r+0x90e>
 80063b4:	9b05      	ldr	r3, [sp, #20]
 80063b6:	f1c0 001c 	rsb	r0, r0, #28
 80063ba:	4403      	add	r3, r0
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	9b06      	ldr	r3, [sp, #24]
 80063c0:	4403      	add	r3, r0
 80063c2:	4405      	add	r5, r0
 80063c4:	9306      	str	r3, [sp, #24]
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd05      	ble.n	80063d8 <_dtoa_r+0x828>
 80063cc:	4651      	mov	r1, sl
 80063ce:	461a      	mov	r2, r3
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fc43 	bl	8006c5c <__lshift>
 80063d6:	4682      	mov	sl, r0
 80063d8:	9b06      	ldr	r3, [sp, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	dd05      	ble.n	80063ea <_dtoa_r+0x83a>
 80063de:	4631      	mov	r1, r6
 80063e0:	461a      	mov	r2, r3
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fc3a 	bl	8006c5c <__lshift>
 80063e8:	4606      	mov	r6, r0
 80063ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d072      	beq.n	80064d6 <_dtoa_r+0x926>
 80063f0:	4631      	mov	r1, r6
 80063f2:	4650      	mov	r0, sl
 80063f4:	f000 fc9e 	bl	8006d34 <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	da6c      	bge.n	80064d6 <_dtoa_r+0x926>
 80063fc:	2300      	movs	r3, #0
 80063fe:	4651      	mov	r1, sl
 8006400:	220a      	movs	r2, #10
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fa7c 	bl	8006900 <__multadd>
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800640e:	4682      	mov	sl, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 81b0 	beq.w	8006776 <_dtoa_r+0xbc6>
 8006416:	2300      	movs	r3, #0
 8006418:	4639      	mov	r1, r7
 800641a:	220a      	movs	r2, #10
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fa6f 	bl	8006900 <__multadd>
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	4607      	mov	r7, r0
 8006428:	f300 8096 	bgt.w	8006558 <_dtoa_r+0x9a8>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	2b02      	cmp	r3, #2
 8006430:	dc59      	bgt.n	80064e6 <_dtoa_r+0x936>
 8006432:	e091      	b.n	8006558 <_dtoa_r+0x9a8>
 8006434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800643a:	e758      	b.n	80062ee <_dtoa_r+0x73e>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	1e5e      	subs	r6, r3, #1
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	42b3      	cmp	r3, r6
 8006444:	bfbf      	itttt	lt
 8006446:	9b08      	ldrlt	r3, [sp, #32]
 8006448:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800644a:	9608      	strlt	r6, [sp, #32]
 800644c:	1af3      	sublt	r3, r6, r3
 800644e:	bfb4      	ite	lt
 8006450:	18d2      	addlt	r2, r2, r3
 8006452:	1b9e      	subge	r6, r3, r6
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	bfbc      	itt	lt
 8006458:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800645a:	2600      	movlt	r6, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	bfb7      	itett	lt
 8006460:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006464:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006468:	1a9d      	sublt	r5, r3, r2
 800646a:	2300      	movlt	r3, #0
 800646c:	e741      	b.n	80062f2 <_dtoa_r+0x742>
 800646e:	9e08      	ldr	r6, [sp, #32]
 8006470:	9d05      	ldr	r5, [sp, #20]
 8006472:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006474:	e748      	b.n	8006308 <_dtoa_r+0x758>
 8006476:	9a08      	ldr	r2, [sp, #32]
 8006478:	e770      	b.n	800635c <_dtoa_r+0x7ac>
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	2b01      	cmp	r3, #1
 800647e:	dc19      	bgt.n	80064b4 <_dtoa_r+0x904>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	b9bb      	cbnz	r3, 80064b4 <_dtoa_r+0x904>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648a:	b99b      	cbnz	r3, 80064b4 <_dtoa_r+0x904>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006492:	0d1b      	lsrs	r3, r3, #20
 8006494:	051b      	lsls	r3, r3, #20
 8006496:	b183      	cbz	r3, 80064ba <_dtoa_r+0x90a>
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	3301      	adds	r3, #1
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	3301      	adds	r3, #1
 80064a2:	9306      	str	r3, [sp, #24]
 80064a4:	f04f 0801 	mov.w	r8, #1
 80064a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f47f af6f 	bne.w	800638e <_dtoa_r+0x7de>
 80064b0:	2001      	movs	r0, #1
 80064b2:	e774      	b.n	800639e <_dtoa_r+0x7ee>
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	e7f6      	b.n	80064a8 <_dtoa_r+0x8f8>
 80064ba:	4698      	mov	r8, r3
 80064bc:	e7f4      	b.n	80064a8 <_dtoa_r+0x8f8>
 80064be:	d082      	beq.n	80063c6 <_dtoa_r+0x816>
 80064c0:	9a05      	ldr	r2, [sp, #20]
 80064c2:	331c      	adds	r3, #28
 80064c4:	441a      	add	r2, r3
 80064c6:	9205      	str	r2, [sp, #20]
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	441a      	add	r2, r3
 80064cc:	441d      	add	r5, r3
 80064ce:	9206      	str	r2, [sp, #24]
 80064d0:	e779      	b.n	80063c6 <_dtoa_r+0x816>
 80064d2:	4603      	mov	r3, r0
 80064d4:	e7f4      	b.n	80064c0 <_dtoa_r+0x910>
 80064d6:	9b04      	ldr	r3, [sp, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dc37      	bgt.n	800654c <_dtoa_r+0x99c>
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	dd34      	ble.n	800654c <_dtoa_r+0x99c>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	b963      	cbnz	r3, 8006504 <_dtoa_r+0x954>
 80064ea:	4631      	mov	r1, r6
 80064ec:	2205      	movs	r2, #5
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 fa06 	bl	8006900 <__multadd>
 80064f4:	4601      	mov	r1, r0
 80064f6:	4606      	mov	r6, r0
 80064f8:	4650      	mov	r0, sl
 80064fa:	f000 fc1b 	bl	8006d34 <__mcmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f73f adbb 	bgt.w	800607a <_dtoa_r+0x4ca>
 8006504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006506:	9d00      	ldr	r5, [sp, #0]
 8006508:	ea6f 0b03 	mvn.w	fp, r3
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	4631      	mov	r1, r6
 8006512:	4620      	mov	r0, r4
 8006514:	f000 f9d2 	bl	80068bc <_Bfree>
 8006518:	2f00      	cmp	r7, #0
 800651a:	f43f aeab 	beq.w	8006274 <_dtoa_r+0x6c4>
 800651e:	f1b8 0f00 	cmp.w	r8, #0
 8006522:	d005      	beq.n	8006530 <_dtoa_r+0x980>
 8006524:	45b8      	cmp	r8, r7
 8006526:	d003      	beq.n	8006530 <_dtoa_r+0x980>
 8006528:	4641      	mov	r1, r8
 800652a:	4620      	mov	r0, r4
 800652c:	f000 f9c6 	bl	80068bc <_Bfree>
 8006530:	4639      	mov	r1, r7
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f9c2 	bl	80068bc <_Bfree>
 8006538:	e69c      	b.n	8006274 <_dtoa_r+0x6c4>
 800653a:	2600      	movs	r6, #0
 800653c:	4637      	mov	r7, r6
 800653e:	e7e1      	b.n	8006504 <_dtoa_r+0x954>
 8006540:	46bb      	mov	fp, r7
 8006542:	4637      	mov	r7, r6
 8006544:	e599      	b.n	800607a <_dtoa_r+0x4ca>
 8006546:	bf00      	nop
 8006548:	40240000 	.word	0x40240000
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80c8 	beq.w	80066e4 <_dtoa_r+0xb34>
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	2d00      	cmp	r5, #0
 800655a:	dd05      	ble.n	8006568 <_dtoa_r+0x9b8>
 800655c:	4639      	mov	r1, r7
 800655e:	462a      	mov	r2, r5
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fb7b 	bl	8006c5c <__lshift>
 8006566:	4607      	mov	r7, r0
 8006568:	f1b8 0f00 	cmp.w	r8, #0
 800656c:	d05b      	beq.n	8006626 <_dtoa_r+0xa76>
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4620      	mov	r0, r4
 8006572:	f000 f963 	bl	800683c <_Balloc>
 8006576:	4605      	mov	r5, r0
 8006578:	b928      	cbnz	r0, 8006586 <_dtoa_r+0x9d6>
 800657a:	4b83      	ldr	r3, [pc, #524]	; (8006788 <_dtoa_r+0xbd8>)
 800657c:	4602      	mov	r2, r0
 800657e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006582:	f7ff bb2e 	b.w	8005be2 <_dtoa_r+0x32>
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	3202      	adds	r2, #2
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	f107 010c 	add.w	r1, r7, #12
 8006590:	300c      	adds	r0, #12
 8006592:	f000 fd7d 	bl	8007090 <memcpy>
 8006596:	2201      	movs	r2, #1
 8006598:	4629      	mov	r1, r5
 800659a:	4620      	mov	r0, r4
 800659c:	f000 fb5e 	bl	8006c5c <__lshift>
 80065a0:	9b00      	ldr	r3, [sp, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065aa:	4413      	add	r3, r2
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	9b02      	ldr	r3, [sp, #8]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	46b8      	mov	r8, r7
 80065b6:	9306      	str	r3, [sp, #24]
 80065b8:	4607      	mov	r7, r0
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	4631      	mov	r1, r6
 80065be:	3b01      	subs	r3, #1
 80065c0:	4650      	mov	r0, sl
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	f7ff fa6a 	bl	8005a9c <quorem>
 80065c8:	4641      	mov	r1, r8
 80065ca:	9002      	str	r0, [sp, #8]
 80065cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065d0:	4650      	mov	r0, sl
 80065d2:	f000 fbaf 	bl	8006d34 <__mcmp>
 80065d6:	463a      	mov	r2, r7
 80065d8:	9005      	str	r0, [sp, #20]
 80065da:	4631      	mov	r1, r6
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fbc5 	bl	8006d6c <__mdiff>
 80065e2:	68c2      	ldr	r2, [r0, #12]
 80065e4:	4605      	mov	r5, r0
 80065e6:	bb02      	cbnz	r2, 800662a <_dtoa_r+0xa7a>
 80065e8:	4601      	mov	r1, r0
 80065ea:	4650      	mov	r0, sl
 80065ec:	f000 fba2 	bl	8006d34 <__mcmp>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4629      	mov	r1, r5
 80065f4:	4620      	mov	r0, r4
 80065f6:	9209      	str	r2, [sp, #36]	; 0x24
 80065f8:	f000 f960 	bl	80068bc <_Bfree>
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006600:	9d04      	ldr	r5, [sp, #16]
 8006602:	ea43 0102 	orr.w	r1, r3, r2
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	4319      	orrs	r1, r3
 800660a:	d110      	bne.n	800662e <_dtoa_r+0xa7e>
 800660c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006610:	d029      	beq.n	8006666 <_dtoa_r+0xab6>
 8006612:	9b05      	ldr	r3, [sp, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd02      	ble.n	800661e <_dtoa_r+0xa6e>
 8006618:	9b02      	ldr	r3, [sp, #8]
 800661a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	f883 9000 	strb.w	r9, [r3]
 8006624:	e774      	b.n	8006510 <_dtoa_r+0x960>
 8006626:	4638      	mov	r0, r7
 8006628:	e7ba      	b.n	80065a0 <_dtoa_r+0x9f0>
 800662a:	2201      	movs	r2, #1
 800662c:	e7e1      	b.n	80065f2 <_dtoa_r+0xa42>
 800662e:	9b05      	ldr	r3, [sp, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db04      	blt.n	800663e <_dtoa_r+0xa8e>
 8006634:	9907      	ldr	r1, [sp, #28]
 8006636:	430b      	orrs	r3, r1
 8006638:	9906      	ldr	r1, [sp, #24]
 800663a:	430b      	orrs	r3, r1
 800663c:	d120      	bne.n	8006680 <_dtoa_r+0xad0>
 800663e:	2a00      	cmp	r2, #0
 8006640:	dded      	ble.n	800661e <_dtoa_r+0xa6e>
 8006642:	4651      	mov	r1, sl
 8006644:	2201      	movs	r2, #1
 8006646:	4620      	mov	r0, r4
 8006648:	f000 fb08 	bl	8006c5c <__lshift>
 800664c:	4631      	mov	r1, r6
 800664e:	4682      	mov	sl, r0
 8006650:	f000 fb70 	bl	8006d34 <__mcmp>
 8006654:	2800      	cmp	r0, #0
 8006656:	dc03      	bgt.n	8006660 <_dtoa_r+0xab0>
 8006658:	d1e1      	bne.n	800661e <_dtoa_r+0xa6e>
 800665a:	f019 0f01 	tst.w	r9, #1
 800665e:	d0de      	beq.n	800661e <_dtoa_r+0xa6e>
 8006660:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006664:	d1d8      	bne.n	8006618 <_dtoa_r+0xa68>
 8006666:	9a01      	ldr	r2, [sp, #4]
 8006668:	2339      	movs	r3, #57	; 0x39
 800666a:	7013      	strb	r3, [r2, #0]
 800666c:	462b      	mov	r3, r5
 800666e:	461d      	mov	r5, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006676:	2a39      	cmp	r2, #57	; 0x39
 8006678:	d06c      	beq.n	8006754 <_dtoa_r+0xba4>
 800667a:	3201      	adds	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e747      	b.n	8006510 <_dtoa_r+0x960>
 8006680:	2a00      	cmp	r2, #0
 8006682:	dd07      	ble.n	8006694 <_dtoa_r+0xae4>
 8006684:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006688:	d0ed      	beq.n	8006666 <_dtoa_r+0xab6>
 800668a:	9a01      	ldr	r2, [sp, #4]
 800668c:	f109 0301 	add.w	r3, r9, #1
 8006690:	7013      	strb	r3, [r2, #0]
 8006692:	e73d      	b.n	8006510 <_dtoa_r+0x960>
 8006694:	9b04      	ldr	r3, [sp, #16]
 8006696:	9a08      	ldr	r2, [sp, #32]
 8006698:	f803 9c01 	strb.w	r9, [r3, #-1]
 800669c:	4293      	cmp	r3, r2
 800669e:	d043      	beq.n	8006728 <_dtoa_r+0xb78>
 80066a0:	4651      	mov	r1, sl
 80066a2:	2300      	movs	r3, #0
 80066a4:	220a      	movs	r2, #10
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 f92a 	bl	8006900 <__multadd>
 80066ac:	45b8      	cmp	r8, r7
 80066ae:	4682      	mov	sl, r0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	f04f 020a 	mov.w	r2, #10
 80066b8:	4641      	mov	r1, r8
 80066ba:	4620      	mov	r0, r4
 80066bc:	d107      	bne.n	80066ce <_dtoa_r+0xb1e>
 80066be:	f000 f91f 	bl	8006900 <__multadd>
 80066c2:	4680      	mov	r8, r0
 80066c4:	4607      	mov	r7, r0
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	3301      	adds	r3, #1
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	e775      	b.n	80065ba <_dtoa_r+0xa0a>
 80066ce:	f000 f917 	bl	8006900 <__multadd>
 80066d2:	4639      	mov	r1, r7
 80066d4:	4680      	mov	r8, r0
 80066d6:	2300      	movs	r3, #0
 80066d8:	220a      	movs	r2, #10
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 f910 	bl	8006900 <__multadd>
 80066e0:	4607      	mov	r7, r0
 80066e2:	e7f0      	b.n	80066c6 <_dtoa_r+0xb16>
 80066e4:	9b04      	ldr	r3, [sp, #16]
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	9d00      	ldr	r5, [sp, #0]
 80066ea:	4631      	mov	r1, r6
 80066ec:	4650      	mov	r0, sl
 80066ee:	f7ff f9d5 	bl	8005a9c <quorem>
 80066f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	f805 9b01 	strb.w	r9, [r5], #1
 80066fc:	1aea      	subs	r2, r5, r3
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	4293      	cmp	r3, r2
 8006702:	dd07      	ble.n	8006714 <_dtoa_r+0xb64>
 8006704:	4651      	mov	r1, sl
 8006706:	2300      	movs	r3, #0
 8006708:	220a      	movs	r2, #10
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f8f8 	bl	8006900 <__multadd>
 8006710:	4682      	mov	sl, r0
 8006712:	e7ea      	b.n	80066ea <_dtoa_r+0xb3a>
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfc8      	it	gt
 800671a:	461d      	movgt	r5, r3
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	bfd8      	it	le
 8006720:	2501      	movle	r5, #1
 8006722:	441d      	add	r5, r3
 8006724:	f04f 0800 	mov.w	r8, #0
 8006728:	4651      	mov	r1, sl
 800672a:	2201      	movs	r2, #1
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fa95 	bl	8006c5c <__lshift>
 8006732:	4631      	mov	r1, r6
 8006734:	4682      	mov	sl, r0
 8006736:	f000 fafd 	bl	8006d34 <__mcmp>
 800673a:	2800      	cmp	r0, #0
 800673c:	dc96      	bgt.n	800666c <_dtoa_r+0xabc>
 800673e:	d102      	bne.n	8006746 <_dtoa_r+0xb96>
 8006740:	f019 0f01 	tst.w	r9, #1
 8006744:	d192      	bne.n	800666c <_dtoa_r+0xabc>
 8006746:	462b      	mov	r3, r5
 8006748:	461d      	mov	r5, r3
 800674a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674e:	2a30      	cmp	r2, #48	; 0x30
 8006750:	d0fa      	beq.n	8006748 <_dtoa_r+0xb98>
 8006752:	e6dd      	b.n	8006510 <_dtoa_r+0x960>
 8006754:	9a00      	ldr	r2, [sp, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d189      	bne.n	800666e <_dtoa_r+0xabe>
 800675a:	f10b 0b01 	add.w	fp, fp, #1
 800675e:	2331      	movs	r3, #49	; 0x31
 8006760:	e796      	b.n	8006690 <_dtoa_r+0xae0>
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <_dtoa_r+0xbdc>)
 8006764:	f7ff ba99 	b.w	8005c9a <_dtoa_r+0xea>
 8006768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800676a:	2b00      	cmp	r3, #0
 800676c:	f47f aa6d 	bne.w	8005c4a <_dtoa_r+0x9a>
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <_dtoa_r+0xbe0>)
 8006772:	f7ff ba92 	b.w	8005c9a <_dtoa_r+0xea>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	dcb5      	bgt.n	80066e8 <_dtoa_r+0xb38>
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	2b02      	cmp	r3, #2
 8006780:	f73f aeb1 	bgt.w	80064e6 <_dtoa_r+0x936>
 8006784:	e7b0      	b.n	80066e8 <_dtoa_r+0xb38>
 8006786:	bf00      	nop
 8006788:	080077b0 	.word	0x080077b0
 800678c:	08007710 	.word	0x08007710
 8006790:	08007734 	.word	0x08007734

08006794 <_free_r>:
 8006794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006796:	2900      	cmp	r1, #0
 8006798:	d044      	beq.n	8006824 <_free_r+0x90>
 800679a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679e:	9001      	str	r0, [sp, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f1a1 0404 	sub.w	r4, r1, #4
 80067a6:	bfb8      	it	lt
 80067a8:	18e4      	addlt	r4, r4, r3
 80067aa:	f7fe fb83 	bl	8004eb4 <__malloc_lock>
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <_free_r+0x94>)
 80067b0:	9801      	ldr	r0, [sp, #4]
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	b933      	cbnz	r3, 80067c4 <_free_r+0x30>
 80067b6:	6063      	str	r3, [r4, #4]
 80067b8:	6014      	str	r4, [r2, #0]
 80067ba:	b003      	add	sp, #12
 80067bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c0:	f7fe bb7e 	b.w	8004ec0 <__malloc_unlock>
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	d908      	bls.n	80067da <_free_r+0x46>
 80067c8:	6825      	ldr	r5, [r4, #0]
 80067ca:	1961      	adds	r1, r4, r5
 80067cc:	428b      	cmp	r3, r1
 80067ce:	bf01      	itttt	eq
 80067d0:	6819      	ldreq	r1, [r3, #0]
 80067d2:	685b      	ldreq	r3, [r3, #4]
 80067d4:	1949      	addeq	r1, r1, r5
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	e7ed      	b.n	80067b6 <_free_r+0x22>
 80067da:	461a      	mov	r2, r3
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b10b      	cbz	r3, 80067e4 <_free_r+0x50>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d9fa      	bls.n	80067da <_free_r+0x46>
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	1855      	adds	r5, r2, r1
 80067e8:	42a5      	cmp	r5, r4
 80067ea:	d10b      	bne.n	8006804 <_free_r+0x70>
 80067ec:	6824      	ldr	r4, [r4, #0]
 80067ee:	4421      	add	r1, r4
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	d1e0      	bne.n	80067ba <_free_r+0x26>
 80067f8:	681c      	ldr	r4, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6053      	str	r3, [r2, #4]
 80067fe:	440c      	add	r4, r1
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	e7da      	b.n	80067ba <_free_r+0x26>
 8006804:	d902      	bls.n	800680c <_free_r+0x78>
 8006806:	230c      	movs	r3, #12
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	e7d6      	b.n	80067ba <_free_r+0x26>
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1961      	adds	r1, r4, r5
 8006810:	428b      	cmp	r3, r1
 8006812:	bf04      	itt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	bf04      	itt	eq
 800681c:	1949      	addeq	r1, r1, r5
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	6054      	str	r4, [r2, #4]
 8006822:	e7ca      	b.n	80067ba <_free_r+0x26>
 8006824:	b003      	add	sp, #12
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	20000380 	.word	0x20000380

0800682c <malloc>:
 800682c:	4b02      	ldr	r3, [pc, #8]	; (8006838 <malloc+0xc>)
 800682e:	4601      	mov	r1, r0
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f7fe babf 	b.w	8004db4 <_malloc_r>
 8006836:	bf00      	nop
 8006838:	20000064 	.word	0x20000064

0800683c <_Balloc>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	69c6      	ldr	r6, [r0, #28]
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	b976      	cbnz	r6, 8006864 <_Balloc+0x28>
 8006846:	2010      	movs	r0, #16
 8006848:	f7ff fff0 	bl	800682c <malloc>
 800684c:	4602      	mov	r2, r0
 800684e:	61e0      	str	r0, [r4, #28]
 8006850:	b920      	cbnz	r0, 800685c <_Balloc+0x20>
 8006852:	4b18      	ldr	r3, [pc, #96]	; (80068b4 <_Balloc+0x78>)
 8006854:	4818      	ldr	r0, [pc, #96]	; (80068b8 <_Balloc+0x7c>)
 8006856:	216b      	movs	r1, #107	; 0x6b
 8006858:	f000 fc28 	bl	80070ac <__assert_func>
 800685c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006860:	6006      	str	r6, [r0, #0]
 8006862:	60c6      	str	r6, [r0, #12]
 8006864:	69e6      	ldr	r6, [r4, #28]
 8006866:	68f3      	ldr	r3, [r6, #12]
 8006868:	b183      	cbz	r3, 800688c <_Balloc+0x50>
 800686a:	69e3      	ldr	r3, [r4, #28]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006872:	b9b8      	cbnz	r0, 80068a4 <_Balloc+0x68>
 8006874:	2101      	movs	r1, #1
 8006876:	fa01 f605 	lsl.w	r6, r1, r5
 800687a:	1d72      	adds	r2, r6, #5
 800687c:	0092      	lsls	r2, r2, #2
 800687e:	4620      	mov	r0, r4
 8006880:	f7fe fa61 	bl	8004d46 <_calloc_r>
 8006884:	b160      	cbz	r0, 80068a0 <_Balloc+0x64>
 8006886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800688a:	e00e      	b.n	80068aa <_Balloc+0x6e>
 800688c:	2221      	movs	r2, #33	; 0x21
 800688e:	2104      	movs	r1, #4
 8006890:	4620      	mov	r0, r4
 8006892:	f7fe fa58 	bl	8004d46 <_calloc_r>
 8006896:	69e3      	ldr	r3, [r4, #28]
 8006898:	60f0      	str	r0, [r6, #12]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e4      	bne.n	800686a <_Balloc+0x2e>
 80068a0:	2000      	movs	r0, #0
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	6802      	ldr	r2, [r0, #0]
 80068a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068aa:	2300      	movs	r3, #0
 80068ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068b0:	e7f7      	b.n	80068a2 <_Balloc+0x66>
 80068b2:	bf00      	nop
 80068b4:	08007741 	.word	0x08007741
 80068b8:	080077c1 	.word	0x080077c1

080068bc <_Bfree>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	69c6      	ldr	r6, [r0, #28]
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b976      	cbnz	r6, 80068e4 <_Bfree+0x28>
 80068c6:	2010      	movs	r0, #16
 80068c8:	f7ff ffb0 	bl	800682c <malloc>
 80068cc:	4602      	mov	r2, r0
 80068ce:	61e8      	str	r0, [r5, #28]
 80068d0:	b920      	cbnz	r0, 80068dc <_Bfree+0x20>
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <_Bfree+0x3c>)
 80068d4:	4809      	ldr	r0, [pc, #36]	; (80068fc <_Bfree+0x40>)
 80068d6:	218f      	movs	r1, #143	; 0x8f
 80068d8:	f000 fbe8 	bl	80070ac <__assert_func>
 80068dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e0:	6006      	str	r6, [r0, #0]
 80068e2:	60c6      	str	r6, [r0, #12]
 80068e4:	b13c      	cbz	r4, 80068f6 <_Bfree+0x3a>
 80068e6:	69eb      	ldr	r3, [r5, #28]
 80068e8:	6862      	ldr	r2, [r4, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068f0:	6021      	str	r1, [r4, #0]
 80068f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	08007741 	.word	0x08007741
 80068fc:	080077c1 	.word	0x080077c1

08006900 <__multadd>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	690d      	ldr	r5, [r1, #16]
 8006906:	4607      	mov	r7, r0
 8006908:	460c      	mov	r4, r1
 800690a:	461e      	mov	r6, r3
 800690c:	f101 0c14 	add.w	ip, r1, #20
 8006910:	2000      	movs	r0, #0
 8006912:	f8dc 3000 	ldr.w	r3, [ip]
 8006916:	b299      	uxth	r1, r3
 8006918:	fb02 6101 	mla	r1, r2, r1, r6
 800691c:	0c1e      	lsrs	r6, r3, #16
 800691e:	0c0b      	lsrs	r3, r1, #16
 8006920:	fb02 3306 	mla	r3, r2, r6, r3
 8006924:	b289      	uxth	r1, r1
 8006926:	3001      	adds	r0, #1
 8006928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800692c:	4285      	cmp	r5, r0
 800692e:	f84c 1b04 	str.w	r1, [ip], #4
 8006932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006936:	dcec      	bgt.n	8006912 <__multadd+0x12>
 8006938:	b30e      	cbz	r6, 800697e <__multadd+0x7e>
 800693a:	68a3      	ldr	r3, [r4, #8]
 800693c:	42ab      	cmp	r3, r5
 800693e:	dc19      	bgt.n	8006974 <__multadd+0x74>
 8006940:	6861      	ldr	r1, [r4, #4]
 8006942:	4638      	mov	r0, r7
 8006944:	3101      	adds	r1, #1
 8006946:	f7ff ff79 	bl	800683c <_Balloc>
 800694a:	4680      	mov	r8, r0
 800694c:	b928      	cbnz	r0, 800695a <__multadd+0x5a>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <__multadd+0x84>)
 8006952:	480d      	ldr	r0, [pc, #52]	; (8006988 <__multadd+0x88>)
 8006954:	21ba      	movs	r1, #186	; 0xba
 8006956:	f000 fba9 	bl	80070ac <__assert_func>
 800695a:	6922      	ldr	r2, [r4, #16]
 800695c:	3202      	adds	r2, #2
 800695e:	f104 010c 	add.w	r1, r4, #12
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	300c      	adds	r0, #12
 8006966:	f000 fb93 	bl	8007090 <memcpy>
 800696a:	4621      	mov	r1, r4
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ffa5 	bl	80068bc <_Bfree>
 8006972:	4644      	mov	r4, r8
 8006974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006978:	3501      	adds	r5, #1
 800697a:	615e      	str	r6, [r3, #20]
 800697c:	6125      	str	r5, [r4, #16]
 800697e:	4620      	mov	r0, r4
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006984:	080077b0 	.word	0x080077b0
 8006988:	080077c1 	.word	0x080077c1

0800698c <__hi0bits>:
 800698c:	0c03      	lsrs	r3, r0, #16
 800698e:	041b      	lsls	r3, r3, #16
 8006990:	b9d3      	cbnz	r3, 80069c8 <__hi0bits+0x3c>
 8006992:	0400      	lsls	r0, r0, #16
 8006994:	2310      	movs	r3, #16
 8006996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800699a:	bf04      	itt	eq
 800699c:	0200      	lsleq	r0, r0, #8
 800699e:	3308      	addeq	r3, #8
 80069a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069a4:	bf04      	itt	eq
 80069a6:	0100      	lsleq	r0, r0, #4
 80069a8:	3304      	addeq	r3, #4
 80069aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069ae:	bf04      	itt	eq
 80069b0:	0080      	lsleq	r0, r0, #2
 80069b2:	3302      	addeq	r3, #2
 80069b4:	2800      	cmp	r0, #0
 80069b6:	db05      	blt.n	80069c4 <__hi0bits+0x38>
 80069b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069bc:	f103 0301 	add.w	r3, r3, #1
 80069c0:	bf08      	it	eq
 80069c2:	2320      	moveq	r3, #32
 80069c4:	4618      	mov	r0, r3
 80069c6:	4770      	bx	lr
 80069c8:	2300      	movs	r3, #0
 80069ca:	e7e4      	b.n	8006996 <__hi0bits+0xa>

080069cc <__lo0bits>:
 80069cc:	6803      	ldr	r3, [r0, #0]
 80069ce:	f013 0207 	ands.w	r2, r3, #7
 80069d2:	d00c      	beq.n	80069ee <__lo0bits+0x22>
 80069d4:	07d9      	lsls	r1, r3, #31
 80069d6:	d422      	bmi.n	8006a1e <__lo0bits+0x52>
 80069d8:	079a      	lsls	r2, r3, #30
 80069da:	bf49      	itett	mi
 80069dc:	085b      	lsrmi	r3, r3, #1
 80069de:	089b      	lsrpl	r3, r3, #2
 80069e0:	6003      	strmi	r3, [r0, #0]
 80069e2:	2201      	movmi	r2, #1
 80069e4:	bf5c      	itt	pl
 80069e6:	6003      	strpl	r3, [r0, #0]
 80069e8:	2202      	movpl	r2, #2
 80069ea:	4610      	mov	r0, r2
 80069ec:	4770      	bx	lr
 80069ee:	b299      	uxth	r1, r3
 80069f0:	b909      	cbnz	r1, 80069f6 <__lo0bits+0x2a>
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	2210      	movs	r2, #16
 80069f6:	b2d9      	uxtb	r1, r3
 80069f8:	b909      	cbnz	r1, 80069fe <__lo0bits+0x32>
 80069fa:	3208      	adds	r2, #8
 80069fc:	0a1b      	lsrs	r3, r3, #8
 80069fe:	0719      	lsls	r1, r3, #28
 8006a00:	bf04      	itt	eq
 8006a02:	091b      	lsreq	r3, r3, #4
 8006a04:	3204      	addeq	r2, #4
 8006a06:	0799      	lsls	r1, r3, #30
 8006a08:	bf04      	itt	eq
 8006a0a:	089b      	lsreq	r3, r3, #2
 8006a0c:	3202      	addeq	r2, #2
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d403      	bmi.n	8006a1a <__lo0bits+0x4e>
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	f102 0201 	add.w	r2, r2, #1
 8006a18:	d003      	beq.n	8006a22 <__lo0bits+0x56>
 8006a1a:	6003      	str	r3, [r0, #0]
 8006a1c:	e7e5      	b.n	80069ea <__lo0bits+0x1e>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	e7e3      	b.n	80069ea <__lo0bits+0x1e>
 8006a22:	2220      	movs	r2, #32
 8006a24:	e7e1      	b.n	80069ea <__lo0bits+0x1e>
	...

08006a28 <__i2b>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	f7ff ff05 	bl	800683c <_Balloc>
 8006a32:	4602      	mov	r2, r0
 8006a34:	b928      	cbnz	r0, 8006a42 <__i2b+0x1a>
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <__i2b+0x24>)
 8006a38:	4805      	ldr	r0, [pc, #20]	; (8006a50 <__i2b+0x28>)
 8006a3a:	f240 1145 	movw	r1, #325	; 0x145
 8006a3e:	f000 fb35 	bl	80070ac <__assert_func>
 8006a42:	2301      	movs	r3, #1
 8006a44:	6144      	str	r4, [r0, #20]
 8006a46:	6103      	str	r3, [r0, #16]
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop
 8006a4c:	080077b0 	.word	0x080077b0
 8006a50:	080077c1 	.word	0x080077c1

08006a54 <__multiply>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	4691      	mov	r9, r2
 8006a5a:	690a      	ldr	r2, [r1, #16]
 8006a5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	bfb8      	it	lt
 8006a64:	460b      	movlt	r3, r1
 8006a66:	460c      	mov	r4, r1
 8006a68:	bfbc      	itt	lt
 8006a6a:	464c      	movlt	r4, r9
 8006a6c:	4699      	movlt	r9, r3
 8006a6e:	6927      	ldr	r7, [r4, #16]
 8006a70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a74:	68a3      	ldr	r3, [r4, #8]
 8006a76:	6861      	ldr	r1, [r4, #4]
 8006a78:	eb07 060a 	add.w	r6, r7, sl
 8006a7c:	42b3      	cmp	r3, r6
 8006a7e:	b085      	sub	sp, #20
 8006a80:	bfb8      	it	lt
 8006a82:	3101      	addlt	r1, #1
 8006a84:	f7ff feda 	bl	800683c <_Balloc>
 8006a88:	b930      	cbnz	r0, 8006a98 <__multiply+0x44>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b44      	ldr	r3, [pc, #272]	; (8006ba0 <__multiply+0x14c>)
 8006a8e:	4845      	ldr	r0, [pc, #276]	; (8006ba4 <__multiply+0x150>)
 8006a90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a94:	f000 fb0a 	bl	80070ac <__assert_func>
 8006a98:	f100 0514 	add.w	r5, r0, #20
 8006a9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	4543      	cmp	r3, r8
 8006aa6:	d321      	bcc.n	8006aec <__multiply+0x98>
 8006aa8:	f104 0314 	add.w	r3, r4, #20
 8006aac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ab0:	f109 0314 	add.w	r3, r9, #20
 8006ab4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ab8:	9202      	str	r2, [sp, #8]
 8006aba:	1b3a      	subs	r2, r7, r4
 8006abc:	3a15      	subs	r2, #21
 8006abe:	f022 0203 	bic.w	r2, r2, #3
 8006ac2:	3204      	adds	r2, #4
 8006ac4:	f104 0115 	add.w	r1, r4, #21
 8006ac8:	428f      	cmp	r7, r1
 8006aca:	bf38      	it	cc
 8006acc:	2204      	movcc	r2, #4
 8006ace:	9201      	str	r2, [sp, #4]
 8006ad0:	9a02      	ldr	r2, [sp, #8]
 8006ad2:	9303      	str	r3, [sp, #12]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d80c      	bhi.n	8006af2 <__multiply+0x9e>
 8006ad8:	2e00      	cmp	r6, #0
 8006ada:	dd03      	ble.n	8006ae4 <__multiply+0x90>
 8006adc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d05b      	beq.n	8006b9c <__multiply+0x148>
 8006ae4:	6106      	str	r6, [r0, #16]
 8006ae6:	b005      	add	sp, #20
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aec:	f843 2b04 	str.w	r2, [r3], #4
 8006af0:	e7d8      	b.n	8006aa4 <__multiply+0x50>
 8006af2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006af6:	f1ba 0f00 	cmp.w	sl, #0
 8006afa:	d024      	beq.n	8006b46 <__multiply+0xf2>
 8006afc:	f104 0e14 	add.w	lr, r4, #20
 8006b00:	46a9      	mov	r9, r5
 8006b02:	f04f 0c00 	mov.w	ip, #0
 8006b06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b0a:	f8d9 1000 	ldr.w	r1, [r9]
 8006b0e:	fa1f fb82 	uxth.w	fp, r2
 8006b12:	b289      	uxth	r1, r1
 8006b14:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b20:	4461      	add	r1, ip
 8006b22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b26:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b2e:	b289      	uxth	r1, r1
 8006b30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b34:	4577      	cmp	r7, lr
 8006b36:	f849 1b04 	str.w	r1, [r9], #4
 8006b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b3e:	d8e2      	bhi.n	8006b06 <__multiply+0xb2>
 8006b40:	9a01      	ldr	r2, [sp, #4]
 8006b42:	f845 c002 	str.w	ip, [r5, r2]
 8006b46:	9a03      	ldr	r2, [sp, #12]
 8006b48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	f1b9 0f00 	cmp.w	r9, #0
 8006b52:	d021      	beq.n	8006b98 <__multiply+0x144>
 8006b54:	6829      	ldr	r1, [r5, #0]
 8006b56:	f104 0c14 	add.w	ip, r4, #20
 8006b5a:	46ae      	mov	lr, r5
 8006b5c:	f04f 0a00 	mov.w	sl, #0
 8006b60:	f8bc b000 	ldrh.w	fp, [ip]
 8006b64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b68:	fb09 220b 	mla	r2, r9, fp, r2
 8006b6c:	4452      	add	r2, sl
 8006b6e:	b289      	uxth	r1, r1
 8006b70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b74:	f84e 1b04 	str.w	r1, [lr], #4
 8006b78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b80:	f8be 1000 	ldrh.w	r1, [lr]
 8006b84:	fb09 110a 	mla	r1, r9, sl, r1
 8006b88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b8c:	4567      	cmp	r7, ip
 8006b8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b92:	d8e5      	bhi.n	8006b60 <__multiply+0x10c>
 8006b94:	9a01      	ldr	r2, [sp, #4]
 8006b96:	50a9      	str	r1, [r5, r2]
 8006b98:	3504      	adds	r5, #4
 8006b9a:	e799      	b.n	8006ad0 <__multiply+0x7c>
 8006b9c:	3e01      	subs	r6, #1
 8006b9e:	e79b      	b.n	8006ad8 <__multiply+0x84>
 8006ba0:	080077b0 	.word	0x080077b0
 8006ba4:	080077c1 	.word	0x080077c1

08006ba8 <__pow5mult>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	4615      	mov	r5, r2
 8006bae:	f012 0203 	ands.w	r2, r2, #3
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	d007      	beq.n	8006bc8 <__pow5mult+0x20>
 8006bb8:	4c25      	ldr	r4, [pc, #148]	; (8006c50 <__pow5mult+0xa8>)
 8006bba:	3a01      	subs	r2, #1
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bc2:	f7ff fe9d 	bl	8006900 <__multadd>
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	10ad      	asrs	r5, r5, #2
 8006bca:	d03d      	beq.n	8006c48 <__pow5mult+0xa0>
 8006bcc:	69f4      	ldr	r4, [r6, #28]
 8006bce:	b97c      	cbnz	r4, 8006bf0 <__pow5mult+0x48>
 8006bd0:	2010      	movs	r0, #16
 8006bd2:	f7ff fe2b 	bl	800682c <malloc>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	61f0      	str	r0, [r6, #28]
 8006bda:	b928      	cbnz	r0, 8006be8 <__pow5mult+0x40>
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <__pow5mult+0xac>)
 8006bde:	481e      	ldr	r0, [pc, #120]	; (8006c58 <__pow5mult+0xb0>)
 8006be0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006be4:	f000 fa62 	bl	80070ac <__assert_func>
 8006be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bec:	6004      	str	r4, [r0, #0]
 8006bee:	60c4      	str	r4, [r0, #12]
 8006bf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bf8:	b94c      	cbnz	r4, 8006c0e <__pow5mult+0x66>
 8006bfa:	f240 2171 	movw	r1, #625	; 0x271
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7ff ff12 	bl	8006a28 <__i2b>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	6003      	str	r3, [r0, #0]
 8006c0e:	f04f 0900 	mov.w	r9, #0
 8006c12:	07eb      	lsls	r3, r5, #31
 8006c14:	d50a      	bpl.n	8006c2c <__pow5mult+0x84>
 8006c16:	4639      	mov	r1, r7
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7ff ff1a 	bl	8006a54 <__multiply>
 8006c20:	4639      	mov	r1, r7
 8006c22:	4680      	mov	r8, r0
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff fe49 	bl	80068bc <_Bfree>
 8006c2a:	4647      	mov	r7, r8
 8006c2c:	106d      	asrs	r5, r5, #1
 8006c2e:	d00b      	beq.n	8006c48 <__pow5mult+0xa0>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	b938      	cbnz	r0, 8006c44 <__pow5mult+0x9c>
 8006c34:	4622      	mov	r2, r4
 8006c36:	4621      	mov	r1, r4
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff ff0b 	bl	8006a54 <__multiply>
 8006c3e:	6020      	str	r0, [r4, #0]
 8006c40:	f8c0 9000 	str.w	r9, [r0]
 8006c44:	4604      	mov	r4, r0
 8006c46:	e7e4      	b.n	8006c12 <__pow5mult+0x6a>
 8006c48:	4638      	mov	r0, r7
 8006c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4e:	bf00      	nop
 8006c50:	08007910 	.word	0x08007910
 8006c54:	08007741 	.word	0x08007741
 8006c58:	080077c1 	.word	0x080077c1

08006c5c <__lshift>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	460c      	mov	r4, r1
 8006c62:	6849      	ldr	r1, [r1, #4]
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c6a:	68a3      	ldr	r3, [r4, #8]
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	4691      	mov	r9, r2
 8006c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c74:	f108 0601 	add.w	r6, r8, #1
 8006c78:	42b3      	cmp	r3, r6
 8006c7a:	db0b      	blt.n	8006c94 <__lshift+0x38>
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7ff fddd 	bl	800683c <_Balloc>
 8006c82:	4605      	mov	r5, r0
 8006c84:	b948      	cbnz	r0, 8006c9a <__lshift+0x3e>
 8006c86:	4602      	mov	r2, r0
 8006c88:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <__lshift+0xd0>)
 8006c8a:	4829      	ldr	r0, [pc, #164]	; (8006d30 <__lshift+0xd4>)
 8006c8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c90:	f000 fa0c 	bl	80070ac <__assert_func>
 8006c94:	3101      	adds	r1, #1
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	e7ee      	b.n	8006c78 <__lshift+0x1c>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f100 0114 	add.w	r1, r0, #20
 8006ca0:	f100 0210 	add.w	r2, r0, #16
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	4553      	cmp	r3, sl
 8006ca8:	db33      	blt.n	8006d12 <__lshift+0xb6>
 8006caa:	6920      	ldr	r0, [r4, #16]
 8006cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cb0:	f104 0314 	add.w	r3, r4, #20
 8006cb4:	f019 091f 	ands.w	r9, r9, #31
 8006cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cc0:	d02b      	beq.n	8006d1a <__lshift+0xbe>
 8006cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8006cc6:	468a      	mov	sl, r1
 8006cc8:	2200      	movs	r2, #0
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8006cd0:	4310      	orrs	r0, r2
 8006cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8006cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cda:	459c      	cmp	ip, r3
 8006cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ce0:	d8f3      	bhi.n	8006cca <__lshift+0x6e>
 8006ce2:	ebac 0304 	sub.w	r3, ip, r4
 8006ce6:	3b15      	subs	r3, #21
 8006ce8:	f023 0303 	bic.w	r3, r3, #3
 8006cec:	3304      	adds	r3, #4
 8006cee:	f104 0015 	add.w	r0, r4, #21
 8006cf2:	4584      	cmp	ip, r0
 8006cf4:	bf38      	it	cc
 8006cf6:	2304      	movcc	r3, #4
 8006cf8:	50ca      	str	r2, [r1, r3]
 8006cfa:	b10a      	cbz	r2, 8006d00 <__lshift+0xa4>
 8006cfc:	f108 0602 	add.w	r6, r8, #2
 8006d00:	3e01      	subs	r6, #1
 8006d02:	4638      	mov	r0, r7
 8006d04:	612e      	str	r6, [r5, #16]
 8006d06:	4621      	mov	r1, r4
 8006d08:	f7ff fdd8 	bl	80068bc <_Bfree>
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d16:	3301      	adds	r3, #1
 8006d18:	e7c5      	b.n	8006ca6 <__lshift+0x4a>
 8006d1a:	3904      	subs	r1, #4
 8006d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d24:	459c      	cmp	ip, r3
 8006d26:	d8f9      	bhi.n	8006d1c <__lshift+0xc0>
 8006d28:	e7ea      	b.n	8006d00 <__lshift+0xa4>
 8006d2a:	bf00      	nop
 8006d2c:	080077b0 	.word	0x080077b0
 8006d30:	080077c1 	.word	0x080077c1

08006d34 <__mcmp>:
 8006d34:	b530      	push	{r4, r5, lr}
 8006d36:	6902      	ldr	r2, [r0, #16]
 8006d38:	690c      	ldr	r4, [r1, #16]
 8006d3a:	1b12      	subs	r2, r2, r4
 8006d3c:	d10e      	bne.n	8006d5c <__mcmp+0x28>
 8006d3e:	f100 0314 	add.w	r3, r0, #20
 8006d42:	3114      	adds	r1, #20
 8006d44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d54:	42a5      	cmp	r5, r4
 8006d56:	d003      	beq.n	8006d60 <__mcmp+0x2c>
 8006d58:	d305      	bcc.n	8006d66 <__mcmp+0x32>
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	bd30      	pop	{r4, r5, pc}
 8006d60:	4283      	cmp	r3, r0
 8006d62:	d3f3      	bcc.n	8006d4c <__mcmp+0x18>
 8006d64:	e7fa      	b.n	8006d5c <__mcmp+0x28>
 8006d66:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6a:	e7f7      	b.n	8006d5c <__mcmp+0x28>

08006d6c <__mdiff>:
 8006d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	460c      	mov	r4, r1
 8006d72:	4606      	mov	r6, r0
 8006d74:	4611      	mov	r1, r2
 8006d76:	4620      	mov	r0, r4
 8006d78:	4690      	mov	r8, r2
 8006d7a:	f7ff ffdb 	bl	8006d34 <__mcmp>
 8006d7e:	1e05      	subs	r5, r0, #0
 8006d80:	d110      	bne.n	8006da4 <__mdiff+0x38>
 8006d82:	4629      	mov	r1, r5
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff fd59 	bl	800683c <_Balloc>
 8006d8a:	b930      	cbnz	r0, 8006d9a <__mdiff+0x2e>
 8006d8c:	4b3a      	ldr	r3, [pc, #232]	; (8006e78 <__mdiff+0x10c>)
 8006d8e:	4602      	mov	r2, r0
 8006d90:	f240 2137 	movw	r1, #567	; 0x237
 8006d94:	4839      	ldr	r0, [pc, #228]	; (8006e7c <__mdiff+0x110>)
 8006d96:	f000 f989 	bl	80070ac <__assert_func>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da4:	bfa4      	itt	ge
 8006da6:	4643      	movge	r3, r8
 8006da8:	46a0      	movge	r8, r4
 8006daa:	4630      	mov	r0, r6
 8006dac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006db0:	bfa6      	itte	ge
 8006db2:	461c      	movge	r4, r3
 8006db4:	2500      	movge	r5, #0
 8006db6:	2501      	movlt	r5, #1
 8006db8:	f7ff fd40 	bl	800683c <_Balloc>
 8006dbc:	b920      	cbnz	r0, 8006dc8 <__mdiff+0x5c>
 8006dbe:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <__mdiff+0x10c>)
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	f240 2145 	movw	r1, #581	; 0x245
 8006dc6:	e7e5      	b.n	8006d94 <__mdiff+0x28>
 8006dc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006dcc:	6926      	ldr	r6, [r4, #16]
 8006dce:	60c5      	str	r5, [r0, #12]
 8006dd0:	f104 0914 	add.w	r9, r4, #20
 8006dd4:	f108 0514 	add.w	r5, r8, #20
 8006dd8:	f100 0e14 	add.w	lr, r0, #20
 8006ddc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006de0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006de4:	f108 0210 	add.w	r2, r8, #16
 8006de8:	46f2      	mov	sl, lr
 8006dea:	2100      	movs	r1, #0
 8006dec:	f859 3b04 	ldr.w	r3, [r9], #4
 8006df0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006df4:	fa11 f88b 	uxtah	r8, r1, fp
 8006df8:	b299      	uxth	r1, r3
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	eba8 0801 	sub.w	r8, r8, r1
 8006e00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e08:	fa1f f888 	uxth.w	r8, r8
 8006e0c:	1419      	asrs	r1, r3, #16
 8006e0e:	454e      	cmp	r6, r9
 8006e10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e14:	f84a 3b04 	str.w	r3, [sl], #4
 8006e18:	d8e8      	bhi.n	8006dec <__mdiff+0x80>
 8006e1a:	1b33      	subs	r3, r6, r4
 8006e1c:	3b15      	subs	r3, #21
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	3304      	adds	r3, #4
 8006e24:	3415      	adds	r4, #21
 8006e26:	42a6      	cmp	r6, r4
 8006e28:	bf38      	it	cc
 8006e2a:	2304      	movcc	r3, #4
 8006e2c:	441d      	add	r5, r3
 8006e2e:	4473      	add	r3, lr
 8006e30:	469e      	mov	lr, r3
 8006e32:	462e      	mov	r6, r5
 8006e34:	4566      	cmp	r6, ip
 8006e36:	d30e      	bcc.n	8006e56 <__mdiff+0xea>
 8006e38:	f10c 0203 	add.w	r2, ip, #3
 8006e3c:	1b52      	subs	r2, r2, r5
 8006e3e:	f022 0203 	bic.w	r2, r2, #3
 8006e42:	3d03      	subs	r5, #3
 8006e44:	45ac      	cmp	ip, r5
 8006e46:	bf38      	it	cc
 8006e48:	2200      	movcc	r2, #0
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e50:	b17a      	cbz	r2, 8006e72 <__mdiff+0x106>
 8006e52:	6107      	str	r7, [r0, #16]
 8006e54:	e7a4      	b.n	8006da0 <__mdiff+0x34>
 8006e56:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e5a:	fa11 f288 	uxtah	r2, r1, r8
 8006e5e:	1414      	asrs	r4, r2, #16
 8006e60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e64:	b292      	uxth	r2, r2
 8006e66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e6a:	f84e 2b04 	str.w	r2, [lr], #4
 8006e6e:	1421      	asrs	r1, r4, #16
 8006e70:	e7e0      	b.n	8006e34 <__mdiff+0xc8>
 8006e72:	3f01      	subs	r7, #1
 8006e74:	e7ea      	b.n	8006e4c <__mdiff+0xe0>
 8006e76:	bf00      	nop
 8006e78:	080077b0 	.word	0x080077b0
 8006e7c:	080077c1 	.word	0x080077c1

08006e80 <__d2b>:
 8006e80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e84:	460f      	mov	r7, r1
 8006e86:	2101      	movs	r1, #1
 8006e88:	ec59 8b10 	vmov	r8, r9, d0
 8006e8c:	4616      	mov	r6, r2
 8006e8e:	f7ff fcd5 	bl	800683c <_Balloc>
 8006e92:	4604      	mov	r4, r0
 8006e94:	b930      	cbnz	r0, 8006ea4 <__d2b+0x24>
 8006e96:	4602      	mov	r2, r0
 8006e98:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <__d2b+0xac>)
 8006e9a:	4825      	ldr	r0, [pc, #148]	; (8006f30 <__d2b+0xb0>)
 8006e9c:	f240 310f 	movw	r1, #783	; 0x30f
 8006ea0:	f000 f904 	bl	80070ac <__assert_func>
 8006ea4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eac:	bb2d      	cbnz	r5, 8006efa <__d2b+0x7a>
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006eb4:	d026      	beq.n	8006f04 <__d2b+0x84>
 8006eb6:	4668      	mov	r0, sp
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	f7ff fd87 	bl	80069cc <__lo0bits>
 8006ebe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ec2:	b1e8      	cbz	r0, 8006f00 <__d2b+0x80>
 8006ec4:	f1c0 0320 	rsb	r3, r0, #32
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	40c2      	lsrs	r2, r0
 8006ed0:	6163      	str	r3, [r4, #20]
 8006ed2:	9201      	str	r2, [sp, #4]
 8006ed4:	9b01      	ldr	r3, [sp, #4]
 8006ed6:	61a3      	str	r3, [r4, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf14      	ite	ne
 8006edc:	2202      	movne	r2, #2
 8006ede:	2201      	moveq	r2, #1
 8006ee0:	6122      	str	r2, [r4, #16]
 8006ee2:	b1bd      	cbz	r5, 8006f14 <__d2b+0x94>
 8006ee4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ee8:	4405      	add	r5, r0
 8006eea:	603d      	str	r5, [r7, #0]
 8006eec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	b003      	add	sp, #12
 8006ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006efe:	e7d6      	b.n	8006eae <__d2b+0x2e>
 8006f00:	6161      	str	r1, [r4, #20]
 8006f02:	e7e7      	b.n	8006ed4 <__d2b+0x54>
 8006f04:	a801      	add	r0, sp, #4
 8006f06:	f7ff fd61 	bl	80069cc <__lo0bits>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	6163      	str	r3, [r4, #20]
 8006f0e:	3020      	adds	r0, #32
 8006f10:	2201      	movs	r2, #1
 8006f12:	e7e5      	b.n	8006ee0 <__d2b+0x60>
 8006f14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f1c:	6038      	str	r0, [r7, #0]
 8006f1e:	6918      	ldr	r0, [r3, #16]
 8006f20:	f7ff fd34 	bl	800698c <__hi0bits>
 8006f24:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f28:	e7e2      	b.n	8006ef0 <__d2b+0x70>
 8006f2a:	bf00      	nop
 8006f2c:	080077b0 	.word	0x080077b0
 8006f30:	080077c1 	.word	0x080077c1

08006f34 <__sflush_r>:
 8006f34:	898a      	ldrh	r2, [r1, #12]
 8006f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	0710      	lsls	r0, r2, #28
 8006f3e:	460c      	mov	r4, r1
 8006f40:	d458      	bmi.n	8006ff4 <__sflush_r+0xc0>
 8006f42:	684b      	ldr	r3, [r1, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dc05      	bgt.n	8006f54 <__sflush_r+0x20>
 8006f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dc02      	bgt.n	8006f54 <__sflush_r+0x20>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	d0f9      	beq.n	8006f4e <__sflush_r+0x1a>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f60:	682f      	ldr	r7, [r5, #0]
 8006f62:	6a21      	ldr	r1, [r4, #32]
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	d032      	beq.n	8006fce <__sflush_r+0x9a>
 8006f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	075a      	lsls	r2, r3, #29
 8006f6e:	d505      	bpl.n	8006f7c <__sflush_r+0x48>
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	1ac0      	subs	r0, r0, r3
 8006f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f76:	b10b      	cbz	r3, 8006f7c <__sflush_r+0x48>
 8006f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f7a:	1ac0      	subs	r0, r0, r3
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4602      	mov	r2, r0
 8006f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f82:	6a21      	ldr	r1, [r4, #32]
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b0      	blx	r6
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	d106      	bne.n	8006f9c <__sflush_r+0x68>
 8006f8e:	6829      	ldr	r1, [r5, #0]
 8006f90:	291d      	cmp	r1, #29
 8006f92:	d82b      	bhi.n	8006fec <__sflush_r+0xb8>
 8006f94:	4a29      	ldr	r2, [pc, #164]	; (800703c <__sflush_r+0x108>)
 8006f96:	410a      	asrs	r2, r1
 8006f98:	07d6      	lsls	r6, r2, #31
 8006f9a:	d427      	bmi.n	8006fec <__sflush_r+0xb8>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	6062      	str	r2, [r4, #4]
 8006fa0:	04d9      	lsls	r1, r3, #19
 8006fa2:	6922      	ldr	r2, [r4, #16]
 8006fa4:	6022      	str	r2, [r4, #0]
 8006fa6:	d504      	bpl.n	8006fb2 <__sflush_r+0x7e>
 8006fa8:	1c42      	adds	r2, r0, #1
 8006faa:	d101      	bne.n	8006fb0 <__sflush_r+0x7c>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b903      	cbnz	r3, 8006fb2 <__sflush_r+0x7e>
 8006fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8006fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fb4:	602f      	str	r7, [r5, #0]
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	d0c9      	beq.n	8006f4e <__sflush_r+0x1a>
 8006fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fbe:	4299      	cmp	r1, r3
 8006fc0:	d002      	beq.n	8006fc8 <__sflush_r+0x94>
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7ff fbe6 	bl	8006794 <_free_r>
 8006fc8:	2000      	movs	r0, #0
 8006fca:	6360      	str	r0, [r4, #52]	; 0x34
 8006fcc:	e7c0      	b.n	8006f50 <__sflush_r+0x1c>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b0      	blx	r6
 8006fd4:	1c41      	adds	r1, r0, #1
 8006fd6:	d1c8      	bne.n	8006f6a <__sflush_r+0x36>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0c5      	beq.n	8006f6a <__sflush_r+0x36>
 8006fde:	2b1d      	cmp	r3, #29
 8006fe0:	d001      	beq.n	8006fe6 <__sflush_r+0xb2>
 8006fe2:	2b16      	cmp	r3, #22
 8006fe4:	d101      	bne.n	8006fea <__sflush_r+0xb6>
 8006fe6:	602f      	str	r7, [r5, #0]
 8006fe8:	e7b1      	b.n	8006f4e <__sflush_r+0x1a>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff0:	81a3      	strh	r3, [r4, #12]
 8006ff2:	e7ad      	b.n	8006f50 <__sflush_r+0x1c>
 8006ff4:	690f      	ldr	r7, [r1, #16]
 8006ff6:	2f00      	cmp	r7, #0
 8006ff8:	d0a9      	beq.n	8006f4e <__sflush_r+0x1a>
 8006ffa:	0793      	lsls	r3, r2, #30
 8006ffc:	680e      	ldr	r6, [r1, #0]
 8006ffe:	bf08      	it	eq
 8007000:	694b      	ldreq	r3, [r1, #20]
 8007002:	600f      	str	r7, [r1, #0]
 8007004:	bf18      	it	ne
 8007006:	2300      	movne	r3, #0
 8007008:	eba6 0807 	sub.w	r8, r6, r7
 800700c:	608b      	str	r3, [r1, #8]
 800700e:	f1b8 0f00 	cmp.w	r8, #0
 8007012:	dd9c      	ble.n	8006f4e <__sflush_r+0x1a>
 8007014:	6a21      	ldr	r1, [r4, #32]
 8007016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007018:	4643      	mov	r3, r8
 800701a:	463a      	mov	r2, r7
 800701c:	4628      	mov	r0, r5
 800701e:	47b0      	blx	r6
 8007020:	2800      	cmp	r0, #0
 8007022:	dc06      	bgt.n	8007032 <__sflush_r+0xfe>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702a:	81a3      	strh	r3, [r4, #12]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e78e      	b.n	8006f50 <__sflush_r+0x1c>
 8007032:	4407      	add	r7, r0
 8007034:	eba8 0800 	sub.w	r8, r8, r0
 8007038:	e7e9      	b.n	800700e <__sflush_r+0xda>
 800703a:	bf00      	nop
 800703c:	dfbffffe 	.word	0xdfbffffe

08007040 <_fflush_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	690b      	ldr	r3, [r1, #16]
 8007044:	4605      	mov	r5, r0
 8007046:	460c      	mov	r4, r1
 8007048:	b913      	cbnz	r3, 8007050 <_fflush_r+0x10>
 800704a:	2500      	movs	r5, #0
 800704c:	4628      	mov	r0, r5
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	b118      	cbz	r0, 800705a <_fflush_r+0x1a>
 8007052:	6a03      	ldr	r3, [r0, #32]
 8007054:	b90b      	cbnz	r3, 800705a <_fflush_r+0x1a>
 8007056:	f7fe fc19 	bl	800588c <__sinit>
 800705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0f3      	beq.n	800704a <_fflush_r+0xa>
 8007062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007064:	07d0      	lsls	r0, r2, #31
 8007066:	d404      	bmi.n	8007072 <_fflush_r+0x32>
 8007068:	0599      	lsls	r1, r3, #22
 800706a:	d402      	bmi.n	8007072 <_fflush_r+0x32>
 800706c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800706e:	f7fe fd13 	bl	8005a98 <__retarget_lock_acquire_recursive>
 8007072:	4628      	mov	r0, r5
 8007074:	4621      	mov	r1, r4
 8007076:	f7ff ff5d 	bl	8006f34 <__sflush_r>
 800707a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800707c:	07da      	lsls	r2, r3, #31
 800707e:	4605      	mov	r5, r0
 8007080:	d4e4      	bmi.n	800704c <_fflush_r+0xc>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	059b      	lsls	r3, r3, #22
 8007086:	d4e1      	bmi.n	800704c <_fflush_r+0xc>
 8007088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800708a:	f7fe fd06 	bl	8005a9a <__retarget_lock_release_recursive>
 800708e:	e7dd      	b.n	800704c <_fflush_r+0xc>

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <__assert_func>:
 80070ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ae:	4614      	mov	r4, r2
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <__assert_func+0x2c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4605      	mov	r5, r0
 80070b8:	68d8      	ldr	r0, [r3, #12]
 80070ba:	b14c      	cbz	r4, 80070d0 <__assert_func+0x24>
 80070bc:	4b07      	ldr	r3, [pc, #28]	; (80070dc <__assert_func+0x30>)
 80070be:	9100      	str	r1, [sp, #0]
 80070c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070c4:	4906      	ldr	r1, [pc, #24]	; (80070e0 <__assert_func+0x34>)
 80070c6:	462b      	mov	r3, r5
 80070c8:	f000 f82e 	bl	8007128 <fiprintf>
 80070cc:	f000 f83e 	bl	800714c <abort>
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <__assert_func+0x38>)
 80070d2:	461c      	mov	r4, r3
 80070d4:	e7f3      	b.n	80070be <__assert_func+0x12>
 80070d6:	bf00      	nop
 80070d8:	20000064 	.word	0x20000064
 80070dc:	08007926 	.word	0x08007926
 80070e0:	08007933 	.word	0x08007933
 80070e4:	08007961 	.word	0x08007961

080070e8 <__ascii_mbtowc>:
 80070e8:	b082      	sub	sp, #8
 80070ea:	b901      	cbnz	r1, 80070ee <__ascii_mbtowc+0x6>
 80070ec:	a901      	add	r1, sp, #4
 80070ee:	b142      	cbz	r2, 8007102 <__ascii_mbtowc+0x1a>
 80070f0:	b14b      	cbz	r3, 8007106 <__ascii_mbtowc+0x1e>
 80070f2:	7813      	ldrb	r3, [r2, #0]
 80070f4:	600b      	str	r3, [r1, #0]
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	1e10      	subs	r0, r2, #0
 80070fa:	bf18      	it	ne
 80070fc:	2001      	movne	r0, #1
 80070fe:	b002      	add	sp, #8
 8007100:	4770      	bx	lr
 8007102:	4610      	mov	r0, r2
 8007104:	e7fb      	b.n	80070fe <__ascii_mbtowc+0x16>
 8007106:	f06f 0001 	mvn.w	r0, #1
 800710a:	e7f8      	b.n	80070fe <__ascii_mbtowc+0x16>

0800710c <__ascii_wctomb>:
 800710c:	b149      	cbz	r1, 8007122 <__ascii_wctomb+0x16>
 800710e:	2aff      	cmp	r2, #255	; 0xff
 8007110:	bf85      	ittet	hi
 8007112:	238a      	movhi	r3, #138	; 0x8a
 8007114:	6003      	strhi	r3, [r0, #0]
 8007116:	700a      	strbls	r2, [r1, #0]
 8007118:	f04f 30ff 	movhi.w	r0, #4294967295
 800711c:	bf98      	it	ls
 800711e:	2001      	movls	r0, #1
 8007120:	4770      	bx	lr
 8007122:	4608      	mov	r0, r1
 8007124:	4770      	bx	lr
	...

08007128 <fiprintf>:
 8007128:	b40e      	push	{r1, r2, r3}
 800712a:	b503      	push	{r0, r1, lr}
 800712c:	4601      	mov	r1, r0
 800712e:	ab03      	add	r3, sp, #12
 8007130:	4805      	ldr	r0, [pc, #20]	; (8007148 <fiprintf+0x20>)
 8007132:	f853 2b04 	ldr.w	r2, [r3], #4
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	f000 f837 	bl	80071ac <_vfiprintf_r>
 800713e:	b002      	add	sp, #8
 8007140:	f85d eb04 	ldr.w	lr, [sp], #4
 8007144:	b003      	add	sp, #12
 8007146:	4770      	bx	lr
 8007148:	20000064 	.word	0x20000064

0800714c <abort>:
 800714c:	b508      	push	{r3, lr}
 800714e:	2006      	movs	r0, #6
 8007150:	f000 fa04 	bl	800755c <raise>
 8007154:	2001      	movs	r0, #1
 8007156:	f7fa fa1b 	bl	8001590 <_exit>

0800715a <__sfputc_r>:
 800715a:	6893      	ldr	r3, [r2, #8]
 800715c:	3b01      	subs	r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	b410      	push	{r4}
 8007162:	6093      	str	r3, [r2, #8]
 8007164:	da08      	bge.n	8007178 <__sfputc_r+0x1e>
 8007166:	6994      	ldr	r4, [r2, #24]
 8007168:	42a3      	cmp	r3, r4
 800716a:	db01      	blt.n	8007170 <__sfputc_r+0x16>
 800716c:	290a      	cmp	r1, #10
 800716e:	d103      	bne.n	8007178 <__sfputc_r+0x1e>
 8007170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007174:	f000 b934 	b.w	80073e0 <__swbuf_r>
 8007178:	6813      	ldr	r3, [r2, #0]
 800717a:	1c58      	adds	r0, r3, #1
 800717c:	6010      	str	r0, [r2, #0]
 800717e:	7019      	strb	r1, [r3, #0]
 8007180:	4608      	mov	r0, r1
 8007182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007186:	4770      	bx	lr

08007188 <__sfputs_r>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	4606      	mov	r6, r0
 800718c:	460f      	mov	r7, r1
 800718e:	4614      	mov	r4, r2
 8007190:	18d5      	adds	r5, r2, r3
 8007192:	42ac      	cmp	r4, r5
 8007194:	d101      	bne.n	800719a <__sfputs_r+0x12>
 8007196:	2000      	movs	r0, #0
 8007198:	e007      	b.n	80071aa <__sfputs_r+0x22>
 800719a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719e:	463a      	mov	r2, r7
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7ff ffda 	bl	800715a <__sfputc_r>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	d1f3      	bne.n	8007192 <__sfputs_r+0xa>
 80071aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071ac <_vfiprintf_r>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460d      	mov	r5, r1
 80071b2:	b09d      	sub	sp, #116	; 0x74
 80071b4:	4614      	mov	r4, r2
 80071b6:	4698      	mov	r8, r3
 80071b8:	4606      	mov	r6, r0
 80071ba:	b118      	cbz	r0, 80071c4 <_vfiprintf_r+0x18>
 80071bc:	6a03      	ldr	r3, [r0, #32]
 80071be:	b90b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x18>
 80071c0:	f7fe fb64 	bl	800588c <__sinit>
 80071c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c6:	07d9      	lsls	r1, r3, #31
 80071c8:	d405      	bmi.n	80071d6 <_vfiprintf_r+0x2a>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	059a      	lsls	r2, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_vfiprintf_r+0x2a>
 80071d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071d2:	f7fe fc61 	bl	8005a98 <__retarget_lock_acquire_recursive>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	071b      	lsls	r3, r3, #28
 80071da:	d501      	bpl.n	80071e0 <_vfiprintf_r+0x34>
 80071dc:	692b      	ldr	r3, [r5, #16]
 80071de:	b99b      	cbnz	r3, 8007208 <_vfiprintf_r+0x5c>
 80071e0:	4629      	mov	r1, r5
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f93a 	bl	800745c <__swsetup_r>
 80071e8:	b170      	cbz	r0, 8007208 <_vfiprintf_r+0x5c>
 80071ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ec:	07dc      	lsls	r4, r3, #31
 80071ee:	d504      	bpl.n	80071fa <_vfiprintf_r+0x4e>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	b01d      	add	sp, #116	; 0x74
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	0598      	lsls	r0, r3, #22
 80071fe:	d4f7      	bmi.n	80071f0 <_vfiprintf_r+0x44>
 8007200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007202:	f7fe fc4a 	bl	8005a9a <__retarget_lock_release_recursive>
 8007206:	e7f3      	b.n	80071f0 <_vfiprintf_r+0x44>
 8007208:	2300      	movs	r3, #0
 800720a:	9309      	str	r3, [sp, #36]	; 0x24
 800720c:	2320      	movs	r3, #32
 800720e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007212:	f8cd 800c 	str.w	r8, [sp, #12]
 8007216:	2330      	movs	r3, #48	; 0x30
 8007218:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073cc <_vfiprintf_r+0x220>
 800721c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007220:	f04f 0901 	mov.w	r9, #1
 8007224:	4623      	mov	r3, r4
 8007226:	469a      	mov	sl, r3
 8007228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722c:	b10a      	cbz	r2, 8007232 <_vfiprintf_r+0x86>
 800722e:	2a25      	cmp	r2, #37	; 0x25
 8007230:	d1f9      	bne.n	8007226 <_vfiprintf_r+0x7a>
 8007232:	ebba 0b04 	subs.w	fp, sl, r4
 8007236:	d00b      	beq.n	8007250 <_vfiprintf_r+0xa4>
 8007238:	465b      	mov	r3, fp
 800723a:	4622      	mov	r2, r4
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f7ff ffa2 	bl	8007188 <__sfputs_r>
 8007244:	3001      	adds	r0, #1
 8007246:	f000 80a9 	beq.w	800739c <_vfiprintf_r+0x1f0>
 800724a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724c:	445a      	add	r2, fp
 800724e:	9209      	str	r2, [sp, #36]	; 0x24
 8007250:	f89a 3000 	ldrb.w	r3, [sl]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80a1 	beq.w	800739c <_vfiprintf_r+0x1f0>
 800725a:	2300      	movs	r3, #0
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007264:	f10a 0a01 	add.w	sl, sl, #1
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	9307      	str	r3, [sp, #28]
 800726c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007270:	931a      	str	r3, [sp, #104]	; 0x68
 8007272:	4654      	mov	r4, sl
 8007274:	2205      	movs	r2, #5
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4854      	ldr	r0, [pc, #336]	; (80073cc <_vfiprintf_r+0x220>)
 800727c:	f7f8 ffa8 	bl	80001d0 <memchr>
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	b9d8      	cbnz	r0, 80072bc <_vfiprintf_r+0x110>
 8007284:	06d1      	lsls	r1, r2, #27
 8007286:	bf44      	itt	mi
 8007288:	2320      	movmi	r3, #32
 800728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728e:	0713      	lsls	r3, r2, #28
 8007290:	bf44      	itt	mi
 8007292:	232b      	movmi	r3, #43	; 0x2b
 8007294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007298:	f89a 3000 	ldrb.w	r3, [sl]
 800729c:	2b2a      	cmp	r3, #42	; 0x2a
 800729e:	d015      	beq.n	80072cc <_vfiprintf_r+0x120>
 80072a0:	9a07      	ldr	r2, [sp, #28]
 80072a2:	4654      	mov	r4, sl
 80072a4:	2000      	movs	r0, #0
 80072a6:	f04f 0c0a 	mov.w	ip, #10
 80072aa:	4621      	mov	r1, r4
 80072ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b0:	3b30      	subs	r3, #48	; 0x30
 80072b2:	2b09      	cmp	r3, #9
 80072b4:	d94d      	bls.n	8007352 <_vfiprintf_r+0x1a6>
 80072b6:	b1b0      	cbz	r0, 80072e6 <_vfiprintf_r+0x13a>
 80072b8:	9207      	str	r2, [sp, #28]
 80072ba:	e014      	b.n	80072e6 <_vfiprintf_r+0x13a>
 80072bc:	eba0 0308 	sub.w	r3, r0, r8
 80072c0:	fa09 f303 	lsl.w	r3, r9, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	46a2      	mov	sl, r4
 80072ca:	e7d2      	b.n	8007272 <_vfiprintf_r+0xc6>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1d19      	adds	r1, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfbb      	ittet	lt
 80072d8:	425b      	neglt	r3, r3
 80072da:	f042 0202 	orrlt.w	r2, r2, #2
 80072de:	9307      	strge	r3, [sp, #28]
 80072e0:	9307      	strlt	r3, [sp, #28]
 80072e2:	bfb8      	it	lt
 80072e4:	9204      	strlt	r2, [sp, #16]
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	2b2e      	cmp	r3, #46	; 0x2e
 80072ea:	d10c      	bne.n	8007306 <_vfiprintf_r+0x15a>
 80072ec:	7863      	ldrb	r3, [r4, #1]
 80072ee:	2b2a      	cmp	r3, #42	; 0x2a
 80072f0:	d134      	bne.n	800735c <_vfiprintf_r+0x1b0>
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	1d1a      	adds	r2, r3, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	9203      	str	r2, [sp, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bfb8      	it	lt
 80072fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007302:	3402      	adds	r4, #2
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073dc <_vfiprintf_r+0x230>
 800730a:	7821      	ldrb	r1, [r4, #0]
 800730c:	2203      	movs	r2, #3
 800730e:	4650      	mov	r0, sl
 8007310:	f7f8 ff5e 	bl	80001d0 <memchr>
 8007314:	b138      	cbz	r0, 8007326 <_vfiprintf_r+0x17a>
 8007316:	9b04      	ldr	r3, [sp, #16]
 8007318:	eba0 000a 	sub.w	r0, r0, sl
 800731c:	2240      	movs	r2, #64	; 0x40
 800731e:	4082      	lsls	r2, r0
 8007320:	4313      	orrs	r3, r2
 8007322:	3401      	adds	r4, #1
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732a:	4829      	ldr	r0, [pc, #164]	; (80073d0 <_vfiprintf_r+0x224>)
 800732c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007330:	2206      	movs	r2, #6
 8007332:	f7f8 ff4d 	bl	80001d0 <memchr>
 8007336:	2800      	cmp	r0, #0
 8007338:	d03f      	beq.n	80073ba <_vfiprintf_r+0x20e>
 800733a:	4b26      	ldr	r3, [pc, #152]	; (80073d4 <_vfiprintf_r+0x228>)
 800733c:	bb1b      	cbnz	r3, 8007386 <_vfiprintf_r+0x1da>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	3307      	adds	r3, #7
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	3308      	adds	r3, #8
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734c:	443b      	add	r3, r7
 800734e:	9309      	str	r3, [sp, #36]	; 0x24
 8007350:	e768      	b.n	8007224 <_vfiprintf_r+0x78>
 8007352:	fb0c 3202 	mla	r2, ip, r2, r3
 8007356:	460c      	mov	r4, r1
 8007358:	2001      	movs	r0, #1
 800735a:	e7a6      	b.n	80072aa <_vfiprintf_r+0xfe>
 800735c:	2300      	movs	r3, #0
 800735e:	3401      	adds	r4, #1
 8007360:	9305      	str	r3, [sp, #20]
 8007362:	4619      	mov	r1, r3
 8007364:	f04f 0c0a 	mov.w	ip, #10
 8007368:	4620      	mov	r0, r4
 800736a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736e:	3a30      	subs	r2, #48	; 0x30
 8007370:	2a09      	cmp	r2, #9
 8007372:	d903      	bls.n	800737c <_vfiprintf_r+0x1d0>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0c6      	beq.n	8007306 <_vfiprintf_r+0x15a>
 8007378:	9105      	str	r1, [sp, #20]
 800737a:	e7c4      	b.n	8007306 <_vfiprintf_r+0x15a>
 800737c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007380:	4604      	mov	r4, r0
 8007382:	2301      	movs	r3, #1
 8007384:	e7f0      	b.n	8007368 <_vfiprintf_r+0x1bc>
 8007386:	ab03      	add	r3, sp, #12
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	462a      	mov	r2, r5
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <_vfiprintf_r+0x22c>)
 800738e:	a904      	add	r1, sp, #16
 8007390:	4630      	mov	r0, r6
 8007392:	f7fd fe3b 	bl	800500c <_printf_float>
 8007396:	4607      	mov	r7, r0
 8007398:	1c78      	adds	r0, r7, #1
 800739a:	d1d6      	bne.n	800734a <_vfiprintf_r+0x19e>
 800739c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800739e:	07d9      	lsls	r1, r3, #31
 80073a0:	d405      	bmi.n	80073ae <_vfiprintf_r+0x202>
 80073a2:	89ab      	ldrh	r3, [r5, #12]
 80073a4:	059a      	lsls	r2, r3, #22
 80073a6:	d402      	bmi.n	80073ae <_vfiprintf_r+0x202>
 80073a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073aa:	f7fe fb76 	bl	8005a9a <__retarget_lock_release_recursive>
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	065b      	lsls	r3, r3, #25
 80073b2:	f53f af1d 	bmi.w	80071f0 <_vfiprintf_r+0x44>
 80073b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b8:	e71c      	b.n	80071f4 <_vfiprintf_r+0x48>
 80073ba:	ab03      	add	r3, sp, #12
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	462a      	mov	r2, r5
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <_vfiprintf_r+0x22c>)
 80073c2:	a904      	add	r1, sp, #16
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7fe f8c5 	bl	8005554 <_printf_i>
 80073ca:	e7e4      	b.n	8007396 <_vfiprintf_r+0x1ea>
 80073cc:	08007a63 	.word	0x08007a63
 80073d0:	08007a6d 	.word	0x08007a6d
 80073d4:	0800500d 	.word	0x0800500d
 80073d8:	08007189 	.word	0x08007189
 80073dc:	08007a69 	.word	0x08007a69

080073e0 <__swbuf_r>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	460e      	mov	r6, r1
 80073e4:	4614      	mov	r4, r2
 80073e6:	4605      	mov	r5, r0
 80073e8:	b118      	cbz	r0, 80073f2 <__swbuf_r+0x12>
 80073ea:	6a03      	ldr	r3, [r0, #32]
 80073ec:	b90b      	cbnz	r3, 80073f2 <__swbuf_r+0x12>
 80073ee:	f7fe fa4d 	bl	800588c <__sinit>
 80073f2:	69a3      	ldr	r3, [r4, #24]
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	071a      	lsls	r2, r3, #28
 80073fa:	d525      	bpl.n	8007448 <__swbuf_r+0x68>
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	b31b      	cbz	r3, 8007448 <__swbuf_r+0x68>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	6922      	ldr	r2, [r4, #16]
 8007404:	1a98      	subs	r0, r3, r2
 8007406:	6963      	ldr	r3, [r4, #20]
 8007408:	b2f6      	uxtb	r6, r6
 800740a:	4283      	cmp	r3, r0
 800740c:	4637      	mov	r7, r6
 800740e:	dc04      	bgt.n	800741a <__swbuf_r+0x3a>
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f7ff fe14 	bl	8007040 <_fflush_r>
 8007418:	b9e0      	cbnz	r0, 8007454 <__swbuf_r+0x74>
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	3b01      	subs	r3, #1
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	6022      	str	r2, [r4, #0]
 8007426:	701e      	strb	r6, [r3, #0]
 8007428:	6962      	ldr	r2, [r4, #20]
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	429a      	cmp	r2, r3
 800742e:	d004      	beq.n	800743a <__swbuf_r+0x5a>
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	07db      	lsls	r3, r3, #31
 8007434:	d506      	bpl.n	8007444 <__swbuf_r+0x64>
 8007436:	2e0a      	cmp	r6, #10
 8007438:	d104      	bne.n	8007444 <__swbuf_r+0x64>
 800743a:	4621      	mov	r1, r4
 800743c:	4628      	mov	r0, r5
 800743e:	f7ff fdff 	bl	8007040 <_fflush_r>
 8007442:	b938      	cbnz	r0, 8007454 <__swbuf_r+0x74>
 8007444:	4638      	mov	r0, r7
 8007446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	f000 f806 	bl	800745c <__swsetup_r>
 8007450:	2800      	cmp	r0, #0
 8007452:	d0d5      	beq.n	8007400 <__swbuf_r+0x20>
 8007454:	f04f 37ff 	mov.w	r7, #4294967295
 8007458:	e7f4      	b.n	8007444 <__swbuf_r+0x64>
	...

0800745c <__swsetup_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4b2a      	ldr	r3, [pc, #168]	; (8007508 <__swsetup_r+0xac>)
 8007460:	4605      	mov	r5, r0
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	460c      	mov	r4, r1
 8007466:	b118      	cbz	r0, 8007470 <__swsetup_r+0x14>
 8007468:	6a03      	ldr	r3, [r0, #32]
 800746a:	b90b      	cbnz	r3, 8007470 <__swsetup_r+0x14>
 800746c:	f7fe fa0e 	bl	800588c <__sinit>
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007476:	0718      	lsls	r0, r3, #28
 8007478:	d422      	bmi.n	80074c0 <__swsetup_r+0x64>
 800747a:	06d9      	lsls	r1, r3, #27
 800747c:	d407      	bmi.n	800748e <__swsetup_r+0x32>
 800747e:	2309      	movs	r3, #9
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e034      	b.n	80074f8 <__swsetup_r+0x9c>
 800748e:	0758      	lsls	r0, r3, #29
 8007490:	d512      	bpl.n	80074b8 <__swsetup_r+0x5c>
 8007492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007494:	b141      	cbz	r1, 80074a8 <__swsetup_r+0x4c>
 8007496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749a:	4299      	cmp	r1, r3
 800749c:	d002      	beq.n	80074a4 <__swsetup_r+0x48>
 800749e:	4628      	mov	r0, r5
 80074a0:	f7ff f978 	bl	8006794 <_free_r>
 80074a4:	2300      	movs	r3, #0
 80074a6:	6363      	str	r3, [r4, #52]	; 0x34
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	2300      	movs	r3, #0
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f043 0308 	orr.w	r3, r3, #8
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	b94b      	cbnz	r3, 80074d8 <__swsetup_r+0x7c>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ce:	d003      	beq.n	80074d8 <__swsetup_r+0x7c>
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f884 	bl	80075e0 <__smakebuf_r>
 80074d8:	89a0      	ldrh	r0, [r4, #12]
 80074da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074de:	f010 0301 	ands.w	r3, r0, #1
 80074e2:	d00a      	beq.n	80074fa <__swsetup_r+0x9e>
 80074e4:	2300      	movs	r3, #0
 80074e6:	60a3      	str	r3, [r4, #8]
 80074e8:	6963      	ldr	r3, [r4, #20]
 80074ea:	425b      	negs	r3, r3
 80074ec:	61a3      	str	r3, [r4, #24]
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	b943      	cbnz	r3, 8007504 <__swsetup_r+0xa8>
 80074f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074f6:	d1c4      	bne.n	8007482 <__swsetup_r+0x26>
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
 80074fa:	0781      	lsls	r1, r0, #30
 80074fc:	bf58      	it	pl
 80074fe:	6963      	ldrpl	r3, [r4, #20]
 8007500:	60a3      	str	r3, [r4, #8]
 8007502:	e7f4      	b.n	80074ee <__swsetup_r+0x92>
 8007504:	2000      	movs	r0, #0
 8007506:	e7f7      	b.n	80074f8 <__swsetup_r+0x9c>
 8007508:	20000064 	.word	0x20000064

0800750c <_raise_r>:
 800750c:	291f      	cmp	r1, #31
 800750e:	b538      	push	{r3, r4, r5, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	d904      	bls.n	8007520 <_raise_r+0x14>
 8007516:	2316      	movs	r3, #22
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	f04f 30ff 	mov.w	r0, #4294967295
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007522:	b112      	cbz	r2, 800752a <_raise_r+0x1e>
 8007524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007528:	b94b      	cbnz	r3, 800753e <_raise_r+0x32>
 800752a:	4620      	mov	r0, r4
 800752c:	f000 f830 	bl	8007590 <_getpid_r>
 8007530:	462a      	mov	r2, r5
 8007532:	4601      	mov	r1, r0
 8007534:	4620      	mov	r0, r4
 8007536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753a:	f000 b817 	b.w	800756c <_kill_r>
 800753e:	2b01      	cmp	r3, #1
 8007540:	d00a      	beq.n	8007558 <_raise_r+0x4c>
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	d103      	bne.n	800754e <_raise_r+0x42>
 8007546:	2316      	movs	r3, #22
 8007548:	6003      	str	r3, [r0, #0]
 800754a:	2001      	movs	r0, #1
 800754c:	e7e7      	b.n	800751e <_raise_r+0x12>
 800754e:	2400      	movs	r4, #0
 8007550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007554:	4628      	mov	r0, r5
 8007556:	4798      	blx	r3
 8007558:	2000      	movs	r0, #0
 800755a:	e7e0      	b.n	800751e <_raise_r+0x12>

0800755c <raise>:
 800755c:	4b02      	ldr	r3, [pc, #8]	; (8007568 <raise+0xc>)
 800755e:	4601      	mov	r1, r0
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	f7ff bfd3 	b.w	800750c <_raise_r>
 8007566:	bf00      	nop
 8007568:	20000064 	.word	0x20000064

0800756c <_kill_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_kill_r+0x20>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f7f9 fff9 	bl	8001570 <_kill>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d102      	bne.n	8007588 <_kill_r+0x1c>
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	b103      	cbz	r3, 8007588 <_kill_r+0x1c>
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	bd38      	pop	{r3, r4, r5, pc}
 800758a:	bf00      	nop
 800758c:	200004c4 	.word	0x200004c4

08007590 <_getpid_r>:
 8007590:	f7f9 bfe6 	b.w	8001560 <_getpid>

08007594 <__swhatbuf_r>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	460c      	mov	r4, r1
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	2900      	cmp	r1, #0
 800759e:	b096      	sub	sp, #88	; 0x58
 80075a0:	4615      	mov	r5, r2
 80075a2:	461e      	mov	r6, r3
 80075a4:	da0d      	bge.n	80075c2 <__swhatbuf_r+0x2e>
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075ac:	f04f 0100 	mov.w	r1, #0
 80075b0:	bf0c      	ite	eq
 80075b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075b6:	2340      	movne	r3, #64	; 0x40
 80075b8:	2000      	movs	r0, #0
 80075ba:	6031      	str	r1, [r6, #0]
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	b016      	add	sp, #88	; 0x58
 80075c0:	bd70      	pop	{r4, r5, r6, pc}
 80075c2:	466a      	mov	r2, sp
 80075c4:	f000 f848 	bl	8007658 <_fstat_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	dbec      	blt.n	80075a6 <__swhatbuf_r+0x12>
 80075cc:	9901      	ldr	r1, [sp, #4]
 80075ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075d6:	4259      	negs	r1, r3
 80075d8:	4159      	adcs	r1, r3
 80075da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075de:	e7eb      	b.n	80075b8 <__swhatbuf_r+0x24>

080075e0 <__smakebuf_r>:
 80075e0:	898b      	ldrh	r3, [r1, #12]
 80075e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075e4:	079d      	lsls	r5, r3, #30
 80075e6:	4606      	mov	r6, r0
 80075e8:	460c      	mov	r4, r1
 80075ea:	d507      	bpl.n	80075fc <__smakebuf_r+0x1c>
 80075ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	2301      	movs	r3, #1
 80075f6:	6163      	str	r3, [r4, #20]
 80075f8:	b002      	add	sp, #8
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	ab01      	add	r3, sp, #4
 80075fe:	466a      	mov	r2, sp
 8007600:	f7ff ffc8 	bl	8007594 <__swhatbuf_r>
 8007604:	9900      	ldr	r1, [sp, #0]
 8007606:	4605      	mov	r5, r0
 8007608:	4630      	mov	r0, r6
 800760a:	f7fd fbd3 	bl	8004db4 <_malloc_r>
 800760e:	b948      	cbnz	r0, 8007624 <__smakebuf_r+0x44>
 8007610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007614:	059a      	lsls	r2, r3, #22
 8007616:	d4ef      	bmi.n	80075f8 <__smakebuf_r+0x18>
 8007618:	f023 0303 	bic.w	r3, r3, #3
 800761c:	f043 0302 	orr.w	r3, r3, #2
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	e7e3      	b.n	80075ec <__smakebuf_r+0xc>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	6020      	str	r0, [r4, #0]
 8007628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	9b00      	ldr	r3, [sp, #0]
 8007630:	6163      	str	r3, [r4, #20]
 8007632:	9b01      	ldr	r3, [sp, #4]
 8007634:	6120      	str	r0, [r4, #16]
 8007636:	b15b      	cbz	r3, 8007650 <__smakebuf_r+0x70>
 8007638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800763c:	4630      	mov	r0, r6
 800763e:	f000 f81d 	bl	800767c <_isatty_r>
 8007642:	b128      	cbz	r0, 8007650 <__smakebuf_r+0x70>
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	431d      	orrs	r5, r3
 8007654:	81a5      	strh	r5, [r4, #12]
 8007656:	e7cf      	b.n	80075f8 <__smakebuf_r+0x18>

08007658 <_fstat_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d07      	ldr	r5, [pc, #28]	; (8007678 <_fstat_r+0x20>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	602b      	str	r3, [r5, #0]
 8007666:	f7f9 ffe2 	bl	800162e <_fstat>
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	d102      	bne.n	8007674 <_fstat_r+0x1c>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	b103      	cbz	r3, 8007674 <_fstat_r+0x1c>
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	bd38      	pop	{r3, r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	200004c4 	.word	0x200004c4

0800767c <_isatty_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_isatty_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7f9 ffe1 	bl	800164e <_isatty>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_isatty_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_isatty_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	200004c4 	.word	0x200004c4

0800769c <_init>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr

080076a8 <_fini>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr
