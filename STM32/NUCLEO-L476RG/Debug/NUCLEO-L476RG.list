
NUCLEO-L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       000000ec  20000000  20000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .AI_RAM2      00000000  10000000  10000000  000300ec  2**0
                  CONTENTS
  2 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00009da4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00002518  08009f40  08009f40  00019f40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800c458  0800c458  000300ec  2**0
                  CONTENTS
  6 .ARM          00000008  0800c458  0800c458  0001c458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800c460  0800c460  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800c460  0800c460  0001c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800c464  0800c464  0001c464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000734  200000ec  0800c468  000200ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003f4  20000820  0800cb9c  00020820  2**3
                  ALLOC
 12 ._user_heap_stack 00001004  20000c14  0800cb9c  00020c14  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00016a4b  00000000  00000000  000301af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003de4  00000000  00000000  00046bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000bd8  00000000  00000000  0004a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c00  00000000  00000000  0004b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002aea3  00000000  00000000  0004c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000169c2  00000000  00000000  0007705b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f926d  00000000  00000000  0008da1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003024  00000000  00000000  00186c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00006e24  00000000  00000000  00189cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  00190ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000820 	.word	0x20000820
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f1c 	.word	0x08009f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000824 	.word	0x20000824
 80001cc:	08009f1c 	.word	0x08009f1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b98e 	b.w	8000edc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f824 	bl	8000c14 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2ulz>:
 8000bd8:	b5d0      	push	{r4, r6, r7, lr}
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__aeabi_d2ulz+0x34>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fd09 	bl	80005f8 <__aeabi_dmul>
 8000be6:	f000 f97b 	bl	8000ee0 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fc8a 	bl	8000504 <__aeabi_ui2d>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <__aeabi_d2ulz+0x38>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f7ff fd00 	bl	80005f8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fb42 	bl	8000288 <__aeabi_dsub>
 8000c04:	f000 f96c 	bl	8000ee0 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b500      	push	{lr}
 8000f22:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f24:	2244      	movs	r2, #68	; 0x44
 8000f26:	2100      	movs	r1, #0
 8000f28:	a805      	add	r0, sp, #20
 8000f2a:	f007 f8c4 	bl	80080b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2e:	2214      	movs	r2, #20
 8000f30:	2100      	movs	r1, #0
 8000f32:	4668      	mov	r0, sp
 8000f34:	f007 f8bf 	bl	80080b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3c:	f000 fbca 	bl	80016d4 <HAL_PWREx_ControlVoltageScaling>
 8000f40:	b108      	cbz	r0, 8000f46 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f42:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f46:	2210      	movs	r2, #16
 8000f48:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f4c:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f52:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f56:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f5a:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f62:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f66:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f68:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f000 fc79 	bl	8001860 <HAL_RCC_OscConfig>
 8000f6e:	b108      	cbz	r0, 8000f74 <SystemClock_Config+0x54>
 8000f70:	b672      	cpsid	i
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f74:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	220f      	movs	r2, #15
 8000f7a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f86:	f000 feeb 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000f8a:	b108      	cbz	r0, 8000f90 <SystemClock_Config+0x70>
 8000f8c:	b672      	cpsid	i
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <SystemClock_Config+0x6e>
}
 8000f90:	b017      	add	sp, #92	; 0x5c
 8000f92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f98 <main>:
{
 8000f98:	b500      	push	{lr}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000f9c:	f000 f9aa 	bl	80012f4 <HAL_Init>
  SystemClock_Config();
 8000fa0:	f7ff ffbe 	bl	8000f20 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	eb0d 0002 	add.w	r0, sp, r2
 8000fac:	f007 f883 	bl	80080b6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <main+0xc0>)
 8000fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb4:	f042 0204 	orr.w	r2, r2, #4
 8000fb8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fbc:	f002 0204 	and.w	r2, r2, #4
 8000fc0:	9201      	str	r2, [sp, #4]
 8000fc2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fca:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe0:	f002 0201 	and.w	r2, r2, #1
 8000fe4:	9203      	str	r2, [sp, #12]
 8000fe6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fea:	f042 0202 	orr.w	r2, r2, #2
 8000fee:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001004:	f000 fb58 	bl	80016b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001010:	4812      	ldr	r0, [pc, #72]	; (800105c <main+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001014:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001016:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f000 fa6e 	bl	80014fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001030:	f000 fa64 	bl	80014fc <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <main+0xc8>)
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <main+0xcc>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001038:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800103a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 800103e:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001040:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001042:	f000 f9fd 	bl	8001440 <HAL_CRC_Init>
 8001046:	b108      	cbz	r0, 800104c <main+0xb4>
 8001048:	b672      	cpsid	i
  while (1)
 800104a:	e7fe      	b.n	800104a <main+0xb2>
  MX_X_CUBE_AI_Init();
 800104c:	f002 ff22 	bl	8003e94 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8001050:	f002 ff27 	bl	8003ea2 <MX_X_CUBE_AI_Process>
  while (1)
 8001054:	e7fc      	b.n	8001050 <main+0xb8>
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	48000800 	.word	0x48000800
 8001060:	2000083c 	.word	0x2000083c
 8001064:	40023000 	.word	0x40023000

08001068 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <MX_USART2_UART_Init+0x34>)
{
 800106c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800106e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001072:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001086:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108a:	f001 fd1b 	bl	8002ac4 <HAL_UART_Init>
 800108e:	b108      	cbz	r0, 8001094 <MX_USART2_UART_Init+0x2c>
 8001090:	b672      	cpsid	i
  while (1)
 8001092:	e7fe      	b.n	8001092 <MX_USART2_UART_Init+0x2a>
}
 8001094:	bd08      	pop	{r3, pc}
 8001096:	bf00      	nop
 8001098:	20000860 	.word	0x20000860
 800109c:	40004400 	.word	0x40004400

080010a0 <Error_Handler>:
 80010a0:	b672      	cpsid	i
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <Error_Handler+0x2>

080010a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_MspInit+0x2c>)
 80010a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	661a      	str	r2, [r3, #96]	; 0x60
 80010ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80010b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	f002 0201 	and.w	r2, r2, #1
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	b002      	add	sp, #8
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80010d4:	6802      	ldr	r2, [r0, #0]
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_CRC_MspInit+0x24>)
 80010d8:	429a      	cmp	r2, r3
{
 80010da:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80010dc:	d10a      	bne.n	80010f4 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010de:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80010e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010e8:	649a      	str	r2, [r3, #72]	; 0x48
 80010ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010f4:	b002      	add	sp, #8
 80010f6:	4770      	bx	lr
 80010f8:	40023000 	.word	0x40023000

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b570      	push	{r4, r5, r6, lr}
 80010fe:	b0aa      	sub	sp, #168	; 0xa8
 8001100:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	2214      	movs	r2, #20
 8001104:	2100      	movs	r1, #0
 8001106:	a803      	add	r0, sp, #12
 8001108:	f006 ffd5 	bl	80080b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	2288      	movs	r2, #136	; 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	a808      	add	r0, sp, #32
 8001112:	f006 ffd0 	bl	80080b6 <memset>
  if(huart->Instance==USART2)
 8001116:	6822      	ldr	r2, [r4, #0]
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_UART_MspInit+0x94>)
 800111a:	429a      	cmp	r2, r3
 800111c:	d135      	bne.n	800118a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800111e:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001122:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f000 fff2 	bl	800210c <HAL_RCCEx_PeriphCLKConfig>
 8001128:	b108      	cbz	r0, 800112e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800112a:	f7ff ffb9 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_UART_MspInit+0x98>)
 8001130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001136:	659a      	str	r2, [r3, #88]	; 0x58
 8001138:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800113a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	64da      	str	r2, [r3, #76]	; 0x4c
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2602      	movs	r6, #2
 8001156:	2304      	movs	r3, #4
 8001158:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2503      	movs	r5, #3
 800115e:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001160:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001162:	a903      	add	r1, sp, #12
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800116e:	f000 f9c5 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001172:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001178:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001184:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001186:	f000 f9b9 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118a:	b02a      	add	sp, #168	; 0xa8
 800118c:	bd70      	pop	{r4, r5, r6, pc}
 800118e:	bf00      	nop
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000

08001198 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler>

0800119a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler>

0800119c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler>

0800119e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler>

080011a0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler>

080011a2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 b8ba 	b.w	8001320 <HAL_IncTick>

080011ac <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80011ac:	2001      	movs	r0, #1
 80011ae:	4770      	bx	lr

080011b0 <_kill>:

int _kill(int pid, int sig)
{
 80011b0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011b2:	f006 fff5 	bl	80081a0 <__errno>
 80011b6:	2316      	movs	r3, #22
 80011b8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	bd08      	pop	{r3, pc}

080011c0 <_exit>:

void _exit (int status)
{
 80011c0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80011c2:	f006 ffed 	bl	80081a0 <__errno>
 80011c6:	2316      	movs	r3, #22
 80011c8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80011ca:	e7fe      	b.n	80011ca <_exit+0xa>

080011cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	460d      	mov	r5, r1
 80011d0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	460e      	mov	r6, r1
 80011d4:	1b73      	subs	r3, r6, r5
 80011d6:	429c      	cmp	r4, r3
 80011d8:	dc01      	bgt.n	80011de <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80011da:	4620      	mov	r0, r4
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80011de:	f3af 8000 	nop.w
 80011e2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	e7f5      	b.n	80011d4 <_read+0x8>

080011e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	4770      	bx	lr

080011ee <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80011f4:	2000      	movs	r0, #0
 80011f6:	4770      	bx	lr

080011f8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011f8:	2001      	movs	r0, #1
 80011fa:	4770      	bx	lr

080011fc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011fc:	2000      	movs	r0, #0
 80011fe:	4770      	bx	lr

08001200 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <_sbrk+0x30>)
 8001202:	6811      	ldr	r1, [r2, #0]
{
 8001204:	b510      	push	{r4, lr}
 8001206:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001208:	b909      	cbnz	r1, 800120e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800120a:	490a      	ldr	r1, [pc, #40]	; (8001234 <_sbrk+0x34>)
 800120c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	6810      	ldr	r0, [r2, #0]
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <_sbrk+0x38>)
 8001212:	4c0a      	ldr	r4, [pc, #40]	; (800123c <_sbrk+0x3c>)
 8001214:	4403      	add	r3, r0
 8001216:	1b09      	subs	r1, r1, r4
 8001218:	428b      	cmp	r3, r1
 800121a:	d906      	bls.n	800122a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800121c:	f006 ffc0 	bl	80081a0 <__errno>
 8001220:	230c      	movs	r3, #12
 8001222:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001224:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001228:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800122a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800122c:	e7fc      	b.n	8001228 <_sbrk+0x28>
 800122e:	bf00      	nop
 8001230:	200008e4 	.word	0x200008e4
 8001234:	20000c18 	.word	0x20000c18
 8001238:	20018000 	.word	0x20018000
 800123c:	00000800 	.word	0x00000800

08001240 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <SystemInit+0x10>)
 8001242:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff fff2 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f006 ff93 	bl	80081ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff fe87 	bl	8000f98 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001290:	200000ec 	.word	0x200000ec
  ldr r1, =_edata
 8001294:	20000820 	.word	0x20000820
  ldr r2, =_sidata
 8001298:	0800c468 	.word	0x0800c468
  ldr r2, =_sbss
 800129c:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 80012a0:	20000c14 	.word	0x20000c14

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>
	...

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_InitTick+0x40>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
{
 80012ae:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80012b0:	b90a      	cbnz	r2, 80012b6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80012b4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_InitTick+0x44>)
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80012c6:	f000 f8a7 	bl	8001418 <HAL_SYSTICK_Config>
 80012ca:	4604      	mov	r4, r0
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d0:	2d0f      	cmp	r5, #15
 80012d2:	d8ee      	bhi.n	80012b2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	4602      	mov	r2, r0
 80012d6:	4629      	mov	r1, r5
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 f86a 	bl	80013b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_InitTick+0x48>)
 80012e2:	4620      	mov	r0, r4
 80012e4:	601d      	str	r5, [r3, #0]
  return status;
 80012e6:	e7e5      	b.n	80012b4 <HAL_InitTick+0xc>
 80012e8:	200000f0 	.word	0x200000f0
 80012ec:	200000ec 	.word	0x200000ec
 80012f0:	200000f4 	.word	0x200000f4

080012f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_Init+0x28>)
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80012fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001302:	f000 f845 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ffce 	bl	80012a8 <HAL_InitTick>
 800130c:	4604      	mov	r4, r0
 800130e:	b918      	cbnz	r0, 8001318 <HAL_Init+0x24>
    HAL_MspInit();
 8001310:	f7ff fec8 	bl	80010a4 <HAL_MspInit>
}
 8001314:	4620      	mov	r0, r4
 8001316:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001318:	2401      	movs	r4, #1
 800131a:	e7fb      	b.n	8001314 <HAL_Init+0x20>
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001320:	4a03      	ldr	r2, [pc, #12]	; (8001330 <HAL_IncTick+0x10>)
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_IncTick+0x14>)
 8001324:	6811      	ldr	r1, [r2, #0]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	440b      	add	r3, r1
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200008e8 	.word	0x200008e8
 8001334:	200000f0 	.word	0x200000f0

08001338 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <HAL_GetTick+0x8>)
 800133a:	6818      	ldr	r0, [r3, #0]
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200008e8 	.word	0x200008e8

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff fff6 	bl	8001338 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800134e:	bf1c      	itt	ne
 8001350:	4b05      	ldrne	r3, [pc, #20]	; (8001368 <HAL_Delay+0x24>)
 8001352:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001354:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001356:	bf18      	it	ne
 8001358:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135a:	f7ff ffed 	bl	8001338 <HAL_GetTick>
 800135e:	1b43      	subs	r3, r0, r5
 8001360:	42a3      	cmp	r3, r4
 8001362:	d3fa      	bcc.n	800135a <HAL_Delay+0x16>
  {
  }
}
 8001364:	bd38      	pop	{r3, r4, r5, pc}
 8001366:	bf00      	nop
 8001368:	200000f0 	.word	0x200000f0

0800136c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 800136c:	4800      	ldr	r0, [pc, #0]	; (8001370 <HAL_GetHalVersion+0x4>)
 800136e:	4770      	bx	lr
 8001370:	010d0300 	.word	0x010d0300

08001374 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <HAL_GetREVID+0x8>)
 8001376:	6818      	ldr	r0, [r3, #0]
}
 8001378:	0c00      	lsrs	r0, r0, #16
 800137a:	4770      	bx	lr
 800137c:	e0042000 	.word	0xe0042000

08001380 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_GetDEVID+0xc>)
 8001382:	6818      	ldr	r0, [r3, #0]
}
 8001384:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e0042000 	.word	0xe0042000

08001390 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001392:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001394:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b6:	b530      	push	{r4, r5, lr}
 80013b8:	68dc      	ldr	r4, [r3, #12]
 80013ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	bf28      	it	cs
 80013c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d0:	bf8c      	ite	hi
 80013d2:	3c03      	subhi	r4, #3
 80013d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d6:	fa05 f303 	lsl.w	r3, r5, r3
 80013da:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013de:	40a5      	lsls	r5, r4
 80013e0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80013e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	bfac      	ite	ge
 80013ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	4a08      	ldrlt	r2, [pc, #32]	; (8001414 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	bfb8      	it	lt
 80013fa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	bfaa      	itet	ge
 8001402:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800140c:	bd30      	pop	{r4, r5, pc}
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	e000ed14 	.word	0xe000ed14

08001418 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	3801      	subs	r0, #1
 800141a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800141e:	d20b      	bcs.n	8001438 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	21f0      	movs	r1, #240	; 0xf0
 800142a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001430:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001432:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001434:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001436:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001438:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001440:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001442:	4604      	mov	r4, r0
 8001444:	b908      	cbnz	r0, 800144a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001448:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800144a:	7f43      	ldrb	r3, [r0, #29]
 800144c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001450:	b913      	cbnz	r3, 8001458 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001452:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001454:	f7ff fe3e 	bl	80010d4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001458:	2302      	movs	r3, #2
 800145a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800145c:	7923      	ldrb	r3, [r4, #4]
 800145e:	b9e3      	cbnz	r3, 800149a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_CRC_Init+0x70>)
 8001464:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	f022 0218 	bic.w	r2, r2, #24
 800146c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800146e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001470:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001472:	b9d2      	cbnz	r2, 80014aa <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001478:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	6961      	ldr	r1, [r4, #20]
 800147e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69a1      	ldr	r1, [r4, #24]
 800148a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148e:	430a      	orrs	r2, r1
 8001490:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001492:	2301      	movs	r3, #1
 8001494:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001496:	2000      	movs	r0, #0
 8001498:	e7d6      	b.n	8001448 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800149a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800149e:	4620      	mov	r0, r4
 80014a0:	f000 f808 	bl	80014b4 <HAL_CRCEx_Polynomial_Set>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d0e2      	beq.n	800146e <HAL_CRC_Init+0x2e>
 80014a8:	e7cd      	b.n	8001446 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80014aa:	6922      	ldr	r2, [r4, #16]
 80014ac:	e7e4      	b.n	8001478 <HAL_CRC_Init+0x38>
 80014ae:	bf00      	nop
 80014b0:	04c11db7 	.word	0x04c11db7

080014b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80014b4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80014b6:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80014b8:	3b01      	subs	r3, #1
 80014ba:	d31c      	bcc.n	80014f6 <HAL_CRCEx_Polynomial_Set+0x42>
 80014bc:	fa21 f403 	lsr.w	r4, r1, r3
 80014c0:	07e4      	lsls	r4, r4, #31
 80014c2:	d5f9      	bpl.n	80014b8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80014c4:	2a10      	cmp	r2, #16
 80014c6:	d012      	beq.n	80014ee <HAL_CRCEx_Polynomial_Set+0x3a>
 80014c8:	d804      	bhi.n	80014d4 <HAL_CRCEx_Polynomial_Set+0x20>
 80014ca:	b13a      	cbz	r2, 80014dc <HAL_CRCEx_Polynomial_Set+0x28>
 80014cc:	2a08      	cmp	r2, #8
 80014ce:	d010      	beq.n	80014f2 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80014d0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80014d2:	e00b      	b.n	80014ec <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80014d4:	2a18      	cmp	r2, #24
 80014d6:	d1fb      	bne.n	80014d0 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80014d8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80014da:	d8f9      	bhi.n	80014d0 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80014dc:	6800      	ldr	r0, [r0, #0]
 80014de:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80014e0:	6883      	ldr	r3, [r0, #8]
 80014e2:	f023 0318 	bic.w	r3, r3, #24
 80014e6:	4313      	orrs	r3, r2
 80014e8:	6083      	str	r3, [r0, #8]
 80014ea:	2000      	movs	r0, #0
}
 80014ec:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	e7f3      	b.n	80014da <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	e7f1      	b.n	80014da <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d1ea      	bne.n	80014d0 <HAL_CRCEx_Polynomial_Set+0x1c>
 80014fa:	e7ef      	b.n	80014dc <HAL_CRCEx_Polynomial_Set+0x28>

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80016b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001504:	4c69      	ldr	r4, [pc, #420]	; (80016ac <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	680a      	ldr	r2, [r1, #0]
 800150a:	fa32 f503 	lsrs.w	r5, r2, r3
 800150e:	d102      	bne.n	8001516 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001510:	b003      	add	sp, #12
 8001512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001516:	f04f 0e01 	mov.w	lr, #1
 800151a:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800151e:	ea1e 0202 	ands.w	r2, lr, r2
 8001522:	f000 8090 	beq.w	8001646 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001526:	684d      	ldr	r5, [r1, #4]
 8001528:	f005 0603 	and.w	r6, r5, #3
 800152c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001530:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001536:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001540:	f200 8083 	bhi.w	800164a <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001544:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001546:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154a:	68cf      	ldr	r7, [r1, #12]
 800154c:	fa07 f708 	lsl.w	r7, r7, r8
 8001550:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001554:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001556:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001558:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001560:	409f      	lsls	r7, r3
 8001562:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001566:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001568:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156e:	688f      	ldr	r7, [r1, #8]
 8001570:	fa07 f708 	lsl.w	r7, r7, r8
 8001574:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001578:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800157a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	d071      	beq.n	8001662 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 800157e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001580:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001584:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001588:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800158e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001590:	d059      	beq.n	8001646 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001596:	f046 0601 	orr.w	r6, r6, #1
 800159a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 800159e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80015a2:	f023 0703 	bic.w	r7, r3, #3
 80015a6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015aa:	f006 0601 	and.w	r6, r6, #1
 80015ae:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80015b2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80015ba:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015bc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80015c0:	f04f 0c0f 	mov.w	ip, #15
 80015c4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015cc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d0:	d05f      	beq.n	8001692 <HAL_GPIO_Init+0x196>
 80015d2:	4e37      	ldr	r6, [pc, #220]	; (80016b0 <HAL_GPIO_Init+0x1b4>)
 80015d4:	42b0      	cmp	r0, r6
 80015d6:	d05e      	beq.n	8001696 <HAL_GPIO_Init+0x19a>
 80015d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015dc:	42b0      	cmp	r0, r6
 80015de:	d05c      	beq.n	800169a <HAL_GPIO_Init+0x19e>
 80015e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015e4:	42b0      	cmp	r0, r6
 80015e6:	d05a      	beq.n	800169e <HAL_GPIO_Init+0x1a2>
 80015e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ec:	42b0      	cmp	r0, r6
 80015ee:	d058      	beq.n	80016a2 <HAL_GPIO_Init+0x1a6>
 80015f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f4:	42b0      	cmp	r0, r6
 80015f6:	d056      	beq.n	80016a6 <HAL_GPIO_Init+0x1aa>
 80015f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015fc:	42b0      	cmp	r0, r6
 80015fe:	bf0c      	ite	eq
 8001600:	2606      	moveq	r6, #6
 8001602:	2607      	movne	r6, #7
 8001604:	fa06 f60e 	lsl.w	r6, r6, lr
 8001608:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160c:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 800160e:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001610:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001612:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001616:	bf0c      	ite	eq
 8001618:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800161a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800161c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800161e:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001620:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001624:	bf0c      	ite	eq
 8001626:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001628:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800162a:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 800162c:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001632:	bf0c      	ite	eq
 8001634:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001636:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001638:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800163a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800163c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800163e:	bf54      	ite	pl
 8001640:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001642:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001644:	6026      	str	r6, [r4, #0]
    position++;
 8001646:	3301      	adds	r3, #1
 8001648:	e75e      	b.n	8001508 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800164a:	2e03      	cmp	r6, #3
 800164c:	d18c      	bne.n	8001568 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 800164e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001650:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001654:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001658:	409f      	lsls	r7, r3
 800165a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800165e:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001660:	e78d      	b.n	800157e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001662:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001666:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800166e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001672:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001676:	f04f 0e0f 	mov.w	lr, #15
 800167a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800167e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001682:	690f      	ldr	r7, [r1, #16]
 8001684:	fa07 f70b 	lsl.w	r7, r7, fp
 8001688:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800168c:	f8ca 7020 	str.w	r7, [sl, #32]
 8001690:	e775      	b.n	800157e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001692:	2600      	movs	r6, #0
 8001694:	e7b6      	b.n	8001604 <HAL_GPIO_Init+0x108>
 8001696:	2601      	movs	r6, #1
 8001698:	e7b4      	b.n	8001604 <HAL_GPIO_Init+0x108>
 800169a:	2602      	movs	r6, #2
 800169c:	e7b2      	b.n	8001604 <HAL_GPIO_Init+0x108>
 800169e:	2603      	movs	r6, #3
 80016a0:	e7b0      	b.n	8001604 <HAL_GPIO_Init+0x108>
 80016a2:	2604      	movs	r6, #4
 80016a4:	e7ae      	b.n	8001604 <HAL_GPIO_Init+0x108>
 80016a6:	2605      	movs	r6, #5
 80016a8:	e7ac      	b.n	8001604 <HAL_GPIO_Init+0x108>
 80016aa:	bf00      	nop
 80016ac:	40010400 	.word	0x40010400
 80016b0:	48000400 	.word	0x48000400
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	b10a      	cbz	r2, 80016be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ba:	6181      	str	r1, [r0, #24]
 80016bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_PWREx_GetVoltageRange+0xc>)
 80016c6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80016c8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e0:	d11d      	bne.n	800171e <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e6:	d101      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
 80016ea:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2132      	movs	r1, #50	; 0x32
 80016fe:	434b      	muls	r3, r1
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001708:	6951      	ldr	r1, [r2, #20]
 800170a:	0549      	lsls	r1, r1, #21
 800170c:	d500      	bpl.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x3c>
 800170e:	b923      	cbnz	r3, 800171a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001710:	6953      	ldr	r3, [r2, #20]
 8001712:	055b      	lsls	r3, r3, #21
 8001714:	d5e8      	bpl.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001716:	2003      	movs	r0, #3
}
 8001718:	4770      	bx	lr
        wait_loop_index--;
 800171a:	3b01      	subs	r3, #1
 800171c:	e7f4      	b.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001722:	bf1f      	itttt	ne
 8001724:	6813      	ldrne	r3, [r2, #0]
 8001726:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800172a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800172e:	6013      	strne	r3, [r2, #0]
 8001730:	e7da      	b.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001732:	bf00      	nop
 8001734:	40007000 	.word	0x40007000
 8001738:	200000ec 	.word	0x200000ec
 800173c:	000f4240 	.word	0x000f4240

08001740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001740:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001742:	4d1e      	ldr	r5, [pc, #120]	; (80017bc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001744:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001746:	00da      	lsls	r2, r3, #3
{
 8001748:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800174a:	d518      	bpl.n	800177e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800174c:	f7ff ffba 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001750:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001754:	d123      	bne.n	800179e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001756:	2c80      	cmp	r4, #128	; 0x80
 8001758:	d929      	bls.n	80017ae <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800175a:	2ca0      	cmp	r4, #160	; 0xa0
 800175c:	bf8c      	ite	hi
 800175e:	2402      	movhi	r4, #2
 8001760:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001762:	4917      	ldr	r1, [pc, #92]	; (80017c0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001764:	680a      	ldr	r2, [r1, #0]
 8001766:	f022 0207 	bic.w	r2, r2, #7
 800176a:	4322      	orrs	r2, r4
 800176c:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800176e:	6808      	ldr	r0, [r1, #0]
 8001770:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001774:	1b00      	subs	r0, r0, r4
 8001776:	bf18      	it	ne
 8001778:	2001      	movne	r0, #1
 800177a:	b003      	add	sp, #12
 800177c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	65ab      	str	r3, [r5, #88]	; 0x58
 8001786:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001790:	f7ff ff98 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179a:	65ab      	str	r3, [r5, #88]	; 0x58
 800179c:	e7d8      	b.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800179e:	2c80      	cmp	r4, #128	; 0x80
 80017a0:	d807      	bhi.n	80017b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80017a2:	d008      	beq.n	80017b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80017a4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80017a8:	425c      	negs	r4, r3
 80017aa:	415c      	adcs	r4, r3
 80017ac:	e7d9      	b.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017ae:	2400      	movs	r4, #0
 80017b0:	e7d7      	b.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80017b2:	2403      	movs	r4, #3
 80017b4:	e7d5      	b.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b6:	2402      	movs	r4, #2
 80017b8:	e7d3      	b.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCC_GetSysClockFreq+0x8c>)
 80017c6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ca:	f012 020c 	ands.w	r2, r2, #12
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x18>
 80017d0:	2a0c      	cmp	r2, #12
 80017d2:	d115      	bne.n	8001800 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017d8:	2901      	cmp	r1, #1
 80017da:	d118      	bne.n	800180e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017dc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80017de:	481d      	ldr	r0, [pc, #116]	; (8001854 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017e0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017e2:	bf55      	itete	pl
 80017e4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017e8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017ea:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017ee:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80017f2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f6:	b34a      	cbz	r2, 800184c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017f8:	2a0c      	cmp	r2, #12
 80017fa:	d009      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x4c>
 80017fc:	2000      	movs	r0, #0
  return sysclockfreq;
 80017fe:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001800:	2a04      	cmp	r2, #4
 8001802:	d022      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001804:	2a08      	cmp	r2, #8
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <HAL_RCC_GetSysClockFreq+0x94>)
 8001808:	bf18      	it	ne
 800180a:	2000      	movne	r0, #0
 800180c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800180e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001816:	2a02      	cmp	r2, #2
 8001818:	d015      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x82>
 800181a:	490f      	ldr	r1, [pc, #60]	; (8001858 <HAL_RCC_GetSysClockFreq+0x94>)
 800181c:	2a03      	cmp	r2, #3
 800181e:	bf08      	it	eq
 8001820:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001822:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800182a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800182c:	68d8      	ldr	r0, [r3, #12]
 800182e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001832:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001836:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001838:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800183a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800183c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001840:	fbb2 f0f0 	udiv	r0, r2, r0
 8001844:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
 8001848:	e7eb      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	0800aba4 	.word	0x0800aba4
 8001858:	007a1200 	.word	0x007a1200
 800185c:	00f42400 	.word	0x00f42400

08001860 <HAL_RCC_OscConfig>:
{
 8001860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001864:	4605      	mov	r5, r0
 8001866:	b918      	cbnz	r0, 8001870 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
}
 800186a:	b003      	add	sp, #12
 800186c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001870:	4c92      	ldr	r4, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001872:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001874:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001876:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001878:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001882:	d53d      	bpl.n	8001900 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001884:	b11e      	cbz	r6, 800188e <HAL_RCC_OscConfig+0x2e>
 8001886:	2e0c      	cmp	r6, #12
 8001888:	d166      	bne.n	8001958 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800188a:	2f01      	cmp	r7, #1
 800188c:	d164      	bne.n	8001958 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	0798      	lsls	r0, r3, #30
 8001892:	d502      	bpl.n	800189a <HAL_RCC_OscConfig+0x3a>
 8001894:	69ab      	ldr	r3, [r5, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0e6      	beq.n	8001868 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	6a28      	ldr	r0, [r5, #32]
 800189e:	0719      	lsls	r1, r3, #28
 80018a0:	bf56      	itet	pl
 80018a2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80018a6:	6823      	ldrmi	r3, [r4, #0]
 80018a8:	091b      	lsrpl	r3, r3, #4
 80018aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ae:	4298      	cmp	r0, r3
 80018b0:	d93b      	bls.n	800192a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b2:	f7ff ff45 	bl	8001740 <RCC_SetFlashLatencyFromMSIRange>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d1d6      	bne.n	8001868 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	6023      	str	r3, [r4, #0]
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	6a2a      	ldr	r2, [r5, #32]
 80018c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ca:	4313      	orrs	r3, r2
 80018cc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ce:	6863      	ldr	r3, [r4, #4]
 80018d0:	69ea      	ldr	r2, [r5, #28]
 80018d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018da:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018dc:	f7ff ff72 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 80018e0:	68a3      	ldr	r3, [r4, #8]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x260>)
 80018e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <HAL_RCC_OscConfig+0x264>)
 80018f2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80018f4:	4b74      	ldr	r3, [pc, #464]	; (8001ac8 <HAL_RCC_OscConfig+0x268>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f7ff fcd6 	bl	80012a8 <HAL_InitTick>
        if(status != HAL_OK)
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1b4      	bne.n	800186a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	07d8      	lsls	r0, r3, #31
 8001904:	d45f      	bmi.n	80019c6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	0799      	lsls	r1, r3, #30
 800190a:	f100 809e 	bmi.w	8001a4a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190e:	682b      	ldr	r3, [r5, #0]
 8001910:	0718      	lsls	r0, r3, #28
 8001912:	f100 80db 	bmi.w	8001acc <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	682b      	ldr	r3, [r5, #0]
 8001918:	0759      	lsls	r1, r3, #29
 800191a:	f100 8101 	bmi.w	8001b20 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	f040 816a 	bne.w	8001bfa <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001926:	2000      	movs	r0, #0
 8001928:	e79f      	b.n	800186a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001938:	4303      	orrs	r3, r0
 800193a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	6863      	ldr	r3, [r4, #4]
 800193e:	69ea      	ldr	r2, [r5, #28]
 8001940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001948:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800194a:	2e00      	cmp	r6, #0
 800194c:	d1c6      	bne.n	80018dc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800194e:	f7ff fef7 	bl	8001740 <RCC_SetFlashLatencyFromMSIRange>
 8001952:	2800      	cmp	r0, #0
 8001954:	d0c2      	beq.n	80018dc <HAL_RCC_OscConfig+0x7c>
 8001956:	e787      	b.n	8001868 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001958:	69ab      	ldr	r3, [r5, #24]
 800195a:	b31b      	cbz	r3, 80019a4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001964:	f7ff fce8 	bl	8001338 <HAL_GetTick>
 8001968:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	079a      	lsls	r2, r3, #30
 800196e:	d511      	bpl.n	8001994 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6023      	str	r3, [r4, #0]
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	6a2a      	ldr	r2, [r5, #32]
 800197c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001980:	4313      	orrs	r3, r2
 8001982:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	69ea      	ldr	r2, [r5, #28]
 8001988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800198c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001990:	6063      	str	r3, [r4, #4]
 8001992:	e7b5      	b.n	8001900 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001994:	f7ff fcd0 	bl	8001338 <HAL_GetTick>
 8001998:	eba0 0008 	sub.w	r0, r0, r8
 800199c:	2802      	cmp	r0, #2
 800199e:	d9e4      	bls.n	800196a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80019a0:	2003      	movs	r0, #3
 80019a2:	e762      	b.n	800186a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019ac:	f7ff fcc4 	bl	8001338 <HAL_GetTick>
 80019b0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	079b      	lsls	r3, r3, #30
 80019b6:	d5a3      	bpl.n	8001900 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b8:	f7ff fcbe 	bl	8001338 <HAL_GetTick>
 80019bc:	eba0 0008 	sub.w	r0, r0, r8
 80019c0:	2802      	cmp	r0, #2
 80019c2:	d9f6      	bls.n	80019b2 <HAL_RCC_OscConfig+0x152>
 80019c4:	e7ec      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019c6:	2e08      	cmp	r6, #8
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_OscConfig+0x172>
 80019ca:	2e0c      	cmp	r6, #12
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ce:	2f03      	cmp	r7, #3
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	039a      	lsls	r2, r3, #14
 80019d6:	d596      	bpl.n	8001906 <HAL_RCC_OscConfig+0xa6>
 80019d8:	686b      	ldr	r3, [r5, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d193      	bne.n	8001906 <HAL_RCC_OscConfig+0xa6>
 80019de:	e743      	b.n	8001868 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	686b      	ldr	r3, [r5, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d110      	bne.n	8001a0a <HAL_RCC_OscConfig+0x1aa>
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019f0:	f7ff fca2 	bl	8001338 <HAL_GetTick>
 80019f4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	039b      	lsls	r3, r3, #14
 80019fa:	d484      	bmi.n	8001906 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fc9c 	bl	8001338 <HAL_GetTick>
 8001a00:	eba0 0008 	sub.w	r0, r0, r8
 8001a04:	2864      	cmp	r0, #100	; 0x64
 8001a06:	d9f6      	bls.n	80019f6 <HAL_RCC_OscConfig+0x196>
 8001a08:	e7ca      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0e:	d104      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1ba>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a16:	6023      	str	r3, [r4, #0]
 8001a18:	e7e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x188>
 8001a1a:	6822      	ldr	r2, [r4, #0]
 8001a1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a20:	6022      	str	r2, [r4, #0]
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a28:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fc83 	bl	8001338 <HAL_GetTick>
 8001a32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	0398      	lsls	r0, r3, #14
 8001a38:	f57f af65 	bpl.w	8001906 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fc7c 	bl	8001338 <HAL_GetTick>
 8001a40:	eba0 0008 	sub.w	r0, r0, r8
 8001a44:	2864      	cmp	r0, #100	; 0x64
 8001a46:	d9f5      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1d4>
 8001a48:	e7aa      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4a:	2e04      	cmp	r6, #4
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
 8001a4e:	2e0c      	cmp	r6, #12
 8001a50:	d110      	bne.n	8001a74 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a52:	2f02      	cmp	r7, #2
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	0559      	lsls	r1, r3, #21
 8001a5a:	d503      	bpl.n	8001a64 <HAL_RCC_OscConfig+0x204>
 8001a5c:	68eb      	ldr	r3, [r5, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f43f af02 	beq.w	8001868 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	6863      	ldr	r3, [r4, #4]
 8001a66:	692a      	ldr	r2, [r5, #16]
 8001a68:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001a6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a70:	6063      	str	r3, [r4, #4]
 8001a72:	e74c      	b.n	800190e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a74:	68eb      	ldr	r3, [r5, #12]
 8001a76:	b17b      	cbz	r3, 8001a98 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc5a 	bl	8001338 <HAL_GetTick>
 8001a84:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	055a      	lsls	r2, r3, #21
 8001a8a:	d4eb      	bmi.n	8001a64 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc54 	bl	8001338 <HAL_GetTick>
 8001a90:	1bc0      	subs	r0, r0, r7
 8001a92:	2802      	cmp	r0, #2
 8001a94:	d9f7      	bls.n	8001a86 <HAL_RCC_OscConfig+0x226>
 8001a96:	e783      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc4a 	bl	8001338 <HAL_GetTick>
 8001aa4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	055b      	lsls	r3, r3, #21
 8001aaa:	f57f af30 	bpl.w	800190e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fc43 	bl	8001338 <HAL_GetTick>
 8001ab2:	1bc0      	subs	r0, r0, r7
 8001ab4:	2802      	cmp	r0, #2
 8001ab6:	d9f6      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x246>
 8001ab8:	e772      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	0800ab8c 	.word	0x0800ab8c
 8001ac4:	200000ec 	.word	0x200000ec
 8001ac8:	200000f4 	.word	0x200000f4
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001acc:	696b      	ldr	r3, [r5, #20]
 8001ace:	b19b      	cbz	r3, 8001af8 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001ad0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001adc:	f7ff fc2c 	bl	8001338 <HAL_GetTick>
 8001ae0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ae6:	079a      	lsls	r2, r3, #30
 8001ae8:	f53f af15 	bmi.w	8001916 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff fc24 	bl	8001338 <HAL_GetTick>
 8001af0:	1bc0      	subs	r0, r0, r7
 8001af2:	2802      	cmp	r0, #2
 8001af4:	d9f5      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x282>
 8001af6:	e753      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001af8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b04:	f7ff fc18 	bl	8001338 <HAL_GetTick>
 8001b08:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b0e:	079b      	lsls	r3, r3, #30
 8001b10:	f57f af01 	bpl.w	8001916 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fc10 	bl	8001338 <HAL_GetTick>
 8001b18:	1bc0      	subs	r0, r0, r7
 8001b1a:	2802      	cmp	r0, #2
 8001b1c:	d9f5      	bls.n	8001b0a <HAL_RCC_OscConfig+0x2aa>
 8001b1e:	e73f      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b22:	00df      	lsls	r7, r3, #3
 8001b24:	d429      	bmi.n	8001b7a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b38:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	4f85      	ldr	r7, [pc, #532]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	05d8      	lsls	r0, r3, #23
 8001b42:	d51d      	bpl.n	8001b80 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b44:	68ab      	ldr	r3, [r5, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12b      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x342>
 8001b4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001b56:	f7ff fbef 	bl	8001338 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b5e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b60:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b64:	079a      	lsls	r2, r3, #30
 8001b66:	d542      	bpl.n	8001bee <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001b68:	f1b8 0f00 	cmp.w	r8, #0
 8001b6c:	f43f aed7 	beq.w	800191e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b76:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b78:	e6d1      	b.n	800191e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	f04f 0800 	mov.w	r8, #0
 8001b7e:	e7dd      	b.n	8001b3c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001b88:	f7ff fbd6 	bl	8001338 <HAL_GetTick>
 8001b8c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	05d9      	lsls	r1, r3, #23
 8001b92:	d4d7      	bmi.n	8001b44 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff fbd0 	bl	8001338 <HAL_GetTick>
 8001b98:	eba0 0009 	sub.w	r0, r0, r9
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9f6      	bls.n	8001b8e <HAL_RCC_OscConfig+0x32e>
 8001ba0:	e6fe      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d106      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x354>
 8001ba6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001bb2:	e7ca      	b.n	8001b4a <HAL_RCC_OscConfig+0x2ea>
 8001bb4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001bc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bc4:	f022 0204 	bic.w	r2, r2, #4
 8001bc8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1c2      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fbb2 	bl	8001338 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bd8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bde:	079b      	lsls	r3, r3, #30
 8001be0:	d5c2      	bpl.n	8001b68 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7ff fba9 	bl	8001338 <HAL_GetTick>
 8001be6:	1bc0      	subs	r0, r0, r7
 8001be8:	4548      	cmp	r0, r9
 8001bea:	d9f6      	bls.n	8001bda <HAL_RCC_OscConfig+0x37a>
 8001bec:	e6d8      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fba3 	bl	8001338 <HAL_GetTick>
 8001bf2:	1bc0      	subs	r0, r0, r7
 8001bf4:	4548      	cmp	r0, r9
 8001bf6:	d9b3      	bls.n	8001b60 <HAL_RCC_OscConfig+0x300>
 8001bf8:	e6d2      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	f040 808f 	bne.w	8001d1e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001c00:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c04:	f003 0103 	and.w	r1, r3, #3
 8001c08:	4291      	cmp	r1, r2
 8001c0a:	d124      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001c0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c12:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001c18:	d11d      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001c1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c20:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001c24:	d117      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c26:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001c28:	3a07      	subs	r2, #7
 8001c2a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001c2e:	bf18      	it	ne
 8001c30:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c32:	4291      	cmp	r1, r2
 8001c34:	d10f      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c36:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001c38:	0852      	lsrs	r2, r2, #1
 8001c3a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001c3e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c40:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c46:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001c48:	0852      	lsrs	r2, r2, #1
 8001c4a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001c4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c50:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001c54:	d04a      	beq.n	8001cec <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c56:	2e0c      	cmp	r6, #12
 8001c58:	f43f ae06 	beq.w	8001868 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	015f      	lsls	r7, r3, #5
 8001c60:	f53f ae02 	bmi.w	8001868 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	00de      	lsls	r6, r3, #3
 8001c68:	f53f adfe 	bmi.w	8001868 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c72:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001c74:	f7ff fb60 	bl	8001338 <HAL_GetTick>
 8001c78:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	0198      	lsls	r0, r3, #6
 8001c7e:	d42f      	bmi.n	8001ce0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	68e2      	ldr	r2, [r4, #12]
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001c8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c90:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001c92:	3a01      	subs	r2, #1
 8001c94:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001c98:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001c9a:	0912      	lsrs	r2, r2, #4
 8001c9c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001ca0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001ca2:	0852      	lsrs	r2, r2, #1
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001caa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001cac:	0852      	lsrs	r2, r2, #1
 8001cae:	3a01      	subs	r2, #1
 8001cb0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001cb4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cbe:	68e3      	ldr	r3, [r4, #12]
 8001cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001cc6:	f7ff fb37 	bl	8001338 <HAL_GetTick>
 8001cca:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	0199      	lsls	r1, r3, #6
 8001cd0:	f53f ae29 	bmi.w	8001926 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff fb30 	bl	8001338 <HAL_GetTick>
 8001cd8:	1b40      	subs	r0, r0, r5
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9f6      	bls.n	8001ccc <HAL_RCC_OscConfig+0x46c>
 8001cde:	e65f      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fb2a 	bl	8001338 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9c7      	bls.n	8001c7a <HAL_RCC_OscConfig+0x41a>
 8001cea:	e659      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	019a      	lsls	r2, r3, #6
 8001cf0:	f53f ae19 	bmi.w	8001926 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfc:	68e3      	ldr	r3, [r4, #12]
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001d04:	f7ff fb18 	bl	8001338 <HAL_GetTick>
 8001d08:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	f53f ae0a 	bmi.w	8001926 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff fb11 	bl	8001338 <HAL_GetTick>
 8001d16:	1b40      	subs	r0, r0, r5
 8001d18:	2802      	cmp	r0, #2
 8001d1a:	d9f6      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
 8001d1c:	e640      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1e:	2e0c      	cmp	r6, #12
 8001d20:	f43f ada2 	beq.w	8001868 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fb04 	bl	8001338 <HAL_GetTick>
 8001d30:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d3a:	68e1      	ldr	r1, [r4, #12]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001d3e:	400a      	ands	r2, r1
 8001d40:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8001d42:	4618      	mov	r0, r3
 8001d44:	e591      	b.n	800186a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff faf7 	bl	8001338 <HAL_GetTick>
 8001d4a:	1b40      	subs	r0, r0, r5
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	d9f0      	bls.n	8001d32 <HAL_RCC_OscConfig+0x4d2>
 8001d50:	e626      	b.n	80019a0 <HAL_RCC_OscConfig+0x140>
 8001d52:	bf00      	nop
 8001d54:	40007000 	.word	0x40007000
 8001d58:	f99d808c 	.word	0xf99d808c
 8001d5c:	feeefffc 	.word	0xfeeefffc

08001d60 <HAL_RCC_ClockConfig>:
{
 8001d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d64:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d66:	4604      	mov	r4, r0
 8001d68:	b910      	cbnz	r0, 8001d70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
}
 8001d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_RCC_ClockConfig+0x140>)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d32c      	bcc.n	8001dd6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	0788      	lsls	r0, r1, #30
 8001d80:	d434      	bmi.n	8001dec <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	07c9      	lsls	r1, r1, #31
 8001d84:	d43f      	bmi.n	8001e06 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d86:	6821      	ldr	r1, [r4, #0]
 8001d88:	078a      	lsls	r2, r1, #30
 8001d8a:	d468      	bmi.n	8001e5e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8c:	4a44      	ldr	r2, [pc, #272]	; (8001ea0 <HAL_RCC_ClockConfig+0x140>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	42ab      	cmp	r3, r5
 8001d96:	d86f      	bhi.n	8001e78 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	f011 0f04 	tst.w	r1, #4
 8001d9c:	4d41      	ldr	r5, [pc, #260]	; (8001ea4 <HAL_RCC_ClockConfig+0x144>)
 8001d9e:	d177      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	070b      	lsls	r3, r1, #28
 8001da2:	d506      	bpl.n	8001db2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da4:	68ab      	ldr	r3, [r5, #8]
 8001da6:	6922      	ldr	r2, [r4, #16]
 8001da8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001db0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001db2:	f7ff fd07 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001db6:	68ab      	ldr	r3, [r5, #8]
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <HAL_RCC_ClockConfig+0x148>)
 8001dba:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	40d8      	lsrs	r0, r3
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_RCC_ClockConfig+0x14c>)
 8001dcc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f7ff ba69 	b.w	80012a8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	f023 0307 	bic.w	r3, r3, #7
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	428b      	cmp	r3, r1
 8001de8:	d1bf      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xa>
 8001dea:	e7c7      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dec:	4a2d      	ldr	r2, [pc, #180]	; (8001ea4 <HAL_RCC_ClockConfig+0x144>)
 8001dee:	68a0      	ldr	r0, [r4, #8]
 8001df0:	6893      	ldr	r3, [r2, #8]
 8001df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df6:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	bf81      	itttt	hi
 8001dfa:	6893      	ldrhi	r3, [r2, #8]
 8001dfc:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8001e00:	4303      	orrhi	r3, r0
 8001e02:	6093      	strhi	r3, [r2, #8]
 8001e04:	e7bd      	b.n	8001d82 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	6862      	ldr	r2, [r4, #4]
 8001e08:	4e26      	ldr	r6, [pc, #152]	; (8001ea4 <HAL_RCC_ClockConfig+0x144>)
 8001e0a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0e:	d11a      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e14:	d0a9      	beq.n	8001d6a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e16:	68b3      	ldr	r3, [r6, #8]
 8001e18:	f023 0303 	bic.w	r3, r3, #3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e20:	f7ff fa8a 	bl	8001338 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e28:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	68b3      	ldr	r3, [r6, #8]
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e36:	d0a6      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fa7e 	bl	8001338 <HAL_GetTick>
 8001e3c:	1bc0      	subs	r0, r0, r7
 8001e3e:	4540      	cmp	r0, r8
 8001e40:	d9f3      	bls.n	8001e2a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8001e42:	2003      	movs	r0, #3
 8001e44:	e792      	b.n	8001d6c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	2a02      	cmp	r2, #2
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e4e:	e7e1      	b.n	8001e14 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e50:	b912      	cbnz	r2, 8001e58 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e52:	f013 0f02 	tst.w	r3, #2
 8001e56:	e7dd      	b.n	8001e14 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e5c:	e7da      	b.n	8001e14 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_RCC_ClockConfig+0x144>)
 8001e60:	68a0      	ldr	r0, [r4, #8]
 8001e62:	6893      	ldr	r3, [r2, #8]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e68:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6a:	bf3f      	itttt	cc
 8001e6c:	6893      	ldrcc	r3, [r2, #8]
 8001e6e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8001e72:	4303      	orrcc	r3, r0
 8001e74:	6093      	strcc	r3, [r2, #8]
 8001e76:	e789      	b.n	8001d8c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	432b      	orrs	r3, r5
 8001e80:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	42ab      	cmp	r3, r5
 8001e8a:	f47f af6e 	bne.w	8001d6a <HAL_RCC_ClockConfig+0xa>
 8001e8e:	e783      	b.n	8001d98 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	68ab      	ldr	r3, [r5, #8]
 8001e92:	68e2      	ldr	r2, [r4, #12]
 8001e94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60ab      	str	r3, [r5, #8]
 8001e9c:	e780      	b.n	8001da0 <HAL_RCC_ClockConfig+0x40>
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	0800ab8c 	.word	0x0800ab8c
 8001eac:	200000ec 	.word	0x200000ec
 8001eb0:	200000f4 	.word	0x200000f4

08001eb4 <HAL_RCC_GetHCLKFreq>:
}
 8001eb4:	4b01      	ldr	r3, [pc, #4]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x8>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200000ec 	.word	0x200000ec

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ec2:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ece:	6810      	ldr	r0, [r2, #0]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
}
 8001ed4:	40d8      	lsrs	r0, r3
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	0800ab9c 	.word	0x0800ab9c
 8001ee0:	200000ec 	.word	0x200000ec

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef2:	6810      	ldr	r0, [r2, #0]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
}
 8001ef8:	40d8      	lsrs	r0, r3
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	0800ab9c 	.word	0x0800ab9c
 8001f04:	200000ec 	.word	0x200000ec

08001f08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f0a:	4c42      	ldr	r4, [pc, #264]	; (8002014 <RCCEx_PLLSAI1_Config+0x10c>)
 8001f0c:	68e2      	ldr	r2, [r4, #12]
 8001f0e:	0793      	lsls	r3, r2, #30
{
 8001f10:	4605      	mov	r5, r0
 8001f12:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f14:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f16:	d029      	beq.n	8001f6c <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f18:	68e2      	ldr	r2, [r4, #12]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	4282      	cmp	r2, r0
 8001f20:	d13c      	bne.n	8001f9c <RCCEx_PLLSAI1_Config+0x94>
       ||
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d03a      	beq.n	8001f9c <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f26:	68e3      	ldr	r3, [r4, #12]
       ||
 8001f28:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f2a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f2e:	3301      	adds	r3, #1
       ||
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d133      	bne.n	8001f9c <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f3a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3c:	f7ff f9fc 	bl	8001338 <HAL_GetTick>
 8001f40:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	011a      	lsls	r2, r3, #4
 8001f46:	d432      	bmi.n	8001fae <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f48:	68aa      	ldr	r2, [r5, #8]
 8001f4a:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8001f4c:	2e00      	cmp	r6, #0
 8001f4e:	d035      	beq.n	8001fbc <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f50:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f52:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f54:	d14d      	bne.n	8001ff2 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f56:	6929      	ldr	r1, [r5, #16]
 8001f58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f5c:	0849      	lsrs	r1, r1, #1
 8001f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f62:	3901      	subs	r1, #1
 8001f64:	4313      	orrs	r3, r2
 8001f66:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001f6a:	e031      	b.n	8001fd0 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	d011      	beq.n	8001f94 <RCCEx_PLLSAI1_Config+0x8c>
 8001f70:	2803      	cmp	r0, #3
 8001f72:	d015      	beq.n	8001fa0 <RCCEx_PLLSAI1_Config+0x98>
 8001f74:	2801      	cmp	r0, #1
 8001f76:	d111      	bne.n	8001f9c <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	0797      	lsls	r7, r2, #30
 8001f7c:	d51d      	bpl.n	8001fba <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f7e:	68e2      	ldr	r2, [r4, #12]
 8001f80:	6869      	ldr	r1, [r5, #4]
 8001f82:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001f86:	3901      	subs	r1, #1
 8001f88:	ea42 0300 	orr.w	r3, r2, r0
 8001f8c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001f90:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8001f92:	e7cf      	b.n	8001f34 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f9a:	d1f0      	bne.n	8001f7e <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	e00c      	b.n	8001fba <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	0391      	lsls	r1, r2, #14
 8001fa4:	d4eb      	bmi.n	8001f7e <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001fac:	e7f5      	b.n	8001f9a <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fae:	f7ff f9c3 	bl	8001338 <HAL_GetTick>
 8001fb2:	1bc0      	subs	r0, r0, r7
 8001fb4:	2802      	cmp	r0, #2
 8001fb6:	d9c4      	bls.n	8001f42 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8001fb8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	68e9      	ldr	r1, [r5, #12]
 8001fc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc8:	0909      	lsrs	r1, r1, #4
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fd0:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fd8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001fda:	f7ff f9ad 	bl	8001338 <HAL_GetTick>
 8001fde:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	d510      	bpl.n	8002008 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001fe6:	6923      	ldr	r3, [r4, #16]
 8001fe8:	69aa      	ldr	r2, [r5, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	6123      	str	r3, [r4, #16]
 8001fee:	2000      	movs	r0, #0
  return status;
 8001ff0:	e7e3      	b.n	8001fba <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff2:	6969      	ldr	r1, [r5, #20]
 8001ff4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ff8:	0849      	lsrs	r1, r1, #1
 8001ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ffe:	3901      	subs	r1, #1
 8002000:	4313      	orrs	r3, r2
 8002002:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002006:	e7e3      	b.n	8001fd0 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002008:	f7ff f996 	bl	8001338 <HAL_GetTick>
 800200c:	1b80      	subs	r0, r0, r6
 800200e:	2802      	cmp	r0, #2
 8002010:	d9e6      	bls.n	8001fe0 <RCCEx_PLLSAI1_Config+0xd8>
 8002012:	e7d1      	b.n	8001fb8 <RCCEx_PLLSAI1_Config+0xb0>
 8002014:	40021000 	.word	0x40021000

08002018 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800201a:	4c3b      	ldr	r4, [pc, #236]	; (8002108 <RCCEx_PLLSAI2_Config+0xf0>)
 800201c:	68e2      	ldr	r2, [r4, #12]
 800201e:	0793      	lsls	r3, r2, #30
{
 8002020:	4605      	mov	r5, r0
 8002022:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002024:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002026:	d026      	beq.n	8002076 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002028:	68e2      	ldr	r2, [r4, #12]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	4282      	cmp	r2, r0
 8002030:	d139      	bne.n	80020a6 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8002032:	2a00      	cmp	r2, #0
 8002034:	d037      	beq.n	80020a6 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002036:	68e3      	ldr	r3, [r4, #12]
       ||
 8002038:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800203a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800203e:	3301      	adds	r3, #1
       ||
 8002040:	4293      	cmp	r3, r2
 8002042:	d130      	bne.n	80020a6 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7ff f974 	bl	8001338 <HAL_GetTick>
 8002050:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	009a      	lsls	r2, r3, #2
 8002056:	d42f      	bmi.n	80020b8 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002058:	68a9      	ldr	r1, [r5, #8]
 800205a:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 800205c:	b39e      	cbz	r6, 80020c6 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800205e:	6963      	ldr	r3, [r4, #20]
 8002060:	692a      	ldr	r2, [r5, #16]
 8002062:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002066:	0852      	lsrs	r2, r2, #1
 8002068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800206c:	3a01      	subs	r2, #1
 800206e:	430b      	orrs	r3, r1
 8002070:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002074:	e031      	b.n	80020da <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002076:	2802      	cmp	r0, #2
 8002078:	d011      	beq.n	800209e <RCCEx_PLLSAI2_Config+0x86>
 800207a:	2803      	cmp	r0, #3
 800207c:	d015      	beq.n	80020aa <RCCEx_PLLSAI2_Config+0x92>
 800207e:	2801      	cmp	r0, #1
 8002080:	d111      	bne.n	80020a6 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002082:	6822      	ldr	r2, [r4, #0]
 8002084:	0797      	lsls	r7, r2, #30
 8002086:	d51d      	bpl.n	80020c4 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002088:	68e2      	ldr	r2, [r4, #12]
 800208a:	6869      	ldr	r1, [r5, #4]
 800208c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002090:	3901      	subs	r1, #1
 8002092:	ea42 0300 	orr.w	r3, r2, r0
 8002096:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800209a:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 800209c:	e7d2      	b.n	8002044 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020a4:	d1f0      	bne.n	8002088 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
 80020a8:	e00c      	b.n	80020c4 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020aa:	6822      	ldr	r2, [r4, #0]
 80020ac:	0391      	lsls	r1, r2, #14
 80020ae:	d4eb      	bmi.n	8002088 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80020b6:	e7f5      	b.n	80020a4 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020b8:	f7ff f93e 	bl	8001338 <HAL_GetTick>
 80020bc:	1bc0      	subs	r0, r0, r7
 80020be:	2802      	cmp	r0, #2
 80020c0:	d9c7      	bls.n	8002052 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80020c2:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80020c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020c6:	6963      	ldr	r3, [r4, #20]
 80020c8:	68ea      	ldr	r2, [r5, #12]
 80020ca:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d2:	0912      	lsrs	r2, r2, #4
 80020d4:	430b      	orrs	r3, r1
 80020d6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020da:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e2:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80020e4:	f7ff f928 	bl	8001338 <HAL_GetTick>
 80020e8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	d505      	bpl.n	80020fc <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80020f0:	6963      	ldr	r3, [r4, #20]
 80020f2:	696a      	ldr	r2, [r5, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	6163      	str	r3, [r4, #20]
 80020f8:	2000      	movs	r0, #0
  return status;
 80020fa:	e7e3      	b.n	80020c4 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020fc:	f7ff f91c 	bl	8001338 <HAL_GetTick>
 8002100:	1b80      	subs	r0, r0, r6
 8002102:	2802      	cmp	r0, #2
 8002104:	d9f1      	bls.n	80020ea <RCCEx_PLLSAI2_Config+0xd2>
 8002106:	e7dc      	b.n	80020c2 <RCCEx_PLLSAI2_Config+0xaa>
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCCEx_PeriphCLKConfig>:
{
 800210c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002110:	6806      	ldr	r6, [r0, #0]
 8002112:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002116:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002118:	d009      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800211a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800211c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002120:	d022      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002122:	d813      	bhi.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002124:	b331      	cbz	r1, 8002174 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002126:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800212a:	d02a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800212c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	04d8      	lsls	r0, r3, #19
 8002132:	d509      	bpl.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002134:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002136:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800213a:	d02c      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800213c:	d826      	bhi.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800213e:	b381      	cbz	r1, 80021a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002140:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002144:	d072      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002146:	2601      	movs	r6, #1
 8002148:	4635      	mov	r5, r6
 800214a:	e039      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800214c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002150:	d1ec      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002152:	4a3c      	ldr	r2, [pc, #240]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002154:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002156:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800215a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800215e:	430b      	orrs	r3, r1
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002164:	2600      	movs	r6, #0
 8002166:	e7e2      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002168:	4a36      	ldr	r2, [pc, #216]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800216a:	68d3      	ldr	r3, [r2, #12]
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002172:	e7ee      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002174:	3004      	adds	r0, #4
 8002176:	f7ff fec7 	bl	8001f08 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800217a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800217c:	2800      	cmp	r0, #0
 800217e:	d1d6      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002180:	e7e7      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002182:	2100      	movs	r1, #0
 8002184:	3020      	adds	r0, #32
 8002186:	f7ff ff47 	bl	8002018 <RCCEx_PLLSAI2_Config>
 800218a:	e7f6      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800218c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002190:	d1d9      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002192:	4635      	mov	r5, r6
 8002194:	e009      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002198:	68d3      	ldr	r3, [r2, #12]
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	60d3      	str	r3, [r2, #12]
      break;
 80021a0:	e7f7      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021a2:	1d20      	adds	r0, r4, #4
 80021a4:	f7ff feb0 	bl	8001f08 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	d144      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021b0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80021b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80021ba:	430b      	orrs	r3, r1
 80021bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	0399      	lsls	r1, r3, #14
 80021c4:	f140 815d 	bpl.w	8002482 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021c8:	4f1e      	ldr	r7, [pc, #120]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021cc:	00da      	lsls	r2, r3, #3
 80021ce:	d435      	bmi.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80021d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021e2:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021ea:	f8d9 3000 	ldr.w	r3, [r9]
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80021f6:	f7ff f89f 	bl	8001338 <HAL_GetTick>
 80021fa:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021fc:	f8d9 3000 	ldr.w	r3, [r9]
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	d523      	bpl.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8002204:	bb4d      	cbnz	r5, 800225a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800220a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800220e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002212:	f040 810e 	bne.w	8002432 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800221a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800221e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002228:	4635      	mov	r5, r6
 800222a:	e016      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800222c:	2100      	movs	r1, #0
 800222e:	f104 0020 	add.w	r0, r4, #32
 8002232:	f7ff fef1 	bl	8002018 <RCCEx_PLLSAI2_Config>
 8002236:	e7b7      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002238:	462e      	mov	r6, r5
 800223a:	e7c1      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800223c:	f04f 0800 	mov.w	r8, #0
 8002240:	e7d1      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7ff f874 	bl	8001338 <HAL_GetTick>
 8002250:	eba0 000a 	sub.w	r0, r0, sl
 8002254:	2802      	cmp	r0, #2
 8002256:	d9d1      	bls.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002258:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800225a:	f1b8 0f00 	cmp.w	r8, #0
 800225e:	d003      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	07da      	lsls	r2, r3, #31
 800226c:	d508      	bpl.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800226e:	499b      	ldr	r1, [pc, #620]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002270:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002272:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002276:	f022 0203 	bic.w	r2, r2, #3
 800227a:	4302      	orrs	r2, r0
 800227c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002280:	079f      	lsls	r7, r3, #30
 8002282:	d508      	bpl.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002284:	4995      	ldr	r1, [pc, #596]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002286:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002288:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800228c:	f022 020c 	bic.w	r2, r2, #12
 8002290:	4302      	orrs	r2, r0
 8002292:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002296:	075e      	lsls	r6, r3, #29
 8002298:	d508      	bpl.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229a:	4990      	ldr	r1, [pc, #576]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800229c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800229e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022a2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022a6:	4302      	orrs	r2, r0
 80022a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ac:	0718      	lsls	r0, r3, #28
 80022ae:	d508      	bpl.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b0:	498a      	ldr	r1, [pc, #552]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80022b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022bc:	4302      	orrs	r2, r0
 80022be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022c2:	06d9      	lsls	r1, r3, #27
 80022c4:	d508      	bpl.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022c6:	4985      	ldr	r1, [pc, #532]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80022ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022d2:	4302      	orrs	r2, r0
 80022d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d8:	069a      	lsls	r2, r3, #26
 80022da:	d508      	bpl.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80022e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022e8:	4302      	orrs	r2, r0
 80022ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ee:	059f      	lsls	r7, r3, #22
 80022f0:	d508      	bpl.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f2:	497a      	ldr	r1, [pc, #488]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022f4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80022f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022fa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80022fe:	4302      	orrs	r2, r0
 8002300:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002304:	055e      	lsls	r6, r3, #21
 8002306:	d508      	bpl.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002308:	4974      	ldr	r1, [pc, #464]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800230a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800230c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002310:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002314:	4302      	orrs	r2, r0
 8002316:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800231a:	0658      	lsls	r0, r3, #25
 800231c:	d508      	bpl.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231e:	496f      	ldr	r1, [pc, #444]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002320:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002322:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002326:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800232a:	4302      	orrs	r2, r0
 800232c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002330:	0619      	lsls	r1, r3, #24
 8002332:	d508      	bpl.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002334:	4969      	ldr	r1, [pc, #420]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002338:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800233c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002340:	4302      	orrs	r2, r0
 8002342:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002346:	05da      	lsls	r2, r3, #23
 8002348:	d508      	bpl.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800234a:	4964      	ldr	r1, [pc, #400]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800234c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800234e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002352:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002356:	4302      	orrs	r2, r0
 8002358:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800235c:	049b      	lsls	r3, r3, #18
 800235e:	d510      	bpl.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002360:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002362:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002364:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002368:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800236c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002372:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002376:	f040 8086 	bne.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237a:	68d3      	ldr	r3, [r2, #12]
 800237c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002380:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	031f      	lsls	r7, r3, #12
 8002386:	d50f      	bpl.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002388:	4a54      	ldr	r2, [pc, #336]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800238a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800238c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002390:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002394:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002396:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800239a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800239e:	d17e      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a0:	68d3      	ldr	r3, [r2, #12]
 80023a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	035e      	lsls	r6, r3, #13
 80023ac:	d50f      	bpl.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ae:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023b0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80023b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023b6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023ba:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023c4:	d176      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c6:	68d3      	ldr	r3, [r2, #12]
 80023c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023cc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	0458      	lsls	r0, r3, #17
 80023d2:	d512      	bpl.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d4:	4941      	ldr	r1, [pc, #260]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80023d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023e0:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023e2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ea:	d16e      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023ec:	2102      	movs	r1, #2
 80023ee:	1d20      	adds	r0, r4, #4
 80023f0:	f7ff fd8a 	bl	8001f08 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80023f4:	2800      	cmp	r0, #0
 80023f6:	bf18      	it	ne
 80023f8:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	0411      	lsls	r1, r2, #16
 80023fe:	d508      	bpl.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002400:	4936      	ldr	r1, [pc, #216]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002402:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002404:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800240c:	4303      	orrs	r3, r0
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002412:	03d3      	lsls	r3, r2, #15
 8002414:	d509      	bpl.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002418:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800241c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002424:	430b      	orrs	r3, r1
 8002426:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800242a:	4628      	mov	r0, r5
 800242c:	b002      	add	sp, #8
 800242e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002432:	429a      	cmp	r2, r3
 8002434:	f43f aeef 	beq.w	8002216 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002438:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800243c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002448:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800244c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002454:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800245a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800245e:	f57f aeda 	bpl.w	8002216 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002462:	f7fe ff69 	bl	8001338 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800246a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002470:	0799      	lsls	r1, r3, #30
 8002472:	f53f aed0 	bmi.w	8002216 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe ff5f 	bl	8001338 <HAL_GetTick>
 800247a:	1b40      	subs	r0, r0, r5
 800247c:	4548      	cmp	r0, r9
 800247e:	d9f5      	bls.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002480:	e6ea      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002482:	4635      	mov	r5, r6
 8002484:	e6f0      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002486:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800248a:	f47f af7a 	bne.w	8002382 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800248e:	2101      	movs	r1, #1
 8002490:	1d20      	adds	r0, r4, #4
 8002492:	f7ff fd39 	bl	8001f08 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002496:	2800      	cmp	r0, #0
 8002498:	bf18      	it	ne
 800249a:	4605      	movne	r5, r0
 800249c:	e771      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800249e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024a2:	d181      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a4:	2101      	movs	r1, #1
 80024a6:	1d20      	adds	r0, r4, #4
 80024a8:	f7ff fd2e 	bl	8001f08 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	bf18      	it	ne
 80024b0:	4605      	movne	r5, r0
 80024b2:	e779      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024b4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024b8:	d189      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ba:	2101      	movs	r1, #1
 80024bc:	1d20      	adds	r0, r4, #4
 80024be:	f7ff fd23 	bl	8001f08 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024c2:	2800      	cmp	r0, #0
 80024c4:	bf18      	it	ne
 80024c6:	4605      	movne	r5, r0
 80024c8:	e781      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024ca:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80024ce:	d194      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024d0:	2102      	movs	r1, #2
 80024d2:	f104 0020 	add.w	r0, r4, #32
 80024d6:	f7ff fd9f 	bl	8002018 <RCCEx_PLLSAI2_Config>
 80024da:	e78b      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80024dc:	40021000 	.word	0x40021000

080024e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80024e4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024e6:	6921      	ldr	r1, [r4, #16]
 80024e8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024ea:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ec:	69c0      	ldr	r0, [r0, #28]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	6961      	ldr	r1, [r4, #20]
 80024f2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024f4:	498f      	ldr	r1, [pc, #572]	; (8002734 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024f8:	4029      	ands	r1, r5
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	68e1      	ldr	r1, [r4, #12]
 8002502:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800250a:	4a8b      	ldr	r2, [pc, #556]	; (8002738 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800250c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800250e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002510:	bf1c      	itt	ne
 8002512:	6a22      	ldrne	r2, [r4, #32]
 8002514:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002520:	4a86      	ldr	r2, [pc, #536]	; (800273c <UART_SetConfig+0x25c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d117      	bne.n	8002556 <UART_SetConfig+0x76>
 8002526:	4b86      	ldr	r3, [pc, #536]	; (8002740 <UART_SetConfig+0x260>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3b01      	subs	r3, #1
 8002532:	2b02      	cmp	r3, #2
 8002534:	f200 80cf 	bhi.w	80026d6 <UART_SetConfig+0x1f6>
 8002538:	4a82      	ldr	r2, [pc, #520]	; (8002744 <UART_SetConfig+0x264>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800253c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002540:	f040 8099 	bne.w	8002676 <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002544:	2b08      	cmp	r3, #8
 8002546:	d822      	bhi.n	800258e <UART_SetConfig+0xae>
 8002548:	e8df f003 	tbb	[pc, r3]
 800254c:	2193c8d9 	.word	0x2193c8d9
 8002550:	212121ce 	.word	0x212121ce
 8002554:	dd          	.byte	0xdd
 8002555:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002556:	4a7c      	ldr	r2, [pc, #496]	; (8002748 <UART_SetConfig+0x268>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d106      	bne.n	800256a <UART_SetConfig+0x8a>
 800255c:	4b78      	ldr	r3, [pc, #480]	; (8002740 <UART_SetConfig+0x260>)
 800255e:	4a7b      	ldr	r2, [pc, #492]	; (800274c <UART_SetConfig+0x26c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	e7e7      	b.n	800253a <UART_SetConfig+0x5a>
 800256a:	4a79      	ldr	r2, [pc, #484]	; (8002750 <UART_SetConfig+0x270>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d119      	bne.n	80025a4 <UART_SetConfig+0xc4>
 8002570:	4b73      	ldr	r3, [pc, #460]	; (8002740 <UART_SetConfig+0x260>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800257a:	2b20      	cmp	r3, #32
 800257c:	f000 80b7 	beq.w	80026ee <UART_SetConfig+0x20e>
 8002580:	d807      	bhi.n	8002592 <UART_SetConfig+0xb2>
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80b8 	beq.w	80026f8 <UART_SetConfig+0x218>
 8002588:	2b10      	cmp	r3, #16
 800258a:	f000 80aa 	beq.w	80026e2 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258e:	2001      	movs	r0, #1
 8002590:	e04e      	b.n	8002630 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002592:	2b30      	cmp	r3, #48	; 0x30
 8002594:	d1fb      	bne.n	800258e <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002596:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800259a:	f000 80b4 	beq.w	8002706 <UART_SetConfig+0x226>
 800259e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025a2:	e083      	b.n	80026ac <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a4:	4a6b      	ldr	r2, [pc, #428]	; (8002754 <UART_SetConfig+0x274>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10f      	bne.n	80025ca <UART_SetConfig+0xea>
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <UART_SetConfig+0x260>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	f000 809a 	beq.w	80026ee <UART_SetConfig+0x20e>
 80025ba:	d804      	bhi.n	80025c6 <UART_SetConfig+0xe6>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 809b 	beq.w	80026f8 <UART_SetConfig+0x218>
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	e7e1      	b.n	800258a <UART_SetConfig+0xaa>
 80025c6:	2bc0      	cmp	r3, #192	; 0xc0
 80025c8:	e7e4      	b.n	8002594 <UART_SetConfig+0xb4>
 80025ca:	4a63      	ldr	r2, [pc, #396]	; (8002758 <UART_SetConfig+0x278>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d112      	bne.n	80025f6 <UART_SetConfig+0x116>
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <UART_SetConfig+0x260>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025de:	f000 8086 	beq.w	80026ee <UART_SetConfig+0x20e>
 80025e2:	d805      	bhi.n	80025f0 <UART_SetConfig+0x110>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8087 	beq.w	80026f8 <UART_SetConfig+0x218>
 80025ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ee:	e7cc      	b.n	800258a <UART_SetConfig+0xaa>
 80025f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025f4:	e7ce      	b.n	8002594 <UART_SetConfig+0xb4>
 80025f6:	4a50      	ldr	r2, [pc, #320]	; (8002738 <UART_SetConfig+0x258>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d1c8      	bne.n	800258e <UART_SetConfig+0xae>
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <UART_SetConfig+0x260>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800260a:	d015      	beq.n	8002638 <UART_SetConfig+0x158>
 800260c:	d806      	bhi.n	800261c <UART_SetConfig+0x13c>
 800260e:	b15b      	cbz	r3, 8002628 <UART_SetConfig+0x148>
 8002610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002614:	d1bb      	bne.n	800258e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002616:	f7ff f8d5 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
        break;
 800261a:	e007      	b.n	800262c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800261c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002620:	d1b5      	bne.n	800258e <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002622:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002626:	e008      	b.n	800263a <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002628:	f7ff fc4a 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800262c:	b928      	cbnz	r0, 800263a <UART_SetConfig+0x15a>
 800262e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002630:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002632:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002636:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002638:	4848      	ldr	r0, [pc, #288]	; (800275c <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800263a:	6862      	ldr	r2, [r4, #4]
 800263c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002640:	4283      	cmp	r3, r0
 8002642:	d8a4      	bhi.n	800258e <UART_SetConfig+0xae>
 8002644:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002648:	d8a1      	bhi.n	800258e <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800264a:	0851      	lsrs	r1, r2, #1
 800264c:	2500      	movs	r5, #0
 800264e:	468c      	mov	ip, r1
 8002650:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002654:	4629      	mov	r1, r5
 8002656:	fbe0 c106 	umlal	ip, r1, r0, r6
 800265a:	462b      	mov	r3, r5
 800265c:	4660      	mov	r0, ip
 800265e:	f7fe faa3 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <UART_SetConfig+0x280>)
 8002664:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002668:	429a      	cmp	r2, r3
 800266a:	d890      	bhi.n	800258e <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	60d8      	str	r0, [r3, #12]
 8002670:	e7dd      	b.n	800262e <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8002672:	483a      	ldr	r0, [pc, #232]	; (800275c <UART_SetConfig+0x27c>)
 8002674:	e047      	b.n	8002706 <UART_SetConfig+0x226>
    switch (clocksource)
 8002676:	2b08      	cmp	r3, #8
 8002678:	d889      	bhi.n	800258e <UART_SetConfig+0xae>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <UART_SetConfig+0x1a0>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026a5 	.word	0x080026a5
 8002684:	080026cb 	.word	0x080026cb
 8002688:	080026f5 	.word	0x080026f5
 800268c:	0800258f 	.word	0x0800258f
 8002690:	080026d1 	.word	0x080026d1
 8002694:	0800258f 	.word	0x0800258f
 8002698:	0800258f 	.word	0x0800258f
 800269c:	0800258f 	.word	0x0800258f
 80026a0:	0800259f 	.word	0x0800259f
        pclk = HAL_RCC_GetPCLK1Freq();
 80026a4:	f7ff fc0c 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0c0      	beq.n	800262e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026ac:	6862      	ldr	r2, [r4, #4]
 80026ae:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80026b2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80026ba:	f1a3 0110 	sub.w	r1, r3, #16
 80026be:	4291      	cmp	r1, r2
 80026c0:	f63f af65 	bhi.w	800258e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	60d3      	str	r3, [r2, #12]
 80026c8:	e7b1      	b.n	800262e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026ca:	f7ff fc0b 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
        break;
 80026ce:	e7eb      	b.n	80026a8 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 80026d0:	f7ff f878 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
        break;
 80026d4:	e7e8      	b.n	80026a8 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026da:	d1f6      	bne.n	80026ca <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026dc:	f7ff fc02 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
        break;
 80026e0:	e00f      	b.n	8002702 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026e6:	d1f3      	bne.n	80026d0 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 80026e8:	f7ff f86c 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
        break;
 80026ec:	e009      	b.n	8002702 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026f2:	d0be      	beq.n	8002672 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 80026f4:	4819      	ldr	r0, [pc, #100]	; (800275c <UART_SetConfig+0x27c>)
 80026f6:	e7d9      	b.n	80026ac <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026fc:	d1d2      	bne.n	80026a4 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80026fe:	f7ff fbdf 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002702:	2800      	cmp	r0, #0
 8002704:	d093      	beq.n	800262e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002706:	6862      	ldr	r2, [r4, #4]
 8002708:	0853      	lsrs	r3, r2, #1
 800270a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800270e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002712:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002716:	f1a3 0110 	sub.w	r1, r3, #16
 800271a:	4291      	cmp	r1, r2
 800271c:	f63f af37 	bhi.w	800258e <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002720:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002724:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002726:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002728:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800272c:	4313      	orrs	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
 8002730:	e77d      	b.n	800262e <UART_SetConfig+0x14e>
 8002732:	bf00      	nop
 8002734:	efff69f3 	.word	0xefff69f3
 8002738:	40008000 	.word	0x40008000
 800273c:	40013800 	.word	0x40013800
 8002740:	40021000 	.word	0x40021000
 8002744:	0800abd4 	.word	0x0800abd4
 8002748:	40004400 	.word	0x40004400
 800274c:	0800abd7 	.word	0x0800abd7
 8002750:	40004800 	.word	0x40004800
 8002754:	40004c00 	.word	0x40004c00
 8002758:	40005000 	.word	0x40005000
 800275c:	00f42400 	.word	0x00f42400
 8002760:	000ffcff 	.word	0x000ffcff

08002764 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002764:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002766:	07da      	lsls	r2, r3, #31
{
 8002768:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800276a:	d506      	bpl.n	800277a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800276c:	6801      	ldr	r1, [r0, #0]
 800276e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002770:	684a      	ldr	r2, [r1, #4]
 8002772:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002776:	4322      	orrs	r2, r4
 8002778:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800277a:	079c      	lsls	r4, r3, #30
 800277c:	d506      	bpl.n	800278c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800277e:	6801      	ldr	r1, [r0, #0]
 8002780:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002782:	684a      	ldr	r2, [r1, #4]
 8002784:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002788:	4322      	orrs	r2, r4
 800278a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800278c:	0759      	lsls	r1, r3, #29
 800278e:	d506      	bpl.n	800279e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002794:	684a      	ldr	r2, [r1, #4]
 8002796:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800279a:	4322      	orrs	r2, r4
 800279c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800279e:	071a      	lsls	r2, r3, #28
 80027a0:	d506      	bpl.n	80027b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027a2:	6801      	ldr	r1, [r0, #0]
 80027a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80027a6:	684a      	ldr	r2, [r1, #4]
 80027a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ac:	4322      	orrs	r2, r4
 80027ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027b0:	06dc      	lsls	r4, r3, #27
 80027b2:	d506      	bpl.n	80027c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027b4:	6801      	ldr	r1, [r0, #0]
 80027b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80027b8:	688a      	ldr	r2, [r1, #8]
 80027ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027be:	4322      	orrs	r2, r4
 80027c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027c2:	0699      	lsls	r1, r3, #26
 80027c4:	d506      	bpl.n	80027d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027c6:	6801      	ldr	r1, [r0, #0]
 80027c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80027ca:	688a      	ldr	r2, [r1, #8]
 80027cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d0:	4322      	orrs	r2, r4
 80027d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027d4:	065a      	lsls	r2, r3, #25
 80027d6:	d50f      	bpl.n	80027f8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027d8:	6801      	ldr	r1, [r0, #0]
 80027da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80027dc:	684a      	ldr	r2, [r1, #4]
 80027de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80027e2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027e8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ea:	d105      	bne.n	80027f8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027ec:	684a      	ldr	r2, [r1, #4]
 80027ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027f0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80027f4:	4322      	orrs	r2, r4
 80027f6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	d506      	bpl.n	800280a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027fc:	6802      	ldr	r2, [r0, #0]
 80027fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002800:	6853      	ldr	r3, [r2, #4]
 8002802:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002806:	430b      	orrs	r3, r1
 8002808:	6053      	str	r3, [r2, #4]
  }
}
 800280a:	bd10      	pop	{r4, pc}

0800280c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002810:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002814:	4604      	mov	r4, r0
 8002816:	460e      	mov	r6, r1
 8002818:	4615      	mov	r5, r2
 800281a:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	6822      	ldr	r2, [r4, #0]
 800281e:	69d3      	ldr	r3, [r2, #28]
 8002820:	ea36 0303 	bics.w	r3, r6, r3
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	42ab      	cmp	r3, r5
 800282c:	d001      	beq.n	8002832 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800282e:	2000      	movs	r0, #0
 8002830:	e025      	b.n	800287e <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8002832:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002836:	d0f2      	beq.n	800281e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002838:	f7fe fd7e 	bl	8001338 <HAL_GetTick>
 800283c:	1bc0      	subs	r0, r0, r7
 800283e:	4540      	cmp	r0, r8
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	d802      	bhi.n	800284a <UART_WaitOnFlagUntilTimeout+0x3e>
 8002844:	f1b8 0f00 	cmp.w	r8, #0
 8002848:	d11b      	bne.n	8002882 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800284e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	e840 3200 	strex	r2, r3, [r0]
 8002856:	2a00      	cmp	r2, #0
 8002858:	d1f7      	bne.n	800284a <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	f100 0308 	add.w	r3, r0, #8
 800285e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	f100 0108 	add.w	r1, r0, #8
 800286a:	e841 3200 	strex	r2, r3, [r1]
 800286e:	2a00      	cmp	r2, #0
 8002870:	d1f3      	bne.n	800285a <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002872:	2320      	movs	r3, #32
 8002874:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002876:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002878:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800287c:	2003      	movs	r0, #3
}
 800287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002882:	6803      	ldr	r3, [r0, #0]
 8002884:	075a      	lsls	r2, r3, #29
 8002886:	d5c9      	bpl.n	800281c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002888:	69c3      	ldr	r3, [r0, #28]
 800288a:	051b      	lsls	r3, r3, #20
 800288c:	d5c6      	bpl.n	800281c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800288e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002892:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	e840 3200 	strex	r2, r3, [r0]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d1f7      	bne.n	8002894 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	f100 0308 	add.w	r3, r0, #8
 80028a8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	f100 0108 	add.w	r1, r0, #8
 80028b4:	e841 3200 	strex	r2, r3, [r1]
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d1f3      	bne.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80028bc:	2320      	movs	r3, #32
 80028be:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028c0:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80028c6:	e7d7      	b.n	8002878 <UART_WaitOnFlagUntilTimeout+0x6c>

080028c8 <HAL_UART_Transmit>:
{
 80028c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80028cc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80028ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80028d0:	2b20      	cmp	r3, #32
{
 80028d2:	4604      	mov	r4, r0
 80028d4:	460e      	mov	r6, r1
 80028d6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80028d8:	d14e      	bne.n	8002978 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80028da:	2900      	cmp	r1, #0
 80028dc:	d04a      	beq.n	8002974 <HAL_UART_Transmit+0xac>
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d048      	beq.n	8002974 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80028e2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d046      	beq.n	8002978 <HAL_UART_Transmit+0xb0>
 80028ea:	2301      	movs	r3, #1
 80028ec:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f8:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80028fa:	f7fe fd1d 	bl	8001338 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fe:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002900:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002908:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800290a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290e:	d103      	bne.n	8002918 <HAL_UART_Transmit+0x50>
 8002910:	6922      	ldr	r2, [r4, #16]
 8002912:	b90a      	cbnz	r2, 8002918 <HAL_UART_Transmit+0x50>
 8002914:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002916:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002918:	2200      	movs	r2, #0
 800291a:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800291e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002922:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002926:	b292      	uxth	r2, r2
 8002928:	b93a      	cbnz	r2, 800293a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4620      	mov	r0, r4
 800292e:	f7ff ff6d 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002932:	b950      	cbnz	r0, 800294a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002934:	2320      	movs	r3, #32
 8002936:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002938:	e008      	b.n	800294c <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	4620      	mov	r0, r4
 8002940:	9303      	str	r3, [sp, #12]
 8002942:	f7ff ff63 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002946:	9b03      	ldr	r3, [sp, #12]
 8002948:	b118      	cbz	r0, 8002952 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 800294a:	2003      	movs	r0, #3
}
 800294c:	b004      	add	sp, #16
 800294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002952:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002954:	b95e      	cbnz	r6, 800296e <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002956:	f835 2b02 	ldrh.w	r2, [r5], #2
 800295a:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800295e:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002960:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002964:	3a01      	subs	r2, #1
 8002966:	b292      	uxth	r2, r2
 8002968:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800296c:	e7d7      	b.n	800291e <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800296e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002972:	e7f4      	b.n	800295e <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002974:	2001      	movs	r0, #1
 8002976:	e7e9      	b.n	800294c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002978:	2002      	movs	r0, #2
 800297a:	e7e7      	b.n	800294c <HAL_UART_Transmit+0x84>

0800297c <HAL_UART_Receive>:
{
 800297c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002980:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002982:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002984:	2b20      	cmp	r3, #32
{
 8002986:	4604      	mov	r4, r0
 8002988:	460e      	mov	r6, r1
 800298a:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800298c:	d163      	bne.n	8002a56 <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 800298e:	2900      	cmp	r1, #0
 8002990:	d05f      	beq.n	8002a52 <HAL_UART_Receive+0xd6>
 8002992:	2a00      	cmp	r2, #0
 8002994:	d05d      	beq.n	8002a52 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 8002996:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800299a:	2b01      	cmp	r3, #1
 800299c:	d05b      	beq.n	8002a56 <HAL_UART_Receive+0xda>
 800299e:	2301      	movs	r3, #1
 80029a0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029a6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ac:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 80029b0:	f7fe fcc2 	bl	8001338 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80029b4:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80029b6:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80029ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80029be:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 80029c0:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80029c4:	d11a      	bne.n	80029fc <HAL_UART_Receive+0x80>
 80029c6:	6922      	ldr	r2, [r4, #16]
 80029c8:	42aa      	cmp	r2, r5
 80029ca:	f240 15ff 	movw	r5, #511	; 0x1ff
 80029ce:	bf18      	it	ne
 80029d0:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 80029d6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029da:	d11f      	bne.n	8002a1c <HAL_UART_Receive+0xa0>
 80029dc:	6923      	ldr	r3, [r4, #16]
 80029de:	b9eb      	cbnz	r3, 8002a1c <HAL_UART_Receive+0xa0>
 80029e0:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 80029e2:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80029e4:	2300      	movs	r3, #0
 80029e6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->RxXferCount > 0U)
 80029ea:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80029ee:	b290      	uxth	r0, r2
 80029f0:	b9b0      	cbnz	r0, 8002a20 <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 80029f2:	2320      	movs	r3, #32
 80029f4:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80029f6:	b003      	add	sp, #12
 80029f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80029fc:	b92b      	cbnz	r3, 8002a0a <HAL_UART_Receive+0x8e>
 80029fe:	6922      	ldr	r2, [r4, #16]
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	bf14      	ite	ne
 8002a04:	257f      	movne	r5, #127	; 0x7f
 8002a06:	25ff      	moveq	r5, #255	; 0xff
 8002a08:	e7e3      	b.n	80029d2 <HAL_UART_Receive+0x56>
 8002a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0e:	d1e0      	bne.n	80029d2 <HAL_UART_Receive+0x56>
 8002a10:	6922      	ldr	r2, [r4, #16]
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	257f      	moveq	r5, #127	; 0x7f
 8002a18:	253f      	movne	r5, #63	; 0x3f
 8002a1a:	e7da      	b.n	80029d2 <HAL_UART_Receive+0x56>
      pdata16bits = NULL;
 8002a1c:	2700      	movs	r7, #0
 8002a1e:	e7e1      	b.n	80029e4 <HAL_UART_Receive+0x68>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a20:	f8cd 8000 	str.w	r8, [sp]
 8002a24:	464b      	mov	r3, r9
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff feee 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002a30:	b998      	cbnz	r0, 8002a5a <HAL_UART_Receive+0xde>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a36:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8002a38:	b946      	cbnz	r6, 8002a4c <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a3a:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8002a3e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002a42:	3a01      	subs	r2, #1
 8002a44:	b292      	uxth	r2, r2
 8002a46:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002a4a:	e7ce      	b.n	80029ea <HAL_UART_Receive+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a4c:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8002a50:	e7f5      	b.n	8002a3e <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
 8002a54:	e7cf      	b.n	80029f6 <HAL_UART_Receive+0x7a>
    return HAL_BUSY;
 8002a56:	2002      	movs	r0, #2
 8002a58:	e7cd      	b.n	80029f6 <HAL_UART_Receive+0x7a>
        return HAL_TIMEOUT;
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	e7cb      	b.n	80029f6 <HAL_UART_Receive+0x7a>

08002a5e <UART_CheckIdleState>:
{
 8002a5e:	b530      	push	{r4, r5, lr}
 8002a60:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a62:	2500      	movs	r5, #0
{
 8002a64:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a66:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002a6a:	f7fe fc65 	bl	8001338 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002a74:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a76:	d415      	bmi.n	8002aa4 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a78:	6822      	ldr	r2, [r4, #0]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	0752      	lsls	r2, r2, #29
 8002a7e:	d509      	bpl.n	8002a94 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a80:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002a84:	9200      	str	r2, [sp, #0]
 8002a86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7ff febd 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002a92:	b9a0      	cbnz	r0, 8002abe <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002a94:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a96:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002a9a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002aa2:	e00d      	b.n	8002ac0 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aa4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002aa8:	9200      	str	r2, [sp, #0]
 8002aaa:	9003      	str	r0, [sp, #12]
 8002aac:	462a      	mov	r2, r5
 8002aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff feaa 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002ab8:	9b03      	ldr	r3, [sp, #12]
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d0dc      	beq.n	8002a78 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
}
 8002ac0:	b005      	add	sp, #20
 8002ac2:	bd30      	pop	{r4, r5, pc}

08002ac4 <HAL_UART_Init>:
{
 8002ac4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	b340      	cbz	r0, 8002b1c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002acc:	b91b      	cbnz	r3, 8002ad6 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002ace:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002ad2:	f7fe fb13 	bl	80010fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002ad6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	2324      	movs	r3, #36	; 0x24
 8002ada:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fcfb 	bl	80024e0 <UART_SetConfig>
 8002aea:	2801      	cmp	r0, #1
 8002aec:	d016      	beq.n	8002b1c <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002af0:	b113      	cbz	r3, 8002af8 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fe36 	bl	8002764 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b08:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002b10:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002b12:	601a      	str	r2, [r3, #0]
}
 8002b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002b18:	f7ff bfa1 	b.w	8002a5e <UART_CheckIdleState>
}
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	bd10      	pop	{r4, pc}

08002b20 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8002b24:	221c      	movs	r2, #28
 8002b26:	2100      	movs	r1, #0
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <_mon_alloc_reset+0x20>)
 8002b2a:	f005 fac4 	bl	80080b6 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8002b2e:	200a      	movs	r0, #10
 8002b30:	f000 ffec 	bl	8003b0c <__wrap_malloc>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f810 	bl	8003b5c <__wrap_free>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200009bc 	.word	0x200009bc

08002b44 <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <cyclesCounterEnd+0x44>)
 8002b48:	4d10      	ldr	r5, [pc, #64]	; (8002b8c <cyclesCounterEnd+0x48>)
 8002b4a:	685c      	ldr	r4, [r3, #4]
 8002b4c:	686b      	ldr	r3, [r5, #4]
 8002b4e:	1ae4      	subs	r4, r4, r3
 8002b50:	2300      	movs	r3, #0
 8002b52:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002b54:	f7fe fbf0 	bl	8001338 <HAL_GetTick>
 8002b58:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8002b5a:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002b5c:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8002b5e:	682a      	ldr	r2, [r5, #0]
 8002b60:	4290      	cmp	r0, r2
 8002b62:	d90c      	bls.n	8002b7e <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fe f81f 	bl	8000ba8 <__aeabi_uldivmod>
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	fba0 0303 	umull	r0, r3, r0, r3
 8002b72:	1900      	adds	r0, r0, r4
 8002b74:	eba3 0301 	sub.w	r3, r3, r1
 8002b78:	4604      	mov	r4, r0
 8002b7a:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4619      	mov	r1, r3
 8002b82:	b003      	add	sp, #12
 8002b84:	bd30      	pop	{r4, r5, pc}
 8002b86:	bf00      	nop
 8002b88:	e0001000 	.word	0xe0001000
 8002b8c:	200009b0 	.word	0x200009b0

08002b90 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8002b90:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8002b94:	4604      	mov	r4, r0
 8002b96:	460e      	mov	r6, r1
 8002b98:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8002b9a:	f7ff ffd3 	bl	8002b44 <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 8002b9e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f142 0200 	adc.w	r2, r2, #0
 8002ba8:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 8002bac:	0773      	lsls	r3, r6, #29
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8002bae:	e9cd 0100 	strd	r0, r1, [sp]
  if (flags & AI_OBSERVER_POST_EVT) {
 8002bb2:	d51f      	bpl.n	8002bf4 <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
 8002bb4:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 8002bc2:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8002bc6:	185b      	adds	r3, r3, r1
 8002bc8:	eb40 0202 	adc.w	r2, r0, r2
 8002bcc:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 8002bd0:	882b      	ldrh	r3, [r5, #0]
 8002bd2:	6a26      	ldr	r6, [r4, #32]
 8002bd4:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8002bd8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8002bdc:	f856 200c 	ldr.w	r2, [r6, ip]
 8002be0:	685d      	ldr	r5, [r3, #4]
 8002be2:	1852      	adds	r2, r2, r1
 8002be4:	f846 200c 	str.w	r2, [r6, ip]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002be8:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 8002bea:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002bee:	3201      	adds	r2, #1
    u_obs->nodes[node->c_idx].dur += end_t;
 8002bf0:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002bf2:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002bf4:	f7ff ffa6 	bl	8002b44 <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002bf8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002bfc:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002c00:	ebb3 0308 	subs.w	r3, r3, r8
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002c04:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002c08:	eb62 0209 	sbc.w	r2, r2, r9
 8002c0c:	1818      	adds	r0, r3, r0
 8002c0e:	eb41 0102 	adc.w	r1, r1, r2
 8002c12:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return 0;
}
 8002c16:	2000      	movs	r0, #0
 8002c18:	b002      	add	sp, #8
 8002c1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

08002c20 <aiDeInit>:
{
 8002c20:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002c22:	4c09      	ldr	r4, [pc, #36]	; (8002c48 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 8002c24:	4809      	ldr	r0, [pc, #36]	; (8002c4c <aiDeInit+0x2c>)
 8002c26:	f000 ff5f 	bl	8003ae8 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	b150      	cbz	r0, 8002c44 <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 8002c2e:	f001 f979 	bl	8003f24 <ai_mnetwork_destroy>
 8002c32:	b128      	cbz	r0, 8002c40 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8002c34:	6820      	ldr	r0, [r4, #0]
 8002c36:	f001 f998 	bl	8003f6a <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 8002c3a:	4905      	ldr	r1, [pc, #20]	; (8002c50 <aiDeInit+0x30>)
 8002c3c:	f000 fd48 	bl	80036d0 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	6023      	str	r3, [r4, #0]
}
 8002c44:	bd10      	pop	{r4, pc}
 8002c46:	bf00      	nop
 8002c48:	200008f0 	.word	0x200008f0
 8002c4c:	08009f40 	.word	0x08009f40
 8002c50:	08009f5f 	.word	0x08009f5f

08002c54 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8002c54:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 8002c56:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002c58:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c5c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 8002c60:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002c64:	f000 ff10 	bl	8003a88 <ioRawGetUint8>
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	d02c      	beq.n	8002cc6 <aiTestConsole+0x72>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 8002c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c70:	2b71      	cmp	r3, #113	; 0x71
 8002c72:	d02a      	beq.n	8002cca <aiTestConsole+0x76>
 8002c74:	2b52      	cmp	r3, #82	; 0x52
 8002c76:	d816      	bhi.n	8002ca6 <aiTestConsole+0x52>
 8002c78:	2b43      	cmp	r3, #67	; 0x43
 8002c7a:	d805      	bhi.n	8002c88 <aiTestConsole+0x34>
 8002c7c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c7e:	bf0c      	ite	eq
 8002c80:	2003      	moveq	r0, #3
 8002c82:	2064      	movne	r0, #100	; 0x64

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;

  return CONS_EVT_UNDEFINED;
}
 8002c84:	b002      	add	sp, #8
 8002c86:	bd10      	pop	{r4, pc}
 8002c88:	3b44      	subs	r3, #68	; 0x44
 8002c8a:	2b0e      	cmp	r3, #14
 8002c8c:	d809      	bhi.n	8002ca2 <aiTestConsole+0x4e>
 8002c8e:	e8df f003 	tbb	[pc, r3]
 8002c92:	0820      	.short	0x0820
 8002c94:	08220808 	.word	0x08220808
 8002c98:	08080808 	.word	0x08080808
 8002c9c:	1c1e0808 	.word	0x1c1e0808
 8002ca0:	24          	.byte	0x24
 8002ca1:	00          	.byte	0x00
  if ((c == 'q') || (c == 'Q'))
 8002ca2:	2064      	movs	r0, #100	; 0x64
 8002ca4:	e7ee      	b.n	8002c84 <aiTestConsole+0x30>
 8002ca6:	2b70      	cmp	r3, #112	; 0x70
 8002ca8:	d011      	beq.n	8002cce <aiTestConsole+0x7a>
 8002caa:	d808      	bhi.n	8002cbe <aiTestConsole+0x6a>
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d010      	beq.n	8002cd2 <aiTestConsole+0x7e>
 8002cb0:	2b68      	cmp	r3, #104	; 0x68
 8002cb2:	d010      	beq.n	8002cd6 <aiTestConsole+0x82>
    return CONS_EVT_PROF;
 8002cb4:	2b58      	cmp	r3, #88	; 0x58
 8002cb6:	bf14      	ite	ne
 8002cb8:	2064      	movne	r0, #100	; 0x64
 8002cba:	2005      	moveq	r0, #5
 8002cbc:	e7e2      	b.n	8002c84 <aiTestConsole+0x30>
 8002cbe:	2b72      	cmp	r3, #114	; 0x72
 8002cc0:	d00b      	beq.n	8002cda <aiTestConsole+0x86>
 8002cc2:	2b78      	cmp	r3, #120	; 0x78
 8002cc4:	e7f7      	b.n	8002cb6 <aiTestConsole+0x62>
    return CONS_EVT_TIMEOUT;
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	e7dc      	b.n	8002c84 <aiTestConsole+0x30>
    return CONS_EVT_QUIT;
 8002cca:	2001      	movs	r0, #1
 8002ccc:	e7da      	b.n	8002c84 <aiTestConsole+0x30>
    return CONS_EVT_PAUSE;
 8002cce:	2004      	movs	r0, #4
 8002cd0:	e7d8      	b.n	8002c84 <aiTestConsole+0x30>
  if ((c == 'q') || (c == 'Q'))
 8002cd2:	2006      	movs	r0, #6
 8002cd4:	e7d6      	b.n	8002c84 <aiTestConsole+0x30>
    return CONS_EVT_HELP;
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	e7d4      	b.n	8002c84 <aiTestConsole+0x30>
    return CONS_EVT_RESTART;
 8002cda:	2002      	movs	r0, #2
 8002cdc:	e7d2      	b.n	8002c84 <aiTestConsole+0x30>
	...

08002ce0 <aiObserverInit>:
{
 8002ce0:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002ce2:	4604      	mov	r4, r0
{
 8002ce4:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002ce6:	b1e0      	cbz	r0, 8002d22 <aiObserverInit+0x42>
 8002ce8:	6800      	ldr	r0, [r0, #0]
 8002cea:	b1d0      	cbz	r0, 8002d22 <aiObserverInit+0x42>
 8002cec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002cf0:	b1bb      	cbz	r3, 8002d22 <aiObserverInit+0x42>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002cf2:	4d17      	ldr	r5, [pc, #92]	; (8002d50 <aiObserverInit+0x70>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002cf4:	aa04      	add	r2, sp, #16
 8002cf6:	a903      	add	r1, sp, #12
 8002cf8:	f001 f974 	bl	8003fe4 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002cfc:	2228      	movs	r2, #40	; 0x28
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4628      	mov	r0, r5
 8002d02:	f005 f9d8 	bl	80080b6 <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8002d06:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002d0a:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	9201      	str	r2, [sp, #4]
 8002d10:	f000 fefc 	bl	8003b0c <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 8002d14:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002d16:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 8002d18:	b928      	cbnz	r0, 8002d26 <aiObserverInit+0x46>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8002d1a:	480e      	ldr	r0, [pc, #56]	; (8002d54 <aiObserverInit+0x74>)
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	f000 fee3 	bl	8003ae8 <lc_print>
}
 8002d22:	b013      	add	sp, #76	; 0x4c
 8002d24:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 8002d26:	2100      	movs	r1, #0
 8002d28:	f005 f9c5 	bl	80080b6 <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8002d2c:	490a      	ldr	r1, [pc, #40]	; (8002d58 <aiObserverInit+0x78>)
 8002d2e:	9803      	ldr	r0, [sp, #12]
 8002d30:	2306      	movs	r3, #6
 8002d32:	462a      	mov	r2, r5
 8002d34:	f003 f97c 	bl	8006030 <ai_platform_observer_register>
  if (!res) {
 8002d38:	4604      	mov	r4, r0
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d1f1      	bne.n	8002d22 <aiObserverInit+0x42>
    LC_PRINT("W: unable to register the user CB\r\n");
 8002d3e:	4807      	ldr	r0, [pc, #28]	; (8002d5c <aiObserverInit+0x7c>)
 8002d40:	f000 fed2 	bl	8003ae8 <lc_print>
    free(u_observer_ctx.nodes);
 8002d44:	6a28      	ldr	r0, [r5, #32]
 8002d46:	f000 ff09 	bl	8003b5c <__wrap_free>
    u_observer_ctx.nodes = NULL;
 8002d4a:	622c      	str	r4, [r5, #32]
    return;
 8002d4c:	e7e9      	b.n	8002d22 <aiObserverInit+0x42>
 8002d4e:	bf00      	nop
 8002d50:	20000988 	.word	0x20000988
 8002d54:	08009f73 	.word	0x08009f73
 8002d58:	08002b91 	.word	0x08002b91
 8002d5c:	08009fa7 	.word	0x08009fa7

08002d60 <aiObserverDone>:
{
 8002d60:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002d64:	ed2d 8b02 	vpush	{d8}
 8002d68:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	f000 80de 	beq.w	8002f2c <aiObserverDone+0x1cc>
 8002d70:	6803      	ldr	r3, [r0, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80da 	beq.w	8002f2c <aiObserverDone+0x1cc>
 8002d78:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	f000 80d5 	beq.w	8002f2c <aiObserverDone+0x1cc>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8002d82:	4c6d      	ldr	r4, [pc, #436]	; (8002f38 <aiObserverDone+0x1d8>)
 8002d84:	6a22      	ldr	r2, [r4, #32]
 8002d86:	2a00      	cmp	r2, #0
 8002d88:	f000 80d0 	beq.w	8002f2c <aiObserverDone+0x1cc>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	aa12      	add	r2, sp, #72	; 0x48
 8002d90:	a909      	add	r1, sp, #36	; 0x24
 8002d92:	f001 f927 	bl	8003fe4 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002d96:	4969      	ldr	r1, [pc, #420]	; (8002f3c <aiObserverDone+0x1dc>)
 8002d98:	9809      	ldr	r0, [sp, #36]	; 0x24
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002d9a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002f5c <aiObserverDone+0x1fc>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002d9e:	4622      	mov	r2, r4
 8002da0:	f003 f9e6 	bl	8006170 <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 8002da4:	4866      	ldr	r0, [pc, #408]	; (8002f40 <aiObserverDone+0x1e0>)
 8002da6:	f000 fe9f 	bl	8003ae8 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002daa:	6a23      	ldr	r3, [r4, #32]
 8002dac:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	2300      	movs	r3, #0
 8002db4:	f7fd fef8 	bl	8000ba8 <__aeabi_uldivmod>
 8002db8:	aa0a      	add	r2, sp, #40	; 0x28
 8002dba:	f000 ff23 	bl	8003c04 <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8002dbe:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8002dc2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002dc6:	fb05 3101 	mla	r1, r5, r1, r3
 8002dca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002dcc:	485d      	ldr	r0, [pc, #372]	; (8002f44 <aiObserverDone+0x1e4>)
 8002dce:	f000 fe8b 	bl	8003ae8 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002dd2:	6a23      	ldr	r3, [r4, #32]
 8002dd4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f7fd fee4 	bl	8000ba8 <__aeabi_uldivmod>
 8002de0:	aa0a      	add	r2, sp, #40	; 0x28
 8002de2:	f000 ff0f 	bl	8003c04 <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8002de6:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8002dea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002dec:	4856      	ldr	r0, [pc, #344]	; (8002f48 <aiObserverDone+0x1e8>)
 8002dee:	fb05 3101 	mla	r1, r5, r1, r3
 8002df2:	f000 fe79 	bl	8003ae8 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002df6:	f1a8 0324 	sub.w	r3, r8, #36	; 0x24
 8002dfa:	f1a8 0221 	sub.w	r2, r8, #33	; 0x21
 8002dfe:	f1a8 011c 	sub.w	r1, r8, #28
 8002e02:	f1a8 0017 	sub.w	r0, r8, #23
 8002e06:	f8cd 8000 	str.w	r8, [sp]
 8002e0a:	f000 fe6d 	bl	8003ae8 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 8002e0e:	f108 000a 	add.w	r0, r8, #10
 8002e12:	f000 fe69 	bl	8003ae8 <lc_print>
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002e16:	2300      	movs	r3, #0
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002e18:	f1a8 02d6 	sub.w	r2, r8, #214	; 0xd6
  cumul = 0;
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	461e      	mov	r6, r3
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002e20:	9207      	str	r2, [sp, #28]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002e22:	9809      	ldr	r0, [sp, #36]	; 0x24
  node_info.c_idx = 0;
 8002e24:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002e28:	a90e      	add	r1, sp, #56	; 0x38
 8002e2a:	f003 f853 	bl	8005ed4 <ai_platform_observer_node_info>
 8002e2e:	4680      	mov	r8, r0
 8002e30:	bb20      	cbnz	r0, 8002e7c <aiObserverDone+0x11c>
  LC_PRINT(" -------------------------------------------------\r\n");
 8002e32:	4846      	ldr	r0, [pc, #280]	; (8002f4c <aiObserverDone+0x1ec>)
 8002e34:	f000 fe58 	bl	8003ae8 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 8002e38:	6a23      	ldr	r3, [r4, #32]
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4631      	mov	r1, r6
 8002e40:	4643      	mov	r3, r8
 8002e42:	f7fd feb1 	bl	8000ba8 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 8002e46:	aa0a      	add	r2, sp, #40	; 0x28
 8002e48:	f000 fedc 	bl	8003c04 <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8002e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e56:	fb00 1202 	mla	r2, r0, r2, r1
 8002e5a:	493d      	ldr	r1, [pc, #244]	; (8002f50 <aiObserverDone+0x1f0>)
 8002e5c:	1c48      	adds	r0, r1, #1
 8002e5e:	f000 fe43 	bl	8003ae8 <lc_print>
  free(u_observer_ctx.nodes);
 8002e62:	6a20      	ldr	r0, [r4, #32]
 8002e64:	f000 fe7a 	bl	8003b5c <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002e68:	4833      	ldr	r0, [pc, #204]	; (8002f38 <aiObserverDone+0x1d8>)
 8002e6a:	2228      	movs	r2, #40	; 0x28
 8002e6c:	4641      	mov	r1, r8
}
 8002e6e:	b020      	add	sp, #128	; 0x80
 8002e70:	ecbd 8b02 	vpop	{d8}
 8002e74:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002e78:	f005 b91d 	b.w	80080b6 <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8002e7c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002e80:	6a22      	ldr	r2, [r4, #32]
 8002e82:	0119      	lsls	r1, r3, #4
 8002e84:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 8002e88:	5850      	ldr	r0, [r2, r1]
 8002e8a:	6859      	ldr	r1, [r3, #4]
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002e8c:	689a      	ldr	r2, [r3, #8]
    cumul +=  sn->dur;
 8002e8e:	1945      	adds	r5, r0, r5
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002e90:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 8002e94:	eb41 0606 	adc.w	r6, r1, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002e98:	f7fd fe86 	bl	8000ba8 <__aeabi_uldivmod>
 8002e9c:	aa0a      	add	r2, sp, #40	; 0x28
 8002e9e:	f000 feb1 	bl	8003c04 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8002ea2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002ea6:	9907      	ldr	r1, [sp, #28]
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8002ea8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <aiObserverDone+0x1f4>)
    LC_PRINT(fmt, node_info.c_idx,
 8002eae:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002eb2:	ea12 0223 	ands.w	r2, r2, r3, asr #32
 8002eb6:	bf38      	it	cc
 8002eb8:	460a      	movcc	r2, r1
    LC_PRINT(fmt, node_info.c_idx,
 8002eba:	f3c0 000e 	ubfx	r0, r0, #0, #15
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002ebe:	4691      	mov	r9, r2
    LC_PRINT(fmt, node_info.c_idx,
 8002ec0:	f003 fa20 	bl	8006304 <ai_layer_type_name>
 8002ec4:	2325      	movs	r3, #37	; 0x25
 8002ec6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8002eca:	9304      	str	r3, [sp, #16]
 8002ecc:	6a23      	ldr	r3, [r4, #32]
 8002ece:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8002ed2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002edc:	f7fd fb56 	bl	800058c <__aeabi_ul2d>
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <aiObserverDone+0x1f8>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f7fd fb88 	bl	80005f8 <__aeabi_dmul>
 8002ee8:	ec41 0b18 	vmov	d8, r0, r1
 8002eec:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002ef0:	f7fd fb4c 	bl	800058c <__aeabi_ul2d>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	ec51 0b18 	vmov	r0, r1, d8
 8002efc:	f7fd fca6 	bl	800084c <__aeabi_ddiv>
 8002f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f10:	fb01 3302 	mla	r3, r1, r2, r3
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4642      	mov	r2, r8
 8002f18:	465b      	mov	r3, fp
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	4648      	mov	r0, r9
 8002f1e:	f000 fde3 	bl	8003ae8 <lc_print>
    node_info.c_idx++;
 8002f22:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002f26:	3301      	adds	r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	e77a      	b.n	8002e22 <aiObserverDone+0xc2>
}
 8002f2c:	b020      	add	sp, #128	; 0x80
 8002f2e:	ecbd 8b02 	vpop	{d8}
 8002f32:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8002f36:	bf00      	nop
 8002f38:	20000988 	.word	0x20000988
 8002f3c:	08002b91 	.word	0x08002b91
 8002f40:	0800a016 	.word	0x0800a016
 8002f44:	0800a034 	.word	0x0800a034
 8002f48:	0800a06f 	.word	0x0800a06f
 8002f4c:	0800a109 	.word	0x0800a109
 8002f50:	0800a13e 	.word	0x0800a13e
 8002f54:	08009fcb 	.word	0x08009fcb
 8002f58:	40590000 	.word	0x40590000
 8002f5c:	0800a0c8 	.word	0x0800a0c8

08002f60 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8002f60:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 8002f64:	484e      	ldr	r0, [pc, #312]	; (80030a0 <aiSystemPerformanceInit+0x140>)
  port_dwt_reset();
 8002f66:	4d4f      	ldr	r5, [pc, #316]	; (80030a4 <aiSystemPerformanceInit+0x144>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002f68:	4e4f      	ldr	r6, [pc, #316]	; (80030a8 <aiSystemPerformanceInit+0x148>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8002f6a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80030cc <aiSystemPerformanceInit+0x16c>
{
 8002f6e:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 8002f70:	f000 fdba 	bl	8003ae8 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8002f74:	494d      	ldr	r1, [pc, #308]	; (80030ac <aiSystemPerformanceInit+0x14c>)
 8002f76:	2300      	movs	r3, #0
 8002f78:	f101 0022 	add.w	r0, r1, #34	; 0x22
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	f000 fdb3 	bl	8003ae8 <lc_print>
 8002f82:	2400      	movs	r4, #0
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 8002f84:	484a      	ldr	r0, [pc, #296]	; (80030b0 <aiSystemPerformanceInit+0x150>)
 8002f86:	f000 fdaf 	bl	8003ae8 <lc_print>

  systemSettingLog();
 8002f8a:	f000 fea7 	bl	8003cdc <systemSettingLog>

  crcIpInit();
 8002f8e:	f000 ff3b 	bl	8003e08 <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8002f92:	f000 ff49 	bl	8003e28 <port_dwt_init_imp>
  port_dwt_reset();
 8002f96:	606c      	str	r4, [r5, #4]
  port_hal_delay(100);
 8002f98:	2064      	movs	r0, #100	; 0x64
 8002f9a:	f7fe f9d3 	bl	8001344 <HAL_Delay>
  st = port_dwt_get_cycles();
 8002f9e:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8002fa0:	aa02      	add	r2, sp, #8
 8002fa2:	2564      	movs	r5, #100	; 0x64
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	fbb0 f0f5 	udiv	r0, r0, r5
 8002faa:	f000 fe2b 	bl	8003c04 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8002fae:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8002fb2:	9a05      	ldr	r2, [sp, #20]
 8002fb4:	483f      	ldr	r0, [pc, #252]	; (80030b4 <aiSystemPerformanceInit+0x154>)
 8002fb6:	fb05 3101 	mla	r1, r5, r1, r3
 8002fba:	f000 fd95 	bl	8003ae8 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8002fbe:	aa02      	add	r2, sp, #8
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	f000 fe1d 	bl	8003c04 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8002fca:	9a03      	ldr	r2, [sp, #12]
 8002fcc:	9b04      	ldr	r3, [sp, #16]
 8002fce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fd2:	fb01 3302 	mla	r3, r1, r2, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002fd6:	4635      	mov	r5, r6
 8002fd8:	4a37      	ldr	r2, [pc, #220]	; (80030b8 <aiSystemPerformanceInit+0x158>)
 8002fda:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8002fdc:	f000 ff24 	bl	8003e28 <port_dwt_init_imp>
  aiPlatformVersion();
 8002fe0:	f000 fb60 	bl	80036a4 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002fe4:	f845 4b08 	str.w	r4, [r5], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8002fe8:	4834      	ldr	r0, [pc, #208]	; (80030bc <aiSystemPerformanceInit+0x15c>)
 8002fea:	f000 fd7d 	bl	8003ae8 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8002fee:	f109 0a17 	add.w	sl, r9, #23
  LC_PRINT("Initializing the network\r\n");
 8002ff2:	f109 0b48 	add.w	fp, r9, #72	; 0x48
    nn_name = ai_mnetwork_find(NULL, idx);
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f000 ff5b 	bl	8003eb4 <ai_mnetwork_find>
    if (nn_name) {
 8002ffe:	4680      	mov	r8, r0
 8003000:	b190      	cbz	r0, 8003028 <aiSystemPerformanceInit+0xc8>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003002:	4601      	mov	r1, r0
 8003004:	4648      	mov	r0, r9
 8003006:	f000 fd6f 	bl	8003ae8 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800300a:	4641      	mov	r1, r8
 800300c:	4650      	mov	r0, sl
 800300e:	f000 fd6b 	bl	8003ae8 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003012:	2200      	movs	r2, #0
 8003014:	f1a5 0108 	sub.w	r1, r5, #8
 8003018:	4640      	mov	r0, r8
 800301a:	f000 ff59 	bl	8003ed0 <ai_mnetwork_create>
  if (err.type) {
 800301e:	b2c3      	uxtb	r3, r0
 8003020:	b14b      	cbz	r3, 8003036 <aiSystemPerformanceInit+0xd6>
    aiLogErr(err, "ai_mnetwork_create");
 8003022:	4927      	ldr	r1, [pc, #156]	; (80030c0 <aiSystemPerformanceInit+0x160>)
 8003024:	f000 fb54 	bl	80036d0 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 8003028:	2003      	movs	r0, #3
 800302a:	f004 f9bd 	bl	80073a8 <srand>

  return 0;
}
 800302e:	2000      	movs	r0, #0
 8003030:	b006      	add	sp, #24
 8003032:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8003036:	4658      	mov	r0, fp
 8003038:	f000 fd56 	bl	8003ae8 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 800303c:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003040:	4629      	mov	r1, r5
 8003042:	f000 ff87 	bl	8003f54 <ai_mnetwork_get_report>
 8003046:	46a8      	mov	r8, r5
 8003048:	4603      	mov	r3, r0
 800304a:	b938      	cbnz	r0, 800305c <aiSystemPerformanceInit+0xfc>
    err = ai_mnetwork_get_error(ctx->handle);
 800304c:	2290      	movs	r2, #144	; 0x90
 800304e:	4354      	muls	r4, r2
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	5930      	ldr	r0, [r6, r4]
 8003054:	f000 ff89 	bl	8003f6a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003058:	491a      	ldr	r1, [pc, #104]	; (80030c4 <aiSystemPerformanceInit+0x164>)
 800305a:	e00b      	b.n	8003074 <aiSystemPerformanceInit+0x114>
  if (!ai_mnetwork_init(ctx->handle)) {
 800305c:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003060:	f000 ff90 	bl	8003f84 <ai_mnetwork_init>
 8003064:	b970      	cbnz	r0, 8003084 <aiSystemPerformanceInit+0x124>
    err = ai_mnetwork_get_error(ctx->handle);
 8003066:	2290      	movs	r2, #144	; 0x90
 8003068:	4354      	muls	r4, r2
 800306a:	9001      	str	r0, [sp, #4]
 800306c:	5930      	ldr	r0, [r6, r4]
 800306e:	f000 ff7c 	bl	8003f6a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003072:	4915      	ldr	r1, [pc, #84]	; (80030c8 <aiSystemPerformanceInit+0x168>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8003074:	f000 fb2c 	bl	80036d0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003078:	5930      	ldr	r0, [r6, r4]
 800307a:	f000 ff53 	bl	8003f24 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 800307e:	9b01      	ldr	r3, [sp, #4]
 8003080:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8003082:	e7d1      	b.n	8003028 <aiSystemPerformanceInit+0xc8>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003084:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8003088:	4629      	mov	r1, r5
 800308a:	f000 ff63 	bl	8003f54 <ai_mnetwork_get_report>
 800308e:	3590      	adds	r5, #144	; 0x90
 8003090:	4603      	mov	r3, r0
 8003092:	2800      	cmp	r0, #0
 8003094:	d0da      	beq.n	800304c <aiSystemPerformanceInit+0xec>
    aiPrintNetworkInfo(&ctx->report);
 8003096:	4640      	mov	r0, r8
 8003098:	f000 fc28 	bl	80038ec <aiPrintNetworkInfo>
    idx++;
 800309c:	3401      	adds	r4, #1
  } while (nn_name);
 800309e:	e7aa      	b.n	8002ff6 <aiSystemPerformanceInit+0x96>
 80030a0:	0800a153 	.word	0x0800a153
 80030a4:	e0001000 	.word	0xe0001000
 80030a8:	200008f0 	.word	0x200008f0
 80030ac:	0800a159 	.word	0x0800a159
 80030b0:	0800a188 	.word	0x0800a188
 80030b4:	0800a18c 	.word	0x0800a18c
 80030b8:	200009b0 	.word	0x200009b0
 80030bc:	0800a1c2 	.word	0x0800a1c2
 80030c0:	0800a217 	.word	0x0800a217
 80030c4:	0800a245 	.word	0x0800a245
 80030c8:	0800a25a 	.word	0x0800a25a
 80030cc:	0800a1e2 	.word	0x0800a1e2

080030d0 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 80030d0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80030d4:	ed2d 8b02 	vpush	{d8}
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80030d8:	ed9f 8a54 	vldr	s16, [pc, #336]	; 800322c <aiSystemPerformanceProcess+0x15c>
{
 80030dc:	b09c      	sub	sp, #112	; 0x70
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 80030de:	4c54      	ldr	r4, [pc, #336]	; (8003230 <aiSystemPerformanceProcess+0x160>)
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	b94b      	cbnz	r3, 80030f8 <aiSystemPerformanceProcess+0x28>
    LC_PRINT("E: network handle is NULL\r\n");
 80030e4:	4853      	ldr	r0, [pc, #332]	; (8003234 <aiSystemPerformanceProcess+0x164>)
 80030e6:	f000 fcff 	bl	8003ae8 <lc_print>

  do {
    r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 80030ea:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  } while (r==0);

  return r;
}
 80030ee:	b01c      	add	sp, #112	; 0x70
 80030f0:	ecbd 8b02 	vpop	{d8}
 80030f4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80030f8:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80030fc:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 8003100:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003260 <aiSystemPerformanceProcess+0x190>
  MON_STACK_INIT();
 8003104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003108:	f000 fd50 	bl	8003bac <stackMonInit>
  if (profiling_mode)
 800310c:	f899 3000 	ldrb.w	r3, [r9]
 8003110:	b30b      	cbz	r3, 8003156 <aiSystemPerformanceProcess+0x86>
    niter = _APP_ITER_ * profiling_factor;
 8003112:	4b49      	ldr	r3, [pc, #292]	; (8003238 <aiSystemPerformanceProcess+0x168>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	ea4f 1803 	mov.w	r8, r3, lsl #4
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 800311a:	68a1      	ldr	r1, [r4, #8]
 800311c:	4847      	ldr	r0, [pc, #284]	; (800323c <aiSystemPerformanceProcess+0x16c>)
 800311e:	4642      	mov	r2, r8
 8003120:	f000 fce2 	bl	8003ae8 <lc_print>
 8003124:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8003128:	4d45      	ldr	r5, [pc, #276]	; (8003240 <aiSystemPerformanceProcess+0x170>)
 800312a:	69aa      	ldr	r2, [r5, #24]
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <aiSystemPerformanceProcess+0x6a>
 8003130:	f3ef 8108 	mrs	r1, MSP
 8003134:	4843      	ldr	r0, [pc, #268]	; (8003244 <aiSystemPerformanceProcess+0x174>)
 8003136:	f000 fcd7 	bl	8003ae8 <lc_print>
  MON_STACK_MARK();
 800313a:	792b      	ldrb	r3, [r5, #4]
 800313c:	b973      	cbnz	r3, 800315c <aiSystemPerformanceProcess+0x8c>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 800313e:	f8b4 e040 	ldrh.w	lr, [r4, #64]	; 0x40
 8003142:	f1be 0f01 	cmp.w	lr, #1
 8003146:	d915      	bls.n	8003174 <aiSystemPerformanceProcess+0xa4>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 8003148:	483f      	ldr	r0, [pc, #252]	; (8003248 <aiSystemPerformanceProcess+0x178>)
 800314a:	f000 fccd 	bl	8003ae8 <lc_print>
    port_hal_delay(100);
 800314e:	2064      	movs	r0, #100	; 0x64
 8003150:	f7fe f8f8 	bl	8001344 <HAL_Delay>
 8003154:	e7c9      	b.n	80030ea <aiSystemPerformanceProcess+0x1a>
    niter = _APP_ITER_;
 8003156:	f04f 0810 	mov.w	r8, #16
 800315a:	e7de      	b.n	800311a <aiSystemPerformanceProcess+0x4a>
  MON_STACK_MARK();
 800315c:	69eb      	ldr	r3, [r5, #28]
 800315e:	3303      	adds	r3, #3
 8003160:	f023 0303 	bic.w	r3, r3, #3
 8003164:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8003168:	69aa      	ldr	r2, [r5, #24]
 800316a:	4293      	cmp	r3, r2
 800316c:	d2e7      	bcs.n	800313e <aiSystemPerformanceProcess+0x6e>
 800316e:	f843 1b04 	str.w	r1, [r3], #4
 8003172:	e7f9      	b.n	8003168 <aiSystemPerformanceProcess+0x98>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8003174:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003178:	f1bc 0f01 	cmp.w	ip, #1
 800317c:	d8e4      	bhi.n	8003148 <aiSystemPerformanceProcess+0x78>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 800317e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003264 <aiSystemPerformanceProcess+0x194>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003182:	2300      	movs	r3, #0
 8003184:	e010      	b.n	80031a8 <aiSystemPerformanceProcess+0xd8>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8003186:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
 800318a:	465e      	mov	r6, fp
 800318c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800318e:	ad0e      	add	r5, sp, #56	; 0x38
 8003190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003192:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8003196:	f8db 3004 	ldr.w	r3, [fp, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 800319a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 800319e:	b90b      	cbnz	r3, 80031a4 <aiSystemPerformanceProcess+0xd4>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80031a0:	f8da 3000 	ldr.w	r3, [sl]
 80031a4:	930f      	str	r3, [sp, #60]	; 0x3c
    niter = _APP_ITER_;
 80031a6:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80031a8:	459e      	cmp	lr, r3
 80031aa:	dcec      	bgt.n	8003186 <aiSystemPerformanceProcess+0xb6>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 80031ac:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8003268 <aiSystemPerformanceProcess+0x198>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 80031b0:	2300      	movs	r3, #0
 80031b2:	459c      	cmp	ip, r3
 80031b4:	dc28      	bgt.n	8003208 <aiSystemPerformanceProcess+0x138>
  if (profiling_mode) {
 80031b6:	f899 3000 	ldrb.w	r3, [r9]
 80031ba:	b14b      	cbz	r3, 80031d0 <aiSystemPerformanceProcess+0x100>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <aiSystemPerformanceProcess+0x168>)
 80031be:	4823      	ldr	r0, [pc, #140]	; (800324c <aiSystemPerformanceProcess+0x17c>)
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	f000 fc91 	bl	8003ae8 <lc_print>
    fflush(stdout);
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <aiSystemPerformanceProcess+0x180>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6898      	ldr	r0, [r3, #8]
 80031cc:	f004 fe6c 	bl	8007ea8 <fflush>
  if (observer_mode) {
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <aiSystemPerformanceProcess+0x184>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b153      	cbz	r3, 80031ec <aiSystemPerformanceProcess+0x11c>
    MON_ALLOC_ENABLE();
 80031d6:	4d20      	ldr	r5, [pc, #128]	; (8003258 <aiSystemPerformanceProcess+0x188>)
    MON_ALLOC_RESET();
 80031d8:	f7ff fca2 	bl	8002b20 <_mon_alloc_reset>
    MON_ALLOC_ENABLE();
 80031dc:	682b      	ldr	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 80031de:	4814      	ldr	r0, [pc, #80]	; (8003230 <aiSystemPerformanceProcess+0x160>)
    MON_ALLOC_ENABLE();
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 80031e6:	f7ff fd7b 	bl	8002ce0 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 80031ea:	696b      	ldr	r3, [r5, #20]
  int observer_heap_sz = 0UL;
 80031ec:	9306      	str	r3, [sp, #24]
  MON_ALLOC_RESET();
 80031ee:	f7ff fc97 	bl	8002b20 <_mon_alloc_reset>
  tcumul = 0ULL;
 80031f2:	2500      	movs	r5, #0
 80031f4:	46aa      	mov	sl, r5
  for (iter = 0; iter < niter; iter++) {
 80031f6:	462e      	mov	r6, r5
 80031f8:	4546      	cmp	r6, r8
 80031fa:	da74      	bge.n	80032e6 <aiSystemPerformanceProcess+0x216>
            in_data[j] = (ai_i8)(v * 127);
 80031fc:	eddf 8a17 	vldr	s17, [pc, #92]	; 800325c <aiSystemPerformanceProcess+0x18c>
 8003200:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003204:	2300      	movs	r3, #0
 8003206:	e04b      	b.n	80032a0 <aiSystemPerformanceProcess+0x1d0>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8003208:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 800320c:	4656      	mov	r6, sl
 800320e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003210:	ad15      	add	r5, sp, #84	; 0x54
 8003212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003214:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003218:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 800321c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8003220:	b90b      	cbnz	r3, 8003226 <aiSystemPerformanceProcess+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003222:	f8de 3000 	ldr.w	r3, [lr]
 8003226:	9316      	str	r3, [sp, #88]	; 0x58
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003228:	2301      	movs	r3, #1
 800322a:	e7c2      	b.n	80031b2 <aiSystemPerformanceProcess+0xe2>
 800322c:	30000000 	.word	0x30000000
 8003230:	200008f0 	.word	0x200008f0
 8003234:	0800a26b 	.word	0x0800a26b
 8003238:	200000fc 	.word	0x200000fc
 800323c:	0800a287 	.word	0x0800a287
 8003240:	200009d8 	.word	0x200009d8
 8003244:	0800a2ca 	.word	0x0800a2ca
 8003248:	0800a30e 	.word	0x0800a30e
 800324c:	0800a344 	.word	0x0800a344
 8003250:	200006b0 	.word	0x200006b0
 8003254:	200000f8 	.word	0x200000f8
 8003258:	200009bc 	.word	0x200009bc
 800325c:	42fe0000 	.word	0x42fe0000
 8003260:	20000980 	.word	0x20000980
 8003264:	20000108 	.word	0x20000108
 8003268:	2000010c 	.word	0x2000010c
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 800326c:	e9db 1200 	ldrd	r1, r2, [fp]
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003270:	f3c1 4043 	ubfx	r0, r1, #17, #4
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003274:	f3c1 11d1 	ubfx	r1, r1, #7, #18
 8003278:	f001 0178 	and.w	r1, r1, #120	; 0x78
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 800327c:	9005      	str	r0, [sp, #20]
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 800327e:	9107      	str	r1, [sp, #28]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003280:	f04f 0900 	mov.w	r9, #0
 8003284:	2101      	movs	r1, #1
 8003286:	4658      	mov	r0, fp
 8003288:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800328c:	f001 faa8 	bl	80047e0 <ai_buffer_get_size>
 8003290:	4581      	cmp	r9, r0
 8003292:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8003296:	f0c0 8106 	bcc.w	80034a6 <aiSystemPerformanceProcess+0x3d6>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800329a:	3301      	adds	r3, #1
 800329c:	f10b 0b1c 	add.w	fp, fp, #28
 80032a0:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80032a4:	4293      	cmp	r3, r2
 80032a6:	dbe1      	blt.n	800326c <aiSystemPerformanceProcess+0x19c>
    MON_ALLOC_ENABLE();
 80032a8:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80035b8 <aiSystemPerformanceProcess+0x4e8>
 80032ac:	f8d9 3000 	ldr.w	r3, [r9]
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c9 3000 	str.w	r3, [r9]
  cyclesCount.tick_start = port_hal_get_tick();
 80032b8:	f7fe f83e 	bl	8001338 <HAL_GetTick>
 80032bc:	4bb1      	ldr	r3, [pc, #708]	; (8003584 <aiSystemPerformanceProcess+0x4b4>)
  port_dwt_reset();
 80032be:	4ab2      	ldr	r2, [pc, #712]	; (8003588 <aiSystemPerformanceProcess+0x4b8>)
  cyclesCount.tick_start = port_hal_get_tick();
 80032c0:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 80032c2:	2100      	movs	r1, #0
 80032c4:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 80032c6:	6852      	ldr	r2, [r2, #4]
 80032c8:	605a      	str	r2, [r3, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	aa15      	add	r2, sp, #84	; 0x54
 80032ce:	a90e      	add	r1, sp, #56	; 0x38
 80032d0:	f000 fe77 	bl	8003fc2 <ai_mnetwork_run>
    if (batch != 1) {
 80032d4:	2801      	cmp	r0, #1
 80032d6:	f000 8116 	beq.w	8003506 <aiSystemPerformanceProcess+0x436>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f000 fe45 	bl	8003f6a <ai_mnetwork_get_error>
 80032e0:	49aa      	ldr	r1, [pc, #680]	; (800358c <aiSystemPerformanceProcess+0x4bc>)
 80032e2:	f000 f9f5 	bl	80036d0 <aiLogErr>
  LC_PRINT("\r\n");
 80032e6:	48aa      	ldr	r0, [pc, #680]	; (8003590 <aiSystemPerformanceProcess+0x4c0>)
 80032e8:	f000 fbfe 	bl	8003ae8 <lc_print>
  MON_STACK_EVALUATE();
 80032ec:	4aa9      	ldr	r2, [pc, #676]	; (8003594 <aiSystemPerformanceProcess+0x4c4>)
 80032ee:	f892 c004 	ldrb.w	ip, [r2, #4]
 80032f2:	2000      	movs	r0, #0
 80032f4:	6090      	str	r0, [r2, #8]
 80032f6:	f1bc 0f00 	cmp.w	ip, #0
 80032fa:	d023      	beq.n	8003344 <aiSystemPerformanceProcess+0x274>
 80032fc:	68d3      	ldr	r3, [r2, #12]
 80032fe:	6951      	ldr	r1, [r2, #20]
 8003300:	eba1 0903 	sub.w	r9, r1, r3
 8003304:	69d3      	ldr	r3, [r2, #28]
 8003306:	3303      	adds	r3, #3
 8003308:	f023 0303 	bic.w	r3, r3, #3
 800330c:	f103 0e20 	add.w	lr, r3, #32
 8003310:	f853 8b04 	ldr.w	r8, [r3], #4
 8003314:	f1b8 3fde 	cmp.w	r8, #3739147998	; 0xdededede
 8003318:	bf18      	it	ne
 800331a:	4660      	movne	r0, ip
 800331c:	4573      	cmp	r3, lr
 800331e:	d1f7      	bne.n	8003310 <aiSystemPerformanceProcess+0x240>
 8003320:	2800      	cmp	r0, #0
 8003322:	f040 8114 	bne.w	800354e <aiSystemPerformanceProcess+0x47e>
 8003326:	2020      	movs	r0, #32
 8003328:	f8d2 e018 	ldr.w	lr, [r2, #24]
 800332c:	6090      	str	r0, [r2, #8]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6890      	ldr	r0, [r2, #8]
 8003332:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 8003336:	d102      	bne.n	800333e <aiSystemPerformanceProcess+0x26e>
 8003338:	4573      	cmp	r3, lr
 800333a:	f0c0 8104 	bcc.w	8003546 <aiSystemPerformanceProcess+0x476>
 800333e:	eba9 0100 	sub.w	r1, r9, r0
 8003342:	6091      	str	r1, [r2, #8]
  LC_PRINT("\r\n");
 8003344:	4892      	ldr	r0, [pc, #584]	; (8003590 <aiSystemPerformanceProcess+0x4c0>)
 8003346:	f000 fbcf 	bl	8003ae8 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 800334a:	4a93      	ldr	r2, [pc, #588]	; (8003598 <aiSystemPerformanceProcess+0x4c8>)
 800334c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8003350:	1a28      	subs	r0, r5, r0
 8003352:	eb6a 0101 	sbc.w	r1, sl, r1
  tcumul /= (uint64_t)iter;
 8003356:	17f3      	asrs	r3, r6, #31
 8003358:	4632      	mov	r2, r6
 800335a:	f7fd fc25 	bl	8000ba8 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 800335e:	aa0a      	add	r2, sp, #40	; 0x28
  tcumul /= (uint64_t)iter;
 8003360:	4688      	mov	r8, r1
 8003362:	4681      	mov	r9, r0
  dwtCyclesToTime(tcumul, &t);
 8003364:	f000 fc4e 	bl	8003c04 <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %" PRIu64 " MACC)\r\n",
 8003368:	68a1      	ldr	r1, [r4, #8]
 800336a:	9105      	str	r1, [sp, #20]
 800336c:	f7fe fda2 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8003370:	4683      	mov	fp, r0
 8003372:	f7fe fd9f 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8003376:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 800337a:	4632      	mov	r2, r6
 800337c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003380:	4b86      	ldr	r3, [pc, #536]	; (800359c <aiSystemPerformanceProcess+0x4cc>)
 8003382:	9905      	ldr	r1, [sp, #20]
 8003384:	fbb0 f0f3 	udiv	r0, r0, r3
 8003388:	fbbb f3f3 	udiv	r3, fp, r3
 800338c:	9000      	str	r0, [sp, #0]
 800338e:	4884      	ldr	r0, [pc, #528]	; (80035a0 <aiSystemPerformanceProcess+0x4d0>)
 8003390:	f000 fbaa 	bl	8003ae8 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8003394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800339a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800339e:	fb00 3101 	mla	r1, r0, r1, r3
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80033a2:	2664      	movs	r6, #100	; 0x64
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 80033a4:	487f      	ldr	r0, [pc, #508]	; (80035a4 <aiSystemPerformanceProcess+0x4d4>)
 80033a6:	f000 fb9f 	bl	8003ae8 <lc_print>
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 80033aa:	464a      	mov	r2, r9
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80033ac:	fba9 9506 	umull	r9, r5, r9, r6
 80033b0:	fb06 5508 	mla	r5, r6, r8, r5
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 80033b4:	487c      	ldr	r0, [pc, #496]	; (80035a8 <aiSystemPerformanceProcess+0x4d8>)
 80033b6:	4643      	mov	r3, r8
 80033b8:	f000 fb96 	bl	8003ae8 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80033bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033be:	2300      	movs	r3, #0
 80033c0:	4629      	mov	r1, r5
 80033c2:	4648      	mov	r0, r9
 80033c4:	f7fd fbf0 	bl	8000ba8 <__aeabi_uldivmod>
 80033c8:	2225      	movs	r2, #37	; 0x25
 80033ca:	4601      	mov	r1, r0
 80033cc:	4877      	ldr	r0, [pc, #476]	; (80035ac <aiSystemPerformanceProcess+0x4dc>)
 80033ce:	f000 fb8b 	bl	8003ae8 <lc_print>
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80033d2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80033d6:	4629      	mov	r1, r5
 80033d8:	4648      	mov	r0, r9
 80033da:	f7fd fbe5 	bl	8000ba8 <__aeabi_uldivmod>
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80033de:	2300      	movs	r3, #0
 80033e0:	2264      	movs	r2, #100	; 0x64
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80033e2:	4605      	mov	r5, r0
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80033e4:	f7fd fbe0 	bl	8000ba8 <__aeabi_uldivmod>
 80033e8:	fb06 5210 	mls	r2, r6, r0, r5
 80033ec:	4601      	mov	r1, r0
 80033ee:	4870      	ldr	r0, [pc, #448]	; (80035b0 <aiSystemPerformanceProcess+0x4e0>)
 80033f0:	f000 fb7a 	bl	8003ae8 <lc_print>
  MON_STACK_REPORT();
 80033f4:	4b67      	ldr	r3, [pc, #412]	; (8003594 <aiSystemPerformanceProcess+0x4c4>)
 80033f6:	791a      	ldrb	r2, [r3, #4]
 80033f8:	2a00      	cmp	r2, #0
 80033fa:	f000 80b3 	beq.w	8003564 <aiSystemPerformanceProcess+0x494>
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	486c      	ldr	r0, [pc, #432]	; (80035b4 <aiSystemPerformanceProcess+0x4e4>)
 8003402:	f000 fb71 	bl	8003ae8 <lc_print>
  MON_ALLOC_REPORT();
 8003406:	496c      	ldr	r1, [pc, #432]	; (80035b8 <aiSystemPerformanceProcess+0x4e8>)
 8003408:	486c      	ldr	r0, [pc, #432]	; (80035bc <aiSystemPerformanceProcess+0x4ec>)
 800340a:	680b      	ldr	r3, [r1, #0]
 800340c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003410:	9303      	str	r3, [sp, #12]
 8003412:	698b      	ldr	r3, [r1, #24]
 8003414:	9302      	str	r3, [sp, #8]
 8003416:	694b      	ldr	r3, [r1, #20]
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	688b      	ldr	r3, [r1, #8]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	690b      	ldr	r3, [r1, #16]
 8003420:	684a      	ldr	r2, [r1, #4]
 8003422:	68c9      	ldr	r1, [r1, #12]
 8003424:	f000 fb60 	bl	8003ae8 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8003428:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800342c:	9906      	ldr	r1, [sp, #24]
 800342e:	4864      	ldr	r0, [pc, #400]	; (80035c0 <aiSystemPerformanceProcess+0x4f0>)
 8003430:	f000 fb5a 	bl	8003ae8 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 8003434:	4863      	ldr	r0, [pc, #396]	; (80035c4 <aiSystemPerformanceProcess+0x4f4>)
 8003436:	f7ff fc93 	bl	8002d60 <aiObserverDone>
      r = aiTestConsole();
 800343a:	f7ff fc0b 	bl	8002c54 <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 800343e:	2864      	cmp	r0, #100	; 0x64
 8003440:	f43f ae4d 	beq.w	80030de <aiSystemPerformanceProcess+0xe>
      } else if (r == CONS_EVT_HELP) {
 8003444:	2803      	cmp	r0, #3
 8003446:	d124      	bne.n	8003492 <aiSystemPerformanceProcess+0x3c2>
        LC_PRINT("\r\n");
 8003448:	4851      	ldr	r0, [pc, #324]	; (8003590 <aiSystemPerformanceProcess+0x4c0>)
 800344a:	f000 fb4d 	bl	8003ae8 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 800344e:	485e      	ldr	r0, [pc, #376]	; (80035c8 <aiSystemPerformanceProcess+0x4f8>)
 8003450:	f000 fb4a 	bl	8003ae8 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 8003454:	485d      	ldr	r0, [pc, #372]	; (80035cc <aiSystemPerformanceProcess+0x4fc>)
 8003456:	f000 fb47 	bl	8003ae8 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 800345a:	485d      	ldr	r0, [pc, #372]	; (80035d0 <aiSystemPerformanceProcess+0x500>)
 800345c:	f000 fb44 	bl	8003ae8 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 8003460:	485c      	ldr	r0, [pc, #368]	; (80035d4 <aiSystemPerformanceProcess+0x504>)
 8003462:	f000 fb41 	bl	8003ae8 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 8003466:	485c      	ldr	r0, [pc, #368]	; (80035d8 <aiSystemPerformanceProcess+0x508>)
 8003468:	f000 fb3e 	bl	8003ae8 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 800346c:	485b      	ldr	r0, [pc, #364]	; (80035dc <aiSystemPerformanceProcess+0x50c>)
 800346e:	f000 fb3b 	bl	8003ae8 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 8003472:	485b      	ldr	r0, [pc, #364]	; (80035e0 <aiSystemPerformanceProcess+0x510>)
 8003474:	f000 fb38 	bl	8003ae8 <lc_print>
        LC_PRINT("\r\n");
 8003478:	4845      	ldr	r0, [pc, #276]	; (8003590 <aiSystemPerformanceProcess+0x4c0>)
 800347a:	f000 fb35 	bl	8003ae8 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 800347e:	4859      	ldr	r0, [pc, #356]	; (80035e4 <aiSystemPerformanceProcess+0x514>)
 8003480:	f000 fb32 	bl	8003ae8 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8003484:	f7ff fbe6 	bl	8002c54 <aiTestConsole>
 8003488:	2800      	cmp	r0, #0
 800348a:	d06f      	beq.n	800356c <aiSystemPerformanceProcess+0x49c>
        if (r == CONS_EVT_UNDEFINED)
 800348c:	2864      	cmp	r0, #100	; 0x64
 800348e:	f43f ae26 	beq.w	80030de <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_PROF) {
 8003492:	2805      	cmp	r0, #5
 8003494:	d16f      	bne.n	8003576 <aiSystemPerformanceProcess+0x4a6>
        profiling_mode = true;
 8003496:	4b54      	ldr	r3, [pc, #336]	; (80035e8 <aiSystemPerformanceProcess+0x518>)
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 800349c:	4a53      	ldr	r2, [pc, #332]	; (80035ec <aiSystemPerformanceProcess+0x51c>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]
  } while (r==0);
 80034a4:	e61b      	b.n	80030de <aiSystemPerformanceProcess+0xe>
 80034a6:	e9cd 3208 	strd	r3, r2, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80034aa:	f003 ffab 	bl	8007404 <rand>
 80034ae:	ee07 0a90 	vmov	s15, r0
 80034b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80034b6:	9b05      	ldr	r3, [sp, #20]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80034b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80034bc:	2b01      	cmp	r3, #1
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80034be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80034c2:	eee7 7a08 	vfma.f32	s15, s14, s16
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80034c6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80034ca:	d106      	bne.n	80034da <aiSystemPerformanceProcess+0x40a>
          *(ai_float *)(in_data + j * 4) = v;
 80034cc:	eb02 0189 	add.w	r1, r2, r9, lsl #2
 80034d0:	edc1 7a00 	vstr	s15, [r1]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 80034d4:	f109 0901 	add.w	r9, r9, #1
 80034d8:	e6d4      	b.n	8003284 <aiSystemPerformanceProcess+0x1b4>
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 80034da:	9907      	ldr	r1, [sp, #28]
 80034dc:	2900      	cmp	r1, #0
 80034de:	d0f9      	beq.n	80034d4 <aiSystemPerformanceProcess+0x404>
            in_data[j] = (ai_i8)(v * 127);
 80034e0:	ee67 7aa8 	vmul.f32	s15, s15, s17
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80034e4:	9805      	ldr	r0, [sp, #20]
            in_data[j] = (ai_i8)(v * 127);
 80034e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80034ea:	2803      	cmp	r0, #3
            in_data[j] = (ai_i8)(v * 127);
 80034ec:	edcd 7a08 	vstr	s15, [sp, #32]
 80034f0:	f99d 1020 	ldrsb.w	r1, [sp, #32]
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80034f4:	d002      	beq.n	80034fc <aiSystemPerformanceProcess+0x42c>
              in_data[j] = (in_data[j] > 0)?(ai_i8)1:(ai_i8)0;
 80034f6:	f802 1009 	strb.w	r1, [r2, r9]
 80034fa:	e7eb      	b.n	80034d4 <aiSystemPerformanceProcess+0x404>
 80034fc:	2900      	cmp	r1, #0
 80034fe:	bfd4      	ite	le
 8003500:	2100      	movle	r1, #0
 8003502:	2101      	movgt	r1, #1
 8003504:	e7f7      	b.n	80034f6 <aiSystemPerformanceProcess+0x426>
    tend = cyclesCounterEnd();
 8003506:	f7ff fb1d 	bl	8002b44 <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 800350a:	f8d9 3000 	ldr.w	r3, [r9]
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	f8c9 3000 	str.w	r3, [r9]
    dwtCyclesToTime(tend, &t);
 8003516:	aa0a      	add	r2, sp, #40	; 0x28
    tcumul += tend;
 8003518:	1943      	adds	r3, r0, r5
 800351a:	461d      	mov	r5, r3
 800351c:	eb4a 0a01 	adc.w	sl, sl, r1
    dwtCyclesToTime(tend, &t);
 8003520:	f000 fb70 	bl	8003c04 <dwtCyclesToTime>
    if (!profiling_mode) {
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <aiSystemPerformanceProcess+0x518>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b95b      	cbnz	r3, 8003542 <aiSystemPerformanceProcess+0x472>
      if (t.s > 10)
 800352a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      LC_PRINT(".");
 800352c:	4830      	ldr	r0, [pc, #192]	; (80035f0 <aiSystemPerformanceProcess+0x520>)
      if (t.s > 10)
 800352e:	2b0a      	cmp	r3, #10
 8003530:	bfc8      	it	gt
 8003532:	46b0      	movgt	r8, r6
      LC_PRINT(".");
 8003534:	f000 fad8 	bl	8003ae8 <lc_print>
      fflush(stdout);
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <aiSystemPerformanceProcess+0x524>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6898      	ldr	r0, [r3, #8]
 800353e:	f004 fcb3 	bl	8007ea8 <fflush>
  for (iter = 0; iter < niter; iter++) {
 8003542:	3601      	adds	r6, #1
 8003544:	e658      	b.n	80031f8 <aiSystemPerformanceProcess+0x128>
  MON_STACK_EVALUATE();
 8003546:	3004      	adds	r0, #4
 8003548:	3304      	adds	r3, #4
 800354a:	6090      	str	r0, [r2, #8]
 800354c:	e6ef      	b.n	800332e <aiSystemPerformanceProcess+0x25e>
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	4829      	ldr	r0, [pc, #164]	; (80035f8 <aiSystemPerformanceProcess+0x528>)
 8003554:	6093      	str	r3, [r2, #8]
 8003556:	4649      	mov	r1, r9
 8003558:	f000 fac6 	bl	8003ae8 <lc_print>
 800355c:	4827      	ldr	r0, [pc, #156]	; (80035fc <aiSystemPerformanceProcess+0x52c>)
 800355e:	f000 fac3 	bl	8003ae8 <lc_print>
 8003562:	e6ef      	b.n	8003344 <aiSystemPerformanceProcess+0x274>
  MON_STACK_REPORT();
 8003564:	4826      	ldr	r0, [pc, #152]	; (8003600 <aiSystemPerformanceProcess+0x530>)
 8003566:	f000 fabf 	bl	8003ae8 <lc_print>
 800356a:	e74c      	b.n	8003406 <aiSystemPerformanceProcess+0x336>
          port_hal_delay(1000);
 800356c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003570:	f7fd fee8 	bl	8001344 <HAL_Delay>
 8003574:	e786      	b.n	8003484 <aiSystemPerformanceProcess+0x3b4>
      if (r == CONS_EVT_HIDE) {
 8003576:	2806      	cmp	r0, #6
 8003578:	d146      	bne.n	8003608 <aiSystemPerformanceProcess+0x538>
        observer_mode = false;
 800357a:	4b22      	ldr	r3, [pc, #136]	; (8003604 <aiSystemPerformanceProcess+0x534>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 8003580:	e5ad      	b.n	80030de <aiSystemPerformanceProcess+0xe>
 8003582:	bf00      	nop
 8003584:	200009b0 	.word	0x200009b0
 8003588:	e0001000 	.word	0xe0001000
 800358c:	0800a35d 	.word	0x0800a35d
 8003590:	0800a36f 	.word	0x0800a36f
 8003594:	200009d8 	.word	0x200009d8
 8003598:	20000988 	.word	0x20000988
 800359c:	000f4240 	.word	0x000f4240
 80035a0:	0800a3ef 	.word	0x0800a3ef
 80035a4:	0800a436 	.word	0x0800a436
 80035a8:	0800a45d 	.word	0x0800a45d
 80035ac:	0800a47e 	.word	0x0800a47e
 80035b0:	0800a4a7 	.word	0x0800a4a7
 80035b4:	0800a4da 	.word	0x0800a4da
 80035b8:	200009bc 	.word	0x200009bc
 80035bc:	0800a517 	.word	0x0800a517
 80035c0:	0800a570 	.word	0x0800a570
 80035c4:	200008f0 	.word	0x200008f0
 80035c8:	0800a5ab 	.word	0x0800a5ab
 80035cc:	0800a5d7 	.word	0x0800a5d7
 80035d0:	0800a5fb 	.word	0x0800a5fb
 80035d4:	0800a62c 	.word	0x0800a62c
 80035d8:	0800a641 	.word	0x0800a641
 80035dc:	0800a67b 	.word	0x0800a67b
 80035e0:	0800a69b 	.word	0x0800a69b
 80035e4:	0800a6bf 	.word	0x0800a6bf
 80035e8:	20000980 	.word	0x20000980
 80035ec:	200000fc 	.word	0x200000fc
 80035f0:	0800a36d 	.word	0x0800a36d
 80035f4:	200006b0 	.word	0x200006b0
 80035f8:	0800a372 	.word	0x0800a372
 80035fc:	0800a396 	.word	0x0800a396
 8003600:	0800a4f6 	.word	0x0800a4f6
 8003604:	200000f8 	.word	0x200000f8
      if (r == CONS_EVT_RESTART) {
 8003608:	2802      	cmp	r0, #2
 800360a:	d110      	bne.n	800362e <aiSystemPerformanceProcess+0x55e>
        profiling_mode = false;
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <aiSystemPerformanceProcess+0x5bc>)
        LC_PRINT("\r\n");
 800360e:	4820      	ldr	r0, [pc, #128]	; (8003690 <aiSystemPerformanceProcess+0x5c0>)
        profiling_mode = false;
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 8003614:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <aiSystemPerformanceProcess+0x5c4>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <aiSystemPerformanceProcess+0x5c8>)
 800361c:	2205      	movs	r2, #5
 800361e:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 8003620:	f000 fa62 	bl	8003ae8 <lc_print>
        aiDeInit();
 8003624:	f7ff fafc 	bl	8002c20 <aiDeInit>
        aiSystemPerformanceInit();
 8003628:	f7ff fc9a 	bl	8002f60 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 800362c:	e557      	b.n	80030de <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_QUIT) {
 800362e:	2801      	cmp	r0, #1
 8003630:	d115      	bne.n	800365e <aiSystemPerformanceProcess+0x58e>
        profiling_mode = false;
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <aiSystemPerformanceProcess+0x5bc>)
        LC_PRINT("\r\n");
 8003634:	4816      	ldr	r0, [pc, #88]	; (8003690 <aiSystemPerformanceProcess+0x5c0>)
        profiling_mode = false;
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
        LC_PRINT("\r\n");
 800363a:	f000 fa55 	bl	8003ae8 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003642:	b672      	cpsid	i
        aiDeInit();
 8003644:	f7ff faec 	bl	8002c20 <aiDeInit>
        LC_PRINT("\r\n");
 8003648:	4811      	ldr	r0, [pc, #68]	; (8003690 <aiSystemPerformanceProcess+0x5c0>)
 800364a:	f000 fa4d 	bl	8003ae8 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 800364e:	4813      	ldr	r0, [pc, #76]	; (800369c <aiSystemPerformanceProcess+0x5cc>)
 8003650:	f000 fa4a 	bl	8003ae8 <lc_print>
          port_hal_delay(1000);
 8003654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003658:	f7fd fe74 	bl	8001344 <HAL_Delay>
        while (1) {
 800365c:	e7fa      	b.n	8003654 <aiSystemPerformanceProcess+0x584>
      if (r == CONS_EVT_PAUSE) {
 800365e:	2804      	cmp	r0, #4
 8003660:	d003      	beq.n	800366a <aiSystemPerformanceProcess+0x59a>
  } while (r==0);
 8003662:	2800      	cmp	r0, #0
 8003664:	f43f ad3b 	beq.w	80030de <aiSystemPerformanceProcess+0xe>
 8003668:	e541      	b.n	80030ee <aiSystemPerformanceProcess+0x1e>
        LC_PRINT("\r\n");
 800366a:	4809      	ldr	r0, [pc, #36]	; (8003690 <aiSystemPerformanceProcess+0x5c0>)
 800366c:	f000 fa3c 	bl	8003ae8 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <aiSystemPerformanceProcess+0x5d0>)
 8003672:	f000 fa39 	bl	8003ae8 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8003676:	f7ff faed 	bl	8002c54 <aiTestConsole>
 800367a:	2800      	cmp	r0, #0
 800367c:	f47f ad2f 	bne.w	80030de <aiSystemPerformanceProcess+0xe>
          port_hal_delay(1000);
 8003680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003684:	f7fd fe5e 	bl	8001344 <HAL_Delay>
 8003688:	e7f5      	b.n	8003676 <aiSystemPerformanceProcess+0x5a6>
 800368a:	bf00      	nop
 800368c:	20000980 	.word	0x20000980
 8003690:	0800a36f 	.word	0x0800a36f
 8003694:	200000f8 	.word	0x200000f8
 8003698:	200000fc 	.word	0x200000fc
 800369c:	0800a6dd 	.word	0x0800a6dd
 80036a0:	0800a6bf 	.word	0x0800a6bf

080036a4 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80036a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80036a6:	f001 fa83 	bl	8004bb0 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80036aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80036b6:	b2c0      	uxtb	r0, r0
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	9000      	str	r0, [sp, #0]
 80036bc:	2300      	movs	r3, #0
 80036be:	4803      	ldr	r0, [pc, #12]	; (80036cc <aiPlatformVersion+0x28>)
 80036c0:	4611      	mov	r1, r2
 80036c2:	f000 fa11 	bl	8003ae8 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80036c6:	b007      	add	sp, #28
 80036c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80036cc:	0800a708 	.word	0x0800a708

080036d0 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 80036d0:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036d2:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80036d6:	b2c4      	uxtb	r4, r0
  if (fct)
 80036d8:	b129      	cbz	r1, 80036e6 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036da:	4622      	mov	r2, r4
 80036dc:	4805      	ldr	r0, [pc, #20]	; (80036f4 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80036de:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036e2:	f000 ba01 	b.w	8003ae8 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80036e6:	4621      	mov	r1, r4
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <aiLogErr+0x28>)
}
 80036ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 b9fa 	b.w	8003ae8 <lc_print>
 80036f4:	0800a73a 	.word	0x0800a73a
 80036f8:	0800a767 	.word	0x0800a767

080036fc <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 80036fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8003700:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 8003702:	6807      	ldr	r7, [r0, #0]
{
 8003704:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 8003706:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 800370a:	486b      	ldr	r0, [pc, #428]	; (80038b8 <aiPrintBufferInfo+0x1bc>)
 800370c:	6809      	ldr	r1, [r1, #0]
 800370e:	f000 f9eb 	bl	8003ae8 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8003712:	696a      	ldr	r2, [r5, #20]
 8003714:	69a8      	ldr	r0, [r5, #24]
 8003716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800371a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800371e:	d119      	bne.n	8003754 <aiPrintBufferInfo+0x58>
  {
    LC_PRINT("%d,%d)",
 8003720:	6842      	ldr	r2, [r0, #4]
 8003722:	6901      	ldr	r1, [r0, #16]
 8003724:	4865      	ldr	r0, [pc, #404]	; (80038bc <aiPrintBufferInfo+0x1c0>)
 8003726:	f000 f9df 	bl	8003ae8 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800372a:	2101      	movs	r1, #1
 800372c:	4628      	mov	r0, r5
 800372e:	f001 f857 	bl	80047e0 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003732:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8003736:	4601      	mov	r1, r0
 8003738:	4861      	ldr	r0, [pc, #388]	; (80038c0 <aiPrintBufferInfo+0x1c4>)
 800373a:	f000 f9d5 	bl	8003ae8 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800373e:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003740:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8003744:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003748:	d113      	bne.n	8003772 <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800374a:	485e      	ldr	r0, [pc, #376]	; (80038c4 <aiPrintBufferInfo+0x1c8>)
 800374c:	4621      	mov	r1, r4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
      }
      LC_PRINT((s_ > max_)?"..":"");
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800374e:	f000 f9cb 	bl	8003ae8 <lc_print>
 8003752:	e046      	b.n	80037e2 <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8003754:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8003758:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 800375a:	d105      	bne.n	8003768 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 800375c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8003760:	4859      	ldr	r0, [pc, #356]	; (80038c8 <aiPrintBufferInfo+0x1cc>)
 8003762:	f000 f9c1 	bl	8003ae8 <lc_print>
 8003766:	e7e0      	b.n	800372a <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8003768:	4858      	ldr	r0, [pc, #352]	; (80038cc <aiPrintBufferInfo+0x1d0>)
 800376a:	4619      	mov	r1, r3
 800376c:	f000 f9bc 	bl	8003ae8 <lc_print>
 8003770:	e7db      	b.n	800372a <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003772:	2e03      	cmp	r6, #3
 8003774:	d102      	bne.n	800377c <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003776:	4856      	ldr	r0, [pc, #344]	; (80038d0 <aiPrintBufferInfo+0x1d4>)
 8003778:	4621      	mov	r1, r4
 800377a:	e7e8      	b.n	800374e <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 800377c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80038e8 <aiPrintBufferInfo+0x1ec>
 8003780:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 8003784:	f108 0102 	add.w	r1, r8, #2
 8003788:	4622      	mov	r2, r4
 800378a:	bf18      	it	ne
 800378c:	4641      	movne	r1, r8
 800378e:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 8003792:	f000 f9a9 	bl	8003ae8 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8003796:	2e02      	cmp	r6, #2
 8003798:	d123      	bne.n	80037e2 <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800379a:	68ab      	ldr	r3, [r5, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d069      	beq.n	8003874 <aiPrintBufferInfo+0x178>
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	07d2      	lsls	r2, r2, #31
 80037a4:	d566      	bpl.n	8003874 <aiPrintBufferInfo+0x178>
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d063      	beq.n	8003874 <aiPrintBufferInfo+0x178>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80037ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
      LC_PRINT(" %d:", s_);
 80037b0:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 80037b4:	f1ba 0f04 	cmp.w	sl, #4
      LC_PRINT(" %d:", s_);
 80037b8:	4651      	mov	r1, sl
      const int max_ = s_> 4?4:s_;
 80037ba:	46d3      	mov	fp, sl
 80037bc:	bf28      	it	cs
 80037be:	f04f 0b04 	movcs.w	fp, #4
      LC_PRINT(" %d:", s_);
 80037c2:	f000 f991 	bl	8003ae8 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80037c6:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80037c8:	f04f 0900 	mov.w	r9, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80037cc:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 80037d0:	455e      	cmp	r6, fp
 80037d2:	db18      	blt.n	8003806 <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 80037d4:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <aiPrintBufferInfo+0x1d8>)
 80037d6:	1cd8      	adds	r0, r3, #3
 80037d8:	45d3      	cmp	fp, sl
 80037da:	bf38      	it	cc
 80037dc:	4618      	movcc	r0, r3
 80037de:	f000 f983 	bl	8003ae8 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 80037e2:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 80037e4:	2101      	movs	r1, #1
 80037e6:	4628      	mov	r0, r5
  if (buffer->data)
 80037e8:	2c00      	cmp	r4, #0
 80037ea:	d054      	beq.n	8003896 <aiPrintBufferInfo+0x19a>
    LC_PRINT(" @0x%X/%d",
 80037ec:	f000 fff8 	bl	80047e0 <ai_buffer_get_size>
 80037f0:	4639      	mov	r1, r7
 80037f2:	f001 f829 	bl	8004848 <ai_buffer_get_byte_size>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4837      	ldr	r0, [pc, #220]	; (80038d8 <aiPrintBufferInfo+0x1dc>)
 80037fa:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 80037fc:	b003      	add	sp, #12
 80037fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 8003802:	f000 b971 	b.w	8003ae8 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003806:	68ab      	ldr	r3, [r5, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02e      	beq.n	800386a <aiPrintBufferInfo+0x16e>
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	f014 0401 	ands.w	r4, r4, #1
 8003812:	d02d      	beq.n	8003870 <aiPrintBufferInfo+0x174>
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	2a00      	cmp	r2, #0
 8003818:	d049      	beq.n	80038ae <aiPrintBufferInfo+0x1b2>
 800381a:	6853      	ldr	r3, [r2, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d049      	beq.n	80038b4 <aiPrintBufferInfo+0x1b8>
 8003820:	8851      	ldrh	r1, [r2, #2]
 8003822:	42b1      	cmp	r1, r6
 8003824:	dd46      	ble.n	80038b4 <aiPrintBufferInfo+0x1b8>
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800382c:	6818      	ldr	r0, [r3, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800382e:	2a00      	cmp	r2, #0
 8003830:	d03e      	beq.n	80038b0 <aiPrintBufferInfo+0x1b4>
 8003832:	8814      	ldrh	r4, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003834:	6853      	ldr	r3, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003836:	f014 0402 	ands.w	r4, r4, #2
 800383a:	d00f      	beq.n	800385c <aiPrintBufferInfo+0x160>
 800383c:	b1b3      	cbz	r3, 800386c <aiPrintBufferInfo+0x170>
 800383e:	8852      	ldrh	r2, [r2, #2]
 8003840:	42b2      	cmp	r2, r6
 8003842:	dd35      	ble.n	80038b0 <aiPrintBufferInfo+0x1b4>
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8003848:	f7fc fe7e 	bl	8000548 <__aeabi_f2d>
 800384c:	9400      	str	r4, [sp, #0]
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4640      	mov	r0, r8
 8003854:	f000 f948 	bl	8003ae8 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003858:	3601      	adds	r6, #1
 800385a:	e7b9      	b.n	80037d0 <aiPrintBufferInfo+0xd4>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800385c:	b133      	cbz	r3, 800386c <aiPrintBufferInfo+0x170>
 800385e:	8852      	ldrh	r2, [r2, #2]
 8003860:	42b2      	cmp	r2, r6
 8003862:	ddf1      	ble.n	8003848 <aiPrintBufferInfo+0x14c>
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	579c      	ldrsb	r4, [r3, r6]
 8003868:	e7ee      	b.n	8003848 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800386a:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800386c:	461c      	mov	r4, r3
 800386e:	e7eb      	b.n	8003848 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003870:	4648      	mov	r0, r9
 8003872:	e7e9      	b.n	8003848 <aiPrintBufferInfo+0x14c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003874:	f019 0f78 	tst.w	r9, #120	; 0x78
 8003878:	d102      	bne.n	8003880 <aiPrintBufferInfo+0x184>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800387a:	4818      	ldr	r0, [pc, #96]	; (80038dc <aiPrintBufferInfo+0x1e0>)
 800387c:	4621      	mov	r1, r4
 800387e:	e766      	b.n	800374e <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 8003880:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 8003884:	3a40      	subs	r2, #64	; 0x40
 8003886:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 800388a:	4411      	add	r1, r2
 800388c:	4814      	ldr	r0, [pc, #80]	; (80038e0 <aiPrintBufferInfo+0x1e4>)
 800388e:	1a61      	subs	r1, r4, r1
 8003890:	f000 f92a 	bl	8003ae8 <lc_print>
 8003894:	e7a5      	b.n	80037e2 <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 8003896:	f000 ffa3 	bl	80047e0 <ai_buffer_get_size>
 800389a:	4639      	mov	r1, r7
 800389c:	f000 ffd4 	bl	8004848 <ai_buffer_get_byte_size>
 80038a0:	4601      	mov	r1, r0
 80038a2:	4810      	ldr	r0, [pc, #64]	; (80038e4 <aiPrintBufferInfo+0x1e8>)
}
 80038a4:	b003      	add	sp, #12
 80038a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80038aa:	f000 b91d 	b.w	8003ae8 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80038ae:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80038b0:	2400      	movs	r4, #0
 80038b2:	e7c9      	b.n	8003848 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80038b4:	4648      	mov	r0, r9
 80038b6:	e7ba      	b.n	800382e <aiPrintBufferInfo+0x132>
 80038b8:	0800a797 	.word	0x0800a797
 80038bc:	0800a7a2 	.word	0x0800a7a2
 80038c0:	0800a7b7 	.word	0x0800a7b7
 80038c4:	0800a7bb 	.word	0x0800a7bb
 80038c8:	0800a7a9 	.word	0x0800a7a9
 80038cc:	0800a7b3 	.word	0x0800a7b3
 80038d0:	0800a7c3 	.word	0x0800a7c3
 80038d4:	0800a793 	.word	0x0800a793
 80038d8:	0800a7f0 	.word	0x0800a7f0
 80038dc:	0800a7dd 	.word	0x0800a7dd
 80038e0:	0800a7e8 	.word	0x0800a7e8
 80038e4:	0800a7fa 	.word	0x0800a7fa
 80038e8:	0800a78f 	.word	0x0800a78f

080038ec <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 80038ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038f0:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 80038f2:	484b      	ldr	r0, [pc, #300]	; (8003a20 <aiPrintNetworkInfo+0x134>)
 80038f4:	f000 f8f8 	bl	8003ae8 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80038f8:	6821      	ldr	r1, [r4, #0]
 80038fa:	484a      	ldr	r0, [pc, #296]	; (8003a24 <aiPrintNetworkInfo+0x138>)
 80038fc:	f000 f8f4 	bl	8003ae8 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8003900:	6861      	ldr	r1, [r4, #4]
 8003902:	4849      	ldr	r0, [pc, #292]	; (8003a28 <aiPrintNetworkInfo+0x13c>)
 8003904:	f000 f8f0 	bl	8003ae8 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8003908:	68a1      	ldr	r1, [r4, #8]
 800390a:	4848      	ldr	r0, [pc, #288]	; (8003a2c <aiPrintNetworkInfo+0x140>)
 800390c:	f000 f8ec 	bl	8003ae8 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8003910:	68e1      	ldr	r1, [r4, #12]
 8003912:	4847      	ldr	r0, [pc, #284]	; (8003a30 <aiPrintNetworkInfo+0x144>)
 8003914:	f000 f8e8 	bl	8003ae8 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 8003918:	69a1      	ldr	r1, [r4, #24]
 800391a:	780b      	ldrb	r3, [r1, #0]
 800391c:	b113      	cbz	r3, 8003924 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800391e:	4845      	ldr	r0, [pc, #276]	; (8003a34 <aiPrintNetworkInfo+0x148>)
 8003920:	f000 f8e2 	bl	8003ae8 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003924:	7f21      	ldrb	r1, [r4, #28]
 8003926:	7fa3      	ldrb	r3, [r4, #30]
 8003928:	7f62      	ldrb	r2, [r4, #29]
 800392a:	4843      	ldr	r0, [pc, #268]	; (8003a38 <aiPrintNetworkInfo+0x14c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 800392c:	4f43      	ldr	r7, [pc, #268]	; (8003a3c <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800392e:	f000 f8db 	bl	8003ae8 <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8003932:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003936:	4842      	ldr	r0, [pc, #264]	; (8003a40 <aiPrintNetworkInfo+0x154>)
 8003938:	f000 f8d6 	bl	8003ae8 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800393c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800393e:	4841      	ldr	r0, [pc, #260]	; (8003a44 <aiPrintNetworkInfo+0x158>)
 8003940:	f000 f8d2 	bl	8003ae8 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8003944:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8003948:	483f      	ldr	r0, [pc, #252]	; (8003a48 <aiPrintNetworkInfo+0x15c>)
 800394a:	f000 f8cd 	bl	8003ae8 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800394e:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003950:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003954:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003958:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800395c:	42ab      	cmp	r3, r5
 800395e:	dc25      	bgt.n	80039ac <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003960:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8003964:	4839      	ldr	r0, [pc, #228]	; (8003a4c <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003966:	4f35      	ldr	r7, [pc, #212]	; (8003a3c <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003968:	f000 f8be 	bl	8003ae8 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800396c:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800396e:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003972:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003976:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800397a:	42ab      	cmp	r3, r5
 800397c:	dc25      	bgt.n	80039ca <aiPrintNetworkInfo+0xde>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 800397e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8003980:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8003982:	4833      	ldr	r0, [pc, #204]	; (8003a50 <aiPrintNetworkInfo+0x164>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8003984:	4e33      	ldr	r6, [pc, #204]	; (8003a54 <aiPrintNetworkInfo+0x168>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003986:	f000 f8af 	bl	8003ae8 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 800398a:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 800398c:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 800398e:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 8003992:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003994:	42ab      	cmp	r3, r5
 8003996:	dc27      	bgt.n	80039e8 <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8003998:	4e2f      	ldr	r6, [pc, #188]	; (8003a58 <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 800399a:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 800399c:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 800399e:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80039a2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80039a4:	42ab      	cmp	r3, r5
 80039a6:	dc2d      	bgt.n	8003a04 <aiPrintNetworkInfo+0x118>
  }
}
 80039a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80039ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 80039ae:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80039b0:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80039b4:	4638      	mov	r0, r7
 80039b6:	f000 f897 	bl	8003ae8 <lc_print>
      aiPrintBufferInfo(buffer);
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7ff fe9e 	bl	80036fc <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80039c0:	4648      	mov	r0, r9
 80039c2:	f000 f891 	bl	8003ae8 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80039c6:	3501      	adds	r5, #1
 80039c8:	e7c6      	b.n	8003958 <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80039ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 80039cc:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80039ce:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80039d2:	4638      	mov	r0, r7
 80039d4:	f000 f888 	bl	8003ae8 <lc_print>
      aiPrintBufferInfo(buffer);
 80039d8:	4630      	mov	r0, r6
 80039da:	f7ff fe8f 	bl	80036fc <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80039de:	4648      	mov	r0, r9
 80039e0:	f000 f882 	bl	8003ae8 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80039e4:	3501      	adds	r5, #1
 80039e6:	e7c6      	b.n	8003976 <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 80039e8:	4629      	mov	r1, r5
 80039ea:	4630      	mov	r0, r6
 80039ec:	f000 f87c 	bl	8003ae8 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 80039f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80039f2:	fb07 0005 	mla	r0, r7, r5, r0
 80039f6:	f7ff fe81 	bl	80036fc <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80039fa:	4640      	mov	r0, r8
 80039fc:	f000 f874 	bl	8003ae8 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c6      	b.n	8003992 <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 8003a04:	4629      	mov	r1, r5
 8003a06:	4630      	mov	r0, r6
 8003a08:	f000 f86e 	bl	8003ae8 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8003a0c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003a0e:	fb07 0005 	mla	r0, r7, r5, r0
 8003a12:	f7ff fe73 	bl	80036fc <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003a16:	4640      	mov	r0, r8
 8003a18:	f000 f866 	bl	8003ae8 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8003a1c:	3501      	adds	r5, #1
 8003a1e:	e7c0      	b.n	80039a2 <aiPrintNetworkInfo+0xb6>
 8003a20:	0800a80c 	.word	0x0800a80c
 8003a24:	0800a826 	.word	0x0800a826
 8003a28:	0800a841 	.word	0x0800a841
 8003a2c:	0800a85c 	.word	0x0800a85c
 8003a30:	0800a877 	.word	0x0800a877
 8003a34:	0800a892 	.word	0x0800a892
 8003a38:	0800a8ad 	.word	0x0800a8ad
 8003a3c:	0800a926 	.word	0x0800a926
 8003a40:	0800a8ce 	.word	0x0800a8ce
 8003a44:	0800a8f0 	.word	0x0800a8f0
 8003a48:	0800a90b 	.word	0x0800a90b
 8003a4c:	0800a931 	.word	0x0800a931
 8003a50:	0800a94c 	.word	0x0800a94c
 8003a54:	0800a96a 	.word	0x0800a96a
 8003a58:	0800a973 	.word	0x0800a973

08003a5c <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8003a5c:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <_put_c_driver+0x24>)
{
 8003a60:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b13b      	cbz	r3, 8003a78 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003a68:	4806      	ldr	r0, [pc, #24]	; (8003a84 <_put_c_driver+0x28>)
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f10d 0107 	add.w	r1, sp, #7
 8003a74:	f7fe ff28 	bl	80028c8 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 8003a78:	b003      	add	sp, #12
 8003a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a7e:	bf00      	nop
 8003a80:	20000100 	.word	0x20000100
 8003a84:	20000860 	.word	0x20000860

08003a88 <ioRawGetUint8>:
 {
 8003a88:	b508      	push	{r3, lr}
 8003a8a:	460b      	mov	r3, r1
  if (!c)
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	b120      	cbz	r0, 8003a9a <ioRawGetUint8+0x12>
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1, timeout);
 8003a90:	4804      	ldr	r0, [pc, #16]	; (8003aa4 <ioRawGetUint8+0x1c>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	f7fe ff72 	bl	800297c <HAL_UART_Receive>
   return port_io_get(c, timeout) == true?1:-1;
 8003a98:	b110      	cbz	r0, 8003aa0 <ioRawGetUint8+0x18>
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 }
 8003a9e:	bd08      	pop	{r3, pc}
   return port_io_get(c, timeout) == true?1:-1;
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	e7fc      	b.n	8003a9e <ioRawGetUint8+0x16>
 8003aa4:	20000860 	.word	0x20000860

08003aa8 <_write>:
{
 8003aa8:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003aaa:	1e14      	subs	r4, r2, #0
 8003aac:	da0a      	bge.n	8003ac4 <_write+0x1c>
 8003aae:	3801      	subs	r0, #1
 8003ab0:	2801      	cmp	r0, #1
 8003ab2:	d907      	bls.n	8003ac4 <_write+0x1c>
    errno = EBADF;
 8003ab4:	f004 fb74 	bl	80081a0 <__errno>
 8003ab8:	2309      	movs	r3, #9
 8003aba:	6003      	str	r3, [r0, #0]
    return -1;
 8003abc:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <_write+0x38>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f9      	beq.n	8003ac0 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003acc:	b2a2      	uxth	r2, r4
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <_write+0x3c>)
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	f7fe fef8 	bl	80028c8 <HAL_UART_Transmit>
  return (status ? count : 0);
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	bf18      	it	ne
 8003adc:	2400      	movne	r4, #0
 8003ade:	e7ef      	b.n	8003ac0 <_write+0x18>
 8003ae0:	20000100 	.word	0x20000100
 8003ae4:	20000860 	.word	0x20000860

08003ae8 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8003ae8:	b40f      	push	{r0, r1, r2, r3}
 8003aea:	b507      	push	{r0, r1, r2, lr}
 8003aec:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003aee:	2100      	movs	r1, #0
{
 8003af0:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003af4:	4804      	ldr	r0, [pc, #16]	; (8003b08 <lc_print+0x20>)
  va_start(ap, fmt);
 8003af6:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003af8:	f000 fb22 	bl	8004140 <vlc_print>
  va_end(ap);
}
 8003afc:	b003      	add	sp, #12
 8003afe:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b02:	b004      	add	sp, #16
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	08003a5d 	.word	0x08003a5d

08003b0c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003b0c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8003b0e:	4d11      	ldr	r5, [pc, #68]	; (8003b54 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8003b10:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8003b12:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003b14:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003b18:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003b1c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8003b20:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003b22:	f003 fb85 	bl	8007230 <malloc>

  /* remember size */
  if (ptr) {
 8003b26:	b1a0      	cbz	r0, 8003b52 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003b28:	1903      	adds	r3, r0, r4
 8003b2a:	4a0b      	ldr	r2, [pc, #44]	; (8003b58 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003b2c:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	07db      	lsls	r3, r3, #31
 8003b34:	d50c      	bpl.n	8003b50 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003b36:	68eb      	ldr	r3, [r5, #12]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003b3c:	686b      	ldr	r3, [r5, #4]
 8003b3e:	4423      	add	r3, r4
 8003b40:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003b42:	69ab      	ldr	r3, [r5, #24]
 8003b44:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003b46:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003b48:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8003b4a:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8003b4c:	bf88      	it	hi
 8003b4e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003b50:	3004      	adds	r0, #4
}
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	200009bc 	.word	0x200009bc
 8003b58:	efdcba98 	.word	0xefdcba98

08003b5c <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <__wrap_free+0x48>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	f042 0204 	orr.w	r2, r2, #4
{
 8003b64:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8003b66:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8003b68:	4602      	mov	r2, r0
 8003b6a:	b1c0      	cbz	r0, 8003b9e <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8003b6c:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8003b70:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__wrap_free+0x4c>)
 8003b72:	5855      	ldr	r5, [r2, r1]
 8003b74:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8003b76:	bf04      	itt	eq
 8003b78:	2400      	moveq	r4, #0
 8003b7a:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 8003b80:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 8003b84:	d508      	bpl.n	8003b98 <__wrap_free+0x3c>
    io_malloc.free_req++;
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	3201      	adds	r2, #1
 8003b8a:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	440a      	add	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	1a52      	subs	r2, r2, r1
 8003b96:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8003b98:	bc30      	pop	{r4, r5}
  __real_free(p);
 8003b9a:	f003 bb51 	b.w	8007240 <free>
}
 8003b9e:	bc30      	pop	{r4, r5}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200009bc 	.word	0x200009bc
 8003ba8:	efdcba98 	.word	0xefdcba98

08003bac <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8003bac:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003bae:	4c11      	ldr	r4, [pc, #68]	; (8003bf4 <stackMonInit+0x48>)
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <stackMonInit+0x4c>)
 8003bb2:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8003bb4:	1a9b      	subs	r3, r3, r2
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003bb6:	2500      	movs	r5, #0
  io_stack.bstack = io_stack.estack - msize;
 8003bb8:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003bba:	0783      	lsls	r3, r0, #30
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003bbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bc0:	60e5      	str	r5, [r4, #12]
  io_stack.ctrl = ctrl;
 8003bc2:	6020      	str	r0, [r4, #0]
  io_stack.cstack = cstack;
 8003bc4:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8003bc6:	6162      	str	r2, [r4, #20]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003bc8:	d511      	bpl.n	8003bee <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8003bca:	480c      	ldr	r0, [pc, #48]	; (8003bfc <stackMonInit+0x50>)
 8003bcc:	f7ff ff8c 	bl	8003ae8 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003bd0:	6921      	ldr	r1, [r4, #16]
 8003bd2:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8003bd4:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003bd6:	1ac9      	subs	r1, r1, r3
 8003bd8:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8003bda:	b13d      	cbz	r5, 8003bec <stackMonInit+0x40>
 8003bdc:	6962      	ldr	r2, [r4, #20]
 8003bde:	4291      	cmp	r1, r2
 8003be0:	d904      	bls.n	8003bec <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8003be2:	4807      	ldr	r0, [pc, #28]	; (8003c00 <stackMonInit+0x54>)
 8003be4:	f7ff ff80 	bl	8003ae8 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8003be8:	2300      	movs	r3, #0
 8003bea:	7123      	strb	r3, [r4, #4]
  }
}
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
 8003bee:	2501      	movs	r5, #1
 8003bf0:	e7ee      	b.n	8003bd0 <stackMonInit+0x24>
 8003bf2:	bf00      	nop
 8003bf4:	200009d8 	.word	0x200009d8
 8003bf8:	20018000 	.word	0x20018000
 8003bfc:	0800a97c 	.word	0x0800a97c
 8003c00:	0800a9bc 	.word	0x0800a9bc

08003c04 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	4604      	mov	r4, r0
 8003c0a:	468a      	mov	sl, r1
  if (!t)
 8003c0c:	4617      	mov	r7, r2
 8003c0e:	b382      	cbz	r2, 8003c72 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003c10:	f7fe f950 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003c14:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003c16:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003c18:	9001      	str	r0, [sp, #4]
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f7fc ffc3 	bl	8000ba8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8003c22:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8003c26:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003c28:	fba4 0106 	umull	r0, r1, r4, r6
 8003c2c:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003c2e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003c78 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 8003c32:	2300      	movs	r3, #0
 8003c34:	fb06 110a 	mla	r1, r6, sl, r1
 8003c38:	f7fc ffb6 	bl	8000ba8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003c3c:	fbab 3106 	umull	r3, r1, fp, r6
 8003c40:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003c42:	fba4 0109 	umull	r0, r1, r4, r9
 8003c46:	9a01      	ldr	r2, [sp, #4]
 8003c48:	fb09 110a 	mla	r1, r9, sl, r1
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f7fc ffab 	bl	8000ba8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 8003c52:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003c54:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003c56:	fbab 8909 	umull	r8, r9, fp, r9
 8003c5a:	eba0 0008 	sub.w	r0, r0, r8
 8003c5e:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 8003c62:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003c66:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003c68:	60f8      	str	r0, [r7, #12]
  return 0;
 8003c6a:	2000      	movs	r0, #0
}
 8003c6c:	b003      	add	sp, #12
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8003c72:	f04f 30ff 	mov.w	r0, #4294967295
 8003c76:	e7f9      	b.n	8003c6c <dwtCyclesToTime+0x68>
 8003c78:	000f4240 	.word	0x000f4240

08003c7c <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <getFlashCacheConf+0x38>)
{
 8003c7e:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003c84:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003c8a:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003c8c:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 8003c90:	bf4c      	ite	mi
 8003c92:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003c96:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003c9a:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003c9c:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8003c9e:	bf48      	it	mi
 8003ca0:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003ca4:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8003ca6:	bf48      	it	mi
 8003ca8:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8003cac:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003cb0:	b002      	add	sp, #8
 8003cb2:	4770      	bx	lr
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8003cbc:	f7fe f8fa 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8003cc0:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8003cc2:	f7fe f8f7 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8003cc6:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8003cc8:	f7ff ffd8 	bl	8003c7c <getFlashCacheConf>
 8003ccc:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8003cce:	f7fd fb57 	bl	8001380 <HAL_GetDEVID>
 8003cd2:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003cd4:	f7fd fb4e 	bl	8001374 <HAL_GetREVID>
 8003cd8:	6120      	str	r0, [r4, #16]
}
 8003cda:	bd10      	pop	{r4, pc}

08003cdc <systemSettingLog>:

void systemSettingLog(void)
{
 8003cdc:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003cde:	2301      	movs	r3, #1
{
 8003ce0:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	210b      	movs	r1, #11
 8003ce6:	4838      	ldr	r0, [pc, #224]	; (8003dc8 <systemSettingLog+0xec>)
 8003ce8:	f7ff fefe 	bl	8003ae8 <lc_print>
  if (!conf)
 8003cec:	a803      	add	r0, sp, #12
 8003cee:	f7ff ffe3 	bl	8003cb8 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8003cf2:	4836      	ldr	r0, [pc, #216]	; (8003dcc <systemSettingLog+0xf0>)
 8003cf4:	f7ff fef8 	bl	8003ae8 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003cf8:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8003cfa:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003cfe:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d056      	beq.n	8003db2 <systemSettingLog+0xd6>
 8003d04:	d848      	bhi.n	8003d98 <systemSettingLog+0xbc>
 8003d06:	f240 4235 	movw	r2, #1077	; 0x435
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d053      	beq.n	8003db6 <systemSettingLog+0xda>
 8003d0e:	f240 4261 	movw	r2, #1121	; 0x461
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d051      	beq.n	8003dba <systemSettingLog+0xde>
  case 0x415: str = "STM32L4x6xx"; break;  /* Orca_1M */
 8003d16:	4a2e      	ldr	r2, [pc, #184]	; (8003dd0 <systemSettingLog+0xf4>)
 8003d18:	f240 4415 	movw	r4, #1045	; 0x415
 8003d1c:	f1a2 0022 	sub.w	r0, r2, #34	; 0x22
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	bf08      	it	eq
 8003d24:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003d26:	9b07      	ldr	r3, [sp, #28]
 8003d28:	482a      	ldr	r0, [pc, #168]	; (8003dd4 <systemSettingLog+0xf8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003d2a:	4c2b      	ldr	r4, [pc, #172]	; (8003dd8 <systemSettingLog+0xfc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003d2c:	f7ff fedc 	bl	8003ae8 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <systemSettingLog+0x100>)
 8003d32:	2104      	movs	r1, #4
 8003d34:	1d5a      	adds	r2, r3, #5
 8003d36:	f103 000a 	add.w	r0, r3, #10
 8003d3a:	f7ff fed5 	bl	8003ae8 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003d3e:	f7fd fb15 	bl	800136c <HAL_GetHalVersion>
 8003d42:	4601      	mov	r1, r0
 8003d44:	4826      	ldr	r0, [pc, #152]	; (8003de0 <systemSettingLog+0x104>)
 8003d46:	f7ff fecf 	bl	8003ae8 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003d4a:	9903      	ldr	r1, [sp, #12]
 8003d4c:	4825      	ldr	r0, [pc, #148]	; (8003de4 <systemSettingLog+0x108>)
 8003d4e:	fb91 f1f4 	sdiv	r1, r1, r4
 8003d52:	f7ff fec9 	bl	8003ae8 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003d56:	9904      	ldr	r1, [sp, #16]
 8003d58:	4823      	ldr	r0, [pc, #140]	; (8003de8 <systemSettingLog+0x10c>)
 8003d5a:	fb91 f1f4 	sdiv	r1, r1, r4
 8003d5e:	f7ff fec3 	bl	8003ae8 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <systemSettingLog+0x110>)
    return "False";
 8003d64:	4822      	ldr	r0, [pc, #136]	; (8003df0 <systemSettingLog+0x114>)
  uint32_t acr = FLASH->ACR;
 8003d66:	6819      	ldr	r1, [r3, #0]
    return "False";
 8003d68:	1d44      	adds	r4, r0, #5
 8003d6a:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003d6e:	bf14      	ite	ne
 8003d70:	4602      	movne	r2, r0
 8003d72:	4622      	moveq	r2, r4
 8003d74:	f411 7f00 	tst.w	r1, #512	; 0x200
 8003d78:	bf14      	ite	ne
 8003d7a:	4603      	movne	r3, r0
 8003d7c:	4623      	moveq	r3, r4
 8003d7e:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003d82:	bf18      	it	ne
 8003d84:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003d86:	f001 0507 	and.w	r5, r1, #7
 8003d8a:	e9cd 4500 	strd	r4, r5, [sp]
 8003d8e:	30ec      	adds	r0, #236	; 0xec
 8003d90:	f7ff feaa 	bl	8003ae8 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003d94:	b009      	add	sp, #36	; 0x24
 8003d96:	bd30      	pop	{r4, r5, pc}
  switch (dev_id) {
 8003d98:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8003d9c:	d00f      	beq.n	8003dbe <systemSettingLog+0xe2>
 8003d9e:	f240 4271 	movw	r2, #1137	; 0x471
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00d      	beq.n	8003dc2 <systemSettingLog+0xe6>
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <systemSettingLog+0xf4>)
 8003da8:	f240 4464 	movw	r4, #1124	; 0x464
 8003dac:	f1a2 0038 	sub.w	r0, r2, #56	; 0x38
 8003db0:	e7b6      	b.n	8003d20 <systemSettingLog+0x44>
  switch (dev_id) {
 8003db2:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <systemSettingLog+0x118>)
 8003db4:	e7b7      	b.n	8003d26 <systemSettingLog+0x4a>
  case 0x435: str = "STM32L43xxx"; break;  /* Little_Orca_256K */
 8003db6:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <systemSettingLog+0x11c>)
 8003db8:	e7b5      	b.n	8003d26 <systemSettingLog+0x4a>
  case 0x461: str = "STM32L49xxx"; break;  /* BigOrca_1M */
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <systemSettingLog+0x120>)
 8003dbc:	e7b3      	b.n	8003d26 <systemSettingLog+0x4a>
  case 0x470: str = "STM32L4R/S"; break;   /* Orca_plus_2MB */
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <systemSettingLog+0x124>)
 8003dc0:	e7b1      	b.n	8003d26 <systemSettingLog+0x4a>
  case 0x471: str = "STM32L4P/Q"; break;   /* Orca_plus_1MB */
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <systemSettingLog+0x128>)
 8003dc4:	e7af      	b.n	8003d26 <systemSettingLog+0x4a>
 8003dc6:	bf00      	nop
 8003dc8:	0800aa45 	.word	0x0800aa45
 8003dcc:	0800aa62 	.word	0x0800aa62
 8003dd0:	0800aa32 	.word	0x0800aa32
 8003dd4:	0800aa82 	.word	0x0800aa82
 8003dd8:	000f4240 	.word	0x000f4240
 8003ddc:	0800aab3 	.word	0x0800aab3
 8003de0:	0800aadb 	.word	0x0800aadb
 8003de4:	0800aaf4 	.word	0x0800aaf4
 8003de8:	0800ab0d 	.word	0x0800ab0d
 8003dec:	40022000 	.word	0x40022000
 8003df0:	0800aa3a 	.word	0x0800aa3a
 8003df4:	0800a9ee 	.word	0x0800a9ee
 8003df8:	0800aa04 	.word	0x0800aa04
 8003dfc:	0800a9e2 	.word	0x0800a9e2
 8003e00:	0800aa27 	.word	0x0800aa27
 8003e04:	0800aa1c 	.word	0x0800aa1c

08003e08 <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <port_hal_crc_ip_init_imp+0x1c>)
 8003e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e10:	649a      	str	r2, [r3, #72]	; 0x48
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 8003e14:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8003e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003e1e:	b002      	add	sp, #8
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000

08003e28 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003e28:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <port_dwt_init_imp+0x20>)
 8003e2a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e32:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <port_dwt_init_imp+0x24>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000ed00 	.word	0xe000ed00
 8003e4c:	e0001000 	.word	0xe0001000

08003e50 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <ai_mnetwork_handle+0x18>)
 8003e52:	b120      	cbz	r0, 8003e5e <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003e54:	4298      	cmp	r0, r3
 8003e56:	bf0c      	ite	eq
 8003e58:	4618      	moveq	r0, r3
 8003e5a:	2000      	movne	r0, #0
 8003e5c:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003e5e:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	bf08      	it	eq
 8003e64:	4618      	moveq	r0, r3
}
 8003e66:	4770      	bx	lr
 8003e68:	20000a00 	.word	0x20000a00

08003e6c <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003e6c:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003e6e:	4604      	mov	r4, r0
 8003e70:	b160      	cbz	r0, 8003e8c <ai_mnetwork_is_valid.constprop.0+0x20>
 8003e72:	f7fc f9fd 	bl	8000270 <strlen>
 8003e76:	2807      	cmp	r0, #7
 8003e78:	4602      	mov	r2, r0
 8003e7a:	d107      	bne.n	8003e8c <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003e7c:	4804      	ldr	r0, [pc, #16]	; (8003e90 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003e7e:	4621      	mov	r1, r4
 8003e80:	f004 f921 	bl	80080c6 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003e84:	fab0 f080 	clz	r0, r0
 8003e88:	0940      	lsrs	r0, r0, #5
}
 8003e8a:	bd10      	pop	{r4, pc}
    return false;
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e7fc      	b.n	8003e8a <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003e90:	0800abe4 	.word	0x0800abe4

08003e94 <MX_X_CUBE_AI_Init>:
{
 8003e94:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003e96:	f7fd f8e7 	bl	8001068 <MX_USART2_UART_Init>
}
 8003e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 8003e9e:	f7ff b85f 	b.w	8002f60 <aiSystemPerformanceInit>

08003ea2 <MX_X_CUBE_AI_Process>:
{
 8003ea2:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 8003ea4:	f7ff f914 	bl	80030d0 <aiSystemPerformanceProcess>
}
 8003ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 8003eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eb0:	f7fd ba48 	b.w	8001344 <HAL_Delay>

08003eb4 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003eb8:	f7ff ffd8 	bl	8003e6c <ai_mnetwork_is_valid.constprop.0>
 8003ebc:	b920      	cbnz	r0, 8003ec8 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <ai_mnetwork_find+0x18>)
 8003ec2:	bf18      	it	ne
 8003ec4:	2000      	movne	r0, #0
}
 8003ec6:	bd10      	pop	{r4, pc}
            return entry->name;
 8003ec8:	4800      	ldr	r0, [pc, #0]	; (8003ecc <ai_mnetwork_find+0x18>)
 8003eca:	e7fc      	b.n	8003ec6 <ai_mnetwork_find+0x12>
 8003ecc:	0800abe4 	.word	0x0800abe4

08003ed0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003ed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ed2:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003ed4:	2000      	movs	r0, #0
{
 8003ed6:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003ed8:	f7ff ffba 	bl	8003e50 <ai_mnetwork_handle>
{
 8003edc:	460d      	mov	r5, r1

    if (!inst) {
 8003ede:	4604      	mov	r4, r0
 8003ee0:	b1e0      	cbz	r0, 8003f1c <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ffc2 	bl	8003e6c <ai_mnetwork_is_valid.constprop.0>
 8003ee8:	9901      	ldr	r1, [sp, #4]
 8003eea:	b910      	cbnz	r0, 8003ef2 <ai_mnetwork_create+0x22>
 8003eec:	2214      	movs	r2, #20
 8003eee:	2310      	movs	r3, #16
 8003ef0:	e00d      	b.n	8003f0e <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fbc8 	bl	8004688 <ai_network_create>
 8003ef8:	b2c2      	uxtb	r2, r0
 8003efa:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003efe:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003f02:	d104      	bne.n	8003f0e <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003f04:	4906      	ldr	r1, [pc, #24]	; (8003f20 <ai_mnetwork_create+0x50>)
 8003f06:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003f08:	6829      	ldr	r1, [r5, #0]
 8003f0a:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003f0c:	602c      	str	r4, [r5, #0]
        return err;
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f362 0007 	bfi	r0, r2, #0, #8
 8003f14:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	2231      	movs	r2, #49	; 0x31
 8003f1e:	e7e6      	b.n	8003eee <ai_mnetwork_create+0x1e>
 8003f20:	0800abec 	.word	0x0800abec

08003f24 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f28:	f7ff ff92 	bl	8003e50 <ai_mnetwork_handle>
    if (inn) {
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	b160      	cbz	r0, 8003f4a <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003f30:	6803      	ldr	r3, [r0, #0]
 8003f32:	6840      	ldr	r0, [r0, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003f38:	686b      	ldr	r3, [r5, #4]
 8003f3a:	4283      	cmp	r3, r0
 8003f3c:	d005      	beq.n	8003f4a <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <ai_mnetwork_destroy+0x2c>)
 8003f40:	429d      	cmp	r5, r3
 8003f42:	f04f 0400 	mov.w	r4, #0
 8003f46:	d100      	bne.n	8003f4a <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8003f48:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	bd38      	pop	{r3, r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000a00 	.word	0x20000a00

08003f54 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003f54:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f56:	f7ff ff7b 	bl	8003e50 <ai_mnetwork_handle>
    if (inn)
 8003f5a:	b128      	cbz	r0, 8003f68 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003f5c:	6802      	ldr	r2, [r0, #0]
 8003f5e:	6840      	ldr	r0, [r0, #4]
 8003f60:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003f66:	4710      	bx	r2
}
 8003f68:	bd10      	pop	{r4, pc}

08003f6a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003f6a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f6c:	f7ff ff70 	bl	8003e50 <ai_mnetwork_handle>
    if (inn)
 8003f70:	b128      	cbz	r0, 8003f7e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003f72:	6803      	ldr	r3, [r0, #0]
 8003f74:	6840      	ldr	r0, [r0, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003f7c:	4718      	bx	r3
}
 8003f7e:	f241 0014 	movw	r0, #4116	; 0x1014
 8003f82:	bd10      	pop	{r4, pc}

08003f84 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003f84:	b530      	push	{r4, r5, lr}
 8003f86:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f88:	f7ff ff62 	bl	8003e50 <ai_mnetwork_handle>
    if (inn) {
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	b168      	cbz	r0, 8003fac <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003f90:	6803      	ldr	r3, [r0, #0]
 8003f92:	4668      	mov	r0, sp
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003f98:	2500      	movs	r5, #0
 8003f9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003f9e:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003fa0:	42aa      	cmp	r2, r5
 8003fa2:	dc05      	bgt.n	8003fb0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	6860      	ldr	r0, [r4, #4]
 8003fa8:	4669      	mov	r1, sp
 8003faa:	4798      	blx	r3
    }
    else
        return false;
}
 8003fac:	b00f      	add	sp, #60	; 0x3c
 8003fae:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8003fb8:	a803      	add	r0, sp, #12
 8003fba:	f000 fc57 	bl	800486c <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003fbe:	3501      	adds	r5, #1
 8003fc0:	e7eb      	b.n	8003f9a <ai_mnetwork_init+0x16>

08003fc2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8003fc2:	b513      	push	{r0, r1, r4, lr}
 8003fc4:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fc6:	f7ff ff43 	bl	8003e50 <ai_mnetwork_handle>
    if (inn)
 8003fca:	4603      	mov	r3, r0
 8003fcc:	b140      	cbz	r0, 8003fe0 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	9a01      	ldr	r2, [sp, #4]
 8003fd2:	6a04      	ldr	r4, [r0, #32]
 8003fd4:	6858      	ldr	r0, [r3, #4]
 8003fd6:	4623      	mov	r3, r4
    else
        return 0;
}
 8003fd8:	b002      	add	sp, #8
 8003fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8003fde:	4718      	bx	r3
}
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fe8:	f7ff ff32 	bl	8003e50 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003fec:	b188      	cbz	r0, 8004012 <ai_mnetwork_get_private_handle+0x2e>
 8003fee:	b181      	cbz	r1, 8004012 <ai_mnetwork_get_private_handle+0x2e>
 8003ff0:	b17d      	cbz	r5, 8004012 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003ff2:	6843      	ldr	r3, [r0, #4]
 8003ff4:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003ff6:	f100 0408 	add.w	r4, r0, #8
 8003ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800400a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800400e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004010:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	e7fb      	b.n	8004010 <ai_mnetwork_get_private_handle+0x2c>

08004018 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 800401c:	6896      	ldr	r6, [r2, #8]
{
 800401e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8004020:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004022:	f016 0304 	ands.w	r3, r6, #4
{
 8004026:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004028:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 800402c:	d028      	beq.n	8004080 <_write_number+0x68>
    if ((int64_t)number < 0) {
 800402e:	42a9      	cmp	r1, r5
 8004030:	da07      	bge.n	8004042 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004032:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004034:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004036:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 800403a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 800403e:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8004040:	252d      	movs	r5, #45	; 0x2d
 8004042:	f016 0f08 	tst.w	r6, #8
 8004046:	bf14      	ite	ne
 8004048:	f04f 0841 	movne.w	r8, #65	; 0x41
 800404c:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8004050:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004054:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004056:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800405a:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 800405e:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004062:	f1ba 0f00 	cmp.w	sl, #0
 8004066:	d033      	beq.n	80040d0 <_write_number+0xb8>
      chr = number & 0x0F;
 8004068:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 800406c:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800406e:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004070:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004074:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004078:	d906      	bls.n	8004088 <_write_number+0x70>
 800407a:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e004      	b.n	800408a <_write_number+0x72>
  char sign_neg = 0;
 8004080:	461d      	mov	r5, r3
 8004082:	e7de      	b.n	8004042 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004084:	4617      	mov	r7, r2
 8004086:	e7ea      	b.n	800405e <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004088:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 800408a:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 800408e:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004092:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004096:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 800409a:	d1f3      	bne.n	8004084 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 800409c:	f006 0101 	and.w	r1, r6, #1
 80040a0:	b155      	cbz	r5, 80040b8 <_write_number+0xa0>
 80040a2:	b949      	cbnz	r1, 80040b8 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 80040a4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80040a8:	eb0d 0203 	add.w	r2, sp, r3
 80040ac:	232d      	movs	r3, #45	; 0x2d
 80040ae:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 80040b2:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 80040b6:	1eba      	subs	r2, r7, #2
 80040b8:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	bf14      	ite	ne
 80040be:	2130      	movne	r1, #48	; 0x30
 80040c0:	2120      	moveq	r1, #32
 80040c2:	f006 0602 	and.w	r6, r6, #2
 80040c6:	455b      	cmp	r3, fp
 80040c8:	dd13      	ble.n	80040f2 <_write_number+0xda>
 80040ca:	b166      	cbz	r6, 80040e6 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040cc:	b9a5      	cbnz	r5, 80040f8 <_write_number+0xe0>
 80040ce:	e01c      	b.n	800410a <_write_number+0xf2>
      t = number / 10;
 80040d0:	220a      	movs	r2, #10
 80040d2:	2300      	movs	r3, #0
 80040d4:	f7fc fd68 	bl	8000ba8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80040d8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80040dc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80040e0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80040e4:	e7ca      	b.n	800407c <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80040e6:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80040ea:	f10b 0b01 	add.w	fp, fp, #1
 80040ee:	3a01      	subs	r2, #1
 80040f0:	e7e9      	b.n	80040c6 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040f2:	b155      	cbz	r5, 800410a <_write_number+0xf2>
 80040f4:	455b      	cmp	r3, fp
 80040f6:	d108      	bne.n	800410a <_write_number+0xf2>
    buf[idx--] = sign_neg;
 80040f8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80040fc:	446b      	add	r3, sp
 80040fe:	212d      	movs	r1, #45	; 0x2d
 8004100:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8004104:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004108:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 800410a:	eb0d 0602 	add.w	r6, sp, r2
 800410e:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004110:	68e3      	ldr	r3, [r4, #12]
 8004112:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004116:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8004118:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800411a:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800411c:	45ab      	cmp	fp, r5
 800411e:	d1f7      	bne.n	8004110 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	079b      	lsls	r3, r3, #30
 8004124:	d408      	bmi.n	8004138 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004126:	4628      	mov	r0, r5
 8004128:	b011      	add	sp, #68	; 0x44
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 800412e:	68e3      	ldr	r3, [r4, #12]
 8004130:	6920      	ldr	r0, [r4, #16]
 8004132:	2120      	movs	r1, #32
 8004134:	4798      	blx	r3
 8004136:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	42ab      	cmp	r3, r5
 800413c:	dcf7      	bgt.n	800412e <_write_number+0x116>
 800413e:	e7f2      	b.n	8004126 <_write_number+0x10e>

08004140 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	4682      	mov	sl, r0
 8004146:	b09d      	sub	sp, #116	; 0x74
 8004148:	4688      	mov	r8, r1
 800414a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800414c:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8004150:	4613      	mov	r3, r2
 8004152:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004156:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004158:	b919      	cbnz	r1, 8004162 <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 800415a:	4658      	mov	r0, fp
 800415c:	b01d      	add	sp, #116	; 0x74
 800415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004162:	290a      	cmp	r1, #10
 8004164:	d104      	bne.n	8004170 <vlc_print+0x30>
      putc_fct(user, c);
 8004166:	4640      	mov	r0, r8
 8004168:	47d0      	blx	sl
      count++;
 800416a:	f10b 0b01 	add.w	fp, fp, #1
 800416e:	e0fb      	b.n	8004368 <vlc_print+0x228>
    else if (c == '%')
 8004170:	2925      	cmp	r1, #37	; 0x25
 8004172:	d1f8      	bne.n	8004166 <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004174:	2300      	movs	r3, #0
 8004176:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800417a:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 800417e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004182:	461f      	mov	r7, r3
 8004184:	4618      	mov	r0, r3
 8004186:	461a      	mov	r2, r3
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	461e      	mov	r6, r3
      bool long_type = false;
 800418c:	469c      	mov	ip, r3
      bool has_precision = false;
 800418e:	469e      	mov	lr, r3
  return *(*fmtP)++;
 8004190:	9904      	ldr	r1, [sp, #16]
 8004192:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004196:	9104      	str	r1, [sp, #16]
        if (!c)
 8004198:	b32d      	cbz	r5, 80041e6 <vlc_print+0xa6>
        else if (c == '0')
 800419a:	2d39      	cmp	r5, #57	; 0x39
 800419c:	d814      	bhi.n	80041c8 <vlc_print+0x88>
 800419e:	2d2c      	cmp	r5, #44	; 0x2c
 80041a0:	d91e      	bls.n	80041e0 <vlc_print+0xa0>
 80041a2:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 80041a6:	290c      	cmp	r1, #12
 80041a8:	d811      	bhi.n	80041ce <vlc_print+0x8e>
 80041aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80041ae:	0044      	.short	0x0044
 80041b0:	001001ff 	.word	0x001001ff
 80041b4:	00470030 	.word	0x00470030
 80041b8:	00470047 	.word	0x00470047
 80041bc:	00470047 	.word	0x00470047
 80041c0:	00470047 	.word	0x00470047
 80041c4:	00470047 	.word	0x00470047
 80041c8:	2d6c      	cmp	r5, #108	; 0x6c
 80041ca:	f000 8202 	beq.w	80045d2 <vlc_print+0x492>
          switch(c)
 80041ce:	2d78      	cmp	r5, #120	; 0x78
 80041d0:	d809      	bhi.n	80041e6 <vlc_print+0xa6>
 80041d2:	2d62      	cmp	r5, #98	; 0x62
 80041d4:	d83d      	bhi.n	8004252 <vlc_print+0x112>
 80041d6:	2d46      	cmp	r5, #70	; 0x46
 80041d8:	f000 810c 	beq.w	80043f4 <vlc_print+0x2b4>
 80041dc:	2d58      	cmp	r5, #88	; 0x58
 80041de:	d06b      	beq.n	80042b8 <vlc_print+0x178>
 80041e0:	2d25      	cmp	r5, #37	; 0x25
 80041e2:	f000 8088 	beq.w	80042f6 <vlc_print+0x1b6>
 80041e6:	b103      	cbz	r3, 80041ea <vlc_print+0xaa>
 80041e8:	9709      	str	r7, [sp, #36]	; 0x24
 80041ea:	b100      	cbz	r0, 80041ee <vlc_print+0xae>
 80041ec:	9208      	str	r2, [sp, #32]
 80041ee:	9b00      	ldr	r3, [sp, #0]
 80041f0:	b103      	cbz	r3, 80041f4 <vlc_print+0xb4>
 80041f2:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 80041f4:	213c      	movs	r1, #60	; 0x3c
 80041f6:	4640      	mov	r0, r8
 80041f8:	47d0      	blx	sl
        putc_fct(user, '!');
 80041fa:	2121      	movs	r1, #33	; 0x21
 80041fc:	4640      	mov	r0, r8
 80041fe:	47d0      	blx	sl
        putc_fct(user, '>');
 8004200:	213e      	movs	r1, #62	; 0x3e
 8004202:	4640      	mov	r0, r8
 8004204:	47d0      	blx	sl
        va_arg(vl, signed long);
 8004206:	3404      	adds	r4, #4
        count += 3;
 8004208:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 800420c:	e0ac      	b.n	8004368 <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 800420e:	ea56 0502 	orrs.w	r5, r6, r2
 8004212:	d105      	bne.n	8004220 <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004214:	f047 0701 	orr.w	r7, r7, #1
 8004218:	462a      	mov	r2, r5
 800421a:	462e      	mov	r6, r5
 800421c:	2301      	movs	r3, #1
 800421e:	e7b7      	b.n	8004190 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004220:	210a      	movs	r1, #10
          } else if (has_precision) {
 8004222:	f1be 0f00 	cmp.w	lr, #0
 8004226:	d002      	beq.n	800422e <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004228:	434a      	muls	r2, r1
 800422a:	4670      	mov	r0, lr
 800422c:	e7b0      	b.n	8004190 <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 800422e:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8004230:	2101      	movs	r1, #1
 8004232:	9100      	str	r1, [sp, #0]
 8004234:	e7ac      	b.n	8004190 <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 8004236:	f047 0702 	orr.w	r7, r7, #2
 800423a:	e7ef      	b.n	800421c <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800423c:	3d30      	subs	r5, #48	; 0x30
 800423e:	210a      	movs	r1, #10
          if (has_precision) {
 8004240:	f1be 0f00 	cmp.w	lr, #0
 8004244:	d002      	beq.n	800424c <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004246:	fb01 5202 	mla	r2, r1, r2, r5
 800424a:	e7ee      	b.n	800422a <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 800424c:	fb01 5606 	mla	r6, r1, r6, r5
 8004250:	e7ee      	b.n	8004230 <vlc_print+0xf0>
          switch(c)
 8004252:	3d63      	subs	r5, #99	; 0x63
 8004254:	2d15      	cmp	r5, #21
 8004256:	d8c6      	bhi.n	80041e6 <vlc_print+0xa6>
 8004258:	f20f 0e04 	addw	lr, pc, #4
 800425c:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 8004260:	08004309 	.word	0x08004309
 8004264:	080043bd 	.word	0x080043bd
 8004268:	080041e7 	.word	0x080041e7
 800426c:	080043f5 	.word	0x080043f5
 8004270:	080041e7 	.word	0x080041e7
 8004274:	080041e7 	.word	0x080041e7
 8004278:	080043bd 	.word	0x080043bd
 800427c:	080041e7 	.word	0x080041e7
 8004280:	080041e7 	.word	0x080041e7
 8004284:	080041e7 	.word	0x080041e7
 8004288:	080041e7 	.word	0x080041e7
 800428c:	080041e7 	.word	0x080041e7
 8004290:	080041e7 	.word	0x080041e7
 8004294:	080043a7 	.word	0x080043a7
 8004298:	080041e7 	.word	0x080041e7
 800429c:	080041e7 	.word	0x080041e7
 80042a0:	0800431d 	.word	0x0800431d
 80042a4:	080041e7 	.word	0x080041e7
 80042a8:	080045b3 	.word	0x080045b3
 80042ac:	080041e7 	.word	0x080041e7
 80042b0:	080041e7 	.word	0x080041e7
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	b103      	cbz	r3, 80042bc <vlc_print+0x17c>
 80042ba:	9709      	str	r7, [sp, #36]	; 0x24
 80042bc:	b100      	cbz	r0, 80042c0 <vlc_print+0x180>
 80042be:	9208      	str	r2, [sp, #32]
 80042c0:	9b00      	ldr	r3, [sp, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <vlc_print+0x186>
 80042c4:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 80042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	9309      	str	r3, [sp, #36]	; 0x24
 80042ce:	e006      	b.n	80042de <vlc_print+0x19e>
 80042d0:	b103      	cbz	r3, 80042d4 <vlc_print+0x194>
 80042d2:	9709      	str	r7, [sp, #36]	; 0x24
 80042d4:	b100      	cbz	r0, 80042d8 <vlc_print+0x198>
 80042d6:	9208      	str	r2, [sp, #32]
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	b103      	cbz	r3, 80042de <vlc_print+0x19e>
 80042dc:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 80042de:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 80042e0:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 80042e4:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 80042e8:	aa07      	add	r2, sp, #28
 80042ea:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 80042ec:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 80042ee:	f7ff fe93 	bl	8004018 <_write_number>
 80042f2:	4483      	add	fp, r0
            break;
 80042f4:	e038      	b.n	8004368 <vlc_print+0x228>
 80042f6:	b103      	cbz	r3, 80042fa <vlc_print+0x1ba>
 80042f8:	9709      	str	r7, [sp, #36]	; 0x24
 80042fa:	b100      	cbz	r0, 80042fe <vlc_print+0x1be>
 80042fc:	9208      	str	r2, [sp, #32]
 80042fe:	9b00      	ldr	r3, [sp, #0]
 8004300:	b103      	cbz	r3, 8004304 <vlc_print+0x1c4>
 8004302:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 8004304:	2125      	movs	r1, #37	; 0x25
 8004306:	e72e      	b.n	8004166 <vlc_print+0x26>
 8004308:	b103      	cbz	r3, 800430c <vlc_print+0x1cc>
 800430a:	9709      	str	r7, [sp, #36]	; 0x24
 800430c:	b100      	cbz	r0, 8004310 <vlc_print+0x1d0>
 800430e:	9208      	str	r2, [sp, #32]
 8004310:	9b00      	ldr	r3, [sp, #0]
 8004312:	b103      	cbz	r3, 8004316 <vlc_print+0x1d6>
 8004314:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 8004316:	f814 1b04 	ldrb.w	r1, [r4], #4
 800431a:	e724      	b.n	8004166 <vlc_print+0x26>
 800431c:	b103      	cbz	r3, 8004320 <vlc_print+0x1e0>
 800431e:	9709      	str	r7, [sp, #36]	; 0x24
 8004320:	b100      	cbz	r0, 8004324 <vlc_print+0x1e4>
 8004322:	9208      	str	r2, [sp, #32]
 8004324:	9b00      	ldr	r3, [sp, #0]
 8004326:	b103      	cbz	r3, 800432a <vlc_print+0x1ea>
 8004328:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 800432a:	4bab      	ldr	r3, [pc, #684]	; (80045d8 <vlc_print+0x498>)
            str = va_arg(vl, char*);
 800432c:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8004330:	f1b9 0f00 	cmp.w	r9, #0
 8004334:	bf08      	it	eq
 8004336:	4699      	moveq	r9, r3
  int len = strlen(str);
 8004338:	4648      	mov	r0, r9
 800433a:	f7fb ff99 	bl	8000270 <strlen>
  if (specifier->precision) {
 800433e:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004340:	4606      	mov	r6, r0
  if (specifier->precision) {
 8004342:	b113      	cbz	r3, 800434a <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8004344:	4298      	cmp	r0, r3
 8004346:	bfa8      	it	ge
 8004348:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 800434a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800434c:	f017 0702 	ands.w	r7, r7, #2
 8004350:	d015      	beq.n	800437e <vlc_print+0x23e>
  int count = 0;
 8004352:	2500      	movs	r5, #0
 8004354:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8004356:	eba2 0309 	sub.w	r3, r2, r9
 800435a:	429e      	cmp	r6, r3
 800435c:	dc11      	bgt.n	8004382 <vlc_print+0x242>
 800435e:	2e00      	cmp	r6, #0
 8004360:	bfa8      	it	ge
 8004362:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8004364:	b9ef      	cbnz	r7, 80043a2 <vlc_print+0x262>
            count += _write_string(str, &specifier);
 8004366:	44ab      	add	fp, r5
            break;
 8004368:	9a04      	ldr	r2, [sp, #16]
 800436a:	e6f1      	b.n	8004150 <vlc_print+0x10>
      _WRITE_C(' ');
 800436c:	2120      	movs	r1, #32
 800436e:	4640      	mov	r0, r8
 8004370:	47d0      	blx	sl
 8004372:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004374:	9a07      	ldr	r2, [sp, #28]
 8004376:	19ab      	adds	r3, r5, r6
 8004378:	429a      	cmp	r2, r3
 800437a:	dcf7      	bgt.n	800436c <vlc_print+0x22c>
 800437c:	e7ea      	b.n	8004354 <vlc_print+0x214>
  int count = 0;
 800437e:	463d      	mov	r5, r7
 8004380:	e7f8      	b.n	8004374 <vlc_print+0x234>
    _WRITE_C(*str++);
 8004382:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004386:	9200      	str	r2, [sp, #0]
 8004388:	4640      	mov	r0, r8
 800438a:	47d0      	blx	sl
 800438c:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 800438e:	e7e2      	b.n	8004356 <vlc_print+0x216>
      _WRITE_C(' ');
 8004390:	2120      	movs	r1, #32
 8004392:	4640      	mov	r0, r8
 8004394:	47d0      	blx	sl
 8004396:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8004398:	9a07      	ldr	r2, [sp, #28]
 800439a:	1973      	adds	r3, r6, r5
 800439c:	429a      	cmp	r2, r3
 800439e:	dcf7      	bgt.n	8004390 <vlc_print+0x250>
 80043a0:	e7e1      	b.n	8004366 <vlc_print+0x226>
 80043a2:	1b76      	subs	r6, r6, r5
 80043a4:	e7f8      	b.n	8004398 <vlc_print+0x258>
 80043a6:	b103      	cbz	r3, 80043aa <vlc_print+0x26a>
 80043a8:	9709      	str	r7, [sp, #36]	; 0x24
 80043aa:	b100      	cbz	r0, 80043ae <vlc_print+0x26e>
 80043ac:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 80043ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 80043b6:	2308      	movs	r3, #8
 80043b8:	9307      	str	r3, [sp, #28]
 80043ba:	e784      	b.n	80042c6 <vlc_print+0x186>
 80043bc:	b103      	cbz	r3, 80043c0 <vlc_print+0x280>
 80043be:	9709      	str	r7, [sp, #36]	; 0x24
 80043c0:	b100      	cbz	r0, 80043c4 <vlc_print+0x284>
 80043c2:	9208      	str	r2, [sp, #32]
 80043c4:	9b00      	ldr	r3, [sp, #0]
 80043c6:	b103      	cbz	r3, 80043ca <vlc_print+0x28a>
 80043c8:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 80043ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 80043d2:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 80043d4:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 80043d6:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 80043d8:	aa07      	add	r2, sp, #28
 80043da:	f7ff fe1d 	bl	8004018 <_write_number>
            break;
 80043de:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 80043e0:	4483      	add	fp, r0
            break;
 80043e2:	e7c1      	b.n	8004368 <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 80043e4:	3407      	adds	r4, #7
 80043e6:	f024 0407 	bic.w	r4, r4, #7
 80043ea:	4625      	mov	r5, r4
 80043ec:	6861      	ldr	r1, [r4, #4]
 80043ee:	f855 0b08 	ldr.w	r0, [r5], #8
 80043f2:	e7f1      	b.n	80043d8 <vlc_print+0x298>
 80043f4:	b103      	cbz	r3, 80043f8 <vlc_print+0x2b8>
 80043f6:	9709      	str	r7, [sp, #36]	; 0x24
 80043f8:	b100      	cbz	r0, 80043fc <vlc_print+0x2bc>
 80043fa:	9208      	str	r2, [sp, #32]
 80043fc:	9b00      	ldr	r3, [sp, #0]
 80043fe:	b103      	cbz	r3, 8004402 <vlc_print+0x2c2>
 8004400:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 8004402:	3407      	adds	r4, #7
 8004404:	f024 0407 	bic.w	r4, r4, #7
 8004408:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 800440c:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 800440e:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004412:	b90b      	cbnz	r3, 8004418 <vlc_print+0x2d8>
              specifier.precision = 6;
 8004414:	2306      	movs	r3, #6
 8004416:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004418:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 800441a:	4f70      	ldr	r7, [pc, #448]	; (80045dc <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 800441c:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8004420:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 8004422:	45a9      	cmp	r9, r5
    mul *= 10;
 8004424:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004428:	f2c0 80ac 	blt.w	8004584 <vlc_print+0x444>
  if (is_signed)
 800442c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004430:	2300      	movs	r3, #0
 8004432:	f7fc fb53 	bl	8000adc <__aeabi_dcmplt>
 8004436:	2800      	cmp	r0, #0
 8004438:	f000 80ae 	beq.w	8004598 <vlc_print+0x458>
    number = -number;
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	9302      	str	r3, [sp, #8]
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004446:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 8004448:	4632      	mov	r2, r6
 800444a:	463b      	mov	r3, r7
 800444c:	4964      	ldr	r1, [pc, #400]	; (80045e0 <vlc_print+0x4a0>)
 800444e:	2000      	movs	r0, #0
 8004450:	f7fc f9fc 	bl	800084c <__aeabi_ddiv>
 8004454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004458:	f7fb ff18 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 800445c:	4632      	mov	r2, r6
 800445e:	463b      	mov	r3, r7
 8004460:	f7fc f8ca 	bl	80005f8 <__aeabi_dmul>
 8004464:	f7fc fbb8 	bl	8000bd8 <__aeabi_d2ulz>
  uint32_t count = 0;
 8004468:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 800446a:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 800446c:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 800446e:	4691      	mov	r9, r2
 8004470:	2300      	movs	r3, #0
 8004472:	220a      	movs	r2, #10
 8004474:	4648      	mov	r0, r9
 8004476:	9105      	str	r1, [sp, #20]
 8004478:	f7fc fb96 	bl	8000ba8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 800447c:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8004480:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8004484:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8004486:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 800448a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800448e:	446b      	add	r3, sp
 8004490:	f107 3cff 	add.w	ip, r7, #4294967295
 8004494:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004498:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 800449a:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 800449c:	bf01      	itttt	eq
 800449e:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 80044a2:	eb0d 0c03 	addeq.w	ip, sp, r3
 80044a6:	232e      	moveq	r3, #46	; 0x2e
 80044a8:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 80044ac:	bf18      	it	ne
 80044ae:	461e      	movne	r6, r3
  } while (val);
 80044b0:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 80044b2:	bf06      	itte	eq
 80044b4:	3f02      	subeq	r7, #2
      count++;
 80044b6:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 80044b8:	4667      	movne	r7, ip
  } while (val);
 80044ba:	f1b9 0f0a 	cmp.w	r9, #10
 80044be:	f173 0900 	sbcs.w	r9, r3, #0
 80044c2:	d2d4      	bcs.n	800446e <vlc_print+0x32e>
    buf[idx--] = '0';
 80044c4:	42ae      	cmp	r6, r5
 80044c6:	f1c5 0001 	rsb	r0, r5, #1
 80044ca:	4430      	add	r0, r6
 80044cc:	f04f 0130 	mov.w	r1, #48	; 0x30
 80044d0:	bf88      	it	hi
 80044d2:	2001      	movhi	r0, #1
 80044d4:	eba5 0906 	sub.w	r9, r5, r6
 80044d8:	eb0d 0301 	add.w	r3, sp, r1
 80044dc:	bf88      	it	hi
 80044de:	f04f 0900 	movhi.w	r9, #0
 80044e2:	4438      	add	r0, r7
 80044e4:	4418      	add	r0, r3
 80044e6:	464a      	mov	r2, r9
 80044e8:	f003 fde5 	bl	80080b6 <memset>
 80044ec:	1b73      	subs	r3, r6, r5
 80044ee:	42ae      	cmp	r6, r5
 80044f0:	bf88      	it	hi
 80044f2:	2300      	movhi	r3, #0
 80044f4:	444e      	add	r6, r9
  if (count == specifier->precision) {
 80044f6:	42b5      	cmp	r5, r6
 80044f8:	441f      	add	r7, r3
 80044fa:	f105 0501 	add.w	r5, r5, #1
 80044fe:	d107      	bne.n	8004510 <vlc_print+0x3d0>
    buf[idx--] = '.';
 8004500:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004504:	446b      	add	r3, sp
 8004506:	222e      	movs	r2, #46	; 0x2e
 8004508:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 800450c:	462e      	mov	r6, r5
    buf[idx--] = '.';
 800450e:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 8004510:	42b5      	cmp	r5, r6
 8004512:	d107      	bne.n	8004524 <vlc_print+0x3e4>
    buf[idx--] = '0';
 8004514:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004518:	446b      	add	r3, sp
 800451a:	2230      	movs	r2, #48	; 0x30
 800451c:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004520:	3601      	adds	r6, #1
    buf[idx--] = '0';
 8004522:	3f01      	subs	r7, #1
  if (is_signed) {
 8004524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004528:	2200      	movs	r2, #0
 800452a:	2300      	movs	r3, #0
 800452c:	f7fc fad6 	bl	8000adc <__aeabi_dcmplt>
 8004530:	b138      	cbz	r0, 8004542 <vlc_print+0x402>
    buf[idx--] = '-';
 8004532:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004536:	446b      	add	r3, sp
 8004538:	222d      	movs	r2, #45	; 0x2d
 800453a:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 800453e:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8004540:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8004542:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8004544:	42ae      	cmp	r6, r5
 8004546:	f1c5 0001 	rsb	r0, r5, #1
 800454a:	4430      	add	r0, r6
 800454c:	bf88      	it	hi
 800454e:	2001      	movhi	r0, #1
 8004550:	eba5 0906 	sub.w	r9, r5, r6
 8004554:	ab0c      	add	r3, sp, #48	; 0x30
 8004556:	bf88      	it	hi
 8004558:	f04f 0900 	movhi.w	r9, #0
 800455c:	4438      	add	r0, r7
 800455e:	464a      	mov	r2, r9
 8004560:	4418      	add	r0, r3
 8004562:	2120      	movs	r1, #32
 8004564:	f003 fda7 	bl	80080b6 <memset>
 8004568:	1b73      	subs	r3, r6, r5
 800456a:	42ae      	cmp	r6, r5
 800456c:	bf88      	it	hi
 800456e:	2300      	movhi	r3, #0
 8004570:	443b      	add	r3, r7
 8004572:	aa0c      	add	r2, sp, #48	; 0x30
 8004574:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 8004576:	18d7      	adds	r7, r2, r3
 8004578:	4433      	add	r3, r6
 800457a:	189d      	adds	r5, r3, r2
 800457c:	42bd      	cmp	r5, r7
 800457e:	d110      	bne.n	80045a2 <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8004580:	44b3      	add	fp, r6
            break;
 8004582:	e6f1      	b.n	8004368 <vlc_print+0x228>
    mul *= 10;
 8004584:	4630      	mov	r0, r6
 8004586:	4639      	mov	r1, r7
 8004588:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <vlc_print+0x4a4>)
 800458a:	f7fc f835 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 800458e:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8004592:	4606      	mov	r6, r0
 8004594:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 8004596:	e744      	b.n	8004422 <vlc_print+0x2e2>
 8004598:	ed9d 7b00 	vldr	d7, [sp]
 800459c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045a0:	e752      	b.n	8004448 <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80045a2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80045a6:	4640      	mov	r0, r8
 80045a8:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 80045aa:	e7e7      	b.n	800457c <vlc_print+0x43c>
        if (!c)
 80045ac:	f04f 0e01 	mov.w	lr, #1
 80045b0:	e5ee      	b.n	8004190 <vlc_print+0x50>
 80045b2:	b103      	cbz	r3, 80045b6 <vlc_print+0x476>
 80045b4:	9709      	str	r7, [sp, #36]	; 0x24
 80045b6:	b100      	cbz	r0, 80045ba <vlc_print+0x47a>
 80045b8:	9208      	str	r2, [sp, #32]
 80045ba:	9b00      	ldr	r3, [sp, #0]
 80045bc:	b103      	cbz	r3, 80045c0 <vlc_print+0x480>
 80045be:	9607      	str	r6, [sp, #28]
              if (long_type)
 80045c0:	f1bc 0f00 	cmp.w	ip, #0
 80045c4:	f47f af0e 	bne.w	80043e4 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 80045c8:	4625      	mov	r5, r4
 80045ca:	4661      	mov	r1, ip
 80045cc:	f855 0b04 	ldr.w	r0, [r5], #4
 80045d0:	e702      	b.n	80043d8 <vlc_print+0x298>
        if (!c)
 80045d2:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 80045d6:	e5db      	b.n	8004190 <vlc_print+0x50>
 80045d8:	0800ac18 	.word	0x0800ac18
 80045dc:	3ff00000 	.word	0x3ff00000
 80045e0:	3fe00000 	.word	0x3fe00000
 80045e4:	40240000 	.word	0x40240000

080045e8 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	b0a2      	sub	sp, #136	; 0x88
 80045ec:	4606      	mov	r6, r0
 80045ee:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80045f0:	f000 fbc2 	bl	8004d78 <ai_platform_context_acquire>
 80045f4:	4604      	mov	r4, r0

  if (report && net_ctx)
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	d035      	beq.n	8004666 <ai_network_get_report+0x7e>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d030      	beq.n	8004660 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 80045fe:	2278      	movs	r2, #120	; 0x78
 8004600:	2100      	movs	r1, #0
 8004602:	a804      	add	r0, sp, #16
 8004604:	f003 fd57 	bl	80080b6 <memset>
 8004608:	4b18      	ldr	r3, [pc, #96]	; (800466c <ai_network_get_report+0x84>)
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <ai_network_get_report+0x88>)
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <ai_network_get_report+0x8c>)
 8004612:	9302      	str	r3, [sp, #8]
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <ai_network_get_report+0x90>)
 8004616:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004618:	f000 fa92 	bl	8004b40 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800461c:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 800461e:	f000 fac7 	bl	8004bb0 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004622:	4b16      	ldr	r3, [pc, #88]	; (800467c <ai_network_get_report+0x94>)
 8004624:	9306      	str	r3, [sp, #24]
 8004626:	f44f 7384 	mov.w	r3, #264	; 0x108
 800462a:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 800462e:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004630:	f000 fb0a 	bl	8004c48 <ai_platform_api_get_version>
 8004634:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004636:	f000 fb53 	bl	8004ce0 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800463a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800463e:	2300      	movs	r3, #0
 8004640:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004644:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <ai_network_get_report+0x98>)
 8004648:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800464a:	4669      	mov	r1, sp
 800464c:	4630      	mov	r0, r6
 800464e:	f000 fc47 	bl	8004ee0 <ai_platform_api_get_network_report>
 8004652:	4604      	mov	r4, r0
 8004654:	b120      	cbz	r0, 8004660 <ai_network_get_report+0x78>

    *report = r;
 8004656:	2288      	movs	r2, #136	; 0x88
 8004658:	4669      	mov	r1, sp
 800465a:	4628      	mov	r0, r5
 800465c:	f003 fdcc 	bl	80081f8 <memcpy>
    return true;
  }
  return false;
}
 8004660:	4620      	mov	r0, r4
 8004662:	b022      	add	sp, #136	; 0x88
 8004664:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004666:	462c      	mov	r4, r5
 8004668:	e7fa      	b.n	8004660 <ai_network_get_report+0x78>
 800466a:	bf00      	nop
 800466c:	0800abe4 	.word	0x0800abe4
 8004670:	0800ac1f 	.word	0x0800ac1f
 8004674:	0800ac40 	.word	0x0800ac40
 8004678:	0800ac59 	.word	0x0800ac59
 800467c:	0800c154 	.word	0x0800c154
 8004680:	a1facade 	.word	0xa1facade

08004684 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004684:	f000 bbb8 	b.w	8004df8 <ai_platform_network_get_error>

08004688 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004688:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800468a:	2305      	movs	r3, #5
 800468c:	2200      	movs	r2, #0
 800468e:	e9cd 3200 	strd	r3, r2, [sp]
 8004692:	4a03      	ldr	r2, [pc, #12]	; (80046a0 <ai_network_create+0x18>)
 8004694:	2301      	movs	r3, #1
 8004696:	f000 fee1 	bl	800545c <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800469a:	b003      	add	sp, #12
 800469c:	f85d fb04 	ldr.w	pc, [sp], #4
 80046a0:	20000588 	.word	0x20000588

080046a4 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80046a4:	f000 bfb0 	b.w	8005608 <ai_platform_network_destroy>

080046a8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ac:	4607      	mov	r7, r0
 80046ae:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80046b0:	f001 f816 	bl	80056e0 <ai_platform_network_init>
  if (!net_ctx) return false;
 80046b4:	4604      	mov	r4, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d050      	beq.n	800475c <ai_network_init+0xb4>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80046ba:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800479c <ai_network_init+0xf4>
 80046be:	4632      	mov	r2, r6
 80046c0:	2101      	movs	r1, #1
 80046c2:	4640      	mov	r0, r8
 80046c4:	f000 f972 	bl	80049ac <ai_platform_get_weights_map>
 80046c8:	4605      	mov	r5, r0
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d048      	beq.n	8004760 <ai_network_init+0xb8>
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80046ce:	4a2a      	ldr	r2, [pc, #168]	; (8004778 <ai_network_init+0xd0>)
 80046d0:	6813      	ldr	r3, [r2, #0]
 80046d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d6:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80046d8:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80046dc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80046e0:	4a26      	ldr	r2, [pc, #152]	; (800477c <ai_network_init+0xd4>)
 80046e2:	6811      	ldr	r1, [r2, #0]
 80046e4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046e8:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 80046ea:	f503 6158 	add.w	r1, r3, #3456	; 0xd80
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 80046ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80046f2:	4a23      	ldr	r2, [pc, #140]	; (8004780 <ai_network_init+0xd8>)
 80046f4:	6811      	ldr	r1, [r2, #0]
 80046f6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046fa:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 80046fc:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8004700:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004704:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <ai_network_init+0xdc>)
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 8004706:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800470a:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 800470c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004710:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004714:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8004716:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80047a0 <ai_network_init+0xf8>
 800471a:	4632      	mov	r2, r6
 800471c:	2101      	movs	r1, #1
 800471e:	4640      	mov	r0, r8
 8004720:	f000 f998 	bl	8004a54 <ai_platform_get_activations_map>
 8004724:	4606      	mov	r6, r0
 8004726:	b308      	cbz	r0, 800476c <ai_network_init+0xc4>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004728:	f8d8 3000 	ldr.w	r3, [r8]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <ai_network_init+0xe0>)
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800472e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <ai_network_init+0xe4>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004734:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8004738:	4a15      	ldr	r2, [pc, #84]	; (8004790 <ai_network_init+0xe8>)
 800473a:	f103 010c 	add.w	r1, r3, #12
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800473e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8004742:	4a14      	ldr	r2, [pc, #80]	; (8004794 <ai_network_init+0xec>)
 8004744:	336c      	adds	r3, #108	; 0x6c
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8004746:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <ai_network_init+0xf0>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 800474c:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004750:	4638      	mov	r0, r7
 8004752:	f001 f8b3 	bl	80058bc <ai_platform_network_post_init>
 8004756:	4030      	ands	r0, r6
 8004758:	4005      	ands	r5, r0
 800475a:	b2e8      	uxtb	r0, r5

  return ok;
}
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004760:	2212      	movs	r2, #18
 8004762:	2130      	movs	r1, #48	; 0x30
 8004764:	4620      	mov	r0, r4
 8004766:	f000 fbb5 	bl	8004ed4 <ai_platform_network_set_error>
  return false;
 800476a:	e7d4      	b.n	8004716 <ai_network_init+0x6e>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800476c:	2213      	movs	r2, #19
 800476e:	2130      	movs	r1, #48	; 0x30
 8004770:	4620      	mov	r0, r4
 8004772:	f000 fbaf 	bl	8004ed4 <ai_platform_network_set_error>
  return false;
 8004776:	e7eb      	b.n	8004750 <ai_network_init+0xa8>
 8004778:	2000052c 	.word	0x2000052c
 800477c:	200004b8 	.word	0x200004b8
 8004780:	20000440 	.word	0x20000440
 8004784:	200003cc 	.word	0x200003cc
 8004788:	200005f0 	.word	0x200005f0
 800478c:	20000414 	.word	0x20000414
 8004790:	2000048c 	.word	0x2000048c
 8004794:	20000500 	.word	0x20000500
 8004798:	20000578 	.word	0x20000578
 800479c:	20000ac4 	.word	0x20000ac4
 80047a0:	20000ac0 	.word	0x20000ac0

080047a4 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80047a4:	f001 b912 	b.w	80059cc <ai_platform_network_process>

080047a8 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80047a8:	2200      	movs	r2, #0
 80047aa:	f001 b90f 	b.w	80059cc <ai_platform_network_process>
	...

080047b0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80047b0:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80047b2:	4603      	mov	r3, r0
{
 80047b4:	b085      	sub	sp, #20
  if (!params) return false;
 80047b6:	b170      	cbz	r0, 80047d6 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80047b8:	4c08      	ldr	r4, [pc, #32]	; (80047dc <ai_network_data_params_get+0x2c>)
 80047ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047be:	466a      	mov	r2, sp
 80047c0:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80047c4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80047c8:	ad02      	add	r5, sp, #8
 80047ca:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80047ce:	4629      	mov	r1, r5
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f993 	bl	8004afc <ai_platform_bind_network_params>
}
 80047d6:	b005      	add	sp, #20
 80047d8:	bd30      	pop	{r4, r5, pc}
 80047da:	bf00      	nop
 80047dc:	0800ab6c 	.word	0x0800ab6c

080047e0 <ai_buffer_get_size>:
 80047e0:	b378      	cbz	r0, 8004842 <ai_buffer_get_size+0x62>
 80047e2:	b410      	push	{r4}
 80047e4:	6803      	ldr	r3, [r0, #0]
 80047e6:	4a17      	ldr	r2, [pc, #92]	; (8004844 <ai_buffer_get_size+0x64>)
 80047e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80047ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01e      	beq.n	8004832 <ai_buffer_get_size+0x52>
 80047f4:	6984      	ldr	r4, [r0, #24]
 80047f6:	6862      	ldr	r2, [r4, #4]
 80047f8:	7d03      	ldrb	r3, [r0, #20]
 80047fa:	6941      	ldr	r1, [r0, #20]
 80047fc:	f1a3 0301 	sub.w	r3, r3, #1
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800480a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800480e:	da0b      	bge.n	8004828 <ai_buffer_get_size+0x48>
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <ai_buffer_get_size+0x3a>
 8004814:	2802      	cmp	r0, #2
 8004816:	d007      	beq.n	8004828 <ai_buffer_get_size+0x48>
 8004818:	2302      	movs	r3, #2
 800481a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800481e:	3301      	adds	r3, #1
 8004820:	4298      	cmp	r0, r3
 8004822:	fb01 f202 	mul.w	r2, r1, r2
 8004826:	d1f3      	bne.n	8004810 <ai_buffer_get_size+0x30>
 8004828:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800482c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	2900      	cmp	r1, #0
 8004834:	d0de      	beq.n	80047f4 <ai_buffer_get_size+0x14>
 8004836:	6984      	ldr	r4, [r0, #24]
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	331f      	adds	r3, #31
 800483c:	f023 021f 	bic.w	r2, r3, #31
 8004840:	e7da      	b.n	80047f8 <ai_buffer_get_size+0x18>
 8004842:	4770      	bx	lr
 8004844:	000400c0 	.word	0x000400c0

08004848 <ai_buffer_get_byte_size>:
 8004848:	b128      	cbz	r0, 8004856 <ai_buffer_get_byte_size+0xe>
 800484a:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800484e:	fb01 f000 	mul.w	r0, r1, r0
 8004852:	3007      	adds	r0, #7
 8004854:	08c0      	lsrs	r0, r0, #3
 8004856:	4770      	bx	lr

08004858 <ai_buffer_array_sane>:
 8004858:	b138      	cbz	r0, 800486a <ai_buffer_array_sane+0x12>
 800485a:	6843      	ldr	r3, [r0, #4]
 800485c:	b123      	cbz	r3, 8004868 <ai_buffer_array_sane+0x10>
 800485e:	8840      	ldrh	r0, [r0, #2]
 8004860:	3800      	subs	r0, #0
 8004862:	bf18      	it	ne
 8004864:	2001      	movne	r0, #1
 8004866:	4770      	bx	lr
 8004868:	4618      	mov	r0, r3
 800486a:	4770      	bx	lr

0800486c <ai_buffer_array_item_set_address>:
 800486c:	b150      	cbz	r0, 8004884 <ai_buffer_array_item_set_address+0x18>
 800486e:	6843      	ldr	r3, [r0, #4]
 8004870:	b14b      	cbz	r3, 8004886 <ai_buffer_array_item_set_address+0x1a>
 8004872:	8840      	ldrh	r0, [r0, #2]
 8004874:	b900      	cbnz	r0, 8004878 <ai_buffer_array_item_set_address+0xc>
 8004876:	4770      	bx	lr
 8004878:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800487c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004880:	2001      	movs	r0, #1
 8004882:	604a      	str	r2, [r1, #4]
 8004884:	4770      	bx	lr
 8004886:	4618      	mov	r0, r3
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop

0800488c <_platform_observer_node_exec_cb>:
 800488c:	2a00      	cmp	r2, #0
 800488e:	d07d      	beq.n	800498c <_platform_observer_node_exec_cb+0x100>
 8004890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004894:	6815      	ldr	r5, [r2, #0]
 8004896:	b085      	sub	sp, #20
 8004898:	4614      	mov	r4, r2
 800489a:	2d00      	cmp	r5, #0
 800489c:	d078      	beq.n	8004990 <_platform_observer_node_exec_cb+0x104>
 800489e:	8992      	ldrh	r2, [r2, #12]
 80048a0:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	460b      	mov	r3, r1
 80048a8:	f240 3102 	movw	r1, #770	; 0x302
 80048ac:	f240 2e02 	movw	lr, #514	; 0x202
 80048b0:	bf08      	it	eq
 80048b2:	460e      	moveq	r6, r1
 80048b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80048b8:	f240 2101 	movw	r1, #513	; 0x201
 80048bc:	bf1c      	itt	ne
 80048be:	4676      	movne	r6, lr
 80048c0:	f44f 7901 	movne.w	r9, #516	; 0x204
 80048c4:	f240 3e01 	movw	lr, #769	; 0x301
 80048c8:	bf0e      	itee	eq
 80048ca:	f44f 7941 	moveq.w	r9, #772	; 0x304
 80048ce:	468e      	movne	lr, r1
 80048d0:	f04f 0804 	movne.w	r8, #4
 80048d4:	f240 1101 	movw	r1, #257	; 0x101
 80048d8:	bf0d      	iteet	eq
 80048da:	f44f 7882 	moveq.w	r8, #260	; 0x104
 80048de:	2101      	movne	r1, #1
 80048e0:	2702      	movne	r7, #2
 80048e2:	f44f 7781 	moveq.w	r7, #258	; 0x102
 80048e6:	4594      	cmp	ip, r2
 80048e8:	d034      	beq.n	8004954 <_platform_observer_node_exec_cb+0xc8>
 80048ea:	b300      	cbz	r0, 800492e <_platform_observer_node_exec_cb+0xa2>
 80048ec:	2801      	cmp	r0, #1
 80048ee:	d053      	beq.n	8004998 <_platform_observer_node_exec_cb+0x10c>
 80048f0:	2802      	cmp	r0, #2
 80048f2:	d035      	beq.n	8004960 <_platform_observer_node_exec_cb+0xd4>
 80048f4:	2803      	cmp	r0, #3
 80048f6:	d116      	bne.n	8004926 <_platform_observer_node_exec_cb+0x9a>
 80048f8:	68a3      	ldr	r3, [r4, #8]
 80048fa:	075b      	lsls	r3, r3, #29
 80048fc:	d511      	bpl.n	8004922 <_platform_observer_node_exec_cb+0x96>
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	f8ad 2000 	strh.w	r2, [sp]
 8004904:	885a      	ldrh	r2, [r3, #2]
 8004906:	f8ad 2004 	strh.w	r2, [sp, #4]
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	6860      	ldr	r0, [r4, #4]
 8004914:	2300      	movs	r3, #0
 8004916:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800491a:	4641      	mov	r1, r8
 800491c:	466a      	mov	r2, sp
 800491e:	47a8      	blx	r5
 8004920:	89a2      	ldrh	r2, [r4, #12]
 8004922:	3201      	adds	r2, #1
 8004924:	81a2      	strh	r2, [r4, #12]
 8004926:	2000      	movs	r0, #0
 8004928:	b005      	add	sp, #20
 800492a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800492e:	68a6      	ldr	r6, [r4, #8]
 8004930:	07f6      	lsls	r6, r6, #31
 8004932:	d5f6      	bpl.n	8004922 <_platform_observer_node_exec_cb+0x96>
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	8858      	ldrh	r0, [r3, #2]
 8004938:	f8ad 0004 	strh.w	r0, [sp, #4]
 800493c:	8818      	ldrh	r0, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f8ad 2000 	strh.w	r2, [sp]
 8004944:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004948:	466a      	mov	r2, sp
 800494a:	6860      	ldr	r0, [r4, #4]
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	47a8      	blx	r5
 8004950:	89a2      	ldrh	r2, [r4, #12]
 8004952:	e7e6      	b.n	8004922 <_platform_observer_node_exec_cb+0x96>
 8004954:	46c8      	mov	r8, r9
 8004956:	4637      	mov	r7, r6
 8004958:	4671      	mov	r1, lr
 800495a:	2800      	cmp	r0, #0
 800495c:	d1c6      	bne.n	80048ec <_platform_observer_node_exec_cb+0x60>
 800495e:	e7e6      	b.n	800492e <_platform_observer_node_exec_cb+0xa2>
 8004960:	68a1      	ldr	r1, [r4, #8]
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	0789      	lsls	r1, r1, #30
 8004966:	d5de      	bpl.n	8004926 <_platform_observer_node_exec_cb+0x9a>
 8004968:	f8ad 2000 	strh.w	r2, [sp]
 800496c:	885a      	ldrh	r2, [r3, #2]
 800496e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	6860      	ldr	r0, [r4, #4]
 8004978:	f8ad 2002 	strh.w	r2, [sp, #2]
 800497c:	2400      	movs	r4, #0
 800497e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004982:	4639      	mov	r1, r7
 8004984:	466a      	mov	r2, sp
 8004986:	47a8      	blx	r5
 8004988:	4620      	mov	r0, r4
 800498a:	e7cd      	b.n	8004928 <_platform_observer_node_exec_cb+0x9c>
 800498c:	2001      	movs	r0, #1
 800498e:	4770      	bx	lr
 8004990:	2001      	movs	r0, #1
 8004992:	b005      	add	sp, #20
 8004994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004998:	2000      	movs	r0, #0
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	81a0      	strh	r0, [r4, #12]
 800499e:	b005      	add	sp, #20
 80049a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080049a4 <_ai_platform_acquire_crc>:
 80049a4:	2001      	movs	r0, #1
 80049a6:	4770      	bx	lr

080049a8 <_ai_platform_release_crc>:
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <ai_platform_get_weights_map>:
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d037      	beq.n	8004a20 <ai_platform_get_weights_map+0x74>
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	b1a0      	cbz	r0, 80049e0 <ai_platform_get_weights_map+0x34>
 80049b6:	460f      	mov	r7, r1
 80049b8:	b191      	cbz	r1, 80049e0 <ai_platform_get_weights_map+0x34>
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <ai_platform_get_weights_map+0xa4>)
 80049bc:	6810      	ldr	r0, [r2, #0]
 80049be:	4298      	cmp	r0, r3
 80049c0:	4615      	mov	r5, r2
 80049c2:	d00f      	beq.n	80049e4 <ai_platform_get_weights_map+0x38>
 80049c4:	6855      	ldr	r5, [r2, #4]
 80049c6:	b15d      	cbz	r5, 80049e0 <ai_platform_get_weights_map+0x34>
 80049c8:	682e      	ldr	r6, [r5, #0]
 80049ca:	429e      	cmp	r6, r3
 80049cc:	d02a      	beq.n	8004a24 <ai_platform_get_weights_map+0x78>
 80049ce:	f1a1 0001 	sub.w	r0, r1, #1
 80049d2:	6025      	str	r5, [r4, #0]
 80049d4:	fab0 f080 	clz	r0, r0
 80049d8:	0940      	lsrs	r0, r0, #5
 80049da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049dc:	42a7      	cmp	r7, r4
 80049de:	d034      	beq.n	8004a4a <ai_platform_get_weights_map+0x9e>
 80049e0:	2000      	movs	r0, #0
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	1d10      	adds	r0, r2, #4
 80049e6:	f7ff ff37 	bl	8004858 <ai_buffer_array_sane>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d0f8      	beq.n	80049e0 <ai_platform_get_weights_map+0x34>
 80049ee:	88eb      	ldrh	r3, [r5, #6]
 80049f0:	429f      	cmp	r7, r3
 80049f2:	d1f5      	bne.n	80049e0 <ai_platform_get_weights_map+0x34>
 80049f4:	f04f 0e00 	mov.w	lr, #0
 80049f8:	1f23      	subs	r3, r4, #4
 80049fa:	4670      	mov	r0, lr
 80049fc:	68aa      	ldr	r2, [r5, #8]
 80049fe:	eb02 0c0e 	add.w	ip, r2, lr
 8004a02:	f10e 0e1c 	add.w	lr, lr, #28
 8004a06:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004a0a:	b124      	cbz	r4, 8004a16 <ai_platform_get_weights_map+0x6a>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	4287      	cmp	r7, r0
 8004a10:	f843 4f04 	str.w	r4, [r3, #4]!
 8004a14:	d1f2      	bne.n	80049fc <ai_platform_get_weights_map+0x50>
 8004a16:	1a38      	subs	r0, r7, r0
 8004a18:	fab0 f080 	clz	r0, r0
 8004a1c:	0940      	lsrs	r0, r0, #5
 8004a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a20:	2000      	movs	r0, #0
 8004a22:	4770      	bx	lr
 8004a24:	1f23      	subs	r3, r4, #4
 8004a26:	4628      	mov	r0, r5
 8004a28:	2400      	movs	r4, #0
 8004a2a:	e000      	b.n	8004a2e <ai_platform_get_weights_map+0x82>
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004a32:	42b2      	cmp	r2, r6
 8004a34:	d0d2      	beq.n	80049dc <ai_platform_get_weights_map+0x30>
 8004a36:	f843 2f04 	str.w	r2, [r3, #4]!
 8004a3a:	1c62      	adds	r2, r4, #1
 8004a3c:	4297      	cmp	r7, r2
 8004a3e:	d1f5      	bne.n	8004a2c <ai_platform_get_weights_map+0x80>
 8004a40:	3402      	adds	r4, #2
 8004a42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004a46:	42b3      	cmp	r3, r6
 8004a48:	d1ca      	bne.n	80049e0 <ai_platform_get_weights_map+0x34>
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	a1facade 	.word	0xa1facade

08004a54 <ai_platform_get_activations_map>:
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	d038      	beq.n	8004aca <ai_platform_get_activations_map+0x76>
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	b1a0      	cbz	r0, 8004a88 <ai_platform_get_activations_map+0x34>
 8004a5e:	460f      	mov	r7, r1
 8004a60:	b191      	cbz	r1, 8004a88 <ai_platform_get_activations_map+0x34>
 8004a62:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <ai_platform_get_activations_map+0xa4>)
 8004a64:	6810      	ldr	r0, [r2, #0]
 8004a66:	4298      	cmp	r0, r3
 8004a68:	4615      	mov	r5, r2
 8004a6a:	d00f      	beq.n	8004a8c <ai_platform_get_activations_map+0x38>
 8004a6c:	6a15      	ldr	r5, [r2, #32]
 8004a6e:	b15d      	cbz	r5, 8004a88 <ai_platform_get_activations_map+0x34>
 8004a70:	682e      	ldr	r6, [r5, #0]
 8004a72:	429e      	cmp	r6, r3
 8004a74:	d02b      	beq.n	8004ace <ai_platform_get_activations_map+0x7a>
 8004a76:	f1a1 0001 	sub.w	r0, r1, #1
 8004a7a:	6025      	str	r5, [r4, #0]
 8004a7c:	fab0 f080 	clz	r0, r0
 8004a80:	0940      	lsrs	r0, r0, #5
 8004a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a84:	42a7      	cmp	r7, r4
 8004a86:	d035      	beq.n	8004af4 <ai_platform_get_activations_map+0xa0>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	f102 000c 	add.w	r0, r2, #12
 8004a90:	f7ff fee2 	bl	8004858 <ai_buffer_array_sane>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d0f7      	beq.n	8004a88 <ai_platform_get_activations_map+0x34>
 8004a98:	89eb      	ldrh	r3, [r5, #14]
 8004a9a:	429f      	cmp	r7, r3
 8004a9c:	d1f4      	bne.n	8004a88 <ai_platform_get_activations_map+0x34>
 8004a9e:	f04f 0e00 	mov.w	lr, #0
 8004aa2:	1f23      	subs	r3, r4, #4
 8004aa4:	4670      	mov	r0, lr
 8004aa6:	692a      	ldr	r2, [r5, #16]
 8004aa8:	eb02 0c0e 	add.w	ip, r2, lr
 8004aac:	f10e 0e1c 	add.w	lr, lr, #28
 8004ab0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004ab4:	b124      	cbz	r4, 8004ac0 <ai_platform_get_activations_map+0x6c>
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	4287      	cmp	r7, r0
 8004aba:	f843 4f04 	str.w	r4, [r3, #4]!
 8004abe:	d1f2      	bne.n	8004aa6 <ai_platform_get_activations_map+0x52>
 8004ac0:	1a38      	subs	r0, r7, r0
 8004ac2:	fab0 f080 	clz	r0, r0
 8004ac6:	0940      	lsrs	r0, r0, #5
 8004ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aca:	2000      	movs	r0, #0
 8004acc:	4770      	bx	lr
 8004ace:	1f23      	subs	r3, r4, #4
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	2400      	movs	r4, #0
 8004ad4:	e000      	b.n	8004ad8 <ai_platform_get_activations_map+0x84>
 8004ad6:	4614      	mov	r4, r2
 8004ad8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004adc:	42b2      	cmp	r2, r6
 8004ade:	d0d1      	beq.n	8004a84 <ai_platform_get_activations_map+0x30>
 8004ae0:	f843 2f04 	str.w	r2, [r3, #4]!
 8004ae4:	1c62      	adds	r2, r4, #1
 8004ae6:	4297      	cmp	r7, r2
 8004ae8:	d1f5      	bne.n	8004ad6 <ai_platform_get_activations_map+0x82>
 8004aea:	3402      	adds	r4, #2
 8004aec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004af0:	42b3      	cmp	r3, r6
 8004af2:	d1c9      	bne.n	8004a88 <ai_platform_get_activations_map+0x34>
 8004af4:	2001      	movs	r0, #1
 8004af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af8:	a1facade 	.word	0xa1facade

08004afc <ai_platform_bind_network_params>:
 8004afc:	b1a0      	cbz	r0, 8004b28 <ai_platform_bind_network_params+0x2c>
 8004afe:	b1b1      	cbz	r1, 8004b2e <ai_platform_bind_network_params+0x32>
 8004b00:	b1c2      	cbz	r2, 8004b34 <ai_platform_bind_network_params+0x38>
 8004b02:	b410      	push	{r4}
 8004b04:	4603      	mov	r3, r0
 8004b06:	4c0d      	ldr	r4, [pc, #52]	; (8004b3c <ai_platform_bind_network_params+0x40>)
 8004b08:	f843 4b04 	str.w	r4, [r3], #4
 8004b0c:	f100 0c0c 	add.w	ip, r0, #12
 8004b10:	c903      	ldmia	r1, {r0, r1}
 8004b12:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b1a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	4770      	bx	lr
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4618      	mov	r0, r3
 8004b32:	4770      	bx	lr
 8004b34:	4613      	mov	r3, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	a1facade 	.word	0xa1facade

08004b40 <ai_platform_runtime_get_revision>:
 8004b40:	b508      	push	{r3, lr}
 8004b42:	f7ff ff2f 	bl	80049a4 <_ai_platform_acquire_crc>
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <ai_platform_runtime_get_revision+0x58>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	d010      	beq.n	8004b76 <ai_platform_runtime_get_revision+0x36>
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <ai_platform_runtime_get_revision+0x5c>)
 8004b56:	2301      	movs	r3, #1
 8004b58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1fb      	bne.n	8004b5c <ai_platform_runtime_get_revision+0x1c>
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <ai_platform_runtime_get_revision+0x60>)
 8004b66:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <ai_platform_runtime_get_revision+0x64>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d00c      	beq.n	8004b8e <ai_platform_runtime_get_revision+0x4e>
 8004b74:	e7fe      	b.n	8004b74 <ai_platform_runtime_get_revision+0x34>
 8004b76:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <ai_platform_runtime_get_revision+0x68>)
 8004b78:	2301      	movs	r3, #1
 8004b7a:	6093      	str	r3, [r2, #8]
 8004b7c:	6893      	ldr	r3, [r2, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1fc      	bne.n	8004b7c <ai_platform_runtime_get_revision+0x3c>
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <ai_platform_runtime_get_revision+0x60>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <ai_platform_runtime_get_revision+0x64>)
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d103      	bne.n	8004b96 <ai_platform_runtime_get_revision+0x56>
 8004b8e:	f7ff ff0b 	bl	80049a8 <_ai_platform_release_crc>
 8004b92:	4806      	ldr	r0, [pc, #24]	; (8004bac <ai_platform_runtime_get_revision+0x6c>)
 8004b94:	bd08      	pop	{r3, pc}
 8004b96:	e7fe      	b.n	8004b96 <ai_platform_runtime_get_revision+0x56>
 8004b98:	e0042000 	.word	0xe0042000
 8004b9c:	58024000 	.word	0x58024000
 8004ba0:	f407a5c2 	.word	0xf407a5c2
 8004ba4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ba8:	40023000 	.word	0x40023000
 8004bac:	0800bc7c 	.word	0x0800bc7c

08004bb0 <ai_platform_runtime_get_version>:
 8004bb0:	b500      	push	{lr}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	f7ff fef6 	bl	80049a4 <_ai_platform_acquire_crc>
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <ai_platform_runtime_get_version+0x80>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc4:	d010      	beq.n	8004be8 <ai_platform_runtime_get_version+0x38>
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <ai_platform_runtime_get_version+0x84>)
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004bce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1fb      	bne.n	8004bce <ai_platform_runtime_get_version+0x1e>
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <ai_platform_runtime_get_version+0x88>)
 8004bd8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004bdc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <ai_platform_runtime_get_version+0x8c>)
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d00c      	beq.n	8004c00 <ai_platform_runtime_get_version+0x50>
 8004be6:	e7fe      	b.n	8004be6 <ai_platform_runtime_get_version+0x36>
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <ai_platform_runtime_get_version+0x90>)
 8004bea:	2301      	movs	r3, #1
 8004bec:	6093      	str	r3, [r2, #8]
 8004bee:	6893      	ldr	r3, [r2, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1fc      	bne.n	8004bee <ai_platform_runtime_get_version+0x3e>
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <ai_platform_runtime_get_version+0x88>)
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <ai_platform_runtime_get_version+0x8c>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d115      	bne.n	8004c2c <ai_platform_runtime_get_version+0x7c>
 8004c00:	f7ff fed2 	bl	80049a8 <_ai_platform_release_crc>
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <ai_platform_runtime_get_version+0x94>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2000      	movs	r0, #0
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	f362 0007 	bfi	r0, r2, #0, #8
 8004c10:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004c14:	f362 200f 	bfi	r0, r2, #8, #8
 8004c18:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004c1c:	f362 4017 	bfi	r0, r2, #16, #8
 8004c20:	0e1b      	lsrs	r3, r3, #24
 8004c22:	f363 601f 	bfi	r0, r3, #24, #8
 8004c26:	b003      	add	sp, #12
 8004c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c2c:	e7fe      	b.n	8004c2c <ai_platform_runtime_get_version+0x7c>
 8004c2e:	bf00      	nop
 8004c30:	e0042000 	.word	0xe0042000
 8004c34:	58024000 	.word	0x58024000
 8004c38:	f407a5c2 	.word	0xf407a5c2
 8004c3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c40:	40023000 	.word	0x40023000
 8004c44:	0800bc30 	.word	0x0800bc30

08004c48 <ai_platform_api_get_version>:
 8004c48:	b500      	push	{lr}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	f7ff feaa 	bl	80049a4 <_ai_platform_acquire_crc>
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <ai_platform_api_get_version+0x80>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d010      	beq.n	8004c80 <ai_platform_api_get_version+0x38>
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <ai_platform_api_get_version+0x84>)
 8004c60:	2301      	movs	r3, #1
 8004c62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1fb      	bne.n	8004c66 <ai_platform_api_get_version+0x1e>
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <ai_platform_api_get_version+0x88>)
 8004c70:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c74:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <ai_platform_api_get_version+0x8c>)
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d00c      	beq.n	8004c98 <ai_platform_api_get_version+0x50>
 8004c7e:	e7fe      	b.n	8004c7e <ai_platform_api_get_version+0x36>
 8004c80:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <ai_platform_api_get_version+0x90>)
 8004c82:	2301      	movs	r3, #1
 8004c84:	6093      	str	r3, [r2, #8]
 8004c86:	6893      	ldr	r3, [r2, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1fc      	bne.n	8004c86 <ai_platform_api_get_version+0x3e>
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <ai_platform_api_get_version+0x88>)
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <ai_platform_api_get_version+0x8c>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d115      	bne.n	8004cc4 <ai_platform_api_get_version+0x7c>
 8004c98:	f7ff fe86 	bl	80049a8 <_ai_platform_release_crc>
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <ai_platform_api_get_version+0x94>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	f362 0007 	bfi	r0, r2, #0, #8
 8004ca8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004cac:	f362 200f 	bfi	r0, r2, #8, #8
 8004cb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004cb4:	f362 4017 	bfi	r0, r2, #16, #8
 8004cb8:	0e1b      	lsrs	r3, r3, #24
 8004cba:	f363 601f 	bfi	r0, r3, #24, #8
 8004cbe:	b003      	add	sp, #12
 8004cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cc4:	e7fe      	b.n	8004cc4 <ai_platform_api_get_version+0x7c>
 8004cc6:	bf00      	nop
 8004cc8:	e0042000 	.word	0xe0042000
 8004ccc:	58024000 	.word	0x58024000
 8004cd0:	f407a5c2 	.word	0xf407a5c2
 8004cd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004cd8:	40023000 	.word	0x40023000
 8004cdc:	0800bc34 	.word	0x0800bc34

08004ce0 <ai_platform_interface_api_get_version>:
 8004ce0:	b500      	push	{lr}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	f7ff fe5e 	bl	80049a4 <_ai_platform_acquire_crc>
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <ai_platform_interface_api_get_version+0x80>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d010      	beq.n	8004d18 <ai_platform_interface_api_get_version+0x38>
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <ai_platform_interface_api_get_version+0x84>)
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004cfe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1fb      	bne.n	8004cfe <ai_platform_interface_api_get_version+0x1e>
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <ai_platform_interface_api_get_version+0x88>)
 8004d08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d10:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <ai_platform_interface_api_get_version+0x8c>)
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d00c      	beq.n	8004d30 <ai_platform_interface_api_get_version+0x50>
 8004d16:	e7fe      	b.n	8004d16 <ai_platform_interface_api_get_version+0x36>
 8004d18:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <ai_platform_interface_api_get_version+0x90>)
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	6893      	ldr	r3, [r2, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1fc      	bne.n	8004d1e <ai_platform_interface_api_get_version+0x3e>
 8004d24:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <ai_platform_interface_api_get_version+0x88>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <ai_platform_interface_api_get_version+0x8c>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d115      	bne.n	8004d5c <ai_platform_interface_api_get_version+0x7c>
 8004d30:	f7ff fe3a 	bl	80049a8 <_ai_platform_release_crc>
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <ai_platform_interface_api_get_version+0x94>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	f362 0007 	bfi	r0, r2, #0, #8
 8004d40:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004d44:	f362 200f 	bfi	r0, r2, #8, #8
 8004d48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004d4c:	f362 4017 	bfi	r0, r2, #16, #8
 8004d50:	0e1b      	lsrs	r3, r3, #24
 8004d52:	f363 601f 	bfi	r0, r3, #24, #8
 8004d56:	b003      	add	sp, #12
 8004d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d5c:	e7fe      	b.n	8004d5c <ai_platform_interface_api_get_version+0x7c>
 8004d5e:	bf00      	nop
 8004d60:	e0042000 	.word	0xe0042000
 8004d64:	58024000 	.word	0x58024000
 8004d68:	f407a5c2 	.word	0xf407a5c2
 8004d6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004d70:	40023000 	.word	0x40023000
 8004d74:	0800bc38 	.word	0x0800bc38

08004d78 <ai_platform_context_acquire>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	b120      	cbz	r0, 8004d88 <ai_platform_context_acquire+0x10>
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <ai_platform_context_acquire+0x68>)
 8004d80:	6802      	ldr	r2, [r0, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	bf18      	it	ne
 8004d86:	2400      	movne	r4, #0
 8004d88:	f7ff fe0c 	bl	80049a4 <_ai_platform_acquire_crc>
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <ai_platform_context_acquire+0x6c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d98:	d010      	beq.n	8004dbc <ai_platform_context_acquire+0x44>
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <ai_platform_context_acquire+0x70>)
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004da2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1fb      	bne.n	8004da2 <ai_platform_context_acquire+0x2a>
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <ai_platform_context_acquire+0x74>)
 8004dac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004db0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <ai_platform_context_acquire+0x78>)
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00c      	beq.n	8004dd4 <ai_platform_context_acquire+0x5c>
 8004dba:	e7fe      	b.n	8004dba <ai_platform_context_acquire+0x42>
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <ai_platform_context_acquire+0x7c>)
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	6093      	str	r3, [r2, #8]
 8004dc2:	6893      	ldr	r3, [r2, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1fc      	bne.n	8004dc2 <ai_platform_context_acquire+0x4a>
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <ai_platform_context_acquire+0x74>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <ai_platform_context_acquire+0x78>)
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d103      	bne.n	8004ddc <ai_platform_context_acquire+0x64>
 8004dd4:	f7ff fde8 	bl	80049a8 <_ai_platform_release_crc>
 8004dd8:	4620      	mov	r0, r4
 8004dda:	bd10      	pop	{r4, pc}
 8004ddc:	e7fe      	b.n	8004ddc <ai_platform_context_acquire+0x64>
 8004dde:	bf00      	nop
 8004de0:	a1c00100 	.word	0xa1c00100
 8004de4:	e0042000 	.word	0xe0042000
 8004de8:	58024000 	.word	0x58024000
 8004dec:	f407a5c2 	.word	0xf407a5c2
 8004df0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004df4:	40023000 	.word	0x40023000

08004df8 <ai_platform_network_get_error>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	b1f0      	cbz	r0, 8004e3a <ai_platform_network_get_error+0x42>
 8004dfc:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <ai_platform_network_get_error+0xc4>)
 8004dfe:	6802      	ldr	r2, [r0, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	4604      	mov	r4, r0
 8004e04:	d119      	bne.n	8004e3a <ai_platform_network_get_error+0x42>
 8004e06:	f7ff fdcd 	bl	80049a4 <_ai_platform_acquire_crc>
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <ai_platform_network_get_error+0xc8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d03c      	beq.n	8004e92 <ai_platform_network_get_error+0x9a>
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <ai_platform_network_get_error+0xcc>)
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1fb      	bne.n	8004e20 <ai_platform_network_get_error+0x28>
 8004e28:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <ai_platform_network_get_error+0xd0>)
 8004e2a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e32:	4b26      	ldr	r3, [pc, #152]	; (8004ecc <ai_platform_network_get_error+0xd4>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d038      	beq.n	8004eaa <ai_platform_network_get_error+0xb2>
 8004e38:	e7fe      	b.n	8004e38 <ai_platform_network_get_error+0x40>
 8004e3a:	f7ff fdb3 	bl	80049a4 <_ai_platform_acquire_crc>
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <ai_platform_network_get_error+0xc8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d010      	beq.n	8004e6e <ai_platform_network_get_error+0x76>
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <ai_platform_network_get_error+0xcc>)
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1fb      	bne.n	8004e54 <ai_platform_network_get_error+0x5c>
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <ai_platform_network_get_error+0xd0>)
 8004e5e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e62:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e66:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <ai_platform_network_get_error+0xd4>)
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d00d      	beq.n	8004e88 <ai_platform_network_get_error+0x90>
 8004e6c:	e7fe      	b.n	8004e6c <ai_platform_network_get_error+0x74>
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <ai_platform_network_get_error+0xd8>)
 8004e70:	2301      	movs	r3, #1
 8004e72:	6093      	str	r3, [r2, #8]
 8004e74:	6893      	ldr	r3, [r2, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1fc      	bne.n	8004e74 <ai_platform_network_get_error+0x7c>
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <ai_platform_network_get_error+0xd0>)
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <ai_platform_network_get_error+0xd4>)
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d000      	beq.n	8004e88 <ai_platform_network_get_error+0x90>
 8004e86:	e7fe      	b.n	8004e86 <ai_platform_network_get_error+0x8e>
 8004e88:	f7ff fd8e 	bl	80049a8 <_ai_platform_release_crc>
 8004e8c:	f241 0010 	movw	r0, #4112	; 0x1010
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <ai_platform_network_get_error+0xd8>)
 8004e94:	2301      	movs	r3, #1
 8004e96:	6093      	str	r3, [r2, #8]
 8004e98:	6893      	ldr	r3, [r2, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1fc      	bne.n	8004e98 <ai_platform_network_get_error+0xa0>
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <ai_platform_network_get_error+0xd0>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <ai_platform_network_get_error+0xd4>)
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d107      	bne.n	8004eba <ai_platform_network_get_error+0xc2>
 8004eaa:	f7ff fd7d 	bl	80049a8 <_ai_platform_release_crc>
 8004eae:	f104 0010 	add.w	r0, r4, #16
 8004eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb6:	f001 b9cd 	b.w	8006254 <core_get_error>
 8004eba:	e7fe      	b.n	8004eba <ai_platform_network_get_error+0xc2>
 8004ebc:	a1c00100 	.word	0xa1c00100
 8004ec0:	e0042000 	.word	0xe0042000
 8004ec4:	58024000 	.word	0x58024000
 8004ec8:	f407a5c2 	.word	0xf407a5c2
 8004ecc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ed0:	40023000 	.word	0x40023000

08004ed4 <ai_platform_network_set_error>:
 8004ed4:	b110      	cbz	r0, 8004edc <ai_platform_network_set_error+0x8>
 8004ed6:	3010      	adds	r0, #16
 8004ed8:	f001 b9c2 	b.w	8006260 <core_set_error>
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <ai_platform_api_get_network_report>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	b1f8      	cbz	r0, 8004f28 <ai_platform_api_get_network_report+0x48>
 8004ee8:	4b95      	ldr	r3, [pc, #596]	; (8005140 <ai_platform_api_get_network_report+0x260>)
 8004eea:	6802      	ldr	r2, [r0, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	4607      	mov	r7, r0
 8004ef0:	d11a      	bne.n	8004f28 <ai_platform_api_get_network_report+0x48>
 8004ef2:	468b      	mov	fp, r1
 8004ef4:	f7ff fd56 	bl	80049a4 <_ai_platform_acquire_crc>
 8004ef8:	4b92      	ldr	r3, [pc, #584]	; (8005144 <ai_platform_api_get_network_report+0x264>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	d03e      	beq.n	8004f84 <ai_platform_api_get_network_report+0xa4>
 8004f06:	4a90      	ldr	r2, [pc, #576]	; (8005148 <ai_platform_api_get_network_report+0x268>)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f0e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1fb      	bne.n	8004f0e <ai_platform_api_get_network_report+0x2e>
 8004f16:	4b8d      	ldr	r3, [pc, #564]	; (800514c <ai_platform_api_get_network_report+0x26c>)
 8004f18:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f20:	4b8b      	ldr	r3, [pc, #556]	; (8005150 <ai_platform_api_get_network_report+0x270>)
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d03a      	beq.n	8004f9c <ai_platform_api_get_network_report+0xbc>
 8004f26:	e7fe      	b.n	8004f26 <ai_platform_api_get_network_report+0x46>
 8004f28:	f7ff fd3c 	bl	80049a4 <_ai_platform_acquire_crc>
 8004f2c:	4b85      	ldr	r3, [pc, #532]	; (8005144 <ai_platform_api_get_network_report+0x264>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f38:	d010      	beq.n	8004f5c <ai_platform_api_get_network_report+0x7c>
 8004f3a:	4a83      	ldr	r2, [pc, #524]	; (8005148 <ai_platform_api_get_network_report+0x268>)
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f42:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1fb      	bne.n	8004f42 <ai_platform_api_get_network_report+0x62>
 8004f4a:	4b80      	ldr	r3, [pc, #512]	; (800514c <ai_platform_api_get_network_report+0x26c>)
 8004f4c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f54:	4b7e      	ldr	r3, [pc, #504]	; (8005150 <ai_platform_api_get_network_report+0x270>)
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d00d      	beq.n	8004f76 <ai_platform_api_get_network_report+0x96>
 8004f5a:	e7fe      	b.n	8004f5a <ai_platform_api_get_network_report+0x7a>
 8004f5c:	4a7d      	ldr	r2, [pc, #500]	; (8005154 <ai_platform_api_get_network_report+0x274>)
 8004f5e:	2301      	movs	r3, #1
 8004f60:	6093      	str	r3, [r2, #8]
 8004f62:	6893      	ldr	r3, [r2, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1fc      	bne.n	8004f62 <ai_platform_api_get_network_report+0x82>
 8004f68:	4b78      	ldr	r3, [pc, #480]	; (800514c <ai_platform_api_get_network_report+0x26c>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	4b78      	ldr	r3, [pc, #480]	; (8005150 <ai_platform_api_get_network_report+0x270>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d000      	beq.n	8004f76 <ai_platform_api_get_network_report+0x96>
 8004f74:	e7fe      	b.n	8004f74 <ai_platform_api_get_network_report+0x94>
 8004f76:	f7ff fd17 	bl	80049a8 <_ai_platform_release_crc>
 8004f7a:	2400      	movs	r4, #0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	b007      	add	sp, #28
 8004f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f84:	4a73      	ldr	r2, [pc, #460]	; (8005154 <ai_platform_api_get_network_report+0x274>)
 8004f86:	2301      	movs	r3, #1
 8004f88:	6093      	str	r3, [r2, #8]
 8004f8a:	6893      	ldr	r3, [r2, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1fc      	bne.n	8004f8a <ai_platform_api_get_network_report+0xaa>
 8004f90:	4b6e      	ldr	r3, [pc, #440]	; (800514c <ai_platform_api_get_network_report+0x26c>)
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	4b6e      	ldr	r3, [pc, #440]	; (8005150 <ai_platform_api_get_network_report+0x270>)
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d112      	bne.n	8004fc2 <ai_platform_api_get_network_report+0xe2>
 8004f9c:	f7ff fd04 	bl	80049a8 <_ai_platform_release_crc>
 8004fa0:	f1bb 0f00 	cmp.w	fp, #0
 8004fa4:	d0e9      	beq.n	8004f7a <ai_platform_api_get_network_report+0x9a>
 8004fa6:	2400      	movs	r4, #0
 8004fa8:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	b14b      	cbz	r3, 8004fc4 <ai_platform_api_get_network_report+0xe4>
 8004fb0:	3401      	adds	r4, #1
 8004fb2:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d003      	beq.n	8004fc4 <ai_platform_api_get_network_report+0xe4>
 8004fbc:	b112      	cbz	r2, 8004fc4 <ai_platform_api_get_network_report+0xe4>
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	e7f5      	b.n	8004fae <ai_platform_api_get_network_report+0xce>
 8004fc2:	e7fe      	b.n	8004fc2 <ai_platform_api_get_network_report+0xe2>
 8004fc4:	2c00      	cmp	r4, #0
 8004fc6:	f000 819e 	beq.w	8005306 <ai_platform_api_get_network_report+0x426>
 8004fca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d04e      	beq.n	800506e <ai_platform_api_get_network_report+0x18e>
 8004fd0:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8004fd4:	f1b9 0f00 	cmp.w	r9, #0
 8004fd8:	d049      	beq.n	800506e <ai_platform_api_get_network_report+0x18e>
 8004fda:	f04f 0a00 	mov.w	sl, #0
 8004fde:	e9cd 7b00 	strd	r7, fp, [sp]
 8004fe2:	4655      	mov	r5, sl
 8004fe4:	e016      	b.n	8005014 <ai_platform_api_get_network_report+0x134>
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	f847 100e 	str.w	r1, [r7, lr]
 8004fec:	69b1      	ldr	r1, [r6, #24]
 8004fee:	6849      	ldr	r1, [r1, #4]
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	f04f 0301 	mov.w	r3, #1
 8004ff6:	7523      	strb	r3, [r4, #20]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60e3      	str	r3, [r4, #12]
 8004ffc:	6963      	ldr	r3, [r4, #20]
 8004ffe:	6121      	str	r1, [r4, #16]
 8005000:	e9c4 0200 	strd	r0, r2, [r4]
 8005004:	f368 231f 	bfi	r3, r8, #8, #24
 8005008:	f8c4 b018 	str.w	fp, [r4, #24]
 800500c:	3501      	adds	r5, #1
 800500e:	f10a 0a1c 	add.w	sl, sl, #28
 8005012:	6163      	str	r3, [r4, #20]
 8005014:	f8b9 3000 	ldrh.w	r3, [r9]
 8005018:	42ab      	cmp	r3, r5
 800501a:	b2aa      	uxth	r2, r5
 800501c:	d933      	bls.n	8005086 <ai_platform_api_get_network_report+0x1a6>
 800501e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005022:	b383      	cbz	r3, 8005086 <ai_platform_api_get_network_report+0x1a6>
 8005024:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005028:	b36e      	cbz	r6, 8005086 <ai_platform_api_get_network_report+0x1a6>
 800502a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800502e:	69b2      	ldr	r2, [r6, #24]
 8005030:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005034:	6810      	ldr	r0, [r2, #0]
 8005036:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800503a:	68b3      	ldr	r3, [r6, #8]
 800503c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005040:	f002 f820 	bl	8007084 <ai_array_to_buffer_fmt>
 8005044:	69b1      	ldr	r1, [r6, #24]
 8005046:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800504a:	688a      	ldr	r2, [r1, #8]
 800504c:	4454      	add	r4, sl
 800504e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0cb      	beq.n	8004fee <ai_platform_api_get_network_report+0x10e>
 8005056:	2100      	movs	r1, #0
 8005058:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800505c:	6831      	ldr	r1, [r6, #0]
 800505e:	6059      	str	r1, [r3, #4]
 8005060:	b111      	cbz	r1, 8005068 <ai_platform_api_get_network_report+0x188>
 8005062:	8849      	ldrh	r1, [r1, #2]
 8005064:	2900      	cmp	r1, #0
 8005066:	d1be      	bne.n	8004fe6 <ai_platform_api_get_network_report+0x106>
 8005068:	69b1      	ldr	r1, [r6, #24]
 800506a:	2300      	movs	r3, #0
 800506c:	e7bf      	b.n	8004fee <ai_platform_api_get_network_report+0x10e>
 800506e:	2400      	movs	r4, #0
 8005070:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 8005074:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 8005078:	2218      	movs	r2, #24
 800507a:	2112      	movs	r1, #18
 800507c:	f107 0010 	add.w	r0, r7, #16
 8005080:	f001 f8ee 	bl	8006260 <core_set_error>
 8005084:	e77a      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 8005086:	e9dd 7b00 	ldrd	r7, fp, [sp]
 800508a:	2a00      	cmp	r2, #0
 800508c:	d0ef      	beq.n	800506e <ai_platform_api_get_network_report+0x18e>
 800508e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8005098:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 800509c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	f240 8125 	bls.w	80052ee <ai_platform_api_get_network_report+0x40e>
 80050a4:	f04f 0a00 	mov.w	sl, #0
 80050a8:	e9cd 7b00 	strd	r7, fp, [sp]
 80050ac:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80050b0:	4655      	mov	r5, sl
 80050b2:	e016      	b.n	80050e2 <ai_platform_api_get_network_report+0x202>
 80050b4:	2101      	movs	r1, #1
 80050b6:	f847 100e 	str.w	r1, [r7, lr]
 80050ba:	69b1      	ldr	r1, [r6, #24]
 80050bc:	6849      	ldr	r1, [r1, #4]
 80050be:	60a3      	str	r3, [r4, #8]
 80050c0:	f04f 0301 	mov.w	r3, #1
 80050c4:	7523      	strb	r3, [r4, #20]
 80050c6:	2300      	movs	r3, #0
 80050c8:	60e3      	str	r3, [r4, #12]
 80050ca:	6963      	ldr	r3, [r4, #20]
 80050cc:	6121      	str	r1, [r4, #16]
 80050ce:	e9c4 0200 	strd	r0, r2, [r4]
 80050d2:	f368 231f 	bfi	r3, r8, #8, #24
 80050d6:	f8c4 b018 	str.w	fp, [r4, #24]
 80050da:	3501      	adds	r5, #1
 80050dc:	f10a 0a1c 	add.w	sl, sl, #28
 80050e0:	6163      	str	r3, [r4, #20]
 80050e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80050e6:	42ab      	cmp	r3, r5
 80050e8:	b2aa      	uxth	r2, r5
 80050ea:	d935      	bls.n	8005158 <ai_platform_api_get_network_report+0x278>
 80050ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d031      	beq.n	8005158 <ai_platform_api_get_network_report+0x278>
 80050f4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80050f8:	b376      	cbz	r6, 8005158 <ai_platform_api_get_network_report+0x278>
 80050fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80050fe:	69b2      	ldr	r2, [r6, #24]
 8005100:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005104:	6810      	ldr	r0, [r2, #0]
 8005106:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800510a:	68b3      	ldr	r3, [r6, #8]
 800510c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005110:	f001 ffb8 	bl	8007084 <ai_array_to_buffer_fmt>
 8005114:	69b1      	ldr	r1, [r6, #24]
 8005116:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800511a:	688a      	ldr	r2, [r1, #8]
 800511c:	4454      	add	r4, sl
 800511e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ca      	beq.n	80050bc <ai_platform_api_get_network_report+0x1dc>
 8005126:	2100      	movs	r1, #0
 8005128:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800512c:	6831      	ldr	r1, [r6, #0]
 800512e:	6059      	str	r1, [r3, #4]
 8005130:	b111      	cbz	r1, 8005138 <ai_platform_api_get_network_report+0x258>
 8005132:	8849      	ldrh	r1, [r1, #2]
 8005134:	2900      	cmp	r1, #0
 8005136:	d1bd      	bne.n	80050b4 <ai_platform_api_get_network_report+0x1d4>
 8005138:	69b1      	ldr	r1, [r6, #24]
 800513a:	2300      	movs	r3, #0
 800513c:	e7be      	b.n	80050bc <ai_platform_api_get_network_report+0x1dc>
 800513e:	bf00      	nop
 8005140:	a1c00100 	.word	0xa1c00100
 8005144:	e0042000 	.word	0xe0042000
 8005148:	58024000 	.word	0x58024000
 800514c:	f407a5c2 	.word	0xf407a5c2
 8005150:	b5e8b5cd 	.word	0xb5e8b5cd
 8005154:	40023000 	.word	0x40023000
 8005158:	e9dd 7b00 	ldrd	r7, fp, [sp]
 800515c:	2a00      	cmp	r2, #0
 800515e:	f000 80c6 	beq.w	80052ee <ai_platform_api_get_network_report+0x40e>
 8005162:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005166:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8005170:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 8005174:	4630      	mov	r0, r6
 8005176:	f7ff fb6f 	bl	8004858 <ai_buffer_array_sane>
 800517a:	4604      	mov	r4, r0
 800517c:	b938      	cbnz	r0, 800518e <ai_platform_api_get_network_report+0x2ae>
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff fb6a 	bl	8004858 <ai_buffer_array_sane>
 8005184:	b118      	cbz	r0, 800518e <ai_platform_api_get_network_report+0x2ae>
 8005186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005188:	2b00      	cmp	r3, #0
 800518a:	f040 80c5 	bne.w	8005318 <ai_platform_api_get_network_report+0x438>
 800518e:	f107 081c 	add.w	r8, r7, #28
 8005192:	4640      	mov	r0, r8
 8005194:	f7ff fb60 	bl	8004858 <ai_buffer_array_sane>
 8005198:	4604      	mov	r4, r0
 800519a:	b938      	cbnz	r0, 80051ac <ai_platform_api_get_network_report+0x2cc>
 800519c:	4640      	mov	r0, r8
 800519e:	f7ff fb5b 	bl	8004858 <ai_buffer_array_sane>
 80051a2:	b118      	cbz	r0, 80051ac <ai_platform_api_get_network_report+0x2cc>
 80051a4:	8bfb      	ldrh	r3, [r7, #30]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 80bd 	bne.w	8005326 <ai_platform_api_get_network_report+0x446>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 80051b2:	f7ff fbf7 	bl	80049a4 <_ai_platform_acquire_crc>
 80051b6:	4ba0      	ldr	r3, [pc, #640]	; (8005438 <ai_platform_api_get_network_report+0x558>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c2:	d010      	beq.n	80051e6 <ai_platform_api_get_network_report+0x306>
 80051c4:	4a9d      	ldr	r2, [pc, #628]	; (800543c <ai_platform_api_get_network_report+0x55c>)
 80051c6:	2301      	movs	r3, #1
 80051c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80051cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1fb      	bne.n	80051cc <ai_platform_api_get_network_report+0x2ec>
 80051d4:	4b9a      	ldr	r3, [pc, #616]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 80051d6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80051da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80051de:	4b99      	ldr	r3, [pc, #612]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d00d      	beq.n	8005200 <ai_platform_api_get_network_report+0x320>
 80051e4:	e7fe      	b.n	80051e4 <ai_platform_api_get_network_report+0x304>
 80051e6:	4a98      	ldr	r2, [pc, #608]	; (8005448 <ai_platform_api_get_network_report+0x568>)
 80051e8:	2301      	movs	r3, #1
 80051ea:	6093      	str	r3, [r2, #8]
 80051ec:	6893      	ldr	r3, [r2, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1fc      	bne.n	80051ec <ai_platform_api_get_network_report+0x30c>
 80051f2:	4b93      	ldr	r3, [pc, #588]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	4b92      	ldr	r3, [pc, #584]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f040 808a 	bne.w	8005314 <ai_platform_api_get_network_report+0x434>
 8005200:	f7ff fbd2 	bl	80049a8 <_ai_platform_release_crc>
 8005204:	4b91      	ldr	r3, [pc, #580]	; (800544c <ai_platform_api_get_network_report+0x56c>)
 8005206:	f8cb 3010 	str.w	r3, [fp, #16]
 800520a:	f7ff fbcb 	bl	80049a4 <_ai_platform_acquire_crc>
 800520e:	4b8a      	ldr	r3, [pc, #552]	; (8005438 <ai_platform_api_get_network_report+0x558>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d010      	beq.n	800523e <ai_platform_api_get_network_report+0x35e>
 800521c:	4b87      	ldr	r3, [pc, #540]	; (800543c <ai_platform_api_get_network_report+0x55c>)
 800521e:	2201      	movs	r2, #1
 8005220:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005224:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005228:	2a00      	cmp	r2, #0
 800522a:	d1fb      	bne.n	8005224 <ai_platform_api_get_network_report+0x344>
 800522c:	4a84      	ldr	r2, [pc, #528]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 800522e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005232:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005236:	4b83      	ldr	r3, [pc, #524]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d00c      	beq.n	8005256 <ai_platform_api_get_network_report+0x376>
 800523c:	e7fe      	b.n	800523c <ai_platform_api_get_network_report+0x35c>
 800523e:	4b82      	ldr	r3, [pc, #520]	; (8005448 <ai_platform_api_get_network_report+0x568>)
 8005240:	2201      	movs	r2, #1
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	2a00      	cmp	r2, #0
 8005248:	d1fc      	bne.n	8005244 <ai_platform_api_get_network_report+0x364>
 800524a:	4a7d      	ldr	r2, [pc, #500]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b7c      	ldr	r3, [pc, #496]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 8005252:	429a      	cmp	r2, r3
 8005254:	d15f      	bne.n	8005316 <ai_platform_api_get_network_report+0x436>
 8005256:	f7ff fba7 	bl	80049a8 <_ai_platform_release_crc>
 800525a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800525e:	f8cb 3014 	str.w	r3, [fp, #20]
 8005262:	f7ff fb9f 	bl	80049a4 <_ai_platform_acquire_crc>
 8005266:	4b74      	ldr	r3, [pc, #464]	; (8005438 <ai_platform_api_get_network_report+0x558>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005272:	d010      	beq.n	8005296 <ai_platform_api_get_network_report+0x3b6>
 8005274:	4b71      	ldr	r3, [pc, #452]	; (800543c <ai_platform_api_get_network_report+0x55c>)
 8005276:	2201      	movs	r2, #1
 8005278:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800527c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005280:	2a00      	cmp	r2, #0
 8005282:	d1fb      	bne.n	800527c <ai_platform_api_get_network_report+0x39c>
 8005284:	4a6e      	ldr	r2, [pc, #440]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 8005286:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800528a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d00c      	beq.n	80052ae <ai_platform_api_get_network_report+0x3ce>
 8005294:	e7fe      	b.n	8005294 <ai_platform_api_get_network_report+0x3b4>
 8005296:	4b6c      	ldr	r3, [pc, #432]	; (8005448 <ai_platform_api_get_network_report+0x568>)
 8005298:	2201      	movs	r2, #1
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	2a00      	cmp	r2, #0
 80052a0:	d1fc      	bne.n	800529c <ai_platform_api_get_network_report+0x3bc>
 80052a2:	4a67      	ldr	r2, [pc, #412]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b66      	ldr	r3, [pc, #408]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d142      	bne.n	8005334 <ai_platform_api_get_network_report+0x454>
 80052ae:	f7ff fb7b 	bl	80049a8 <_ai_platform_release_crc>
 80052b2:	f240 2301 	movw	r3, #513	; 0x201
 80052b6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 80052ba:	f7ff fb73 	bl	80049a4 <_ai_platform_acquire_crc>
 80052be:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <ai_platform_api_get_network_report+0x558>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d034      	beq.n	8005336 <ai_platform_api_get_network_report+0x456>
 80052cc:	4b5b      	ldr	r3, [pc, #364]	; (800543c <ai_platform_api_get_network_report+0x55c>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80052d4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d1fb      	bne.n	80052d4 <ai_platform_api_get_network_report+0x3f4>
 80052dc:	4a58      	ldr	r2, [pc, #352]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 80052de:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80052e2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80052e6:	4b57      	ldr	r3, [pc, #348]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d030      	beq.n	800534e <ai_platform_api_get_network_report+0x46e>
 80052ec:	e7fe      	b.n	80052ec <ai_platform_api_get_network_report+0x40c>
 80052ee:	2400      	movs	r4, #0
 80052f0:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 80052f4:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 80052f8:	2218      	movs	r2, #24
 80052fa:	2113      	movs	r1, #19
 80052fc:	f107 0010 	add.w	r0, r7, #16
 8005300:	f000 ffae 	bl	8006260 <core_set_error>
 8005304:	e63a      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 8005306:	2218      	movs	r2, #24
 8005308:	2111      	movs	r1, #17
 800530a:	f107 0010 	add.w	r0, r7, #16
 800530e:	f000 ffa7 	bl	8006260 <core_set_error>
 8005312:	e633      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 8005314:	e7fe      	b.n	8005314 <ai_platform_api_get_network_report+0x434>
 8005316:	e7fe      	b.n	8005316 <ai_platform_api_get_network_report+0x436>
 8005318:	2213      	movs	r2, #19
 800531a:	2111      	movs	r1, #17
 800531c:	f107 0010 	add.w	r0, r7, #16
 8005320:	f000 ff9e 	bl	8006260 <core_set_error>
 8005324:	e62a      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 8005326:	2212      	movs	r2, #18
 8005328:	2111      	movs	r1, #17
 800532a:	f107 0010 	add.w	r0, r7, #16
 800532e:	f000 ff97 	bl	8006260 <core_set_error>
 8005332:	e623      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 8005334:	e7fe      	b.n	8005334 <ai_platform_api_get_network_report+0x454>
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <ai_platform_api_get_network_report+0x568>)
 8005338:	2201      	movs	r2, #1
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	2a00      	cmp	r2, #0
 8005340:	d1fc      	bne.n	800533c <ai_platform_api_get_network_report+0x45c>
 8005342:	4a3f      	ldr	r2, [pc, #252]	; (8005440 <ai_platform_api_get_network_report+0x560>)
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b3e      	ldr	r3, [pc, #248]	; (8005444 <ai_platform_api_get_network_report+0x564>)
 800534a:	429a      	cmp	r2, r3
 800534c:	d14a      	bne.n	80053e4 <ai_platform_api_get_network_report+0x504>
 800534e:	f7ff fb2b 	bl	80049a8 <_ai_platform_release_crc>
 8005352:	f240 5301 	movw	r3, #1281	; 0x501
 8005356:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 800535a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800535c:	f001 ff3e 	bl	80071dc <ai_platform_version_get>
 8005360:	4b3b      	ldr	r3, [pc, #236]	; (8005450 <ai_platform_api_get_network_report+0x570>)
 8005362:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8005366:	f8cb 0020 	str.w	r0, [fp, #32]
 800536a:	429a      	cmp	r2, r3
 800536c:	d10d      	bne.n	800538a <ai_platform_api_get_network_report+0x4aa>
 800536e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005372:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8005376:	e882 0003 	stmia.w	r2, {r0, r1}
 800537a:	e898 0003 	ldmia.w	r8, {r0, r1}
 800537e:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 8005382:	e883 0003 	stmia.w	r3, {r0, r1}
 8005386:	2401      	movs	r4, #1
 8005388:	e5f8      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 800538a:	4a32      	ldr	r2, [pc, #200]	; (8005454 <ai_platform_api_get_network_report+0x574>)
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <ai_platform_api_get_network_report+0x578>)
 800538e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8005392:	2000      	movs	r0, #0
 8005394:	2100      	movs	r1, #0
 8005396:	f240 4201 	movw	r2, #1025	; 0x401
 800539a:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 800539e:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 80053a2:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 80053a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053a8:	f10d 0908 	add.w	r9, sp, #8
 80053ac:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 80053b0:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 80053b4:	46a6      	mov	lr, r4
 80053b6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 80053ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80053be:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 80053c2:	46ac      	mov	ip, r5
 80053c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053c8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80053cc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7ff fa41 	bl	8004858 <ai_buffer_array_sane>
 80053d6:	b990      	cbnz	r0, 80053fe <ai_platform_api_get_network_report+0x51e>
 80053d8:	4640      	mov	r0, r8
 80053da:	f7ff fa3d 	bl	8004858 <ai_buffer_array_sane>
 80053de:	b910      	cbnz	r0, 80053e6 <ai_platform_api_get_network_report+0x506>
 80053e0:	2401      	movs	r4, #1
 80053e2:	e5cb      	b.n	8004f7c <ai_platform_api_get_network_report+0x9c>
 80053e4:	e7fe      	b.n	80053e4 <ai_platform_api_get_network_report+0x504>
 80053e6:	4640      	mov	r0, r8
 80053e8:	f7ff fa36 	bl	8004858 <ai_buffer_array_sane>
 80053ec:	b198      	cbz	r0, 8005416 <ai_platform_api_get_network_report+0x536>
 80053ee:	6a3d      	ldr	r5, [r7, #32]
 80053f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053fc:	e7f0      	b.n	80053e0 <ai_platform_api_get_network_report+0x500>
 80053fe:	4630      	mov	r0, r6
 8005400:	f7ff fa2a 	bl	8004858 <ai_buffer_array_sane>
 8005404:	b178      	cbz	r0, 8005426 <ai_platform_api_get_network_report+0x546>
 8005406:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8005408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800540a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800540c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005410:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005414:	e7e0      	b.n	80053d8 <ai_platform_api_get_network_report+0x4f8>
 8005416:	4605      	mov	r5, r0
 8005418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800541c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005424:	deff      	udf	#255	; 0xff
 8005426:	4604      	mov	r4, r0
 8005428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800542a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800542c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005430:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005434:	deff      	udf	#255	; 0xff
 8005436:	bf00      	nop
 8005438:	e0042000 	.word	0xe0042000
 800543c:	58024000 	.word	0x58024000
 8005440:	f407a5c2 	.word	0xf407a5c2
 8005444:	b5e8b5cd 	.word	0xb5e8b5cd
 8005448:	40023000 	.word	0x40023000
 800544c:	0800bc7c 	.word	0x0800bc7c
 8005450:	a1facade 	.word	0xa1facade
 8005454:	00040440 	.word	0x00040440
 8005458:	0800ab7c 	.word	0x0800ab7c

0800545c <ai_platform_network_create>:
 800545c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005460:	b083      	sub	sp, #12
 8005462:	4606      	mov	r6, r0
 8005464:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005468:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800546c:	4615      	mov	r5, r2
 800546e:	461f      	mov	r7, r3
 8005470:	f7ff fa98 	bl	80049a4 <_ai_platform_acquire_crc>
 8005474:	b188      	cbz	r0, 800549a <ai_platform_network_create+0x3e>
 8005476:	4a5d      	ldr	r2, [pc, #372]	; (80055ec <ai_platform_network_create+0x190>)
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800547e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005482:	4603      	mov	r3, r0
 8005484:	d00e      	beq.n	80054a4 <ai_platform_network_create+0x48>
 8005486:	4a5a      	ldr	r2, [pc, #360]	; (80055f0 <ai_platform_network_create+0x194>)
 8005488:	2118      	movs	r1, #24
 800548a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800548e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8005492:	2918      	cmp	r1, #24
 8005494:	d018      	beq.n	80054c8 <ai_platform_network_create+0x6c>
 8005496:	f7ff fa87 	bl	80049a8 <_ai_platform_release_crc>
 800549a:	f244 1033 	movw	r0, #16691	; 0x4133
 800549e:	b003      	add	sp, #12
 80054a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a4:	4a53      	ldr	r2, [pc, #332]	; (80055f4 <ai_platform_network_create+0x198>)
 80054a6:	2101      	movs	r1, #1
 80054a8:	6091      	str	r1, [r2, #8]
 80054aa:	2114      	movs	r1, #20
 80054ac:	e001      	b.n	80054b2 <ai_platform_network_create+0x56>
 80054ae:	3901      	subs	r1, #1
 80054b0:	d002      	beq.n	80054b8 <ai_platform_network_create+0x5c>
 80054b2:	6894      	ldr	r4, [r2, #8]
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	d1fa      	bne.n	80054ae <ai_platform_network_create+0x52>
 80054b8:	4a4e      	ldr	r2, [pc, #312]	; (80055f4 <ai_platform_network_create+0x198>)
 80054ba:	6891      	ldr	r1, [r2, #8]
 80054bc:	b911      	cbnz	r1, 80054c4 <ai_platform_network_create+0x68>
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	3201      	adds	r2, #1
 80054c2:	d008      	beq.n	80054d6 <ai_platform_network_create+0x7a>
 80054c4:	4618      	mov	r0, r3
 80054c6:	e7e6      	b.n	8005496 <ai_platform_network_create+0x3a>
 80054c8:	2101      	movs	r1, #1
 80054ca:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80054ce:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80054d2:	2900      	cmp	r1, #0
 80054d4:	d1fb      	bne.n	80054ce <ai_platform_network_create+0x72>
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fa66 	bl	80049a8 <_ai_platform_release_crc>
 80054dc:	f7ff fa62 	bl	80049a4 <_ai_platform_acquire_crc>
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <ai_platform_network_create+0x190>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d010      	beq.n	8005510 <ai_platform_network_create+0xb4>
 80054ee:	4b40      	ldr	r3, [pc, #256]	; (80055f0 <ai_platform_network_create+0x194>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80054f6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d1fb      	bne.n	80054f6 <ai_platform_network_create+0x9a>
 80054fe:	4a3e      	ldr	r2, [pc, #248]	; (80055f8 <ai_platform_network_create+0x19c>)
 8005500:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005504:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005508:	4b3c      	ldr	r3, [pc, #240]	; (80055fc <ai_platform_network_create+0x1a0>)
 800550a:	429a      	cmp	r2, r3
 800550c:	d00c      	beq.n	8005528 <ai_platform_network_create+0xcc>
 800550e:	e7fe      	b.n	800550e <ai_platform_network_create+0xb2>
 8005510:	4a38      	ldr	r2, [pc, #224]	; (80055f4 <ai_platform_network_create+0x198>)
 8005512:	2301      	movs	r3, #1
 8005514:	6093      	str	r3, [r2, #8]
 8005516:	6893      	ldr	r3, [r2, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1fc      	bne.n	8005516 <ai_platform_network_create+0xba>
 800551c:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <ai_platform_network_create+0x19c>)
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <ai_platform_network_create+0x1a0>)
 8005524:	429a      	cmp	r2, r3
 8005526:	d122      	bne.n	800556e <ai_platform_network_create+0x112>
 8005528:	f7ff fa3e 	bl	80049a8 <_ai_platform_release_crc>
 800552c:	b38e      	cbz	r6, 8005592 <ai_platform_network_create+0x136>
 800552e:	4b34      	ldr	r3, [pc, #208]	; (8005600 <ai_platform_network_create+0x1a4>)
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	6035      	str	r5, [r6, #0]
 8005534:	f000 fe8c 	bl	8006250 <core_init>
 8005538:	b1d0      	cbz	r0, 8005570 <ai_platform_network_create+0x114>
 800553a:	f7ff fa33 	bl	80049a4 <_ai_platform_acquire_crc>
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <ai_platform_network_create+0x190>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d025      	beq.n	8005598 <ai_platform_network_create+0x13c>
 800554c:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <ai_platform_network_create+0x194>)
 800554e:	2301      	movs	r3, #1
 8005550:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005554:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1fb      	bne.n	8005554 <ai_platform_network_create+0xf8>
 800555c:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <ai_platform_network_create+0x19c>)
 800555e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005562:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005566:	4b25      	ldr	r3, [pc, #148]	; (80055fc <ai_platform_network_create+0x1a0>)
 8005568:	429a      	cmp	r2, r3
 800556a:	d022      	beq.n	80055b2 <ai_platform_network_create+0x156>
 800556c:	e7fe      	b.n	800556c <ai_platform_network_create+0x110>
 800556e:	e7fe      	b.n	800556e <ai_platform_network_create+0x112>
 8005570:	2430      	movs	r4, #48	; 0x30
 8005572:	2300      	movs	r3, #0
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	2610      	movs	r6, #16
 8005578:	464a      	mov	r2, r9
 800557a:	4641      	mov	r1, r8
 800557c:	4638      	mov	r0, r7
 800557e:	f001 fe27 	bl	80071d0 <ai_version_get>
 8005582:	4603      	mov	r3, r0
 8005584:	2000      	movs	r0, #0
 8005586:	f364 0007 	bfi	r0, r4, #0, #8
 800558a:	64ab      	str	r3, [r5, #72]	; 0x48
 800558c:	f366 201f 	bfi	r0, r6, #8, #24
 8005590:	e785      	b.n	800549e <ai_platform_network_create+0x42>
 8005592:	f241 0010 	movw	r0, #4112	; 0x1010
 8005596:	e782      	b.n	800549e <ai_platform_network_create+0x42>
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <ai_platform_network_create+0x198>)
 800559a:	2301      	movs	r3, #1
 800559c:	6093      	str	r3, [r2, #8]
 800559e:	6893      	ldr	r3, [r2, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1fc      	bne.n	800559e <ai_platform_network_create+0x142>
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <ai_platform_network_create+0x19c>)
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <ai_platform_network_create+0x1a0>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d000      	beq.n	80055b2 <ai_platform_network_create+0x156>
 80055b0:	e7fe      	b.n	80055b0 <ai_platform_network_create+0x154>
 80055b2:	f7ff f9f9 	bl	80049a8 <_ai_platform_release_crc>
 80055b6:	2200      	movs	r2, #0
 80055b8:	4641      	mov	r1, r8
 80055ba:	4638      	mov	r0, r7
 80055bc:	f001 fe08 	bl	80071d0 <ai_version_get>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	2105      	movs	r1, #5
 80055c6:	2001      	movs	r0, #1
 80055c8:	f001 fe02 	bl	80071d0 <ai_version_get>
 80055cc:	4284      	cmp	r4, r0
 80055ce:	d001      	beq.n	80055d4 <ai_platform_network_create+0x178>
 80055d0:	2401      	movs	r4, #1
 80055d2:	e7ce      	b.n	8005572 <ai_platform_network_create+0x116>
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <ai_platform_network_create+0x1a8>)
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	a801      	add	r0, sp, #4
 80055da:	f000 fe69 	bl	80062b0 <ai_check_custom_types>
 80055de:	b110      	cbz	r0, 80055e6 <ai_platform_network_create+0x18a>
 80055e0:	2600      	movs	r6, #0
 80055e2:	4634      	mov	r4, r6
 80055e4:	e7c8      	b.n	8005578 <ai_platform_network_create+0x11c>
 80055e6:	2402      	movs	r4, #2
 80055e8:	e7c3      	b.n	8005572 <ai_platform_network_create+0x116>
 80055ea:	bf00      	nop
 80055ec:	e0042000 	.word	0xe0042000
 80055f0:	58024000 	.word	0x58024000
 80055f4:	40023000 	.word	0x40023000
 80055f8:	f407a5c2 	.word	0xf407a5c2
 80055fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005600:	a1c00100 	.word	0xa1c00100
 8005604:	84048403 	.word	0x84048403

08005608 <ai_platform_network_destroy>:
 8005608:	b510      	push	{r4, lr}
 800560a:	4604      	mov	r4, r0
 800560c:	b1e8      	cbz	r0, 800564a <ai_platform_network_destroy+0x42>
 800560e:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <ai_platform_network_destroy+0xc0>)
 8005610:	6802      	ldr	r2, [r0, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d119      	bne.n	800564a <ai_platform_network_destroy+0x42>
 8005616:	f7ff f9c5 	bl	80049a4 <_ai_platform_acquire_crc>
 800561a:	4b2c      	ldr	r3, [pc, #176]	; (80056cc <ai_platform_network_destroy+0xc4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005626:	d03b      	beq.n	80056a0 <ai_platform_network_destroy+0x98>
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <ai_platform_network_destroy+0xc8>)
 800562a:	2301      	movs	r3, #1
 800562c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005630:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1fb      	bne.n	8005630 <ai_platform_network_destroy+0x28>
 8005638:	4b26      	ldr	r3, [pc, #152]	; (80056d4 <ai_platform_network_destroy+0xcc>)
 800563a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800563e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005642:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <ai_platform_network_destroy+0xd0>)
 8005644:	429a      	cmp	r2, r3
 8005646:	d037      	beq.n	80056b8 <ai_platform_network_destroy+0xb0>
 8005648:	e7fe      	b.n	8005648 <ai_platform_network_destroy+0x40>
 800564a:	f7ff f9ab 	bl	80049a4 <_ai_platform_acquire_crc>
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <ai_platform_network_destroy+0xc4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565a:	d010      	beq.n	800567e <ai_platform_network_destroy+0x76>
 800565c:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <ai_platform_network_destroy+0xc8>)
 800565e:	2301      	movs	r3, #1
 8005660:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005664:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1fb      	bne.n	8005664 <ai_platform_network_destroy+0x5c>
 800566c:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <ai_platform_network_destroy+0xcc>)
 800566e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005672:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <ai_platform_network_destroy+0xd0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d00d      	beq.n	8005698 <ai_platform_network_destroy+0x90>
 800567c:	e7fe      	b.n	800567c <ai_platform_network_destroy+0x74>
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <ai_platform_network_destroy+0xd4>)
 8005680:	2301      	movs	r3, #1
 8005682:	6093      	str	r3, [r2, #8]
 8005684:	6893      	ldr	r3, [r2, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1fc      	bne.n	8005684 <ai_platform_network_destroy+0x7c>
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <ai_platform_network_destroy+0xcc>)
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <ai_platform_network_destroy+0xd0>)
 8005692:	429a      	cmp	r2, r3
 8005694:	d000      	beq.n	8005698 <ai_platform_network_destroy+0x90>
 8005696:	e7fe      	b.n	8005696 <ai_platform_network_destroy+0x8e>
 8005698:	f7ff f986 	bl	80049a8 <_ai_platform_release_crc>
 800569c:	4620      	mov	r0, r4
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <ai_platform_network_destroy+0xd4>)
 80056a2:	2301      	movs	r3, #1
 80056a4:	6093      	str	r3, [r2, #8]
 80056a6:	6893      	ldr	r3, [r2, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1fc      	bne.n	80056a6 <ai_platform_network_destroy+0x9e>
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <ai_platform_network_destroy+0xcc>)
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <ai_platform_network_destroy+0xd0>)
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d106      	bne.n	80056c6 <ai_platform_network_destroy+0xbe>
 80056b8:	f7ff f976 	bl	80049a8 <_ai_platform_release_crc>
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 febb 	bl	8006438 <ai_layers_destroy_all>
 80056c2:	2000      	movs	r0, #0
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	e7fe      	b.n	80056c6 <ai_platform_network_destroy+0xbe>
 80056c8:	a1c00100 	.word	0xa1c00100
 80056cc:	e0042000 	.word	0xe0042000
 80056d0:	58024000 	.word	0x58024000
 80056d4:	f407a5c2 	.word	0xf407a5c2
 80056d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80056dc:	40023000 	.word	0x40023000

080056e0 <ai_platform_network_init>:
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	b1f8      	cbz	r0, 8005726 <ai_platform_network_init+0x46>
 80056e6:	4b6e      	ldr	r3, [pc, #440]	; (80058a0 <ai_platform_network_init+0x1c0>)
 80056e8:	6802      	ldr	r2, [r0, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	4604      	mov	r4, r0
 80056ee:	d11a      	bne.n	8005726 <ai_platform_network_init+0x46>
 80056f0:	460e      	mov	r6, r1
 80056f2:	f7ff f957 	bl	80049a4 <_ai_platform_acquire_crc>
 80056f6:	4b6b      	ldr	r3, [pc, #428]	; (80058a4 <ai_platform_network_init+0x1c4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005702:	d03d      	beq.n	8005780 <ai_platform_network_init+0xa0>
 8005704:	4a68      	ldr	r2, [pc, #416]	; (80058a8 <ai_platform_network_init+0x1c8>)
 8005706:	2301      	movs	r3, #1
 8005708:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800570c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1fb      	bne.n	800570c <ai_platform_network_init+0x2c>
 8005714:	4b65      	ldr	r3, [pc, #404]	; (80058ac <ai_platform_network_init+0x1cc>)
 8005716:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800571a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800571e:	4b64      	ldr	r3, [pc, #400]	; (80058b0 <ai_platform_network_init+0x1d0>)
 8005720:	429a      	cmp	r2, r3
 8005722:	d039      	beq.n	8005798 <ai_platform_network_init+0xb8>
 8005724:	e7fe      	b.n	8005724 <ai_platform_network_init+0x44>
 8005726:	f7ff f93d 	bl	80049a4 <_ai_platform_acquire_crc>
 800572a:	4b5e      	ldr	r3, [pc, #376]	; (80058a4 <ai_platform_network_init+0x1c4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d010      	beq.n	800575a <ai_platform_network_init+0x7a>
 8005738:	4a5b      	ldr	r2, [pc, #364]	; (80058a8 <ai_platform_network_init+0x1c8>)
 800573a:	2301      	movs	r3, #1
 800573c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005740:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1fb      	bne.n	8005740 <ai_platform_network_init+0x60>
 8005748:	4b58      	ldr	r3, [pc, #352]	; (80058ac <ai_platform_network_init+0x1cc>)
 800574a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800574e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005752:	4b57      	ldr	r3, [pc, #348]	; (80058b0 <ai_platform_network_init+0x1d0>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d00d      	beq.n	8005774 <ai_platform_network_init+0x94>
 8005758:	e7fe      	b.n	8005758 <ai_platform_network_init+0x78>
 800575a:	4a56      	ldr	r2, [pc, #344]	; (80058b4 <ai_platform_network_init+0x1d4>)
 800575c:	2301      	movs	r3, #1
 800575e:	6093      	str	r3, [r2, #8]
 8005760:	6893      	ldr	r3, [r2, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1fc      	bne.n	8005760 <ai_platform_network_init+0x80>
 8005766:	4b51      	ldr	r3, [pc, #324]	; (80058ac <ai_platform_network_init+0x1cc>)
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <ai_platform_network_init+0x1d0>)
 800576e:	429a      	cmp	r2, r3
 8005770:	d000      	beq.n	8005774 <ai_platform_network_init+0x94>
 8005772:	e7fe      	b.n	8005772 <ai_platform_network_init+0x92>
 8005774:	f7ff f918 	bl	80049a8 <_ai_platform_release_crc>
 8005778:	2600      	movs	r6, #0
 800577a:	4630      	mov	r0, r6
 800577c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005780:	4a4c      	ldr	r2, [pc, #304]	; (80058b4 <ai_platform_network_init+0x1d4>)
 8005782:	2301      	movs	r3, #1
 8005784:	6093      	str	r3, [r2, #8]
 8005786:	6893      	ldr	r3, [r2, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1fc      	bne.n	8005786 <ai_platform_network_init+0xa6>
 800578c:	4b47      	ldr	r3, [pc, #284]	; (80058ac <ai_platform_network_init+0x1cc>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <ai_platform_network_init+0x1d0>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d11c      	bne.n	80057d2 <ai_platform_network_init+0xf2>
 8005798:	f7ff f906 	bl	80049a8 <_ai_platform_release_crc>
 800579c:	2e00      	cmp	r6, #0
 800579e:	d06f      	beq.n	8005880 <ai_platform_network_init+0x1a0>
 80057a0:	4b45      	ldr	r3, [pc, #276]	; (80058b8 <ai_platform_network_init+0x1d8>)
 80057a2:	6832      	ldr	r2, [r6, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d115      	bne.n	80057d4 <ai_platform_network_init+0xf4>
 80057a8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80057ac:	6933      	ldr	r3, [r6, #16]
 80057ae:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80057b2:	89f7      	ldrh	r7, [r6, #14]
 80057b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057b6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80057ba:	2303      	movs	r3, #3
 80057bc:	84e7      	strh	r7, [r4, #38]	; 0x26
 80057be:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80057c2:	60e3      	str	r3, [r4, #12]
 80057c4:	4620      	mov	r0, r4
 80057c6:	4626      	mov	r6, r4
 80057c8:	f000 fdca 	bl	8006360 <ai_layers_init_all>
 80057cc:	4630      	mov	r0, r6
 80057ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d2:	e7fe      	b.n	80057d2 <ai_platform_network_init+0xf2>
 80057d4:	2101      	movs	r1, #1
 80057d6:	4630      	mov	r0, r6
 80057d8:	4635      	mov	r5, r6
 80057da:	6876      	ldr	r6, [r6, #4]
 80057dc:	f7ff f800 	bl	80047e0 <ai_buffer_get_size>
 80057e0:	f105 081c 	add.w	r8, r5, #28
 80057e4:	4681      	mov	r9, r0
 80057e6:	2101      	movs	r1, #1
 80057e8:	4640      	mov	r0, r8
 80057ea:	6a2f      	ldr	r7, [r5, #32]
 80057ec:	f7fe fff8 	bl	80047e0 <ai_buffer_get_size>
 80057f0:	f1b9 0f00 	cmp.w	r9, #0
 80057f4:	d025      	beq.n	8005842 <ai_platform_network_init+0x162>
 80057f6:	2201      	movs	r2, #1
 80057f8:	4696      	mov	lr, r2
 80057fa:	bb30      	cbnz	r0, 800584a <ai_platform_network_init+0x16a>
 80057fc:	4680      	mov	r8, r0
 80057fe:	4607      	mov	r7, r0
 8005800:	b376      	cbz	r6, 8005860 <ai_platform_network_init+0x180>
 8005802:	8be3      	ldrh	r3, [r4, #30]
 8005804:	4573      	cmp	r3, lr
 8005806:	d323      	bcc.n	8005850 <ai_platform_network_init+0x170>
 8005808:	b142      	cbz	r2, 800581c <ai_platform_network_init+0x13c>
 800580a:	46ac      	mov	ip, r5
 800580c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005810:	6a25      	ldr	r5, [r4, #32]
 8005812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005814:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005818:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800581c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800581e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8005822:	2600      	movs	r6, #0
 8005824:	42bb      	cmp	r3, r7
 8005826:	83a6      	strh	r6, [r4, #28]
 8005828:	d323      	bcc.n	8005872 <ai_platform_network_init+0x192>
 800582a:	b37f      	cbz	r7, 800588c <ai_platform_network_init+0x1ac>
 800582c:	46c4      	mov	ip, r8
 800582e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005832:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005836:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800583a:	46b6      	mov	lr, r6
 800583c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005840:	e7bb      	b.n	80057ba <ai_platform_network_init+0xda>
 8005842:	464a      	mov	r2, r9
 8005844:	46ce      	mov	lr, r9
 8005846:	464d      	mov	r5, r9
 8005848:	e7d7      	b.n	80057fa <ai_platform_network_init+0x11a>
 800584a:	b30f      	cbz	r7, 8005890 <ai_platform_network_init+0x1b0>
 800584c:	2701      	movs	r7, #1
 800584e:	e7d7      	b.n	8005800 <ai_platform_network_init+0x120>
 8005850:	2212      	movs	r2, #18
 8005852:	2116      	movs	r1, #22
 8005854:	f104 0010 	add.w	r0, r4, #16
 8005858:	f000 fd02 	bl	8006260 <core_set_error>
 800585c:	2600      	movs	r6, #0
 800585e:	e78c      	b.n	800577a <ai_platform_network_init+0x9a>
 8005860:	f1b9 0f00 	cmp.w	r9, #0
 8005864:	d0cd      	beq.n	8005802 <ai_platform_network_init+0x122>
 8005866:	2110      	movs	r1, #16
 8005868:	2212      	movs	r2, #18
 800586a:	1860      	adds	r0, r4, r1
 800586c:	f000 fcf8 	bl	8006260 <core_set_error>
 8005870:	e783      	b.n	800577a <ai_platform_network_init+0x9a>
 8005872:	2213      	movs	r2, #19
 8005874:	2116      	movs	r1, #22
 8005876:	f104 0010 	add.w	r0, r4, #16
 800587a:	f000 fcf1 	bl	8006260 <core_set_error>
 800587e:	e77c      	b.n	800577a <ai_platform_network_init+0x9a>
 8005880:	2110      	movs	r1, #16
 8005882:	2211      	movs	r2, #17
 8005884:	1860      	adds	r0, r4, r1
 8005886:	f000 fceb 	bl	8006260 <core_set_error>
 800588a:	e776      	b.n	800577a <ai_platform_network_init+0x9a>
 800588c:	46be      	mov	lr, r7
 800588e:	e794      	b.n	80057ba <ai_platform_network_init+0xda>
 8005890:	2110      	movs	r1, #16
 8005892:	2213      	movs	r2, #19
 8005894:	1860      	adds	r0, r4, r1
 8005896:	f000 fce3 	bl	8006260 <core_set_error>
 800589a:	463e      	mov	r6, r7
 800589c:	e76d      	b.n	800577a <ai_platform_network_init+0x9a>
 800589e:	bf00      	nop
 80058a0:	a1c00100 	.word	0xa1c00100
 80058a4:	e0042000 	.word	0xe0042000
 80058a8:	58024000 	.word	0x58024000
 80058ac:	f407a5c2 	.word	0xf407a5c2
 80058b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80058b4:	40023000 	.word	0x40023000
 80058b8:	a1facade 	.word	0xa1facade

080058bc <ai_platform_network_post_init>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	b1f0      	cbz	r0, 80058fe <ai_platform_network_post_init+0x42>
 80058c0:	4b3c      	ldr	r3, [pc, #240]	; (80059b4 <ai_platform_network_post_init+0xf8>)
 80058c2:	6802      	ldr	r2, [r0, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	4604      	mov	r4, r0
 80058c8:	d119      	bne.n	80058fe <ai_platform_network_post_init+0x42>
 80058ca:	f7ff f86b 	bl	80049a4 <_ai_platform_acquire_crc>
 80058ce:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <ai_platform_network_post_init+0xfc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058da:	d03b      	beq.n	8005954 <ai_platform_network_post_init+0x98>
 80058dc:	4a37      	ldr	r2, [pc, #220]	; (80059bc <ai_platform_network_post_init+0x100>)
 80058de:	2301      	movs	r3, #1
 80058e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80058e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1fb      	bne.n	80058e4 <ai_platform_network_post_init+0x28>
 80058ec:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <ai_platform_network_post_init+0x104>)
 80058ee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80058f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80058f6:	4b33      	ldr	r3, [pc, #204]	; (80059c4 <ai_platform_network_post_init+0x108>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d037      	beq.n	800596c <ai_platform_network_post_init+0xb0>
 80058fc:	e7fe      	b.n	80058fc <ai_platform_network_post_init+0x40>
 80058fe:	f7ff f851 	bl	80049a4 <_ai_platform_acquire_crc>
 8005902:	4b2d      	ldr	r3, [pc, #180]	; (80059b8 <ai_platform_network_post_init+0xfc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590e:	d010      	beq.n	8005932 <ai_platform_network_post_init+0x76>
 8005910:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <ai_platform_network_post_init+0x100>)
 8005912:	2301      	movs	r3, #1
 8005914:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005918:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1fb      	bne.n	8005918 <ai_platform_network_post_init+0x5c>
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <ai_platform_network_post_init+0x104>)
 8005922:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005926:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <ai_platform_network_post_init+0x108>)
 800592c:	429a      	cmp	r2, r3
 800592e:	d00d      	beq.n	800594c <ai_platform_network_post_init+0x90>
 8005930:	e7fe      	b.n	8005930 <ai_platform_network_post_init+0x74>
 8005932:	4a25      	ldr	r2, [pc, #148]	; (80059c8 <ai_platform_network_post_init+0x10c>)
 8005934:	2301      	movs	r3, #1
 8005936:	6093      	str	r3, [r2, #8]
 8005938:	6893      	ldr	r3, [r2, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1fc      	bne.n	8005938 <ai_platform_network_post_init+0x7c>
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <ai_platform_network_post_init+0x104>)
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	4b1f      	ldr	r3, [pc, #124]	; (80059c4 <ai_platform_network_post_init+0x108>)
 8005946:	429a      	cmp	r2, r3
 8005948:	d000      	beq.n	800594c <ai_platform_network_post_init+0x90>
 800594a:	e7fe      	b.n	800594a <ai_platform_network_post_init+0x8e>
 800594c:	f7ff f82c 	bl	80049a8 <_ai_platform_release_crc>
 8005950:	2000      	movs	r0, #0
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <ai_platform_network_post_init+0x10c>)
 8005956:	2301      	movs	r3, #1
 8005958:	6093      	str	r3, [r2, #8]
 800595a:	6893      	ldr	r3, [r2, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1fc      	bne.n	800595a <ai_platform_network_post_init+0x9e>
 8005960:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <ai_platform_network_post_init+0x104>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <ai_platform_network_post_init+0x108>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d11a      	bne.n	80059a2 <ai_platform_network_post_init+0xe6>
 800596c:	f7ff f81c 	bl	80049a8 <_ai_platform_release_crc>
 8005970:	68e3      	ldr	r3, [r4, #12]
 8005972:	f013 0502 	ands.w	r5, r3, #2
 8005976:	d015      	beq.n	80059a4 <ai_platform_network_post_init+0xe8>
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fcff 	bl	800637c <ai_layers_post_init_all>
 800597e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005980:	b16b      	cbz	r3, 800599e <ai_platform_network_post_init+0xe2>
 8005982:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005984:	e007      	b.n	8005996 <ai_platform_network_post_init+0xda>
 8005986:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800598a:	4798      	blx	r3
 800598c:	692b      	ldr	r3, [r5, #16]
 800598e:	42ab      	cmp	r3, r5
 8005990:	d005      	beq.n	800599e <ai_platform_network_post_init+0xe2>
 8005992:	b123      	cbz	r3, 800599e <ai_platform_network_post_init+0xe2>
 8005994:	461d      	mov	r5, r3
 8005996:	4629      	mov	r1, r5
 8005998:	2000      	movs	r0, #0
 800599a:	2d00      	cmp	r5, #0
 800599c:	d1f3      	bne.n	8005986 <ai_platform_network_post_init+0xca>
 800599e:	2001      	movs	r0, #1
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
 80059a2:	e7fe      	b.n	80059a2 <ai_platform_network_post_init+0xe6>
 80059a4:	2210      	movs	r2, #16
 80059a6:	2111      	movs	r1, #17
 80059a8:	18a0      	adds	r0, r4, r2
 80059aa:	f000 fc59 	bl	8006260 <core_set_error>
 80059ae:	4628      	mov	r0, r5
 80059b0:	bd38      	pop	{r3, r4, r5, pc}
 80059b2:	bf00      	nop
 80059b4:	a1c00100 	.word	0xa1c00100
 80059b8:	e0042000 	.word	0xe0042000
 80059bc:	58024000 	.word	0x58024000
 80059c0:	f407a5c2 	.word	0xf407a5c2
 80059c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80059c8:	40023000 	.word	0x40023000

080059cc <ai_platform_network_process>:
 80059cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	460e      	mov	r6, r1
 80059d2:	b085      	sub	sp, #20
 80059d4:	4693      	mov	fp, r2
 80059d6:	4605      	mov	r5, r0
 80059d8:	b120      	cbz	r0, 80059e4 <ai_platform_network_process+0x18>
 80059da:	4bb8      	ldr	r3, [pc, #736]	; (8005cbc <ai_platform_network_process+0x2f0>)
 80059dc:	6802      	ldr	r2, [r0, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	bf18      	it	ne
 80059e2:	2500      	movne	r5, #0
 80059e4:	f7fe ffde 	bl	80049a4 <_ai_platform_acquire_crc>
 80059e8:	4bb5      	ldr	r3, [pc, #724]	; (8005cc0 <ai_platform_network_process+0x2f4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d010      	beq.n	8005a18 <ai_platform_network_process+0x4c>
 80059f6:	4ab3      	ldr	r2, [pc, #716]	; (8005cc4 <ai_platform_network_process+0x2f8>)
 80059f8:	2301      	movs	r3, #1
 80059fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80059fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1fb      	bne.n	80059fe <ai_platform_network_process+0x32>
 8005a06:	4bb0      	ldr	r3, [pc, #704]	; (8005cc8 <ai_platform_network_process+0x2fc>)
 8005a08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005a0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005a10:	4bae      	ldr	r3, [pc, #696]	; (8005ccc <ai_platform_network_process+0x300>)
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d00d      	beq.n	8005a32 <ai_platform_network_process+0x66>
 8005a16:	e7fe      	b.n	8005a16 <ai_platform_network_process+0x4a>
 8005a18:	4aad      	ldr	r2, [pc, #692]	; (8005cd0 <ai_platform_network_process+0x304>)
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	6093      	str	r3, [r2, #8]
 8005a1e:	6893      	ldr	r3, [r2, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1fc      	bne.n	8005a1e <ai_platform_network_process+0x52>
 8005a24:	4ba8      	ldr	r3, [pc, #672]	; (8005cc8 <ai_platform_network_process+0x2fc>)
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	4ba8      	ldr	r3, [pc, #672]	; (8005ccc <ai_platform_network_process+0x300>)
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	f040 812c 	bne.w	8005c8a <ai_platform_network_process+0x2be>
 8005a32:	f7fe ffb9 	bl	80049a8 <_ai_platform_release_crc>
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	f000 8154 	beq.w	8005ce4 <ai_platform_network_process+0x318>
 8005a3c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8124 	beq.w	8005c8c <ai_platform_network_process+0x2c0>
 8005a44:	68eb      	ldr	r3, [r5, #12]
 8005a46:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2700      	movs	r7, #0
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	616f      	str	r7, [r5, #20]
 8005a54:	f040 813e 	bne.w	8005cd4 <ai_platform_network_process+0x308>
 8005a58:	2e00      	cmp	r6, #0
 8005a5a:	f000 811d 	beq.w	8005c98 <ai_platform_network_process+0x2cc>
 8005a5e:	f1ba 0f00 	cmp.w	sl, #0
 8005a62:	f000 8119 	beq.w	8005c98 <ai_platform_network_process+0x2cc>
 8005a66:	f8ba 3000 	ldrh.w	r3, [sl]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8114 	beq.w	8005c98 <ai_platform_network_process+0x2cc>
 8005a70:	69b3      	ldr	r3, [r6, #24]
 8005a72:	f8cd b00c 	str.w	fp, [sp, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8005a7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d072      	beq.n	8005b6a <ai_platform_network_process+0x19e>
 8005a84:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005a88:	2c00      	cmp	r4, #0
 8005a8a:	d06e      	beq.n	8005b6a <ai_platform_network_process+0x19e>
 8005a8c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005a90:	f8d3 9000 	ldr.w	r9, [r3]
 8005a94:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005a98:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005a9c:	f000 81de 	beq.w	8005e5c <ai_platform_network_process+0x490>
 8005aa0:	69a3      	ldr	r3, [r4, #24]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	685d      	ldr	r5, [r3, #4]
 8005aa8:	f7fe fe9a 	bl	80047e0 <ai_buffer_get_size>
 8005aac:	4285      	cmp	r5, r0
 8005aae:	f0c0 811b 	bcc.w	8005ce8 <ai_platform_network_process+0x31c>
 8005ab2:	68e0      	ldr	r0, [r4, #12]
 8005ab4:	69b1      	ldr	r1, [r6, #24]
 8005ab6:	68c2      	ldr	r2, [r0, #12]
 8005ab8:	68cb      	ldr	r3, [r1, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	f040 8114 	bne.w	8005ce8 <ai_platform_network_process+0x31c>
 8005ac0:	6882      	ldr	r2, [r0, #8]
 8005ac2:	688b      	ldr	r3, [r1, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f040 810f 	bne.w	8005ce8 <ai_platform_network_process+0x31c>
 8005aca:	6842      	ldr	r2, [r0, #4]
 8005acc:	684b      	ldr	r3, [r1, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	f040 810a 	bne.w	8005ce8 <ai_platform_network_process+0x31c>
 8005ad4:	69a3      	ldr	r3, [r4, #24]
 8005ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ada:	f001 fb67 	bl	80071ac <ai_array_get_data_byte_size>
 8005ade:	4605      	mov	r5, r0
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f001 fb8d 	bl	8007200 <get_tensor_byte_size>
 8005ae6:	4285      	cmp	r5, r0
 8005ae8:	f0c0 80fe 	bcc.w	8005ce8 <ai_platform_network_process+0x31c>
 8005aec:	69a3      	ldr	r3, [r4, #24]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	f001 fac8 	bl	8007084 <ai_array_to_buffer_fmt>
 8005af4:	6833      	ldr	r3, [r6, #0]
 8005af6:	4058      	eors	r0, r3
 8005af8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005afc:	f040 81b9 	bne.w	8005e72 <ai_platform_network_process+0x4a6>
 8005b00:	6873      	ldr	r3, [r6, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 81ac 	beq.w	8005e60 <ai_platform_network_process+0x494>
 8005b08:	69b3      	ldr	r3, [r6, #24]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 819c 	beq.w	8005e4a <ai_platform_network_process+0x47e>
 8005b12:	9a01      	ldr	r2, [sp, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	bf38      	it	cc
 8005b18:	461a      	movcc	r2, r3
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	9201      	str	r2, [sp, #4]
 8005b1e:	f001 fb6f 	bl	8007200 <get_tensor_byte_size>
 8005b22:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b26:	69b3      	ldr	r3, [r6, #24]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	fb00 f303 	mul.w	r3, r0, r3
 8005b2e:	f8c8 300c 	str.w	r3, [r8, #12]
 8005b32:	6871      	ldr	r1, [r6, #4]
 8005b34:	f8c8 1004 	str.w	r1, [r8, #4]
 8005b38:	440b      	add	r3, r1
 8005b3a:	f849 300b 	str.w	r3, [r9, fp]
 8005b3e:	69a0      	ldr	r0, [r4, #24]
 8005b40:	6803      	ldr	r3, [r0, #0]
 8005b42:	009a      	lsls	r2, r3, #2
 8005b44:	f107 0701 	add.w	r7, r7, #1
 8005b48:	f106 061c 	add.w	r6, r6, #28
 8005b4c:	f100 80af 	bmi.w	8005cae <ai_platform_network_process+0x2e2>
 8005b50:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	4419      	add	r1, r3
 8005b58:	6081      	str	r1, [r0, #8]
 8005b5a:	69a3      	ldr	r3, [r4, #24]
 8005b5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005b60:	60da      	str	r2, [r3, #12]
 8005b62:	f8ba 3000 	ldrh.w	r3, [sl]
 8005b66:	42bb      	cmp	r3, r7
 8005b68:	d888      	bhi.n	8005a7c <ai_platform_network_process+0xb0>
 8005b6a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8005b6e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8005b70:	f1bb 0f00 	cmp.w	fp, #0
 8005b74:	f000 8186 	beq.w	8005e84 <ai_platform_network_process+0x4b8>
 8005b78:	2a01      	cmp	r2, #1
 8005b7a:	f240 815e 	bls.w	8005e3a <ai_platform_network_process+0x46e>
 8005b7e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8005b82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8157 	beq.w	8005e3a <ai_platform_network_process+0x46e>
 8005b8c:	465e      	mov	r6, fp
 8005b8e:	2700      	movs	r7, #0
 8005b90:	462c      	mov	r4, r5
 8005b92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80b4 	beq.w	8005d04 <ai_platform_network_process+0x338>
 8005b9c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	f000 80af 	beq.w	8005d04 <ai_platform_network_process+0x338>
 8005ba6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005baa:	f8d3 8000 	ldr.w	r8, [r3]
 8005bae:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8005bb2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005bb6:	f000 8171 	beq.w	8005e9c <ai_platform_network_process+0x4d0>
 8005bba:	69ab      	ldr	r3, [r5, #24]
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	9302      	str	r3, [sp, #8]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7fe fe0c 	bl	80047e0 <ai_buffer_get_size>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	4283      	cmp	r3, r0
 8005bcc:	f0c0 8134 	bcc.w	8005e38 <ai_platform_network_process+0x46c>
 8005bd0:	68e8      	ldr	r0, [r5, #12]
 8005bd2:	69b1      	ldr	r1, [r6, #24]
 8005bd4:	68c2      	ldr	r2, [r0, #12]
 8005bd6:	68cb      	ldr	r3, [r1, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	f040 812d 	bne.w	8005e38 <ai_platform_network_process+0x46c>
 8005bde:	6882      	ldr	r2, [r0, #8]
 8005be0:	688b      	ldr	r3, [r1, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f040 8128 	bne.w	8005e38 <ai_platform_network_process+0x46c>
 8005be8:	6842      	ldr	r2, [r0, #4]
 8005bea:	684b      	ldr	r3, [r1, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	f040 8123 	bne.w	8005e38 <ai_platform_network_process+0x46c>
 8005bf2:	69ab      	ldr	r3, [r5, #24]
 8005bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bf8:	f001 fad8 	bl	80071ac <ai_array_get_data_byte_size>
 8005bfc:	9002      	str	r0, [sp, #8]
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f001 fafe 	bl	8007200 <get_tensor_byte_size>
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	4283      	cmp	r3, r0
 8005c08:	f0c0 8116 	bcc.w	8005e38 <ai_platform_network_process+0x46c>
 8005c0c:	69ab      	ldr	r3, [r5, #24]
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	f001 fa38 	bl	8007084 <ai_array_to_buffer_fmt>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	4058      	eors	r0, r3
 8005c18:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005c1c:	f040 8136 	bne.w	8005e8c <ai_platform_network_process+0x4c0>
 8005c20:	6873      	ldr	r3, [r6, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 814d 	beq.w	8005ec2 <ai_platform_network_process+0x4f6>
 8005c28:	69b3      	ldr	r3, [r6, #24]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 813f 	beq.w	8005eb0 <ai_platform_network_process+0x4e4>
 8005c32:	9a01      	ldr	r2, [sp, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	bf38      	it	cc
 8005c38:	461a      	movcc	r2, r3
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	9201      	str	r2, [sp, #4]
 8005c3e:	f001 fadf 	bl	8007200 <get_tensor_byte_size>
 8005c42:	f8ca 0008 	str.w	r0, [sl, #8]
 8005c46:	69b3      	ldr	r3, [r6, #24]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	fb00 f303 	mul.w	r3, r0, r3
 8005c4e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005c52:	6871      	ldr	r1, [r6, #4]
 8005c54:	f8ca 1004 	str.w	r1, [sl, #4]
 8005c58:	440b      	add	r3, r1
 8005c5a:	f848 300b 	str.w	r3, [r8, fp]
 8005c5e:	69a8      	ldr	r0, [r5, #24]
 8005c60:	6803      	ldr	r3, [r0, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	f107 0701 	add.w	r7, r7, #1
 8005c68:	f106 061c 	add.w	r6, r6, #28
 8005c6c:	d445      	bmi.n	8005cfa <ai_platform_network_process+0x32e>
 8005c6e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	4419      	add	r1, r3
 8005c76:	6081      	str	r1, [r0, #8]
 8005c78:	69ab      	ldr	r3, [r5, #24]
 8005c7a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005c84:	429f      	cmp	r7, r3
 8005c86:	d384      	bcc.n	8005b92 <ai_platform_network_process+0x1c6>
 8005c88:	e03c      	b.n	8005d04 <ai_platform_network_process+0x338>
 8005c8a:	e7fe      	b.n	8005c8a <ai_platform_network_process+0x2be>
 8005c8c:	68ea      	ldr	r2, [r5, #12]
 8005c8e:	616b      	str	r3, [r5, #20]
 8005c90:	f002 0203 	and.w	r2, r2, #3
 8005c94:	2a03      	cmp	r2, #3
 8005c96:	d11d      	bne.n	8005cd4 <ai_platform_network_process+0x308>
 8005c98:	2217      	movs	r2, #23
 8005c9a:	2112      	movs	r1, #18
 8005c9c:	f105 0010 	add.w	r0, r5, #16
 8005ca0:	f000 fade 	bl	8006260 <core_set_error>
 8005ca4:	2400      	movs	r4, #0
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	b005      	add	sp, #20
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cae:	f8ba 3000 	ldrh.w	r3, [sl]
 8005cb2:	429f      	cmp	r7, r3
 8005cb4:	f4ff aee2 	bcc.w	8005a7c <ai_platform_network_process+0xb0>
 8005cb8:	e757      	b.n	8005b6a <ai_platform_network_process+0x19e>
 8005cba:	bf00      	nop
 8005cbc:	a1c00100 	.word	0xa1c00100
 8005cc0:	e0042000 	.word	0xe0042000
 8005cc4:	58024000 	.word	0x58024000
 8005cc8:	f407a5c2 	.word	0xf407a5c2
 8005ccc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005cd0:	40023000 	.word	0x40023000
 8005cd4:	2230      	movs	r2, #48	; 0x30
 8005cd6:	2111      	movs	r1, #17
 8005cd8:	f105 0010 	add.w	r0, r5, #16
 8005cdc:	f000 fac0 	bl	8006260 <core_set_error>
 8005ce0:	2400      	movs	r4, #0
 8005ce2:	e7e0      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005ce4:	462c      	mov	r4, r5
 8005ce6:	e7de      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005ce8:	9d02      	ldr	r5, [sp, #8]
 8005cea:	2218      	movs	r2, #24
 8005cec:	2112      	movs	r1, #18
 8005cee:	f105 0010 	add.w	r0, r5, #16
 8005cf2:	f000 fab5 	bl	8006260 <core_set_error>
 8005cf6:	2400      	movs	r4, #0
 8005cf8:	e7d5      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005cfa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005cfe:	429f      	cmp	r7, r3
 8005d00:	f4ff af47 	bcc.w	8005b92 <ai_platform_network_process+0x1c6>
 8005d04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005d08:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005d0a:	82a3      	strh	r3, [r4, #20]
 8005d0c:	4625      	mov	r5, r4
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	f040 808c 	bne.w	8005e2c <ai_platform_network_process+0x460>
 8005d14:	4616      	mov	r6, r2
 8005d16:	4617      	mov	r7, r2
 8005d18:	8aec      	ldrh	r4, [r5, #22]
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	bf38      	it	cc
 8005d1e:	46ab      	movcc	fp, r5
 8005d20:	d2c1      	bcs.n	8005ca6 <ai_platform_network_process+0x2da>
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d030      	beq.n	8005d88 <ai_platform_network_process+0x3bc>
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	e014      	b.n	8005d56 <ai_platform_network_process+0x38a>
 8005d2c:	6882      	ldr	r2, [r0, #8]
 8005d2e:	68c5      	ldr	r5, [r0, #12]
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	1b52      	subs	r2, r2, r5
 8005d34:	4413      	add	r3, r2
 8005d36:	6083      	str	r3, [r0, #8]
 8005d38:	698b      	ldr	r3, [r1, #24]
 8005d3a:	6862      	ldr	r2, [r4, #4]
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005d42:	f859 200a 	ldr.w	r2, [r9, sl]
 8005d46:	440b      	add	r3, r1
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bf24      	itt	cs
 8005d4c:	68e3      	ldrcs	r3, [r4, #12]
 8005d4e:	1ad3      	subcs	r3, r2, r3
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	8833      	ldrh	r3, [r6, #0]
 8005d58:	4543      	cmp	r3, r8
 8005d5a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005d5e:	d913      	bls.n	8005d88 <ai_platform_network_process+0x3bc>
 8005d60:	6873      	ldr	r3, [r6, #4]
 8005d62:	b18b      	cbz	r3, 8005d88 <ai_platform_network_process+0x3bc>
 8005d64:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005d68:	b171      	cbz	r1, 8005d88 <ai_platform_network_process+0x3bc>
 8005d6a:	6988      	ldr	r0, [r1, #24]
 8005d6c:	68b2      	ldr	r2, [r6, #8]
 8005d6e:	6803      	ldr	r3, [r0, #0]
 8005d70:	f8d2 9000 	ldr.w	r9, [r2]
 8005d74:	009d      	lsls	r5, r3, #2
 8005d76:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005d7a:	d5d7      	bpl.n	8005d2c <ai_platform_network_process+0x360>
 8005d7c:	6881      	ldr	r1, [r0, #8]
 8005d7e:	68a2      	ldr	r2, [r4, #8]
 8005d80:	6860      	ldr	r0, [r4, #4]
 8005d82:	f001 f8f9 	bl	8006f78 <st_int8_copy>
 8005d86:	e7da      	b.n	8005d3e <ai_platform_network_process+0x372>
 8005d88:	4658      	mov	r0, fp
 8005d8a:	f000 fb0b 	bl	80063a4 <ai_layers_forward_all>
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d03d      	beq.n	8005e0e <ai_platform_network_process+0x442>
 8005d92:	2400      	movs	r4, #0
 8005d94:	e016      	b.n	8005dc4 <ai_platform_network_process+0x3f8>
 8005d96:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005d9a:	f859 100a 	ldr.w	r1, [r9, sl]
 8005d9e:	4413      	add	r3, r2
 8005da0:	428b      	cmp	r3, r1
 8005da2:	bf24      	itt	cs
 8005da4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005da8:	1acb      	subcs	r3, r1, r3
 8005daa:	f8c8 3004 	str.w	r3, [r8, #4]
 8005dae:	6981      	ldr	r1, [r0, #24]
 8005db0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005db4:	1b52      	subs	r2, r2, r5
 8005db6:	4413      	add	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
 8005dba:	6983      	ldr	r3, [r0, #24]
 8005dbc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	3401      	adds	r4, #1
 8005dc4:	883b      	ldrh	r3, [r7, #0]
 8005dc6:	42a3      	cmp	r3, r4
 8005dc8:	d921      	bls.n	8005e0e <ai_platform_network_process+0x442>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	b1fb      	cbz	r3, 8005e0e <ai_platform_network_process+0x442>
 8005dce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005dd2:	b1e0      	cbz	r0, 8005e0e <ai_platform_network_process+0x442>
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	6983      	ldr	r3, [r0, #24]
 8005dd8:	f8d2 9000 	ldr.w	r9, [r2]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005de4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005de8:	d5d5      	bpl.n	8005d96 <ai_platform_network_process+0x3ca>
 8005dea:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005dee:	6898      	ldr	r0, [r3, #8]
 8005df0:	f001 f8c2 	bl	8006f78 <st_int8_copy>
 8005df4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005df8:	f859 200a 	ldr.w	r2, [r9, sl]
 8005dfc:	440b      	add	r3, r1
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	bf24      	itt	cs
 8005e02:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005e06:	1ad3      	subcs	r3, r2, r3
 8005e08:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e0c:	e7d9      	b.n	8005dc2 <ai_platform_network_process+0x3f6>
 8005e0e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005e12:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005e16:	3401      	adds	r4, #1
 8005e18:	b2a4      	uxth	r4, r4
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005e20:	f63f af7f 	bhi.w	8005d22 <ai_platform_network_process+0x356>
 8005e24:	4620      	mov	r0, r4
 8005e26:	b005      	add	sp, #20
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	2a01      	cmp	r2, #1
 8005e2e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005e30:	d03c      	beq.n	8005eac <ai_platform_network_process+0x4e0>
 8005e32:	f106 070c 	add.w	r7, r6, #12
 8005e36:	e76f      	b.n	8005d18 <ai_platform_network_process+0x34c>
 8005e38:	4625      	mov	r5, r4
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	2113      	movs	r1, #19
 8005e3e:	f105 0010 	add.w	r0, r5, #16
 8005e42:	f000 fa0d 	bl	8006260 <core_set_error>
 8005e46:	2400      	movs	r4, #0
 8005e48:	e72d      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005e4a:	9d02      	ldr	r5, [sp, #8]
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	2221      	movs	r2, #33	; 0x21
 8005e50:	2112      	movs	r1, #18
 8005e52:	f105 0010 	add.w	r0, r5, #16
 8005e56:	f000 fa03 	bl	8006260 <core_set_error>
 8005e5a:	e724      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005e5c:	9d02      	ldr	r5, [sp, #8]
 8005e5e:	e71b      	b.n	8005c98 <ai_platform_network_process+0x2cc>
 8005e60:	9d02      	ldr	r5, [sp, #8]
 8005e62:	4604      	mov	r4, r0
 8005e64:	2217      	movs	r2, #23
 8005e66:	2112      	movs	r1, #18
 8005e68:	f105 0010 	add.w	r0, r5, #16
 8005e6c:	f000 f9f8 	bl	8006260 <core_set_error>
 8005e70:	e719      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005e72:	9d02      	ldr	r5, [sp, #8]
 8005e74:	2219      	movs	r2, #25
 8005e76:	2112      	movs	r1, #18
 8005e78:	f105 0010 	add.w	r0, r5, #16
 8005e7c:	f000 f9f0 	bl	8006260 <core_set_error>
 8005e80:	2400      	movs	r4, #0
 8005e82:	e710      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005e84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005e88:	82ab      	strh	r3, [r5, #20]
 8005e8a:	e740      	b.n	8005d0e <ai_platform_network_process+0x342>
 8005e8c:	f104 0010 	add.w	r0, r4, #16
 8005e90:	2219      	movs	r2, #25
 8005e92:	2113      	movs	r1, #19
 8005e94:	f000 f9e4 	bl	8006260 <core_set_error>
 8005e98:	2400      	movs	r4, #0
 8005e9a:	e704      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005e9c:	f104 0010 	add.w	r0, r4, #16
 8005ea0:	2217      	movs	r2, #23
 8005ea2:	2113      	movs	r1, #19
 8005ea4:	f000 f9dc 	bl	8006260 <core_set_error>
 8005ea8:	4654      	mov	r4, sl
 8005eaa:	e6fc      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005eac:	2700      	movs	r7, #0
 8005eae:	e733      	b.n	8005d18 <ai_platform_network_process+0x34c>
 8005eb0:	4625      	mov	r5, r4
 8005eb2:	2221      	movs	r2, #33	; 0x21
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	2113      	movs	r1, #19
 8005eb8:	f105 0010 	add.w	r0, r5, #16
 8005ebc:	f000 f9d0 	bl	8006260 <core_set_error>
 8005ec0:	e6f1      	b.n	8005ca6 <ai_platform_network_process+0x2da>
 8005ec2:	4625      	mov	r5, r4
 8005ec4:	2217      	movs	r2, #23
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	2113      	movs	r1, #19
 8005eca:	f105 0010 	add.w	r0, r5, #16
 8005ece:	f000 f9c7 	bl	8006260 <core_set_error>
 8005ed2:	e6e8      	b.n	8005ca6 <ai_platform_network_process+0x2da>

08005ed4 <ai_platform_observer_node_info>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	b1f8      	cbz	r0, 8005f18 <ai_platform_observer_node_info+0x44>
 8005ed8:	4b4f      	ldr	r3, [pc, #316]	; (8006018 <ai_platform_observer_node_info+0x144>)
 8005eda:	6802      	ldr	r2, [r0, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	4604      	mov	r4, r0
 8005ee0:	d11a      	bne.n	8005f18 <ai_platform_observer_node_info+0x44>
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	f7fe fd5e 	bl	80049a4 <_ai_platform_acquire_crc>
 8005ee8:	4b4c      	ldr	r3, [pc, #304]	; (800601c <ai_platform_observer_node_info+0x148>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d03b      	beq.n	8005f6e <ai_platform_observer_node_info+0x9a>
 8005ef6:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <ai_platform_observer_node_info+0x14c>)
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005efe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1fb      	bne.n	8005efe <ai_platform_observer_node_info+0x2a>
 8005f06:	4b47      	ldr	r3, [pc, #284]	; (8006024 <ai_platform_observer_node_info+0x150>)
 8005f08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f10:	4b45      	ldr	r3, [pc, #276]	; (8006028 <ai_platform_observer_node_info+0x154>)
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d037      	beq.n	8005f86 <ai_platform_observer_node_info+0xb2>
 8005f16:	e7fe      	b.n	8005f16 <ai_platform_observer_node_info+0x42>
 8005f18:	f7fe fd44 	bl	80049a4 <_ai_platform_acquire_crc>
 8005f1c:	4b3f      	ldr	r3, [pc, #252]	; (800601c <ai_platform_observer_node_info+0x148>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f28:	d010      	beq.n	8005f4c <ai_platform_observer_node_info+0x78>
 8005f2a:	4a3d      	ldr	r2, [pc, #244]	; (8006020 <ai_platform_observer_node_info+0x14c>)
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1fb      	bne.n	8005f32 <ai_platform_observer_node_info+0x5e>
 8005f3a:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <ai_platform_observer_node_info+0x150>)
 8005f3c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f44:	4b38      	ldr	r3, [pc, #224]	; (8006028 <ai_platform_observer_node_info+0x154>)
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d00d      	beq.n	8005f66 <ai_platform_observer_node_info+0x92>
 8005f4a:	e7fe      	b.n	8005f4a <ai_platform_observer_node_info+0x76>
 8005f4c:	4a37      	ldr	r2, [pc, #220]	; (800602c <ai_platform_observer_node_info+0x158>)
 8005f4e:	2301      	movs	r3, #1
 8005f50:	6093      	str	r3, [r2, #8]
 8005f52:	6893      	ldr	r3, [r2, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1fc      	bne.n	8005f52 <ai_platform_observer_node_info+0x7e>
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <ai_platform_observer_node_info+0x150>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	4b32      	ldr	r3, [pc, #200]	; (8006028 <ai_platform_observer_node_info+0x154>)
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d000      	beq.n	8005f66 <ai_platform_observer_node_info+0x92>
 8005f64:	e7fe      	b.n	8005f64 <ai_platform_observer_node_info+0x90>
 8005f66:	f7fe fd1f 	bl	80049a8 <_ai_platform_release_crc>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	4a2f      	ldr	r2, [pc, #188]	; (800602c <ai_platform_observer_node_info+0x158>)
 8005f70:	2301      	movs	r3, #1
 8005f72:	6093      	str	r3, [r2, #8]
 8005f74:	6893      	ldr	r3, [r2, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1fc      	bne.n	8005f74 <ai_platform_observer_node_info+0xa0>
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <ai_platform_observer_node_info+0x150>)
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	4b29      	ldr	r3, [pc, #164]	; (8006028 <ai_platform_observer_node_info+0x154>)
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d11d      	bne.n	8005fc2 <ai_platform_observer_node_info+0xee>
 8005f86:	f7fe fd0f 	bl	80049a8 <_ai_platform_release_crc>
 8005f8a:	b1dd      	cbz	r5, 8005fc4 <ai_platform_observer_node_info+0xf0>
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	f013 0602 	ands.w	r6, r3, #2
 8005f92:	d03a      	beq.n	800600a <ai_platform_observer_node_info+0x136>
 8005f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f96:	2100      	movs	r1, #0
 8005f98:	e001      	b.n	8005f9e <ai_platform_observer_node_info+0xca>
 8005f9a:	b152      	cbz	r2, 8005fb2 <ai_platform_observer_node_info+0xde>
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	b288      	uxth	r0, r1
 8005fa0:	b13b      	cbz	r3, 8005fb2 <ai_platform_observer_node_info+0xde>
 8005fa2:	882a      	ldrh	r2, [r5, #0]
 8005fa4:	4282      	cmp	r2, r0
 8005fa6:	f101 0101 	add.w	r1, r1, #1
 8005faa:	d012      	beq.n	8005fd2 <ai_platform_observer_node_info+0xfe>
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d1f3      	bne.n	8005f9a <ai_platform_observer_node_info+0xc6>
 8005fb2:	2214      	movs	r2, #20
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	f104 0010 	add.w	r0, r4, #16
 8005fba:	f000 f951 	bl	8006260 <core_set_error>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	e7fe      	b.n	8005fc2 <ai_platform_observer_node_info+0xee>
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	18a0      	adds	r0, r4, r2
 8005fca:	f000 f949 	bl	8006260 <core_set_error>
 8005fce:	4628      	mov	r0, r5
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	60ea      	str	r2, [r5, #12]
 8005fd6:	8819      	ldrh	r1, [r3, #0]
 8005fd8:	f240 120f 	movw	r2, #271	; 0x10f
 8005fdc:	4291      	cmp	r1, r2
 8005fde:	d007      	beq.n	8005ff0 <ai_platform_observer_node_info+0x11c>
 8005fe0:	885a      	ldrh	r2, [r3, #2]
 8005fe2:	80aa      	strh	r2, [r5, #4]
 8005fe4:	881a      	ldrh	r2, [r3, #0]
 8005fe6:	806a      	strh	r2, [r5, #2]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60ab      	str	r3, [r5, #8]
 8005fec:	2001      	movs	r0, #1
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	8853      	ldrh	r3, [r2, #2]
 8005ff4:	80ab      	strh	r3, [r5, #4]
 8005ff6:	8813      	ldrh	r3, [r2, #0]
 8005ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006000:	806b      	strh	r3, [r5, #2]
 8006002:	6993      	ldr	r3, [r2, #24]
 8006004:	60ab      	str	r3, [r5, #8]
 8006006:	2001      	movs	r0, #1
 8006008:	bd70      	pop	{r4, r5, r6, pc}
 800600a:	2210      	movs	r2, #16
 800600c:	2111      	movs	r1, #17
 800600e:	18a0      	adds	r0, r4, r2
 8006010:	f000 f926 	bl	8006260 <core_set_error>
 8006014:	4630      	mov	r0, r6
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	a1c00100 	.word	0xa1c00100
 800601c:	e0042000 	.word	0xe0042000
 8006020:	58024000 	.word	0x58024000
 8006024:	f407a5c2 	.word	0xf407a5c2
 8006028:	b5e8b5cd 	.word	0xb5e8b5cd
 800602c:	40023000 	.word	0x40023000

08006030 <ai_platform_observer_register>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	b308      	cbz	r0, 800607a <ai_platform_observer_register+0x4a>
 8006036:	4691      	mov	r9, r2
 8006038:	461f      	mov	r7, r3
 800603a:	6802      	ldr	r2, [r0, #0]
 800603c:	4b45      	ldr	r3, [pc, #276]	; (8006154 <ai_platform_observer_register+0x124>)
 800603e:	429a      	cmp	r2, r3
 8006040:	4605      	mov	r5, r0
 8006042:	d11a      	bne.n	800607a <ai_platform_observer_register+0x4a>
 8006044:	4688      	mov	r8, r1
 8006046:	f7fe fcad 	bl	80049a4 <_ai_platform_acquire_crc>
 800604a:	4b43      	ldr	r3, [pc, #268]	; (8006158 <ai_platform_observer_register+0x128>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006056:	d03c      	beq.n	80060d2 <ai_platform_observer_register+0xa2>
 8006058:	4e40      	ldr	r6, [pc, #256]	; (800615c <ai_platform_observer_register+0x12c>)
 800605a:	2301      	movs	r3, #1
 800605c:	f8c6 3c08 	str.w	r3, [r6, #3080]	; 0xc08
 8006060:	f8d6 4c08 	ldr.w	r4, [r6, #3080]	; 0xc08
 8006064:	2c00      	cmp	r4, #0
 8006066:	d1fb      	bne.n	8006060 <ai_platform_observer_register+0x30>
 8006068:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <ai_platform_observer_register+0x130>)
 800606a:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
 800606e:	f8d6 2c00 	ldr.w	r2, [r6, #3072]	; 0xc00
 8006072:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <ai_platform_observer_register+0x134>)
 8006074:	429a      	cmp	r2, r3
 8006076:	d038      	beq.n	80060ea <ai_platform_observer_register+0xba>
 8006078:	e7fe      	b.n	8006078 <ai_platform_observer_register+0x48>
 800607a:	f7fe fc93 	bl	80049a4 <_ai_platform_acquire_crc>
 800607e:	4b36      	ldr	r3, [pc, #216]	; (8006158 <ai_platform_observer_register+0x128>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608a:	d010      	beq.n	80060ae <ai_platform_observer_register+0x7e>
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <ai_platform_observer_register+0x12c>)
 800608e:	2301      	movs	r3, #1
 8006090:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006094:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1fb      	bne.n	8006094 <ai_platform_observer_register+0x64>
 800609c:	4b30      	ldr	r3, [pc, #192]	; (8006160 <ai_platform_observer_register+0x130>)
 800609e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80060a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <ai_platform_observer_register+0x134>)
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d00d      	beq.n	80060c8 <ai_platform_observer_register+0x98>
 80060ac:	e7fe      	b.n	80060ac <ai_platform_observer_register+0x7c>
 80060ae:	4a2e      	ldr	r2, [pc, #184]	; (8006168 <ai_platform_observer_register+0x138>)
 80060b0:	2301      	movs	r3, #1
 80060b2:	6093      	str	r3, [r2, #8]
 80060b4:	6893      	ldr	r3, [r2, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1fc      	bne.n	80060b4 <ai_platform_observer_register+0x84>
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <ai_platform_observer_register+0x130>)
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	4b28      	ldr	r3, [pc, #160]	; (8006164 <ai_platform_observer_register+0x134>)
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d000      	beq.n	80060c8 <ai_platform_observer_register+0x98>
 80060c6:	e7fe      	b.n	80060c6 <ai_platform_observer_register+0x96>
 80060c8:	f7fe fc6e 	bl	80049a8 <_ai_platform_release_crc>
 80060cc:	2000      	movs	r0, #0
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	4a25      	ldr	r2, [pc, #148]	; (8006168 <ai_platform_observer_register+0x138>)
 80060d4:	2301      	movs	r3, #1
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	6893      	ldr	r3, [r2, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1fc      	bne.n	80060d8 <ai_platform_observer_register+0xa8>
 80060de:	4b20      	ldr	r3, [pc, #128]	; (8006160 <ai_platform_observer_register+0x130>)
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	4b1f      	ldr	r3, [pc, #124]	; (8006164 <ai_platform_observer_register+0x134>)
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d10b      	bne.n	8006102 <ai_platform_observer_register+0xd2>
 80060ea:	f7fe fc5d 	bl	80049a8 <_ai_platform_release_crc>
 80060ee:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80060f0:	b144      	cbz	r4, 8006104 <ai_platform_observer_register+0xd4>
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	2111      	movs	r1, #17
 80060f6:	f105 0010 	add.w	r0, r5, #16
 80060fa:	f000 f8b1 	bl	8006260 <core_set_error>
 80060fe:	2000      	movs	r0, #0
 8006100:	e7e5      	b.n	80060ce <ai_platform_observer_register+0x9e>
 8006102:	e7fe      	b.n	8006102 <ai_platform_observer_register+0xd2>
 8006104:	2014      	movs	r0, #20
 8006106:	f000 f8b7 	bl	8006278 <core_mem_alloc>
 800610a:	4606      	mov	r6, r0
 800610c:	b1d8      	cbz	r0, 8006146 <ai_platform_observer_register+0x116>
 800610e:	81c4      	strh	r4, [r0, #14]
 8006110:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006112:	2101      	movs	r1, #1
 8006114:	e006      	b.n	8006124 <ai_platform_observer_register+0xf4>
 8006116:	81f1      	strh	r1, [r6, #14]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	429a      	cmp	r2, r3
 800611c:	b2a1      	uxth	r1, r4
 800611e:	d004      	beq.n	800612a <ai_platform_observer_register+0xfa>
 8006120:	b11a      	cbz	r2, 800612a <ai_platform_observer_register+0xfa>
 8006122:	4613      	mov	r3, r2
 8006124:	1c4c      	adds	r4, r1, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f5      	bne.n	8006116 <ai_platform_observer_register+0xe6>
 800612a:	4a10      	ldr	r2, [pc, #64]	; (800616c <ai_platform_observer_register+0x13c>)
 800612c:	f8c6 8000 	str.w	r8, [r6]
 8006130:	b2fb      	uxtb	r3, r7
 8006132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006136:	2100      	movs	r1, #0
 8006138:	e9c6 9301 	strd	r9, r3, [r6, #4]
 800613c:	81b1      	strh	r1, [r6, #12]
 800613e:	2001      	movs	r0, #1
 8006140:	e9c5 260f 	strd	r2, r6, [r5, #60]	; 0x3c
 8006144:	e7c3      	b.n	80060ce <ai_platform_observer_register+0x9e>
 8006146:	2210      	movs	r2, #16
 8006148:	2131      	movs	r1, #49	; 0x31
 800614a:	18a8      	adds	r0, r5, r2
 800614c:	f000 f888 	bl	8006260 <core_set_error>
 8006150:	4630      	mov	r0, r6
 8006152:	e7bc      	b.n	80060ce <ai_platform_observer_register+0x9e>
 8006154:	a1c00100 	.word	0xa1c00100
 8006158:	e0042000 	.word	0xe0042000
 800615c:	58024000 	.word	0x58024000
 8006160:	f407a5c2 	.word	0xf407a5c2
 8006164:	b5e8b5cd 	.word	0xb5e8b5cd
 8006168:	40023000 	.word	0x40023000
 800616c:	0800488d 	.word	0x0800488d

08006170 <ai_platform_observer_unregister>:
 8006170:	b510      	push	{r4, lr}
 8006172:	b1f0      	cbz	r0, 80061b2 <ai_platform_observer_unregister+0x42>
 8006174:	4b30      	ldr	r3, [pc, #192]	; (8006238 <ai_platform_observer_unregister+0xc8>)
 8006176:	6802      	ldr	r2, [r0, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	4604      	mov	r4, r0
 800617c:	d119      	bne.n	80061b2 <ai_platform_observer_unregister+0x42>
 800617e:	f7fe fc11 	bl	80049a4 <_ai_platform_acquire_crc>
 8006182:	4b2e      	ldr	r3, [pc, #184]	; (800623c <ai_platform_observer_unregister+0xcc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618e:	d03b      	beq.n	8006208 <ai_platform_observer_unregister+0x98>
 8006190:	4a2b      	ldr	r2, [pc, #172]	; (8006240 <ai_platform_observer_unregister+0xd0>)
 8006192:	2301      	movs	r3, #1
 8006194:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006198:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1fb      	bne.n	8006198 <ai_platform_observer_unregister+0x28>
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <ai_platform_observer_unregister+0xd4>)
 80061a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061aa:	4b27      	ldr	r3, [pc, #156]	; (8006248 <ai_platform_observer_unregister+0xd8>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d037      	beq.n	8006220 <ai_platform_observer_unregister+0xb0>
 80061b0:	e7fe      	b.n	80061b0 <ai_platform_observer_unregister+0x40>
 80061b2:	f7fe fbf7 	bl	80049a4 <_ai_platform_acquire_crc>
 80061b6:	4b21      	ldr	r3, [pc, #132]	; (800623c <ai_platform_observer_unregister+0xcc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c2:	d010      	beq.n	80061e6 <ai_platform_observer_unregister+0x76>
 80061c4:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <ai_platform_observer_unregister+0xd0>)
 80061c6:	2301      	movs	r3, #1
 80061c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80061cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1fb      	bne.n	80061cc <ai_platform_observer_unregister+0x5c>
 80061d4:	4b1b      	ldr	r3, [pc, #108]	; (8006244 <ai_platform_observer_unregister+0xd4>)
 80061d6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <ai_platform_observer_unregister+0xd8>)
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d00d      	beq.n	8006200 <ai_platform_observer_unregister+0x90>
 80061e4:	e7fe      	b.n	80061e4 <ai_platform_observer_unregister+0x74>
 80061e6:	4a19      	ldr	r2, [pc, #100]	; (800624c <ai_platform_observer_unregister+0xdc>)
 80061e8:	2301      	movs	r3, #1
 80061ea:	6093      	str	r3, [r2, #8]
 80061ec:	6893      	ldr	r3, [r2, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1fc      	bne.n	80061ec <ai_platform_observer_unregister+0x7c>
 80061f2:	4b14      	ldr	r3, [pc, #80]	; (8006244 <ai_platform_observer_unregister+0xd4>)
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	4b13      	ldr	r3, [pc, #76]	; (8006248 <ai_platform_observer_unregister+0xd8>)
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d000      	beq.n	8006200 <ai_platform_observer_unregister+0x90>
 80061fe:	e7fe      	b.n	80061fe <ai_platform_observer_unregister+0x8e>
 8006200:	f7fe fbd2 	bl	80049a8 <_ai_platform_release_crc>
 8006204:	2000      	movs	r0, #0
 8006206:	bd10      	pop	{r4, pc}
 8006208:	4a10      	ldr	r2, [pc, #64]	; (800624c <ai_platform_observer_unregister+0xdc>)
 800620a:	2301      	movs	r3, #1
 800620c:	6093      	str	r3, [r2, #8]
 800620e:	6893      	ldr	r3, [r2, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1fc      	bne.n	800620e <ai_platform_observer_unregister+0x9e>
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <ai_platform_observer_unregister+0xd4>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <ai_platform_observer_unregister+0xd8>)
 800621c:	429a      	cmp	r2, r3
 800621e:	d10a      	bne.n	8006236 <ai_platform_observer_unregister+0xc6>
 8006220:	f7fe fbc2 	bl	80049a8 <_ai_platform_release_crc>
 8006224:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006226:	b108      	cbz	r0, 800622c <ai_platform_observer_unregister+0xbc>
 8006228:	f000 f834 	bl	8006294 <core_mem_free>
 800622c:	2300      	movs	r3, #0
 800622e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8006232:	2001      	movs	r0, #1
 8006234:	bd10      	pop	{r4, pc}
 8006236:	e7fe      	b.n	8006236 <ai_platform_observer_unregister+0xc6>
 8006238:	a1c00100 	.word	0xa1c00100
 800623c:	e0042000 	.word	0xe0042000
 8006240:	58024000 	.word	0x58024000
 8006244:	f407a5c2 	.word	0xf407a5c2
 8006248:	b5e8b5cd 	.word	0xb5e8b5cd
 800624c:	40023000 	.word	0x40023000

08006250 <core_init>:
 8006250:	2001      	movs	r0, #1
 8006252:	4770      	bx	lr

08006254 <core_get_error>:
 8006254:	4603      	mov	r3, r0
 8006256:	2200      	movs	r2, #0
 8006258:	6800      	ldr	r0, [r0, #0]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <core_set_error>:
 8006260:	4603      	mov	r3, r0
 8006262:	7800      	ldrb	r0, [r0, #0]
 8006264:	b108      	cbz	r0, 800626a <core_set_error+0xa>
 8006266:	2000      	movs	r0, #0
 8006268:	4770      	bx	lr
 800626a:	7019      	strb	r1, [r3, #0]
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	f362 211f 	bfi	r1, r2, #8, #24
 8006272:	2001      	movs	r0, #1
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	4770      	bx	lr

08006278 <core_mem_alloc>:
 8006278:	b148      	cbz	r0, 800628e <core_mem_alloc+0x16>
 800627a:	b508      	push	{r3, lr}
 800627c:	3004      	adds	r0, #4
 800627e:	f7fd fc45 	bl	8003b0c <__wrap_malloc>
 8006282:	b110      	cbz	r0, 800628a <core_mem_alloc+0x12>
 8006284:	6000      	str	r0, [r0, #0]
 8006286:	3004      	adds	r0, #4
 8006288:	bd08      	pop	{r3, pc}
 800628a:	2000      	movs	r0, #0
 800628c:	bd08      	pop	{r3, pc}
 800628e:	2000      	movs	r0, #0
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop

08006294 <core_mem_free>:
 8006294:	b150      	cbz	r0, 80062ac <core_mem_free+0x18>
 8006296:	b508      	push	{r3, lr}
 8006298:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800629c:	1f03      	subs	r3, r0, #4
 800629e:	4293      	cmp	r3, r2
 80062a0:	d103      	bne.n	80062aa <core_mem_free+0x16>
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fd fc5a 	bl	8003b5c <__wrap_free>
 80062a8:	2000      	movs	r0, #0
 80062aa:	bd08      	pop	{r3, pc}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop

080062b0 <ai_check_custom_types>:
 80062b0:	b082      	sub	sp, #8
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <ai_check_custom_types+0x50>)
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	b118      	cbz	r0, 80062c0 <ai_check_custom_types+0x10>
 80062b8:	7803      	ldrb	r3, [r0, #0]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d002      	beq.n	80062c4 <ai_check_custom_types+0x14>
 80062be:	2000      	movs	r0, #0
 80062c0:	b002      	add	sp, #8
 80062c2:	4770      	bx	lr
 80062c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <ai_check_custom_types+0x26>
 80062cc:	2001      	movs	r0, #1
 80062ce:	f080 0001 	eor.w	r0, r0, #1
 80062d2:	b002      	add	sp, #8
 80062d4:	4770      	bx	lr
 80062d6:	7842      	ldrb	r2, [r0, #1]
 80062d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80062dc:	429a      	cmp	r2, r3
 80062de:	f100 0001 	add.w	r0, r0, #1
 80062e2:	d1f3      	bne.n	80062cc <ai_check_custom_types+0x1c>
 80062e4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80062e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d1ed      	bne.n	80062cc <ai_check_custom_types+0x1c>
 80062f0:	7842      	ldrb	r2, [r0, #1]
 80062f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d1e8      	bne.n	80062cc <ai_check_custom_types+0x1c>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e7e7      	b.n	80062ce <ai_check_custom_types+0x1e>
 80062fe:	bf00      	nop
 8006300:	84048403 	.word	0x84048403

08006304 <ai_layer_type_name>:
 8006304:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
 8006308:	d809      	bhi.n	800631e <ai_layer_type_name+0x1a>
 800630a:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 800630e:	d217      	bcs.n	8006340 <ai_layer_type_name+0x3c>
 8006310:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8006314:	d80e      	bhi.n	8006334 <ai_layer_type_name+0x30>
 8006316:	28ff      	cmp	r0, #255	; 0xff
 8006318:	d805      	bhi.n	8006326 <ai_layer_type_name+0x22>
 800631a:	480e      	ldr	r0, [pc, #56]	; (8006354 <ai_layer_type_name+0x50>)
 800631c:	4770      	bx	lr
 800631e:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 8006322:	2b03      	cmp	r3, #3
 8006324:	d8f9      	bhi.n	800631a <ai_layer_type_name+0x16>
 8006326:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <ai_layer_type_name+0x54>)
 800632c:	b280      	uxth	r0, r0
 800632e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006332:	4770      	bx	lr
 8006334:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 8006338:	2b27      	cmp	r3, #39	; 0x27
 800633a:	d9f4      	bls.n	8006326 <ai_layer_type_name+0x22>
 800633c:	4805      	ldr	r0, [pc, #20]	; (8006354 <ai_layer_type_name+0x50>)
 800633e:	4770      	bx	lr
 8006340:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 8006344:	b29a      	uxth	r2, r3
 8006346:	4905      	ldr	r1, [pc, #20]	; (800635c <ai_layer_type_name+0x58>)
 8006348:	2301      	movs	r3, #1
 800634a:	4093      	lsls	r3, r2
 800634c:	420b      	tst	r3, r1
 800634e:	d1ea      	bne.n	8006326 <ai_layer_type_name+0x22>
 8006350:	4800      	ldr	r0, [pc, #0]	; (8006354 <ai_layer_type_name+0x50>)
 8006352:	4770      	bx	lr
 8006354:	0800bc7c 	.word	0x0800bc7c
 8006358:	0800be68 	.word	0x0800be68
 800635c:	00012007 	.word	0x00012007

08006360 <ai_layers_init_all>:
 8006360:	4601      	mov	r1, r0
 8006362:	2000      	movs	r0, #0
 8006364:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006366:	b143      	cbz	r3, 800637a <ai_layers_init_all+0x1a>
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	60d9      	str	r1, [r3, #12]
 800636c:	429a      	cmp	r2, r3
 800636e:	f100 0001 	add.w	r0, r0, #1
 8006372:	d002      	beq.n	800637a <ai_layers_init_all+0x1a>
 8006374:	b10a      	cbz	r2, 800637a <ai_layers_init_all+0x1a>
 8006376:	4613      	mov	r3, r2
 8006378:	e7f5      	b.n	8006366 <ai_layers_init_all+0x6>
 800637a:	4770      	bx	lr

0800637c <ai_layers_post_init_all>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006380:	2500      	movs	r5, #0
 8006382:	b16c      	cbz	r4, 80063a0 <ai_layers_post_init_all+0x24>
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	07db      	lsls	r3, r3, #31
 8006388:	d504      	bpl.n	8006394 <ai_layers_post_init_all+0x18>
 800638a:	6a23      	ldr	r3, [r4, #32]
 800638c:	4620      	mov	r0, r4
 800638e:	b10b      	cbz	r3, 8006394 <ai_layers_post_init_all+0x18>
 8006390:	4798      	blx	r3
 8006392:	3501      	adds	r5, #1
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	42a3      	cmp	r3, r4
 8006398:	d002      	beq.n	80063a0 <ai_layers_post_init_all+0x24>
 800639a:	b10b      	cbz	r3, 80063a0 <ai_layers_post_init_all+0x24>
 800639c:	461c      	mov	r4, r3
 800639e:	e7f0      	b.n	8006382 <ai_layers_post_init_all+0x6>
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd38      	pop	{r3, r4, r5, pc}

080063a4 <ai_layers_forward_all>:
 80063a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80063ac:	4604      	mov	r4, r0
 80063ae:	f1b8 0f00 	cmp.w	r8, #0
 80063b2:	d02b      	beq.n	800640c <ai_layers_forward_all+0x68>
 80063b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80063b6:	6381      	str	r1, [r0, #56]	; 0x38
 80063b8:	b321      	cbz	r1, 8006404 <ai_layers_forward_all+0x60>
 80063ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80063bc:	2001      	movs	r0, #1
 80063be:	47c0      	blx	r8
 80063c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80063c2:	b1fe      	cbz	r6, 8006404 <ai_layers_forward_all+0x60>
 80063c4:	2700      	movs	r7, #0
 80063c6:	4631      	mov	r1, r6
 80063c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80063ca:	2002      	movs	r0, #2
 80063cc:	47c0      	blx	r8
 80063ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80063d0:	4628      	mov	r0, r5
 80063d2:	696b      	ldr	r3, [r5, #20]
 80063d4:	4798      	blx	r3
 80063d6:	692e      	ldr	r6, [r5, #16]
 80063d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80063da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063dc:	42b5      	cmp	r5, r6
 80063de:	f04f 0003 	mov.w	r0, #3
 80063e2:	d007      	beq.n	80063f4 <ai_layers_forward_all+0x50>
 80063e4:	47c0      	blx	r8
 80063e6:	3701      	adds	r7, #1
 80063e8:	63a6      	str	r6, [r4, #56]	; 0x38
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d1eb      	bne.n	80063c6 <ai_layers_forward_all+0x22>
 80063ee:	4638      	mov	r0, r7
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f4:	2003      	movs	r0, #3
 80063f6:	47c0      	blx	r8
 80063f8:	2300      	movs	r3, #0
 80063fa:	3701      	adds	r7, #1
 80063fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80063fe:	4638      	mov	r0, r7
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	2700      	movs	r7, #0
 8006406:	4638      	mov	r0, r7
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800640e:	6385      	str	r5, [r0, #56]	; 0x38
 8006410:	2d00      	cmp	r5, #0
 8006412:	d0f7      	beq.n	8006404 <ai_layers_forward_all+0x60>
 8006414:	4647      	mov	r7, r8
 8006416:	696b      	ldr	r3, [r5, #20]
 8006418:	4628      	mov	r0, r5
 800641a:	4798      	blx	r3
 800641c:	462b      	mov	r3, r5
 800641e:	692d      	ldr	r5, [r5, #16]
 8006420:	429d      	cmp	r5, r3
 8006422:	d004      	beq.n	800642e <ai_layers_forward_all+0x8a>
 8006424:	63a5      	str	r5, [r4, #56]	; 0x38
 8006426:	3701      	adds	r7, #1
 8006428:	2d00      	cmp	r5, #0
 800642a:	d1f4      	bne.n	8006416 <ai_layers_forward_all+0x72>
 800642c:	e7df      	b.n	80063ee <ai_layers_forward_all+0x4a>
 800642e:	2300      	movs	r3, #0
 8006430:	63a3      	str	r3, [r4, #56]	; 0x38
 8006432:	3701      	adds	r7, #1
 8006434:	e7db      	b.n	80063ee <ai_layers_forward_all+0x4a>
 8006436:	bf00      	nop

08006438 <ai_layers_destroy_all>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800643c:	2500      	movs	r5, #0
 800643e:	b16c      	cbz	r4, 800645c <ai_layers_destroy_all+0x24>
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	075b      	lsls	r3, r3, #29
 8006444:	d504      	bpl.n	8006450 <ai_layers_destroy_all+0x18>
 8006446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006448:	4620      	mov	r0, r4
 800644a:	b10b      	cbz	r3, 8006450 <ai_layers_destroy_all+0x18>
 800644c:	4798      	blx	r3
 800644e:	3501      	adds	r5, #1
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	42a3      	cmp	r3, r4
 8006454:	d002      	beq.n	800645c <ai_layers_destroy_all+0x24>
 8006456:	b10b      	cbz	r3, 800645c <ai_layers_destroy_all+0x24>
 8006458:	461c      	mov	r4, r3
 800645a:	e7f0      	b.n	800643e <ai_layers_destroy_all+0x6>
 800645c:	4628      	mov	r0, r5
 800645e:	bd38      	pop	{r3, r4, r5, pc}

08006460 <forward_dense>:
 8006460:	6983      	ldr	r3, [r0, #24]
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	2a00      	cmp	r2, #0
 8006466:	f000 8181 	beq.w	800676c <forward_dense+0x30c>
 800646a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646e:	ed2d 8b02 	vpush	{d8}
 8006472:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006476:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800647a:	b095      	sub	sp, #84	; 0x54
 800647c:	b105      	cbz	r5, 8006480 <forward_dense+0x20>
 800647e:	682d      	ldr	r5, [r5, #0]
 8006480:	2a01      	cmp	r2, #1
 8006482:	f000 828f 	beq.w	80069a4 <forward_dense+0x544>
 8006486:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800648a:	b106      	cbz	r6, 800648e <forward_dense+0x2e>
 800648c:	6836      	ldr	r6, [r6, #0]
 800648e:	2a02      	cmp	r2, #2
 8006490:	f000 816e 	beq.w	8006770 <forward_dense+0x310>
 8006494:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006498:	930b      	str	r3, [sp, #44]	; 0x2c
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8274 	beq.w	8006988 <forward_dense+0x528>
 80064a0:	4619      	mov	r1, r3
 80064a2:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80064a6:	6809      	ldr	r1, [r1, #0]
 80064a8:	910d      	str	r1, [sp, #52]	; 0x34
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	f240 826e 	bls.w	800698c <forward_dense+0x52c>
 80064b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b6:	460b      	mov	r3, r1
 80064b8:	68e8      	ldr	r0, [r5, #12]
 80064ba:	68f7      	ldr	r7, [r6, #12]
 80064bc:	6840      	ldr	r0, [r0, #4]
 80064be:	6999      	ldr	r1, [r3, #24]
 80064c0:	9013      	str	r0, [sp, #76]	; 0x4c
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	680b      	ldr	r3, [r1, #0]
 80064c6:	9012      	str	r0, [sp, #72]	; 0x48
 80064c8:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80064cc:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80064d0:	fb00 f404 	mul.w	r4, r0, r4
 80064d4:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80064d8:	fa4e f000 	asr.w	r0, lr, r0
 80064dc:	2a03      	cmp	r2, #3
 80064de:	9010      	str	r0, [sp, #64]	; 0x40
 80064e0:	f000 825d 	beq.w	800699e <forward_dense+0x53e>
 80064e4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80064e8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	f000 8246 	beq.w	800697e <forward_dense+0x51e>
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	f000 8242 	beq.w	800697e <forward_dense+0x51e>
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8006500:	f000 822c 	beq.w	800695c <forward_dense+0x4fc>
 8006504:	2b08      	cmp	r3, #8
 8006506:	f000 8229 	beq.w	800695c <forward_dense+0x4fc>
 800650a:	f04f 0b00 	mov.w	fp, #0
 800650e:	69b2      	ldr	r2, [r6, #24]
 8006510:	69ab      	ldr	r3, [r5, #24]
 8006512:	6891      	ldr	r1, [r2, #8]
 8006514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6952      	ldr	r2, [r2, #20]
 800651a:	9106      	str	r1, [sp, #24]
 800651c:	fb07 f404 	mul.w	r4, r7, r4
 8006520:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006526:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800652a:	4281      	cmp	r1, r0
 800652c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8006530:	900e      	str	r0, [sp, #56]	; 0x38
 8006532:	940c      	str	r4, [sp, #48]	; 0x30
 8006534:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006538:	f080 8113 	bcs.w	8006762 <forward_dense+0x302>
 800653c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800653e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800678c <forward_dense+0x32c>
 8006542:	f021 0201 	bic.w	r2, r1, #1
 8006546:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800654a:	9204      	str	r2, [sp, #16]
 800654c:	f001 0201 	and.w	r2, r1, #1
 8006550:	08c8      	lsrs	r0, r1, #3
 8006552:	9208      	str	r2, [sp, #32]
 8006554:	008a      	lsls	r2, r1, #2
 8006556:	f001 0a07 	and.w	sl, r1, #7
 800655a:	920f      	str	r2, [sp, #60]	; 0x3c
 800655c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8006560:	3320      	adds	r3, #32
 8006562:	465c      	mov	r4, fp
 8006564:	9007      	str	r0, [sp, #28]
 8006566:	46cb      	mov	fp, r9
 8006568:	9205      	str	r2, [sp, #20]
 800656a:	9302      	str	r3, [sp, #8]
 800656c:	46c1      	mov	r9, r8
 800656e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	9b02      	ldr	r3, [sp, #8]
 800657a:	3b20      	subs	r3, #32
 800657c:	930a      	str	r3, [sp, #40]	; 0x28
 800657e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006580:	b10b      	cbz	r3, 8006586 <forward_dense+0x126>
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2c00      	cmp	r4, #0
 8006588:	f000 81da 	beq.w	8006940 <forward_dense+0x4e0>
 800658c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800658e:	2904      	cmp	r1, #4
 8006590:	9906      	ldr	r1, [sp, #24]
 8006592:	f000 80fd 	beq.w	8006790 <forward_dense+0x330>
 8006596:	4549      	cmp	r1, r9
 8006598:	f080 80d2 	bcs.w	8006740 <forward_dense+0x2e0>
 800659c:	460f      	mov	r7, r1
 800659e:	9907      	ldr	r1, [sp, #28]
 80065a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80065a4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80065a8:	1c4e      	adds	r6, r1, #1
 80065aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80065ae:	4694      	mov	ip, r2
 80065b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065b2:	468e      	mov	lr, r1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80de 	beq.w	8006776 <forward_dense+0x316>
 80065ba:	ecf3 2a01 	vldmia	r3!, {s5}
 80065be:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800678c <forward_dense+0x32c>
 80065c2:	f1be 0f00 	cmp.w	lr, #0
 80065c6:	f000 80de 	beq.w	8006786 <forward_dense+0x326>
 80065ca:	f10c 0108 	add.w	r1, ip, #8
 80065ce:	4640      	mov	r0, r8
 80065d0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80065d4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80065d8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80065dc:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80065e0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80065e4:	ed10 5a04 	vldr	s10, [r0, #-16]
 80065e8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80065ec:	ed10 6a02 	vldr	s12, [r0, #-8]
 80065f0:	ed50 6a01 	vldr	s13, [r0, #-4]
 80065f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80065f8:	edd5 7a00 	vldr	s15, [r5]
 80065fc:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8006600:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006604:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006608:	ed95 3a00 	vldr	s6, [r5]
 800660c:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8006610:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006614:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006618:	3108      	adds	r1, #8
 800661a:	edd5 3a00 	vldr	s7, [r5]
 800661e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8006622:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006626:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800662a:	3020      	adds	r0, #32
 800662c:	ed95 4a00 	vldr	s8, [r5]
 8006630:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8006634:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006638:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800663c:	edd5 4a00 	vldr	s9, [r5]
 8006640:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8006644:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006648:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800664c:	ed95 5a00 	vldr	s10, [r5]
 8006650:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8006654:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006658:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800665c:	edd5 5a00 	vldr	s11, [r5]
 8006660:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8006664:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006668:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800666c:	428e      	cmp	r6, r1
 800666e:	ed95 6a00 	vldr	s12, [r5]
 8006672:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800667a:	d1a9      	bne.n	80065d0 <forward_dense+0x170>
 800667c:	f1a6 0108 	sub.w	r1, r6, #8
 8006680:	4650      	mov	r0, sl
 8006682:	2a00      	cmp	r2, #0
 8006684:	d04a      	beq.n	800671c <forward_dense+0x2bc>
 8006686:	780d      	ldrb	r5, [r1, #0]
 8006688:	edd0 6a00 	vldr	s13, [r0]
 800668c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006690:	edd5 7a00 	vldr	s15, [r5]
 8006694:	2a01      	cmp	r2, #1
 8006696:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800669a:	d03f      	beq.n	800671c <forward_dense+0x2bc>
 800669c:	784d      	ldrb	r5, [r1, #1]
 800669e:	edd0 6a01 	vldr	s13, [r0, #4]
 80066a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80066a6:	edd5 7a00 	vldr	s15, [r5]
 80066aa:	2a02      	cmp	r2, #2
 80066ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066b0:	d034      	beq.n	800671c <forward_dense+0x2bc>
 80066b2:	788d      	ldrb	r5, [r1, #2]
 80066b4:	edd0 6a02 	vldr	s13, [r0, #8]
 80066b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80066bc:	edd5 7a00 	vldr	s15, [r5]
 80066c0:	2a03      	cmp	r2, #3
 80066c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066c6:	d029      	beq.n	800671c <forward_dense+0x2bc>
 80066c8:	78cd      	ldrb	r5, [r1, #3]
 80066ca:	edd0 6a03 	vldr	s13, [r0, #12]
 80066ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80066d2:	edd5 7a00 	vldr	s15, [r5]
 80066d6:	2a04      	cmp	r2, #4
 80066d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066dc:	d01e      	beq.n	800671c <forward_dense+0x2bc>
 80066de:	790d      	ldrb	r5, [r1, #4]
 80066e0:	edd0 6a04 	vldr	s13, [r0, #16]
 80066e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80066e8:	edd5 7a00 	vldr	s15, [r5]
 80066ec:	2a05      	cmp	r2, #5
 80066ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066f2:	d013      	beq.n	800671c <forward_dense+0x2bc>
 80066f4:	794d      	ldrb	r5, [r1, #5]
 80066f6:	edd0 6a05 	vldr	s13, [r0, #20]
 80066fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80066fe:	edd5 7a00 	vldr	s15, [r5]
 8006702:	2a06      	cmp	r2, #6
 8006704:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006708:	d008      	beq.n	800671c <forward_dense+0x2bc>
 800670a:	7989      	ldrb	r1, [r1, #6]
 800670c:	edd0 7a06 	vldr	s15, [r0, #24]
 8006710:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006714:	edd1 6a00 	vldr	s13, [r1]
 8006718:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800671c:	44dc      	add	ip, fp
 800671e:	445e      	add	r6, fp
 8006720:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006724:	eca7 7a01 	vstmia	r7!, {s14}
 8006728:	454f      	cmp	r7, r9
 800672a:	f4ff af43 	bcc.w	80065b4 <forward_dense+0x154>
 800672e:	9a06      	ldr	r2, [sp, #24]
 8006730:	eba9 0302 	sub.w	r3, r9, r2
 8006734:	3b01      	subs	r3, #1
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	3304      	adds	r3, #4
 800673c:	18d3      	adds	r3, r2, r3
 800673e:	9306      	str	r3, [sp, #24]
 8006740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006742:	9a05      	ldr	r2, [sp, #20]
 8006744:	4499      	add	r9, r3
 8006746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006748:	441a      	add	r2, r3
 800674a:	9205      	str	r2, [sp, #20]
 800674c:	9a02      	ldr	r2, [sp, #8]
 800674e:	441a      	add	r2, r3
 8006750:	9202      	str	r2, [sp, #8]
 8006752:	9a04      	ldr	r2, [sp, #16]
 8006754:	441a      	add	r2, r3
 8006756:	9204      	str	r2, [sp, #16]
 8006758:	9b06      	ldr	r3, [sp, #24]
 800675a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800675c:	4293      	cmp	r3, r2
 800675e:	f4ff af08 	bcc.w	8006572 <forward_dense+0x112>
 8006762:	b015      	add	sp, #84	; 0x54
 8006764:	ecbd 8b02 	vpop	{d8}
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	6853      	ldr	r3, [r2, #4]
 800676e:	deff      	udf	#255	; 0xff
 8006770:	2300      	movs	r3, #0
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	deff      	udf	#255	; 0xff
 8006776:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800678c <forward_dense+0x32c>
 800677a:	eef0 2a48 	vmov.f32	s5, s16
 800677e:	f1be 0f00 	cmp.w	lr, #0
 8006782:	f47f af22 	bne.w	80065ca <forward_dense+0x16a>
 8006786:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006788:	4661      	mov	r1, ip
 800678a:	e77a      	b.n	8006682 <forward_dense+0x222>
 800678c:	00000000 	.word	0x00000000
 8006790:	4549      	cmp	r1, r9
 8006792:	d2d5      	bcs.n	8006740 <forward_dense+0x2e0>
 8006794:	9807      	ldr	r0, [sp, #28]
 8006796:	9103      	str	r1, [sp, #12]
 8006798:	9904      	ldr	r1, [sp, #16]
 800679a:	f100 0c01 	add.w	ip, r0, #1
 800679e:	3901      	subs	r1, #1
 80067a0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80067a4:	9109      	str	r1, [sp, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80b2 	beq.w	8006910 <forward_dense+0x4b0>
 80067ac:	9907      	ldr	r1, [sp, #28]
 80067ae:	ecf3 2a01 	vldmia	r3!, {s5}
 80067b2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800678c <forward_dense+0x32c>
 80067b6:	2900      	cmp	r1, #0
 80067b8:	f000 80b2 	beq.w	8006920 <forward_dense+0x4c0>
 80067bc:	9902      	ldr	r1, [sp, #8]
 80067be:	1d10      	adds	r0, r2, #4
 80067c0:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80067c4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80067c8:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80067cc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80067d0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80067d4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80067d8:	ed11 5a04 	vldr	s10, [r1, #-16]
 80067dc:	ed51 5a03 	vldr	s11, [r1, #-12]
 80067e0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80067e4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80067e8:	f006 070f 	and.w	r7, r6, #15
 80067ec:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80067f0:	edd7 7a00 	vldr	s15, [r7]
 80067f4:	0936      	lsrs	r6, r6, #4
 80067f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80067fa:	ed96 3a00 	vldr	s6, [r6]
 80067fe:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006802:	092e      	lsrs	r6, r5, #4
 8006804:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006808:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800680c:	f005 050f 	and.w	r5, r5, #15
 8006810:	edd6 3a00 	vldr	s7, [r6]
 8006814:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8006818:	eee3 7a84 	vfma.f32	s15, s7, s8
 800681c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006820:	0937      	lsrs	r7, r6, #4
 8006822:	ed95 4a00 	vldr	s8, [r5]
 8006826:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800682a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800682e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006832:	f006 060f 	and.w	r6, r6, #15
 8006836:	edd7 4a00 	vldr	s9, [r7]
 800683a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800683e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006842:	3004      	adds	r0, #4
 8006844:	ed96 5a00 	vldr	s10, [r6]
 8006848:	092e      	lsrs	r6, r5, #4
 800684a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800684e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006852:	f005 050f 	and.w	r5, r5, #15
 8006856:	edd6 5a00 	vldr	s11, [r6]
 800685a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800685e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006862:	4584      	cmp	ip, r0
 8006864:	ed95 6a00 	vldr	s12, [r5]
 8006868:	eee6 7a26 	vfma.f32	s15, s12, s13
 800686c:	f101 0120 	add.w	r1, r1, #32
 8006870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006874:	d1a4      	bne.n	80067c0 <forward_dense+0x360>
 8006876:	f8dd e014 	ldr.w	lr, [sp, #20]
 800687a:	f1ac 0804 	sub.w	r8, ip, #4
 800687e:	9904      	ldr	r1, [sp, #16]
 8006880:	458e      	cmp	lr, r1
 8006882:	d22a      	bcs.n	80068da <forward_dense+0x47a>
 8006884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006886:	eba1 070e 	sub.w	r7, r1, lr
 800688a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800688e:	f10e 0008 	add.w	r0, lr, #8
 8006892:	f108 36ff 	add.w	r6, r8, #4294967295
 8006896:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800689a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800689e:	ed50 5a01 	vldr	s11, [r0, #-4]
 80068a2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80068a6:	f001 050f 	and.w	r5, r1, #15
 80068aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80068ae:	edd5 7a00 	vldr	s15, [r5]
 80068b2:	0909      	lsrs	r1, r1, #4
 80068b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80068b8:	ed91 6a00 	vldr	s12, [r1]
 80068bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80068c0:	42b7      	cmp	r7, r6
 80068c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80068c6:	f100 0008 	add.w	r0, r0, #8
 80068ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068ce:	d1e4      	bne.n	800689a <forward_dense+0x43a>
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	44d0      	add	r8, sl
 80068d6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80068da:	9908      	ldr	r1, [sp, #32]
 80068dc:	b321      	cbz	r1, 8006928 <forward_dense+0x4c8>
 80068de:	f898 1000 	ldrb.w	r1, [r8]
 80068e2:	edde 7a00 	vldr	s15, [lr]
 80068e6:	0909      	lsrs	r1, r1, #4
 80068e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80068ec:	edd1 6a00 	vldr	s13, [r1]
 80068f0:	9903      	ldr	r1, [sp, #12]
 80068f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068f6:	445a      	add	r2, fp
 80068f8:	44dc      	add	ip, fp
 80068fa:	ee72 2a87 	vadd.f32	s5, s5, s14
 80068fe:	ece1 2a01 	vstmia	r1!, {s5}
 8006902:	4589      	cmp	r9, r1
 8006904:	9103      	str	r1, [sp, #12]
 8006906:	f67f af12 	bls.w	800672e <forward_dense+0x2ce>
 800690a:	2b00      	cmp	r3, #0
 800690c:	f47f af4e 	bne.w	80067ac <forward_dense+0x34c>
 8006910:	9907      	ldr	r1, [sp, #28]
 8006912:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800678c <forward_dense+0x32c>
 8006916:	eef0 2a48 	vmov.f32	s5, s16
 800691a:	2900      	cmp	r1, #0
 800691c:	f47f af4e 	bne.w	80067bc <forward_dense+0x35c>
 8006920:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006924:	4690      	mov	r8, r2
 8006926:	e7aa      	b.n	800687e <forward_dense+0x41e>
 8006928:	9903      	ldr	r1, [sp, #12]
 800692a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800692e:	445a      	add	r2, fp
 8006930:	eca1 7a01 	vstmia	r1!, {s14}
 8006934:	4549      	cmp	r1, r9
 8006936:	9103      	str	r1, [sp, #12]
 8006938:	44dc      	add	ip, fp
 800693a:	f4ff af34 	bcc.w	80067a6 <forward_dense+0x346>
 800693e:	e6f6      	b.n	800672e <forward_dense+0x2ce>
 8006940:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006942:	9d06      	ldr	r5, [sp, #24]
 8006944:	9101      	str	r1, [sp, #4]
 8006946:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006948:	9100      	str	r1, [sp, #0]
 800694a:	4628      	mov	r0, r5
 800694c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800694e:	f000 f9ef 	bl	8006d30 <forward_lite_dense_if32of32wf32>
 8006952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006954:	462b      	mov	r3, r5
 8006956:	4413      	add	r3, r2
 8006958:	9306      	str	r3, [sp, #24]
 800695a:	e6f1      	b.n	8006740 <forward_dense+0x2e0>
 800695c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8006960:	f1b9 0f00 	cmp.w	r9, #0
 8006964:	d016      	beq.n	8006994 <forward_dense+0x534>
 8006966:	e9d9 0100 	ldrd	r0, r1, [r9]
 800696a:	f000 fbf7 	bl	800715c <ai_array_get_byte_size>
 800696e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8006972:	4602      	mov	r2, r0
 8006974:	4659      	mov	r1, fp
 8006976:	4640      	mov	r0, r8
 8006978:	f000 fafe 	bl	8006f78 <st_int8_copy>
 800697c:	e5c7      	b.n	800650e <forward_dense+0xae>
 800697e:	2b04      	cmp	r3, #4
 8006980:	d00a      	beq.n	8006998 <forward_dense+0x538>
 8006982:	f04f 0900 	mov.w	r9, #0
 8006986:	e5bd      	b.n	8006504 <forward_dense+0xa4>
 8006988:	930d      	str	r3, [sp, #52]	; 0x34
 800698a:	e595      	b.n	80064b8 <forward_dense+0x58>
 800698c:	2300      	movs	r3, #0
 800698e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006990:	460b      	mov	r3, r1
 8006992:	e591      	b.n	80064b8 <forward_dense+0x58>
 8006994:	46c3      	mov	fp, r8
 8006996:	e5ba      	b.n	800650e <forward_dense+0xae>
 8006998:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800699c:	e5b7      	b.n	800650e <forward_dense+0xae>
 800699e:	2300      	movs	r3, #0
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	deff      	udf	#255	; 0xff
 80069a4:	2300      	movs	r3, #0
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	deff      	udf	#255	; 0xff
 80069aa:	bf00      	nop

080069ac <forward_relu>:
 80069ac:	6982      	ldr	r2, [r0, #24]
 80069ae:	8813      	ldrh	r3, [r2, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d05b      	beq.n	8006a6c <forward_relu+0xc0>
 80069b4:	6851      	ldr	r1, [r2, #4]
 80069b6:	684a      	ldr	r2, [r1, #4]
 80069b8:	b102      	cbz	r2, 80069bc <forward_relu+0x10>
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f000 8123 	beq.w	8006c08 <forward_relu+0x25c>
 80069c2:	b470      	push	{r4, r5, r6}
 80069c4:	6909      	ldr	r1, [r1, #16]
 80069c6:	b101      	cbz	r1, 80069ca <forward_relu+0x1e>
 80069c8:	6809      	ldr	r1, [r1, #0]
 80069ca:	69c6      	ldr	r6, [r0, #28]
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	f000 8097 	beq.w	8006b00 <forward_relu+0x154>
 80069d2:	6873      	ldr	r3, [r6, #4]
 80069d4:	6988      	ldr	r0, [r1, #24]
 80069d6:	6991      	ldr	r1, [r2, #24]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f000 80c1 	beq.w	8006b60 <forward_relu+0x1b4>
 80069de:	6893      	ldr	r3, [r2, #8]
 80069e0:	6880      	ldr	r0, [r0, #8]
 80069e2:	688c      	ldr	r4, [r1, #8]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	f000 80f2 	beq.w	8006bce <forward_relu+0x222>
 80069ea:	68d5      	ldr	r5, [r2, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80069f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069f6:	42ab      	cmp	r3, r5
 80069f8:	fb01 f202 	mul.w	r2, r1, r2
 80069fc:	d1f9      	bne.n	80069f2 <forward_relu+0x46>
 80069fe:	68b3      	ldr	r3, [r6, #8]
 8006a00:	ed93 7a02 	vldr	s14, [r3, #8]
 8006a04:	edd3 6a00 	vldr	s13, [r3]
 8006a08:	ed93 6a01 	vldr	s12, [r3, #4]
 8006a0c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006a10:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006a14:	3a01      	subs	r2, #1
 8006a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a1e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006a22:	d425      	bmi.n	8006a70 <forward_relu+0xc4>
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d81f      	bhi.n	8006a68 <forward_relu+0xbc>
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	1d01      	adds	r1, r0, #4
 8006a2c:	e00d      	b.n	8006a4a <forward_relu+0x9e>
 8006a2e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a36:	db03      	blt.n	8006a40 <forward_relu+0x94>
 8006a38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006a40:	3b08      	subs	r3, #8
 8006a42:	429c      	cmp	r4, r3
 8006a44:	ed61 7a01 	vstmdb	r1!, {s15}
 8006a48:	d80e      	bhi.n	8006a68 <forward_relu+0xbc>
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	ed72 7a01 	vldmdb	r2!, {s15}
 8006a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	d9e9      	bls.n	8006a2e <forward_relu+0x82>
 8006a5a:	3b08      	subs	r3, #8
 8006a5c:	eef0 7a47 	vmov.f32	s15, s14
 8006a60:	429c      	cmp	r4, r3
 8006a62:	ed61 7a01 	vstmdb	r1!, {s15}
 8006a66:	d9f0      	bls.n	8006a4a <forward_relu+0x9e>
 8006a68:	bc70      	pop	{r4, r5, r6}
 8006a6a:	4770      	bx	lr
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	deff      	udf	#255	; 0xff
 8006a70:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a78:	d11f      	bne.n	8006aba <forward_relu+0x10e>
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d8f4      	bhi.n	8006a68 <forward_relu+0xbc>
 8006a7e:	1b1c      	subs	r4, r3, r4
 8006a80:	f024 0403 	bic.w	r4, r4, #3
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	2500      	movs	r5, #0
 8006a88:	1b1b      	subs	r3, r3, r4
 8006a8a:	1d01      	adds	r1, r0, #4
 8006a8c:	ed72 7a01 	vldmdb	r2!, {s15}
 8006a90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a98:	dc0a      	bgt.n	8006ab0 <forward_relu+0x104>
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8006aa0:	d0e2      	beq.n	8006a68 <forward_relu+0xbc>
 8006aa2:	ed72 7a01 	vldmdb	r2!, {s15}
 8006aa6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aae:	ddf4      	ble.n	8006a9a <forward_relu+0xee>
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	ed61 7a01 	vstmdb	r1!, {s15}
 8006ab6:	d1e9      	bne.n	8006a8c <forward_relu+0xe0>
 8006ab8:	e7d6      	b.n	8006a68 <forward_relu+0xbc>
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d8d4      	bhi.n	8006a68 <forward_relu+0xbc>
 8006abe:	1b1c      	subs	r4, r3, r4
 8006ac0:	f024 0403 	bic.w	r4, r4, #3
 8006ac4:	1d1a      	adds	r2, r3, #4
 8006ac6:	1d01      	adds	r1, r0, #4
 8006ac8:	1b1b      	subs	r3, r3, r4
 8006aca:	ed72 7a01 	vldmdb	r2!, {s15}
 8006ace:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad6:	db0e      	blt.n	8006af6 <forward_relu+0x14a>
 8006ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006adc:	4293      	cmp	r3, r2
 8006ade:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006ae2:	ed61 7a01 	vstmdb	r1!, {s15}
 8006ae6:	d0bf      	beq.n	8006a68 <forward_relu+0xbc>
 8006ae8:	ed72 7a01 	vldmdb	r2!, {s15}
 8006aec:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af4:	daf0      	bge.n	8006ad8 <forward_relu+0x12c>
 8006af6:	4293      	cmp	r3, r2
 8006af8:	ed61 7a01 	vstmdb	r1!, {s15}
 8006afc:	d1e5      	bne.n	8006aca <forward_relu+0x11e>
 8006afe:	e7b3      	b.n	8006a68 <forward_relu+0xbc>
 8006b00:	6893      	ldr	r3, [r2, #8]
 8006b02:	6989      	ldr	r1, [r1, #24]
 8006b04:	6990      	ldr	r0, [r2, #24]
 8006b06:	6889      	ldr	r1, [r1, #8]
 8006b08:	6884      	ldr	r4, [r0, #8]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	d075      	beq.n	8006bfa <forward_relu+0x24e>
 8006b0e:	68d5      	ldr	r5, [r2, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006b16:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8006b1a:	429d      	cmp	r5, r3
 8006b1c:	fb00 f202 	mul.w	r2, r0, r2
 8006b20:	d1f9      	bne.n	8006b16 <forward_relu+0x16a>
 8006b22:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8006b26:	3b01      	subs	r3, #1
 8006b28:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006b2c:	4294      	cmp	r4, r2
 8006b2e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006b32:	d899      	bhi.n	8006a68 <forward_relu+0xbc>
 8006b34:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006c10 <forward_relu+0x264>
 8006b38:	3204      	adds	r2, #4
 8006b3a:	3104      	adds	r1, #4
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	ed72 7a01 	vldmdb	r2!, {s15}
 8006b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	f1a3 0308 	sub.w	r3, r3, #8
 8006b4e:	bfb8      	it	lt
 8006b50:	eef0 7a47 	vmovlt.f32	s15, s14
 8006b54:	429c      	cmp	r4, r3
 8006b56:	ed61 7a01 	vstmdb	r1!, {s15}
 8006b5a:	d9ef      	bls.n	8006b3c <forward_relu+0x190>
 8006b5c:	bc70      	pop	{r4, r5, r6}
 8006b5e:	4770      	bx	lr
 8006b60:	688c      	ldr	r4, [r1, #8]
 8006b62:	6891      	ldr	r1, [r2, #8]
 8006b64:	6880      	ldr	r0, [r0, #8]
 8006b66:	0a09      	lsrs	r1, r1, #8
 8006b68:	d049      	beq.n	8006bfe <forward_relu+0x252>
 8006b6a:	68d5      	ldr	r5, [r2, #12]
 8006b6c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8006b70:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006b74:	42aa      	cmp	r2, r5
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	d1f9      	bne.n	8006b70 <forward_relu+0x1c4>
 8006b7c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006b80:	3a01      	subs	r2, #1
 8006b82:	68b1      	ldr	r1, [r6, #8]
 8006b84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	ed91 7a00 	vldr	s14, [r1]
 8006b8e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006b92:	f63f af69 	bhi.w	8006a68 <forward_relu+0xbc>
 8006b96:	2500      	movs	r5, #0
 8006b98:	3304      	adds	r3, #4
 8006b9a:	1d02      	adds	r2, r0, #4
 8006b9c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba8:	f1a3 0104 	sub.w	r1, r3, #4
 8006bac:	f1a3 0308 	sub.w	r3, r3, #8
 8006bb0:	d406      	bmi.n	8006bc0 <forward_relu+0x214>
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006bb8:	f63f af56 	bhi.w	8006a68 <forward_relu+0xbc>
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e7ed      	b.n	8006b9c <forward_relu+0x1f0>
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	ed62 7a01 	vstmdb	r2!, {s15}
 8006bc6:	f63f af4f 	bhi.w	8006a68 <forward_relu+0xbc>
 8006bca:	460b      	mov	r3, r1
 8006bcc:	e7e6      	b.n	8006b9c <forward_relu+0x1f0>
 8006bce:	68b3      	ldr	r3, [r6, #8]
 8006bd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8006bd4:	edd3 6a00 	vldr	s13, [r3]
 8006bd8:	ed93 6a01 	vldr	s12, [r3, #4]
 8006bdc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be4:	d401      	bmi.n	8006bea <forward_relu+0x23e>
 8006be6:	4623      	mov	r3, r4
 8006be8:	e71e      	b.n	8006a28 <forward_relu+0x7c>
 8006bea:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	f47f af63 	bne.w	8006abe <forward_relu+0x112>
 8006bf8:	e741      	b.n	8006a7e <forward_relu+0xd2>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	e79a      	b.n	8006b34 <forward_relu+0x188>
 8006bfe:	68b2      	ldr	r2, [r6, #8]
 8006c00:	4623      	mov	r3, r4
 8006c02:	ed92 7a00 	vldr	s14, [r2]
 8006c06:	e7c6      	b.n	8006b96 <forward_relu+0x1ea>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	deff      	udf	#255	; 0xff
 8006c0e:	bf00      	nop
 8006c10:	00000000 	.word	0x00000000

08006c14 <forward_sm>:
 8006c14:	6982      	ldr	r2, [r0, #24]
 8006c16:	8813      	ldrh	r3, [r2, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d07c      	beq.n	8006d16 <forward_sm+0x102>
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	ed2d 8b04 	vpush	{d8-d9}
 8006c24:	6852      	ldr	r2, [r2, #4]
 8006c26:	6854      	ldr	r4, [r2, #4]
 8006c28:	b085      	sub	sp, #20
 8006c2a:	b104      	cbz	r4, 8006c2e <forward_sm+0x1a>
 8006c2c:	6824      	ldr	r4, [r4, #0]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d076      	beq.n	8006d20 <forward_sm+0x10c>
 8006c32:	6913      	ldr	r3, [r2, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d076      	beq.n	8006d26 <forward_sm+0x112>
 8006c38:	681e      	ldr	r6, [r3, #0]
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	68e0      	ldr	r0, [r4, #12]
 8006c3e:	68f2      	ldr	r2, [r6, #12]
 8006c40:	6845      	ldr	r5, [r0, #4]
 8006c42:	6857      	ldr	r7, [r2, #4]
 8006c44:	0a1b      	lsrs	r3, r3, #8
 8006c46:	d068      	beq.n	8006d1a <forward_sm+0x106>
 8006c48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c52:	4298      	cmp	r0, r3
 8006c54:	fb01 f202 	mul.w	r2, r1, r2
 8006c58:	d1f9      	bne.n	8006c4e <forward_sm+0x3a>
 8006c5a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006c5e:	69a2      	ldr	r2, [r4, #24]
 8006c60:	69b3      	ldr	r3, [r6, #24]
 8006c62:	6892      	ldr	r2, [r2, #8]
 8006c64:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8006c68:	eb02 0309 	add.w	r3, r2, r9
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	d24c      	bcs.n	8006d0c <forward_sm+0xf8>
 8006c72:	00bb      	lsls	r3, r7, #2
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8006c7a:	00ab      	lsls	r3, r5, #2
 8006c7c:	2d01      	cmp	r5, #1
 8006c7e:	ed92 8a00 	vldr	s16, [r2]
 8006c82:	9302      	str	r3, [sp, #8]
 8006c84:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8006c88:	463e      	mov	r6, r7
 8006c8a:	d93c      	bls.n	8006d06 <forward_sm+0xf2>
 8006c8c:	1d13      	adds	r3, r2, #4
 8006c8e:	ecf3 7a01 	vldmia	r3!, {s15}
 8006c92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9a:	bfb8      	it	lt
 8006c9c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8006ca0:	429e      	cmp	r6, r3
 8006ca2:	d1f4      	bne.n	8006c8e <forward_sm+0x7a>
 8006ca4:	eddf 8a21 	vldr	s17, [pc, #132]	; 8006d2c <forward_sm+0x118>
 8006ca8:	4692      	mov	sl, r2
 8006caa:	46c3      	mov	fp, r8
 8006cac:	46c1      	mov	r9, r8
 8006cae:	2400      	movs	r4, #0
 8006cb0:	ecba 0a01 	vldmia	sl!, {s0}
 8006cb4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006cb8:	f002 fffc 	bl	8009cb4 <expf>
 8006cbc:	3401      	adds	r4, #1
 8006cbe:	42a5      	cmp	r5, r4
 8006cc0:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006cc4:	eca9 0a01 	vstmia	r9!, {s0}
 8006cc8:	d8f2      	bhi.n	8006cb0 <forward_sm+0x9c>
 8006cca:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d00b      	beq.n	8006cec <forward_sm+0xd8>
 8006cd4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8006cd8:	2300      	movs	r3, #0
 8006cda:	3301      	adds	r3, #1
 8006cdc:	429d      	cmp	r5, r3
 8006cde:	eddb 7a00 	vldr	s15, [fp]
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	eceb 7a01 	vstmia	fp!, {s15}
 8006cea:	d8f6      	bhi.n	8006cda <forward_sm+0xc6>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	9901      	ldr	r1, [sp, #4]
 8006cf0:	4498      	add	r8, r3
 8006cf2:	9b02      	ldr	r3, [sp, #8]
 8006cf4:	42b9      	cmp	r1, r7
 8006cf6:	463a      	mov	r2, r7
 8006cf8:	441e      	add	r6, r3
 8006cfa:	d907      	bls.n	8006d0c <forward_sm+0xf8>
 8006cfc:	2d01      	cmp	r5, #1
 8006cfe:	ed92 8a00 	vldr	s16, [r2]
 8006d02:	441f      	add	r7, r3
 8006d04:	d8c2      	bhi.n	8006c8c <forward_sm+0x78>
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	d0f0      	beq.n	8006cec <forward_sm+0xd8>
 8006d0a:	e7cb      	b.n	8006ca4 <forward_sm+0x90>
 8006d0c:	b005      	add	sp, #20
 8006d0e:	ecbd 8b04 	vpop	{d8-d9}
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	deff      	udf	#255	; 0xff
 8006d1a:	f04f 0904 	mov.w	r9, #4
 8006d1e:	e79e      	b.n	8006c5e <forward_sm+0x4a>
 8006d20:	2300      	movs	r3, #0
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	deff      	udf	#255	; 0xff
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	deff      	udf	#255	; 0xff
 8006d2a:	bf00      	nop
 8006d2c:	00000000 	.word	0x00000000

08006d30 <forward_lite_dense_if32of32wf32>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8006d38:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8006d3c:	4287      	cmp	r7, r0
 8006d3e:	f240 8106 	bls.w	8006f4e <forward_lite_dense_if32of32wf32+0x21e>
 8006d42:	f1a6 0810 	sub.w	r8, r6, #16
 8006d46:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8006d52:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006d56:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	f006 0a0f 	and.w	sl, r6, #15
 8006d60:	2e0f      	cmp	r6, #15
 8006d62:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006f74 <forward_lite_dense_if32of32wf32+0x244>
 8006d66:	f240 8101 	bls.w	8006f6c <forward_lite_dense_if32of32wf32+0x23c>
 8006d6a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8006d6e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8006d72:	46b6      	mov	lr, r6
 8006d74:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8006d78:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8006d7c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8006d80:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8006d84:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8006d88:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8006d8c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8006d90:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8006d94:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8006d98:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8006d9c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8006da0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8006da4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006da8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006dac:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8006db0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006db4:	f1ae 0e10 	sub.w	lr, lr, #16
 8006db8:	f1be 0f0f 	cmp.w	lr, #15
 8006dbc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8006dc0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8006dc4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006dc8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8006dcc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006dd0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8006dd4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8006dd8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006ddc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8006de0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8006de4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006de8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8006dec:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8006df0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006df4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8006df8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8006dfc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006e00:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006e04:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8006e08:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006e0c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8006e10:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006e14:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006e18:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8006e1c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8006e20:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006e24:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8006e28:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8006e2c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006e30:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006e34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006e38:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006e3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006e40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e48:	d894      	bhi.n	8006d74 <forward_lite_dense_if32of32wf32+0x44>
 8006e4a:	eb02 0e0b 	add.w	lr, r2, fp
 8006e4e:	4654      	mov	r4, sl
 8006e50:	46c4      	mov	ip, r8
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d075      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006e56:	eddc 6a00 	vldr	s13, [ip]
 8006e5a:	edde 7a00 	vldr	s15, [lr]
 8006e5e:	2c01      	cmp	r4, #1
 8006e60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e64:	d06d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006e66:	eddc 6a01 	vldr	s13, [ip, #4]
 8006e6a:	edde 7a01 	vldr	s15, [lr, #4]
 8006e6e:	2c02      	cmp	r4, #2
 8006e70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e74:	d065      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006e76:	eddc 6a02 	vldr	s13, [ip, #8]
 8006e7a:	edde 7a02 	vldr	s15, [lr, #8]
 8006e7e:	2c03      	cmp	r4, #3
 8006e80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e84:	d05d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006e86:	eddc 6a03 	vldr	s13, [ip, #12]
 8006e8a:	edde 7a03 	vldr	s15, [lr, #12]
 8006e8e:	2c04      	cmp	r4, #4
 8006e90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e94:	d055      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006e96:	eddc 6a04 	vldr	s13, [ip, #16]
 8006e9a:	edde 7a04 	vldr	s15, [lr, #16]
 8006e9e:	2c05      	cmp	r4, #5
 8006ea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ea4:	d04d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006ea6:	eddc 6a05 	vldr	s13, [ip, #20]
 8006eaa:	edde 7a05 	vldr	s15, [lr, #20]
 8006eae:	2c06      	cmp	r4, #6
 8006eb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006eb4:	d045      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006eb6:	eddc 6a06 	vldr	s13, [ip, #24]
 8006eba:	edde 7a06 	vldr	s15, [lr, #24]
 8006ebe:	2c07      	cmp	r4, #7
 8006ec0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ec4:	d03d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006ec6:	eddc 6a07 	vldr	s13, [ip, #28]
 8006eca:	edde 7a07 	vldr	s15, [lr, #28]
 8006ece:	2c08      	cmp	r4, #8
 8006ed0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ed4:	d035      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006ed6:	eddc 6a08 	vldr	s13, [ip, #32]
 8006eda:	edde 7a08 	vldr	s15, [lr, #32]
 8006ede:	2c09      	cmp	r4, #9
 8006ee0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ee4:	d02d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006ee6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8006eea:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8006eee:	2c0a      	cmp	r4, #10
 8006ef0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006ef4:	d025      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006ef6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8006efa:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8006efe:	2c0b      	cmp	r4, #11
 8006f00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f04:	d01d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006f06:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8006f0a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8006f0e:	2c0c      	cmp	r4, #12
 8006f10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f14:	d015      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006f16:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8006f1a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8006f1e:	3c0d      	subs	r4, #13
 8006f20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f24:	d00d      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006f26:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8006f2a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8006f2e:	2c01      	cmp	r4, #1
 8006f30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f34:	d005      	beq.n	8006f42 <forward_lite_dense_if32of32wf32+0x212>
 8006f36:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8006f3a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8006f3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f42:	444a      	add	r2, r9
 8006f44:	eca5 7a01 	vstmia	r5!, {s14}
 8006f48:	42af      	cmp	r7, r5
 8006f4a:	f63f af09 	bhi.w	8006d60 <forward_lite_dense_if32of32wf32+0x30>
 8006f4e:	b15b      	cbz	r3, 8006f68 <forward_lite_dense_if32of32wf32+0x238>
 8006f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f52:	b14a      	cbz	r2, 8006f68 <forward_lite_dense_if32of32wf32+0x238>
 8006f54:	edd0 7a00 	vldr	s15, [r0]
 8006f58:	ecb3 7a01 	vldmia	r3!, {s14}
 8006f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f60:	ece0 7a01 	vstmia	r0!, {s15}
 8006f64:	4287      	cmp	r7, r0
 8006f66:	d1f5      	bne.n	8006f54 <forward_lite_dense_if32of32wf32+0x224>
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	4634      	mov	r4, r6
 8006f6e:	4696      	mov	lr, r2
 8006f70:	468c      	mov	ip, r1
 8006f72:	e76e      	b.n	8006e52 <forward_lite_dense_if32of32wf32+0x122>
 8006f74:	00000000 	.word	0x00000000

08006f78 <st_int8_copy>:
 8006f78:	4288      	cmp	r0, r1
 8006f7a:	d057      	beq.n	800702c <st_int8_copy+0xb4>
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d055      	beq.n	800702c <st_int8_copy+0xb4>
 8006f80:	4288      	cmp	r0, r1
 8006f82:	d354      	bcc.n	800702e <st_int8_copy+0xb6>
 8006f84:	078b      	lsls	r3, r1, #30
 8006f86:	d102      	bne.n	8006f8e <st_int8_copy+0x16>
 8006f88:	e009      	b.n	8006f9e <st_int8_copy+0x26>
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d05c      	beq.n	8007048 <st_int8_copy+0xd0>
 8006f8e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006f92:	f801 3b01 	strb.w	r3, [r1], #1
 8006f96:	078b      	lsls	r3, r1, #30
 8006f98:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f9c:	d1f5      	bne.n	8006f8a <st_int8_copy+0x12>
 8006f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8006fa6:	d069      	beq.n	800707c <st_int8_copy+0x104>
 8006fa8:	ea41 0300 	orr.w	r3, r1, r0
 8006fac:	075b      	lsls	r3, r3, #29
 8006fae:	d14c      	bne.n	800704a <st_int8_copy+0xd2>
 8006fb0:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d948      	bls.n	800704a <st_int8_copy+0xd2>
 8006fb8:	f100 0310 	add.w	r3, r0, #16
 8006fbc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006fc0:	f101 0c10 	add.w	ip, r1, #16
 8006fc4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8006fc8:	ed13 6b04 	vldr	d6, [r3, #-16]
 8006fcc:	ed13 7b02 	vldr	d7, [r3, #-8]
 8006fd0:	3310      	adds	r3, #16
 8006fd2:	4573      	cmp	r3, lr
 8006fd4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8006fd8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8006fdc:	f10c 0c10 	add.w	ip, ip, #16
 8006fe0:	d1f2      	bne.n	8006fc8 <st_int8_copy+0x50>
 8006fe2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8006fe6:	4421      	add	r1, r4
 8006fe8:	4420      	add	r0, r4
 8006fea:	f002 0203 	and.w	r2, r2, #3
 8006fee:	b16b      	cbz	r3, 800700c <st_int8_copy+0x94>
 8006ff0:	6804      	ldr	r4, [r0, #0]
 8006ff2:	600c      	str	r4, [r1, #0]
 8006ff4:	1e5c      	subs	r4, r3, #1
 8006ff6:	d005      	beq.n	8007004 <st_int8_copy+0x8c>
 8006ff8:	6845      	ldr	r5, [r0, #4]
 8006ffa:	604d      	str	r5, [r1, #4]
 8006ffc:	2c01      	cmp	r4, #1
 8006ffe:	bf1c      	itt	ne
 8007000:	6884      	ldrne	r4, [r0, #8]
 8007002:	608c      	strne	r4, [r1, #8]
 8007004:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007008:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800700c:	b162      	cbz	r2, 8007028 <st_int8_copy+0xb0>
 800700e:	f990 3000 	ldrsb.w	r3, [r0]
 8007012:	700b      	strb	r3, [r1, #0]
 8007014:	3a01      	subs	r2, #1
 8007016:	d007      	beq.n	8007028 <st_int8_copy+0xb0>
 8007018:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800701c:	704b      	strb	r3, [r1, #1]
 800701e:	2a01      	cmp	r2, #1
 8007020:	bf1c      	itt	ne
 8007022:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8007026:	708b      	strbne	r3, [r1, #2]
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	4770      	bx	lr
 800702e:	1883      	adds	r3, r0, r2
 8007030:	428b      	cmp	r3, r1
 8007032:	d9a7      	bls.n	8006f84 <st_int8_copy+0xc>
 8007034:	4283      	cmp	r3, r0
 8007036:	440a      	add	r2, r1
 8007038:	d9f8      	bls.n	800702c <st_int8_copy+0xb4>
 800703a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800703e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007042:	4283      	cmp	r3, r0
 8007044:	d1f9      	bne.n	800703a <st_int8_copy+0xc2>
 8007046:	4770      	bx	lr
 8007048:	4770      	bx	lr
 800704a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800704e:	460b      	mov	r3, r1
 8007050:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8007054:	4684      	mov	ip, r0
 8007056:	f8dc 7000 	ldr.w	r7, [ip]
 800705a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800705e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8007062:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8007066:	f8c3 800c 	str.w	r8, [r3, #12]
 800706a:	601f      	str	r7, [r3, #0]
 800706c:	605e      	str	r6, [r3, #4]
 800706e:	609d      	str	r5, [r3, #8]
 8007070:	3310      	adds	r3, #16
 8007072:	459e      	cmp	lr, r3
 8007074:	f10c 0c10 	add.w	ip, ip, #16
 8007078:	d1ed      	bne.n	8007056 <st_int8_copy+0xde>
 800707a:	e7b2      	b.n	8006fe2 <st_int8_copy+0x6a>
 800707c:	0893      	lsrs	r3, r2, #2
 800707e:	f002 0203 	and.w	r2, r2, #3
 8007082:	e7b4      	b.n	8006fee <st_int8_copy+0x76>

08007084 <ai_array_to_buffer_fmt>:
 8007084:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007088:	2b02      	cmp	r3, #2
 800708a:	d050      	beq.n	800712e <ai_array_to_buffer_fmt+0xaa>
 800708c:	4b2a      	ldr	r3, [pc, #168]	; (8007138 <ai_array_to_buffer_fmt+0xb4>)
 800708e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8007092:	429a      	cmp	r2, r3
 8007094:	d00b      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 8007096:	dc1c      	bgt.n	80070d2 <ai_array_to_buffer_fmt+0x4e>
 8007098:	4b28      	ldr	r3, [pc, #160]	; (800713c <ai_array_to_buffer_fmt+0xb8>)
 800709a:	429a      	cmp	r2, r3
 800709c:	d007      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 800709e:	dd0b      	ble.n	80070b8 <ai_array_to_buffer_fmt+0x34>
 80070a0:	4b27      	ldr	r3, [pc, #156]	; (8007140 <ai_array_to_buffer_fmt+0xbc>)
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d003      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 80070a6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d131      	bne.n	8007112 <ai_array_to_buffer_fmt+0x8e>
 80070ae:	4613      	mov	r3, r2
 80070b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80070b4:	4318      	orrs	r0, r3
 80070b6:	4770      	bx	lr
 80070b8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80070bc:	429a      	cmp	r2, r3
 80070be:	d0f6      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 80070c0:	dd2c      	ble.n	800711c <ai_array_to_buffer_fmt+0x98>
 80070c2:	4b20      	ldr	r3, [pc, #128]	; (8007144 <ai_array_to_buffer_fmt+0xc0>)
 80070c4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80070c8:	429a      	cmp	r2, r3
 80070ca:	bf18      	it	ne
 80070cc:	2340      	movne	r3, #64	; 0x40
 80070ce:	4318      	orrs	r0, r3
 80070d0:	4770      	bx	lr
 80070d2:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <ai_array_to_buffer_fmt+0xc4>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d0ea      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 80070d8:	dd0e      	ble.n	80070f8 <ai_array_to_buffer_fmt+0x74>
 80070da:	4b1c      	ldr	r3, [pc, #112]	; (800714c <ai_array_to_buffer_fmt+0xc8>)
 80070dc:	429a      	cmp	r2, r3
 80070de:	d0e6      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 80070e0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d0e2      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 80070e8:	4b19      	ldr	r3, [pc, #100]	; (8007150 <ai_array_to_buffer_fmt+0xcc>)
 80070ea:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80070ee:	429a      	cmp	r2, r3
 80070f0:	bf18      	it	ne
 80070f2:	2340      	movne	r3, #64	; 0x40
 80070f4:	4318      	orrs	r0, r3
 80070f6:	4770      	bx	lr
 80070f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d0d6      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 8007100:	3307      	adds	r3, #7
 8007102:	429a      	cmp	r2, r3
 8007104:	d0d3      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 8007106:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800710a:	429a      	cmp	r2, r3
 800710c:	bf18      	it	ne
 800710e:	2340      	movne	r3, #64	; 0x40
 8007110:	e7ce      	b.n	80070b0 <ai_array_to_buffer_fmt+0x2c>
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <ai_array_to_buffer_fmt+0xd0>)
 8007114:	429a      	cmp	r2, r3
 8007116:	bf18      	it	ne
 8007118:	2340      	movne	r3, #64	; 0x40
 800711a:	e7c9      	b.n	80070b0 <ai_array_to_buffer_fmt+0x2c>
 800711c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007120:	429a      	cmp	r2, r3
 8007122:	d0c4      	beq.n	80070ae <ai_array_to_buffer_fmt+0x2a>
 8007124:	3380      	adds	r3, #128	; 0x80
 8007126:	429a      	cmp	r2, r3
 8007128:	bf18      	it	ne
 800712a:	2340      	movne	r3, #64	; 0x40
 800712c:	e7c0      	b.n	80070b0 <ai_array_to_buffer_fmt+0x2c>
 800712e:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <ai_array_to_buffer_fmt+0xd4>)
 8007130:	4003      	ands	r3, r0
 8007132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007136:	e7bb      	b.n	80070b0 <ai_array_to_buffer_fmt+0x2c>
 8007138:	00840040 	.word	0x00840040
 800713c:	00040840 	.word	0x00040840
 8007140:	00041040 	.word	0x00041040
 8007144:	00040447 	.word	0x00040447
 8007148:	00840840 	.word	0x00840840
 800714c:	00841040 	.word	0x00841040
 8007150:	0084084f 	.word	0x0084084f
 8007154:	0004084f 	.word	0x0004084f
 8007158:	00803fff 	.word	0x00803fff

0800715c <ai_array_get_byte_size>:
 800715c:	b319      	cbz	r1, 80071a6 <ai_array_get_byte_size+0x4a>
 800715e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007162:	fb03 f101 	mul.w	r1, r3, r1
 8007166:	3107      	adds	r1, #7
 8007168:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800716c:	f021 0307 	bic.w	r3, r1, #7
 8007170:	2a04      	cmp	r2, #4
 8007172:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8007176:	fa23 f101 	lsr.w	r1, r3, r1
 800717a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800717e:	d00b      	beq.n	8007198 <ai_array_get_byte_size+0x3c>
 8007180:	2a08      	cmp	r2, #8
 8007182:	d002      	beq.n	800718a <ai_array_get_byte_size+0x2e>
 8007184:	3107      	adds	r1, #7
 8007186:	08c8      	lsrs	r0, r1, #3
 8007188:	4770      	bx	lr
 800718a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800718e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007192:	3107      	adds	r1, #7
 8007194:	08c8      	lsrs	r0, r1, #3
 8007196:	4770      	bx	lr
 8007198:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800719c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80071a0:	3107      	adds	r1, #7
 80071a2:	08c8      	lsrs	r0, r1, #3
 80071a4:	4770      	bx	lr
 80071a6:	4608      	mov	r0, r1
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <ai_array_get_data_byte_size>:
 80071ac:	b169      	cbz	r1, 80071ca <ai_array_get_data_byte_size+0x1e>
 80071ae:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80071b2:	fb02 f101 	mul.w	r1, r2, r1
 80071b6:	1dcb      	adds	r3, r1, #7
 80071b8:	f023 0307 	bic.w	r3, r3, #7
 80071bc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80071c0:	fa23 f000 	lsr.w	r0, r3, r0
 80071c4:	3007      	adds	r0, #7
 80071c6:	08c0      	lsrs	r0, r0, #3
 80071c8:	4770      	bx	lr
 80071ca:	4608      	mov	r0, r1
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop

080071d0 <ai_version_get>:
 80071d0:	0212      	lsls	r2, r2, #8
 80071d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80071d6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80071da:	4770      	bx	lr

080071dc <ai_platform_version_get>:
 80071dc:	0e02      	lsrs	r2, r0, #24
 80071de:	2300      	movs	r3, #0
 80071e0:	f362 0307 	bfi	r3, r2, #0, #8
 80071e4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80071e8:	f362 230f 	bfi	r3, r2, #8, #8
 80071ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80071f0:	f360 4317 	bfi	r3, r0, #16, #8
 80071f4:	b082      	sub	sp, #8
 80071f6:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80071fa:	b002      	add	sp, #8
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <get_tensor_byte_size>:
 8007200:	b410      	push	{r4}
 8007202:	6983      	ldr	r3, [r0, #24]
 8007204:	68c4      	ldr	r4, [r0, #12]
 8007206:	6941      	ldr	r1, [r0, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68e0      	ldr	r0, [r4, #12]
 800720c:	4a07      	ldr	r2, [pc, #28]	; (800722c <get_tensor_byte_size+0x2c>)
 800720e:	68c9      	ldr	r1, [r1, #12]
 8007210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007214:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007218:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800721c:	fb01 f000 	mul.w	r0, r1, r0
 8007220:	4293      	cmp	r3, r2
 8007222:	bf04      	itt	eq
 8007224:	3007      	addeq	r0, #7
 8007226:	08c0      	lsreq	r0, r0, #3
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	000400c0 	.word	0x000400c0

08007230 <malloc>:
 8007230:	4b02      	ldr	r3, [pc, #8]	; (800723c <malloc+0xc>)
 8007232:	4601      	mov	r1, r0
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f000 b82b 	b.w	8007290 <_malloc_r>
 800723a:	bf00      	nop
 800723c:	200006b0 	.word	0x200006b0

08007240 <free>:
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <free+0xc>)
 8007242:	4601      	mov	r1, r0
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f001 be7d 	b.w	8008f44 <_free_r>
 800724a:	bf00      	nop
 800724c:	200006b0 	.word	0x200006b0

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0e      	ldr	r6, [pc, #56]	; (800728c <sbrk_aligned+0x3c>)
 8007254:	460c      	mov	r4, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	4605      	mov	r5, r0
 800725a:	b911      	cbnz	r1, 8007262 <sbrk_aligned+0x12>
 800725c:	f000 ff7e 	bl	800815c <_sbrk_r>
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 ff79 	bl	800815c <_sbrk_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d00a      	beq.n	8007284 <sbrk_aligned+0x34>
 800726e:	1cc4      	adds	r4, r0, #3
 8007270:	f024 0403 	bic.w	r4, r4, #3
 8007274:	42a0      	cmp	r0, r4
 8007276:	d007      	beq.n	8007288 <sbrk_aligned+0x38>
 8007278:	1a21      	subs	r1, r4, r0
 800727a:	4628      	mov	r0, r5
 800727c:	f000 ff6e 	bl	800815c <_sbrk_r>
 8007280:	3001      	adds	r0, #1
 8007282:	d101      	bne.n	8007288 <sbrk_aligned+0x38>
 8007284:	f04f 34ff 	mov.w	r4, #4294967295
 8007288:	4620      	mov	r0, r4
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	20000acc 	.word	0x20000acc

08007290 <_malloc_r>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	1ccd      	adds	r5, r1, #3
 8007296:	f025 0503 	bic.w	r5, r5, #3
 800729a:	3508      	adds	r5, #8
 800729c:	2d0c      	cmp	r5, #12
 800729e:	bf38      	it	cc
 80072a0:	250c      	movcc	r5, #12
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	4607      	mov	r7, r0
 80072a6:	db01      	blt.n	80072ac <_malloc_r+0x1c>
 80072a8:	42a9      	cmp	r1, r5
 80072aa:	d905      	bls.n	80072b8 <_malloc_r+0x28>
 80072ac:	230c      	movs	r3, #12
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	2600      	movs	r6, #0
 80072b2:	4630      	mov	r0, r6
 80072b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800738c <_malloc_r+0xfc>
 80072bc:	f000 f868 	bl	8007390 <__malloc_lock>
 80072c0:	f8d8 3000 	ldr.w	r3, [r8]
 80072c4:	461c      	mov	r4, r3
 80072c6:	bb5c      	cbnz	r4, 8007320 <_malloc_r+0x90>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ffc0 	bl	8007250 <sbrk_aligned>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	4604      	mov	r4, r0
 80072d4:	d155      	bne.n	8007382 <_malloc_r+0xf2>
 80072d6:	f8d8 4000 	ldr.w	r4, [r8]
 80072da:	4626      	mov	r6, r4
 80072dc:	2e00      	cmp	r6, #0
 80072de:	d145      	bne.n	800736c <_malloc_r+0xdc>
 80072e0:	2c00      	cmp	r4, #0
 80072e2:	d048      	beq.n	8007376 <_malloc_r+0xe6>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	4631      	mov	r1, r6
 80072e8:	4638      	mov	r0, r7
 80072ea:	eb04 0903 	add.w	r9, r4, r3
 80072ee:	f000 ff35 	bl	800815c <_sbrk_r>
 80072f2:	4581      	cmp	r9, r0
 80072f4:	d13f      	bne.n	8007376 <_malloc_r+0xe6>
 80072f6:	6821      	ldr	r1, [r4, #0]
 80072f8:	1a6d      	subs	r5, r5, r1
 80072fa:	4629      	mov	r1, r5
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff ffa7 	bl	8007250 <sbrk_aligned>
 8007302:	3001      	adds	r0, #1
 8007304:	d037      	beq.n	8007376 <_malloc_r+0xe6>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	442b      	add	r3, r5
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	f8d8 3000 	ldr.w	r3, [r8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d038      	beq.n	8007386 <_malloc_r+0xf6>
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	42a2      	cmp	r2, r4
 8007318:	d12b      	bne.n	8007372 <_malloc_r+0xe2>
 800731a:	2200      	movs	r2, #0
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e00f      	b.n	8007340 <_malloc_r+0xb0>
 8007320:	6822      	ldr	r2, [r4, #0]
 8007322:	1b52      	subs	r2, r2, r5
 8007324:	d41f      	bmi.n	8007366 <_malloc_r+0xd6>
 8007326:	2a0b      	cmp	r2, #11
 8007328:	d917      	bls.n	800735a <_malloc_r+0xca>
 800732a:	1961      	adds	r1, r4, r5
 800732c:	42a3      	cmp	r3, r4
 800732e:	6025      	str	r5, [r4, #0]
 8007330:	bf18      	it	ne
 8007332:	6059      	strne	r1, [r3, #4]
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	bf08      	it	eq
 8007338:	f8c8 1000 	streq.w	r1, [r8]
 800733c:	5162      	str	r2, [r4, r5]
 800733e:	604b      	str	r3, [r1, #4]
 8007340:	4638      	mov	r0, r7
 8007342:	f104 060b 	add.w	r6, r4, #11
 8007346:	f000 f829 	bl	800739c <__malloc_unlock>
 800734a:	f026 0607 	bic.w	r6, r6, #7
 800734e:	1d23      	adds	r3, r4, #4
 8007350:	1af2      	subs	r2, r6, r3
 8007352:	d0ae      	beq.n	80072b2 <_malloc_r+0x22>
 8007354:	1b9b      	subs	r3, r3, r6
 8007356:	50a3      	str	r3, [r4, r2]
 8007358:	e7ab      	b.n	80072b2 <_malloc_r+0x22>
 800735a:	42a3      	cmp	r3, r4
 800735c:	6862      	ldr	r2, [r4, #4]
 800735e:	d1dd      	bne.n	800731c <_malloc_r+0x8c>
 8007360:	f8c8 2000 	str.w	r2, [r8]
 8007364:	e7ec      	b.n	8007340 <_malloc_r+0xb0>
 8007366:	4623      	mov	r3, r4
 8007368:	6864      	ldr	r4, [r4, #4]
 800736a:	e7ac      	b.n	80072c6 <_malloc_r+0x36>
 800736c:	4634      	mov	r4, r6
 800736e:	6876      	ldr	r6, [r6, #4]
 8007370:	e7b4      	b.n	80072dc <_malloc_r+0x4c>
 8007372:	4613      	mov	r3, r2
 8007374:	e7cc      	b.n	8007310 <_malloc_r+0x80>
 8007376:	230c      	movs	r3, #12
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4638      	mov	r0, r7
 800737c:	f000 f80e 	bl	800739c <__malloc_unlock>
 8007380:	e797      	b.n	80072b2 <_malloc_r+0x22>
 8007382:	6025      	str	r5, [r4, #0]
 8007384:	e7dc      	b.n	8007340 <_malloc_r+0xb0>
 8007386:	605b      	str	r3, [r3, #4]
 8007388:	deff      	udf	#255	; 0xff
 800738a:	bf00      	nop
 800738c:	20000ac8 	.word	0x20000ac8

08007390 <__malloc_lock>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__malloc_lock+0x8>)
 8007392:	f000 bf2f 	b.w	80081f4 <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	20000c10 	.word	0x20000c10

0800739c <__malloc_unlock>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__malloc_unlock+0x8>)
 800739e:	f000 bf2a 	b.w	80081f6 <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	20000c10 	.word	0x20000c10

080073a8 <srand>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <srand+0x44>)
 80073ac:	681d      	ldr	r5, [r3, #0]
 80073ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80073b0:	4604      	mov	r4, r0
 80073b2:	b9b3      	cbnz	r3, 80073e2 <srand+0x3a>
 80073b4:	2018      	movs	r0, #24
 80073b6:	f7fc fba9 	bl	8003b0c <__wrap_malloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6328      	str	r0, [r5, #48]	; 0x30
 80073be:	b920      	cbnz	r0, 80073ca <srand+0x22>
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <srand+0x48>)
 80073c2:	480c      	ldr	r0, [pc, #48]	; (80073f4 <srand+0x4c>)
 80073c4:	2146      	movs	r1, #70	; 0x46
 80073c6:	f000 ff25 	bl	8008214 <__assert_func>
 80073ca:	490b      	ldr	r1, [pc, #44]	; (80073f8 <srand+0x50>)
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <srand+0x54>)
 80073ce:	e9c0 1300 	strd	r1, r3, [r0]
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <srand+0x58>)
 80073d4:	6083      	str	r3, [r0, #8]
 80073d6:	230b      	movs	r3, #11
 80073d8:	8183      	strh	r3, [r0, #12]
 80073da:	2100      	movs	r1, #0
 80073dc:	2001      	movs	r0, #1
 80073de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80073e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80073e4:	2200      	movs	r2, #0
 80073e6:	611c      	str	r4, [r3, #16]
 80073e8:	615a      	str	r2, [r3, #20]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200006b0 	.word	0x200006b0
 80073f0:	0800c078 	.word	0x0800c078
 80073f4:	0800c08f 	.word	0x0800c08f
 80073f8:	abcd330e 	.word	0xabcd330e
 80073fc:	e66d1234 	.word	0xe66d1234
 8007400:	0005deec 	.word	0x0005deec

08007404 <rand>:
 8007404:	4b16      	ldr	r3, [pc, #88]	; (8007460 <rand+0x5c>)
 8007406:	b510      	push	{r4, lr}
 8007408:	681c      	ldr	r4, [r3, #0]
 800740a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800740c:	b9b3      	cbnz	r3, 800743c <rand+0x38>
 800740e:	2018      	movs	r0, #24
 8007410:	f7fc fb7c 	bl	8003b0c <__wrap_malloc>
 8007414:	4602      	mov	r2, r0
 8007416:	6320      	str	r0, [r4, #48]	; 0x30
 8007418:	b920      	cbnz	r0, 8007424 <rand+0x20>
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <rand+0x60>)
 800741c:	4812      	ldr	r0, [pc, #72]	; (8007468 <rand+0x64>)
 800741e:	2152      	movs	r1, #82	; 0x52
 8007420:	f000 fef8 	bl	8008214 <__assert_func>
 8007424:	4911      	ldr	r1, [pc, #68]	; (800746c <rand+0x68>)
 8007426:	4b12      	ldr	r3, [pc, #72]	; (8007470 <rand+0x6c>)
 8007428:	e9c0 1300 	strd	r1, r3, [r0]
 800742c:	4b11      	ldr	r3, [pc, #68]	; (8007474 <rand+0x70>)
 800742e:	6083      	str	r3, [r0, #8]
 8007430:	230b      	movs	r3, #11
 8007432:	8183      	strh	r3, [r0, #12]
 8007434:	2100      	movs	r1, #0
 8007436:	2001      	movs	r0, #1
 8007438:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800743c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800743e:	480e      	ldr	r0, [pc, #56]	; (8007478 <rand+0x74>)
 8007440:	690b      	ldr	r3, [r1, #16]
 8007442:	694c      	ldr	r4, [r1, #20]
 8007444:	4a0d      	ldr	r2, [pc, #52]	; (800747c <rand+0x78>)
 8007446:	4358      	muls	r0, r3
 8007448:	fb02 0004 	mla	r0, r2, r4, r0
 800744c:	fba3 3202 	umull	r3, r2, r3, r2
 8007450:	3301      	adds	r3, #1
 8007452:	eb40 0002 	adc.w	r0, r0, r2
 8007456:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800745a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800745e:	bd10      	pop	{r4, pc}
 8007460:	200006b0 	.word	0x200006b0
 8007464:	0800c078 	.word	0x0800c078
 8007468:	0800c08f 	.word	0x0800c08f
 800746c:	abcd330e 	.word	0xabcd330e
 8007470:	e66d1234 	.word	0xe66d1234
 8007474:	0005deec 	.word	0x0005deec
 8007478:	5851f42d 	.word	0x5851f42d
 800747c:	4c957f2d 	.word	0x4c957f2d

08007480 <__cvt>:
 8007480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	ec55 4b10 	vmov	r4, r5, d0
 8007488:	2d00      	cmp	r5, #0
 800748a:	460e      	mov	r6, r1
 800748c:	4619      	mov	r1, r3
 800748e:	462b      	mov	r3, r5
 8007490:	bfbb      	ittet	lt
 8007492:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007496:	461d      	movlt	r5, r3
 8007498:	2300      	movge	r3, #0
 800749a:	232d      	movlt	r3, #45	; 0x2d
 800749c:	700b      	strb	r3, [r1, #0]
 800749e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074a4:	4691      	mov	r9, r2
 80074a6:	f023 0820 	bic.w	r8, r3, #32
 80074aa:	bfbc      	itt	lt
 80074ac:	4622      	movlt	r2, r4
 80074ae:	4614      	movlt	r4, r2
 80074b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074b4:	d005      	beq.n	80074c2 <__cvt+0x42>
 80074b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074ba:	d100      	bne.n	80074be <__cvt+0x3e>
 80074bc:	3601      	adds	r6, #1
 80074be:	2102      	movs	r1, #2
 80074c0:	e000      	b.n	80074c4 <__cvt+0x44>
 80074c2:	2103      	movs	r1, #3
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	ab02      	add	r3, sp, #8
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	ec45 4b10 	vmov	d0, r4, r5
 80074d0:	4653      	mov	r3, sl
 80074d2:	4632      	mov	r2, r6
 80074d4:	f000 ff44 	bl	8008360 <_dtoa_r>
 80074d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074dc:	4607      	mov	r7, r0
 80074de:	d102      	bne.n	80074e6 <__cvt+0x66>
 80074e0:	f019 0f01 	tst.w	r9, #1
 80074e4:	d022      	beq.n	800752c <__cvt+0xac>
 80074e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074ea:	eb07 0906 	add.w	r9, r7, r6
 80074ee:	d110      	bne.n	8007512 <__cvt+0x92>
 80074f0:	783b      	ldrb	r3, [r7, #0]
 80074f2:	2b30      	cmp	r3, #48	; 0x30
 80074f4:	d10a      	bne.n	800750c <__cvt+0x8c>
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	4620      	mov	r0, r4
 80074fc:	4629      	mov	r1, r5
 80074fe:	f7f9 fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007502:	b918      	cbnz	r0, 800750c <__cvt+0x8c>
 8007504:	f1c6 0601 	rsb	r6, r6, #1
 8007508:	f8ca 6000 	str.w	r6, [sl]
 800750c:	f8da 3000 	ldr.w	r3, [sl]
 8007510:	4499      	add	r9, r3
 8007512:	2200      	movs	r2, #0
 8007514:	2300      	movs	r3, #0
 8007516:	4620      	mov	r0, r4
 8007518:	4629      	mov	r1, r5
 800751a:	f7f9 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800751e:	b108      	cbz	r0, 8007524 <__cvt+0xa4>
 8007520:	f8cd 900c 	str.w	r9, [sp, #12]
 8007524:	2230      	movs	r2, #48	; 0x30
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	454b      	cmp	r3, r9
 800752a:	d307      	bcc.n	800753c <__cvt+0xbc>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007530:	1bdb      	subs	r3, r3, r7
 8007532:	4638      	mov	r0, r7
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	b004      	add	sp, #16
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	1c59      	adds	r1, r3, #1
 800753e:	9103      	str	r1, [sp, #12]
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e7f0      	b.n	8007526 <__cvt+0xa6>

08007544 <__exponent>:
 8007544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007546:	4603      	mov	r3, r0
 8007548:	2900      	cmp	r1, #0
 800754a:	bfb8      	it	lt
 800754c:	4249      	neglt	r1, r1
 800754e:	f803 2b02 	strb.w	r2, [r3], #2
 8007552:	bfb4      	ite	lt
 8007554:	222d      	movlt	r2, #45	; 0x2d
 8007556:	222b      	movge	r2, #43	; 0x2b
 8007558:	2909      	cmp	r1, #9
 800755a:	7042      	strb	r2, [r0, #1]
 800755c:	dd2a      	ble.n	80075b4 <__exponent+0x70>
 800755e:	f10d 0207 	add.w	r2, sp, #7
 8007562:	4617      	mov	r7, r2
 8007564:	260a      	movs	r6, #10
 8007566:	4694      	mov	ip, r2
 8007568:	fb91 f5f6 	sdiv	r5, r1, r6
 800756c:	fb06 1415 	mls	r4, r6, r5, r1
 8007570:	3430      	adds	r4, #48	; 0x30
 8007572:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007576:	460c      	mov	r4, r1
 8007578:	2c63      	cmp	r4, #99	; 0x63
 800757a:	f102 32ff 	add.w	r2, r2, #4294967295
 800757e:	4629      	mov	r1, r5
 8007580:	dcf1      	bgt.n	8007566 <__exponent+0x22>
 8007582:	3130      	adds	r1, #48	; 0x30
 8007584:	f1ac 0402 	sub.w	r4, ip, #2
 8007588:	f802 1c01 	strb.w	r1, [r2, #-1]
 800758c:	1c41      	adds	r1, r0, #1
 800758e:	4622      	mov	r2, r4
 8007590:	42ba      	cmp	r2, r7
 8007592:	d30a      	bcc.n	80075aa <__exponent+0x66>
 8007594:	f10d 0209 	add.w	r2, sp, #9
 8007598:	eba2 020c 	sub.w	r2, r2, ip
 800759c:	42bc      	cmp	r4, r7
 800759e:	bf88      	it	hi
 80075a0:	2200      	movhi	r2, #0
 80075a2:	4413      	add	r3, r2
 80075a4:	1a18      	subs	r0, r3, r0
 80075a6:	b003      	add	sp, #12
 80075a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075b2:	e7ed      	b.n	8007590 <__exponent+0x4c>
 80075b4:	2330      	movs	r3, #48	; 0x30
 80075b6:	3130      	adds	r1, #48	; 0x30
 80075b8:	7083      	strb	r3, [r0, #2]
 80075ba:	70c1      	strb	r1, [r0, #3]
 80075bc:	1d03      	adds	r3, r0, #4
 80075be:	e7f1      	b.n	80075a4 <__exponent+0x60>

080075c0 <_printf_float>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	ed2d 8b02 	vpush	{d8}
 80075c8:	b08d      	sub	sp, #52	; 0x34
 80075ca:	460c      	mov	r4, r1
 80075cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075d0:	4616      	mov	r6, r2
 80075d2:	461f      	mov	r7, r3
 80075d4:	4605      	mov	r5, r0
 80075d6:	f000 fd89 	bl	80080ec <_localeconv_r>
 80075da:	f8d0 a000 	ldr.w	sl, [r0]
 80075de:	4650      	mov	r0, sl
 80075e0:	f7f8 fe46 	bl	8000270 <strlen>
 80075e4:	2300      	movs	r3, #0
 80075e6:	930a      	str	r3, [sp, #40]	; 0x28
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	9305      	str	r3, [sp, #20]
 80075ec:	f8d8 3000 	ldr.w	r3, [r8]
 80075f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075f4:	3307      	adds	r3, #7
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	f103 0208 	add.w	r2, r3, #8
 80075fe:	f8c8 2000 	str.w	r2, [r8]
 8007602:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007610:	ee08 0a10 	vmov	s16, r0
 8007614:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800761c:	4b9e      	ldr	r3, [pc, #632]	; (8007898 <_printf_float+0x2d8>)
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	f7f9 fa83 	bl	8000b2c <__aeabi_dcmpun>
 8007626:	bb88      	cbnz	r0, 800768c <_printf_float+0xcc>
 8007628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800762c:	4b9a      	ldr	r3, [pc, #616]	; (8007898 <_printf_float+0x2d8>)
 800762e:	f04f 32ff 	mov.w	r2, #4294967295
 8007632:	f7f9 fa5d 	bl	8000af0 <__aeabi_dcmple>
 8007636:	bb48      	cbnz	r0, 800768c <_printf_float+0xcc>
 8007638:	2200      	movs	r2, #0
 800763a:	2300      	movs	r3, #0
 800763c:	4640      	mov	r0, r8
 800763e:	4649      	mov	r1, r9
 8007640:	f7f9 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8007644:	b110      	cbz	r0, 800764c <_printf_float+0x8c>
 8007646:	232d      	movs	r3, #45	; 0x2d
 8007648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800764c:	4a93      	ldr	r2, [pc, #588]	; (800789c <_printf_float+0x2dc>)
 800764e:	4b94      	ldr	r3, [pc, #592]	; (80078a0 <_printf_float+0x2e0>)
 8007650:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007654:	bf94      	ite	ls
 8007656:	4690      	movls	r8, r2
 8007658:	4698      	movhi	r8, r3
 800765a:	2303      	movs	r3, #3
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	9b05      	ldr	r3, [sp, #20]
 8007660:	f023 0304 	bic.w	r3, r3, #4
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	f04f 0900 	mov.w	r9, #0
 800766a:	9700      	str	r7, [sp, #0]
 800766c:	4633      	mov	r3, r6
 800766e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007670:	4621      	mov	r1, r4
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f9da 	bl	8007a2c <_printf_common>
 8007678:	3001      	adds	r0, #1
 800767a:	f040 8090 	bne.w	800779e <_printf_float+0x1de>
 800767e:	f04f 30ff 	mov.w	r0, #4294967295
 8007682:	b00d      	add	sp, #52	; 0x34
 8007684:	ecbd 8b02 	vpop	{d8}
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	f7f9 fa4a 	bl	8000b2c <__aeabi_dcmpun>
 8007698:	b140      	cbz	r0, 80076ac <_printf_float+0xec>
 800769a:	464b      	mov	r3, r9
 800769c:	2b00      	cmp	r3, #0
 800769e:	bfbc      	itt	lt
 80076a0:	232d      	movlt	r3, #45	; 0x2d
 80076a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076a6:	4a7f      	ldr	r2, [pc, #508]	; (80078a4 <_printf_float+0x2e4>)
 80076a8:	4b7f      	ldr	r3, [pc, #508]	; (80078a8 <_printf_float+0x2e8>)
 80076aa:	e7d1      	b.n	8007650 <_printf_float+0x90>
 80076ac:	6863      	ldr	r3, [r4, #4]
 80076ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076b2:	9206      	str	r2, [sp, #24]
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	d13f      	bne.n	8007738 <_printf_float+0x178>
 80076b8:	2306      	movs	r3, #6
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	9b05      	ldr	r3, [sp, #20]
 80076be:	6861      	ldr	r1, [r4, #4]
 80076c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076c4:	2300      	movs	r3, #0
 80076c6:	9303      	str	r3, [sp, #12]
 80076c8:	ab0a      	add	r3, sp, #40	; 0x28
 80076ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076ce:	ab09      	add	r3, sp, #36	; 0x24
 80076d0:	ec49 8b10 	vmov	d0, r8, r9
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6022      	str	r2, [r4, #0]
 80076d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076dc:	4628      	mov	r0, r5
 80076de:	f7ff fecf 	bl	8007480 <__cvt>
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076e6:	2b47      	cmp	r3, #71	; 0x47
 80076e8:	4680      	mov	r8, r0
 80076ea:	d108      	bne.n	80076fe <_printf_float+0x13e>
 80076ec:	1cc8      	adds	r0, r1, #3
 80076ee:	db02      	blt.n	80076f6 <_printf_float+0x136>
 80076f0:	6863      	ldr	r3, [r4, #4]
 80076f2:	4299      	cmp	r1, r3
 80076f4:	dd41      	ble.n	800777a <_printf_float+0x1ba>
 80076f6:	f1ab 0302 	sub.w	r3, fp, #2
 80076fa:	fa5f fb83 	uxtb.w	fp, r3
 80076fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007702:	d820      	bhi.n	8007746 <_printf_float+0x186>
 8007704:	3901      	subs	r1, #1
 8007706:	465a      	mov	r2, fp
 8007708:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800770c:	9109      	str	r1, [sp, #36]	; 0x24
 800770e:	f7ff ff19 	bl	8007544 <__exponent>
 8007712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007714:	1813      	adds	r3, r2, r0
 8007716:	2a01      	cmp	r2, #1
 8007718:	4681      	mov	r9, r0
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	dc02      	bgt.n	8007724 <_printf_float+0x164>
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	07d2      	lsls	r2, r2, #31
 8007722:	d501      	bpl.n	8007728 <_printf_float+0x168>
 8007724:	3301      	adds	r3, #1
 8007726:	6123      	str	r3, [r4, #16]
 8007728:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800772c:	2b00      	cmp	r3, #0
 800772e:	d09c      	beq.n	800766a <_printf_float+0xaa>
 8007730:	232d      	movs	r3, #45	; 0x2d
 8007732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007736:	e798      	b.n	800766a <_printf_float+0xaa>
 8007738:	9a06      	ldr	r2, [sp, #24]
 800773a:	2a47      	cmp	r2, #71	; 0x47
 800773c:	d1be      	bne.n	80076bc <_printf_float+0xfc>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1bc      	bne.n	80076bc <_printf_float+0xfc>
 8007742:	2301      	movs	r3, #1
 8007744:	e7b9      	b.n	80076ba <_printf_float+0xfa>
 8007746:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800774a:	d118      	bne.n	800777e <_printf_float+0x1be>
 800774c:	2900      	cmp	r1, #0
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	dd0b      	ble.n	800776a <_printf_float+0x1aa>
 8007752:	6121      	str	r1, [r4, #16]
 8007754:	b913      	cbnz	r3, 800775c <_printf_float+0x19c>
 8007756:	6822      	ldr	r2, [r4, #0]
 8007758:	07d0      	lsls	r0, r2, #31
 800775a:	d502      	bpl.n	8007762 <_printf_float+0x1a2>
 800775c:	3301      	adds	r3, #1
 800775e:	440b      	add	r3, r1
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	65a1      	str	r1, [r4, #88]	; 0x58
 8007764:	f04f 0900 	mov.w	r9, #0
 8007768:	e7de      	b.n	8007728 <_printf_float+0x168>
 800776a:	b913      	cbnz	r3, 8007772 <_printf_float+0x1b2>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	07d2      	lsls	r2, r2, #31
 8007770:	d501      	bpl.n	8007776 <_printf_float+0x1b6>
 8007772:	3302      	adds	r3, #2
 8007774:	e7f4      	b.n	8007760 <_printf_float+0x1a0>
 8007776:	2301      	movs	r3, #1
 8007778:	e7f2      	b.n	8007760 <_printf_float+0x1a0>
 800777a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007780:	4299      	cmp	r1, r3
 8007782:	db05      	blt.n	8007790 <_printf_float+0x1d0>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	6121      	str	r1, [r4, #16]
 8007788:	07d8      	lsls	r0, r3, #31
 800778a:	d5ea      	bpl.n	8007762 <_printf_float+0x1a2>
 800778c:	1c4b      	adds	r3, r1, #1
 800778e:	e7e7      	b.n	8007760 <_printf_float+0x1a0>
 8007790:	2900      	cmp	r1, #0
 8007792:	bfd4      	ite	le
 8007794:	f1c1 0202 	rsble	r2, r1, #2
 8007798:	2201      	movgt	r2, #1
 800779a:	4413      	add	r3, r2
 800779c:	e7e0      	b.n	8007760 <_printf_float+0x1a0>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	055a      	lsls	r2, r3, #21
 80077a2:	d407      	bmi.n	80077b4 <_printf_float+0x1f4>
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	4642      	mov	r2, r8
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	d12c      	bne.n	800780c <_printf_float+0x24c>
 80077b2:	e764      	b.n	800767e <_printf_float+0xbe>
 80077b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077b8:	f240 80e0 	bls.w	800797c <_printf_float+0x3bc>
 80077bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	f7f9 f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d034      	beq.n	8007836 <_printf_float+0x276>
 80077cc:	4a37      	ldr	r2, [pc, #220]	; (80078ac <_printf_float+0x2ec>)
 80077ce:	2301      	movs	r3, #1
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af51 	beq.w	800767e <_printf_float+0xbe>
 80077dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e0:	429a      	cmp	r2, r3
 80077e2:	db02      	blt.n	80077ea <_printf_float+0x22a>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	07d8      	lsls	r0, r3, #31
 80077e8:	d510      	bpl.n	800780c <_printf_float+0x24c>
 80077ea:	ee18 3a10 	vmov	r3, s16
 80077ee:	4652      	mov	r2, sl
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af41 	beq.w	800767e <_printf_float+0xbe>
 80077fc:	f04f 0800 	mov.w	r8, #0
 8007800:	f104 091a 	add.w	r9, r4, #26
 8007804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007806:	3b01      	subs	r3, #1
 8007808:	4543      	cmp	r3, r8
 800780a:	dc09      	bgt.n	8007820 <_printf_float+0x260>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	079b      	lsls	r3, r3, #30
 8007810:	f100 8107 	bmi.w	8007a22 <_printf_float+0x462>
 8007814:	68e0      	ldr	r0, [r4, #12]
 8007816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007818:	4298      	cmp	r0, r3
 800781a:	bfb8      	it	lt
 800781c:	4618      	movlt	r0, r3
 800781e:	e730      	b.n	8007682 <_printf_float+0xc2>
 8007820:	2301      	movs	r3, #1
 8007822:	464a      	mov	r2, r9
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f af27 	beq.w	800767e <_printf_float+0xbe>
 8007830:	f108 0801 	add.w	r8, r8, #1
 8007834:	e7e6      	b.n	8007804 <_printf_float+0x244>
 8007836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc39      	bgt.n	80078b0 <_printf_float+0x2f0>
 800783c:	4a1b      	ldr	r2, [pc, #108]	; (80078ac <_printf_float+0x2ec>)
 800783e:	2301      	movs	r3, #1
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f af19 	beq.w	800767e <_printf_float+0xbe>
 800784c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007850:	4313      	orrs	r3, r2
 8007852:	d102      	bne.n	800785a <_printf_float+0x29a>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	07d9      	lsls	r1, r3, #31
 8007858:	d5d8      	bpl.n	800780c <_printf_float+0x24c>
 800785a:	ee18 3a10 	vmov	r3, s16
 800785e:	4652      	mov	r2, sl
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af09 	beq.w	800767e <_printf_float+0xbe>
 800786c:	f04f 0900 	mov.w	r9, #0
 8007870:	f104 0a1a 	add.w	sl, r4, #26
 8007874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007876:	425b      	negs	r3, r3
 8007878:	454b      	cmp	r3, r9
 800787a:	dc01      	bgt.n	8007880 <_printf_float+0x2c0>
 800787c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787e:	e792      	b.n	80077a6 <_printf_float+0x1e6>
 8007880:	2301      	movs	r3, #1
 8007882:	4652      	mov	r2, sl
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	47b8      	blx	r7
 800788a:	3001      	adds	r0, #1
 800788c:	f43f aef7 	beq.w	800767e <_printf_float+0xbe>
 8007890:	f109 0901 	add.w	r9, r9, #1
 8007894:	e7ee      	b.n	8007874 <_printf_float+0x2b4>
 8007896:	bf00      	nop
 8007898:	7fefffff 	.word	0x7fefffff
 800789c:	0800c0e7 	.word	0x0800c0e7
 80078a0:	0800c0eb 	.word	0x0800c0eb
 80078a4:	0800c0ef 	.word	0x0800c0ef
 80078a8:	0800c0f3 	.word	0x0800c0f3
 80078ac:	0800ac3e 	.word	0x0800ac3e
 80078b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078b4:	429a      	cmp	r2, r3
 80078b6:	bfa8      	it	ge
 80078b8:	461a      	movge	r2, r3
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	4691      	mov	r9, r2
 80078be:	dc37      	bgt.n	8007930 <_printf_float+0x370>
 80078c0:	f04f 0b00 	mov.w	fp, #0
 80078c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078c8:	f104 021a 	add.w	r2, r4, #26
 80078cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078ce:	9305      	str	r3, [sp, #20]
 80078d0:	eba3 0309 	sub.w	r3, r3, r9
 80078d4:	455b      	cmp	r3, fp
 80078d6:	dc33      	bgt.n	8007940 <_printf_float+0x380>
 80078d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078dc:	429a      	cmp	r2, r3
 80078de:	db3b      	blt.n	8007958 <_printf_float+0x398>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	07da      	lsls	r2, r3, #31
 80078e4:	d438      	bmi.n	8007958 <_printf_float+0x398>
 80078e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078ea:	eba2 0903 	sub.w	r9, r2, r3
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	1ad2      	subs	r2, r2, r3
 80078f2:	4591      	cmp	r9, r2
 80078f4:	bfa8      	it	ge
 80078f6:	4691      	movge	r9, r2
 80078f8:	f1b9 0f00 	cmp.w	r9, #0
 80078fc:	dc35      	bgt.n	800796a <_printf_float+0x3aa>
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007906:	f104 0a1a 	add.w	sl, r4, #26
 800790a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800790e:	1a9b      	subs	r3, r3, r2
 8007910:	eba3 0309 	sub.w	r3, r3, r9
 8007914:	4543      	cmp	r3, r8
 8007916:	f77f af79 	ble.w	800780c <_printf_float+0x24c>
 800791a:	2301      	movs	r3, #1
 800791c:	4652      	mov	r2, sl
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f aeaa 	beq.w	800767e <_printf_float+0xbe>
 800792a:	f108 0801 	add.w	r8, r8, #1
 800792e:	e7ec      	b.n	800790a <_printf_float+0x34a>
 8007930:	4613      	mov	r3, r2
 8007932:	4631      	mov	r1, r6
 8007934:	4642      	mov	r2, r8
 8007936:	4628      	mov	r0, r5
 8007938:	47b8      	blx	r7
 800793a:	3001      	adds	r0, #1
 800793c:	d1c0      	bne.n	80078c0 <_printf_float+0x300>
 800793e:	e69e      	b.n	800767e <_printf_float+0xbe>
 8007940:	2301      	movs	r3, #1
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	9205      	str	r2, [sp, #20]
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f ae97 	beq.w	800767e <_printf_float+0xbe>
 8007950:	9a05      	ldr	r2, [sp, #20]
 8007952:	f10b 0b01 	add.w	fp, fp, #1
 8007956:	e7b9      	b.n	80078cc <_printf_float+0x30c>
 8007958:	ee18 3a10 	vmov	r3, s16
 800795c:	4652      	mov	r2, sl
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	d1be      	bne.n	80078e6 <_printf_float+0x326>
 8007968:	e689      	b.n	800767e <_printf_float+0xbe>
 800796a:	9a05      	ldr	r2, [sp, #20]
 800796c:	464b      	mov	r3, r9
 800796e:	4442      	add	r2, r8
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	d1c1      	bne.n	80078fe <_printf_float+0x33e>
 800797a:	e680      	b.n	800767e <_printf_float+0xbe>
 800797c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800797e:	2a01      	cmp	r2, #1
 8007980:	dc01      	bgt.n	8007986 <_printf_float+0x3c6>
 8007982:	07db      	lsls	r3, r3, #31
 8007984:	d53a      	bpl.n	80079fc <_printf_float+0x43c>
 8007986:	2301      	movs	r3, #1
 8007988:	4642      	mov	r2, r8
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f ae74 	beq.w	800767e <_printf_float+0xbe>
 8007996:	ee18 3a10 	vmov	r3, s16
 800799a:	4652      	mov	r2, sl
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f ae6b 	beq.w	800767e <_printf_float+0xbe>
 80079a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079ac:	2200      	movs	r2, #0
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079b4:	f7f9 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80079b8:	b9d8      	cbnz	r0, 80079f2 <_printf_float+0x432>
 80079ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079be:	f108 0201 	add.w	r2, r8, #1
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	d10e      	bne.n	80079ea <_printf_float+0x42a>
 80079cc:	e657      	b.n	800767e <_printf_float+0xbe>
 80079ce:	2301      	movs	r3, #1
 80079d0:	4652      	mov	r2, sl
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f ae50 	beq.w	800767e <_printf_float+0xbe>
 80079de:	f108 0801 	add.w	r8, r8, #1
 80079e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e4:	3b01      	subs	r3, #1
 80079e6:	4543      	cmp	r3, r8
 80079e8:	dcf1      	bgt.n	80079ce <_printf_float+0x40e>
 80079ea:	464b      	mov	r3, r9
 80079ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079f0:	e6da      	b.n	80077a8 <_printf_float+0x1e8>
 80079f2:	f04f 0800 	mov.w	r8, #0
 80079f6:	f104 0a1a 	add.w	sl, r4, #26
 80079fa:	e7f2      	b.n	80079e2 <_printf_float+0x422>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4642      	mov	r2, r8
 8007a00:	e7df      	b.n	80079c2 <_printf_float+0x402>
 8007a02:	2301      	movs	r3, #1
 8007a04:	464a      	mov	r2, r9
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f43f ae36 	beq.w	800767e <_printf_float+0xbe>
 8007a12:	f108 0801 	add.w	r8, r8, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	4543      	cmp	r3, r8
 8007a1e:	dcf0      	bgt.n	8007a02 <_printf_float+0x442>
 8007a20:	e6f8      	b.n	8007814 <_printf_float+0x254>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	f104 0919 	add.w	r9, r4, #25
 8007a2a:	e7f4      	b.n	8007a16 <_printf_float+0x456>

08007a2c <_printf_common>:
 8007a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a30:	4616      	mov	r6, r2
 8007a32:	4699      	mov	r9, r3
 8007a34:	688a      	ldr	r2, [r1, #8]
 8007a36:	690b      	ldr	r3, [r1, #16]
 8007a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	bfb8      	it	lt
 8007a40:	4613      	movlt	r3, r2
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	b10a      	cbz	r2, 8007a52 <_printf_common+0x26>
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6033      	str	r3, [r6, #0]
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	0699      	lsls	r1, r3, #26
 8007a56:	bf42      	ittt	mi
 8007a58:	6833      	ldrmi	r3, [r6, #0]
 8007a5a:	3302      	addmi	r3, #2
 8007a5c:	6033      	strmi	r3, [r6, #0]
 8007a5e:	6825      	ldr	r5, [r4, #0]
 8007a60:	f015 0506 	ands.w	r5, r5, #6
 8007a64:	d106      	bne.n	8007a74 <_printf_common+0x48>
 8007a66:	f104 0a19 	add.w	sl, r4, #25
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	6832      	ldr	r2, [r6, #0]
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	dc26      	bgt.n	8007ac2 <_printf_common+0x96>
 8007a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a78:	1e13      	subs	r3, r2, #0
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	bf18      	it	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	0692      	lsls	r2, r2, #26
 8007a82:	d42b      	bmi.n	8007adc <_printf_common+0xb0>
 8007a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	47c0      	blx	r8
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d01e      	beq.n	8007ad0 <_printf_common+0xa4>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	6922      	ldr	r2, [r4, #16]
 8007a96:	f003 0306 	and.w	r3, r3, #6
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	bf02      	ittt	eq
 8007a9e:	68e5      	ldreq	r5, [r4, #12]
 8007aa0:	6833      	ldreq	r3, [r6, #0]
 8007aa2:	1aed      	subeq	r5, r5, r3
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	bf0c      	ite	eq
 8007aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aac:	2500      	movne	r5, #0
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	bfc4      	itt	gt
 8007ab2:	1a9b      	subgt	r3, r3, r2
 8007ab4:	18ed      	addgt	r5, r5, r3
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	341a      	adds	r4, #26
 8007aba:	42b5      	cmp	r5, r6
 8007abc:	d11a      	bne.n	8007af4 <_printf_common+0xc8>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	e008      	b.n	8007ad4 <_printf_common+0xa8>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	4638      	mov	r0, r7
 8007aca:	47c0      	blx	r8
 8007acc:	3001      	adds	r0, #1
 8007ace:	d103      	bne.n	8007ad8 <_printf_common+0xac>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad8:	3501      	adds	r5, #1
 8007ada:	e7c6      	b.n	8007a6a <_printf_common+0x3e>
 8007adc:	18e1      	adds	r1, r4, r3
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	2030      	movs	r0, #48	; 0x30
 8007ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ae6:	4422      	add	r2, r4
 8007ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007af0:	3302      	adds	r3, #2
 8007af2:	e7c7      	b.n	8007a84 <_printf_common+0x58>
 8007af4:	2301      	movs	r3, #1
 8007af6:	4622      	mov	r2, r4
 8007af8:	4649      	mov	r1, r9
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c0      	blx	r8
 8007afe:	3001      	adds	r0, #1
 8007b00:	d0e6      	beq.n	8007ad0 <_printf_common+0xa4>
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7d9      	b.n	8007aba <_printf_common+0x8e>
	...

08007b08 <_printf_i>:
 8007b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	7e0f      	ldrb	r7, [r1, #24]
 8007b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b10:	2f78      	cmp	r7, #120	; 0x78
 8007b12:	4691      	mov	r9, r2
 8007b14:	4680      	mov	r8, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	469a      	mov	sl, r3
 8007b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b1e:	d807      	bhi.n	8007b30 <_printf_i+0x28>
 8007b20:	2f62      	cmp	r7, #98	; 0x62
 8007b22:	d80a      	bhi.n	8007b3a <_printf_i+0x32>
 8007b24:	2f00      	cmp	r7, #0
 8007b26:	f000 80d4 	beq.w	8007cd2 <_printf_i+0x1ca>
 8007b2a:	2f58      	cmp	r7, #88	; 0x58
 8007b2c:	f000 80c0 	beq.w	8007cb0 <_printf_i+0x1a8>
 8007b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b38:	e03a      	b.n	8007bb0 <_printf_i+0xa8>
 8007b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b3e:	2b15      	cmp	r3, #21
 8007b40:	d8f6      	bhi.n	8007b30 <_printf_i+0x28>
 8007b42:	a101      	add	r1, pc, #4	; (adr r1, 8007b48 <_printf_i+0x40>)
 8007b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b48:	08007ba1 	.word	0x08007ba1
 8007b4c:	08007bb5 	.word	0x08007bb5
 8007b50:	08007b31 	.word	0x08007b31
 8007b54:	08007b31 	.word	0x08007b31
 8007b58:	08007b31 	.word	0x08007b31
 8007b5c:	08007b31 	.word	0x08007b31
 8007b60:	08007bb5 	.word	0x08007bb5
 8007b64:	08007b31 	.word	0x08007b31
 8007b68:	08007b31 	.word	0x08007b31
 8007b6c:	08007b31 	.word	0x08007b31
 8007b70:	08007b31 	.word	0x08007b31
 8007b74:	08007cb9 	.word	0x08007cb9
 8007b78:	08007be1 	.word	0x08007be1
 8007b7c:	08007c73 	.word	0x08007c73
 8007b80:	08007b31 	.word	0x08007b31
 8007b84:	08007b31 	.word	0x08007b31
 8007b88:	08007cdb 	.word	0x08007cdb
 8007b8c:	08007b31 	.word	0x08007b31
 8007b90:	08007be1 	.word	0x08007be1
 8007b94:	08007b31 	.word	0x08007b31
 8007b98:	08007b31 	.word	0x08007b31
 8007b9c:	08007c7b 	.word	0x08007c7b
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	602a      	str	r2, [r5, #0]
 8007ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e09f      	b.n	8007cf4 <_printf_i+0x1ec>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	0607      	lsls	r7, r0, #24
 8007bba:	f103 0104 	add.w	r1, r3, #4
 8007bbe:	6029      	str	r1, [r5, #0]
 8007bc0:	d501      	bpl.n	8007bc6 <_printf_i+0xbe>
 8007bc2:	681e      	ldr	r6, [r3, #0]
 8007bc4:	e003      	b.n	8007bce <_printf_i+0xc6>
 8007bc6:	0646      	lsls	r6, r0, #25
 8007bc8:	d5fb      	bpl.n	8007bc2 <_printf_i+0xba>
 8007bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	da03      	bge.n	8007bda <_printf_i+0xd2>
 8007bd2:	232d      	movs	r3, #45	; 0x2d
 8007bd4:	4276      	negs	r6, r6
 8007bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bda:	485a      	ldr	r0, [pc, #360]	; (8007d44 <_printf_i+0x23c>)
 8007bdc:	230a      	movs	r3, #10
 8007bde:	e012      	b.n	8007c06 <_printf_i+0xfe>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	6820      	ldr	r0, [r4, #0]
 8007be4:	1d19      	adds	r1, r3, #4
 8007be6:	6029      	str	r1, [r5, #0]
 8007be8:	0605      	lsls	r5, r0, #24
 8007bea:	d501      	bpl.n	8007bf0 <_printf_i+0xe8>
 8007bec:	681e      	ldr	r6, [r3, #0]
 8007bee:	e002      	b.n	8007bf6 <_printf_i+0xee>
 8007bf0:	0641      	lsls	r1, r0, #25
 8007bf2:	d5fb      	bpl.n	8007bec <_printf_i+0xe4>
 8007bf4:	881e      	ldrh	r6, [r3, #0]
 8007bf6:	4853      	ldr	r0, [pc, #332]	; (8007d44 <_printf_i+0x23c>)
 8007bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2308      	moveq	r3, #8
 8007bfe:	230a      	movne	r3, #10
 8007c00:	2100      	movs	r1, #0
 8007c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c06:	6865      	ldr	r5, [r4, #4]
 8007c08:	60a5      	str	r5, [r4, #8]
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	bfa2      	ittt	ge
 8007c0e:	6821      	ldrge	r1, [r4, #0]
 8007c10:	f021 0104 	bicge.w	r1, r1, #4
 8007c14:	6021      	strge	r1, [r4, #0]
 8007c16:	b90e      	cbnz	r6, 8007c1c <_printf_i+0x114>
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	d04b      	beq.n	8007cb4 <_printf_i+0x1ac>
 8007c1c:	4615      	mov	r5, r2
 8007c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c22:	fb03 6711 	mls	r7, r3, r1, r6
 8007c26:	5dc7      	ldrb	r7, [r0, r7]
 8007c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c2c:	4637      	mov	r7, r6
 8007c2e:	42bb      	cmp	r3, r7
 8007c30:	460e      	mov	r6, r1
 8007c32:	d9f4      	bls.n	8007c1e <_printf_i+0x116>
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d10b      	bne.n	8007c50 <_printf_i+0x148>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	07de      	lsls	r6, r3, #31
 8007c3c:	d508      	bpl.n	8007c50 <_printf_i+0x148>
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	6861      	ldr	r1, [r4, #4]
 8007c42:	4299      	cmp	r1, r3
 8007c44:	bfde      	ittt	le
 8007c46:	2330      	movle	r3, #48	; 0x30
 8007c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c50:	1b52      	subs	r2, r2, r5
 8007c52:	6122      	str	r2, [r4, #16]
 8007c54:	f8cd a000 	str.w	sl, [sp]
 8007c58:	464b      	mov	r3, r9
 8007c5a:	aa03      	add	r2, sp, #12
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7ff fee4 	bl	8007a2c <_printf_common>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d14a      	bne.n	8007cfe <_printf_i+0x1f6>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	b004      	add	sp, #16
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	f043 0320 	orr.w	r3, r3, #32
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	4833      	ldr	r0, [pc, #204]	; (8007d48 <_printf_i+0x240>)
 8007c7c:	2778      	movs	r7, #120	; 0x78
 8007c7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	6829      	ldr	r1, [r5, #0]
 8007c86:	061f      	lsls	r7, r3, #24
 8007c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c8c:	d402      	bmi.n	8007c94 <_printf_i+0x18c>
 8007c8e:	065f      	lsls	r7, r3, #25
 8007c90:	bf48      	it	mi
 8007c92:	b2b6      	uxthmi	r6, r6
 8007c94:	07df      	lsls	r7, r3, #31
 8007c96:	bf48      	it	mi
 8007c98:	f043 0320 	orrmi.w	r3, r3, #32
 8007c9c:	6029      	str	r1, [r5, #0]
 8007c9e:	bf48      	it	mi
 8007ca0:	6023      	strmi	r3, [r4, #0]
 8007ca2:	b91e      	cbnz	r6, 8007cac <_printf_i+0x1a4>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	f023 0320 	bic.w	r3, r3, #32
 8007caa:	6023      	str	r3, [r4, #0]
 8007cac:	2310      	movs	r3, #16
 8007cae:	e7a7      	b.n	8007c00 <_printf_i+0xf8>
 8007cb0:	4824      	ldr	r0, [pc, #144]	; (8007d44 <_printf_i+0x23c>)
 8007cb2:	e7e4      	b.n	8007c7e <_printf_i+0x176>
 8007cb4:	4615      	mov	r5, r2
 8007cb6:	e7bd      	b.n	8007c34 <_printf_i+0x12c>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	6826      	ldr	r6, [r4, #0]
 8007cbc:	6961      	ldr	r1, [r4, #20]
 8007cbe:	1d18      	adds	r0, r3, #4
 8007cc0:	6028      	str	r0, [r5, #0]
 8007cc2:	0635      	lsls	r5, r6, #24
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0x1c4>
 8007cc8:	6019      	str	r1, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <_printf_i+0x1ca>
 8007ccc:	0670      	lsls	r0, r6, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0x1c0>
 8007cd0:	8019      	strh	r1, [r3, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	4615      	mov	r5, r2
 8007cd8:	e7bc      	b.n	8007c54 <_printf_i+0x14c>
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	1d1a      	adds	r2, r3, #4
 8007cde:	602a      	str	r2, [r5, #0]
 8007ce0:	681d      	ldr	r5, [r3, #0]
 8007ce2:	6862      	ldr	r2, [r4, #4]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f7f8 fa72 	bl	80001d0 <memchr>
 8007cec:	b108      	cbz	r0, 8007cf2 <_printf_i+0x1ea>
 8007cee:	1b40      	subs	r0, r0, r5
 8007cf0:	6060      	str	r0, [r4, #4]
 8007cf2:	6863      	ldr	r3, [r4, #4]
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfc:	e7aa      	b.n	8007c54 <_printf_i+0x14c>
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4649      	mov	r1, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	47d0      	blx	sl
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d0ad      	beq.n	8007c68 <_printf_i+0x160>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	079b      	lsls	r3, r3, #30
 8007d10:	d413      	bmi.n	8007d3a <_printf_i+0x232>
 8007d12:	68e0      	ldr	r0, [r4, #12]
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	4298      	cmp	r0, r3
 8007d18:	bfb8      	it	lt
 8007d1a:	4618      	movlt	r0, r3
 8007d1c:	e7a6      	b.n	8007c6c <_printf_i+0x164>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4632      	mov	r2, r6
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d09d      	beq.n	8007c68 <_printf_i+0x160>
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	9903      	ldr	r1, [sp, #12]
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dcf2      	bgt.n	8007d1e <_printf_i+0x216>
 8007d38:	e7eb      	b.n	8007d12 <_printf_i+0x20a>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	f104 0619 	add.w	r6, r4, #25
 8007d40:	e7f5      	b.n	8007d2e <_printf_i+0x226>
 8007d42:	bf00      	nop
 8007d44:	0800c0f7 	.word	0x0800c0f7
 8007d48:	0800c108 	.word	0x0800c108

08007d4c <__sflush_r>:
 8007d4c:	898a      	ldrh	r2, [r1, #12]
 8007d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d52:	4605      	mov	r5, r0
 8007d54:	0710      	lsls	r0, r2, #28
 8007d56:	460c      	mov	r4, r1
 8007d58:	d458      	bmi.n	8007e0c <__sflush_r+0xc0>
 8007d5a:	684b      	ldr	r3, [r1, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc05      	bgt.n	8007d6c <__sflush_r+0x20>
 8007d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dc02      	bgt.n	8007d6c <__sflush_r+0x20>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	d0f9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d78:	682f      	ldr	r7, [r5, #0]
 8007d7a:	6a21      	ldr	r1, [r4, #32]
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	d032      	beq.n	8007de6 <__sflush_r+0x9a>
 8007d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	075a      	lsls	r2, r3, #29
 8007d86:	d505      	bpl.n	8007d94 <__sflush_r+0x48>
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	1ac0      	subs	r0, r0, r3
 8007d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d8e:	b10b      	cbz	r3, 8007d94 <__sflush_r+0x48>
 8007d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d92:	1ac0      	subs	r0, r0, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	4602      	mov	r2, r0
 8007d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d9a:	6a21      	ldr	r1, [r4, #32]
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b0      	blx	r6
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	d106      	bne.n	8007db4 <__sflush_r+0x68>
 8007da6:	6829      	ldr	r1, [r5, #0]
 8007da8:	291d      	cmp	r1, #29
 8007daa:	d82b      	bhi.n	8007e04 <__sflush_r+0xb8>
 8007dac:	4a29      	ldr	r2, [pc, #164]	; (8007e54 <__sflush_r+0x108>)
 8007dae:	410a      	asrs	r2, r1
 8007db0:	07d6      	lsls	r6, r2, #31
 8007db2:	d427      	bmi.n	8007e04 <__sflush_r+0xb8>
 8007db4:	2200      	movs	r2, #0
 8007db6:	6062      	str	r2, [r4, #4]
 8007db8:	04d9      	lsls	r1, r3, #19
 8007dba:	6922      	ldr	r2, [r4, #16]
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	d504      	bpl.n	8007dca <__sflush_r+0x7e>
 8007dc0:	1c42      	adds	r2, r0, #1
 8007dc2:	d101      	bne.n	8007dc8 <__sflush_r+0x7c>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b903      	cbnz	r3, 8007dca <__sflush_r+0x7e>
 8007dc8:	6560      	str	r0, [r4, #84]	; 0x54
 8007dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dcc:	602f      	str	r7, [r5, #0]
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d0c9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	d002      	beq.n	8007de0 <__sflush_r+0x94>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f001 f8b2 	bl	8008f44 <_free_r>
 8007de0:	2000      	movs	r0, #0
 8007de2:	6360      	str	r0, [r4, #52]	; 0x34
 8007de4:	e7c0      	b.n	8007d68 <__sflush_r+0x1c>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b0      	blx	r6
 8007dec:	1c41      	adds	r1, r0, #1
 8007dee:	d1c8      	bne.n	8007d82 <__sflush_r+0x36>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0c5      	beq.n	8007d82 <__sflush_r+0x36>
 8007df6:	2b1d      	cmp	r3, #29
 8007df8:	d001      	beq.n	8007dfe <__sflush_r+0xb2>
 8007dfa:	2b16      	cmp	r3, #22
 8007dfc:	d101      	bne.n	8007e02 <__sflush_r+0xb6>
 8007dfe:	602f      	str	r7, [r5, #0]
 8007e00:	e7b1      	b.n	8007d66 <__sflush_r+0x1a>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	e7ad      	b.n	8007d68 <__sflush_r+0x1c>
 8007e0c:	690f      	ldr	r7, [r1, #16]
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	d0a9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007e12:	0793      	lsls	r3, r2, #30
 8007e14:	680e      	ldr	r6, [r1, #0]
 8007e16:	bf08      	it	eq
 8007e18:	694b      	ldreq	r3, [r1, #20]
 8007e1a:	600f      	str	r7, [r1, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2300      	movne	r3, #0
 8007e20:	eba6 0807 	sub.w	r8, r6, r7
 8007e24:	608b      	str	r3, [r1, #8]
 8007e26:	f1b8 0f00 	cmp.w	r8, #0
 8007e2a:	dd9c      	ble.n	8007d66 <__sflush_r+0x1a>
 8007e2c:	6a21      	ldr	r1, [r4, #32]
 8007e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e30:	4643      	mov	r3, r8
 8007e32:	463a      	mov	r2, r7
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dc06      	bgt.n	8007e4a <__sflush_r+0xfe>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	e78e      	b.n	8007d68 <__sflush_r+0x1c>
 8007e4a:	4407      	add	r7, r0
 8007e4c:	eba8 0800 	sub.w	r8, r8, r0
 8007e50:	e7e9      	b.n	8007e26 <__sflush_r+0xda>
 8007e52:	bf00      	nop
 8007e54:	dfbffffe 	.word	0xdfbffffe

08007e58 <_fflush_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	b913      	cbnz	r3, 8007e68 <_fflush_r+0x10>
 8007e62:	2500      	movs	r5, #0
 8007e64:	4628      	mov	r0, r5
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	b118      	cbz	r0, 8007e72 <_fflush_r+0x1a>
 8007e6a:	6a03      	ldr	r3, [r0, #32]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <_fflush_r+0x1a>
 8007e6e:	f000 f8a9 	bl	8007fc4 <__sinit>
 8007e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0f3      	beq.n	8007e62 <_fflush_r+0xa>
 8007e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e7c:	07d0      	lsls	r0, r2, #31
 8007e7e:	d404      	bmi.n	8007e8a <_fflush_r+0x32>
 8007e80:	0599      	lsls	r1, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_fflush_r+0x32>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f000 f9b5 	bl	80081f4 <__retarget_lock_acquire_recursive>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f7ff ff5d 	bl	8007d4c <__sflush_r>
 8007e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e94:	07da      	lsls	r2, r3, #31
 8007e96:	4605      	mov	r5, r0
 8007e98:	d4e4      	bmi.n	8007e64 <_fflush_r+0xc>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d4e1      	bmi.n	8007e64 <_fflush_r+0xc>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea2:	f000 f9a8 	bl	80081f6 <__retarget_lock_release_recursive>
 8007ea6:	e7dd      	b.n	8007e64 <_fflush_r+0xc>

08007ea8 <fflush>:
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	b920      	cbnz	r0, 8007eb6 <fflush+0xe>
 8007eac:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <fflush+0x18>)
 8007eae:	4905      	ldr	r1, [pc, #20]	; (8007ec4 <fflush+0x1c>)
 8007eb0:	4805      	ldr	r0, [pc, #20]	; (8007ec8 <fflush+0x20>)
 8007eb2:	f000 b89f 	b.w	8007ff4 <_fwalk_sglue>
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <fflush+0x24>)
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	f7ff bfcd 	b.w	8007e58 <_fflush_r>
 8007ebe:	bf00      	nop
 8007ec0:	20000658 	.word	0x20000658
 8007ec4:	08007e59 	.word	0x08007e59
 8007ec8:	20000664 	.word	0x20000664
 8007ecc:	200006b0 	.word	0x200006b0

08007ed0 <std>:
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ede:	6083      	str	r3, [r0, #8]
 8007ee0:	8181      	strh	r1, [r0, #12]
 8007ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee4:	81c2      	strh	r2, [r0, #14]
 8007ee6:	6183      	str	r3, [r0, #24]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	2208      	movs	r2, #8
 8007eec:	305c      	adds	r0, #92	; 0x5c
 8007eee:	f000 f8e2 	bl	80080b6 <memset>
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std+0x38>)
 8007ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <std+0x3c>)
 8007ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x40>)
 8007efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <std+0x44>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	6323      	str	r3, [r4, #48]	; 0x30
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	bf00      	nop
 8007f08:	08008031 	.word	0x08008031
 8007f0c:	08008053 	.word	0x08008053
 8007f10:	0800808b 	.word	0x0800808b
 8007f14:	080080af 	.word	0x080080af

08007f18 <stdio_exit_handler>:
 8007f18:	4a02      	ldr	r2, [pc, #8]	; (8007f24 <stdio_exit_handler+0xc>)
 8007f1a:	4903      	ldr	r1, [pc, #12]	; (8007f28 <stdio_exit_handler+0x10>)
 8007f1c:	4803      	ldr	r0, [pc, #12]	; (8007f2c <stdio_exit_handler+0x14>)
 8007f1e:	f000 b869 	b.w	8007ff4 <_fwalk_sglue>
 8007f22:	bf00      	nop
 8007f24:	20000658 	.word	0x20000658
 8007f28:	08007e59 	.word	0x08007e59
 8007f2c:	20000664 	.word	0x20000664

08007f30 <cleanup_stdio>:
 8007f30:	6841      	ldr	r1, [r0, #4]
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <cleanup_stdio+0x34>)
 8007f34:	4299      	cmp	r1, r3
 8007f36:	b510      	push	{r4, lr}
 8007f38:	4604      	mov	r4, r0
 8007f3a:	d001      	beq.n	8007f40 <cleanup_stdio+0x10>
 8007f3c:	f7ff ff8c 	bl	8007e58 <_fflush_r>
 8007f40:	68a1      	ldr	r1, [r4, #8]
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <cleanup_stdio+0x38>)
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d002      	beq.n	8007f4e <cleanup_stdio+0x1e>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f7ff ff85 	bl	8007e58 <_fflush_r>
 8007f4e:	68e1      	ldr	r1, [r4, #12]
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <cleanup_stdio+0x3c>)
 8007f52:	4299      	cmp	r1, r3
 8007f54:	d004      	beq.n	8007f60 <cleanup_stdio+0x30>
 8007f56:	4620      	mov	r0, r4
 8007f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5c:	f7ff bf7c 	b.w	8007e58 <_fflush_r>
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	20000ad0 	.word	0x20000ad0
 8007f68:	20000b38 	.word	0x20000b38
 8007f6c:	20000ba0 	.word	0x20000ba0

08007f70 <global_stdio_init.part.0>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <global_stdio_init.part.0+0x30>)
 8007f74:	4c0b      	ldr	r4, [pc, #44]	; (8007fa4 <global_stdio_init.part.0+0x34>)
 8007f76:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <global_stdio_init.part.0+0x38>)
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2104      	movs	r1, #4
 8007f80:	f7ff ffa6 	bl	8007ed0 <std>
 8007f84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f88:	2201      	movs	r2, #1
 8007f8a:	2109      	movs	r1, #9
 8007f8c:	f7ff ffa0 	bl	8007ed0 <std>
 8007f90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f94:	2202      	movs	r2, #2
 8007f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f9a:	2112      	movs	r1, #18
 8007f9c:	f7ff bf98 	b.w	8007ed0 <std>
 8007fa0:	20000c08 	.word	0x20000c08
 8007fa4:	20000ad0 	.word	0x20000ad0
 8007fa8:	08007f19 	.word	0x08007f19

08007fac <__sfp_lock_acquire>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__sfp_lock_acquire+0x8>)
 8007fae:	f000 b921 	b.w	80081f4 <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	20000c11 	.word	0x20000c11

08007fb8 <__sfp_lock_release>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__sfp_lock_release+0x8>)
 8007fba:	f000 b91c 	b.w	80081f6 <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	20000c11 	.word	0x20000c11

08007fc4 <__sinit>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	f7ff fff0 	bl	8007fac <__sfp_lock_acquire>
 8007fcc:	6a23      	ldr	r3, [r4, #32]
 8007fce:	b11b      	cbz	r3, 8007fd8 <__sinit+0x14>
 8007fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd4:	f7ff bff0 	b.w	8007fb8 <__sfp_lock_release>
 8007fd8:	4b04      	ldr	r3, [pc, #16]	; (8007fec <__sinit+0x28>)
 8007fda:	6223      	str	r3, [r4, #32]
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <__sinit+0x2c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f5      	bne.n	8007fd0 <__sinit+0xc>
 8007fe4:	f7ff ffc4 	bl	8007f70 <global_stdio_init.part.0>
 8007fe8:	e7f2      	b.n	8007fd0 <__sinit+0xc>
 8007fea:	bf00      	nop
 8007fec:	08007f31 	.word	0x08007f31
 8007ff0:	20000c08 	.word	0x20000c08

08007ff4 <_fwalk_sglue>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	4688      	mov	r8, r1
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	2600      	movs	r6, #0
 8008000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008004:	f1b9 0901 	subs.w	r9, r9, #1
 8008008:	d505      	bpl.n	8008016 <_fwalk_sglue+0x22>
 800800a:	6824      	ldr	r4, [r4, #0]
 800800c:	2c00      	cmp	r4, #0
 800800e:	d1f7      	bne.n	8008000 <_fwalk_sglue+0xc>
 8008010:	4630      	mov	r0, r6
 8008012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008016:	89ab      	ldrh	r3, [r5, #12]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d907      	bls.n	800802c <_fwalk_sglue+0x38>
 800801c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008020:	3301      	adds	r3, #1
 8008022:	d003      	beq.n	800802c <_fwalk_sglue+0x38>
 8008024:	4629      	mov	r1, r5
 8008026:	4638      	mov	r0, r7
 8008028:	47c0      	blx	r8
 800802a:	4306      	orrs	r6, r0
 800802c:	3568      	adds	r5, #104	; 0x68
 800802e:	e7e9      	b.n	8008004 <_fwalk_sglue+0x10>

08008030 <__sread>:
 8008030:	b510      	push	{r4, lr}
 8008032:	460c      	mov	r4, r1
 8008034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008038:	f000 f87e 	bl	8008138 <_read_r>
 800803c:	2800      	cmp	r0, #0
 800803e:	bfab      	itete	ge
 8008040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008042:	89a3      	ldrhlt	r3, [r4, #12]
 8008044:	181b      	addge	r3, r3, r0
 8008046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800804a:	bfac      	ite	ge
 800804c:	6563      	strge	r3, [r4, #84]	; 0x54
 800804e:	81a3      	strhlt	r3, [r4, #12]
 8008050:	bd10      	pop	{r4, pc}

08008052 <__swrite>:
 8008052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008056:	461f      	mov	r7, r3
 8008058:	898b      	ldrh	r3, [r1, #12]
 800805a:	05db      	lsls	r3, r3, #23
 800805c:	4605      	mov	r5, r0
 800805e:	460c      	mov	r4, r1
 8008060:	4616      	mov	r6, r2
 8008062:	d505      	bpl.n	8008070 <__swrite+0x1e>
 8008064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008068:	2302      	movs	r3, #2
 800806a:	2200      	movs	r2, #0
 800806c:	f000 f852 	bl	8008114 <_lseek_r>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	4632      	mov	r2, r6
 800807e:	463b      	mov	r3, r7
 8008080:	4628      	mov	r0, r5
 8008082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008086:	f000 b879 	b.w	800817c <_write_r>

0800808a <__sseek>:
 800808a:	b510      	push	{r4, lr}
 800808c:	460c      	mov	r4, r1
 800808e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008092:	f000 f83f 	bl	8008114 <_lseek_r>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	bf15      	itete	ne
 800809c:	6560      	strne	r0, [r4, #84]	; 0x54
 800809e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080a6:	81a3      	strheq	r3, [r4, #12]
 80080a8:	bf18      	it	ne
 80080aa:	81a3      	strhne	r3, [r4, #12]
 80080ac:	bd10      	pop	{r4, pc}

080080ae <__sclose>:
 80080ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b2:	f000 b81f 	b.w	80080f4 <_close_r>

080080b6 <memset>:
 80080b6:	4402      	add	r2, r0
 80080b8:	4603      	mov	r3, r0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d100      	bne.n	80080c0 <memset+0xa>
 80080be:	4770      	bx	lr
 80080c0:	f803 1b01 	strb.w	r1, [r3], #1
 80080c4:	e7f9      	b.n	80080ba <memset+0x4>

080080c6 <strncmp>:
 80080c6:	b510      	push	{r4, lr}
 80080c8:	b16a      	cbz	r2, 80080e6 <strncmp+0x20>
 80080ca:	3901      	subs	r1, #1
 80080cc:	1884      	adds	r4, r0, r2
 80080ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d103      	bne.n	80080e2 <strncmp+0x1c>
 80080da:	42a0      	cmp	r0, r4
 80080dc:	d001      	beq.n	80080e2 <strncmp+0x1c>
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1f5      	bne.n	80080ce <strncmp+0x8>
 80080e2:	1ad0      	subs	r0, r2, r3
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	4610      	mov	r0, r2
 80080e8:	e7fc      	b.n	80080e4 <strncmp+0x1e>
	...

080080ec <_localeconv_r>:
 80080ec:	4800      	ldr	r0, [pc, #0]	; (80080f0 <_localeconv_r+0x4>)
 80080ee:	4770      	bx	lr
 80080f0:	200007a4 	.word	0x200007a4

080080f4 <_close_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d06      	ldr	r5, [pc, #24]	; (8008110 <_close_r+0x1c>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	602b      	str	r3, [r5, #0]
 8008100:	f7f9 f872 	bl	80011e8 <_close>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_close_r+0x1a>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_close_r+0x1a>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20000c0c 	.word	0x20000c0c

08008114 <_lseek_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_lseek_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7f9 f86a 	bl	80011fc <_lseek>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_lseek_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_lseek_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20000c0c 	.word	0x20000c0c

08008138 <_read_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	; (8008158 <_read_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f9 f840 	bl	80011cc <_read>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_read_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_read_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000c0c 	.word	0x20000c0c

0800815c <_sbrk_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d06      	ldr	r5, [pc, #24]	; (8008178 <_sbrk_r+0x1c>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	602b      	str	r3, [r5, #0]
 8008168:	f7f9 f84a 	bl	8001200 <_sbrk>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d102      	bne.n	8008176 <_sbrk_r+0x1a>
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	b103      	cbz	r3, 8008176 <_sbrk_r+0x1a>
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	20000c0c 	.word	0x20000c0c

0800817c <_write_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d07      	ldr	r5, [pc, #28]	; (800819c <_write_r+0x20>)
 8008180:	4604      	mov	r4, r0
 8008182:	4608      	mov	r0, r1
 8008184:	4611      	mov	r1, r2
 8008186:	2200      	movs	r2, #0
 8008188:	602a      	str	r2, [r5, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	f7fb fc8c 	bl	8003aa8 <_write>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_write_r+0x1e>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_write_r+0x1e>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	20000c0c 	.word	0x20000c0c

080081a0 <__errno>:
 80081a0:	4b01      	ldr	r3, [pc, #4]	; (80081a8 <__errno+0x8>)
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	200006b0 	.word	0x200006b0

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4d0d      	ldr	r5, [pc, #52]	; (80081e4 <__libc_init_array+0x38>)
 80081b0:	4c0d      	ldr	r4, [pc, #52]	; (80081e8 <__libc_init_array+0x3c>)
 80081b2:	1b64      	subs	r4, r4, r5
 80081b4:	10a4      	asrs	r4, r4, #2
 80081b6:	2600      	movs	r6, #0
 80081b8:	42a6      	cmp	r6, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	4d0b      	ldr	r5, [pc, #44]	; (80081ec <__libc_init_array+0x40>)
 80081be:	4c0c      	ldr	r4, [pc, #48]	; (80081f0 <__libc_init_array+0x44>)
 80081c0:	f001 feac 	bl	8009f1c <_init>
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	2600      	movs	r6, #0
 80081ca:	42a6      	cmp	r6, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d4:	4798      	blx	r3
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	f855 3b04 	ldr.w	r3, [r5], #4
 80081de:	4798      	blx	r3
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	0800c460 	.word	0x0800c460
 80081e8:	0800c460 	.word	0x0800c460
 80081ec:	0800c460 	.word	0x0800c460
 80081f0:	0800c464 	.word	0x0800c464

080081f4 <__retarget_lock_acquire_recursive>:
 80081f4:	4770      	bx	lr

080081f6 <__retarget_lock_release_recursive>:
 80081f6:	4770      	bx	lr

080081f8 <memcpy>:
 80081f8:	440a      	add	r2, r1
 80081fa:	4291      	cmp	r1, r2
 80081fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008200:	d100      	bne.n	8008204 <memcpy+0xc>
 8008202:	4770      	bx	lr
 8008204:	b510      	push	{r4, lr}
 8008206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800820a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800820e:	4291      	cmp	r1, r2
 8008210:	d1f9      	bne.n	8008206 <memcpy+0xe>
 8008212:	bd10      	pop	{r4, pc}

08008214 <__assert_func>:
 8008214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008216:	4614      	mov	r4, r2
 8008218:	461a      	mov	r2, r3
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <__assert_func+0x2c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4605      	mov	r5, r0
 8008220:	68d8      	ldr	r0, [r3, #12]
 8008222:	b14c      	cbz	r4, 8008238 <__assert_func+0x24>
 8008224:	4b07      	ldr	r3, [pc, #28]	; (8008244 <__assert_func+0x30>)
 8008226:	9100      	str	r1, [sp, #0]
 8008228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800822c:	4906      	ldr	r1, [pc, #24]	; (8008248 <__assert_func+0x34>)
 800822e:	462b      	mov	r3, r5
 8008230:	f001 fa50 	bl	80096d4 <fiprintf>
 8008234:	f001 fa60 	bl	80096f8 <abort>
 8008238:	4b04      	ldr	r3, [pc, #16]	; (800824c <__assert_func+0x38>)
 800823a:	461c      	mov	r4, r3
 800823c:	e7f3      	b.n	8008226 <__assert_func+0x12>
 800823e:	bf00      	nop
 8008240:	200006b0 	.word	0x200006b0
 8008244:	0800c119 	.word	0x0800c119
 8008248:	0800c126 	.word	0x0800c126
 800824c:	0800c154 	.word	0x0800c154

08008250 <quorem>:
 8008250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	6903      	ldr	r3, [r0, #16]
 8008256:	690c      	ldr	r4, [r1, #16]
 8008258:	42a3      	cmp	r3, r4
 800825a:	4607      	mov	r7, r0
 800825c:	db7e      	blt.n	800835c <quorem+0x10c>
 800825e:	3c01      	subs	r4, #1
 8008260:	f101 0814 	add.w	r8, r1, #20
 8008264:	f100 0514 	add.w	r5, r0, #20
 8008268:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008276:	3301      	adds	r3, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800827e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008282:	fbb2 f6f3 	udiv	r6, r2, r3
 8008286:	d331      	bcc.n	80082ec <quorem+0x9c>
 8008288:	f04f 0e00 	mov.w	lr, #0
 800828c:	4640      	mov	r0, r8
 800828e:	46ac      	mov	ip, r5
 8008290:	46f2      	mov	sl, lr
 8008292:	f850 2b04 	ldr.w	r2, [r0], #4
 8008296:	b293      	uxth	r3, r2
 8008298:	fb06 e303 	mla	r3, r6, r3, lr
 800829c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082a0:	0c1a      	lsrs	r2, r3, #16
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ebaa 0303 	sub.w	r3, sl, r3
 80082a8:	f8dc a000 	ldr.w	sl, [ip]
 80082ac:	fa13 f38a 	uxtah	r3, r3, sl
 80082b0:	fb06 220e 	mla	r2, r6, lr, r2
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082bc:	b292      	uxth	r2, r2
 80082be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80082ca:	4581      	cmp	r9, r0
 80082cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d0:	f84c 3b04 	str.w	r3, [ip], #4
 80082d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082d8:	d2db      	bcs.n	8008292 <quorem+0x42>
 80082da:	f855 300b 	ldr.w	r3, [r5, fp]
 80082de:	b92b      	cbnz	r3, 80082ec <quorem+0x9c>
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	3b04      	subs	r3, #4
 80082e4:	429d      	cmp	r5, r3
 80082e6:	461a      	mov	r2, r3
 80082e8:	d32c      	bcc.n	8008344 <quorem+0xf4>
 80082ea:	613c      	str	r4, [r7, #16]
 80082ec:	4638      	mov	r0, r7
 80082ee:	f001 f8f1 	bl	80094d4 <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	db22      	blt.n	800833c <quorem+0xec>
 80082f6:	3601      	adds	r6, #1
 80082f8:	4629      	mov	r1, r5
 80082fa:	2000      	movs	r0, #0
 80082fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008300:	f8d1 c000 	ldr.w	ip, [r1]
 8008304:	b293      	uxth	r3, r2
 8008306:	1ac3      	subs	r3, r0, r3
 8008308:	0c12      	lsrs	r2, r2, #16
 800830a:	fa13 f38c 	uxtah	r3, r3, ip
 800830e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008312:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800831c:	45c1      	cmp	r9, r8
 800831e:	f841 3b04 	str.w	r3, [r1], #4
 8008322:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008326:	d2e9      	bcs.n	80082fc <quorem+0xac>
 8008328:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800832c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008330:	b922      	cbnz	r2, 800833c <quorem+0xec>
 8008332:	3b04      	subs	r3, #4
 8008334:	429d      	cmp	r5, r3
 8008336:	461a      	mov	r2, r3
 8008338:	d30a      	bcc.n	8008350 <quorem+0x100>
 800833a:	613c      	str	r4, [r7, #16]
 800833c:	4630      	mov	r0, r6
 800833e:	b003      	add	sp, #12
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	3b04      	subs	r3, #4
 8008348:	2a00      	cmp	r2, #0
 800834a:	d1ce      	bne.n	80082ea <quorem+0x9a>
 800834c:	3c01      	subs	r4, #1
 800834e:	e7c9      	b.n	80082e4 <quorem+0x94>
 8008350:	6812      	ldr	r2, [r2, #0]
 8008352:	3b04      	subs	r3, #4
 8008354:	2a00      	cmp	r2, #0
 8008356:	d1f0      	bne.n	800833a <quorem+0xea>
 8008358:	3c01      	subs	r4, #1
 800835a:	e7eb      	b.n	8008334 <quorem+0xe4>
 800835c:	2000      	movs	r0, #0
 800835e:	e7ee      	b.n	800833e <quorem+0xee>

08008360 <_dtoa_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	ed2d 8b04 	vpush	{d8-d9}
 8008368:	69c5      	ldr	r5, [r0, #28]
 800836a:	b093      	sub	sp, #76	; 0x4c
 800836c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008370:	ec57 6b10 	vmov	r6, r7, d0
 8008374:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008378:	9107      	str	r1, [sp, #28]
 800837a:	4604      	mov	r4, r0
 800837c:	920a      	str	r2, [sp, #40]	; 0x28
 800837e:	930d      	str	r3, [sp, #52]	; 0x34
 8008380:	b975      	cbnz	r5, 80083a0 <_dtoa_r+0x40>
 8008382:	2010      	movs	r0, #16
 8008384:	f7fb fbc2 	bl	8003b0c <__wrap_malloc>
 8008388:	4602      	mov	r2, r0
 800838a:	61e0      	str	r0, [r4, #28]
 800838c:	b920      	cbnz	r0, 8008398 <_dtoa_r+0x38>
 800838e:	4bae      	ldr	r3, [pc, #696]	; (8008648 <_dtoa_r+0x2e8>)
 8008390:	21ef      	movs	r1, #239	; 0xef
 8008392:	48ae      	ldr	r0, [pc, #696]	; (800864c <_dtoa_r+0x2ec>)
 8008394:	f7ff ff3e 	bl	8008214 <__assert_func>
 8008398:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800839c:	6005      	str	r5, [r0, #0]
 800839e:	60c5      	str	r5, [r0, #12]
 80083a0:	69e3      	ldr	r3, [r4, #28]
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	b151      	cbz	r1, 80083bc <_dtoa_r+0x5c>
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	604a      	str	r2, [r1, #4]
 80083aa:	2301      	movs	r3, #1
 80083ac:	4093      	lsls	r3, r2
 80083ae:	608b      	str	r3, [r1, #8]
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fe53 	bl	800905c <_Bfree>
 80083b6:	69e3      	ldr	r3, [r4, #28]
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	1e3b      	subs	r3, r7, #0
 80083be:	bfbb      	ittet	lt
 80083c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083c4:	9303      	strlt	r3, [sp, #12]
 80083c6:	2300      	movge	r3, #0
 80083c8:	2201      	movlt	r2, #1
 80083ca:	bfac      	ite	ge
 80083cc:	f8c8 3000 	strge.w	r3, [r8]
 80083d0:	f8c8 2000 	strlt.w	r2, [r8]
 80083d4:	4b9e      	ldr	r3, [pc, #632]	; (8008650 <_dtoa_r+0x2f0>)
 80083d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083da:	ea33 0308 	bics.w	r3, r3, r8
 80083de:	d11b      	bne.n	8008418 <_dtoa_r+0xb8>
 80083e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80083ec:	4333      	orrs	r3, r6
 80083ee:	f000 8593 	beq.w	8008f18 <_dtoa_r+0xbb8>
 80083f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f4:	b963      	cbnz	r3, 8008410 <_dtoa_r+0xb0>
 80083f6:	4b97      	ldr	r3, [pc, #604]	; (8008654 <_dtoa_r+0x2f4>)
 80083f8:	e027      	b.n	800844a <_dtoa_r+0xea>
 80083fa:	4b97      	ldr	r3, [pc, #604]	; (8008658 <_dtoa_r+0x2f8>)
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	9800      	ldr	r0, [sp, #0]
 8008406:	b013      	add	sp, #76	; 0x4c
 8008408:	ecbd 8b04 	vpop	{d8-d9}
 800840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008410:	4b90      	ldr	r3, [pc, #576]	; (8008654 <_dtoa_r+0x2f4>)
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	3303      	adds	r3, #3
 8008416:	e7f3      	b.n	8008400 <_dtoa_r+0xa0>
 8008418:	ed9d 7b02 	vldr	d7, [sp, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	ec51 0b17 	vmov	r0, r1, d7
 8008422:	eeb0 8a47 	vmov.f32	s16, s14
 8008426:	eef0 8a67 	vmov.f32	s17, s15
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008430:	4681      	mov	r9, r0
 8008432:	b160      	cbz	r0, 800844e <_dtoa_r+0xee>
 8008434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008436:	2301      	movs	r3, #1
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8568 	beq.w	8008f12 <_dtoa_r+0xbb2>
 8008442:	4b86      	ldr	r3, [pc, #536]	; (800865c <_dtoa_r+0x2fc>)
 8008444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	3b01      	subs	r3, #1
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	e7da      	b.n	8008404 <_dtoa_r+0xa4>
 800844e:	aa10      	add	r2, sp, #64	; 0x40
 8008450:	a911      	add	r1, sp, #68	; 0x44
 8008452:	4620      	mov	r0, r4
 8008454:	eeb0 0a48 	vmov.f32	s0, s16
 8008458:	eef0 0a68 	vmov.f32	s1, s17
 800845c:	f001 f8e0 	bl	8009620 <__d2b>
 8008460:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008464:	4682      	mov	sl, r0
 8008466:	2d00      	cmp	r5, #0
 8008468:	d07f      	beq.n	800856a <_dtoa_r+0x20a>
 800846a:	ee18 3a90 	vmov	r3, s17
 800846e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008472:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008476:	ec51 0b18 	vmov	r0, r1, d8
 800847a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800847e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008482:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008486:	4619      	mov	r1, r3
 8008488:	2200      	movs	r2, #0
 800848a:	4b75      	ldr	r3, [pc, #468]	; (8008660 <_dtoa_r+0x300>)
 800848c:	f7f7 fefc 	bl	8000288 <__aeabi_dsub>
 8008490:	a367      	add	r3, pc, #412	; (adr r3, 8008630 <_dtoa_r+0x2d0>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 f8af 	bl	80005f8 <__aeabi_dmul>
 800849a:	a367      	add	r3, pc, #412	; (adr r3, 8008638 <_dtoa_r+0x2d8>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 fef4 	bl	800028c <__adddf3>
 80084a4:	4606      	mov	r6, r0
 80084a6:	4628      	mov	r0, r5
 80084a8:	460f      	mov	r7, r1
 80084aa:	f7f8 f83b 	bl	8000524 <__aeabi_i2d>
 80084ae:	a364      	add	r3, pc, #400	; (adr r3, 8008640 <_dtoa_r+0x2e0>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f7 fee4 	bl	800028c <__adddf3>
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	f7f8 fb46 	bl	8000b58 <__aeabi_d2iz>
 80084cc:	2200      	movs	r2, #0
 80084ce:	4683      	mov	fp, r0
 80084d0:	2300      	movs	r3, #0
 80084d2:	4630      	mov	r0, r6
 80084d4:	4639      	mov	r1, r7
 80084d6:	f7f8 fb01 	bl	8000adc <__aeabi_dcmplt>
 80084da:	b148      	cbz	r0, 80084f0 <_dtoa_r+0x190>
 80084dc:	4658      	mov	r0, fp
 80084de:	f7f8 f821 	bl	8000524 <__aeabi_i2d>
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	f7f8 faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ea:	b908      	cbnz	r0, 80084f0 <_dtoa_r+0x190>
 80084ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084f0:	f1bb 0f16 	cmp.w	fp, #22
 80084f4:	d857      	bhi.n	80085a6 <_dtoa_r+0x246>
 80084f6:	4b5b      	ldr	r3, [pc, #364]	; (8008664 <_dtoa_r+0x304>)
 80084f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	ec51 0b18 	vmov	r0, r1, d8
 8008504:	f7f8 faea 	bl	8000adc <__aeabi_dcmplt>
 8008508:	2800      	cmp	r0, #0
 800850a:	d04e      	beq.n	80085aa <_dtoa_r+0x24a>
 800850c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008510:	2300      	movs	r3, #0
 8008512:	930c      	str	r3, [sp, #48]	; 0x30
 8008514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008516:	1b5b      	subs	r3, r3, r5
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	bf45      	ittet	mi
 800851c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008520:	9305      	strmi	r3, [sp, #20]
 8008522:	2300      	movpl	r3, #0
 8008524:	2300      	movmi	r3, #0
 8008526:	9206      	str	r2, [sp, #24]
 8008528:	bf54      	ite	pl
 800852a:	9305      	strpl	r3, [sp, #20]
 800852c:	9306      	strmi	r3, [sp, #24]
 800852e:	f1bb 0f00 	cmp.w	fp, #0
 8008532:	db3c      	blt.n	80085ae <_dtoa_r+0x24e>
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800853a:	445b      	add	r3, fp
 800853c:	9306      	str	r3, [sp, #24]
 800853e:	2300      	movs	r3, #0
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b07      	ldr	r3, [sp, #28]
 8008544:	2b09      	cmp	r3, #9
 8008546:	d868      	bhi.n	800861a <_dtoa_r+0x2ba>
 8008548:	2b05      	cmp	r3, #5
 800854a:	bfc4      	itt	gt
 800854c:	3b04      	subgt	r3, #4
 800854e:	9307      	strgt	r3, [sp, #28]
 8008550:	9b07      	ldr	r3, [sp, #28]
 8008552:	f1a3 0302 	sub.w	r3, r3, #2
 8008556:	bfcc      	ite	gt
 8008558:	2500      	movgt	r5, #0
 800855a:	2501      	movle	r5, #1
 800855c:	2b03      	cmp	r3, #3
 800855e:	f200 8085 	bhi.w	800866c <_dtoa_r+0x30c>
 8008562:	e8df f003 	tbb	[pc, r3]
 8008566:	3b2e      	.short	0x3b2e
 8008568:	5839      	.short	0x5839
 800856a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800856e:	441d      	add	r5, r3
 8008570:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008574:	2b20      	cmp	r3, #32
 8008576:	bfc1      	itttt	gt
 8008578:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800857c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008580:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008584:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008588:	bfd6      	itet	le
 800858a:	f1c3 0320 	rsble	r3, r3, #32
 800858e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008592:	fa06 f003 	lslle.w	r0, r6, r3
 8008596:	f7f7 ffb5 	bl	8000504 <__aeabi_ui2d>
 800859a:	2201      	movs	r2, #1
 800859c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085a0:	3d01      	subs	r5, #1
 80085a2:	920e      	str	r2, [sp, #56]	; 0x38
 80085a4:	e76f      	b.n	8008486 <_dtoa_r+0x126>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e7b3      	b.n	8008512 <_dtoa_r+0x1b2>
 80085aa:	900c      	str	r0, [sp, #48]	; 0x30
 80085ac:	e7b2      	b.n	8008514 <_dtoa_r+0x1b4>
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	eba3 030b 	sub.w	r3, r3, fp
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	f1cb 0300 	rsb	r3, fp, #0
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	2300      	movs	r3, #0
 80085be:	930b      	str	r3, [sp, #44]	; 0x2c
 80085c0:	e7bf      	b.n	8008542 <_dtoa_r+0x1e2>
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc52      	bgt.n	8008672 <_dtoa_r+0x312>
 80085cc:	2301      	movs	r3, #1
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	461a      	mov	r2, r3
 80085d4:	920a      	str	r2, [sp, #40]	; 0x28
 80085d6:	e00b      	b.n	80085f0 <_dtoa_r+0x290>
 80085d8:	2301      	movs	r3, #1
 80085da:	e7f3      	b.n	80085c4 <_dtoa_r+0x264>
 80085dc:	2300      	movs	r3, #0
 80085de:	9309      	str	r3, [sp, #36]	; 0x24
 80085e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e2:	445b      	add	r3, fp
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	3301      	adds	r3, #1
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	9304      	str	r3, [sp, #16]
 80085ec:	bfb8      	it	lt
 80085ee:	2301      	movlt	r3, #1
 80085f0:	69e0      	ldr	r0, [r4, #28]
 80085f2:	2100      	movs	r1, #0
 80085f4:	2204      	movs	r2, #4
 80085f6:	f102 0614 	add.w	r6, r2, #20
 80085fa:	429e      	cmp	r6, r3
 80085fc:	d93d      	bls.n	800867a <_dtoa_r+0x31a>
 80085fe:	6041      	str	r1, [r0, #4]
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fceb 	bl	8008fdc <_Balloc>
 8008606:	9000      	str	r0, [sp, #0]
 8008608:	2800      	cmp	r0, #0
 800860a:	d139      	bne.n	8008680 <_dtoa_r+0x320>
 800860c:	4b16      	ldr	r3, [pc, #88]	; (8008668 <_dtoa_r+0x308>)
 800860e:	4602      	mov	r2, r0
 8008610:	f240 11af 	movw	r1, #431	; 0x1af
 8008614:	e6bd      	b.n	8008392 <_dtoa_r+0x32>
 8008616:	2301      	movs	r3, #1
 8008618:	e7e1      	b.n	80085de <_dtoa_r+0x27e>
 800861a:	2501      	movs	r5, #1
 800861c:	2300      	movs	r3, #0
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	9509      	str	r5, [sp, #36]	; 0x24
 8008622:	f04f 33ff 	mov.w	r3, #4294967295
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	2200      	movs	r2, #0
 800862c:	2312      	movs	r3, #18
 800862e:	e7d1      	b.n	80085d4 <_dtoa_r+0x274>
 8008630:	636f4361 	.word	0x636f4361
 8008634:	3fd287a7 	.word	0x3fd287a7
 8008638:	8b60c8b3 	.word	0x8b60c8b3
 800863c:	3fc68a28 	.word	0x3fc68a28
 8008640:	509f79fb 	.word	0x509f79fb
 8008644:	3fd34413 	.word	0x3fd34413
 8008648:	0800c078 	.word	0x0800c078
 800864c:	0800c162 	.word	0x0800c162
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0800c15e 	.word	0x0800c15e
 8008658:	0800c155 	.word	0x0800c155
 800865c:	0800ac3f 	.word	0x0800ac3f
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800c250 	.word	0x0800c250
 8008668:	0800c1ba 	.word	0x0800c1ba
 800866c:	2301      	movs	r3, #1
 800866e:	9309      	str	r3, [sp, #36]	; 0x24
 8008670:	e7d7      	b.n	8008622 <_dtoa_r+0x2c2>
 8008672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	e7ba      	b.n	80085f0 <_dtoa_r+0x290>
 800867a:	3101      	adds	r1, #1
 800867c:	0052      	lsls	r2, r2, #1
 800867e:	e7ba      	b.n	80085f6 <_dtoa_r+0x296>
 8008680:	69e3      	ldr	r3, [r4, #28]
 8008682:	9a00      	ldr	r2, [sp, #0]
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	2b0e      	cmp	r3, #14
 800868a:	f200 80a8 	bhi.w	80087de <_dtoa_r+0x47e>
 800868e:	2d00      	cmp	r5, #0
 8008690:	f000 80a5 	beq.w	80087de <_dtoa_r+0x47e>
 8008694:	f1bb 0f00 	cmp.w	fp, #0
 8008698:	dd38      	ble.n	800870c <_dtoa_r+0x3ac>
 800869a:	4bc0      	ldr	r3, [pc, #768]	; (800899c <_dtoa_r+0x63c>)
 800869c:	f00b 020f 	and.w	r2, fp, #15
 80086a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80086ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80086b0:	d019      	beq.n	80086e6 <_dtoa_r+0x386>
 80086b2:	4bbb      	ldr	r3, [pc, #748]	; (80089a0 <_dtoa_r+0x640>)
 80086b4:	ec51 0b18 	vmov	r0, r1, d8
 80086b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086bc:	f7f8 f8c6 	bl	800084c <__aeabi_ddiv>
 80086c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c4:	f008 080f 	and.w	r8, r8, #15
 80086c8:	2503      	movs	r5, #3
 80086ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80089a0 <_dtoa_r+0x640>
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	d10a      	bne.n	80086ea <_dtoa_r+0x38a>
 80086d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	f7f8 f8b6 	bl	800084c <__aeabi_ddiv>
 80086e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e4:	e02b      	b.n	800873e <_dtoa_r+0x3de>
 80086e6:	2502      	movs	r5, #2
 80086e8:	e7ef      	b.n	80086ca <_dtoa_r+0x36a>
 80086ea:	f018 0f01 	tst.w	r8, #1
 80086ee:	d008      	beq.n	8008702 <_dtoa_r+0x3a2>
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	3501      	adds	r5, #1
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008706:	f109 0908 	add.w	r9, r9, #8
 800870a:	e7e0      	b.n	80086ce <_dtoa_r+0x36e>
 800870c:	f000 809f 	beq.w	800884e <_dtoa_r+0x4ee>
 8008710:	f1cb 0600 	rsb	r6, fp, #0
 8008714:	4ba1      	ldr	r3, [pc, #644]	; (800899c <_dtoa_r+0x63c>)
 8008716:	4fa2      	ldr	r7, [pc, #648]	; (80089a0 <_dtoa_r+0x640>)
 8008718:	f006 020f 	and.w	r2, r6, #15
 800871c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	ec51 0b18 	vmov	r0, r1, d8
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008730:	1136      	asrs	r6, r6, #4
 8008732:	2300      	movs	r3, #0
 8008734:	2502      	movs	r5, #2
 8008736:	2e00      	cmp	r6, #0
 8008738:	d17e      	bne.n	8008838 <_dtoa_r+0x4d8>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1d0      	bne.n	80086e0 <_dtoa_r+0x380>
 800873e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008740:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8084 	beq.w	8008852 <_dtoa_r+0x4f2>
 800874a:	4b96      	ldr	r3, [pc, #600]	; (80089a4 <_dtoa_r+0x644>)
 800874c:	2200      	movs	r2, #0
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f8 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8008756:	2800      	cmp	r0, #0
 8008758:	d07b      	beq.n	8008852 <_dtoa_r+0x4f2>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d078      	beq.n	8008852 <_dtoa_r+0x4f2>
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	dd39      	ble.n	80087da <_dtoa_r+0x47a>
 8008766:	4b90      	ldr	r3, [pc, #576]	; (80089a8 <_dtoa_r+0x648>)
 8008768:	2200      	movs	r2, #0
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008776:	9e01      	ldr	r6, [sp, #4]
 8008778:	f10b 37ff 	add.w	r7, fp, #4294967295
 800877c:	3501      	adds	r5, #1
 800877e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008782:	4628      	mov	r0, r5
 8008784:	f7f7 fece 	bl	8000524 <__aeabi_i2d>
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	f7f7 ff34 	bl	80005f8 <__aeabi_dmul>
 8008790:	4b86      	ldr	r3, [pc, #536]	; (80089ac <_dtoa_r+0x64c>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f7 fd7a 	bl	800028c <__adddf3>
 8008798:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800879c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	d158      	bne.n	8008858 <_dtoa_r+0x4f8>
 80087a6:	4b82      	ldr	r3, [pc, #520]	; (80089b0 <_dtoa_r+0x650>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f7 fd6b 	bl	8000288 <__aeabi_dsub>
 80087b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	f7f8 f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	f040 8296 	bne.w	8008cf0 <_dtoa_r+0x990>
 80087c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087c8:	4640      	mov	r0, r8
 80087ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ce:	4649      	mov	r1, r9
 80087d0:	f7f8 f984 	bl	8000adc <__aeabi_dcmplt>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	f040 8289 	bne.w	8008cec <_dtoa_r+0x98c>
 80087da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f2c0 814e 	blt.w	8008a82 <_dtoa_r+0x722>
 80087e6:	f1bb 0f0e 	cmp.w	fp, #14
 80087ea:	f300 814a 	bgt.w	8008a82 <_dtoa_r+0x722>
 80087ee:	4b6b      	ldr	r3, [pc, #428]	; (800899c <_dtoa_r+0x63c>)
 80087f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f280 80dc 	bge.w	80089b8 <_dtoa_r+0x658>
 8008800:	9b04      	ldr	r3, [sp, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f300 80d8 	bgt.w	80089b8 <_dtoa_r+0x658>
 8008808:	f040 826f 	bne.w	8008cea <_dtoa_r+0x98a>
 800880c:	4b68      	ldr	r3, [pc, #416]	; (80089b0 <_dtoa_r+0x650>)
 800880e:	2200      	movs	r2, #0
 8008810:	4640      	mov	r0, r8
 8008812:	4649      	mov	r1, r9
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800881c:	f7f8 f972 	bl	8000b04 <__aeabi_dcmpge>
 8008820:	9e04      	ldr	r6, [sp, #16]
 8008822:	4637      	mov	r7, r6
 8008824:	2800      	cmp	r0, #0
 8008826:	f040 8245 	bne.w	8008cb4 <_dtoa_r+0x954>
 800882a:	9d00      	ldr	r5, [sp, #0]
 800882c:	2331      	movs	r3, #49	; 0x31
 800882e:	f805 3b01 	strb.w	r3, [r5], #1
 8008832:	f10b 0b01 	add.w	fp, fp, #1
 8008836:	e241      	b.n	8008cbc <_dtoa_r+0x95c>
 8008838:	07f2      	lsls	r2, r6, #31
 800883a:	d505      	bpl.n	8008848 <_dtoa_r+0x4e8>
 800883c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008840:	f7f7 feda 	bl	80005f8 <__aeabi_dmul>
 8008844:	3501      	adds	r5, #1
 8008846:	2301      	movs	r3, #1
 8008848:	1076      	asrs	r6, r6, #1
 800884a:	3708      	adds	r7, #8
 800884c:	e773      	b.n	8008736 <_dtoa_r+0x3d6>
 800884e:	2502      	movs	r5, #2
 8008850:	e775      	b.n	800873e <_dtoa_r+0x3de>
 8008852:	9e04      	ldr	r6, [sp, #16]
 8008854:	465f      	mov	r7, fp
 8008856:	e792      	b.n	800877e <_dtoa_r+0x41e>
 8008858:	9900      	ldr	r1, [sp, #0]
 800885a:	4b50      	ldr	r3, [pc, #320]	; (800899c <_dtoa_r+0x63c>)
 800885c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008860:	4431      	add	r1, r6
 8008862:	9102      	str	r1, [sp, #8]
 8008864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008866:	eeb0 9a47 	vmov.f32	s18, s14
 800886a:	eef0 9a67 	vmov.f32	s19, s15
 800886e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008876:	2900      	cmp	r1, #0
 8008878:	d044      	beq.n	8008904 <_dtoa_r+0x5a4>
 800887a:	494e      	ldr	r1, [pc, #312]	; (80089b4 <_dtoa_r+0x654>)
 800887c:	2000      	movs	r0, #0
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	ec53 2b19 	vmov	r2, r3, d9
 8008886:	f7f7 fcff 	bl	8000288 <__aeabi_dsub>
 800888a:	9d00      	ldr	r5, [sp, #0]
 800888c:	ec41 0b19 	vmov	d9, r0, r1
 8008890:	4649      	mov	r1, r9
 8008892:	4640      	mov	r0, r8
 8008894:	f7f8 f960 	bl	8000b58 <__aeabi_d2iz>
 8008898:	4606      	mov	r6, r0
 800889a:	f7f7 fe43 	bl	8000524 <__aeabi_i2d>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fcef 	bl	8000288 <__aeabi_dsub>
 80088aa:	3630      	adds	r6, #48	; 0x30
 80088ac:	f805 6b01 	strb.w	r6, [r5], #1
 80088b0:	ec53 2b19 	vmov	r2, r3, d9
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	f7f8 f910 	bl	8000adc <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d164      	bne.n	800898a <_dtoa_r+0x62a>
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	4937      	ldr	r1, [pc, #220]	; (80089a4 <_dtoa_r+0x644>)
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7f7 fcde 	bl	8000288 <__aeabi_dsub>
 80088cc:	ec53 2b19 	vmov	r2, r3, d9
 80088d0:	f7f8 f904 	bl	8000adc <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f040 80b6 	bne.w	8008a46 <_dtoa_r+0x6e6>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	429d      	cmp	r5, r3
 80088de:	f43f af7c 	beq.w	80087da <_dtoa_r+0x47a>
 80088e2:	4b31      	ldr	r3, [pc, #196]	; (80089a8 <_dtoa_r+0x648>)
 80088e4:	ec51 0b19 	vmov	r0, r1, d9
 80088e8:	2200      	movs	r2, #0
 80088ea:	f7f7 fe85 	bl	80005f8 <__aeabi_dmul>
 80088ee:	4b2e      	ldr	r3, [pc, #184]	; (80089a8 <_dtoa_r+0x648>)
 80088f0:	ec41 0b19 	vmov	d9, r0, r1
 80088f4:	2200      	movs	r2, #0
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f7 fe7d 	bl	80005f8 <__aeabi_dmul>
 80088fe:	4680      	mov	r8, r0
 8008900:	4689      	mov	r9, r1
 8008902:	e7c5      	b.n	8008890 <_dtoa_r+0x530>
 8008904:	ec51 0b17 	vmov	r0, r1, d7
 8008908:	f7f7 fe76 	bl	80005f8 <__aeabi_dmul>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	9d00      	ldr	r5, [sp, #0]
 8008910:	930f      	str	r3, [sp, #60]	; 0x3c
 8008912:	ec41 0b19 	vmov	d9, r0, r1
 8008916:	4649      	mov	r1, r9
 8008918:	4640      	mov	r0, r8
 800891a:	f7f8 f91d 	bl	8000b58 <__aeabi_d2iz>
 800891e:	4606      	mov	r6, r0
 8008920:	f7f7 fe00 	bl	8000524 <__aeabi_i2d>
 8008924:	3630      	adds	r6, #48	; 0x30
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f7 fcab 	bl	8000288 <__aeabi_dsub>
 8008932:	f805 6b01 	strb.w	r6, [r5], #1
 8008936:	9b02      	ldr	r3, [sp, #8]
 8008938:	429d      	cmp	r5, r3
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	d124      	bne.n	800898e <_dtoa_r+0x62e>
 8008944:	4b1b      	ldr	r3, [pc, #108]	; (80089b4 <_dtoa_r+0x654>)
 8008946:	ec51 0b19 	vmov	r0, r1, d9
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f8 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800895a:	2800      	cmp	r0, #0
 800895c:	d173      	bne.n	8008a46 <_dtoa_r+0x6e6>
 800895e:	ec53 2b19 	vmov	r2, r3, d9
 8008962:	4914      	ldr	r1, [pc, #80]	; (80089b4 <_dtoa_r+0x654>)
 8008964:	2000      	movs	r0, #0
 8008966:	f7f7 fc8f 	bl	8000288 <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4640      	mov	r0, r8
 8008970:	4649      	mov	r1, r9
 8008972:	f7f8 f8b3 	bl	8000adc <__aeabi_dcmplt>
 8008976:	2800      	cmp	r0, #0
 8008978:	f43f af2f 	beq.w	80087da <_dtoa_r+0x47a>
 800897c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800897e:	1e6b      	subs	r3, r5, #1
 8008980:	930f      	str	r3, [sp, #60]	; 0x3c
 8008982:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008986:	2b30      	cmp	r3, #48	; 0x30
 8008988:	d0f8      	beq.n	800897c <_dtoa_r+0x61c>
 800898a:	46bb      	mov	fp, r7
 800898c:	e04a      	b.n	8008a24 <_dtoa_r+0x6c4>
 800898e:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <_dtoa_r+0x648>)
 8008990:	f7f7 fe32 	bl	80005f8 <__aeabi_dmul>
 8008994:	4680      	mov	r8, r0
 8008996:	4689      	mov	r9, r1
 8008998:	e7bd      	b.n	8008916 <_dtoa_r+0x5b6>
 800899a:	bf00      	nop
 800899c:	0800c250 	.word	0x0800c250
 80089a0:	0800c228 	.word	0x0800c228
 80089a4:	3ff00000 	.word	0x3ff00000
 80089a8:	40240000 	.word	0x40240000
 80089ac:	401c0000 	.word	0x401c0000
 80089b0:	40140000 	.word	0x40140000
 80089b4:	3fe00000 	.word	0x3fe00000
 80089b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089bc:	9d00      	ldr	r5, [sp, #0]
 80089be:	4642      	mov	r2, r8
 80089c0:	464b      	mov	r3, r9
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 ff41 	bl	800084c <__aeabi_ddiv>
 80089ca:	f7f8 f8c5 	bl	8000b58 <__aeabi_d2iz>
 80089ce:	9001      	str	r0, [sp, #4]
 80089d0:	f7f7 fda8 	bl	8000524 <__aeabi_i2d>
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	f7f7 fe0e 	bl	80005f8 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f7 fc50 	bl	8000288 <__aeabi_dsub>
 80089e8:	9e01      	ldr	r6, [sp, #4]
 80089ea:	9f04      	ldr	r7, [sp, #16]
 80089ec:	3630      	adds	r6, #48	; 0x30
 80089ee:	f805 6b01 	strb.w	r6, [r5], #1
 80089f2:	9e00      	ldr	r6, [sp, #0]
 80089f4:	1bae      	subs	r6, r5, r6
 80089f6:	42b7      	cmp	r7, r6
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	d134      	bne.n	8008a68 <_dtoa_r+0x708>
 80089fe:	f7f7 fc45 	bl	800028c <__adddf3>
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	4606      	mov	r6, r0
 8008a08:	460f      	mov	r7, r1
 8008a0a:	f7f8 f885 	bl	8000b18 <__aeabi_dcmpgt>
 8008a0e:	b9c8      	cbnz	r0, 8008a44 <_dtoa_r+0x6e4>
 8008a10:	4642      	mov	r2, r8
 8008a12:	464b      	mov	r3, r9
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f8 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a1c:	b110      	cbz	r0, 8008a24 <_dtoa_r+0x6c4>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	07db      	lsls	r3, r3, #31
 8008a22:	d40f      	bmi.n	8008a44 <_dtoa_r+0x6e4>
 8008a24:	4651      	mov	r1, sl
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 fb18 	bl	800905c <_Bfree>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a30:	702b      	strb	r3, [r5, #0]
 8008a32:	f10b 0301 	add.w	r3, fp, #1
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f43f ace2 	beq.w	8008404 <_dtoa_r+0xa4>
 8008a40:	601d      	str	r5, [r3, #0]
 8008a42:	e4df      	b.n	8008404 <_dtoa_r+0xa4>
 8008a44:	465f      	mov	r7, fp
 8008a46:	462b      	mov	r3, r5
 8008a48:	461d      	mov	r5, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a39      	cmp	r2, #57	; 0x39
 8008a50:	d106      	bne.n	8008a60 <_dtoa_r+0x700>
 8008a52:	9a00      	ldr	r2, [sp, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d1f7      	bne.n	8008a48 <_dtoa_r+0x6e8>
 8008a58:	9900      	ldr	r1, [sp, #0]
 8008a5a:	2230      	movs	r2, #48	; 0x30
 8008a5c:	3701      	adds	r7, #1
 8008a5e:	700a      	strb	r2, [r1, #0]
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	3201      	adds	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e790      	b.n	800898a <_dtoa_r+0x62a>
 8008a68:	4ba3      	ldr	r3, [pc, #652]	; (8008cf8 <_dtoa_r+0x998>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	2200      	movs	r2, #0
 8008a72:	2300      	movs	r3, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f7f8 f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d09e      	beq.n	80089be <_dtoa_r+0x65e>
 8008a80:	e7d0      	b.n	8008a24 <_dtoa_r+0x6c4>
 8008a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	f000 80ca 	beq.w	8008c1e <_dtoa_r+0x8be>
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	2a01      	cmp	r2, #1
 8008a8e:	f300 80ad 	bgt.w	8008bec <_dtoa_r+0x88c>
 8008a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a94:	2a00      	cmp	r2, #0
 8008a96:	f000 80a5 	beq.w	8008be4 <_dtoa_r+0x884>
 8008a9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a9e:	9e08      	ldr	r6, [sp, #32]
 8008aa0:	9d05      	ldr	r5, [sp, #20]
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	9205      	str	r2, [sp, #20]
 8008aa8:	9a06      	ldr	r2, [sp, #24]
 8008aaa:	2101      	movs	r1, #1
 8008aac:	441a      	add	r2, r3
 8008aae:	4620      	mov	r0, r4
 8008ab0:	9206      	str	r2, [sp, #24]
 8008ab2:	f000 fb89 	bl	80091c8 <__i2b>
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	b165      	cbz	r5, 8008ad4 <_dtoa_r+0x774>
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd09      	ble.n	8008ad4 <_dtoa_r+0x774>
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	bfa8      	it	ge
 8008ac6:	462b      	movge	r3, r5
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	9205      	str	r2, [sp, #20]
 8008acc:	9a06      	ldr	r2, [sp, #24]
 8008ace:	1aed      	subs	r5, r5, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	9306      	str	r3, [sp, #24]
 8008ad4:	9b08      	ldr	r3, [sp, #32]
 8008ad6:	b1f3      	cbz	r3, 8008b16 <_dtoa_r+0x7b6>
 8008ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80a3 	beq.w	8008c26 <_dtoa_r+0x8c6>
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	dd10      	ble.n	8008b06 <_dtoa_r+0x7a6>
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fc2d 	bl	8009348 <__pow5mult>
 8008aee:	4652      	mov	r2, sl
 8008af0:	4601      	mov	r1, r0
 8008af2:	4607      	mov	r7, r0
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fb7d 	bl	80091f4 <__multiply>
 8008afa:	4651      	mov	r1, sl
 8008afc:	4680      	mov	r8, r0
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 faac 	bl	800905c <_Bfree>
 8008b04:	46c2      	mov	sl, r8
 8008b06:	9b08      	ldr	r3, [sp, #32]
 8008b08:	1b9a      	subs	r2, r3, r6
 8008b0a:	d004      	beq.n	8008b16 <_dtoa_r+0x7b6>
 8008b0c:	4651      	mov	r1, sl
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fc1a 	bl	8009348 <__pow5mult>
 8008b14:	4682      	mov	sl, r0
 8008b16:	2101      	movs	r1, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fb55 	bl	80091c8 <__i2b>
 8008b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	f340 8081 	ble.w	8008c2a <_dtoa_r+0x8ca>
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fc0b 	bl	8009348 <__pow5mult>
 8008b32:	9b07      	ldr	r3, [sp, #28]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	4606      	mov	r6, r0
 8008b38:	dd7a      	ble.n	8008c30 <_dtoa_r+0x8d0>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	6933      	ldr	r3, [r6, #16]
 8008b40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b44:	6918      	ldr	r0, [r3, #16]
 8008b46:	f000 faf1 	bl	800912c <__hi0bits>
 8008b4a:	f1c0 0020 	rsb	r0, r0, #32
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	4418      	add	r0, r3
 8008b52:	f010 001f 	ands.w	r0, r0, #31
 8008b56:	f000 8094 	beq.w	8008c82 <_dtoa_r+0x922>
 8008b5a:	f1c0 0320 	rsb	r3, r0, #32
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	f340 8085 	ble.w	8008c6e <_dtoa_r+0x90e>
 8008b64:	9b05      	ldr	r3, [sp, #20]
 8008b66:	f1c0 001c 	rsb	r0, r0, #28
 8008b6a:	4403      	add	r3, r0
 8008b6c:	9305      	str	r3, [sp, #20]
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	4403      	add	r3, r0
 8008b72:	4405      	add	r5, r0
 8008b74:	9306      	str	r3, [sp, #24]
 8008b76:	9b05      	ldr	r3, [sp, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dd05      	ble.n	8008b88 <_dtoa_r+0x828>
 8008b7c:	4651      	mov	r1, sl
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fc3b 	bl	80093fc <__lshift>
 8008b86:	4682      	mov	sl, r0
 8008b88:	9b06      	ldr	r3, [sp, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dd05      	ble.n	8008b9a <_dtoa_r+0x83a>
 8008b8e:	4631      	mov	r1, r6
 8008b90:	461a      	mov	r2, r3
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 fc32 	bl	80093fc <__lshift>
 8008b98:	4606      	mov	r6, r0
 8008b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d072      	beq.n	8008c86 <_dtoa_r+0x926>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f000 fc96 	bl	80094d4 <__mcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	da6c      	bge.n	8008c86 <_dtoa_r+0x926>
 8008bac:	2300      	movs	r3, #0
 8008bae:	4651      	mov	r1, sl
 8008bb0:	220a      	movs	r2, #10
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fa74 	bl	80090a0 <__multadd>
 8008bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bbe:	4682      	mov	sl, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 81b0 	beq.w	8008f26 <_dtoa_r+0xbc6>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	4639      	mov	r1, r7
 8008bca:	220a      	movs	r2, #10
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 fa67 	bl	80090a0 <__multadd>
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	f300 8096 	bgt.w	8008d08 <_dtoa_r+0x9a8>
 8008bdc:	9b07      	ldr	r3, [sp, #28]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	dc59      	bgt.n	8008c96 <_dtoa_r+0x936>
 8008be2:	e091      	b.n	8008d08 <_dtoa_r+0x9a8>
 8008be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bea:	e758      	b.n	8008a9e <_dtoa_r+0x73e>
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	1e5e      	subs	r6, r3, #1
 8008bf0:	9b08      	ldr	r3, [sp, #32]
 8008bf2:	42b3      	cmp	r3, r6
 8008bf4:	bfbf      	itttt	lt
 8008bf6:	9b08      	ldrlt	r3, [sp, #32]
 8008bf8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008bfa:	9608      	strlt	r6, [sp, #32]
 8008bfc:	1af3      	sublt	r3, r6, r3
 8008bfe:	bfb4      	ite	lt
 8008c00:	18d2      	addlt	r2, r2, r3
 8008c02:	1b9e      	subge	r6, r3, r6
 8008c04:	9b04      	ldr	r3, [sp, #16]
 8008c06:	bfbc      	itt	lt
 8008c08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008c0a:	2600      	movlt	r6, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfb7      	itett	lt
 8008c10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008c14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c18:	1a9d      	sublt	r5, r3, r2
 8008c1a:	2300      	movlt	r3, #0
 8008c1c:	e741      	b.n	8008aa2 <_dtoa_r+0x742>
 8008c1e:	9e08      	ldr	r6, [sp, #32]
 8008c20:	9d05      	ldr	r5, [sp, #20]
 8008c22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c24:	e748      	b.n	8008ab8 <_dtoa_r+0x758>
 8008c26:	9a08      	ldr	r2, [sp, #32]
 8008c28:	e770      	b.n	8008b0c <_dtoa_r+0x7ac>
 8008c2a:	9b07      	ldr	r3, [sp, #28]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	dc19      	bgt.n	8008c64 <_dtoa_r+0x904>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	b9bb      	cbnz	r3, 8008c64 <_dtoa_r+0x904>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c3a:	b99b      	cbnz	r3, 8008c64 <_dtoa_r+0x904>
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	0d1b      	lsrs	r3, r3, #20
 8008c44:	051b      	lsls	r3, r3, #20
 8008c46:	b183      	cbz	r3, 8008c6a <_dtoa_r+0x90a>
 8008c48:	9b05      	ldr	r3, [sp, #20]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	9305      	str	r3, [sp, #20]
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	3301      	adds	r3, #1
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	f04f 0801 	mov.w	r8, #1
 8008c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f47f af6f 	bne.w	8008b3e <_dtoa_r+0x7de>
 8008c60:	2001      	movs	r0, #1
 8008c62:	e774      	b.n	8008b4e <_dtoa_r+0x7ee>
 8008c64:	f04f 0800 	mov.w	r8, #0
 8008c68:	e7f6      	b.n	8008c58 <_dtoa_r+0x8f8>
 8008c6a:	4698      	mov	r8, r3
 8008c6c:	e7f4      	b.n	8008c58 <_dtoa_r+0x8f8>
 8008c6e:	d082      	beq.n	8008b76 <_dtoa_r+0x816>
 8008c70:	9a05      	ldr	r2, [sp, #20]
 8008c72:	331c      	adds	r3, #28
 8008c74:	441a      	add	r2, r3
 8008c76:	9205      	str	r2, [sp, #20]
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	441d      	add	r5, r3
 8008c7e:	9206      	str	r2, [sp, #24]
 8008c80:	e779      	b.n	8008b76 <_dtoa_r+0x816>
 8008c82:	4603      	mov	r3, r0
 8008c84:	e7f4      	b.n	8008c70 <_dtoa_r+0x910>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc37      	bgt.n	8008cfc <_dtoa_r+0x99c>
 8008c8c:	9b07      	ldr	r3, [sp, #28]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	dd34      	ble.n	8008cfc <_dtoa_r+0x99c>
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	b963      	cbnz	r3, 8008cb4 <_dtoa_r+0x954>
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	2205      	movs	r2, #5
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 f9fe 	bl	80090a0 <__multadd>
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	4650      	mov	r0, sl
 8008caa:	f000 fc13 	bl	80094d4 <__mcmp>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f73f adbb 	bgt.w	800882a <_dtoa_r+0x4ca>
 8008cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb6:	9d00      	ldr	r5, [sp, #0]
 8008cb8:	ea6f 0b03 	mvn.w	fp, r3
 8008cbc:	f04f 0800 	mov.w	r8, #0
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 f9ca 	bl	800905c <_Bfree>
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	f43f aeab 	beq.w	8008a24 <_dtoa_r+0x6c4>
 8008cce:	f1b8 0f00 	cmp.w	r8, #0
 8008cd2:	d005      	beq.n	8008ce0 <_dtoa_r+0x980>
 8008cd4:	45b8      	cmp	r8, r7
 8008cd6:	d003      	beq.n	8008ce0 <_dtoa_r+0x980>
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 f9be 	bl	800905c <_Bfree>
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f9ba 	bl	800905c <_Bfree>
 8008ce8:	e69c      	b.n	8008a24 <_dtoa_r+0x6c4>
 8008cea:	2600      	movs	r6, #0
 8008cec:	4637      	mov	r7, r6
 8008cee:	e7e1      	b.n	8008cb4 <_dtoa_r+0x954>
 8008cf0:	46bb      	mov	fp, r7
 8008cf2:	4637      	mov	r7, r6
 8008cf4:	e599      	b.n	800882a <_dtoa_r+0x4ca>
 8008cf6:	bf00      	nop
 8008cf8:	40240000 	.word	0x40240000
 8008cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80c8 	beq.w	8008e94 <_dtoa_r+0xb34>
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	dd05      	ble.n	8008d18 <_dtoa_r+0x9b8>
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fb73 	bl	80093fc <__lshift>
 8008d16:	4607      	mov	r7, r0
 8008d18:	f1b8 0f00 	cmp.w	r8, #0
 8008d1c:	d05b      	beq.n	8008dd6 <_dtoa_r+0xa76>
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 f95b 	bl	8008fdc <_Balloc>
 8008d26:	4605      	mov	r5, r0
 8008d28:	b928      	cbnz	r0, 8008d36 <_dtoa_r+0x9d6>
 8008d2a:	4b83      	ldr	r3, [pc, #524]	; (8008f38 <_dtoa_r+0xbd8>)
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d32:	f7ff bb2e 	b.w	8008392 <_dtoa_r+0x32>
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	3202      	adds	r2, #2
 8008d3a:	0092      	lsls	r2, r2, #2
 8008d3c:	f107 010c 	add.w	r1, r7, #12
 8008d40:	300c      	adds	r0, #12
 8008d42:	f7ff fa59 	bl	80081f8 <memcpy>
 8008d46:	2201      	movs	r2, #1
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fb56 	bl	80093fc <__lshift>
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	9308      	str	r3, [sp, #32]
 8008d5e:	9b02      	ldr	r3, [sp, #8]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	46b8      	mov	r8, r7
 8008d66:	9306      	str	r3, [sp, #24]
 8008d68:	4607      	mov	r7, r0
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	4650      	mov	r0, sl
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f7ff fa6c 	bl	8008250 <quorem>
 8008d78:	4641      	mov	r1, r8
 8008d7a:	9002      	str	r0, [sp, #8]
 8008d7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d80:	4650      	mov	r0, sl
 8008d82:	f000 fba7 	bl	80094d4 <__mcmp>
 8008d86:	463a      	mov	r2, r7
 8008d88:	9005      	str	r0, [sp, #20]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fbbd 	bl	800950c <__mdiff>
 8008d92:	68c2      	ldr	r2, [r0, #12]
 8008d94:	4605      	mov	r5, r0
 8008d96:	bb02      	cbnz	r2, 8008dda <_dtoa_r+0xa7a>
 8008d98:	4601      	mov	r1, r0
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	f000 fb9a 	bl	80094d4 <__mcmp>
 8008da0:	4602      	mov	r2, r0
 8008da2:	4629      	mov	r1, r5
 8008da4:	4620      	mov	r0, r4
 8008da6:	9209      	str	r2, [sp, #36]	; 0x24
 8008da8:	f000 f958 	bl	800905c <_Bfree>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db0:	9d04      	ldr	r5, [sp, #16]
 8008db2:	ea43 0102 	orr.w	r1, r3, r2
 8008db6:	9b06      	ldr	r3, [sp, #24]
 8008db8:	4319      	orrs	r1, r3
 8008dba:	d110      	bne.n	8008dde <_dtoa_r+0xa7e>
 8008dbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dc0:	d029      	beq.n	8008e16 <_dtoa_r+0xab6>
 8008dc2:	9b05      	ldr	r3, [sp, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dd02      	ble.n	8008dce <_dtoa_r+0xa6e>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	f883 9000 	strb.w	r9, [r3]
 8008dd4:	e774      	b.n	8008cc0 <_dtoa_r+0x960>
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	e7ba      	b.n	8008d50 <_dtoa_r+0x9f0>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	e7e1      	b.n	8008da2 <_dtoa_r+0xa42>
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db04      	blt.n	8008dee <_dtoa_r+0xa8e>
 8008de4:	9907      	ldr	r1, [sp, #28]
 8008de6:	430b      	orrs	r3, r1
 8008de8:	9906      	ldr	r1, [sp, #24]
 8008dea:	430b      	orrs	r3, r1
 8008dec:	d120      	bne.n	8008e30 <_dtoa_r+0xad0>
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	dded      	ble.n	8008dce <_dtoa_r+0xa6e>
 8008df2:	4651      	mov	r1, sl
 8008df4:	2201      	movs	r2, #1
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fb00 	bl	80093fc <__lshift>
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4682      	mov	sl, r0
 8008e00:	f000 fb68 	bl	80094d4 <__mcmp>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	dc03      	bgt.n	8008e10 <_dtoa_r+0xab0>
 8008e08:	d1e1      	bne.n	8008dce <_dtoa_r+0xa6e>
 8008e0a:	f019 0f01 	tst.w	r9, #1
 8008e0e:	d0de      	beq.n	8008dce <_dtoa_r+0xa6e>
 8008e10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e14:	d1d8      	bne.n	8008dc8 <_dtoa_r+0xa68>
 8008e16:	9a01      	ldr	r2, [sp, #4]
 8008e18:	2339      	movs	r3, #57	; 0x39
 8008e1a:	7013      	strb	r3, [r2, #0]
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	461d      	mov	r5, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e26:	2a39      	cmp	r2, #57	; 0x39
 8008e28:	d06c      	beq.n	8008f04 <_dtoa_r+0xba4>
 8008e2a:	3201      	adds	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e747      	b.n	8008cc0 <_dtoa_r+0x960>
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	dd07      	ble.n	8008e44 <_dtoa_r+0xae4>
 8008e34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e38:	d0ed      	beq.n	8008e16 <_dtoa_r+0xab6>
 8008e3a:	9a01      	ldr	r2, [sp, #4]
 8008e3c:	f109 0301 	add.w	r3, r9, #1
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	e73d      	b.n	8008cc0 <_dtoa_r+0x960>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	9a08      	ldr	r2, [sp, #32]
 8008e48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d043      	beq.n	8008ed8 <_dtoa_r+0xb78>
 8008e50:	4651      	mov	r1, sl
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 f922 	bl	80090a0 <__multadd>
 8008e5c:	45b8      	cmp	r8, r7
 8008e5e:	4682      	mov	sl, r0
 8008e60:	f04f 0300 	mov.w	r3, #0
 8008e64:	f04f 020a 	mov.w	r2, #10
 8008e68:	4641      	mov	r1, r8
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	d107      	bne.n	8008e7e <_dtoa_r+0xb1e>
 8008e6e:	f000 f917 	bl	80090a0 <__multadd>
 8008e72:	4680      	mov	r8, r0
 8008e74:	4607      	mov	r7, r0
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	e775      	b.n	8008d6a <_dtoa_r+0xa0a>
 8008e7e:	f000 f90f 	bl	80090a0 <__multadd>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4680      	mov	r8, r0
 8008e86:	2300      	movs	r3, #0
 8008e88:	220a      	movs	r2, #10
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 f908 	bl	80090a0 <__multadd>
 8008e90:	4607      	mov	r7, r0
 8008e92:	e7f0      	b.n	8008e76 <_dtoa_r+0xb16>
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	9d00      	ldr	r5, [sp, #0]
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	f7ff f9d7 	bl	8008250 <quorem>
 8008ea2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	f805 9b01 	strb.w	r9, [r5], #1
 8008eac:	1aea      	subs	r2, r5, r3
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	dd07      	ble.n	8008ec4 <_dtoa_r+0xb64>
 8008eb4:	4651      	mov	r1, sl
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	220a      	movs	r2, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f8f0 	bl	80090a0 <__multadd>
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	e7ea      	b.n	8008e9a <_dtoa_r+0xb3a>
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfc8      	it	gt
 8008eca:	461d      	movgt	r5, r3
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	bfd8      	it	le
 8008ed0:	2501      	movle	r5, #1
 8008ed2:	441d      	add	r5, r3
 8008ed4:	f04f 0800 	mov.w	r8, #0
 8008ed8:	4651      	mov	r1, sl
 8008eda:	2201      	movs	r2, #1
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fa8d 	bl	80093fc <__lshift>
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	f000 faf5 	bl	80094d4 <__mcmp>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	dc96      	bgt.n	8008e1c <_dtoa_r+0xabc>
 8008eee:	d102      	bne.n	8008ef6 <_dtoa_r+0xb96>
 8008ef0:	f019 0f01 	tst.w	r9, #1
 8008ef4:	d192      	bne.n	8008e1c <_dtoa_r+0xabc>
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	461d      	mov	r5, r3
 8008efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efe:	2a30      	cmp	r2, #48	; 0x30
 8008f00:	d0fa      	beq.n	8008ef8 <_dtoa_r+0xb98>
 8008f02:	e6dd      	b.n	8008cc0 <_dtoa_r+0x960>
 8008f04:	9a00      	ldr	r2, [sp, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d189      	bne.n	8008e1e <_dtoa_r+0xabe>
 8008f0a:	f10b 0b01 	add.w	fp, fp, #1
 8008f0e:	2331      	movs	r3, #49	; 0x31
 8008f10:	e796      	b.n	8008e40 <_dtoa_r+0xae0>
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <_dtoa_r+0xbdc>)
 8008f14:	f7ff ba99 	b.w	800844a <_dtoa_r+0xea>
 8008f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f47f aa6d 	bne.w	80083fa <_dtoa_r+0x9a>
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <_dtoa_r+0xbe0>)
 8008f22:	f7ff ba92 	b.w	800844a <_dtoa_r+0xea>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dcb5      	bgt.n	8008e98 <_dtoa_r+0xb38>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	f73f aeb1 	bgt.w	8008c96 <_dtoa_r+0x936>
 8008f34:	e7b0      	b.n	8008e98 <_dtoa_r+0xb38>
 8008f36:	bf00      	nop
 8008f38:	0800c1ba 	.word	0x0800c1ba
 8008f3c:	0800ac3e 	.word	0x0800ac3e
 8008f40:	0800c155 	.word	0x0800c155

08008f44 <_free_r>:
 8008f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d044      	beq.n	8008fd4 <_free_r+0x90>
 8008f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f4e:	9001      	str	r0, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f1a1 0404 	sub.w	r4, r1, #4
 8008f56:	bfb8      	it	lt
 8008f58:	18e4      	addlt	r4, r4, r3
 8008f5a:	f7fe fa19 	bl	8007390 <__malloc_lock>
 8008f5e:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <_free_r+0x94>)
 8008f60:	9801      	ldr	r0, [sp, #4]
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	b933      	cbnz	r3, 8008f74 <_free_r+0x30>
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	b003      	add	sp, #12
 8008f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f70:	f7fe ba14 	b.w	800739c <__malloc_unlock>
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d908      	bls.n	8008f8a <_free_r+0x46>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf01      	itttt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	1949      	addeq	r1, r1, r5
 8008f86:	6021      	streq	r1, [r4, #0]
 8008f88:	e7ed      	b.n	8008f66 <_free_r+0x22>
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b10b      	cbz	r3, 8008f94 <_free_r+0x50>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d9fa      	bls.n	8008f8a <_free_r+0x46>
 8008f94:	6811      	ldr	r1, [r2, #0]
 8008f96:	1855      	adds	r5, r2, r1
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d10b      	bne.n	8008fb4 <_free_r+0x70>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	4421      	add	r1, r4
 8008fa0:	1854      	adds	r4, r2, r1
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	d1e0      	bne.n	8008f6a <_free_r+0x26>
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	6053      	str	r3, [r2, #4]
 8008fae:	440c      	add	r4, r1
 8008fb0:	6014      	str	r4, [r2, #0]
 8008fb2:	e7da      	b.n	8008f6a <_free_r+0x26>
 8008fb4:	d902      	bls.n	8008fbc <_free_r+0x78>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	e7d6      	b.n	8008f6a <_free_r+0x26>
 8008fbc:	6825      	ldr	r5, [r4, #0]
 8008fbe:	1961      	adds	r1, r4, r5
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf04      	itt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	bf04      	itt	eq
 8008fcc:	1949      	addeq	r1, r1, r5
 8008fce:	6021      	streq	r1, [r4, #0]
 8008fd0:	6054      	str	r4, [r2, #4]
 8008fd2:	e7ca      	b.n	8008f6a <_free_r+0x26>
 8008fd4:	b003      	add	sp, #12
 8008fd6:	bd30      	pop	{r4, r5, pc}
 8008fd8:	20000ac8 	.word	0x20000ac8

08008fdc <_Balloc>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	69c6      	ldr	r6, [r0, #28]
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	b976      	cbnz	r6, 8009004 <_Balloc+0x28>
 8008fe6:	2010      	movs	r0, #16
 8008fe8:	f7fa fd90 	bl	8003b0c <__wrap_malloc>
 8008fec:	4602      	mov	r2, r0
 8008fee:	61e0      	str	r0, [r4, #28]
 8008ff0:	b920      	cbnz	r0, 8008ffc <_Balloc+0x20>
 8008ff2:	4b18      	ldr	r3, [pc, #96]	; (8009054 <_Balloc+0x78>)
 8008ff4:	4818      	ldr	r0, [pc, #96]	; (8009058 <_Balloc+0x7c>)
 8008ff6:	216b      	movs	r1, #107	; 0x6b
 8008ff8:	f7ff f90c 	bl	8008214 <__assert_func>
 8008ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009000:	6006      	str	r6, [r0, #0]
 8009002:	60c6      	str	r6, [r0, #12]
 8009004:	69e6      	ldr	r6, [r4, #28]
 8009006:	68f3      	ldr	r3, [r6, #12]
 8009008:	b183      	cbz	r3, 800902c <_Balloc+0x50>
 800900a:	69e3      	ldr	r3, [r4, #28]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009012:	b9b8      	cbnz	r0, 8009044 <_Balloc+0x68>
 8009014:	2101      	movs	r1, #1
 8009016:	fa01 f605 	lsl.w	r6, r1, r5
 800901a:	1d72      	adds	r2, r6, #5
 800901c:	0092      	lsls	r2, r2, #2
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fb71 	bl	8009706 <_calloc_r>
 8009024:	b160      	cbz	r0, 8009040 <_Balloc+0x64>
 8009026:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800902a:	e00e      	b.n	800904a <_Balloc+0x6e>
 800902c:	2221      	movs	r2, #33	; 0x21
 800902e:	2104      	movs	r1, #4
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fb68 	bl	8009706 <_calloc_r>
 8009036:	69e3      	ldr	r3, [r4, #28]
 8009038:	60f0      	str	r0, [r6, #12]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e4      	bne.n	800900a <_Balloc+0x2e>
 8009040:	2000      	movs	r0, #0
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	6802      	ldr	r2, [r0, #0]
 8009046:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800904a:	2300      	movs	r3, #0
 800904c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009050:	e7f7      	b.n	8009042 <_Balloc+0x66>
 8009052:	bf00      	nop
 8009054:	0800c078 	.word	0x0800c078
 8009058:	0800c1cb 	.word	0x0800c1cb

0800905c <_Bfree>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	69c6      	ldr	r6, [r0, #28]
 8009060:	4605      	mov	r5, r0
 8009062:	460c      	mov	r4, r1
 8009064:	b976      	cbnz	r6, 8009084 <_Bfree+0x28>
 8009066:	2010      	movs	r0, #16
 8009068:	f7fa fd50 	bl	8003b0c <__wrap_malloc>
 800906c:	4602      	mov	r2, r0
 800906e:	61e8      	str	r0, [r5, #28]
 8009070:	b920      	cbnz	r0, 800907c <_Bfree+0x20>
 8009072:	4b09      	ldr	r3, [pc, #36]	; (8009098 <_Bfree+0x3c>)
 8009074:	4809      	ldr	r0, [pc, #36]	; (800909c <_Bfree+0x40>)
 8009076:	218f      	movs	r1, #143	; 0x8f
 8009078:	f7ff f8cc 	bl	8008214 <__assert_func>
 800907c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009080:	6006      	str	r6, [r0, #0]
 8009082:	60c6      	str	r6, [r0, #12]
 8009084:	b13c      	cbz	r4, 8009096 <_Bfree+0x3a>
 8009086:	69eb      	ldr	r3, [r5, #28]
 8009088:	6862      	ldr	r2, [r4, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009090:	6021      	str	r1, [r4, #0]
 8009092:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	0800c078 	.word	0x0800c078
 800909c:	0800c1cb 	.word	0x0800c1cb

080090a0 <__multadd>:
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	690d      	ldr	r5, [r1, #16]
 80090a6:	4607      	mov	r7, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	461e      	mov	r6, r3
 80090ac:	f101 0c14 	add.w	ip, r1, #20
 80090b0:	2000      	movs	r0, #0
 80090b2:	f8dc 3000 	ldr.w	r3, [ip]
 80090b6:	b299      	uxth	r1, r3
 80090b8:	fb02 6101 	mla	r1, r2, r1, r6
 80090bc:	0c1e      	lsrs	r6, r3, #16
 80090be:	0c0b      	lsrs	r3, r1, #16
 80090c0:	fb02 3306 	mla	r3, r2, r6, r3
 80090c4:	b289      	uxth	r1, r1
 80090c6:	3001      	adds	r0, #1
 80090c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090cc:	4285      	cmp	r5, r0
 80090ce:	f84c 1b04 	str.w	r1, [ip], #4
 80090d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090d6:	dcec      	bgt.n	80090b2 <__multadd+0x12>
 80090d8:	b30e      	cbz	r6, 800911e <__multadd+0x7e>
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	42ab      	cmp	r3, r5
 80090de:	dc19      	bgt.n	8009114 <__multadd+0x74>
 80090e0:	6861      	ldr	r1, [r4, #4]
 80090e2:	4638      	mov	r0, r7
 80090e4:	3101      	adds	r1, #1
 80090e6:	f7ff ff79 	bl	8008fdc <_Balloc>
 80090ea:	4680      	mov	r8, r0
 80090ec:	b928      	cbnz	r0, 80090fa <__multadd+0x5a>
 80090ee:	4602      	mov	r2, r0
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <__multadd+0x84>)
 80090f2:	480d      	ldr	r0, [pc, #52]	; (8009128 <__multadd+0x88>)
 80090f4:	21ba      	movs	r1, #186	; 0xba
 80090f6:	f7ff f88d 	bl	8008214 <__assert_func>
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	3202      	adds	r2, #2
 80090fe:	f104 010c 	add.w	r1, r4, #12
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	300c      	adds	r0, #12
 8009106:	f7ff f877 	bl	80081f8 <memcpy>
 800910a:	4621      	mov	r1, r4
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff ffa5 	bl	800905c <_Bfree>
 8009112:	4644      	mov	r4, r8
 8009114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009118:	3501      	adds	r5, #1
 800911a:	615e      	str	r6, [r3, #20]
 800911c:	6125      	str	r5, [r4, #16]
 800911e:	4620      	mov	r0, r4
 8009120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009124:	0800c1ba 	.word	0x0800c1ba
 8009128:	0800c1cb 	.word	0x0800c1cb

0800912c <__hi0bits>:
 800912c:	0c03      	lsrs	r3, r0, #16
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	b9d3      	cbnz	r3, 8009168 <__hi0bits+0x3c>
 8009132:	0400      	lsls	r0, r0, #16
 8009134:	2310      	movs	r3, #16
 8009136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800913a:	bf04      	itt	eq
 800913c:	0200      	lsleq	r0, r0, #8
 800913e:	3308      	addeq	r3, #8
 8009140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009144:	bf04      	itt	eq
 8009146:	0100      	lsleq	r0, r0, #4
 8009148:	3304      	addeq	r3, #4
 800914a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800914e:	bf04      	itt	eq
 8009150:	0080      	lsleq	r0, r0, #2
 8009152:	3302      	addeq	r3, #2
 8009154:	2800      	cmp	r0, #0
 8009156:	db05      	blt.n	8009164 <__hi0bits+0x38>
 8009158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800915c:	f103 0301 	add.w	r3, r3, #1
 8009160:	bf08      	it	eq
 8009162:	2320      	moveq	r3, #32
 8009164:	4618      	mov	r0, r3
 8009166:	4770      	bx	lr
 8009168:	2300      	movs	r3, #0
 800916a:	e7e4      	b.n	8009136 <__hi0bits+0xa>

0800916c <__lo0bits>:
 800916c:	6803      	ldr	r3, [r0, #0]
 800916e:	f013 0207 	ands.w	r2, r3, #7
 8009172:	d00c      	beq.n	800918e <__lo0bits+0x22>
 8009174:	07d9      	lsls	r1, r3, #31
 8009176:	d422      	bmi.n	80091be <__lo0bits+0x52>
 8009178:	079a      	lsls	r2, r3, #30
 800917a:	bf49      	itett	mi
 800917c:	085b      	lsrmi	r3, r3, #1
 800917e:	089b      	lsrpl	r3, r3, #2
 8009180:	6003      	strmi	r3, [r0, #0]
 8009182:	2201      	movmi	r2, #1
 8009184:	bf5c      	itt	pl
 8009186:	6003      	strpl	r3, [r0, #0]
 8009188:	2202      	movpl	r2, #2
 800918a:	4610      	mov	r0, r2
 800918c:	4770      	bx	lr
 800918e:	b299      	uxth	r1, r3
 8009190:	b909      	cbnz	r1, 8009196 <__lo0bits+0x2a>
 8009192:	0c1b      	lsrs	r3, r3, #16
 8009194:	2210      	movs	r2, #16
 8009196:	b2d9      	uxtb	r1, r3
 8009198:	b909      	cbnz	r1, 800919e <__lo0bits+0x32>
 800919a:	3208      	adds	r2, #8
 800919c:	0a1b      	lsrs	r3, r3, #8
 800919e:	0719      	lsls	r1, r3, #28
 80091a0:	bf04      	itt	eq
 80091a2:	091b      	lsreq	r3, r3, #4
 80091a4:	3204      	addeq	r2, #4
 80091a6:	0799      	lsls	r1, r3, #30
 80091a8:	bf04      	itt	eq
 80091aa:	089b      	lsreq	r3, r3, #2
 80091ac:	3202      	addeq	r2, #2
 80091ae:	07d9      	lsls	r1, r3, #31
 80091b0:	d403      	bmi.n	80091ba <__lo0bits+0x4e>
 80091b2:	085b      	lsrs	r3, r3, #1
 80091b4:	f102 0201 	add.w	r2, r2, #1
 80091b8:	d003      	beq.n	80091c2 <__lo0bits+0x56>
 80091ba:	6003      	str	r3, [r0, #0]
 80091bc:	e7e5      	b.n	800918a <__lo0bits+0x1e>
 80091be:	2200      	movs	r2, #0
 80091c0:	e7e3      	b.n	800918a <__lo0bits+0x1e>
 80091c2:	2220      	movs	r2, #32
 80091c4:	e7e1      	b.n	800918a <__lo0bits+0x1e>
	...

080091c8 <__i2b>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	460c      	mov	r4, r1
 80091cc:	2101      	movs	r1, #1
 80091ce:	f7ff ff05 	bl	8008fdc <_Balloc>
 80091d2:	4602      	mov	r2, r0
 80091d4:	b928      	cbnz	r0, 80091e2 <__i2b+0x1a>
 80091d6:	4b05      	ldr	r3, [pc, #20]	; (80091ec <__i2b+0x24>)
 80091d8:	4805      	ldr	r0, [pc, #20]	; (80091f0 <__i2b+0x28>)
 80091da:	f240 1145 	movw	r1, #325	; 0x145
 80091de:	f7ff f819 	bl	8008214 <__assert_func>
 80091e2:	2301      	movs	r3, #1
 80091e4:	6144      	str	r4, [r0, #20]
 80091e6:	6103      	str	r3, [r0, #16]
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop
 80091ec:	0800c1ba 	.word	0x0800c1ba
 80091f0:	0800c1cb 	.word	0x0800c1cb

080091f4 <__multiply>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	4691      	mov	r9, r2
 80091fa:	690a      	ldr	r2, [r1, #16]
 80091fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009200:	429a      	cmp	r2, r3
 8009202:	bfb8      	it	lt
 8009204:	460b      	movlt	r3, r1
 8009206:	460c      	mov	r4, r1
 8009208:	bfbc      	itt	lt
 800920a:	464c      	movlt	r4, r9
 800920c:	4699      	movlt	r9, r3
 800920e:	6927      	ldr	r7, [r4, #16]
 8009210:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	6861      	ldr	r1, [r4, #4]
 8009218:	eb07 060a 	add.w	r6, r7, sl
 800921c:	42b3      	cmp	r3, r6
 800921e:	b085      	sub	sp, #20
 8009220:	bfb8      	it	lt
 8009222:	3101      	addlt	r1, #1
 8009224:	f7ff feda 	bl	8008fdc <_Balloc>
 8009228:	b930      	cbnz	r0, 8009238 <__multiply+0x44>
 800922a:	4602      	mov	r2, r0
 800922c:	4b44      	ldr	r3, [pc, #272]	; (8009340 <__multiply+0x14c>)
 800922e:	4845      	ldr	r0, [pc, #276]	; (8009344 <__multiply+0x150>)
 8009230:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009234:	f7fe ffee 	bl	8008214 <__assert_func>
 8009238:	f100 0514 	add.w	r5, r0, #20
 800923c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009240:	462b      	mov	r3, r5
 8009242:	2200      	movs	r2, #0
 8009244:	4543      	cmp	r3, r8
 8009246:	d321      	bcc.n	800928c <__multiply+0x98>
 8009248:	f104 0314 	add.w	r3, r4, #20
 800924c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009250:	f109 0314 	add.w	r3, r9, #20
 8009254:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009258:	9202      	str	r2, [sp, #8]
 800925a:	1b3a      	subs	r2, r7, r4
 800925c:	3a15      	subs	r2, #21
 800925e:	f022 0203 	bic.w	r2, r2, #3
 8009262:	3204      	adds	r2, #4
 8009264:	f104 0115 	add.w	r1, r4, #21
 8009268:	428f      	cmp	r7, r1
 800926a:	bf38      	it	cc
 800926c:	2204      	movcc	r2, #4
 800926e:	9201      	str	r2, [sp, #4]
 8009270:	9a02      	ldr	r2, [sp, #8]
 8009272:	9303      	str	r3, [sp, #12]
 8009274:	429a      	cmp	r2, r3
 8009276:	d80c      	bhi.n	8009292 <__multiply+0x9e>
 8009278:	2e00      	cmp	r6, #0
 800927a:	dd03      	ble.n	8009284 <__multiply+0x90>
 800927c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009280:	2b00      	cmp	r3, #0
 8009282:	d05b      	beq.n	800933c <__multiply+0x148>
 8009284:	6106      	str	r6, [r0, #16]
 8009286:	b005      	add	sp, #20
 8009288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928c:	f843 2b04 	str.w	r2, [r3], #4
 8009290:	e7d8      	b.n	8009244 <__multiply+0x50>
 8009292:	f8b3 a000 	ldrh.w	sl, [r3]
 8009296:	f1ba 0f00 	cmp.w	sl, #0
 800929a:	d024      	beq.n	80092e6 <__multiply+0xf2>
 800929c:	f104 0e14 	add.w	lr, r4, #20
 80092a0:	46a9      	mov	r9, r5
 80092a2:	f04f 0c00 	mov.w	ip, #0
 80092a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092aa:	f8d9 1000 	ldr.w	r1, [r9]
 80092ae:	fa1f fb82 	uxth.w	fp, r2
 80092b2:	b289      	uxth	r1, r1
 80092b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80092b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80092bc:	f8d9 2000 	ldr.w	r2, [r9]
 80092c0:	4461      	add	r1, ip
 80092c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80092ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092ce:	b289      	uxth	r1, r1
 80092d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092d4:	4577      	cmp	r7, lr
 80092d6:	f849 1b04 	str.w	r1, [r9], #4
 80092da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092de:	d8e2      	bhi.n	80092a6 <__multiply+0xb2>
 80092e0:	9a01      	ldr	r2, [sp, #4]
 80092e2:	f845 c002 	str.w	ip, [r5, r2]
 80092e6:	9a03      	ldr	r2, [sp, #12]
 80092e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092ec:	3304      	adds	r3, #4
 80092ee:	f1b9 0f00 	cmp.w	r9, #0
 80092f2:	d021      	beq.n	8009338 <__multiply+0x144>
 80092f4:	6829      	ldr	r1, [r5, #0]
 80092f6:	f104 0c14 	add.w	ip, r4, #20
 80092fa:	46ae      	mov	lr, r5
 80092fc:	f04f 0a00 	mov.w	sl, #0
 8009300:	f8bc b000 	ldrh.w	fp, [ip]
 8009304:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009308:	fb09 220b 	mla	r2, r9, fp, r2
 800930c:	4452      	add	r2, sl
 800930e:	b289      	uxth	r1, r1
 8009310:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009314:	f84e 1b04 	str.w	r1, [lr], #4
 8009318:	f85c 1b04 	ldr.w	r1, [ip], #4
 800931c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009320:	f8be 1000 	ldrh.w	r1, [lr]
 8009324:	fb09 110a 	mla	r1, r9, sl, r1
 8009328:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800932c:	4567      	cmp	r7, ip
 800932e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009332:	d8e5      	bhi.n	8009300 <__multiply+0x10c>
 8009334:	9a01      	ldr	r2, [sp, #4]
 8009336:	50a9      	str	r1, [r5, r2]
 8009338:	3504      	adds	r5, #4
 800933a:	e799      	b.n	8009270 <__multiply+0x7c>
 800933c:	3e01      	subs	r6, #1
 800933e:	e79b      	b.n	8009278 <__multiply+0x84>
 8009340:	0800c1ba 	.word	0x0800c1ba
 8009344:	0800c1cb 	.word	0x0800c1cb

08009348 <__pow5mult>:
 8009348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800934c:	4615      	mov	r5, r2
 800934e:	f012 0203 	ands.w	r2, r2, #3
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	d007      	beq.n	8009368 <__pow5mult+0x20>
 8009358:	4c25      	ldr	r4, [pc, #148]	; (80093f0 <__pow5mult+0xa8>)
 800935a:	3a01      	subs	r2, #1
 800935c:	2300      	movs	r3, #0
 800935e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009362:	f7ff fe9d 	bl	80090a0 <__multadd>
 8009366:	4607      	mov	r7, r0
 8009368:	10ad      	asrs	r5, r5, #2
 800936a:	d03d      	beq.n	80093e8 <__pow5mult+0xa0>
 800936c:	69f4      	ldr	r4, [r6, #28]
 800936e:	b97c      	cbnz	r4, 8009390 <__pow5mult+0x48>
 8009370:	2010      	movs	r0, #16
 8009372:	f7fa fbcb 	bl	8003b0c <__wrap_malloc>
 8009376:	4602      	mov	r2, r0
 8009378:	61f0      	str	r0, [r6, #28]
 800937a:	b928      	cbnz	r0, 8009388 <__pow5mult+0x40>
 800937c:	4b1d      	ldr	r3, [pc, #116]	; (80093f4 <__pow5mult+0xac>)
 800937e:	481e      	ldr	r0, [pc, #120]	; (80093f8 <__pow5mult+0xb0>)
 8009380:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009384:	f7fe ff46 	bl	8008214 <__assert_func>
 8009388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800938c:	6004      	str	r4, [r0, #0]
 800938e:	60c4      	str	r4, [r0, #12]
 8009390:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009398:	b94c      	cbnz	r4, 80093ae <__pow5mult+0x66>
 800939a:	f240 2171 	movw	r1, #625	; 0x271
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff ff12 	bl	80091c8 <__i2b>
 80093a4:	2300      	movs	r3, #0
 80093a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093aa:	4604      	mov	r4, r0
 80093ac:	6003      	str	r3, [r0, #0]
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	07eb      	lsls	r3, r5, #31
 80093b4:	d50a      	bpl.n	80093cc <__pow5mult+0x84>
 80093b6:	4639      	mov	r1, r7
 80093b8:	4622      	mov	r2, r4
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7ff ff1a 	bl	80091f4 <__multiply>
 80093c0:	4639      	mov	r1, r7
 80093c2:	4680      	mov	r8, r0
 80093c4:	4630      	mov	r0, r6
 80093c6:	f7ff fe49 	bl	800905c <_Bfree>
 80093ca:	4647      	mov	r7, r8
 80093cc:	106d      	asrs	r5, r5, #1
 80093ce:	d00b      	beq.n	80093e8 <__pow5mult+0xa0>
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	b938      	cbnz	r0, 80093e4 <__pow5mult+0x9c>
 80093d4:	4622      	mov	r2, r4
 80093d6:	4621      	mov	r1, r4
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff ff0b 	bl	80091f4 <__multiply>
 80093de:	6020      	str	r0, [r4, #0]
 80093e0:	f8c0 9000 	str.w	r9, [r0]
 80093e4:	4604      	mov	r4, r0
 80093e6:	e7e4      	b.n	80093b2 <__pow5mult+0x6a>
 80093e8:	4638      	mov	r0, r7
 80093ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ee:	bf00      	nop
 80093f0:	0800c318 	.word	0x0800c318
 80093f4:	0800c078 	.word	0x0800c078
 80093f8:	0800c1cb 	.word	0x0800c1cb

080093fc <__lshift>:
 80093fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009400:	460c      	mov	r4, r1
 8009402:	6849      	ldr	r1, [r1, #4]
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	4607      	mov	r7, r0
 800940e:	4691      	mov	r9, r2
 8009410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009414:	f108 0601 	add.w	r6, r8, #1
 8009418:	42b3      	cmp	r3, r6
 800941a:	db0b      	blt.n	8009434 <__lshift+0x38>
 800941c:	4638      	mov	r0, r7
 800941e:	f7ff fddd 	bl	8008fdc <_Balloc>
 8009422:	4605      	mov	r5, r0
 8009424:	b948      	cbnz	r0, 800943a <__lshift+0x3e>
 8009426:	4602      	mov	r2, r0
 8009428:	4b28      	ldr	r3, [pc, #160]	; (80094cc <__lshift+0xd0>)
 800942a:	4829      	ldr	r0, [pc, #164]	; (80094d0 <__lshift+0xd4>)
 800942c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009430:	f7fe fef0 	bl	8008214 <__assert_func>
 8009434:	3101      	adds	r1, #1
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	e7ee      	b.n	8009418 <__lshift+0x1c>
 800943a:	2300      	movs	r3, #0
 800943c:	f100 0114 	add.w	r1, r0, #20
 8009440:	f100 0210 	add.w	r2, r0, #16
 8009444:	4618      	mov	r0, r3
 8009446:	4553      	cmp	r3, sl
 8009448:	db33      	blt.n	80094b2 <__lshift+0xb6>
 800944a:	6920      	ldr	r0, [r4, #16]
 800944c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009450:	f104 0314 	add.w	r3, r4, #20
 8009454:	f019 091f 	ands.w	r9, r9, #31
 8009458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800945c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009460:	d02b      	beq.n	80094ba <__lshift+0xbe>
 8009462:	f1c9 0e20 	rsb	lr, r9, #32
 8009466:	468a      	mov	sl, r1
 8009468:	2200      	movs	r2, #0
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	fa00 f009 	lsl.w	r0, r0, r9
 8009470:	4310      	orrs	r0, r2
 8009472:	f84a 0b04 	str.w	r0, [sl], #4
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	459c      	cmp	ip, r3
 800947c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009480:	d8f3      	bhi.n	800946a <__lshift+0x6e>
 8009482:	ebac 0304 	sub.w	r3, ip, r4
 8009486:	3b15      	subs	r3, #21
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	3304      	adds	r3, #4
 800948e:	f104 0015 	add.w	r0, r4, #21
 8009492:	4584      	cmp	ip, r0
 8009494:	bf38      	it	cc
 8009496:	2304      	movcc	r3, #4
 8009498:	50ca      	str	r2, [r1, r3]
 800949a:	b10a      	cbz	r2, 80094a0 <__lshift+0xa4>
 800949c:	f108 0602 	add.w	r6, r8, #2
 80094a0:	3e01      	subs	r6, #1
 80094a2:	4638      	mov	r0, r7
 80094a4:	612e      	str	r6, [r5, #16]
 80094a6:	4621      	mov	r1, r4
 80094a8:	f7ff fdd8 	bl	800905c <_Bfree>
 80094ac:	4628      	mov	r0, r5
 80094ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094b6:	3301      	adds	r3, #1
 80094b8:	e7c5      	b.n	8009446 <__lshift+0x4a>
 80094ba:	3904      	subs	r1, #4
 80094bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80094c4:	459c      	cmp	ip, r3
 80094c6:	d8f9      	bhi.n	80094bc <__lshift+0xc0>
 80094c8:	e7ea      	b.n	80094a0 <__lshift+0xa4>
 80094ca:	bf00      	nop
 80094cc:	0800c1ba 	.word	0x0800c1ba
 80094d0:	0800c1cb 	.word	0x0800c1cb

080094d4 <__mcmp>:
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	6902      	ldr	r2, [r0, #16]
 80094d8:	690c      	ldr	r4, [r1, #16]
 80094da:	1b12      	subs	r2, r2, r4
 80094dc:	d10e      	bne.n	80094fc <__mcmp+0x28>
 80094de:	f100 0314 	add.w	r3, r0, #20
 80094e2:	3114      	adds	r1, #20
 80094e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094f4:	42a5      	cmp	r5, r4
 80094f6:	d003      	beq.n	8009500 <__mcmp+0x2c>
 80094f8:	d305      	bcc.n	8009506 <__mcmp+0x32>
 80094fa:	2201      	movs	r2, #1
 80094fc:	4610      	mov	r0, r2
 80094fe:	bd30      	pop	{r4, r5, pc}
 8009500:	4283      	cmp	r3, r0
 8009502:	d3f3      	bcc.n	80094ec <__mcmp+0x18>
 8009504:	e7fa      	b.n	80094fc <__mcmp+0x28>
 8009506:	f04f 32ff 	mov.w	r2, #4294967295
 800950a:	e7f7      	b.n	80094fc <__mcmp+0x28>

0800950c <__mdiff>:
 800950c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	4606      	mov	r6, r0
 8009514:	4611      	mov	r1, r2
 8009516:	4620      	mov	r0, r4
 8009518:	4690      	mov	r8, r2
 800951a:	f7ff ffdb 	bl	80094d4 <__mcmp>
 800951e:	1e05      	subs	r5, r0, #0
 8009520:	d110      	bne.n	8009544 <__mdiff+0x38>
 8009522:	4629      	mov	r1, r5
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff fd59 	bl	8008fdc <_Balloc>
 800952a:	b930      	cbnz	r0, 800953a <__mdiff+0x2e>
 800952c:	4b3a      	ldr	r3, [pc, #232]	; (8009618 <__mdiff+0x10c>)
 800952e:	4602      	mov	r2, r0
 8009530:	f240 2137 	movw	r1, #567	; 0x237
 8009534:	4839      	ldr	r0, [pc, #228]	; (800961c <__mdiff+0x110>)
 8009536:	f7fe fe6d 	bl	8008214 <__assert_func>
 800953a:	2301      	movs	r3, #1
 800953c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009544:	bfa4      	itt	ge
 8009546:	4643      	movge	r3, r8
 8009548:	46a0      	movge	r8, r4
 800954a:	4630      	mov	r0, r6
 800954c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009550:	bfa6      	itte	ge
 8009552:	461c      	movge	r4, r3
 8009554:	2500      	movge	r5, #0
 8009556:	2501      	movlt	r5, #1
 8009558:	f7ff fd40 	bl	8008fdc <_Balloc>
 800955c:	b920      	cbnz	r0, 8009568 <__mdiff+0x5c>
 800955e:	4b2e      	ldr	r3, [pc, #184]	; (8009618 <__mdiff+0x10c>)
 8009560:	4602      	mov	r2, r0
 8009562:	f240 2145 	movw	r1, #581	; 0x245
 8009566:	e7e5      	b.n	8009534 <__mdiff+0x28>
 8009568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800956c:	6926      	ldr	r6, [r4, #16]
 800956e:	60c5      	str	r5, [r0, #12]
 8009570:	f104 0914 	add.w	r9, r4, #20
 8009574:	f108 0514 	add.w	r5, r8, #20
 8009578:	f100 0e14 	add.w	lr, r0, #20
 800957c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009584:	f108 0210 	add.w	r2, r8, #16
 8009588:	46f2      	mov	sl, lr
 800958a:	2100      	movs	r1, #0
 800958c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009594:	fa11 f88b 	uxtah	r8, r1, fp
 8009598:	b299      	uxth	r1, r3
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	eba8 0801 	sub.w	r8, r8, r1
 80095a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095a8:	fa1f f888 	uxth.w	r8, r8
 80095ac:	1419      	asrs	r1, r3, #16
 80095ae:	454e      	cmp	r6, r9
 80095b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095b4:	f84a 3b04 	str.w	r3, [sl], #4
 80095b8:	d8e8      	bhi.n	800958c <__mdiff+0x80>
 80095ba:	1b33      	subs	r3, r6, r4
 80095bc:	3b15      	subs	r3, #21
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	3304      	adds	r3, #4
 80095c4:	3415      	adds	r4, #21
 80095c6:	42a6      	cmp	r6, r4
 80095c8:	bf38      	it	cc
 80095ca:	2304      	movcc	r3, #4
 80095cc:	441d      	add	r5, r3
 80095ce:	4473      	add	r3, lr
 80095d0:	469e      	mov	lr, r3
 80095d2:	462e      	mov	r6, r5
 80095d4:	4566      	cmp	r6, ip
 80095d6:	d30e      	bcc.n	80095f6 <__mdiff+0xea>
 80095d8:	f10c 0203 	add.w	r2, ip, #3
 80095dc:	1b52      	subs	r2, r2, r5
 80095de:	f022 0203 	bic.w	r2, r2, #3
 80095e2:	3d03      	subs	r5, #3
 80095e4:	45ac      	cmp	ip, r5
 80095e6:	bf38      	it	cc
 80095e8:	2200      	movcc	r2, #0
 80095ea:	4413      	add	r3, r2
 80095ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80095f0:	b17a      	cbz	r2, 8009612 <__mdiff+0x106>
 80095f2:	6107      	str	r7, [r0, #16]
 80095f4:	e7a4      	b.n	8009540 <__mdiff+0x34>
 80095f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80095fa:	fa11 f288 	uxtah	r2, r1, r8
 80095fe:	1414      	asrs	r4, r2, #16
 8009600:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009604:	b292      	uxth	r2, r2
 8009606:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800960a:	f84e 2b04 	str.w	r2, [lr], #4
 800960e:	1421      	asrs	r1, r4, #16
 8009610:	e7e0      	b.n	80095d4 <__mdiff+0xc8>
 8009612:	3f01      	subs	r7, #1
 8009614:	e7ea      	b.n	80095ec <__mdiff+0xe0>
 8009616:	bf00      	nop
 8009618:	0800c1ba 	.word	0x0800c1ba
 800961c:	0800c1cb 	.word	0x0800c1cb

08009620 <__d2b>:
 8009620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009624:	460f      	mov	r7, r1
 8009626:	2101      	movs	r1, #1
 8009628:	ec59 8b10 	vmov	r8, r9, d0
 800962c:	4616      	mov	r6, r2
 800962e:	f7ff fcd5 	bl	8008fdc <_Balloc>
 8009632:	4604      	mov	r4, r0
 8009634:	b930      	cbnz	r0, 8009644 <__d2b+0x24>
 8009636:	4602      	mov	r2, r0
 8009638:	4b24      	ldr	r3, [pc, #144]	; (80096cc <__d2b+0xac>)
 800963a:	4825      	ldr	r0, [pc, #148]	; (80096d0 <__d2b+0xb0>)
 800963c:	f240 310f 	movw	r1, #783	; 0x30f
 8009640:	f7fe fde8 	bl	8008214 <__assert_func>
 8009644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800964c:	bb2d      	cbnz	r5, 800969a <__d2b+0x7a>
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	f1b8 0300 	subs.w	r3, r8, #0
 8009654:	d026      	beq.n	80096a4 <__d2b+0x84>
 8009656:	4668      	mov	r0, sp
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	f7ff fd87 	bl	800916c <__lo0bits>
 800965e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009662:	b1e8      	cbz	r0, 80096a0 <__d2b+0x80>
 8009664:	f1c0 0320 	rsb	r3, r0, #32
 8009668:	fa02 f303 	lsl.w	r3, r2, r3
 800966c:	430b      	orrs	r3, r1
 800966e:	40c2      	lsrs	r2, r0
 8009670:	6163      	str	r3, [r4, #20]
 8009672:	9201      	str	r2, [sp, #4]
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	61a3      	str	r3, [r4, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bf14      	ite	ne
 800967c:	2202      	movne	r2, #2
 800967e:	2201      	moveq	r2, #1
 8009680:	6122      	str	r2, [r4, #16]
 8009682:	b1bd      	cbz	r5, 80096b4 <__d2b+0x94>
 8009684:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009688:	4405      	add	r5, r0
 800968a:	603d      	str	r5, [r7, #0]
 800968c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009690:	6030      	str	r0, [r6, #0]
 8009692:	4620      	mov	r0, r4
 8009694:	b003      	add	sp, #12
 8009696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800969a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800969e:	e7d6      	b.n	800964e <__d2b+0x2e>
 80096a0:	6161      	str	r1, [r4, #20]
 80096a2:	e7e7      	b.n	8009674 <__d2b+0x54>
 80096a4:	a801      	add	r0, sp, #4
 80096a6:	f7ff fd61 	bl	800916c <__lo0bits>
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	6163      	str	r3, [r4, #20]
 80096ae:	3020      	adds	r0, #32
 80096b0:	2201      	movs	r2, #1
 80096b2:	e7e5      	b.n	8009680 <__d2b+0x60>
 80096b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096bc:	6038      	str	r0, [r7, #0]
 80096be:	6918      	ldr	r0, [r3, #16]
 80096c0:	f7ff fd34 	bl	800912c <__hi0bits>
 80096c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096c8:	e7e2      	b.n	8009690 <__d2b+0x70>
 80096ca:	bf00      	nop
 80096cc:	0800c1ba 	.word	0x0800c1ba
 80096d0:	0800c1cb 	.word	0x0800c1cb

080096d4 <fiprintf>:
 80096d4:	b40e      	push	{r1, r2, r3}
 80096d6:	b503      	push	{r0, r1, lr}
 80096d8:	4601      	mov	r1, r0
 80096da:	ab03      	add	r3, sp, #12
 80096dc:	4805      	ldr	r0, [pc, #20]	; (80096f4 <fiprintf+0x20>)
 80096de:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e2:	6800      	ldr	r0, [r0, #0]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	f000 f86d 	bl	80097c4 <_vfiprintf_r>
 80096ea:	b002      	add	sp, #8
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	200006b0 	.word	0x200006b0

080096f8 <abort>:
 80096f8:	b508      	push	{r3, lr}
 80096fa:	2006      	movs	r0, #6
 80096fc:	f000 fa3a 	bl	8009b74 <raise>
 8009700:	2001      	movs	r0, #1
 8009702:	f7f7 fd5d 	bl	80011c0 <_exit>

08009706 <_calloc_r>:
 8009706:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009708:	fba1 2402 	umull	r2, r4, r1, r2
 800970c:	b94c      	cbnz	r4, 8009722 <_calloc_r+0x1c>
 800970e:	4611      	mov	r1, r2
 8009710:	9201      	str	r2, [sp, #4]
 8009712:	f7fd fdbd 	bl	8007290 <_malloc_r>
 8009716:	9a01      	ldr	r2, [sp, #4]
 8009718:	4605      	mov	r5, r0
 800971a:	b930      	cbnz	r0, 800972a <_calloc_r+0x24>
 800971c:	4628      	mov	r0, r5
 800971e:	b003      	add	sp, #12
 8009720:	bd30      	pop	{r4, r5, pc}
 8009722:	220c      	movs	r2, #12
 8009724:	6002      	str	r2, [r0, #0]
 8009726:	2500      	movs	r5, #0
 8009728:	e7f8      	b.n	800971c <_calloc_r+0x16>
 800972a:	4621      	mov	r1, r4
 800972c:	f7fe fcc3 	bl	80080b6 <memset>
 8009730:	e7f4      	b.n	800971c <_calloc_r+0x16>

08009732 <__ascii_mbtowc>:
 8009732:	b082      	sub	sp, #8
 8009734:	b901      	cbnz	r1, 8009738 <__ascii_mbtowc+0x6>
 8009736:	a901      	add	r1, sp, #4
 8009738:	b142      	cbz	r2, 800974c <__ascii_mbtowc+0x1a>
 800973a:	b14b      	cbz	r3, 8009750 <__ascii_mbtowc+0x1e>
 800973c:	7813      	ldrb	r3, [r2, #0]
 800973e:	600b      	str	r3, [r1, #0]
 8009740:	7812      	ldrb	r2, [r2, #0]
 8009742:	1e10      	subs	r0, r2, #0
 8009744:	bf18      	it	ne
 8009746:	2001      	movne	r0, #1
 8009748:	b002      	add	sp, #8
 800974a:	4770      	bx	lr
 800974c:	4610      	mov	r0, r2
 800974e:	e7fb      	b.n	8009748 <__ascii_mbtowc+0x16>
 8009750:	f06f 0001 	mvn.w	r0, #1
 8009754:	e7f8      	b.n	8009748 <__ascii_mbtowc+0x16>

08009756 <__ascii_wctomb>:
 8009756:	b149      	cbz	r1, 800976c <__ascii_wctomb+0x16>
 8009758:	2aff      	cmp	r2, #255	; 0xff
 800975a:	bf85      	ittet	hi
 800975c:	238a      	movhi	r3, #138	; 0x8a
 800975e:	6003      	strhi	r3, [r0, #0]
 8009760:	700a      	strbls	r2, [r1, #0]
 8009762:	f04f 30ff 	movhi.w	r0, #4294967295
 8009766:	bf98      	it	ls
 8009768:	2001      	movls	r0, #1
 800976a:	4770      	bx	lr
 800976c:	4608      	mov	r0, r1
 800976e:	4770      	bx	lr

08009770 <__sfputc_r>:
 8009770:	6893      	ldr	r3, [r2, #8]
 8009772:	3b01      	subs	r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	b410      	push	{r4}
 8009778:	6093      	str	r3, [r2, #8]
 800977a:	da08      	bge.n	800978e <__sfputc_r+0x1e>
 800977c:	6994      	ldr	r4, [r2, #24]
 800977e:	42a3      	cmp	r3, r4
 8009780:	db01      	blt.n	8009786 <__sfputc_r+0x16>
 8009782:	290a      	cmp	r1, #10
 8009784:	d103      	bne.n	800978e <__sfputc_r+0x1e>
 8009786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978a:	f000 b935 	b.w	80099f8 <__swbuf_r>
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	1c58      	adds	r0, r3, #1
 8009792:	6010      	str	r0, [r2, #0]
 8009794:	7019      	strb	r1, [r3, #0]
 8009796:	4608      	mov	r0, r1
 8009798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979c:	4770      	bx	lr

0800979e <__sfputs_r>:
 800979e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a0:	4606      	mov	r6, r0
 80097a2:	460f      	mov	r7, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	18d5      	adds	r5, r2, r3
 80097a8:	42ac      	cmp	r4, r5
 80097aa:	d101      	bne.n	80097b0 <__sfputs_r+0x12>
 80097ac:	2000      	movs	r0, #0
 80097ae:	e007      	b.n	80097c0 <__sfputs_r+0x22>
 80097b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b4:	463a      	mov	r2, r7
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff ffda 	bl	8009770 <__sfputc_r>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d1f3      	bne.n	80097a8 <__sfputs_r+0xa>
 80097c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097c4 <_vfiprintf_r>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	460d      	mov	r5, r1
 80097ca:	b09d      	sub	sp, #116	; 0x74
 80097cc:	4614      	mov	r4, r2
 80097ce:	4698      	mov	r8, r3
 80097d0:	4606      	mov	r6, r0
 80097d2:	b118      	cbz	r0, 80097dc <_vfiprintf_r+0x18>
 80097d4:	6a03      	ldr	r3, [r0, #32]
 80097d6:	b90b      	cbnz	r3, 80097dc <_vfiprintf_r+0x18>
 80097d8:	f7fe fbf4 	bl	8007fc4 <__sinit>
 80097dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097de:	07d9      	lsls	r1, r3, #31
 80097e0:	d405      	bmi.n	80097ee <_vfiprintf_r+0x2a>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	059a      	lsls	r2, r3, #22
 80097e6:	d402      	bmi.n	80097ee <_vfiprintf_r+0x2a>
 80097e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ea:	f7fe fd03 	bl	80081f4 <__retarget_lock_acquire_recursive>
 80097ee:	89ab      	ldrh	r3, [r5, #12]
 80097f0:	071b      	lsls	r3, r3, #28
 80097f2:	d501      	bpl.n	80097f8 <_vfiprintf_r+0x34>
 80097f4:	692b      	ldr	r3, [r5, #16]
 80097f6:	b99b      	cbnz	r3, 8009820 <_vfiprintf_r+0x5c>
 80097f8:	4629      	mov	r1, r5
 80097fa:	4630      	mov	r0, r6
 80097fc:	f000 f93a 	bl	8009a74 <__swsetup_r>
 8009800:	b170      	cbz	r0, 8009820 <_vfiprintf_r+0x5c>
 8009802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009804:	07dc      	lsls	r4, r3, #31
 8009806:	d504      	bpl.n	8009812 <_vfiprintf_r+0x4e>
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	b01d      	add	sp, #116	; 0x74
 800980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009812:	89ab      	ldrh	r3, [r5, #12]
 8009814:	0598      	lsls	r0, r3, #22
 8009816:	d4f7      	bmi.n	8009808 <_vfiprintf_r+0x44>
 8009818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800981a:	f7fe fcec 	bl	80081f6 <__retarget_lock_release_recursive>
 800981e:	e7f3      	b.n	8009808 <_vfiprintf_r+0x44>
 8009820:	2300      	movs	r3, #0
 8009822:	9309      	str	r3, [sp, #36]	; 0x24
 8009824:	2320      	movs	r3, #32
 8009826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800982a:	f8cd 800c 	str.w	r8, [sp, #12]
 800982e:	2330      	movs	r3, #48	; 0x30
 8009830:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099e4 <_vfiprintf_r+0x220>
 8009834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009838:	f04f 0901 	mov.w	r9, #1
 800983c:	4623      	mov	r3, r4
 800983e:	469a      	mov	sl, r3
 8009840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009844:	b10a      	cbz	r2, 800984a <_vfiprintf_r+0x86>
 8009846:	2a25      	cmp	r2, #37	; 0x25
 8009848:	d1f9      	bne.n	800983e <_vfiprintf_r+0x7a>
 800984a:	ebba 0b04 	subs.w	fp, sl, r4
 800984e:	d00b      	beq.n	8009868 <_vfiprintf_r+0xa4>
 8009850:	465b      	mov	r3, fp
 8009852:	4622      	mov	r2, r4
 8009854:	4629      	mov	r1, r5
 8009856:	4630      	mov	r0, r6
 8009858:	f7ff ffa1 	bl	800979e <__sfputs_r>
 800985c:	3001      	adds	r0, #1
 800985e:	f000 80a9 	beq.w	80099b4 <_vfiprintf_r+0x1f0>
 8009862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009864:	445a      	add	r2, fp
 8009866:	9209      	str	r2, [sp, #36]	; 0x24
 8009868:	f89a 3000 	ldrb.w	r3, [sl]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80a1 	beq.w	80099b4 <_vfiprintf_r+0x1f0>
 8009872:	2300      	movs	r3, #0
 8009874:	f04f 32ff 	mov.w	r2, #4294967295
 8009878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800987c:	f10a 0a01 	add.w	sl, sl, #1
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	9307      	str	r3, [sp, #28]
 8009884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009888:	931a      	str	r3, [sp, #104]	; 0x68
 800988a:	4654      	mov	r4, sl
 800988c:	2205      	movs	r2, #5
 800988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009892:	4854      	ldr	r0, [pc, #336]	; (80099e4 <_vfiprintf_r+0x220>)
 8009894:	f7f6 fc9c 	bl	80001d0 <memchr>
 8009898:	9a04      	ldr	r2, [sp, #16]
 800989a:	b9d8      	cbnz	r0, 80098d4 <_vfiprintf_r+0x110>
 800989c:	06d1      	lsls	r1, r2, #27
 800989e:	bf44      	itt	mi
 80098a0:	2320      	movmi	r3, #32
 80098a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a6:	0713      	lsls	r3, r2, #28
 80098a8:	bf44      	itt	mi
 80098aa:	232b      	movmi	r3, #43	; 0x2b
 80098ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b0:	f89a 3000 	ldrb.w	r3, [sl]
 80098b4:	2b2a      	cmp	r3, #42	; 0x2a
 80098b6:	d015      	beq.n	80098e4 <_vfiprintf_r+0x120>
 80098b8:	9a07      	ldr	r2, [sp, #28]
 80098ba:	4654      	mov	r4, sl
 80098bc:	2000      	movs	r0, #0
 80098be:	f04f 0c0a 	mov.w	ip, #10
 80098c2:	4621      	mov	r1, r4
 80098c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c8:	3b30      	subs	r3, #48	; 0x30
 80098ca:	2b09      	cmp	r3, #9
 80098cc:	d94d      	bls.n	800996a <_vfiprintf_r+0x1a6>
 80098ce:	b1b0      	cbz	r0, 80098fe <_vfiprintf_r+0x13a>
 80098d0:	9207      	str	r2, [sp, #28]
 80098d2:	e014      	b.n	80098fe <_vfiprintf_r+0x13a>
 80098d4:	eba0 0308 	sub.w	r3, r0, r8
 80098d8:	fa09 f303 	lsl.w	r3, r9, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	46a2      	mov	sl, r4
 80098e2:	e7d2      	b.n	800988a <_vfiprintf_r+0xc6>
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	1d19      	adds	r1, r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	9103      	str	r1, [sp, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bfbb      	ittet	lt
 80098f0:	425b      	neglt	r3, r3
 80098f2:	f042 0202 	orrlt.w	r2, r2, #2
 80098f6:	9307      	strge	r3, [sp, #28]
 80098f8:	9307      	strlt	r3, [sp, #28]
 80098fa:	bfb8      	it	lt
 80098fc:	9204      	strlt	r2, [sp, #16]
 80098fe:	7823      	ldrb	r3, [r4, #0]
 8009900:	2b2e      	cmp	r3, #46	; 0x2e
 8009902:	d10c      	bne.n	800991e <_vfiprintf_r+0x15a>
 8009904:	7863      	ldrb	r3, [r4, #1]
 8009906:	2b2a      	cmp	r3, #42	; 0x2a
 8009908:	d134      	bne.n	8009974 <_vfiprintf_r+0x1b0>
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	1d1a      	adds	r2, r3, #4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	9203      	str	r2, [sp, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	bfb8      	it	lt
 8009916:	f04f 33ff 	movlt.w	r3, #4294967295
 800991a:	3402      	adds	r4, #2
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099f4 <_vfiprintf_r+0x230>
 8009922:	7821      	ldrb	r1, [r4, #0]
 8009924:	2203      	movs	r2, #3
 8009926:	4650      	mov	r0, sl
 8009928:	f7f6 fc52 	bl	80001d0 <memchr>
 800992c:	b138      	cbz	r0, 800993e <_vfiprintf_r+0x17a>
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	eba0 000a 	sub.w	r0, r0, sl
 8009934:	2240      	movs	r2, #64	; 0x40
 8009936:	4082      	lsls	r2, r0
 8009938:	4313      	orrs	r3, r2
 800993a:	3401      	adds	r4, #1
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009942:	4829      	ldr	r0, [pc, #164]	; (80099e8 <_vfiprintf_r+0x224>)
 8009944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009948:	2206      	movs	r2, #6
 800994a:	f7f6 fc41 	bl	80001d0 <memchr>
 800994e:	2800      	cmp	r0, #0
 8009950:	d03f      	beq.n	80099d2 <_vfiprintf_r+0x20e>
 8009952:	4b26      	ldr	r3, [pc, #152]	; (80099ec <_vfiprintf_r+0x228>)
 8009954:	bb1b      	cbnz	r3, 800999e <_vfiprintf_r+0x1da>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	3307      	adds	r3, #7
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	3308      	adds	r3, #8
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009964:	443b      	add	r3, r7
 8009966:	9309      	str	r3, [sp, #36]	; 0x24
 8009968:	e768      	b.n	800983c <_vfiprintf_r+0x78>
 800996a:	fb0c 3202 	mla	r2, ip, r2, r3
 800996e:	460c      	mov	r4, r1
 8009970:	2001      	movs	r0, #1
 8009972:	e7a6      	b.n	80098c2 <_vfiprintf_r+0xfe>
 8009974:	2300      	movs	r3, #0
 8009976:	3401      	adds	r4, #1
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	4619      	mov	r1, r3
 800997c:	f04f 0c0a 	mov.w	ip, #10
 8009980:	4620      	mov	r0, r4
 8009982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009986:	3a30      	subs	r2, #48	; 0x30
 8009988:	2a09      	cmp	r2, #9
 800998a:	d903      	bls.n	8009994 <_vfiprintf_r+0x1d0>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0c6      	beq.n	800991e <_vfiprintf_r+0x15a>
 8009990:	9105      	str	r1, [sp, #20]
 8009992:	e7c4      	b.n	800991e <_vfiprintf_r+0x15a>
 8009994:	fb0c 2101 	mla	r1, ip, r1, r2
 8009998:	4604      	mov	r4, r0
 800999a:	2301      	movs	r3, #1
 800999c:	e7f0      	b.n	8009980 <_vfiprintf_r+0x1bc>
 800999e:	ab03      	add	r3, sp, #12
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	462a      	mov	r2, r5
 80099a4:	4b12      	ldr	r3, [pc, #72]	; (80099f0 <_vfiprintf_r+0x22c>)
 80099a6:	a904      	add	r1, sp, #16
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7fd fe09 	bl	80075c0 <_printf_float>
 80099ae:	4607      	mov	r7, r0
 80099b0:	1c78      	adds	r0, r7, #1
 80099b2:	d1d6      	bne.n	8009962 <_vfiprintf_r+0x19e>
 80099b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099b6:	07d9      	lsls	r1, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_vfiprintf_r+0x202>
 80099ba:	89ab      	ldrh	r3, [r5, #12]
 80099bc:	059a      	lsls	r2, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_vfiprintf_r+0x202>
 80099c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c2:	f7fe fc18 	bl	80081f6 <__retarget_lock_release_recursive>
 80099c6:	89ab      	ldrh	r3, [r5, #12]
 80099c8:	065b      	lsls	r3, r3, #25
 80099ca:	f53f af1d 	bmi.w	8009808 <_vfiprintf_r+0x44>
 80099ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d0:	e71c      	b.n	800980c <_vfiprintf_r+0x48>
 80099d2:	ab03      	add	r3, sp, #12
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	462a      	mov	r2, r5
 80099d8:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <_vfiprintf_r+0x22c>)
 80099da:	a904      	add	r1, sp, #16
 80099dc:	4630      	mov	r0, r6
 80099de:	f7fe f893 	bl	8007b08 <_printf_i>
 80099e2:	e7e4      	b.n	80099ae <_vfiprintf_r+0x1ea>
 80099e4:	0800c42f 	.word	0x0800c42f
 80099e8:	0800c439 	.word	0x0800c439
 80099ec:	080075c1 	.word	0x080075c1
 80099f0:	0800979f 	.word	0x0800979f
 80099f4:	0800c435 	.word	0x0800c435

080099f8 <__swbuf_r>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	460e      	mov	r6, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	4605      	mov	r5, r0
 8009a00:	b118      	cbz	r0, 8009a0a <__swbuf_r+0x12>
 8009a02:	6a03      	ldr	r3, [r0, #32]
 8009a04:	b90b      	cbnz	r3, 8009a0a <__swbuf_r+0x12>
 8009a06:	f7fe fadd 	bl	8007fc4 <__sinit>
 8009a0a:	69a3      	ldr	r3, [r4, #24]
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	071a      	lsls	r2, r3, #28
 8009a12:	d525      	bpl.n	8009a60 <__swbuf_r+0x68>
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	b31b      	cbz	r3, 8009a60 <__swbuf_r+0x68>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	6922      	ldr	r2, [r4, #16]
 8009a1c:	1a98      	subs	r0, r3, r2
 8009a1e:	6963      	ldr	r3, [r4, #20]
 8009a20:	b2f6      	uxtb	r6, r6
 8009a22:	4283      	cmp	r3, r0
 8009a24:	4637      	mov	r7, r6
 8009a26:	dc04      	bgt.n	8009a32 <__swbuf_r+0x3a>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7fe fa14 	bl	8007e58 <_fflush_r>
 8009a30:	b9e0      	cbnz	r0, 8009a6c <__swbuf_r+0x74>
 8009a32:	68a3      	ldr	r3, [r4, #8]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	60a3      	str	r3, [r4, #8]
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	701e      	strb	r6, [r3, #0]
 8009a40:	6962      	ldr	r2, [r4, #20]
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d004      	beq.n	8009a52 <__swbuf_r+0x5a>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	07db      	lsls	r3, r3, #31
 8009a4c:	d506      	bpl.n	8009a5c <__swbuf_r+0x64>
 8009a4e:	2e0a      	cmp	r6, #10
 8009a50:	d104      	bne.n	8009a5c <__swbuf_r+0x64>
 8009a52:	4621      	mov	r1, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f7fe f9ff 	bl	8007e58 <_fflush_r>
 8009a5a:	b938      	cbnz	r0, 8009a6c <__swbuf_r+0x74>
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a60:	4621      	mov	r1, r4
 8009a62:	4628      	mov	r0, r5
 8009a64:	f000 f806 	bl	8009a74 <__swsetup_r>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d0d5      	beq.n	8009a18 <__swbuf_r+0x20>
 8009a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a70:	e7f4      	b.n	8009a5c <__swbuf_r+0x64>
	...

08009a74 <__swsetup_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <__swsetup_r+0xac>)
 8009a78:	4605      	mov	r5, r0
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	b118      	cbz	r0, 8009a88 <__swsetup_r+0x14>
 8009a80:	6a03      	ldr	r3, [r0, #32]
 8009a82:	b90b      	cbnz	r3, 8009a88 <__swsetup_r+0x14>
 8009a84:	f7fe fa9e 	bl	8007fc4 <__sinit>
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a8e:	0718      	lsls	r0, r3, #28
 8009a90:	d422      	bmi.n	8009ad8 <__swsetup_r+0x64>
 8009a92:	06d9      	lsls	r1, r3, #27
 8009a94:	d407      	bmi.n	8009aa6 <__swsetup_r+0x32>
 8009a96:	2309      	movs	r3, #9
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a9e:	81a3      	strh	r3, [r4, #12]
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	e034      	b.n	8009b10 <__swsetup_r+0x9c>
 8009aa6:	0758      	lsls	r0, r3, #29
 8009aa8:	d512      	bpl.n	8009ad0 <__swsetup_r+0x5c>
 8009aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aac:	b141      	cbz	r1, 8009ac0 <__swsetup_r+0x4c>
 8009aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	d002      	beq.n	8009abc <__swsetup_r+0x48>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f7ff fa44 	bl	8008f44 <_free_r>
 8009abc:	2300      	movs	r3, #0
 8009abe:	6363      	str	r3, [r4, #52]	; 0x34
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	6063      	str	r3, [r4, #4]
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	f043 0308 	orr.w	r3, r3, #8
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	b94b      	cbnz	r3, 8009af0 <__swsetup_r+0x7c>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ae6:	d003      	beq.n	8009af0 <__swsetup_r+0x7c>
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 f884 	bl	8009bf8 <__smakebuf_r>
 8009af0:	89a0      	ldrh	r0, [r4, #12]
 8009af2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009af6:	f010 0301 	ands.w	r3, r0, #1
 8009afa:	d00a      	beq.n	8009b12 <__swsetup_r+0x9e>
 8009afc:	2300      	movs	r3, #0
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	6963      	ldr	r3, [r4, #20]
 8009b02:	425b      	negs	r3, r3
 8009b04:	61a3      	str	r3, [r4, #24]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	b943      	cbnz	r3, 8009b1c <__swsetup_r+0xa8>
 8009b0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b0e:	d1c4      	bne.n	8009a9a <__swsetup_r+0x26>
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	0781      	lsls	r1, r0, #30
 8009b14:	bf58      	it	pl
 8009b16:	6963      	ldrpl	r3, [r4, #20]
 8009b18:	60a3      	str	r3, [r4, #8]
 8009b1a:	e7f4      	b.n	8009b06 <__swsetup_r+0x92>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e7f7      	b.n	8009b10 <__swsetup_r+0x9c>
 8009b20:	200006b0 	.word	0x200006b0

08009b24 <_raise_r>:
 8009b24:	291f      	cmp	r1, #31
 8009b26:	b538      	push	{r3, r4, r5, lr}
 8009b28:	4604      	mov	r4, r0
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	d904      	bls.n	8009b38 <_raise_r+0x14>
 8009b2e:	2316      	movs	r3, #22
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	f04f 30ff 	mov.w	r0, #4294967295
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b3a:	b112      	cbz	r2, 8009b42 <_raise_r+0x1e>
 8009b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b40:	b94b      	cbnz	r3, 8009b56 <_raise_r+0x32>
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f830 	bl	8009ba8 <_getpid_r>
 8009b48:	462a      	mov	r2, r5
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b52:	f000 b817 	b.w	8009b84 <_kill_r>
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d00a      	beq.n	8009b70 <_raise_r+0x4c>
 8009b5a:	1c59      	adds	r1, r3, #1
 8009b5c:	d103      	bne.n	8009b66 <_raise_r+0x42>
 8009b5e:	2316      	movs	r3, #22
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	2001      	movs	r0, #1
 8009b64:	e7e7      	b.n	8009b36 <_raise_r+0x12>
 8009b66:	2400      	movs	r4, #0
 8009b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	4798      	blx	r3
 8009b70:	2000      	movs	r0, #0
 8009b72:	e7e0      	b.n	8009b36 <_raise_r+0x12>

08009b74 <raise>:
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <raise+0xc>)
 8009b76:	4601      	mov	r1, r0
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f7ff bfd3 	b.w	8009b24 <_raise_r>
 8009b7e:	bf00      	nop
 8009b80:	200006b0 	.word	0x200006b0

08009b84 <_kill_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4d07      	ldr	r5, [pc, #28]	; (8009ba4 <_kill_r+0x20>)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	4611      	mov	r1, r2
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	f7f7 fb0d 	bl	80011b0 <_kill>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	d102      	bne.n	8009ba0 <_kill_r+0x1c>
 8009b9a:	682b      	ldr	r3, [r5, #0]
 8009b9c:	b103      	cbz	r3, 8009ba0 <_kill_r+0x1c>
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	bd38      	pop	{r3, r4, r5, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000c0c 	.word	0x20000c0c

08009ba8 <_getpid_r>:
 8009ba8:	f7f7 bb00 	b.w	80011ac <_getpid>

08009bac <__swhatbuf_r>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	460c      	mov	r4, r1
 8009bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	b096      	sub	sp, #88	; 0x58
 8009bb8:	4615      	mov	r5, r2
 8009bba:	461e      	mov	r6, r3
 8009bbc:	da0d      	bge.n	8009bda <__swhatbuf_r+0x2e>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009bc4:	f04f 0100 	mov.w	r1, #0
 8009bc8:	bf0c      	ite	eq
 8009bca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009bce:	2340      	movne	r3, #64	; 0x40
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	6031      	str	r1, [r6, #0]
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	b016      	add	sp, #88	; 0x58
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	466a      	mov	r2, sp
 8009bdc:	f000 f848 	bl	8009c70 <_fstat_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dbec      	blt.n	8009bbe <__swhatbuf_r+0x12>
 8009be4:	9901      	ldr	r1, [sp, #4]
 8009be6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009bea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009bee:	4259      	negs	r1, r3
 8009bf0:	4159      	adcs	r1, r3
 8009bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf6:	e7eb      	b.n	8009bd0 <__swhatbuf_r+0x24>

08009bf8 <__smakebuf_r>:
 8009bf8:	898b      	ldrh	r3, [r1, #12]
 8009bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bfc:	079d      	lsls	r5, r3, #30
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	d507      	bpl.n	8009c14 <__smakebuf_r+0x1c>
 8009c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	6123      	str	r3, [r4, #16]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	6163      	str	r3, [r4, #20]
 8009c10:	b002      	add	sp, #8
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	ab01      	add	r3, sp, #4
 8009c16:	466a      	mov	r2, sp
 8009c18:	f7ff ffc8 	bl	8009bac <__swhatbuf_r>
 8009c1c:	9900      	ldr	r1, [sp, #0]
 8009c1e:	4605      	mov	r5, r0
 8009c20:	4630      	mov	r0, r6
 8009c22:	f7fd fb35 	bl	8007290 <_malloc_r>
 8009c26:	b948      	cbnz	r0, 8009c3c <__smakebuf_r+0x44>
 8009c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d4ef      	bmi.n	8009c10 <__smakebuf_r+0x18>
 8009c30:	f023 0303 	bic.w	r3, r3, #3
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	e7e3      	b.n	8009c04 <__smakebuf_r+0xc>
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	6020      	str	r0, [r4, #0]
 8009c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	6163      	str	r3, [r4, #20]
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	6120      	str	r0, [r4, #16]
 8009c4e:	b15b      	cbz	r3, 8009c68 <__smakebuf_r+0x70>
 8009c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c54:	4630      	mov	r0, r6
 8009c56:	f000 f81d 	bl	8009c94 <_isatty_r>
 8009c5a:	b128      	cbz	r0, 8009c68 <__smakebuf_r+0x70>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	f043 0301 	orr.w	r3, r3, #1
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	431d      	orrs	r5, r3
 8009c6c:	81a5      	strh	r5, [r4, #12]
 8009c6e:	e7cf      	b.n	8009c10 <__smakebuf_r+0x18>

08009c70 <_fstat_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d07      	ldr	r5, [pc, #28]	; (8009c90 <_fstat_r+0x20>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	f7f7 fab6 	bl	80011ee <_fstat>
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	d102      	bne.n	8009c8c <_fstat_r+0x1c>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	b103      	cbz	r3, 8009c8c <_fstat_r+0x1c>
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000c0c 	.word	0x20000c0c

08009c94 <_isatty_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4d06      	ldr	r5, [pc, #24]	; (8009cb0 <_isatty_r+0x1c>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	602b      	str	r3, [r5, #0]
 8009ca0:	f7f7 faaa 	bl	80011f8 <_isatty>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_isatty_r+0x1a>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_isatty_r+0x1a>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	20000c0c 	.word	0x20000c0c

08009cb4 <expf>:
 8009cb4:	b508      	push	{r3, lr}
 8009cb6:	ed2d 8b02 	vpush	{d8}
 8009cba:	eef0 8a40 	vmov.f32	s17, s0
 8009cbe:	f000 f85f 	bl	8009d80 <__ieee754_expf>
 8009cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8009cc6:	eeb0 0a68 	vmov.f32	s0, s17
 8009cca:	f000 f829 	bl	8009d20 <finitef>
 8009cce:	b160      	cbz	r0, 8009cea <expf+0x36>
 8009cd0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009d10 <expf+0x5c>
 8009cd4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	dd0a      	ble.n	8009cf4 <expf+0x40>
 8009cde:	f7fe fa5f 	bl	80081a0 <__errno>
 8009ce2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009d14 <expf+0x60>
 8009ce6:	2322      	movs	r3, #34	; 0x22
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	eeb0 0a48 	vmov.f32	s0, s16
 8009cee:	ecbd 8b02 	vpop	{d8}
 8009cf2:	bd08      	pop	{r3, pc}
 8009cf4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009d18 <expf+0x64>
 8009cf8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d00:	d5f3      	bpl.n	8009cea <expf+0x36>
 8009d02:	f7fe fa4d 	bl	80081a0 <__errno>
 8009d06:	2322      	movs	r3, #34	; 0x22
 8009d08:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009d1c <expf+0x68>
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	e7ec      	b.n	8009cea <expf+0x36>
 8009d10:	42b17217 	.word	0x42b17217
 8009d14:	7f800000 	.word	0x7f800000
 8009d18:	c2cff1b5 	.word	0xc2cff1b5
 8009d1c:	00000000 	.word	0x00000000

08009d20 <finitef>:
 8009d20:	b082      	sub	sp, #8
 8009d22:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d26:	9801      	ldr	r0, [sp, #4]
 8009d28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009d2c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009d30:	bfac      	ite	ge
 8009d32:	2000      	movge	r0, #0
 8009d34:	2001      	movlt	r0, #1
 8009d36:	b002      	add	sp, #8
 8009d38:	4770      	bx	lr

08009d3a <with_errnof>:
 8009d3a:	b513      	push	{r0, r1, r4, lr}
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d42:	f7fe fa2d 	bl	80081a0 <__errno>
 8009d46:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009d4a:	6004      	str	r4, [r0, #0]
 8009d4c:	b002      	add	sp, #8
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <xflowf>:
 8009d50:	b130      	cbz	r0, 8009d60 <xflowf+0x10>
 8009d52:	eef1 7a40 	vneg.f32	s15, s0
 8009d56:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d5a:	2022      	movs	r0, #34	; 0x22
 8009d5c:	f7ff bfed 	b.w	8009d3a <with_errnof>
 8009d60:	eef0 7a40 	vmov.f32	s15, s0
 8009d64:	e7f7      	b.n	8009d56 <xflowf+0x6>
	...

08009d68 <__math_uflowf>:
 8009d68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d70 <__math_uflowf+0x8>
 8009d6c:	f7ff bff0 	b.w	8009d50 <xflowf>
 8009d70:	10000000 	.word	0x10000000

08009d74 <__math_oflowf>:
 8009d74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d7c <__math_oflowf+0x8>
 8009d78:	f7ff bfea 	b.w	8009d50 <xflowf>
 8009d7c:	70000000 	.word	0x70000000

08009d80 <__ieee754_expf>:
 8009d80:	ee10 2a10 	vmov	r2, s0
 8009d84:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009d88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d8c:	d902      	bls.n	8009d94 <__ieee754_expf+0x14>
 8009d8e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d92:	4770      	bx	lr
 8009d94:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009d98:	d106      	bne.n	8009da8 <__ieee754_expf+0x28>
 8009d9a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009ed4 <__ieee754_expf+0x154>
 8009d9e:	2900      	cmp	r1, #0
 8009da0:	bf18      	it	ne
 8009da2:	eeb0 0a67 	vmovne.f32	s0, s15
 8009da6:	4770      	bx	lr
 8009da8:	484b      	ldr	r0, [pc, #300]	; (8009ed8 <__ieee754_expf+0x158>)
 8009daa:	4282      	cmp	r2, r0
 8009dac:	dd02      	ble.n	8009db4 <__ieee754_expf+0x34>
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7ff bfe0 	b.w	8009d74 <__math_oflowf>
 8009db4:	2a00      	cmp	r2, #0
 8009db6:	da05      	bge.n	8009dc4 <__ieee754_expf+0x44>
 8009db8:	4a48      	ldr	r2, [pc, #288]	; (8009edc <__ieee754_expf+0x15c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d902      	bls.n	8009dc4 <__ieee754_expf+0x44>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	f7ff bfd2 	b.w	8009d68 <__math_uflowf>
 8009dc4:	4a46      	ldr	r2, [pc, #280]	; (8009ee0 <__ieee754_expf+0x160>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009dcc:	d952      	bls.n	8009e74 <__ieee754_expf+0xf4>
 8009dce:	4a45      	ldr	r2, [pc, #276]	; (8009ee4 <__ieee754_expf+0x164>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009dd6:	d834      	bhi.n	8009e42 <__ieee754_expf+0xc2>
 8009dd8:	4b43      	ldr	r3, [pc, #268]	; (8009ee8 <__ieee754_expf+0x168>)
 8009dda:	4413      	add	r3, r2
 8009ddc:	ed93 7a00 	vldr	s14, [r3]
 8009de0:	4b42      	ldr	r3, [pc, #264]	; (8009eec <__ieee754_expf+0x16c>)
 8009de2:	4413      	add	r3, r2
 8009de4:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009de8:	f1c1 0201 	rsb	r2, r1, #1
 8009dec:	edd3 7a00 	vldr	s15, [r3]
 8009df0:	1a52      	subs	r2, r2, r1
 8009df2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009df6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009dfa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009ef0 <__ieee754_expf+0x170>
 8009dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ef4 <__ieee754_expf+0x174>
 8009e02:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009e06:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009ef8 <__ieee754_expf+0x178>
 8009e0a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009e0e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009efc <__ieee754_expf+0x17c>
 8009e12:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009e16:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009f00 <__ieee754_expf+0x180>
 8009e1a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009e1e:	eef0 6a40 	vmov.f32	s13, s0
 8009e22:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009e26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009e2a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009e2e:	bb92      	cbnz	r2, 8009e96 <__ieee754_expf+0x116>
 8009e30:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009e34:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009e38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009e3c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009e40:	4770      	bx	lr
 8009e42:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <__ieee754_expf+0x184>)
 8009e44:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009f08 <__ieee754_expf+0x188>
 8009e48:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009f0c <__ieee754_expf+0x18c>
 8009e4c:	4413      	add	r3, r2
 8009e4e:	edd3 7a00 	vldr	s15, [r3]
 8009e52:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009e56:	eeb0 7a40 	vmov.f32	s14, s0
 8009e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e5e:	ee17 2a90 	vmov	r2, s15
 8009e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e66:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009e6a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009f10 <__ieee754_expf+0x190>
 8009e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e72:	e7be      	b.n	8009df2 <__ieee754_expf+0x72>
 8009e74:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009e78:	d20b      	bcs.n	8009e92 <__ieee754_expf+0x112>
 8009e7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009f14 <__ieee754_expf+0x194>
 8009e7e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009e82:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8a:	dd02      	ble.n	8009e92 <__ieee754_expf+0x112>
 8009e8c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009e90:	4770      	bx	lr
 8009e92:	2200      	movs	r2, #0
 8009e94:	e7af      	b.n	8009df6 <__ieee754_expf+0x76>
 8009e96:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009e9a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009e9e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009ea2:	bfb8      	it	lt
 8009ea4:	3264      	addlt	r2, #100	; 0x64
 8009ea6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009eae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009eb2:	ee17 3a90 	vmov	r3, s15
 8009eb6:	bfab      	itete	ge
 8009eb8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009ebc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009ec0:	ee00 3a10 	vmovge	s0, r3
 8009ec4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009f18 <__ieee754_expf+0x198>
 8009ec8:	bfbc      	itt	lt
 8009eca:	ee00 3a10 	vmovlt	s0, r3
 8009ece:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009ed2:	4770      	bx	lr
 8009ed4:	00000000 	.word	0x00000000
 8009ed8:	42b17217 	.word	0x42b17217
 8009edc:	42cff1b5 	.word	0x42cff1b5
 8009ee0:	3eb17218 	.word	0x3eb17218
 8009ee4:	3f851591 	.word	0x3f851591
 8009ee8:	0800c448 	.word	0x0800c448
 8009eec:	0800c450 	.word	0x0800c450
 8009ef0:	3331bb4c 	.word	0x3331bb4c
 8009ef4:	b5ddea0e 	.word	0xb5ddea0e
 8009ef8:	388ab355 	.word	0x388ab355
 8009efc:	bb360b61 	.word	0xbb360b61
 8009f00:	3e2aaaab 	.word	0x3e2aaaab
 8009f04:	0800c440 	.word	0x0800c440
 8009f08:	3fb8aa3b 	.word	0x3fb8aa3b
 8009f0c:	3f317180 	.word	0x3f317180
 8009f10:	3717f7d1 	.word	0x3717f7d1
 8009f14:	7149f2ca 	.word	0x7149f2ca
 8009f18:	0d800000 	.word	0x0d800000

08009f1c <_init>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr

08009f28 <_fini>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr
