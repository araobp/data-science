
RockPaperScissors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       000000ec  20000000  20000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .AI_RAM2      00000000  10000000  10000000  000300ec  2**0
                  CONTENTS
  2 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00008360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000014e8  08008500  08008500  00018500  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080099e8  080099e8  000300ec  2**0
                  CONTENTS
  6 .ARM          00000008  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080099f0  080099f0  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000724  200000ec  080099f8  000200ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000304  20000810  0800a11c  00020810  2**2
                  ALLOC
 12 ._user_heap_stack 00001004  20000b14  0800a11c  00020b14  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00013239  00000000  00000000  000301af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000365a  00000000  00000000  000433e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00006634  00000000  00000000  00046a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b38  00000000  00000000  0004d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000009df  00000000  00000000  0004dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000298e2  00000000  00000000  0004e58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00014736  00000000  00000000  00077e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f89d8  00000000  00000000  0008c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00002d8c  00000000  00000000  00184f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000072  00000000  00000000  00187d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000810 	.word	0x20000810
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084d8 	.word	0x080084d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000814 	.word	0x20000814
 80001cc:	080084d8 	.word	0x080084d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b98e 	b.w	8000edc <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f824 	bl	8000c14 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2ulz>:
 8000bd8:	b5d0      	push	{r4, r6, r7, lr}
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__aeabi_d2ulz+0x34>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fd09 	bl	80005f8 <__aeabi_dmul>
 8000be6:	f000 f97b 	bl	8000ee0 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fc8a 	bl	8000504 <__aeabi_ui2d>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <__aeabi_d2ulz+0x38>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f7ff fd00 	bl	80005f8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fb42 	bl	8000288 <__aeabi_dsub>
 8000c04:	f000 f96c 	bl	8000ee0 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2uiz>:
 8000ee0:	004a      	lsls	r2, r1, #1
 8000ee2:	d211      	bcs.n	8000f08 <__aeabi_d2uiz+0x28>
 8000ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ee8:	d211      	bcs.n	8000f0e <__aeabi_d2uiz+0x2e>
 8000eea:	d50d      	bpl.n	8000f08 <__aeabi_d2uiz+0x28>
 8000eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ef4:	d40e      	bmi.n	8000f14 <__aeabi_d2uiz+0x34>
 8000ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f02:	fa23 f002 	lsr.w	r0, r3, r2
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f12:	d102      	bne.n	8000f1a <__aeabi_d2uiz+0x3a>
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <rps_init>:
#include "ai_device_adaptor.h"

ai_handle handle;
const char *nn_name;

void rps_init(void) {
 8000f20:	b538      	push	{r3, r4, r5, lr}
  MX_UARTx_Init();
 8000f22:	f000 f8d1 	bl	80010c8 <MX_USART2_UART_Init>

  LC_PRINT("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <rps_init+0x48>)
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f28:	4d10      	ldr	r5, [pc, #64]	; (8000f6c <rps_init+0x4c>)
  LC_PRINT("[NETWORK FIND] NN_NAME: %s\n", nn_name);

  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f2a:	4c11      	ldr	r4, [pc, #68]	; (8000f70 <rps_init+0x50>)
  LC_PRINT("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f2c:	f001 fdc2 	bl	8002ab4 <lc_print>
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f30:	2100      	movs	r1, #0
 8000f32:	4608      	mov	r0, r1
 8000f34:	f001 fe1a 	bl	8002b6c <ai_mnetwork_find>
 8000f38:	4601      	mov	r1, r0
 8000f3a:	6028      	str	r0, [r5, #0]
  LC_PRINT("[NETWORK FIND] NN_NAME: %s\n", nn_name);
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <rps_init+0x54>)
 8000f3e:	f001 fdb9 	bl	8002ab4 <lc_print>
  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f42:	4621      	mov	r1, r4
 8000f44:	6828      	ldr	r0, [r5, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f001 fe1e 	bl	8002b88 <ai_mnetwork_create>
  LC_PRINT("[NETWORK CREATION] err.type: 0x%02X, err.code: 0x%02X\n", ai_err.type, ai_err.code);
 8000f4c:	b2c1      	uxtb	r1, r0
 8000f4e:	0a02      	lsrs	r2, r0, #8
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <rps_init+0x58>)
 8000f52:	f001 fdaf 	bl	8002ab4 <lc_print>

  bool success = ai_mnetwork_init(handle);
 8000f56:	6820      	ldr	r0, [r4, #0]
 8000f58:	f001 fe40 	bl	8002bdc <ai_mnetwork_init>
  LC_PRINT("[NETWORK INITIALIZATION] %d\n", success);  // 0: Failure, 1; Success

}
 8000f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  bool success = ai_mnetwork_init(handle);
 8000f60:	4601      	mov	r1, r0
  LC_PRINT("[NETWORK INITIALIZATION] %d\n", success);  // 0: Failure, 1; Success
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <rps_init+0x5c>)
 8000f64:	f001 bda6 	b.w	8002ab4 <lc_print>
 8000f68:	08008520 	.word	0x08008520
 8000f6c:	20000830 	.word	0x20000830
 8000f70:	2000082c 	.word	0x2000082c
 8000f74:	08008541 	.word	0x08008541
 8000f78:	0800855d 	.word	0x0800855d
 8000f7c:	08008594 	.word	0x08008594

08000f80 <rps_process>:

void rps_process(void) {
  ai_buffer ai_input[AI_MNETWORK_IN_NUM];
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];
}
 8000f80:	4770      	bx	lr

08000f82 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f82:	b500      	push	{lr}
 8000f84:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	2244      	movs	r2, #68	; 0x44
 8000f88:	2100      	movs	r1, #0
 8000f8a:	a805      	add	r0, sp, #20
 8000f8c:	f005 fb87 	bl	800669e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	2214      	movs	r2, #20
 8000f92:	2100      	movs	r1, #0
 8000f94:	4668      	mov	r0, sp
 8000f96:	f005 fb82 	bl	800669e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f9e:	f000 fba3 	bl	80016e8 <HAL_PWREx_ControlVoltageScaling>
 8000fa2:	b108      	cbz	r0, 8000fa8 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa8:	2210      	movs	r2, #16
 8000faa:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fae:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fb4:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb6:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fb8:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fbc:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc4:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fca:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f000 fc52 	bl	8001874 <HAL_RCC_OscConfig>
 8000fd0:	b108      	cbz	r0, 8000fd6 <SystemClock_Config+0x54>
 8000fd2:	b672      	cpsid	i
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	220f      	movs	r2, #15
 8000fdc:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe8:	f000 fec4 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000fec:	b108      	cbz	r0, 8000ff2 <SystemClock_Config+0x70>
 8000fee:	b672      	cpsid	i
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <SystemClock_Config+0x6e>
}
 8000ff2:	b017      	add	sp, #92	; 0x5c
 8000ff4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ff8 <main>:
{
 8000ff8:	b500      	push	{lr}
 8000ffa:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000ffc:	f000 f9aa 	bl	8001354 <HAL_Init>
  SystemClock_Config();
 8001000:	f7ff ffbf 	bl	8000f82 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	2214      	movs	r2, #20
 8001006:	2100      	movs	r1, #0
 8001008:	eb0d 0002 	add.w	r0, sp, r2
 800100c:	f005 fb47 	bl	800669e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <main+0xc0>)
 8001012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001014:	f042 0204 	orr.w	r2, r2, #4
 8001018:	64da      	str	r2, [r3, #76]	; 0x4c
 800101a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101c:	f002 0204 	and.w	r2, r2, #4
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102a:	64da      	str	r2, [r3, #76]	; 0x4c
 800102c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001032:	9202      	str	r2, [sp, #8]
 8001034:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001038:	f042 0201 	orr.w	r2, r2, #1
 800103c:	64da      	str	r2, [r3, #76]	; 0x4c
 800103e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001040:	f002 0201 	and.w	r2, r2, #1
 8001044:	9203      	str	r2, [sp, #12]
 8001046:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800104a:	f042 0202 	orr.w	r2, r2, #2
 800104e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2120      	movs	r1, #32
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001064:	f000 fb32 	bl	80016cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <main+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001074:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001076:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107c:	f000 fa48 	bl	8001510 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001090:	f000 fa3e 	bl	8001510 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <main+0xc8>)
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <main+0xcc>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001098:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800109a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 800109e:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010a0:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010a2:	f000 f9d7 	bl	8001454 <HAL_CRC_Init>
 80010a6:	b108      	cbz	r0, 80010ac <main+0xb4>
 80010a8:	b672      	cpsid	i
  while (1)
 80010aa:	e7fe      	b.n	80010aa <main+0xb2>
  rps_init();
 80010ac:	f7ff ff38 	bl	8000f20 <rps_init>
    rps_process();
 80010b0:	f7ff ff66 	bl	8000f80 <rps_process>
  while (1)
 80010b4:	e7fc      	b.n	80010b0 <main+0xb8>
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000800 	.word	0x48000800
 80010c0:	20000834 	.word	0x20000834
 80010c4:	40023000 	.word	0x40023000

080010c8 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <MX_USART2_UART_Init+0x34>)
{
 80010cc:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80010ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010d2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e6:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ea:	f001 fc7e 	bl	80029ea <HAL_UART_Init>
 80010ee:	b108      	cbz	r0, 80010f4 <MX_USART2_UART_Init+0x2c>
 80010f0:	b672      	cpsid	i
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <MX_USART2_UART_Init+0x2a>
}
 80010f4:	bd08      	pop	{r3, pc}
 80010f6:	bf00      	nop
 80010f8:	20000858 	.word	0x20000858
 80010fc:	40004400 	.word	0x40004400

08001100 <Error_Handler>:
 8001100:	b672      	cpsid	i
  while (1)
 8001102:	e7fe      	b.n	8001102 <Error_Handler+0x2>

08001104 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_MspInit+0x2c>)
 8001106:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	661a      	str	r2, [r3, #96]	; 0x60
 800110e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001110:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	f002 0201 	and.w	r2, r2, #1
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800111c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001120:	659a      	str	r2, [r3, #88]	; 0x58
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112c:	b002      	add	sp, #8
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001134:	6802      	ldr	r2, [r0, #0]
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_CRC_MspInit+0x24>)
 8001138:	429a      	cmp	r2, r3
{
 800113a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800113c:	d10a      	bne.n	8001154 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800113e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001142:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001148:	649a      	str	r2, [r3, #72]	; 0x48
 800114a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001154:	b002      	add	sp, #8
 8001156:	4770      	bx	lr
 8001158:	40023000 	.word	0x40023000

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	b0aa      	sub	sp, #168	; 0xa8
 8001160:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	2214      	movs	r2, #20
 8001164:	2100      	movs	r1, #0
 8001166:	a803      	add	r0, sp, #12
 8001168:	f005 fa99 	bl	800669e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	2288      	movs	r2, #136	; 0x88
 800116e:	2100      	movs	r1, #0
 8001170:	a808      	add	r0, sp, #32
 8001172:	f005 fa94 	bl	800669e <memset>
  if(huart->Instance==USART2)
 8001176:	6822      	ldr	r2, [r4, #0]
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_UART_MspInit+0x94>)
 800117a:	429a      	cmp	r2, r3
 800117c:	d135      	bne.n	80011ea <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800117e:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001182:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f000 ffc6 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	b108      	cbz	r0, 800118e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800118a:	f7ff ffb9 	bl	8001100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0x98>)
 8001190:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001192:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001196:	659a      	str	r2, [r3, #88]	; 0x58
 8001198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800119a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800119e:	9201      	str	r2, [sp, #4]
 80011a0:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2602      	movs	r6, #2
 80011b6:	2304      	movs	r3, #4
 80011b8:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2503      	movs	r5, #3
 80011be:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c0:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80011c2:	a903      	add	r1, sp, #12
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011cc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f000 f99f 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 80011d2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80011d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f000 f993 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ea:	b02a      	add	sp, #168	; 0xa8
 80011ec:	bd70      	pop	{r4, r5, r6, pc}
 80011ee:	bf00      	nop
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40021000 	.word	0x40021000

080011f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler>

080011fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler>

080011fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler>

080011fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler>

08001200 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler>

08001202 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 b8ba 	b.w	8001380 <HAL_IncTick>

0800120c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800120c:	2001      	movs	r0, #1
 800120e:	4770      	bx	lr

08001210 <_kill>:

int _kill(int pid, int sig)
{
 8001210:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001212:	f005 fab9 	bl	8006788 <__errno>
 8001216:	2316      	movs	r3, #22
 8001218:	6003      	str	r3, [r0, #0]
  return -1;
}
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	bd08      	pop	{r3, pc}

08001220 <_exit>:

void _exit (int status)
{
 8001220:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001222:	f005 fab1 	bl	8006788 <__errno>
 8001226:	2316      	movs	r3, #22
 8001228:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800122a:	e7fe      	b.n	800122a <_exit+0xa>

0800122c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	460d      	mov	r5, r1
 8001230:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	460e      	mov	r6, r1
 8001234:	1b73      	subs	r3, r6, r5
 8001236:	429c      	cmp	r4, r3
 8001238:	dc01      	bgt.n	800123e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800123a:	4620      	mov	r0, r4
 800123c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	e7f5      	b.n	8001234 <_read+0x8>

08001248 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001254:	2000      	movs	r0, #0
 8001256:	4770      	bx	lr

08001258 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001258:	2001      	movs	r0, #1
 800125a:	4770      	bx	lr

0800125c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800125c:	2000      	movs	r0, #0
 800125e:	4770      	bx	lr

08001260 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <_sbrk+0x30>)
 8001262:	6811      	ldr	r1, [r2, #0]
{
 8001264:	b510      	push	{r4, lr}
 8001266:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001268:	b909      	cbnz	r1, 800126e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800126a:	490a      	ldr	r1, [pc, #40]	; (8001294 <_sbrk+0x34>)
 800126c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	6810      	ldr	r0, [r2, #0]
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <_sbrk+0x38>)
 8001272:	4c0a      	ldr	r4, [pc, #40]	; (800129c <_sbrk+0x3c>)
 8001274:	4403      	add	r3, r0
 8001276:	1b09      	subs	r1, r1, r4
 8001278:	428b      	cmp	r3, r1
 800127a:	d906      	bls.n	800128a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800127c:	f005 fa84 	bl	8006788 <__errno>
 8001280:	230c      	movs	r3, #12
 8001282:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001284:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001288:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800128a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800128c:	e7fc      	b.n	8001288 <_sbrk+0x28>
 800128e:	bf00      	nop
 8001290:	200008dc 	.word	0x200008dc
 8001294:	20000b18 	.word	0x20000b18
 8001298:	20018000 	.word	0x20018000
 800129c:	00000800 	.word	0x00000800

080012a0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <SystemInit+0x10>)
 80012a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b8:	f7ff fff2 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f005 fa57 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e6:	f7ff fe87 	bl	8000ff8 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012f0:	200000ec 	.word	0x200000ec
  ldr r1, =_edata
 80012f4:	20000810 	.word	0x20000810
  ldr r2, =_sidata
 80012f8:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 80012fc:	20000810 	.word	0x20000810
  ldr r4, =_ebss
 8001300:	20000b14 	.word	0x20000b14

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>
	...

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_InitTick+0x40>)
 800130c:	781a      	ldrb	r2, [r3, #0]
{
 800130e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001310:	b90a      	cbnz	r2, 8001316 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001312:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001314:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f2 	udiv	r3, r3, r2
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_InitTick+0x44>)
 8001320:	6810      	ldr	r0, [r2, #0]
 8001322:	fbb0 f0f3 	udiv	r0, r0, r3
 8001326:	f000 f881 	bl	800142c <HAL_SYSTICK_Config>
 800132a:	4604      	mov	r4, r0
 800132c:	2800      	cmp	r0, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001330:	2d0f      	cmp	r5, #15
 8001332:	d8ee      	bhi.n	8001312 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	4602      	mov	r2, r0
 8001336:	4629      	mov	r1, r5
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f844 	bl	80013c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_InitTick+0x48>)
 8001342:	4620      	mov	r0, r4
 8001344:	601d      	str	r5, [r3, #0]
  return status;
 8001346:	e7e5      	b.n	8001314 <HAL_InitTick+0xc>
 8001348:	200000f0 	.word	0x200000f0
 800134c:	200000ec 	.word	0x200000ec
 8001350:	200000f4 	.word	0x200000f4

08001354 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_Init+0x28>)
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800135c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	f000 f81f 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ffce 	bl	8001308 <HAL_InitTick>
 800136c:	4604      	mov	r4, r0
 800136e:	b918      	cbnz	r0, 8001378 <HAL_Init+0x24>
    HAL_MspInit();
 8001370:	f7ff fec8 	bl	8001104 <HAL_MspInit>
}
 8001374:	4620      	mov	r0, r4
 8001376:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001378:	2401      	movs	r4, #1
 800137a:	e7fb      	b.n	8001374 <HAL_Init+0x20>
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <HAL_IncTick+0x10>)
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_IncTick+0x14>)
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	440b      	add	r3, r1
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200008e0 	.word	0x200008e0
 8001394:	200000f0 	.word	0x200000f0

08001398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <HAL_GetTick+0x8>)
 800139a:	6818      	ldr	r0, [r3, #0]
}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200008e0 	.word	0x200008e0

080013a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013a6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b530      	push	{r4, r5, lr}
 80013cc:	68dc      	ldr	r4, [r3, #12]
 80013ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	2b04      	cmp	r3, #4
 80013da:	bf28      	it	cs
 80013dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e4:	bf8c      	ite	hi
 80013e6:	3c03      	subhi	r4, #3
 80013e8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ea:	fa05 f303 	lsl.w	r3, r5, r3
 80013ee:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f2:	40a5      	lsls	r5, r4
 80013f4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80013fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	bfac      	ite	ge
 8001402:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	4a08      	ldrlt	r2, [pc, #32]	; (8001428 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	bfb8      	it	lt
 800140e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	b2db      	uxtb	r3, r3
 8001414:	bfaa      	itet	ge
 8001416:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001420:	bd30      	pop	{r4, r5, pc}
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	e000ed14 	.word	0xe000ed14

0800142c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	3801      	subs	r0, #1
 800142e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001432:	d20b      	bcs.n	800144c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001434:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	21f0      	movs	r1, #240	; 0xf0
 800143e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001442:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001444:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001446:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001448:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800144c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001454:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001456:	4604      	mov	r4, r0
 8001458:	b908      	cbnz	r0, 800145e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800145c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800145e:	7f43      	ldrb	r3, [r0, #29]
 8001460:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001464:	b913      	cbnz	r3, 800146c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001466:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001468:	f7ff fe64 	bl	8001134 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800146c:	2302      	movs	r3, #2
 800146e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001470:	7923      	ldrb	r3, [r4, #4]
 8001472:	b9e3      	cbnz	r3, 80014ae <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_CRC_Init+0x70>)
 8001478:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	f022 0218 	bic.w	r2, r2, #24
 8001480:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001482:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001484:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001486:	b9d2      	cbnz	r2, 80014be <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800148c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	6961      	ldr	r1, [r4, #20]
 8001492:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001496:	430a      	orrs	r2, r1
 8001498:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69a1      	ldr	r1, [r4, #24]
 800149e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80014a6:	2301      	movs	r3, #1
 80014a8:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80014aa:	2000      	movs	r0, #0
 80014ac:	e7d6      	b.n	800145c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014ae:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80014b2:	4620      	mov	r0, r4
 80014b4:	f000 f808 	bl	80014c8 <HAL_CRCEx_Polynomial_Set>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d0e2      	beq.n	8001482 <HAL_CRC_Init+0x2e>
 80014bc:	e7cd      	b.n	800145a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80014be:	6922      	ldr	r2, [r4, #16]
 80014c0:	e7e4      	b.n	800148c <HAL_CRC_Init+0x38>
 80014c2:	bf00      	nop
 80014c4:	04c11db7 	.word	0x04c11db7

080014c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80014c8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80014ca:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80014cc:	3b01      	subs	r3, #1
 80014ce:	d31c      	bcc.n	800150a <HAL_CRCEx_Polynomial_Set+0x42>
 80014d0:	fa21 f403 	lsr.w	r4, r1, r3
 80014d4:	07e4      	lsls	r4, r4, #31
 80014d6:	d5f9      	bpl.n	80014cc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80014d8:	2a10      	cmp	r2, #16
 80014da:	d012      	beq.n	8001502 <HAL_CRCEx_Polynomial_Set+0x3a>
 80014dc:	d804      	bhi.n	80014e8 <HAL_CRCEx_Polynomial_Set+0x20>
 80014de:	b13a      	cbz	r2, 80014f0 <HAL_CRCEx_Polynomial_Set+0x28>
 80014e0:	2a08      	cmp	r2, #8
 80014e2:	d010      	beq.n	8001506 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80014e4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80014e6:	e00b      	b.n	8001500 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80014e8:	2a18      	cmp	r2, #24
 80014ea:	d1fb      	bne.n	80014e4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80014ec:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80014ee:	d8f9      	bhi.n	80014e4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80014f0:	6800      	ldr	r0, [r0, #0]
 80014f2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80014f4:	6883      	ldr	r3, [r0, #8]
 80014f6:	f023 0318 	bic.w	r3, r3, #24
 80014fa:	4313      	orrs	r3, r2
 80014fc:	6083      	str	r3, [r0, #8]
 80014fe:	2000      	movs	r0, #0
}
 8001500:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001502:	2b07      	cmp	r3, #7
 8001504:	e7f3      	b.n	80014ee <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001506:	2b0f      	cmp	r3, #15
 8001508:	e7f1      	b.n	80014ee <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800150a:	2a00      	cmp	r2, #0
 800150c:	d1ea      	bne.n	80014e4 <HAL_CRCEx_Polynomial_Set+0x1c>
 800150e:	e7ef      	b.n	80014f0 <HAL_CRCEx_Polynomial_Set+0x28>

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001514:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80016c8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001518:	4c69      	ldr	r4, [pc, #420]	; (80016c0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	680a      	ldr	r2, [r1, #0]
 800151e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001522:	d102      	bne.n	800152a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001524:	b003      	add	sp, #12
 8001526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800152a:	f04f 0e01 	mov.w	lr, #1
 800152e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001532:	ea1e 0202 	ands.w	r2, lr, r2
 8001536:	f000 8090 	beq.w	800165a <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153a:	684d      	ldr	r5, [r1, #4]
 800153c:	f005 0603 	and.w	r6, r5, #3
 8001540:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001544:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001548:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001550:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001554:	f200 8083 	bhi.w	800165e <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001558:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800155a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800155e:	68cf      	ldr	r7, [r1, #12]
 8001560:	fa07 f708 	lsl.w	r7, r7, r8
 8001564:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001568:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800156a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001570:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001574:	409f      	lsls	r7, r3
 8001576:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800157a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800157c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800157e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001582:	688f      	ldr	r7, [r1, #8]
 8001584:	fa07 f708 	lsl.w	r7, r7, r8
 8001588:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158c:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800158e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001590:	d071      	beq.n	8001676 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001592:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001594:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001598:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159c:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80015a2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a4:	d059      	beq.n	800165a <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80015aa:	f046 0601 	orr.w	r6, r6, #1
 80015ae:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80015b2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80015b6:	f023 0703 	bic.w	r7, r3, #3
 80015ba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015be:	f006 0601 	and.w	r6, r6, #1
 80015c2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80015c6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80015ce:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80015d4:	f04f 0c0f 	mov.w	ip, #15
 80015d8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015dc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e4:	d05f      	beq.n	80016a6 <HAL_GPIO_Init+0x196>
 80015e6:	4e37      	ldr	r6, [pc, #220]	; (80016c4 <HAL_GPIO_Init+0x1b4>)
 80015e8:	42b0      	cmp	r0, r6
 80015ea:	d05e      	beq.n	80016aa <HAL_GPIO_Init+0x19a>
 80015ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f0:	42b0      	cmp	r0, r6
 80015f2:	d05c      	beq.n	80016ae <HAL_GPIO_Init+0x19e>
 80015f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f8:	42b0      	cmp	r0, r6
 80015fa:	d05a      	beq.n	80016b2 <HAL_GPIO_Init+0x1a2>
 80015fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001600:	42b0      	cmp	r0, r6
 8001602:	d058      	beq.n	80016b6 <HAL_GPIO_Init+0x1a6>
 8001604:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001608:	42b0      	cmp	r0, r6
 800160a:	d056      	beq.n	80016ba <HAL_GPIO_Init+0x1aa>
 800160c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001610:	42b0      	cmp	r0, r6
 8001612:	bf0c      	ite	eq
 8001614:	2606      	moveq	r6, #6
 8001616:	2607      	movne	r6, #7
 8001618:	fa06 f60e 	lsl.w	r6, r6, lr
 800161c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001620:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001622:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001624:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001626:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800162a:	bf0c      	ite	eq
 800162c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800162e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001630:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001632:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001634:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001638:	bf0c      	ite	eq
 800163a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800163c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800163e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001640:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001642:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001646:	bf0c      	ite	eq
 8001648:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800164a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800164c:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800164e:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001650:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001652:	bf54      	ite	pl
 8001654:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001656:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001658:	6026      	str	r6, [r4, #0]
    position++;
 800165a:	3301      	adds	r3, #1
 800165c:	e75e      	b.n	800151c <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800165e:	2e03      	cmp	r6, #3
 8001660:	d18c      	bne.n	800157c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001662:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001664:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001668:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 800166c:	409f      	lsls	r7, r3
 800166e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001672:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	e78d      	b.n	8001592 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001676:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800167a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800167e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001682:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001686:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800168a:	f04f 0e0f 	mov.w	lr, #15
 800168e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001692:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001696:	690f      	ldr	r7, [r1, #16]
 8001698:	fa07 f70b 	lsl.w	r7, r7, fp
 800169c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	f8ca 7020 	str.w	r7, [sl, #32]
 80016a4:	e775      	b.n	8001592 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a6:	2600      	movs	r6, #0
 80016a8:	e7b6      	b.n	8001618 <HAL_GPIO_Init+0x108>
 80016aa:	2601      	movs	r6, #1
 80016ac:	e7b4      	b.n	8001618 <HAL_GPIO_Init+0x108>
 80016ae:	2602      	movs	r6, #2
 80016b0:	e7b2      	b.n	8001618 <HAL_GPIO_Init+0x108>
 80016b2:	2603      	movs	r6, #3
 80016b4:	e7b0      	b.n	8001618 <HAL_GPIO_Init+0x108>
 80016b6:	2604      	movs	r6, #4
 80016b8:	e7ae      	b.n	8001618 <HAL_GPIO_Init+0x108>
 80016ba:	2605      	movs	r6, #5
 80016bc:	e7ac      	b.n	8001618 <HAL_GPIO_Init+0x108>
 80016be:	bf00      	nop
 80016c0:	40010400 	.word	0x40010400
 80016c4:	48000400 	.word	0x48000400
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	b10a      	cbz	r2, 80016d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ce:	6181      	str	r1, [r0, #24]
 80016d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_PWREx_GetVoltageRange+0xc>)
 80016da:	6818      	ldr	r0, [r3, #0]
#endif
}
 80016dc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000

080016e8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e8:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ea:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	d11d      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fa:	d101      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016fc:	2000      	movs	r0, #0
 80016fe:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2132      	movs	r1, #50	; 0x32
 8001712:	434b      	muls	r3, r1
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800171c:	6951      	ldr	r1, [r2, #20]
 800171e:	0549      	lsls	r1, r1, #21
 8001720:	d500      	bpl.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001722:	b923      	cbnz	r3, 800172e <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001724:	6953      	ldr	r3, [r2, #20]
 8001726:	055b      	lsls	r3, r3, #21
 8001728:	d5e8      	bpl.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800172a:	2003      	movs	r0, #3
}
 800172c:	4770      	bx	lr
        wait_loop_index--;
 800172e:	3b01      	subs	r3, #1
 8001730:	e7f4      	b.n	800171c <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001736:	bf1f      	itttt	ne
 8001738:	6813      	ldrne	r3, [r2, #0]
 800173a:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800173e:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001742:	6013      	strne	r3, [r2, #0]
 8001744:	e7da      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x14>
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000
 800174c:	200000ec 	.word	0x200000ec
 8001750:	000f4240 	.word	0x000f4240

08001754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001754:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001756:	4d1e      	ldr	r5, [pc, #120]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001758:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800175a:	00da      	lsls	r2, r3, #3
{
 800175c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800175e:	d518      	bpl.n	8001792 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001760:	f7ff ffba 	bl	80016d8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001764:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001768:	d123      	bne.n	80017b2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800176a:	2c80      	cmp	r4, #128	; 0x80
 800176c:	d929      	bls.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800176e:	2ca0      	cmp	r4, #160	; 0xa0
 8001770:	bf8c      	ite	hi
 8001772:	2402      	movhi	r4, #2
 8001774:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001776:	4917      	ldr	r1, [pc, #92]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001778:	680a      	ldr	r2, [r1, #0]
 800177a:	f022 0207 	bic.w	r2, r2, #7
 800177e:	4322      	orrs	r2, r4
 8001780:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001782:	6808      	ldr	r0, [r1, #0]
 8001784:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001788:	1b00      	subs	r0, r0, r4
 800178a:	bf18      	it	ne
 800178c:	2001      	movne	r0, #1
 800178e:	b003      	add	sp, #12
 8001790:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	65ab      	str	r3, [r5, #88]	; 0x58
 800179a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80017a4:	f7ff ff98 	bl	80016d8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80017a8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ae:	65ab      	str	r3, [r5, #88]	; 0x58
 80017b0:	e7d8      	b.n	8001764 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80017b2:	2c80      	cmp	r4, #128	; 0x80
 80017b4:	d807      	bhi.n	80017c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80017b6:	d008      	beq.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80017b8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80017bc:	425c      	negs	r4, r3
 80017be:	415c      	adcs	r4, r3
 80017c0:	e7d9      	b.n	8001776 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017c2:	2400      	movs	r4, #0
 80017c4:	e7d7      	b.n	8001776 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80017c6:	2403      	movs	r4, #3
 80017c8:	e7d5      	b.n	8001776 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ca:	2402      	movs	r4, #2
 80017cc:	e7d3      	b.n	8001776 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_RCC_GetSysClockFreq+0x8c>)
 80017da:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017dc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017de:	f012 020c 	ands.w	r2, r2, #12
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x18>
 80017e4:	2a0c      	cmp	r2, #12
 80017e6:	d115      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017ec:	2901      	cmp	r1, #1
 80017ee:	d118      	bne.n	8001822 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017f0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80017f2:	481d      	ldr	r0, [pc, #116]	; (8001868 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017f4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017f6:	bf55      	itete	pl
 80017f8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017fc:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017fe:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001802:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001806:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180a:	b34a      	cbz	r2, 8001860 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800180c:	2a0c      	cmp	r2, #12
 800180e:	d009      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x4c>
 8001810:	2000      	movs	r0, #0
  return sysclockfreq;
 8001812:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001814:	2a04      	cmp	r2, #4
 8001816:	d022      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001818:	2a08      	cmp	r2, #8
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <HAL_RCC_GetSysClockFreq+0x94>)
 800181c:	bf18      	it	ne
 800181e:	2000      	movne	r0, #0
 8001820:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001822:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800182a:	2a02      	cmp	r2, #2
 800182c:	d015      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0x82>
 800182e:	490f      	ldr	r1, [pc, #60]	; (800186c <HAL_RCC_GetSysClockFreq+0x94>)
 8001830:	2a03      	cmp	r2, #3
 8001832:	bf08      	it	eq
 8001834:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001836:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800183e:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001840:	68d8      	ldr	r0, [r3, #12]
 8001842:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001846:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184a:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800184c:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184e:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001850:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001854:	fbb2 f0f0 	udiv	r0, r2, r0
 8001858:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_RCC_GetSysClockFreq+0x98>)
 800185c:	e7eb      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	080085cc 	.word	0x080085cc
 800186c:	007a1200 	.word	0x007a1200
 8001870:	00f42400 	.word	0x00f42400

08001874 <HAL_RCC_OscConfig>:
{
 8001874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001878:	4605      	mov	r5, r0
 800187a:	b918      	cbnz	r0, 8001884 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
}
 800187e:	b003      	add	sp, #12
 8001880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001884:	4c92      	ldr	r4, [pc, #584]	; (8001ad0 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001886:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001888:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800188a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800188c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001892:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001896:	d53d      	bpl.n	8001914 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001898:	b11e      	cbz	r6, 80018a2 <HAL_RCC_OscConfig+0x2e>
 800189a:	2e0c      	cmp	r6, #12
 800189c:	d166      	bne.n	800196c <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800189e:	2f01      	cmp	r7, #1
 80018a0:	d164      	bne.n	800196c <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	0798      	lsls	r0, r3, #30
 80018a6:	d502      	bpl.n	80018ae <HAL_RCC_OscConfig+0x3a>
 80018a8:	69ab      	ldr	r3, [r5, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0e6      	beq.n	800187c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	6a28      	ldr	r0, [r5, #32]
 80018b2:	0719      	lsls	r1, r3, #28
 80018b4:	bf56      	itet	pl
 80018b6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80018ba:	6823      	ldrmi	r3, [r4, #0]
 80018bc:	091b      	lsrpl	r3, r3, #4
 80018be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c2:	4298      	cmp	r0, r3
 80018c4:	d93b      	bls.n	800193e <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c6:	f7ff ff45 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d1d6      	bne.n	800187c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6023      	str	r3, [r4, #0]
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	6a2a      	ldr	r2, [r5, #32]
 80018da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018de:	4313      	orrs	r3, r2
 80018e0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e2:	6863      	ldr	r3, [r4, #4]
 80018e4:	69ea      	ldr	r2, [r5, #28]
 80018e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018ee:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f0:	f7ff ff72 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 80018f4:	68a3      	ldr	r3, [r4, #8]
 80018f6:	4a77      	ldr	r2, [pc, #476]	; (8001ad4 <HAL_RCC_OscConfig+0x260>)
 80018f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	40d8      	lsrs	r0, r3
 8001904:	4b74      	ldr	r3, [pc, #464]	; (8001ad8 <HAL_RCC_OscConfig+0x264>)
 8001906:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001908:	4b74      	ldr	r3, [pc, #464]	; (8001adc <HAL_RCC_OscConfig+0x268>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f7ff fcfc 	bl	8001308 <HAL_InitTick>
        if(status != HAL_OK)
 8001910:	2800      	cmp	r0, #0
 8001912:	d1b4      	bne.n	800187e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	07d8      	lsls	r0, r3, #31
 8001918:	d45f      	bmi.n	80019da <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	0799      	lsls	r1, r3, #30
 800191e:	f100 809e 	bmi.w	8001a5e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	0718      	lsls	r0, r3, #28
 8001926:	f100 80db 	bmi.w	8001ae0 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	0759      	lsls	r1, r3, #29
 800192e:	f100 8101 	bmi.w	8001b34 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001932:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 816a 	bne.w	8001c0e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800193a:	2000      	movs	r0, #0
 800193c:	e79f      	b.n	800187e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6023      	str	r3, [r4, #0]
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800194c:	4303      	orrs	r3, r0
 800194e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001950:	6863      	ldr	r3, [r4, #4]
 8001952:	69ea      	ldr	r2, [r5, #28]
 8001954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001958:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800195c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	2e00      	cmp	r6, #0
 8001960:	d1c6      	bne.n	80018f0 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001962:	f7ff fef7 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8001966:	2800      	cmp	r0, #0
 8001968:	d0c2      	beq.n	80018f0 <HAL_RCC_OscConfig+0x7c>
 800196a:	e787      	b.n	800187c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800196c:	69ab      	ldr	r3, [r5, #24]
 800196e:	b31b      	cbz	r3, 80019b8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001978:	f7ff fd0e 	bl	8001398 <HAL_GetTick>
 800197c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	079a      	lsls	r2, r3, #30
 8001982:	d511      	bpl.n	80019a8 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6023      	str	r3, [r4, #0]
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	6a2a      	ldr	r2, [r5, #32]
 8001990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001994:	4313      	orrs	r3, r2
 8001996:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	69ea      	ldr	r2, [r5, #28]
 800199c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019a4:	6063      	str	r3, [r4, #4]
 80019a6:	e7b5      	b.n	8001914 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a8:	f7ff fcf6 	bl	8001398 <HAL_GetTick>
 80019ac:	eba0 0008 	sub.w	r0, r0, r8
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9e4      	bls.n	800197e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80019b4:	2003      	movs	r0, #3
 80019b6:	e762      	b.n	800187e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019c0:	f7ff fcea 	bl	8001398 <HAL_GetTick>
 80019c4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	079b      	lsls	r3, r3, #30
 80019ca:	d5a3      	bpl.n	8001914 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019cc:	f7ff fce4 	bl	8001398 <HAL_GetTick>
 80019d0:	eba0 0008 	sub.w	r0, r0, r8
 80019d4:	2802      	cmp	r0, #2
 80019d6:	d9f6      	bls.n	80019c6 <HAL_RCC_OscConfig+0x152>
 80019d8:	e7ec      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019da:	2e08      	cmp	r6, #8
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_OscConfig+0x172>
 80019de:	2e0c      	cmp	r6, #12
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019e2:	2f03      	cmp	r7, #3
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	039a      	lsls	r2, r3, #14
 80019ea:	d596      	bpl.n	800191a <HAL_RCC_OscConfig+0xa6>
 80019ec:	686b      	ldr	r3, [r5, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d193      	bne.n	800191a <HAL_RCC_OscConfig+0xa6>
 80019f2:	e743      	b.n	800187c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f4:	686b      	ldr	r3, [r5, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fa:	d110      	bne.n	8001a1e <HAL_RCC_OscConfig+0x1aa>
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a04:	f7ff fcc8 	bl	8001398 <HAL_GetTick>
 8001a08:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	039b      	lsls	r3, r3, #14
 8001a0e:	d484      	bmi.n	800191a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fcc2 	bl	8001398 <HAL_GetTick>
 8001a14:	eba0 0008 	sub.w	r0, r0, r8
 8001a18:	2864      	cmp	r0, #100	; 0x64
 8001a1a:	d9f6      	bls.n	8001a0a <HAL_RCC_OscConfig+0x196>
 8001a1c:	e7ca      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a22:	d104      	bne.n	8001a2e <HAL_RCC_OscConfig+0x1ba>
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2a:	6023      	str	r3, [r4, #0]
 8001a2c:	e7e6      	b.n	80019fc <HAL_RCC_OscConfig+0x188>
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a34:	6022      	str	r2, [r4, #0]
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a3c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1e0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001a42:	f7ff fca9 	bl	8001398 <HAL_GetTick>
 8001a46:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	0398      	lsls	r0, r3, #14
 8001a4c:	f57f af65 	bpl.w	800191a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fca2 	bl	8001398 <HAL_GetTick>
 8001a54:	eba0 0008 	sub.w	r0, r0, r8
 8001a58:	2864      	cmp	r0, #100	; 0x64
 8001a5a:	d9f5      	bls.n	8001a48 <HAL_RCC_OscConfig+0x1d4>
 8001a5c:	e7aa      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a5e:	2e04      	cmp	r6, #4
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
 8001a62:	2e0c      	cmp	r6, #12
 8001a64:	d110      	bne.n	8001a88 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a66:	2f02      	cmp	r7, #2
 8001a68:	d10e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	0559      	lsls	r1, r3, #21
 8001a6e:	d503      	bpl.n	8001a78 <HAL_RCC_OscConfig+0x204>
 8001a70:	68eb      	ldr	r3, [r5, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f43f af02 	beq.w	800187c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	6863      	ldr	r3, [r4, #4]
 8001a7a:	692a      	ldr	r2, [r5, #16]
 8001a7c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001a80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a84:	6063      	str	r3, [r4, #4]
 8001a86:	e74c      	b.n	8001922 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a88:	68eb      	ldr	r3, [r5, #12]
 8001a8a:	b17b      	cbz	r3, 8001aac <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc80 	bl	8001398 <HAL_GetTick>
 8001a98:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	055a      	lsls	r2, r3, #21
 8001a9e:	d4eb      	bmi.n	8001a78 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc7a 	bl	8001398 <HAL_GetTick>
 8001aa4:	1bc0      	subs	r0, r0, r7
 8001aa6:	2802      	cmp	r0, #2
 8001aa8:	d9f7      	bls.n	8001a9a <HAL_RCC_OscConfig+0x226>
 8001aaa:	e783      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc70 	bl	8001398 <HAL_GetTick>
 8001ab8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	055b      	lsls	r3, r3, #21
 8001abe:	f57f af30 	bpl.w	8001922 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fc69 	bl	8001398 <HAL_GetTick>
 8001ac6:	1bc0      	subs	r0, r0, r7
 8001ac8:	2802      	cmp	r0, #2
 8001aca:	d9f6      	bls.n	8001aba <HAL_RCC_OscConfig+0x246>
 8001acc:	e772      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	080085b1 	.word	0x080085b1
 8001ad8:	200000ec 	.word	0x200000ec
 8001adc:	200000f4 	.word	0x200000f4
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae0:	696b      	ldr	r3, [r5, #20]
 8001ae2:	b19b      	cbz	r3, 8001b0c <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001ae4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001af0:	f7ff fc52 	bl	8001398 <HAL_GetTick>
 8001af4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001afa:	079a      	lsls	r2, r3, #30
 8001afc:	f53f af15 	bmi.w	800192a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fc4a 	bl	8001398 <HAL_GetTick>
 8001b04:	1bc0      	subs	r0, r0, r7
 8001b06:	2802      	cmp	r0, #2
 8001b08:	d9f5      	bls.n	8001af6 <HAL_RCC_OscConfig+0x282>
 8001b0a:	e753      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001b0c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b18:	f7ff fc3e 	bl	8001398 <HAL_GetTick>
 8001b1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b22:	079b      	lsls	r3, r3, #30
 8001b24:	f57f af01 	bpl.w	800192a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc36 	bl	8001398 <HAL_GetTick>
 8001b2c:	1bc0      	subs	r0, r0, r7
 8001b2e:	2802      	cmp	r0, #2
 8001b30:	d9f5      	bls.n	8001b1e <HAL_RCC_OscConfig+0x2aa>
 8001b32:	e73f      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b36:	00df      	lsls	r7, r3, #3
 8001b38:	d429      	bmi.n	8001b8e <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b4c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b50:	4f85      	ldr	r7, [pc, #532]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	05d8      	lsls	r0, r3, #23
 8001b56:	d51d      	bpl.n	8001b94 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	68ab      	ldr	r3, [r5, #8]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12b      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x342>
 8001b5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fc15 	bl	8001398 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b72:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b78:	079a      	lsls	r2, r3, #30
 8001b7a:	d542      	bpl.n	8001c02 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001b7c:	f1b8 0f00 	cmp.w	r8, #0
 8001b80:	f43f aed7 	beq.w	8001932 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b8c:	e6d1      	b.n	8001932 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	f04f 0800 	mov.w	r8, #0
 8001b92:	e7dd      	b.n	8001b50 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fbfc 	bl	8001398 <HAL_GetTick>
 8001ba0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	05d9      	lsls	r1, r3, #23
 8001ba6:	d4d7      	bmi.n	8001b58 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7ff fbf6 	bl	8001398 <HAL_GetTick>
 8001bac:	eba0 0009 	sub.w	r0, r0, r9
 8001bb0:	2802      	cmp	r0, #2
 8001bb2:	d9f6      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x32e>
 8001bb4:	e6fe      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x354>
 8001bba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001bc6:	e7ca      	b.n	8001b5e <HAL_RCC_OscConfig+0x2ea>
 8001bc8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001bd4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bd8:	f022 0204 	bic.w	r2, r2, #4
 8001bdc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1c2      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001be4:	f7ff fbd8 	bl	8001398 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bf2:	079b      	lsls	r3, r3, #30
 8001bf4:	d5c2      	bpl.n	8001b7c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fbcf 	bl	8001398 <HAL_GetTick>
 8001bfa:	1bc0      	subs	r0, r0, r7
 8001bfc:	4548      	cmp	r0, r9
 8001bfe:	d9f6      	bls.n	8001bee <HAL_RCC_OscConfig+0x37a>
 8001c00:	e6d8      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fbc9 	bl	8001398 <HAL_GetTick>
 8001c06:	1bc0      	subs	r0, r0, r7
 8001c08:	4548      	cmp	r0, r9
 8001c0a:	d9b3      	bls.n	8001b74 <HAL_RCC_OscConfig+0x300>
 8001c0c:	e6d2      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 808f 	bne.w	8001d32 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001c14:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c18:	f003 0103 	and.w	r1, r3, #3
 8001c1c:	4291      	cmp	r1, r2
 8001c1e:	d124      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c20:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001c22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c26:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c28:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001c2c:	d11d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001c30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c34:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001c38:	d117      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c3a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001c3c:	3a07      	subs	r2, #7
 8001c3e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001c42:	bf18      	it	ne
 8001c44:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c46:	4291      	cmp	r1, r2
 8001c48:	d10f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001c4c:	0852      	lsrs	r2, r2, #1
 8001c4e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001c52:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c54:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c5a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001c5c:	0852      	lsrs	r2, r2, #1
 8001c5e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001c62:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c64:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001c68:	d04a      	beq.n	8001d00 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6a:	2e0c      	cmp	r6, #12
 8001c6c:	f43f ae06 	beq.w	800187c <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	015f      	lsls	r7, r3, #5
 8001c74:	f53f ae02 	bmi.w	800187c <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	00de      	lsls	r6, r3, #3
 8001c7c:	f53f adfe 	bmi.w	800187c <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001c88:	f7ff fb86 	bl	8001398 <HAL_GetTick>
 8001c8c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	0198      	lsls	r0, r3, #6
 8001c92:	d42f      	bmi.n	8001cf4 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	68e2      	ldr	r2, [r4, #12]
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ca4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001cac:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001cae:	0912      	lsrs	r2, r2, #4
 8001cb0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001cb4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001cbe:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001cc0:	0852      	lsrs	r2, r2, #1
 8001cc2:	3a01      	subs	r2, #1
 8001cc4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001cc8:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd2:	68e3      	ldr	r3, [r4, #12]
 8001cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001cda:	f7ff fb5d 	bl	8001398 <HAL_GetTick>
 8001cde:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	0199      	lsls	r1, r3, #6
 8001ce4:	f53f ae29 	bmi.w	800193a <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff fb56 	bl	8001398 <HAL_GetTick>
 8001cec:	1b40      	subs	r0, r0, r5
 8001cee:	2802      	cmp	r0, #2
 8001cf0:	d9f6      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x46c>
 8001cf2:	e65f      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff fb50 	bl	8001398 <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9c7      	bls.n	8001c8e <HAL_RCC_OscConfig+0x41a>
 8001cfe:	e659      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	019a      	lsls	r2, r3, #6
 8001d04:	f53f ae19 	bmi.w	800193a <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d10:	68e3      	ldr	r3, [r4, #12]
 8001d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d16:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001d18:	f7ff fb3e 	bl	8001398 <HAL_GetTick>
 8001d1c:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	f53f ae0a 	bmi.w	800193a <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7ff fb37 	bl	8001398 <HAL_GetTick>
 8001d2a:	1b40      	subs	r0, r0, r5
 8001d2c:	2802      	cmp	r0, #2
 8001d2e:	d9f6      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
 8001d30:	e640      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d32:	2e0c      	cmp	r6, #12
 8001d34:	f43f ada2 	beq.w	800187c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb2a 	bl	8001398 <HAL_GetTick>
 8001d44:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4e:	68e1      	ldr	r1, [r4, #12]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8001d56:	4618      	mov	r0, r3
 8001d58:	e591      	b.n	800187e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fb1d 	bl	8001398 <HAL_GetTick>
 8001d5e:	1b40      	subs	r0, r0, r5
 8001d60:	2802      	cmp	r0, #2
 8001d62:	d9f0      	bls.n	8001d46 <HAL_RCC_OscConfig+0x4d2>
 8001d64:	e626      	b.n	80019b4 <HAL_RCC_OscConfig+0x140>
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	f99d808c 	.word	0xf99d808c
 8001d70:	feeefffc 	.word	0xfeeefffc

08001d74 <HAL_RCC_ClockConfig>:
{
 8001d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	b910      	cbnz	r0, 8001d84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
}
 8001d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_RCC_ClockConfig+0x140>)
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d32c      	bcc.n	8001dea <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	6821      	ldr	r1, [r4, #0]
 8001d92:	0788      	lsls	r0, r1, #30
 8001d94:	d434      	bmi.n	8001e00 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	07c9      	lsls	r1, r1, #31
 8001d98:	d43f      	bmi.n	8001e1a <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9a:	6821      	ldr	r1, [r4, #0]
 8001d9c:	078a      	lsls	r2, r1, #30
 8001d9e:	d468      	bmi.n	8001e72 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4a44      	ldr	r2, [pc, #272]	; (8001eb4 <HAL_RCC_ClockConfig+0x140>)
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	d86f      	bhi.n	8001e8c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	f011 0f04 	tst.w	r1, #4
 8001db0:	4d41      	ldr	r5, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x144>)
 8001db2:	d177      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	070b      	lsls	r3, r1, #28
 8001db6:	d506      	bpl.n	8001dc6 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db8:	68ab      	ldr	r3, [r5, #8]
 8001dba:	6922      	ldr	r2, [r4, #16]
 8001dbc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dc4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc6:	f7ff fd07 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8001dca:	68ab      	ldr	r3, [r5, #8]
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	; (8001ebc <HAL_RCC_ClockConfig+0x148>)
 8001dce:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	40d8      	lsrs	r0, r3
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_RCC_ClockConfig+0x14c>)
 8001de0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_ClockConfig+0x150>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	f7ff ba8f 	b.w	8001308 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	f023 0307 	bic.w	r3, r3, #7
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df4:	6813      	ldr	r3, [r2, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	428b      	cmp	r3, r1
 8001dfc:	d1bf      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xa>
 8001dfe:	e7c7      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e00:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x144>)
 8001e02:	68a0      	ldr	r0, [r4, #8]
 8001e04:	6893      	ldr	r3, [r2, #8]
 8001e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e0a:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	bf81      	itttt	hi
 8001e0e:	6893      	ldrhi	r3, [r2, #8]
 8001e10:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8001e14:	4303      	orrhi	r3, r0
 8001e16:	6093      	strhi	r3, [r2, #8]
 8001e18:	e7bd      	b.n	8001d96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1a:	6862      	ldr	r2, [r4, #4]
 8001e1c:	4e26      	ldr	r6, [pc, #152]	; (8001eb8 <HAL_RCC_ClockConfig+0x144>)
 8001e1e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e20:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	d11a      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	d0a9      	beq.n	8001d7e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2a:	68b3      	ldr	r3, [r6, #8]
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e34:	f7ff fab0 	bl	8001398 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e3c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	68b3      	ldr	r3, [r6, #8]
 8001e40:	6862      	ldr	r2, [r4, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e4a:	d0a6      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff faa4 	bl	8001398 <HAL_GetTick>
 8001e50:	1bc0      	subs	r0, r0, r7
 8001e52:	4540      	cmp	r0, r8
 8001e54:	d9f3      	bls.n	8001e3e <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
 8001e58:	e792      	b.n	8001d80 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5a:	2a02      	cmp	r2, #2
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e62:	e7e1      	b.n	8001e28 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e64:	b912      	cbnz	r2, 8001e6c <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e66:	f013 0f02 	tst.w	r3, #2
 8001e6a:	e7dd      	b.n	8001e28 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e70:	e7da      	b.n	8001e28 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_RCC_ClockConfig+0x144>)
 8001e74:	68a0      	ldr	r0, [r4, #8]
 8001e76:	6893      	ldr	r3, [r2, #8]
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7e:	bf3f      	itttt	cc
 8001e80:	6893      	ldrcc	r3, [r2, #8]
 8001e82:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8001e86:	4303      	orrcc	r3, r0
 8001e88:	6093      	strcc	r3, [r2, #8]
 8001e8a:	e789      	b.n	8001da0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8c:	6813      	ldr	r3, [r2, #0]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	432b      	orrs	r3, r5
 8001e94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	f47f af6e 	bne.w	8001d7e <HAL_RCC_ClockConfig+0xa>
 8001ea2:	e783      	b.n	8001dac <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	68ab      	ldr	r3, [r5, #8]
 8001ea6:	68e2      	ldr	r2, [r4, #12]
 8001ea8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60ab      	str	r3, [r5, #8]
 8001eb0:	e780      	b.n	8001db4 <HAL_RCC_ClockConfig+0x40>
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080085b1 	.word	0x080085b1
 8001ec0:	200000ec 	.word	0x200000ec
 8001ec4:	200000f4 	.word	0x200000f4

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eca:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed6:	6810      	ldr	r0, [r2, #0]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
}
 8001edc:	40d8      	lsrs	r0, r3
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	080085c1 	.word	0x080085c1
 8001ee8:	200000ec 	.word	0x200000ec

08001eec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001eee:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efa:	6810      	ldr	r0, [r2, #0]
 8001efc:	f003 031f 	and.w	r3, r3, #31
}
 8001f00:	40d8      	lsrs	r0, r3
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000
 8001f08:	080085c1 	.word	0x080085c1
 8001f0c:	200000ec 	.word	0x200000ec

08001f10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f12:	4c42      	ldr	r4, [pc, #264]	; (800201c <RCCEx_PLLSAI1_Config+0x10c>)
 8001f14:	68e2      	ldr	r2, [r4, #12]
 8001f16:	0793      	lsls	r3, r2, #30
{
 8001f18:	4605      	mov	r5, r0
 8001f1a:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f1c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f1e:	d029      	beq.n	8001f74 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f20:	68e2      	ldr	r2, [r4, #12]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	4282      	cmp	r2, r0
 8001f28:	d13c      	bne.n	8001fa4 <RCCEx_PLLSAI1_Config+0x94>
       ||
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d03a      	beq.n	8001fa4 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f2e:	68e3      	ldr	r3, [r4, #12]
       ||
 8001f30:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f32:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f36:	3301      	adds	r3, #1
       ||
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d133      	bne.n	8001fa4 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f42:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f44:	f7ff fa28 	bl	8001398 <HAL_GetTick>
 8001f48:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	011a      	lsls	r2, r3, #4
 8001f4e:	d432      	bmi.n	8001fb6 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f50:	68aa      	ldr	r2, [r5, #8]
 8001f52:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8001f54:	2e00      	cmp	r6, #0
 8001f56:	d035      	beq.n	8001fc4 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f58:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f5a:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f5c:	d14d      	bne.n	8001ffa <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f5e:	6929      	ldr	r1, [r5, #16]
 8001f60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f64:	0849      	lsrs	r1, r1, #1
 8001f66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f6a:	3901      	subs	r1, #1
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001f72:	e031      	b.n	8001fd8 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8001f74:	2802      	cmp	r0, #2
 8001f76:	d011      	beq.n	8001f9c <RCCEx_PLLSAI1_Config+0x8c>
 8001f78:	2803      	cmp	r0, #3
 8001f7a:	d015      	beq.n	8001fa8 <RCCEx_PLLSAI1_Config+0x98>
 8001f7c:	2801      	cmp	r0, #1
 8001f7e:	d111      	bne.n	8001fa4 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	0797      	lsls	r7, r2, #30
 8001f84:	d51d      	bpl.n	8001fc2 <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f86:	68e2      	ldr	r2, [r4, #12]
 8001f88:	6869      	ldr	r1, [r5, #4]
 8001f8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001f8e:	3901      	subs	r1, #1
 8001f90:	ea42 0300 	orr.w	r3, r2, r0
 8001f94:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001f98:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8001f9a:	e7cf      	b.n	8001f3c <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f9c:	6822      	ldr	r2, [r4, #0]
 8001f9e:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fa2:	d1f0      	bne.n	8001f86 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	e00c      	b.n	8001fc2 <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	0391      	lsls	r1, r2, #14
 8001fac:	d4eb      	bmi.n	8001f86 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001fb4:	e7f5      	b.n	8001fa2 <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fb6:	f7ff f9ef 	bl	8001398 <HAL_GetTick>
 8001fba:	1bc0      	subs	r0, r0, r7
 8001fbc:	2802      	cmp	r0, #2
 8001fbe:	d9c4      	bls.n	8001f4a <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8001fc0:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8001fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fc4:	6923      	ldr	r3, [r4, #16]
 8001fc6:	68e9      	ldr	r1, [r5, #12]
 8001fc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd0:	0909      	lsrs	r1, r1, #4
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fd8:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fe0:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f9d9 	bl	8001398 <HAL_GetTick>
 8001fe6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	d510      	bpl.n	8002010 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001fee:	6923      	ldr	r3, [r4, #16]
 8001ff0:	69aa      	ldr	r2, [r5, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	6123      	str	r3, [r4, #16]
 8001ff6:	2000      	movs	r0, #0
  return status;
 8001ff8:	e7e3      	b.n	8001fc2 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ffa:	6969      	ldr	r1, [r5, #20]
 8001ffc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002000:	0849      	lsrs	r1, r1, #1
 8002002:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002006:	3901      	subs	r1, #1
 8002008:	4313      	orrs	r3, r2
 800200a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800200e:	e7e3      	b.n	8001fd8 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002010:	f7ff f9c2 	bl	8001398 <HAL_GetTick>
 8002014:	1b80      	subs	r0, r0, r6
 8002016:	2802      	cmp	r0, #2
 8002018:	d9e6      	bls.n	8001fe8 <RCCEx_PLLSAI1_Config+0xd8>
 800201a:	e7d1      	b.n	8001fc0 <RCCEx_PLLSAI1_Config+0xb0>
 800201c:	40021000 	.word	0x40021000

08002020 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002022:	4c3b      	ldr	r4, [pc, #236]	; (8002110 <RCCEx_PLLSAI2_Config+0xf0>)
 8002024:	68e2      	ldr	r2, [r4, #12]
 8002026:	0793      	lsls	r3, r2, #30
{
 8002028:	4605      	mov	r5, r0
 800202a:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800202c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800202e:	d026      	beq.n	800207e <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002030:	68e2      	ldr	r2, [r4, #12]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	4282      	cmp	r2, r0
 8002038:	d139      	bne.n	80020ae <RCCEx_PLLSAI2_Config+0x8e>
       ||
 800203a:	2a00      	cmp	r2, #0
 800203c:	d037      	beq.n	80020ae <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800203e:	68e3      	ldr	r3, [r4, #12]
       ||
 8002040:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002042:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002046:	3301      	adds	r3, #1
       ||
 8002048:	4293      	cmp	r3, r2
 800204a:	d130      	bne.n	80020ae <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002052:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002054:	f7ff f9a0 	bl	8001398 <HAL_GetTick>
 8002058:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	009a      	lsls	r2, r3, #2
 800205e:	d42f      	bmi.n	80020c0 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002060:	68a9      	ldr	r1, [r5, #8]
 8002062:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002064:	b39e      	cbz	r6, 80020ce <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002066:	6963      	ldr	r3, [r4, #20]
 8002068:	692a      	ldr	r2, [r5, #16]
 800206a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002074:	3a01      	subs	r2, #1
 8002076:	430b      	orrs	r3, r1
 8002078:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800207c:	e031      	b.n	80020e2 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 800207e:	2802      	cmp	r0, #2
 8002080:	d011      	beq.n	80020a6 <RCCEx_PLLSAI2_Config+0x86>
 8002082:	2803      	cmp	r0, #3
 8002084:	d015      	beq.n	80020b2 <RCCEx_PLLSAI2_Config+0x92>
 8002086:	2801      	cmp	r0, #1
 8002088:	d111      	bne.n	80020ae <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	0797      	lsls	r7, r2, #30
 800208e:	d51d      	bpl.n	80020cc <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002090:	68e2      	ldr	r2, [r4, #12]
 8002092:	6869      	ldr	r1, [r5, #4]
 8002094:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002098:	3901      	subs	r1, #1
 800209a:	ea42 0300 	orr.w	r3, r2, r0
 800209e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80020a2:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80020a4:	e7d2      	b.n	800204c <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020a6:	6822      	ldr	r2, [r4, #0]
 80020a8:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020ac:	d1f0      	bne.n	8002090 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
 80020b0:	e00c      	b.n	80020cc <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	0391      	lsls	r1, r2, #14
 80020b6:	d4eb      	bmi.n	8002090 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020b8:	6822      	ldr	r2, [r4, #0]
 80020ba:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80020be:	e7f5      	b.n	80020ac <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020c0:	f7ff f96a 	bl	8001398 <HAL_GetTick>
 80020c4:	1bc0      	subs	r0, r0, r7
 80020c6:	2802      	cmp	r0, #2
 80020c8:	d9c7      	bls.n	800205a <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80020ca:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80020cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020ce:	6963      	ldr	r3, [r4, #20]
 80020d0:	68ea      	ldr	r2, [r5, #12]
 80020d2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020da:	0912      	lsrs	r2, r2, #4
 80020dc:	430b      	orrs	r3, r1
 80020de:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020e2:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80020ec:	f7ff f954 	bl	8001398 <HAL_GetTick>
 80020f0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	d505      	bpl.n	8002104 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80020f8:	6963      	ldr	r3, [r4, #20]
 80020fa:	696a      	ldr	r2, [r5, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6163      	str	r3, [r4, #20]
 8002100:	2000      	movs	r0, #0
  return status;
 8002102:	e7e3      	b.n	80020cc <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002104:	f7ff f948 	bl	8001398 <HAL_GetTick>
 8002108:	1b80      	subs	r0, r0, r6
 800210a:	2802      	cmp	r0, #2
 800210c:	d9f1      	bls.n	80020f2 <RCCEx_PLLSAI2_Config+0xd2>
 800210e:	e7dc      	b.n	80020ca <RCCEx_PLLSAI2_Config+0xaa>
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002114:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002118:	6806      	ldr	r6, [r0, #0]
 800211a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800211e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002120:	d009      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002122:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002124:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002128:	d022      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800212a:	d813      	bhi.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800212c:	b331      	cbz	r1, 800217c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800212e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002132:	d02a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002134:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	04d8      	lsls	r0, r3, #19
 800213a:	d509      	bpl.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800213c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800213e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002142:	d02c      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002144:	d826      	bhi.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002146:	b381      	cbz	r1, 80021aa <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002148:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800214c:	d072      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800214e:	2601      	movs	r6, #1
 8002150:	4635      	mov	r5, r6
 8002152:	e039      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002154:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002158:	d1ec      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800215c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800215e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002162:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002166:	430b      	orrs	r3, r1
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800216c:	2600      	movs	r6, #0
 800216e:	e7e2      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002170:	4a36      	ldr	r2, [pc, #216]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002172:	68d3      	ldr	r3, [r2, #12]
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800217a:	e7ee      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800217c:	3004      	adds	r0, #4
 800217e:	f7ff fec7 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002182:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002184:	2800      	cmp	r0, #0
 8002186:	d1d6      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002188:	e7e7      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800218a:	2100      	movs	r1, #0
 800218c:	3020      	adds	r0, #32
 800218e:	f7ff ff47 	bl	8002020 <RCCEx_PLLSAI2_Config>
 8002192:	e7f6      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002194:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002198:	d1d9      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800219a:	4635      	mov	r5, r6
 800219c:	e009      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800219e:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021a0:	68d3      	ldr	r3, [r2, #12]
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	60d3      	str	r3, [r2, #12]
      break;
 80021a8:	e7f7      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021aa:	1d20      	adds	r0, r4, #4
 80021ac:	f7ff feb0 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d144      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021b6:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80021ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021be:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80021c2:	430b      	orrs	r3, r1
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	0399      	lsls	r1, r3, #14
 80021cc:	f140 815d 	bpl.w	800248a <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d0:	4f1e      	ldr	r7, [pc, #120]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d4:	00da      	lsls	r2, r3, #3
 80021d6:	d435      	bmi.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	65bb      	str	r3, [r7, #88]	; 0x58
 80021e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021ea:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ee:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021f2:	f8d9 3000 	ldr.w	r3, [r9]
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80021fe:	f7ff f8cb 	bl	8001398 <HAL_GetTick>
 8002202:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002204:	f8d9 3000 	ldr.w	r3, [r9]
 8002208:	05db      	lsls	r3, r3, #23
 800220a:	d523      	bpl.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 800220c:	bb4d      	cbnz	r5, 8002262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800220e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002212:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002216:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800221a:	f040 810e 	bne.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002222:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002230:	4635      	mov	r5, r6
 8002232:	e016      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002234:	2100      	movs	r1, #0
 8002236:	f104 0020 	add.w	r0, r4, #32
 800223a:	f7ff fef1 	bl	8002020 <RCCEx_PLLSAI2_Config>
 800223e:	e7b7      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002240:	462e      	mov	r6, r5
 8002242:	e7c1      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002244:	f04f 0800 	mov.w	r8, #0
 8002248:	e7d1      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xda>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7ff f8a0 	bl	8001398 <HAL_GetTick>
 8002258:	eba0 000a 	sub.w	r0, r0, sl
 800225c:	2802      	cmp	r0, #2
 800225e:	d9d1      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002260:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002262:	f1b8 0f00 	cmp.w	r8, #0
 8002266:	d003      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	07da      	lsls	r2, r3, #31
 8002274:	d508      	bpl.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002276:	499b      	ldr	r1, [pc, #620]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002278:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800227a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800227e:	f022 0203 	bic.w	r2, r2, #3
 8002282:	4302      	orrs	r2, r0
 8002284:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002288:	079f      	lsls	r7, r3, #30
 800228a:	d508      	bpl.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800228c:	4995      	ldr	r1, [pc, #596]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800228e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002290:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002294:	f022 020c 	bic.w	r2, r2, #12
 8002298:	4302      	orrs	r2, r0
 800229a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229e:	075e      	lsls	r6, r3, #29
 80022a0:	d508      	bpl.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022a2:	4990      	ldr	r1, [pc, #576]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022aa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022ae:	4302      	orrs	r2, r0
 80022b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b4:	0718      	lsls	r0, r3, #28
 80022b6:	d508      	bpl.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b8:	498a      	ldr	r1, [pc, #552]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80022bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022c4:	4302      	orrs	r2, r0
 80022c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ca:	06d9      	lsls	r1, r3, #27
 80022cc:	d508      	bpl.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ce:	4985      	ldr	r1, [pc, #532]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80022d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022da:	4302      	orrs	r2, r0
 80022dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e0:	069a      	lsls	r2, r3, #26
 80022e2:	d508      	bpl.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e4:	497f      	ldr	r1, [pc, #508]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80022e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022f0:	4302      	orrs	r2, r0
 80022f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	059f      	lsls	r7, r3, #22
 80022f8:	d508      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fa:	497a      	ldr	r1, [pc, #488]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80022fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002302:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002306:	4302      	orrs	r2, r0
 8002308:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800230c:	055e      	lsls	r6, r3, #21
 800230e:	d508      	bpl.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002310:	4974      	ldr	r1, [pc, #464]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002312:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002314:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002318:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800231c:	4302      	orrs	r2, r0
 800231e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002322:	0658      	lsls	r0, r3, #25
 8002324:	d508      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002326:	496f      	ldr	r1, [pc, #444]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002328:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800232a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800232e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002332:	4302      	orrs	r2, r0
 8002334:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002338:	0619      	lsls	r1, r3, #24
 800233a:	d508      	bpl.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233c:	4969      	ldr	r1, [pc, #420]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800233e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002340:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002344:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002348:	4302      	orrs	r2, r0
 800234a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234e:	05da      	lsls	r2, r3, #23
 8002350:	d508      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002352:	4964      	ldr	r1, [pc, #400]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002356:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800235a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800235e:	4302      	orrs	r2, r0
 8002360:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002364:	049b      	lsls	r3, r3, #18
 8002366:	d510      	bpl.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002368:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800236a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800236c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002370:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002374:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002376:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800237a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	f040 8086 	bne.w	800248e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002382:	68d3      	ldr	r3, [r2, #12]
 8002384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002388:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	031f      	lsls	r7, r3, #12
 800238e:	d50f      	bpl.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002390:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002392:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002394:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002398:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800239c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800239e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a6:	d17e      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	68d3      	ldr	r3, [r2, #12]
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	035e      	lsls	r6, r3, #13
 80023b4:	d50f      	bpl.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b6:	4a4b      	ldr	r2, [pc, #300]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023b8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80023ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023be:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023c2:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023cc:	d176      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ce:	68d3      	ldr	r3, [r2, #12]
 80023d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	0458      	lsls	r0, r3, #17
 80023da:	d512      	bpl.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023dc:	4941      	ldr	r1, [pc, #260]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023de:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80023e0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023e4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023e8:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ea:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023f2:	d16e      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023f4:	2102      	movs	r1, #2
 80023f6:	1d20      	adds	r0, r4, #4
 80023f8:	f7ff fd8a 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	bf18      	it	ne
 8002400:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	0411      	lsls	r1, r2, #16
 8002406:	d508      	bpl.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002408:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800240a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800240c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002414:	4303      	orrs	r3, r0
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800241a:	03d3      	lsls	r3, r2, #15
 800241c:	d509      	bpl.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800241e:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002420:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002424:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800242c:	430b      	orrs	r3, r1
 800242e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002432:	4628      	mov	r0, r5
 8002434:	b002      	add	sp, #8
 8002436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800243a:	429a      	cmp	r2, r3
 800243c:	f43f aeef 	beq.w	800221e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002440:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800245c:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002462:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002466:	f57f aeda 	bpl.w	800221e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 800246a:	f7fe ff95 	bl	8001398 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002472:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002478:	0799      	lsls	r1, r3, #30
 800247a:	f53f aed0 	bmi.w	800221e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe ff8b 	bl	8001398 <HAL_GetTick>
 8002482:	1b40      	subs	r0, r0, r5
 8002484:	4548      	cmp	r0, r9
 8002486:	d9f5      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002488:	e6ea      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800248a:	4635      	mov	r5, r6
 800248c:	e6f0      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800248e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002492:	f47f af7a 	bne.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002496:	2101      	movs	r1, #1
 8002498:	1d20      	adds	r0, r4, #4
 800249a:	f7ff fd39 	bl	8001f10 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800249e:	2800      	cmp	r0, #0
 80024a0:	bf18      	it	ne
 80024a2:	4605      	movne	r5, r0
 80024a4:	e771      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024a6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024aa:	d181      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ac:	2101      	movs	r1, #1
 80024ae:	1d20      	adds	r0, r4, #4
 80024b0:	f7ff fd2e 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024b4:	2800      	cmp	r0, #0
 80024b6:	bf18      	it	ne
 80024b8:	4605      	movne	r5, r0
 80024ba:	e779      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024bc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024c0:	d189      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c2:	2101      	movs	r1, #1
 80024c4:	1d20      	adds	r0, r4, #4
 80024c6:	f7ff fd23 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024ca:	2800      	cmp	r0, #0
 80024cc:	bf18      	it	ne
 80024ce:	4605      	movne	r5, r0
 80024d0:	e781      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024d2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80024d6:	d194      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024d8:	2102      	movs	r1, #2
 80024da:	f104 0020 	add.w	r0, r4, #32
 80024de:	f7ff fd9f 	bl	8002020 <RCCEx_PLLSAI2_Config>
 80024e2:	e78b      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80024e4:	40021000 	.word	0x40021000

080024e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80024ec:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ee:	6921      	ldr	r1, [r4, #16]
 80024f0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024f2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f4:	69c0      	ldr	r0, [r0, #28]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	6961      	ldr	r1, [r4, #20]
 80024fa:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024fc:	498f      	ldr	r1, [pc, #572]	; (800273c <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002500:	4029      	ands	r1, r5
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68e1      	ldr	r1, [r4, #12]
 800250a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002512:	4a8b      	ldr	r2, [pc, #556]	; (8002740 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002514:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002516:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002518:	bf1c      	itt	ne
 800251a:	6a22      	ldrne	r2, [r4, #32]
 800251c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002528:	4a86      	ldr	r2, [pc, #536]	; (8002744 <UART_SetConfig+0x25c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d117      	bne.n	800255e <UART_SetConfig+0x76>
 800252e:	4b86      	ldr	r3, [pc, #536]	; (8002748 <UART_SetConfig+0x260>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	3b01      	subs	r3, #1
 800253a:	2b02      	cmp	r3, #2
 800253c:	f200 80cf 	bhi.w	80026de <UART_SetConfig+0x1f6>
 8002540:	4a82      	ldr	r2, [pc, #520]	; (800274c <UART_SetConfig+0x264>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002544:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002548:	f040 8099 	bne.w	800267e <UART_SetConfig+0x196>
  {
    switch (clocksource)
 800254c:	2b08      	cmp	r3, #8
 800254e:	d822      	bhi.n	8002596 <UART_SetConfig+0xae>
 8002550:	e8df f003 	tbb	[pc, r3]
 8002554:	2193c8d9 	.word	0x2193c8d9
 8002558:	212121ce 	.word	0x212121ce
 800255c:	dd          	.byte	0xdd
 800255d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800255e:	4a7c      	ldr	r2, [pc, #496]	; (8002750 <UART_SetConfig+0x268>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d106      	bne.n	8002572 <UART_SetConfig+0x8a>
 8002564:	4b78      	ldr	r3, [pc, #480]	; (8002748 <UART_SetConfig+0x260>)
 8002566:	4a7b      	ldr	r2, [pc, #492]	; (8002754 <UART_SetConfig+0x26c>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	e7e7      	b.n	8002542 <UART_SetConfig+0x5a>
 8002572:	4a79      	ldr	r2, [pc, #484]	; (8002758 <UART_SetConfig+0x270>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d119      	bne.n	80025ac <UART_SetConfig+0xc4>
 8002578:	4b73      	ldr	r3, [pc, #460]	; (8002748 <UART_SetConfig+0x260>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002582:	2b20      	cmp	r3, #32
 8002584:	f000 80b7 	beq.w	80026f6 <UART_SetConfig+0x20e>
 8002588:	d807      	bhi.n	800259a <UART_SetConfig+0xb2>
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b8 	beq.w	8002700 <UART_SetConfig+0x218>
 8002590:	2b10      	cmp	r3, #16
 8002592:	f000 80aa 	beq.w	80026ea <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002596:	2001      	movs	r0, #1
 8002598:	e04e      	b.n	8002638 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800259a:	2b30      	cmp	r3, #48	; 0x30
 800259c:	d1fb      	bne.n	8002596 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025a2:	f000 80b4 	beq.w	800270e <UART_SetConfig+0x226>
 80025a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025aa:	e083      	b.n	80026b4 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025ac:	4a6b      	ldr	r2, [pc, #428]	; (800275c <UART_SetConfig+0x274>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10f      	bne.n	80025d2 <UART_SetConfig+0xea>
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <UART_SetConfig+0x260>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	f000 809a 	beq.w	80026f6 <UART_SetConfig+0x20e>
 80025c2:	d804      	bhi.n	80025ce <UART_SetConfig+0xe6>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 809b 	beq.w	8002700 <UART_SetConfig+0x218>
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	e7e1      	b.n	8002592 <UART_SetConfig+0xaa>
 80025ce:	2bc0      	cmp	r3, #192	; 0xc0
 80025d0:	e7e4      	b.n	800259c <UART_SetConfig+0xb4>
 80025d2:	4a63      	ldr	r2, [pc, #396]	; (8002760 <UART_SetConfig+0x278>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d112      	bne.n	80025fe <UART_SetConfig+0x116>
 80025d8:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <UART_SetConfig+0x260>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e6:	f000 8086 	beq.w	80026f6 <UART_SetConfig+0x20e>
 80025ea:	d805      	bhi.n	80025f8 <UART_SetConfig+0x110>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8087 	beq.w	8002700 <UART_SetConfig+0x218>
 80025f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f6:	e7cc      	b.n	8002592 <UART_SetConfig+0xaa>
 80025f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025fc:	e7ce      	b.n	800259c <UART_SetConfig+0xb4>
 80025fe:	4a50      	ldr	r2, [pc, #320]	; (8002740 <UART_SetConfig+0x258>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d1c8      	bne.n	8002596 <UART_SetConfig+0xae>
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <UART_SetConfig+0x260>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800260e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002612:	d015      	beq.n	8002640 <UART_SetConfig+0x158>
 8002614:	d806      	bhi.n	8002624 <UART_SetConfig+0x13c>
 8002616:	b15b      	cbz	r3, 8002630 <UART_SetConfig+0x148>
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261c:	d1bb      	bne.n	8002596 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 800261e:	f7ff f8db 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
        break;
 8002622:	e007      	b.n	8002634 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002628:	d1b5      	bne.n	8002596 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 800262a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800262e:	e008      	b.n	8002642 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002630:	f7ff fc4a 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002634:	b928      	cbnz	r0, 8002642 <UART_SetConfig+0x15a>
 8002636:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002638:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800263a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 800263e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002640:	4848      	ldr	r0, [pc, #288]	; (8002764 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002642:	6862      	ldr	r2, [r4, #4]
 8002644:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002648:	4283      	cmp	r3, r0
 800264a:	d8a4      	bhi.n	8002596 <UART_SetConfig+0xae>
 800264c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002650:	d8a1      	bhi.n	8002596 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002652:	0851      	lsrs	r1, r2, #1
 8002654:	2500      	movs	r5, #0
 8002656:	468c      	mov	ip, r1
 8002658:	f44f 7680 	mov.w	r6, #256	; 0x100
 800265c:	4629      	mov	r1, r5
 800265e:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002662:	462b      	mov	r3, r5
 8002664:	4660      	mov	r0, ip
 8002666:	f7fe fa9f 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <UART_SetConfig+0x280>)
 800266c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002670:	429a      	cmp	r2, r3
 8002672:	d890      	bhi.n	8002596 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	60d8      	str	r0, [r3, #12]
 8002678:	e7dd      	b.n	8002636 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 800267a:	483a      	ldr	r0, [pc, #232]	; (8002764 <UART_SetConfig+0x27c>)
 800267c:	e047      	b.n	800270e <UART_SetConfig+0x226>
    switch (clocksource)
 800267e:	2b08      	cmp	r3, #8
 8002680:	d889      	bhi.n	8002596 <UART_SetConfig+0xae>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <UART_SetConfig+0x1a0>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	080026ad 	.word	0x080026ad
 800268c:	080026d3 	.word	0x080026d3
 8002690:	080026fd 	.word	0x080026fd
 8002694:	08002597 	.word	0x08002597
 8002698:	080026d9 	.word	0x080026d9
 800269c:	08002597 	.word	0x08002597
 80026a0:	08002597 	.word	0x08002597
 80026a4:	08002597 	.word	0x08002597
 80026a8:	080025a7 	.word	0x080025a7
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ac:	f7ff fc0c 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d0c0      	beq.n	8002636 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026b4:	6862      	ldr	r2, [r4, #4]
 80026b6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80026ba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026be:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80026c2:	f1a3 0110 	sub.w	r1, r3, #16
 80026c6:	4291      	cmp	r1, r2
 80026c8:	f63f af65 	bhi.w	8002596 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	60d3      	str	r3, [r2, #12]
 80026d0:	e7b1      	b.n	8002636 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026d2:	f7ff fc0b 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
        break;
 80026d6:	e7eb      	b.n	80026b0 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 80026d8:	f7ff f87e 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
        break;
 80026dc:	e7e8      	b.n	80026b0 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026e2:	d1f6      	bne.n	80026d2 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026e4:	f7ff fc02 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
        break;
 80026e8:	e00f      	b.n	800270a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026ee:	d1f3      	bne.n	80026d8 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 80026f0:	f7ff f872 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
        break;
 80026f4:	e009      	b.n	800270a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026fa:	d0be      	beq.n	800267a <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 80026fc:	4819      	ldr	r0, [pc, #100]	; (8002764 <UART_SetConfig+0x27c>)
 80026fe:	e7d9      	b.n	80026b4 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002700:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002704:	d1d2      	bne.n	80026ac <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002706:	f7ff fbdf 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800270a:	2800      	cmp	r0, #0
 800270c:	d093      	beq.n	8002636 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800270e:	6862      	ldr	r2, [r4, #4]
 8002710:	0853      	lsrs	r3, r2, #1
 8002712:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002716:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800271a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800271e:	f1a3 0110 	sub.w	r1, r3, #16
 8002722:	4291      	cmp	r1, r2
 8002724:	f63f af37 	bhi.w	8002596 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002728:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800272c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800272e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002730:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002734:	4313      	orrs	r3, r2
 8002736:	60cb      	str	r3, [r1, #12]
 8002738:	e77d      	b.n	8002636 <UART_SetConfig+0x14e>
 800273a:	bf00      	nop
 800273c:	efff69f3 	.word	0xefff69f3
 8002740:	40008000 	.word	0x40008000
 8002744:	40013800 	.word	0x40013800
 8002748:	40021000 	.word	0x40021000
 800274c:	080085fc 	.word	0x080085fc
 8002750:	40004400 	.word	0x40004400
 8002754:	080085ff 	.word	0x080085ff
 8002758:	40004800 	.word	0x40004800
 800275c:	40004c00 	.word	0x40004c00
 8002760:	40005000 	.word	0x40005000
 8002764:	00f42400 	.word	0x00f42400
 8002768:	000ffcff 	.word	0x000ffcff

0800276c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800276c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800276e:	07da      	lsls	r2, r3, #31
{
 8002770:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002772:	d506      	bpl.n	8002782 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002774:	6801      	ldr	r1, [r0, #0]
 8002776:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002778:	684a      	ldr	r2, [r1, #4]
 800277a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800277e:	4322      	orrs	r2, r4
 8002780:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002782:	079c      	lsls	r4, r3, #30
 8002784:	d506      	bpl.n	8002794 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002786:	6801      	ldr	r1, [r0, #0]
 8002788:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800278a:	684a      	ldr	r2, [r1, #4]
 800278c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002790:	4322      	orrs	r2, r4
 8002792:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002794:	0759      	lsls	r1, r3, #29
 8002796:	d506      	bpl.n	80027a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002798:	6801      	ldr	r1, [r0, #0]
 800279a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800279c:	684a      	ldr	r2, [r1, #4]
 800279e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a2:	4322      	orrs	r2, r4
 80027a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027a6:	071a      	lsls	r2, r3, #28
 80027a8:	d506      	bpl.n	80027b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027aa:	6801      	ldr	r1, [r0, #0]
 80027ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80027ae:	684a      	ldr	r2, [r1, #4]
 80027b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b4:	4322      	orrs	r2, r4
 80027b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027b8:	06dc      	lsls	r4, r3, #27
 80027ba:	d506      	bpl.n	80027ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027bc:	6801      	ldr	r1, [r0, #0]
 80027be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80027c0:	688a      	ldr	r2, [r1, #8]
 80027c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c6:	4322      	orrs	r2, r4
 80027c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027ca:	0699      	lsls	r1, r3, #26
 80027cc:	d506      	bpl.n	80027dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80027d2:	688a      	ldr	r2, [r1, #8]
 80027d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d8:	4322      	orrs	r2, r4
 80027da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027dc:	065a      	lsls	r2, r3, #25
 80027de:	d50f      	bpl.n	8002800 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027e0:	6801      	ldr	r1, [r0, #0]
 80027e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80027e4:	684a      	ldr	r2, [r1, #4]
 80027e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80027ea:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027f0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027f2:	d105      	bne.n	8002800 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027f4:	684a      	ldr	r2, [r1, #4]
 80027f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027f8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80027fc:	4322      	orrs	r2, r4
 80027fe:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	d506      	bpl.n	8002812 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002804:	6802      	ldr	r2, [r0, #0]
 8002806:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002808:	6853      	ldr	r3, [r2, #4]
 800280a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800280e:	430b      	orrs	r3, r1
 8002810:	6053      	str	r3, [r2, #4]
  }
}
 8002812:	bd10      	pop	{r4, pc}

08002814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002818:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800281c:	4604      	mov	r4, r0
 800281e:	460e      	mov	r6, r1
 8002820:	4615      	mov	r5, r2
 8002822:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	69d3      	ldr	r3, [r2, #28]
 8002828:	ea36 0303 	bics.w	r3, r6, r3
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	42ab      	cmp	r3, r5
 8002834:	d001      	beq.n	800283a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002836:	2000      	movs	r0, #0
 8002838:	e025      	b.n	8002886 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800283a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800283e:	d0f2      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe fdaa 	bl	8001398 <HAL_GetTick>
 8002844:	1bc0      	subs	r0, r0, r7
 8002846:	4540      	cmp	r0, r8
 8002848:	6820      	ldr	r0, [r4, #0]
 800284a:	d802      	bhi.n	8002852 <UART_WaitOnFlagUntilTimeout+0x3e>
 800284c:	f1b8 0f00 	cmp.w	r8, #0
 8002850:	d11b      	bne.n	800288a <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002856:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	e840 3200 	strex	r2, r3, [r0]
 800285e:	2a00      	cmp	r2, #0
 8002860:	d1f7      	bne.n	8002852 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002862:	f100 0308 	add.w	r3, r0, #8
 8002866:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	f100 0108 	add.w	r1, r0, #8
 8002872:	e841 3200 	strex	r2, r3, [r1]
 8002876:	2a00      	cmp	r2, #0
 8002878:	d1f3      	bne.n	8002862 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800287a:	2320      	movs	r3, #32
 800287c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800287e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002880:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002884:	2003      	movs	r0, #3
}
 8002886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800288a:	6803      	ldr	r3, [r0, #0]
 800288c:	075a      	lsls	r2, r3, #29
 800288e:	d5c9      	bpl.n	8002824 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002890:	69c3      	ldr	r3, [r0, #28]
 8002892:	051b      	lsls	r3, r3, #20
 8002894:	d5c6      	bpl.n	8002824 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800289a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	e840 3200 	strex	r2, r3, [r0]
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	d1f7      	bne.n	800289c <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	f100 0308 	add.w	r3, r0, #8
 80028b0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	f100 0108 	add.w	r1, r0, #8
 80028bc:	e841 3200 	strex	r2, r3, [r1]
 80028c0:	2a00      	cmp	r2, #0
 80028c2:	d1f3      	bne.n	80028ac <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80028c4:	2320      	movs	r3, #32
 80028c6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028c8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80028ce:	e7d7      	b.n	8002880 <UART_WaitOnFlagUntilTimeout+0x6c>

080028d0 <HAL_UART_Transmit>:
{
 80028d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80028d4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80028d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80028d8:	2b20      	cmp	r3, #32
{
 80028da:	4604      	mov	r4, r0
 80028dc:	460e      	mov	r6, r1
 80028de:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80028e0:	d14e      	bne.n	8002980 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80028e2:	2900      	cmp	r1, #0
 80028e4:	d04a      	beq.n	800297c <HAL_UART_Transmit+0xac>
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d048      	beq.n	800297c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80028ea:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d046      	beq.n	8002980 <HAL_UART_Transmit+0xb0>
 80028f2:	2301      	movs	r3, #1
 80028f4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fa:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002900:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002902:	f7fe fd49 	bl	8001398 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002906:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002908:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002910:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002912:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002916:	d103      	bne.n	8002920 <HAL_UART_Transmit+0x50>
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	b90a      	cbnz	r2, 8002920 <HAL_UART_Transmit+0x50>
 800291c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800291e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002920:	2200      	movs	r2, #0
 8002922:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002926:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800292e:	b292      	uxth	r2, r2
 8002930:	b93a      	cbnz	r2, 8002942 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	4620      	mov	r0, r4
 8002936:	f7ff ff6d 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 800293a:	b950      	cbnz	r0, 8002952 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800293c:	2320      	movs	r3, #32
 800293e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002940:	e008      	b.n	8002954 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002942:	2200      	movs	r2, #0
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	4620      	mov	r0, r4
 8002948:	9303      	str	r3, [sp, #12]
 800294a:	f7ff ff63 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 800294e:	9b03      	ldr	r3, [sp, #12]
 8002950:	b118      	cbz	r0, 800295a <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8002952:	2003      	movs	r0, #3
}
 8002954:	b004      	add	sp, #16
 8002956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800295a:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800295c:	b95e      	cbnz	r6, 8002976 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800295e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002962:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002966:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002968:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800296c:	3a01      	subs	r2, #1
 800296e:	b292      	uxth	r2, r2
 8002970:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002974:	e7d7      	b.n	8002926 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002976:	f816 2b01 	ldrb.w	r2, [r6], #1
 800297a:	e7f4      	b.n	8002966 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e7e9      	b.n	8002954 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002980:	2002      	movs	r0, #2
 8002982:	e7e7      	b.n	8002954 <HAL_UART_Transmit+0x84>

08002984 <UART_CheckIdleState>:
{
 8002984:	b530      	push	{r4, r5, lr}
 8002986:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	2500      	movs	r5, #0
{
 800298a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002990:	f7fe fd02 	bl	8001398 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800299a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800299c:	d415      	bmi.n	80029ca <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	0752      	lsls	r2, r2, #29
 80029a4:	d509      	bpl.n	80029ba <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029b0:	2200      	movs	r2, #0
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff ff2e 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 80029b8:	b9a0      	cbnz	r0, 80029e4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80029ba:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029bc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80029be:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80029c0:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c6:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80029c8:	e00d      	b.n	80029e6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80029ce:	9200      	str	r2, [sp, #0]
 80029d0:	9003      	str	r0, [sp, #12]
 80029d2:	462a      	mov	r2, r5
 80029d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff ff1b 	bl	8002814 <UART_WaitOnFlagUntilTimeout>
 80029de:	9b03      	ldr	r3, [sp, #12]
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d0dc      	beq.n	800299e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80029e4:	2003      	movs	r0, #3
}
 80029e6:	b005      	add	sp, #20
 80029e8:	bd30      	pop	{r4, r5, pc}

080029ea <HAL_UART_Init>:
{
 80029ea:	b510      	push	{r4, lr}
  if (huart == NULL)
 80029ec:	4604      	mov	r4, r0
 80029ee:	b340      	cbz	r0, 8002a42 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80029f0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80029f2:	b91b      	cbnz	r3, 80029fc <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80029f4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80029f8:	f7fe fbb0 	bl	800115c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029fc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029fe:	2324      	movs	r3, #36	; 0x24
 8002a00:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7ff fd6c 	bl	80024e8 <UART_SetConfig>
 8002a10:	2801      	cmp	r0, #1
 8002a12:	d016      	beq.n	8002a42 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a16:	b113      	cbz	r3, 8002a1e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fea7 	bl	800276c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a2e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002a36:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002a3e:	f7ff bfa1 	b.w	8002984 <UART_CheckIdleState>
}
 8002a42:	2001      	movs	r0, #1
 8002a44:	bd10      	pop	{r4, pc}
	...

08002a48 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8002a48:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <_put_c_driver+0x24>)
{
 8002a4c:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b13b      	cbz	r3, 8002a64 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002a54:	4806      	ldr	r0, [pc, #24]	; (8002a70 <_put_c_driver+0x28>)
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f10d 0107 	add.w	r1, sp, #7
 8002a60:	f7ff ff36 	bl	80028d0 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 8002a64:	b003      	add	sp, #12
 8002a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a6a:	bf00      	nop
 8002a6c:	200000f8 	.word	0x200000f8
 8002a70:	20000858 	.word	0x20000858

08002a74 <_write>:
{
 8002a74:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8002a76:	1e14      	subs	r4, r2, #0
 8002a78:	da0a      	bge.n	8002a90 <_write+0x1c>
 8002a7a:	3801      	subs	r0, #1
 8002a7c:	2801      	cmp	r0, #1
 8002a7e:	d907      	bls.n	8002a90 <_write+0x1c>
    errno = EBADF;
 8002a80:	f003 fe82 	bl	8006788 <__errno>
 8002a84:	2309      	movs	r3, #9
 8002a86:	6003      	str	r3, [r0, #0]
    return -1;
 8002a88:	f04f 34ff 	mov.w	r4, #4294967295
}
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <_write+0x38>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f9      	beq.n	8002a8c <_write+0x18>
 8002a98:	b2a2      	uxth	r2, r4
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <_write+0x3c>)
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	f7ff ff16 	bl	80028d0 <HAL_UART_Transmit>
  return (status ? count : 0);
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	bf18      	it	ne
 8002aa8:	2400      	movne	r4, #0
 8002aaa:	e7ef      	b.n	8002a8c <_write+0x18>
 8002aac:	200000f8 	.word	0x200000f8
 8002ab0:	20000858 	.word	0x20000858

08002ab4 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8002ab4:	b40f      	push	{r0, r1, r2, r3}
 8002ab6:	b507      	push	{r0, r1, r2, lr}
 8002ab8:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002aba:	2100      	movs	r1, #0
{
 8002abc:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002ac0:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <lc_print+0x20>)
  va_start(ap, fmt);
 8002ac2:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002ac4:	f000 f93e 	bl	8002d44 <vlc_print>
  va_end(ap);
}
 8002ac8:	b003      	add	sp, #12
 8002aca:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ace:	b004      	add	sp, #16
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	08002a49 	.word	0x08002a49

08002ad8 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002ad8:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8002ada:	4d11      	ldr	r5, [pc, #68]	; (8002b20 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002adc:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8002ade:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002ae0:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002ae4:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002ae8:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002aec:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002aee:	f002 ff1b 	bl	8005928 <malloc>

  /* remember size */
  if (ptr) {
 8002af2:	b1a0      	cbz	r0, 8002b1e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002af4:	1903      	adds	r3, r0, r4
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002af8:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002afa:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	07db      	lsls	r3, r3, #31
 8002b00:	d50c      	bpl.n	8002b1c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002b02:	68eb      	ldr	r3, [r5, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8002b08:	686b      	ldr	r3, [r5, #4]
 8002b0a:	4423      	add	r3, r4
 8002b0c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8002b0e:	69ab      	ldr	r3, [r5, #24]
 8002b10:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8002b12:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8002b14:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8002b16:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8002b18:	bf88      	it	hi
 8002b1a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8002b1c:	3004      	adds	r0, #4
}
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
 8002b20:	200008e4 	.word	0x200008e4
 8002b24:	efdcba98 	.word	0xefdcba98

08002b28 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <ai_mnetwork_handle+0x18>)
 8002b2a:	b120      	cbz	r0, 8002b36 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8002b2c:	4298      	cmp	r0, r3
 8002b2e:	bf0c      	ite	eq
 8002b30:	4618      	moveq	r0, r3
 8002b32:	2000      	movne	r0, #0
 8002b34:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8002b36:	681a      	ldr	r2, [r3, #0]
            return inst;
 8002b38:	2a00      	cmp	r2, #0
 8002b3a:	bf08      	it	eq
 8002b3c:	4618      	moveq	r0, r3
}
 8002b3e:	4770      	bx	lr
 8002b40:	20000900 	.word	0x20000900

08002b44 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8002b44:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002b46:	4604      	mov	r4, r0
 8002b48:	b160      	cbz	r0, 8002b64 <ai_mnetwork_is_valid.constprop.0+0x20>
 8002b4a:	f7fd fb91 	bl	8000270 <strlen>
 8002b4e:	2807      	cmp	r0, #7
 8002b50:	4602      	mov	r2, r0
 8002b52:	d107      	bne.n	8002b64 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8002b54:	4804      	ldr	r0, [pc, #16]	; (8002b68 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8002b56:	4621      	mov	r1, r4
 8002b58:	f003 fda9 	bl	80066ae <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002b5c:	fab0 f080 	clz	r0, r0
 8002b60:	0940      	lsrs	r0, r0, #5
}
 8002b62:	bd10      	pop	{r4, pc}
    return false;
 8002b64:	2000      	movs	r0, #0
 8002b66:	e7fc      	b.n	8002b62 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8002b68:	0800860c 	.word	0x0800860c

08002b6c <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8002b70:	f7ff ffe8 	bl	8002b44 <ai_mnetwork_is_valid.constprop.0>
 8002b74:	b920      	cbnz	r0, 8002b80 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8002b76:	2c00      	cmp	r4, #0
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <ai_mnetwork_find+0x18>)
 8002b7a:	bf18      	it	ne
 8002b7c:	2000      	movne	r0, #0
}
 8002b7e:	bd10      	pop	{r4, pc}
            return entry->name;
 8002b80:	4800      	ldr	r0, [pc, #0]	; (8002b84 <ai_mnetwork_find+0x18>)
 8002b82:	e7fc      	b.n	8002b7e <ai_mnetwork_find+0x12>
 8002b84:	0800860c 	.word	0x0800860c

08002b88 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8002b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b8a:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002b8c:	2000      	movs	r0, #0
{
 8002b8e:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002b90:	f7ff ffca 	bl	8002b28 <ai_mnetwork_handle>
{
 8002b94:	460d      	mov	r5, r1

    if (!inst) {
 8002b96:	4604      	mov	r4, r0
 8002b98:	b1e0      	cbz	r0, 8002bd4 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	f7ff ffd2 	bl	8002b44 <ai_mnetwork_is_valid.constprop.0>
 8002ba0:	9901      	ldr	r1, [sp, #4]
 8002ba2:	b910      	cbnz	r0, 8002baa <ai_mnetwork_create+0x22>
 8002ba4:	2214      	movs	r2, #20
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	e00d      	b.n	8002bc6 <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 fb6e 	bl	800328c <ai_network_create>
 8002bb0:	b2c2      	uxtb	r2, r0
 8002bb2:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8002bb6:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8002bba:	d104      	bne.n	8002bc6 <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8002bbc:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <ai_mnetwork_create+0x50>)
 8002bbe:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8002bc0:	6829      	ldr	r1, [r5, #0]
 8002bc2:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8002bc4:	602c      	str	r4, [r5, #0]
        return err;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f362 0007 	bfi	r0, r2, #0, #8
 8002bcc:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	2231      	movs	r2, #49	; 0x31
 8002bd6:	e7e6      	b.n	8002ba6 <ai_mnetwork_create+0x1e>
 8002bd8:	08008614 	.word	0x08008614

08002bdc <ai_mnetwork_init>:
        return err;
}

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8002bdc:	b530      	push	{r4, r5, lr}
 8002bde:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002be0:	f7ff ffa2 	bl	8002b28 <ai_mnetwork_handle>
    if (inn) {
 8002be4:	4604      	mov	r4, r0
 8002be6:	b168      	cbz	r0, 8002c04 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8002be8:	6803      	ldr	r3, [r0, #0]
 8002bea:	4668      	mov	r0, sp
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002bf0:	2500      	movs	r5, #0
 8002bf2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8002bf6:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002bf8:	42aa      	cmp	r2, r5
 8002bfa:	dc05      	bgt.n	8002c08 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	6860      	ldr	r0, [r4, #4]
 8002c00:	4669      	mov	r1, sp
 8002c02:	4798      	blx	r3
    }
    else
        return false;
}
 8002c04:	b00f      	add	sp, #60	; 0x3c
 8002c06:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8002c10:	a803      	add	r0, sp, #12
 8002c12:	f000 fc25 	bl	8003460 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002c16:	3501      	adds	r5, #1
 8002c18:	e7eb      	b.n	8002bf2 <ai_mnetwork_init+0x16>

08002c1a <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8002c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8002c1e:	6896      	ldr	r6, [r2, #8]
{
 8002c20:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8002c22:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8002c24:	f016 0304 	ands.w	r3, r6, #4
{
 8002c28:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8002c2a:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8002c2e:	d028      	beq.n	8002c82 <_write_number+0x68>
    if ((int64_t)number < 0) {
 8002c30:	42a9      	cmp	r1, r5
 8002c32:	da07      	bge.n	8002c44 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8002c34:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8002c36:	4240      	negs	r0, r0
      specifier->width -= 1;
 8002c38:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8002c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8002c40:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8002c42:	252d      	movs	r5, #45	; 0x2d
 8002c44:	f016 0f08 	tst.w	r6, #8
 8002c48:	bf14      	ite	ne
 8002c4a:	f04f 0841 	movne.w	r8, #65	; 0x41
 8002c4e:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8002c52:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002c56:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8002c58:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002c5c:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8002c60:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8002c64:	f1ba 0f00 	cmp.w	sl, #0
 8002c68:	d033      	beq.n	8002cd2 <_write_number+0xb8>
      chr = number & 0x0F;
 8002c6a:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8002c6e:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002c70:	2b09      	cmp	r3, #9
      t = number >> 4;
 8002c72:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8002c76:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002c7a:	d906      	bls.n	8002c8a <_write_number+0x70>
 8002c7c:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e004      	b.n	8002c8c <_write_number+0x72>
  char sign_neg = 0;
 8002c82:	461d      	mov	r5, r3
 8002c84:	e7de      	b.n	8002c44 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8002c86:	4617      	mov	r7, r2
 8002c88:	e7ea      	b.n	8002c60 <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002c8a:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8002c8c:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8002c90:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8002c94:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8002c98:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8002c9c:	d1f3      	bne.n	8002c86 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8002c9e:	f006 0101 	and.w	r1, r6, #1
 8002ca2:	b155      	cbz	r5, 8002cba <_write_number+0xa0>
 8002ca4:	b949      	cbnz	r1, 8002cba <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8002ca6:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8002caa:	eb0d 0203 	add.w	r2, sp, r3
 8002cae:	232d      	movs	r3, #45	; 0x2d
 8002cb0:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 8002cb4:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8002cb8:	1eba      	subs	r2, r7, #2
 8002cba:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	bf14      	ite	ne
 8002cc0:	2130      	movne	r1, #48	; 0x30
 8002cc2:	2120      	moveq	r1, #32
 8002cc4:	f006 0602 	and.w	r6, r6, #2
 8002cc8:	455b      	cmp	r3, fp
 8002cca:	dd13      	ble.n	8002cf4 <_write_number+0xda>
 8002ccc:	b166      	cbz	r6, 8002ce8 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8002cce:	b9a5      	cbnz	r5, 8002cfa <_write_number+0xe0>
 8002cd0:	e01c      	b.n	8002d0c <_write_number+0xf2>
      t = number / 10;
 8002cd2:	220a      	movs	r2, #10
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f7fd ff67 	bl	8000ba8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8002cda:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002cde:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8002ce2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8002ce6:	e7ca      	b.n	8002c7e <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8002ce8:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8002cec:	f10b 0b01 	add.w	fp, fp, #1
 8002cf0:	3a01      	subs	r2, #1
 8002cf2:	e7e9      	b.n	8002cc8 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8002cf4:	b155      	cbz	r5, 8002d0c <_write_number+0xf2>
 8002cf6:	455b      	cmp	r3, fp
 8002cf8:	d108      	bne.n	8002d0c <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8002cfa:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8002cfe:	446b      	add	r3, sp
 8002d00:	212d      	movs	r1, #45	; 0x2d
 8002d02:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8002d06:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8002d0a:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8002d0c:	eb0d 0602 	add.w	r6, sp, r2
 8002d10:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8002d12:	68e3      	ldr	r3, [r4, #12]
 8002d14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d18:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8002d1a:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8002d1c:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8002d1e:	45ab      	cmp	fp, r5
 8002d20:	d1f7      	bne.n	8002d12 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8002d22:	68a3      	ldr	r3, [r4, #8]
 8002d24:	079b      	lsls	r3, r3, #30
 8002d26:	d408      	bmi.n	8002d3a <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8002d28:	4628      	mov	r0, r5
 8002d2a:	b011      	add	sp, #68	; 0x44
 8002d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8002d30:	68e3      	ldr	r3, [r4, #12]
 8002d32:	6920      	ldr	r0, [r4, #16]
 8002d34:	2120      	movs	r1, #32
 8002d36:	4798      	blx	r3
 8002d38:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	42ab      	cmp	r3, r5
 8002d3e:	dcf7      	bgt.n	8002d30 <_write_number+0x116>
 8002d40:	e7f2      	b.n	8002d28 <_write_number+0x10e>
	...

08002d44 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8002d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d48:	4682      	mov	sl, r0
 8002d4a:	b09d      	sub	sp, #116	; 0x74
 8002d4c:	4688      	mov	r8, r1
 8002d4e:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8002d50:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8002d54:	4613      	mov	r3, r2
 8002d56:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002d5a:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8002d5c:	b919      	cbnz	r1, 8002d66 <vlc_print+0x22>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8002d5e:	4658      	mov	r0, fp
 8002d60:	b01d      	add	sp, #116	; 0x74
 8002d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8002d66:	290a      	cmp	r1, #10
 8002d68:	d104      	bne.n	8002d74 <vlc_print+0x30>
      putc_fct(user, c);
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	47d0      	blx	sl
      count++;
 8002d6e:	f10b 0b01 	add.w	fp, fp, #1
 8002d72:	e0fb      	b.n	8002f6c <vlc_print+0x228>
    else if (c == '%')
 8002d74:	2925      	cmp	r1, #37	; 0x25
 8002d76:	d1f8      	bne.n	8002d6a <vlc_print+0x26>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002d7e:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8002d82:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002d86:	461f      	mov	r7, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	461e      	mov	r6, r3
      bool long_type = false;
 8002d90:	469c      	mov	ip, r3
      bool has_precision = false;
 8002d92:	469e      	mov	lr, r3
  return *(*fmtP)++;
 8002d94:	9904      	ldr	r1, [sp, #16]
 8002d96:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002d9a:	9104      	str	r1, [sp, #16]
        if (!c)
 8002d9c:	b32d      	cbz	r5, 8002dea <vlc_print+0xa6>
        else if (c == '0')
 8002d9e:	2d39      	cmp	r5, #57	; 0x39
 8002da0:	d814      	bhi.n	8002dcc <vlc_print+0x88>
 8002da2:	2d2c      	cmp	r5, #44	; 0x2c
 8002da4:	d91e      	bls.n	8002de4 <vlc_print+0xa0>
 8002da6:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 8002daa:	290c      	cmp	r1, #12
 8002dac:	d811      	bhi.n	8002dd2 <vlc_print+0x8e>
 8002dae:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002db2:	0044      	.short	0x0044
 8002db4:	001001ff 	.word	0x001001ff
 8002db8:	00470030 	.word	0x00470030
 8002dbc:	00470047 	.word	0x00470047
 8002dc0:	00470047 	.word	0x00470047
 8002dc4:	00470047 	.word	0x00470047
 8002dc8:	00470047 	.word	0x00470047
 8002dcc:	2d6c      	cmp	r5, #108	; 0x6c
 8002dce:	f000 8202 	beq.w	80031d6 <vlc_print+0x492>
          switch(c)
 8002dd2:	2d78      	cmp	r5, #120	; 0x78
 8002dd4:	d809      	bhi.n	8002dea <vlc_print+0xa6>
 8002dd6:	2d62      	cmp	r5, #98	; 0x62
 8002dd8:	d83d      	bhi.n	8002e56 <vlc_print+0x112>
 8002dda:	2d46      	cmp	r5, #70	; 0x46
 8002ddc:	f000 810c 	beq.w	8002ff8 <vlc_print+0x2b4>
 8002de0:	2d58      	cmp	r5, #88	; 0x58
 8002de2:	d06b      	beq.n	8002ebc <vlc_print+0x178>
 8002de4:	2d25      	cmp	r5, #37	; 0x25
 8002de6:	f000 8088 	beq.w	8002efa <vlc_print+0x1b6>
 8002dea:	b103      	cbz	r3, 8002dee <vlc_print+0xaa>
 8002dec:	9709      	str	r7, [sp, #36]	; 0x24
 8002dee:	b100      	cbz	r0, 8002df2 <vlc_print+0xae>
 8002df0:	9208      	str	r2, [sp, #32]
 8002df2:	9b00      	ldr	r3, [sp, #0]
 8002df4:	b103      	cbz	r3, 8002df8 <vlc_print+0xb4>
 8002df6:	9607      	str	r6, [sp, #28]
        putc_fct(user, '<');
 8002df8:	213c      	movs	r1, #60	; 0x3c
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	47d0      	blx	sl
        putc_fct(user, '!');
 8002dfe:	2121      	movs	r1, #33	; 0x21
 8002e00:	4640      	mov	r0, r8
 8002e02:	47d0      	blx	sl
        putc_fct(user, '>');
 8002e04:	213e      	movs	r1, #62	; 0x3e
 8002e06:	4640      	mov	r0, r8
 8002e08:	47d0      	blx	sl
        va_arg(vl, signed long);
 8002e0a:	3404      	adds	r4, #4
        count += 3;
 8002e0c:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 8002e10:	e0ac      	b.n	8002f6c <vlc_print+0x228>
          if (!specifier.width && !specifier.precision) {
 8002e12:	ea56 0502 	orrs.w	r5, r6, r2
 8002e16:	d105      	bne.n	8002e24 <vlc_print+0xe0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8002e18:	f047 0701 	orr.w	r7, r7, #1
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	462e      	mov	r6, r5
 8002e20:	2301      	movs	r3, #1
 8002e22:	e7b7      	b.n	8002d94 <vlc_print+0x50>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8002e24:	210a      	movs	r1, #10
          } else if (has_precision) {
 8002e26:	f1be 0f00 	cmp.w	lr, #0
 8002e2a:	d002      	beq.n	8002e32 <vlc_print+0xee>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8002e2c:	434a      	muls	r2, r1
 8002e2e:	4670      	mov	r0, lr
 8002e30:	e7b0      	b.n	8002d94 <vlc_print+0x50>
            specifier.width = specifier.width * 10 + (c - '0');
 8002e32:	434e      	muls	r6, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8002e34:	2101      	movs	r1, #1
 8002e36:	9100      	str	r1, [sp, #0]
 8002e38:	e7ac      	b.n	8002d94 <vlc_print+0x50>
          specifier.flags |= FLAG_NEG_PAD;
 8002e3a:	f047 0702 	orr.w	r7, r7, #2
 8002e3e:	e7ef      	b.n	8002e20 <vlc_print+0xdc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8002e40:	3d30      	subs	r5, #48	; 0x30
 8002e42:	210a      	movs	r1, #10
          if (has_precision) {
 8002e44:	f1be 0f00 	cmp.w	lr, #0
 8002e48:	d002      	beq.n	8002e50 <vlc_print+0x10c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8002e4a:	fb01 5202 	mla	r2, r1, r2, r5
 8002e4e:	e7ee      	b.n	8002e2e <vlc_print+0xea>
            specifier.width = specifier.width * 10 + (c - '0');
 8002e50:	fb01 5606 	mla	r6, r1, r6, r5
 8002e54:	e7ee      	b.n	8002e34 <vlc_print+0xf0>
          switch(c)
 8002e56:	3d63      	subs	r5, #99	; 0x63
 8002e58:	2d15      	cmp	r5, #21
 8002e5a:	d8c6      	bhi.n	8002dea <vlc_print+0xa6>
 8002e5c:	f20f 0e04 	addw	lr, pc, #4
 8002e60:	f85e f025 	ldr.w	pc, [lr, r5, lsl #2]
 8002e64:	08002f0d 	.word	0x08002f0d
 8002e68:	08002fc1 	.word	0x08002fc1
 8002e6c:	08002deb 	.word	0x08002deb
 8002e70:	08002ff9 	.word	0x08002ff9
 8002e74:	08002deb 	.word	0x08002deb
 8002e78:	08002deb 	.word	0x08002deb
 8002e7c:	08002fc1 	.word	0x08002fc1
 8002e80:	08002deb 	.word	0x08002deb
 8002e84:	08002deb 	.word	0x08002deb
 8002e88:	08002deb 	.word	0x08002deb
 8002e8c:	08002deb 	.word	0x08002deb
 8002e90:	08002deb 	.word	0x08002deb
 8002e94:	08002deb 	.word	0x08002deb
 8002e98:	08002fab 	.word	0x08002fab
 8002e9c:	08002deb 	.word	0x08002deb
 8002ea0:	08002deb 	.word	0x08002deb
 8002ea4:	08002f21 	.word	0x08002f21
 8002ea8:	08002deb 	.word	0x08002deb
 8002eac:	080031b7 	.word	0x080031b7
 8002eb0:	08002deb 	.word	0x08002deb
 8002eb4:	08002deb 	.word	0x08002deb
 8002eb8:	08002ed5 	.word	0x08002ed5
 8002ebc:	b103      	cbz	r3, 8002ec0 <vlc_print+0x17c>
 8002ebe:	9709      	str	r7, [sp, #36]	; 0x24
 8002ec0:	b100      	cbz	r0, 8002ec4 <vlc_print+0x180>
 8002ec2:	9208      	str	r2, [sp, #32]
 8002ec4:	9b00      	ldr	r3, [sp, #0]
 8002ec6:	b103      	cbz	r3, 8002eca <vlc_print+0x186>
 8002ec8:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8002eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed2:	e006      	b.n	8002ee2 <vlc_print+0x19e>
 8002ed4:	b103      	cbz	r3, 8002ed8 <vlc_print+0x194>
 8002ed6:	9709      	str	r7, [sp, #36]	; 0x24
 8002ed8:	b100      	cbz	r0, 8002edc <vlc_print+0x198>
 8002eda:	9208      	str	r2, [sp, #32]
 8002edc:	9b00      	ldr	r3, [sp, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <vlc_print+0x19e>
 8002ee0:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8002ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8002ee4:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8002ee8:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8002eec:	aa07      	add	r2, sp, #28
 8002eee:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8002ef0:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8002ef2:	f7ff fe92 	bl	8002c1a <_write_number>
 8002ef6:	4483      	add	fp, r0
            break;
 8002ef8:	e038      	b.n	8002f6c <vlc_print+0x228>
 8002efa:	b103      	cbz	r3, 8002efe <vlc_print+0x1ba>
 8002efc:	9709      	str	r7, [sp, #36]	; 0x24
 8002efe:	b100      	cbz	r0, 8002f02 <vlc_print+0x1be>
 8002f00:	9208      	str	r2, [sp, #32]
 8002f02:	9b00      	ldr	r3, [sp, #0]
 8002f04:	b103      	cbz	r3, 8002f08 <vlc_print+0x1c4>
 8002f06:	9607      	str	r6, [sp, #28]
            putc_fct(user, c);
 8002f08:	2125      	movs	r1, #37	; 0x25
 8002f0a:	e72e      	b.n	8002d6a <vlc_print+0x26>
 8002f0c:	b103      	cbz	r3, 8002f10 <vlc_print+0x1cc>
 8002f0e:	9709      	str	r7, [sp, #36]	; 0x24
 8002f10:	b100      	cbz	r0, 8002f14 <vlc_print+0x1d0>
 8002f12:	9208      	str	r2, [sp, #32]
 8002f14:	9b00      	ldr	r3, [sp, #0]
 8002f16:	b103      	cbz	r3, 8002f1a <vlc_print+0x1d6>
 8002f18:	9607      	str	r6, [sp, #28]
            putc_fct(user, t);
 8002f1a:	f814 1b04 	ldrb.w	r1, [r4], #4
 8002f1e:	e724      	b.n	8002d6a <vlc_print+0x26>
 8002f20:	b103      	cbz	r3, 8002f24 <vlc_print+0x1e0>
 8002f22:	9709      	str	r7, [sp, #36]	; 0x24
 8002f24:	b100      	cbz	r0, 8002f28 <vlc_print+0x1e4>
 8002f26:	9208      	str	r2, [sp, #32]
 8002f28:	9b00      	ldr	r3, [sp, #0]
 8002f2a:	b103      	cbz	r3, 8002f2e <vlc_print+0x1ea>
 8002f2c:	9607      	str	r6, [sp, #28]
            if (!str) str = "(null)";
 8002f2e:	4bab      	ldr	r3, [pc, #684]	; (80031dc <vlc_print+0x498>)
            str = va_arg(vl, char*);
 8002f30:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8002f34:	f1b9 0f00 	cmp.w	r9, #0
 8002f38:	bf08      	it	eq
 8002f3a:	4699      	moveq	r9, r3
  int len = strlen(str);
 8002f3c:	4648      	mov	r0, r9
 8002f3e:	f7fd f997 	bl	8000270 <strlen>
  if (specifier->precision) {
 8002f42:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8002f44:	4606      	mov	r6, r0
  if (specifier->precision) {
 8002f46:	b113      	cbz	r3, 8002f4e <vlc_print+0x20a>
    len = (len > specifier->precision)?specifier->precision:len;
 8002f48:	4298      	cmp	r0, r3
 8002f4a:	bfa8      	it	ge
 8002f4c:	461e      	movge	r6, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8002f4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002f50:	f017 0702 	ands.w	r7, r7, #2
 8002f54:	d015      	beq.n	8002f82 <vlc_print+0x23e>
  int count = 0;
 8002f56:	2500      	movs	r5, #0
 8002f58:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8002f5a:	eba2 0309 	sub.w	r3, r2, r9
 8002f5e:	429e      	cmp	r6, r3
 8002f60:	dc11      	bgt.n	8002f86 <vlc_print+0x242>
 8002f62:	2e00      	cmp	r6, #0
 8002f64:	bfa8      	it	ge
 8002f66:	19ad      	addge	r5, r5, r6
  if (specifier->flags & FLAG_NEG_PAD) {
 8002f68:	b9ef      	cbnz	r7, 8002fa6 <vlc_print+0x262>
            count += _write_string(str, &specifier);
 8002f6a:	44ab      	add	fp, r5
            break;
 8002f6c:	9a04      	ldr	r2, [sp, #16]
 8002f6e:	e6f1      	b.n	8002d54 <vlc_print+0x10>
      _WRITE_C(' ');
 8002f70:	2120      	movs	r1, #32
 8002f72:	4640      	mov	r0, r8
 8002f74:	47d0      	blx	sl
 8002f76:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8002f78:	9a07      	ldr	r2, [sp, #28]
 8002f7a:	19ab      	adds	r3, r5, r6
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	dcf7      	bgt.n	8002f70 <vlc_print+0x22c>
 8002f80:	e7ea      	b.n	8002f58 <vlc_print+0x214>
  int count = 0;
 8002f82:	463d      	mov	r5, r7
 8002f84:	e7f8      	b.n	8002f78 <vlc_print+0x234>
    _WRITE_C(*str++);
 8002f86:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002f8a:	9200      	str	r2, [sp, #0]
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	47d0      	blx	sl
 8002f90:	9a00      	ldr	r2, [sp, #0]
  for (int i = 0; i < len; i++) {
 8002f92:	e7e2      	b.n	8002f5a <vlc_print+0x216>
      _WRITE_C(' ');
 8002f94:	2120      	movs	r1, #32
 8002f96:	4640      	mov	r0, r8
 8002f98:	47d0      	blx	sl
 8002f9a:	3501      	adds	r5, #1
    for(int i = len; i < specifier->width; i++) {
 8002f9c:	9a07      	ldr	r2, [sp, #28]
 8002f9e:	1973      	adds	r3, r6, r5
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	dcf7      	bgt.n	8002f94 <vlc_print+0x250>
 8002fa4:	e7e1      	b.n	8002f6a <vlc_print+0x226>
 8002fa6:	1b76      	subs	r6, r6, r5
 8002fa8:	e7f8      	b.n	8002f9c <vlc_print+0x258>
 8002faa:	b103      	cbz	r3, 8002fae <vlc_print+0x26a>
 8002fac:	9709      	str	r7, [sp, #36]	; 0x24
 8002fae:	b100      	cbz	r0, 8002fb2 <vlc_print+0x26e>
 8002fb0:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8002fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8002fba:	2308      	movs	r3, #8
 8002fbc:	9307      	str	r3, [sp, #28]
 8002fbe:	e784      	b.n	8002eca <vlc_print+0x186>
 8002fc0:	b103      	cbz	r3, 8002fc4 <vlc_print+0x280>
 8002fc2:	9709      	str	r7, [sp, #36]	; 0x24
 8002fc4:	b100      	cbz	r0, 8002fc8 <vlc_print+0x284>
 8002fc6:	9208      	str	r2, [sp, #32]
 8002fc8:	9b00      	ldr	r3, [sp, #0]
 8002fca:	b103      	cbz	r3, 8002fce <vlc_print+0x28a>
 8002fcc:	9607      	str	r6, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 8002fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8002fd6:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 8002fd8:	1d25      	adds	r5, r4, #4
                val = va_arg(vl, signed int);
 8002fda:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8002fdc:	aa07      	add	r2, sp, #28
 8002fde:	f7ff fe1c 	bl	8002c1a <_write_number>
            break;
 8002fe2:	462c      	mov	r4, r5
            count += _write_number(val, &specifier);
 8002fe4:	4483      	add	fp, r0
            break;
 8002fe6:	e7c1      	b.n	8002f6c <vlc_print+0x228>
                val = va_arg(vl, uint64_t);
 8002fe8:	3407      	adds	r4, #7
 8002fea:	f024 0407 	bic.w	r4, r4, #7
 8002fee:	4625      	mov	r5, r4
 8002ff0:	6861      	ldr	r1, [r4, #4]
 8002ff2:	f855 0b08 	ldr.w	r0, [r5], #8
 8002ff6:	e7f1      	b.n	8002fdc <vlc_print+0x298>
 8002ff8:	b103      	cbz	r3, 8002ffc <vlc_print+0x2b8>
 8002ffa:	9709      	str	r7, [sp, #36]	; 0x24
 8002ffc:	b100      	cbz	r0, 8003000 <vlc_print+0x2bc>
 8002ffe:	9208      	str	r2, [sp, #32]
 8003000:	9b00      	ldr	r3, [sp, #0]
 8003002:	b103      	cbz	r3, 8003006 <vlc_print+0x2c2>
 8003004:	9607      	str	r6, [sp, #28]
            dbl = va_arg(vl, double);
 8003006:	3407      	adds	r4, #7
 8003008:	f024 0407 	bic.w	r4, r4, #7
 800300c:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8003010:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8003012:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8003016:	b90b      	cbnz	r3, 800301c <vlc_print+0x2d8>
              specifier.precision = 6;
 8003018:	2306      	movs	r3, #6
 800301a:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 800301c:	9d08      	ldr	r5, [sp, #32]
  double mul = 1.0;
 800301e:	4f70      	ldr	r7, [pc, #448]	; (80031e0 <vlc_print+0x49c>)
  for (int i=0;i <specifier->precision; i++)
 8003020:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8003024:	2600      	movs	r6, #0
  for (int i=0;i <specifier->precision; i++)
 8003026:	45a9      	cmp	r9, r5
    mul *= 10;
 8003028:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 800302c:	f2c0 80ac 	blt.w	8003188 <vlc_print+0x444>
  if (is_signed)
 8003030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003034:	2300      	movs	r3, #0
 8003036:	f7fd fd51 	bl	8000adc <__aeabi_dcmplt>
 800303a:	2800      	cmp	r0, #0
 800303c:	f000 80ae 	beq.w	800319c <vlc_print+0x458>
    number = -number;
 8003040:	9b00      	ldr	r3, [sp, #0]
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	9b01      	ldr	r3, [sp, #4]
 8003046:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800304a:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 800304c:	4632      	mov	r2, r6
 800304e:	463b      	mov	r3, r7
 8003050:	4964      	ldr	r1, [pc, #400]	; (80031e4 <vlc_print+0x4a0>)
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd fbfa 	bl	800084c <__aeabi_ddiv>
 8003058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800305c:	f7fd f916 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 8003060:	4632      	mov	r2, r6
 8003062:	463b      	mov	r3, r7
 8003064:	f7fd fac8 	bl	80005f8 <__aeabi_dmul>
 8003068:	f7fd fdb6 	bl	8000bd8 <__aeabi_d2ulz>
  uint32_t count = 0;
 800306c:	2600      	movs	r6, #0
  val = (uint64_t)(number * mul);
 800306e:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8003070:	273f      	movs	r7, #63	; 0x3f
    uint64_t t = val / 10;
 8003072:	4691      	mov	r9, r2
 8003074:	2300      	movs	r3, #0
 8003076:	220a      	movs	r2, #10
 8003078:	4648      	mov	r0, r9
 800307a:	9105      	str	r1, [sp, #20]
 800307c:	f7fd fd94 	bl	8000ba8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8003080:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8003084:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8003088:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 800308a:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 800308e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003092:	446b      	add	r3, sp
 8003094:	f107 3cff 	add.w	ip, r7, #4294967295
 8003098:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 800309c:	1c73      	adds	r3, r6, #1
    if (count == specifier->precision) {
 800309e:	429d      	cmp	r5, r3
      buf[idx--] = '.';
 80030a0:	bf01      	itttt	eq
 80030a2:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 80030a6:	eb0d 0c03 	addeq.w	ip, sp, r3
 80030aa:	232e      	moveq	r3, #46	; 0x2e
 80030ac:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 80030b0:	bf18      	it	ne
 80030b2:	461e      	movne	r6, r3
  } while (val);
 80030b4:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 80030b6:	bf06      	itte	eq
 80030b8:	3f02      	subeq	r7, #2
      count++;
 80030ba:	3602      	addeq	r6, #2
    buf[idx--] = chr;
 80030bc:	4667      	movne	r7, ip
  } while (val);
 80030be:	f1b9 0f0a 	cmp.w	r9, #10
 80030c2:	f173 0900 	sbcs.w	r9, r3, #0
 80030c6:	d2d4      	bcs.n	8003072 <vlc_print+0x32e>
    buf[idx--] = '0';
 80030c8:	42ae      	cmp	r6, r5
 80030ca:	f1c5 0001 	rsb	r0, r5, #1
 80030ce:	4430      	add	r0, r6
 80030d0:	f04f 0130 	mov.w	r1, #48	; 0x30
 80030d4:	bf88      	it	hi
 80030d6:	2001      	movhi	r0, #1
 80030d8:	eba5 0906 	sub.w	r9, r5, r6
 80030dc:	eb0d 0301 	add.w	r3, sp, r1
 80030e0:	bf88      	it	hi
 80030e2:	f04f 0900 	movhi.w	r9, #0
 80030e6:	4438      	add	r0, r7
 80030e8:	4418      	add	r0, r3
 80030ea:	464a      	mov	r2, r9
 80030ec:	f003 fad7 	bl	800669e <memset>
 80030f0:	1b73      	subs	r3, r6, r5
 80030f2:	42ae      	cmp	r6, r5
 80030f4:	bf88      	it	hi
 80030f6:	2300      	movhi	r3, #0
 80030f8:	444e      	add	r6, r9
  if (count == specifier->precision) {
 80030fa:	42b5      	cmp	r5, r6
 80030fc:	441f      	add	r7, r3
 80030fe:	f105 0501 	add.w	r5, r5, #1
 8003102:	d107      	bne.n	8003114 <vlc_print+0x3d0>
    buf[idx--] = '.';
 8003104:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003108:	446b      	add	r3, sp
 800310a:	222e      	movs	r2, #46	; 0x2e
 800310c:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003110:	462e      	mov	r6, r5
    buf[idx--] = '.';
 8003112:	3f01      	subs	r7, #1
  if (count == specifier->precision + 1)
 8003114:	42b5      	cmp	r5, r6
 8003116:	d107      	bne.n	8003128 <vlc_print+0x3e4>
    buf[idx--] = '0';
 8003118:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800311c:	446b      	add	r3, sp
 800311e:	2230      	movs	r2, #48	; 0x30
 8003120:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003124:	3601      	adds	r6, #1
    buf[idx--] = '0';
 8003126:	3f01      	subs	r7, #1
  if (is_signed) {
 8003128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800312c:	2200      	movs	r2, #0
 800312e:	2300      	movs	r3, #0
 8003130:	f7fd fcd4 	bl	8000adc <__aeabi_dcmplt>
 8003134:	b138      	cbz	r0, 8003146 <vlc_print+0x402>
    buf[idx--] = '-';
 8003136:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800313a:	446b      	add	r3, sp
 800313c:	222d      	movs	r2, #45	; 0x2d
 800313e:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8003142:	3601      	adds	r6, #1
    buf[idx--] = '-';
 8003144:	3f01      	subs	r7, #1
  while (count < specifier->width) {
 8003146:	9d07      	ldr	r5, [sp, #28]
    buf[idx--] = ' ';
 8003148:	42ae      	cmp	r6, r5
 800314a:	f1c5 0001 	rsb	r0, r5, #1
 800314e:	4430      	add	r0, r6
 8003150:	bf88      	it	hi
 8003152:	2001      	movhi	r0, #1
 8003154:	eba5 0906 	sub.w	r9, r5, r6
 8003158:	ab0c      	add	r3, sp, #48	; 0x30
 800315a:	bf88      	it	hi
 800315c:	f04f 0900 	movhi.w	r9, #0
 8003160:	4438      	add	r0, r7
 8003162:	464a      	mov	r2, r9
 8003164:	4418      	add	r0, r3
 8003166:	2120      	movs	r1, #32
 8003168:	f003 fa99 	bl	800669e <memset>
 800316c:	1b73      	subs	r3, r6, r5
 800316e:	42ae      	cmp	r6, r5
 8003170:	bf88      	it	hi
 8003172:	2300      	movhi	r3, #0
 8003174:	443b      	add	r3, r7
 8003176:	aa0c      	add	r2, sp, #48	; 0x30
 8003178:	444e      	add	r6, r9
  for(int i = 0; i < count; i++) {
 800317a:	18d7      	adds	r7, r2, r3
 800317c:	4433      	add	r3, r6
 800317e:	189d      	adds	r5, r3, r2
 8003180:	42bd      	cmp	r5, r7
 8003182:	d110      	bne.n	80031a6 <vlc_print+0x462>
            count += _write_double(dbl, &specifier);
 8003184:	44b3      	add	fp, r6
            break;
 8003186:	e6f1      	b.n	8002f6c <vlc_print+0x228>
    mul *= 10;
 8003188:	4630      	mov	r0, r6
 800318a:	4639      	mov	r1, r7
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <vlc_print+0x4a4>)
 800318e:	f7fd fa33 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8003192:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8003196:	4606      	mov	r6, r0
 8003198:	460f      	mov	r7, r1
  for (int i=0;i <specifier->precision; i++)
 800319a:	e744      	b.n	8003026 <vlc_print+0x2e2>
 800319c:	ed9d 7b00 	vldr	d7, [sp]
 80031a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80031a4:	e752      	b.n	800304c <vlc_print+0x308>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80031a6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80031aa:	4640      	mov	r0, r8
 80031ac:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 80031ae:	e7e7      	b.n	8003180 <vlc_print+0x43c>
        if (!c)
 80031b0:	f04f 0e01 	mov.w	lr, #1
 80031b4:	e5ee      	b.n	8002d94 <vlc_print+0x50>
 80031b6:	b103      	cbz	r3, 80031ba <vlc_print+0x476>
 80031b8:	9709      	str	r7, [sp, #36]	; 0x24
 80031ba:	b100      	cbz	r0, 80031be <vlc_print+0x47a>
 80031bc:	9208      	str	r2, [sp, #32]
 80031be:	9b00      	ldr	r3, [sp, #0]
 80031c0:	b103      	cbz	r3, 80031c4 <vlc_print+0x480>
 80031c2:	9607      	str	r6, [sp, #28]
              if (long_type)
 80031c4:	f1bc 0f00 	cmp.w	ip, #0
 80031c8:	f47f af0e 	bne.w	8002fe8 <vlc_print+0x2a4>
                val = va_arg(vl, unsigned int);
 80031cc:	4625      	mov	r5, r4
 80031ce:	4661      	mov	r1, ip
 80031d0:	f855 0b04 	ldr.w	r0, [r5], #4
 80031d4:	e702      	b.n	8002fdc <vlc_print+0x298>
        if (!c)
 80031d6:	f04f 0c01 	mov.w	ip, #1
      while (done == false) {
 80031da:	e5db      	b.n	8002d94 <vlc_print+0x50>
 80031dc:	08008640 	.word	0x08008640
 80031e0:	3ff00000 	.word	0x3ff00000
 80031e4:	3fe00000 	.word	0x3fe00000
 80031e8:	40240000 	.word	0x40240000

080031ec <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	b0a2      	sub	sp, #136	; 0x88
 80031f0:	4606      	mov	r6, r0
 80031f2:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80031f4:	f000 fb2e 	bl	8003854 <ai_platform_context_acquire>
 80031f8:	4604      	mov	r4, r0

  if (report && net_ctx)
 80031fa:	2d00      	cmp	r5, #0
 80031fc:	d035      	beq.n	800326a <ai_network_get_report+0x7e>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d030      	beq.n	8003264 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 8003202:	2278      	movs	r2, #120	; 0x78
 8003204:	2100      	movs	r1, #0
 8003206:	a804      	add	r0, sp, #16
 8003208:	f003 fa49 	bl	800669e <memset>
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <ai_network_get_report+0x84>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <ai_network_get_report+0x88>)
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <ai_network_get_report+0x8c>)
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <ai_network_get_report+0x90>)
 800321a:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800321c:	f000 f9fe 	bl	800361c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8003220:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003222:	f000 fa33 	bl	800368c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <ai_network_get_report+0x94>)
 8003228:	9306      	str	r3, [sp, #24]
 800322a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800322e:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003232:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8003234:	f000 fa76 	bl	8003724 <ai_platform_api_get_version>
 8003238:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800323a:	f000 fabf 	bl	80037bc <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800323e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8003242:	2300      	movs	r3, #0
 8003244:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003248:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <ai_network_get_report+0x98>)
 800324c:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800324e:	4669      	mov	r1, sp
 8003250:	4630      	mov	r0, r6
 8003252:	f000 fbb3 	bl	80039bc <ai_platform_api_get_network_report>
 8003256:	4604      	mov	r4, r0
 8003258:	b120      	cbz	r0, 8003264 <ai_network_get_report+0x78>

    *report = r;
 800325a:	2288      	movs	r2, #136	; 0x88
 800325c:	4669      	mov	r1, sp
 800325e:	4628      	mov	r0, r5
 8003260:	f003 fabe 	bl	80067e0 <memcpy>
    return true;
  }
  return false;
}
 8003264:	4620      	mov	r0, r4
 8003266:	b022      	add	sp, #136	; 0x88
 8003268:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 800326a:	462c      	mov	r4, r5
 800326c:	e7fa      	b.n	8003264 <ai_network_get_report+0x78>
 800326e:	bf00      	nop
 8003270:	0800860c 	.word	0x0800860c
 8003274:	08008647 	.word	0x08008647
 8003278:	08008668 	.word	0x08008668
 800327c:	08008681 	.word	0x08008681
 8003280:	08008540 	.word	0x08008540
 8003284:	a1facade 	.word	0xa1facade

08003288 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003288:	f000 bb24 	b.w	80038d4 <ai_platform_network_get_error>

0800328c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800328c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800328e:	2305      	movs	r3, #5
 8003290:	2200      	movs	r2, #0
 8003292:	e9cd 3200 	strd	r3, r2, [sp]
 8003296:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <ai_network_create+0x18>)
 8003298:	2301      	movs	r3, #1
 800329a:	f000 fe4d 	bl	8003f38 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800329e:	b003      	add	sp, #12
 80032a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80032a4:	20000578 	.word	0x20000578

080032a8 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80032a8:	f000 bf1c 	b.w	80040e4 <ai_platform_network_destroy>

080032ac <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80032ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b0:	4607      	mov	r7, r0
 80032b2:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80032b4:	f000 ff82 	bl	80041bc <ai_platform_network_init>
  if (!net_ctx) return false;
 80032b8:	4604      	mov	r4, r0
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d050      	beq.n	8003360 <ai_network_init+0xb4>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80032be:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80033a0 <ai_network_init+0xf4>
 80032c2:	4632      	mov	r2, r6
 80032c4:	2101      	movs	r1, #1
 80032c6:	4640      	mov	r0, r8
 80032c8:	f000 f8de 	bl	8003488 <ai_platform_get_weights_map>
 80032cc:	4605      	mov	r5, r0
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d048      	beq.n	8003364 <ai_network_init+0xb8>
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80032d2:	4a2a      	ldr	r2, [pc, #168]	; (800337c <ai_network_init+0xd0>)
 80032d4:	6813      	ldr	r3, [r2, #0]
 80032d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032da:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80032dc:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80032e0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80032e4:	4a26      	ldr	r2, [pc, #152]	; (8003380 <ai_network_init+0xd4>)
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80032ec:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 80032ee:	f503 6158 	add.w	r1, r3, #3456	; 0xd80
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 80032f2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <ai_network_init+0xd8>)
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80032fe:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 8003300:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8003304:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <ai_network_init+0xdc>)
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 800330a:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800330e:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 8003310:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003314:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003318:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800331a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80033a4 <ai_network_init+0xf8>
 800331e:	4632      	mov	r2, r6
 8003320:	2101      	movs	r1, #1
 8003322:	4640      	mov	r0, r8
 8003324:	f000 f904 	bl	8003530 <ai_platform_get_activations_map>
 8003328:	4606      	mov	r6, r0
 800332a:	b308      	cbz	r0, 8003370 <ai_network_init+0xc4>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800332c:	f8d8 3000 	ldr.w	r3, [r8]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <ai_network_init+0xe0>)
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003332:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <ai_network_init+0xe4>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003338:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800333c:	4a15      	ldr	r2, [pc, #84]	; (8003394 <ai_network_init+0xe8>)
 800333e:	f103 010c 	add.w	r1, r3, #12
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8003342:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003346:	4a14      	ldr	r2, [pc, #80]	; (8003398 <ai_network_init+0xec>)
 8003348:	336c      	adds	r3, #108	; 0x6c
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 800334a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 800334e:	4a13      	ldr	r2, [pc, #76]	; (800339c <ai_network_init+0xf0>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003350:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003354:	4638      	mov	r0, r7
 8003356:	f001 f81f 	bl	8004398 <ai_platform_network_post_init>
 800335a:	4030      	ands	r0, r6
 800335c:	4005      	ands	r5, r0
 800335e:	b2e8      	uxtb	r0, r5

  return ok;
}
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003364:	2212      	movs	r2, #18
 8003366:	2130      	movs	r1, #48	; 0x30
 8003368:	4620      	mov	r0, r4
 800336a:	f000 fb21 	bl	80039b0 <ai_platform_network_set_error>
  return false;
 800336e:	e7d4      	b.n	800331a <ai_network_init+0x6e>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003370:	2213      	movs	r2, #19
 8003372:	2130      	movs	r1, #48	; 0x30
 8003374:	4620      	mov	r0, r4
 8003376:	f000 fb1b 	bl	80039b0 <ai_platform_network_set_error>
  return false;
 800337a:	e7eb      	b.n	8003354 <ai_network_init+0xa8>
 800337c:	2000051c 	.word	0x2000051c
 8003380:	200004a8 	.word	0x200004a8
 8003384:	20000430 	.word	0x20000430
 8003388:	200003bc 	.word	0x200003bc
 800338c:	200005e0 	.word	0x200005e0
 8003390:	20000404 	.word	0x20000404
 8003394:	2000047c 	.word	0x2000047c
 8003398:	200004f0 	.word	0x200004f0
 800339c:	20000568 	.word	0x20000568
 80033a0:	200009c4 	.word	0x200009c4
 80033a4:	200009c0 	.word	0x200009c0

080033a8 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80033a8:	f001 b87e 	b.w	80044a8 <ai_platform_network_process>

080033ac <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80033ac:	2200      	movs	r2, #0
 80033ae:	f001 b87b 	b.w	80044a8 <ai_platform_network_process>
	...

080033b4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80033b4:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80033b6:	4603      	mov	r3, r0
{
 80033b8:	b085      	sub	sp, #20
  if (!params) return false;
 80033ba:	b170      	cbz	r0, 80033da <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80033bc:	4c08      	ldr	r4, [pc, #32]	; (80033e0 <ai_network_data_params_get+0x2c>)
 80033be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033c2:	466a      	mov	r2, sp
 80033c4:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80033c8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80033cc:	ad02      	add	r5, sp, #8
 80033ce:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80033d2:	4629      	mov	r1, r5
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f8ff 	bl	80035d8 <ai_platform_bind_network_params>
}
 80033da:	b005      	add	sp, #20
 80033dc:	bd30      	pop	{r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	08008500 	.word	0x08008500

080033e4 <ai_buffer_get_size>:
 80033e4:	b378      	cbz	r0, 8003446 <ai_buffer_get_size+0x62>
 80033e6:	b410      	push	{r4}
 80033e8:	6803      	ldr	r3, [r0, #0]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <ai_buffer_get_size+0x64>)
 80033ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80033f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d01e      	beq.n	8003436 <ai_buffer_get_size+0x52>
 80033f8:	6984      	ldr	r4, [r0, #24]
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	7d03      	ldrb	r3, [r0, #20]
 80033fe:	6941      	ldr	r1, [r0, #20]
 8003400:	f1a3 0301 	sub.w	r3, r3, #1
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800340e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8003412:	da0b      	bge.n	800342c <ai_buffer_get_size+0x48>
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <ai_buffer_get_size+0x3a>
 8003418:	2802      	cmp	r0, #2
 800341a:	d007      	beq.n	800342c <ai_buffer_get_size+0x48>
 800341c:	2302      	movs	r3, #2
 800341e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003422:	3301      	adds	r3, #1
 8003424:	4298      	cmp	r0, r3
 8003426:	fb01 f202 	mul.w	r2, r1, r2
 800342a:	d1f3      	bne.n	8003414 <ai_buffer_get_size+0x30>
 800342c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	2900      	cmp	r1, #0
 8003438:	d0de      	beq.n	80033f8 <ai_buffer_get_size+0x14>
 800343a:	6984      	ldr	r4, [r0, #24]
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	331f      	adds	r3, #31
 8003440:	f023 021f 	bic.w	r2, r3, #31
 8003444:	e7da      	b.n	80033fc <ai_buffer_get_size+0x18>
 8003446:	4770      	bx	lr
 8003448:	000400c0 	.word	0x000400c0

0800344c <ai_buffer_array_sane>:
 800344c:	b138      	cbz	r0, 800345e <ai_buffer_array_sane+0x12>
 800344e:	6843      	ldr	r3, [r0, #4]
 8003450:	b123      	cbz	r3, 800345c <ai_buffer_array_sane+0x10>
 8003452:	8840      	ldrh	r0, [r0, #2]
 8003454:	3800      	subs	r0, #0
 8003456:	bf18      	it	ne
 8003458:	2001      	movne	r0, #1
 800345a:	4770      	bx	lr
 800345c:	4618      	mov	r0, r3
 800345e:	4770      	bx	lr

08003460 <ai_buffer_array_item_set_address>:
 8003460:	b150      	cbz	r0, 8003478 <ai_buffer_array_item_set_address+0x18>
 8003462:	6843      	ldr	r3, [r0, #4]
 8003464:	b14b      	cbz	r3, 800347a <ai_buffer_array_item_set_address+0x1a>
 8003466:	8840      	ldrh	r0, [r0, #2]
 8003468:	b900      	cbnz	r0, 800346c <ai_buffer_array_item_set_address+0xc>
 800346a:	4770      	bx	lr
 800346c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003470:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003474:	2001      	movs	r0, #1
 8003476:	604a      	str	r2, [r1, #4]
 8003478:	4770      	bx	lr
 800347a:	4618      	mov	r0, r3
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <_ai_platform_acquire_crc>:
 8003480:	2001      	movs	r0, #1
 8003482:	4770      	bx	lr

08003484 <_ai_platform_release_crc>:
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop

08003488 <ai_platform_get_weights_map>:
 8003488:	2a00      	cmp	r2, #0
 800348a:	d037      	beq.n	80034fc <ai_platform_get_weights_map+0x74>
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	b1a0      	cbz	r0, 80034bc <ai_platform_get_weights_map+0x34>
 8003492:	460f      	mov	r7, r1
 8003494:	b191      	cbz	r1, 80034bc <ai_platform_get_weights_map+0x34>
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <ai_platform_get_weights_map+0xa4>)
 8003498:	6810      	ldr	r0, [r2, #0]
 800349a:	4298      	cmp	r0, r3
 800349c:	4615      	mov	r5, r2
 800349e:	d00f      	beq.n	80034c0 <ai_platform_get_weights_map+0x38>
 80034a0:	6855      	ldr	r5, [r2, #4]
 80034a2:	b15d      	cbz	r5, 80034bc <ai_platform_get_weights_map+0x34>
 80034a4:	682e      	ldr	r6, [r5, #0]
 80034a6:	429e      	cmp	r6, r3
 80034a8:	d02a      	beq.n	8003500 <ai_platform_get_weights_map+0x78>
 80034aa:	f1a1 0001 	sub.w	r0, r1, #1
 80034ae:	6025      	str	r5, [r4, #0]
 80034b0:	fab0 f080 	clz	r0, r0
 80034b4:	0940      	lsrs	r0, r0, #5
 80034b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b8:	42a7      	cmp	r7, r4
 80034ba:	d034      	beq.n	8003526 <ai_platform_get_weights_map+0x9e>
 80034bc:	2000      	movs	r0, #0
 80034be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c0:	1d10      	adds	r0, r2, #4
 80034c2:	f7ff ffc3 	bl	800344c <ai_buffer_array_sane>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0f8      	beq.n	80034bc <ai_platform_get_weights_map+0x34>
 80034ca:	88eb      	ldrh	r3, [r5, #6]
 80034cc:	429f      	cmp	r7, r3
 80034ce:	d1f5      	bne.n	80034bc <ai_platform_get_weights_map+0x34>
 80034d0:	f04f 0e00 	mov.w	lr, #0
 80034d4:	1f23      	subs	r3, r4, #4
 80034d6:	4670      	mov	r0, lr
 80034d8:	68aa      	ldr	r2, [r5, #8]
 80034da:	eb02 0c0e 	add.w	ip, r2, lr
 80034de:	f10e 0e1c 	add.w	lr, lr, #28
 80034e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80034e6:	b124      	cbz	r4, 80034f2 <ai_platform_get_weights_map+0x6a>
 80034e8:	3001      	adds	r0, #1
 80034ea:	4287      	cmp	r7, r0
 80034ec:	f843 4f04 	str.w	r4, [r3, #4]!
 80034f0:	d1f2      	bne.n	80034d8 <ai_platform_get_weights_map+0x50>
 80034f2:	1a38      	subs	r0, r7, r0
 80034f4:	fab0 f080 	clz	r0, r0
 80034f8:	0940      	lsrs	r0, r0, #5
 80034fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034fc:	2000      	movs	r0, #0
 80034fe:	4770      	bx	lr
 8003500:	1f23      	subs	r3, r4, #4
 8003502:	4628      	mov	r0, r5
 8003504:	2400      	movs	r4, #0
 8003506:	e000      	b.n	800350a <ai_platform_get_weights_map+0x82>
 8003508:	4614      	mov	r4, r2
 800350a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800350e:	42b2      	cmp	r2, r6
 8003510:	d0d2      	beq.n	80034b8 <ai_platform_get_weights_map+0x30>
 8003512:	f843 2f04 	str.w	r2, [r3, #4]!
 8003516:	1c62      	adds	r2, r4, #1
 8003518:	4297      	cmp	r7, r2
 800351a:	d1f5      	bne.n	8003508 <ai_platform_get_weights_map+0x80>
 800351c:	3402      	adds	r4, #2
 800351e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003522:	42b3      	cmp	r3, r6
 8003524:	d1ca      	bne.n	80034bc <ai_platform_get_weights_map+0x34>
 8003526:	2001      	movs	r0, #1
 8003528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800352a:	bf00      	nop
 800352c:	a1facade 	.word	0xa1facade

08003530 <ai_platform_get_activations_map>:
 8003530:	2a00      	cmp	r2, #0
 8003532:	d038      	beq.n	80035a6 <ai_platform_get_activations_map+0x76>
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	b1a0      	cbz	r0, 8003564 <ai_platform_get_activations_map+0x34>
 800353a:	460f      	mov	r7, r1
 800353c:	b191      	cbz	r1, 8003564 <ai_platform_get_activations_map+0x34>
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <ai_platform_get_activations_map+0xa4>)
 8003540:	6810      	ldr	r0, [r2, #0]
 8003542:	4298      	cmp	r0, r3
 8003544:	4615      	mov	r5, r2
 8003546:	d00f      	beq.n	8003568 <ai_platform_get_activations_map+0x38>
 8003548:	6a15      	ldr	r5, [r2, #32]
 800354a:	b15d      	cbz	r5, 8003564 <ai_platform_get_activations_map+0x34>
 800354c:	682e      	ldr	r6, [r5, #0]
 800354e:	429e      	cmp	r6, r3
 8003550:	d02b      	beq.n	80035aa <ai_platform_get_activations_map+0x7a>
 8003552:	f1a1 0001 	sub.w	r0, r1, #1
 8003556:	6025      	str	r5, [r4, #0]
 8003558:	fab0 f080 	clz	r0, r0
 800355c:	0940      	lsrs	r0, r0, #5
 800355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003560:	42a7      	cmp	r7, r4
 8003562:	d035      	beq.n	80035d0 <ai_platform_get_activations_map+0xa0>
 8003564:	2000      	movs	r0, #0
 8003566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003568:	f102 000c 	add.w	r0, r2, #12
 800356c:	f7ff ff6e 	bl	800344c <ai_buffer_array_sane>
 8003570:	2800      	cmp	r0, #0
 8003572:	d0f7      	beq.n	8003564 <ai_platform_get_activations_map+0x34>
 8003574:	89eb      	ldrh	r3, [r5, #14]
 8003576:	429f      	cmp	r7, r3
 8003578:	d1f4      	bne.n	8003564 <ai_platform_get_activations_map+0x34>
 800357a:	f04f 0e00 	mov.w	lr, #0
 800357e:	1f23      	subs	r3, r4, #4
 8003580:	4670      	mov	r0, lr
 8003582:	692a      	ldr	r2, [r5, #16]
 8003584:	eb02 0c0e 	add.w	ip, r2, lr
 8003588:	f10e 0e1c 	add.w	lr, lr, #28
 800358c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003590:	b124      	cbz	r4, 800359c <ai_platform_get_activations_map+0x6c>
 8003592:	3001      	adds	r0, #1
 8003594:	4287      	cmp	r7, r0
 8003596:	f843 4f04 	str.w	r4, [r3, #4]!
 800359a:	d1f2      	bne.n	8003582 <ai_platform_get_activations_map+0x52>
 800359c:	1a38      	subs	r0, r7, r0
 800359e:	fab0 f080 	clz	r0, r0
 80035a2:	0940      	lsrs	r0, r0, #5
 80035a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a6:	2000      	movs	r0, #0
 80035a8:	4770      	bx	lr
 80035aa:	1f23      	subs	r3, r4, #4
 80035ac:	4628      	mov	r0, r5
 80035ae:	2400      	movs	r4, #0
 80035b0:	e000      	b.n	80035b4 <ai_platform_get_activations_map+0x84>
 80035b2:	4614      	mov	r4, r2
 80035b4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80035b8:	42b2      	cmp	r2, r6
 80035ba:	d0d1      	beq.n	8003560 <ai_platform_get_activations_map+0x30>
 80035bc:	f843 2f04 	str.w	r2, [r3, #4]!
 80035c0:	1c62      	adds	r2, r4, #1
 80035c2:	4297      	cmp	r7, r2
 80035c4:	d1f5      	bne.n	80035b2 <ai_platform_get_activations_map+0x82>
 80035c6:	3402      	adds	r4, #2
 80035c8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80035cc:	42b3      	cmp	r3, r6
 80035ce:	d1c9      	bne.n	8003564 <ai_platform_get_activations_map+0x34>
 80035d0:	2001      	movs	r0, #1
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d4:	a1facade 	.word	0xa1facade

080035d8 <ai_platform_bind_network_params>:
 80035d8:	b1a0      	cbz	r0, 8003604 <ai_platform_bind_network_params+0x2c>
 80035da:	b1b1      	cbz	r1, 800360a <ai_platform_bind_network_params+0x32>
 80035dc:	b1c2      	cbz	r2, 8003610 <ai_platform_bind_network_params+0x38>
 80035de:	b410      	push	{r4}
 80035e0:	4603      	mov	r3, r0
 80035e2:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <ai_platform_bind_network_params+0x40>)
 80035e4:	f843 4b04 	str.w	r4, [r3], #4
 80035e8:	f100 0c0c 	add.w	ip, r0, #12
 80035ec:	c903      	ldmia	r1, {r0, r1}
 80035ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80035f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80035fa:	2301      	movs	r3, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	4603      	mov	r3, r0
 8003606:	4618      	mov	r0, r3
 8003608:	4770      	bx	lr
 800360a:	460b      	mov	r3, r1
 800360c:	4618      	mov	r0, r3
 800360e:	4770      	bx	lr
 8003610:	4613      	mov	r3, r2
 8003612:	4618      	mov	r0, r3
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	a1facade 	.word	0xa1facade

0800361c <ai_platform_runtime_get_revision>:
 800361c:	b508      	push	{r3, lr}
 800361e:	f7ff ff2f 	bl	8003480 <_ai_platform_acquire_crc>
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <ai_platform_runtime_get_revision+0x58>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d010      	beq.n	8003652 <ai_platform_runtime_get_revision+0x36>
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <ai_platform_runtime_get_revision+0x5c>)
 8003632:	2301      	movs	r3, #1
 8003634:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003638:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1fb      	bne.n	8003638 <ai_platform_runtime_get_revision+0x1c>
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <ai_platform_runtime_get_revision+0x60>)
 8003642:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003646:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <ai_platform_runtime_get_revision+0x64>)
 800364c:	429a      	cmp	r2, r3
 800364e:	d00c      	beq.n	800366a <ai_platform_runtime_get_revision+0x4e>
 8003650:	e7fe      	b.n	8003650 <ai_platform_runtime_get_revision+0x34>
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <ai_platform_runtime_get_revision+0x68>)
 8003654:	2301      	movs	r3, #1
 8003656:	6093      	str	r3, [r2, #8]
 8003658:	6893      	ldr	r3, [r2, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1fc      	bne.n	8003658 <ai_platform_runtime_get_revision+0x3c>
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <ai_platform_runtime_get_revision+0x60>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <ai_platform_runtime_get_revision+0x64>)
 8003666:	429a      	cmp	r2, r3
 8003668:	d103      	bne.n	8003672 <ai_platform_runtime_get_revision+0x56>
 800366a:	f7ff ff0b 	bl	8003484 <_ai_platform_release_crc>
 800366e:	4806      	ldr	r0, [pc, #24]	; (8003688 <ai_platform_runtime_get_revision+0x6c>)
 8003670:	bd08      	pop	{r3, pc}
 8003672:	e7fe      	b.n	8003672 <ai_platform_runtime_get_revision+0x56>
 8003674:	e0042000 	.word	0xe0042000
 8003678:	58024000 	.word	0x58024000
 800367c:	f407a5c2 	.word	0xf407a5c2
 8003680:	b5e8b5cd 	.word	0xb5e8b5cd
 8003684:	40023000 	.word	0x40023000
 8003688:	08009650 	.word	0x08009650

0800368c <ai_platform_runtime_get_version>:
 800368c:	b500      	push	{lr}
 800368e:	b083      	sub	sp, #12
 8003690:	f7ff fef6 	bl	8003480 <_ai_platform_acquire_crc>
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <ai_platform_runtime_get_version+0x80>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a0:	d010      	beq.n	80036c4 <ai_platform_runtime_get_version+0x38>
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <ai_platform_runtime_get_version+0x84>)
 80036a4:	2301      	movs	r3, #1
 80036a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80036aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1fb      	bne.n	80036aa <ai_platform_runtime_get_version+0x1e>
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <ai_platform_runtime_get_version+0x88>)
 80036b4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80036b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <ai_platform_runtime_get_version+0x8c>)
 80036be:	429a      	cmp	r2, r3
 80036c0:	d00c      	beq.n	80036dc <ai_platform_runtime_get_version+0x50>
 80036c2:	e7fe      	b.n	80036c2 <ai_platform_runtime_get_version+0x36>
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <ai_platform_runtime_get_version+0x90>)
 80036c6:	2301      	movs	r3, #1
 80036c8:	6093      	str	r3, [r2, #8]
 80036ca:	6893      	ldr	r3, [r2, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1fc      	bne.n	80036ca <ai_platform_runtime_get_version+0x3e>
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <ai_platform_runtime_get_version+0x88>)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <ai_platform_runtime_get_version+0x8c>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d115      	bne.n	8003708 <ai_platform_runtime_get_version+0x7c>
 80036dc:	f7ff fed2 	bl	8003484 <_ai_platform_release_crc>
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <ai_platform_runtime_get_version+0x94>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2000      	movs	r0, #0
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	f362 0007 	bfi	r0, r2, #0, #8
 80036ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80036f0:	f362 200f 	bfi	r0, r2, #8, #8
 80036f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80036f8:	f362 4017 	bfi	r0, r2, #16, #8
 80036fc:	0e1b      	lsrs	r3, r3, #24
 80036fe:	f363 601f 	bfi	r0, r3, #24, #8
 8003702:	b003      	add	sp, #12
 8003704:	f85d fb04 	ldr.w	pc, [sp], #4
 8003708:	e7fe      	b.n	8003708 <ai_platform_runtime_get_version+0x7c>
 800370a:	bf00      	nop
 800370c:	e0042000 	.word	0xe0042000
 8003710:	58024000 	.word	0x58024000
 8003714:	f407a5c2 	.word	0xf407a5c2
 8003718:	b5e8b5cd 	.word	0xb5e8b5cd
 800371c:	40023000 	.word	0x40023000
 8003720:	08009654 	.word	0x08009654

08003724 <ai_platform_api_get_version>:
 8003724:	b500      	push	{lr}
 8003726:	b083      	sub	sp, #12
 8003728:	f7ff feaa 	bl	8003480 <_ai_platform_acquire_crc>
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <ai_platform_api_get_version+0x80>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d010      	beq.n	800375c <ai_platform_api_get_version+0x38>
 800373a:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <ai_platform_api_get_version+0x84>)
 800373c:	2301      	movs	r3, #1
 800373e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003742:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1fb      	bne.n	8003742 <ai_platform_api_get_version+0x1e>
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <ai_platform_api_get_version+0x88>)
 800374c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003750:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <ai_platform_api_get_version+0x8c>)
 8003756:	429a      	cmp	r2, r3
 8003758:	d00c      	beq.n	8003774 <ai_platform_api_get_version+0x50>
 800375a:	e7fe      	b.n	800375a <ai_platform_api_get_version+0x36>
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <ai_platform_api_get_version+0x90>)
 800375e:	2301      	movs	r3, #1
 8003760:	6093      	str	r3, [r2, #8]
 8003762:	6893      	ldr	r3, [r2, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1fc      	bne.n	8003762 <ai_platform_api_get_version+0x3e>
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <ai_platform_api_get_version+0x88>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <ai_platform_api_get_version+0x8c>)
 8003770:	429a      	cmp	r2, r3
 8003772:	d115      	bne.n	80037a0 <ai_platform_api_get_version+0x7c>
 8003774:	f7ff fe86 	bl	8003484 <_ai_platform_release_crc>
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <ai_platform_api_get_version+0x94>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2000      	movs	r0, #0
 800377e:	b2da      	uxtb	r2, r3
 8003780:	f362 0007 	bfi	r0, r2, #0, #8
 8003784:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003788:	f362 200f 	bfi	r0, r2, #8, #8
 800378c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003790:	f362 4017 	bfi	r0, r2, #16, #8
 8003794:	0e1b      	lsrs	r3, r3, #24
 8003796:	f363 601f 	bfi	r0, r3, #24, #8
 800379a:	b003      	add	sp, #12
 800379c:	f85d fb04 	ldr.w	pc, [sp], #4
 80037a0:	e7fe      	b.n	80037a0 <ai_platform_api_get_version+0x7c>
 80037a2:	bf00      	nop
 80037a4:	e0042000 	.word	0xe0042000
 80037a8:	58024000 	.word	0x58024000
 80037ac:	f407a5c2 	.word	0xf407a5c2
 80037b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80037b4:	40023000 	.word	0x40023000
 80037b8:	08009658 	.word	0x08009658

080037bc <ai_platform_interface_api_get_version>:
 80037bc:	b500      	push	{lr}
 80037be:	b083      	sub	sp, #12
 80037c0:	f7ff fe5e 	bl	8003480 <_ai_platform_acquire_crc>
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <ai_platform_interface_api_get_version+0x80>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d0:	d010      	beq.n	80037f4 <ai_platform_interface_api_get_version+0x38>
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <ai_platform_interface_api_get_version+0x84>)
 80037d4:	2301      	movs	r3, #1
 80037d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1fb      	bne.n	80037da <ai_platform_interface_api_get_version+0x1e>
 80037e2:	4b18      	ldr	r3, [pc, #96]	; (8003844 <ai_platform_interface_api_get_version+0x88>)
 80037e4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80037e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <ai_platform_interface_api_get_version+0x8c>)
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d00c      	beq.n	800380c <ai_platform_interface_api_get_version+0x50>
 80037f2:	e7fe      	b.n	80037f2 <ai_platform_interface_api_get_version+0x36>
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <ai_platform_interface_api_get_version+0x90>)
 80037f6:	2301      	movs	r3, #1
 80037f8:	6093      	str	r3, [r2, #8]
 80037fa:	6893      	ldr	r3, [r2, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1fc      	bne.n	80037fa <ai_platform_interface_api_get_version+0x3e>
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <ai_platform_interface_api_get_version+0x88>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <ai_platform_interface_api_get_version+0x8c>)
 8003808:	429a      	cmp	r2, r3
 800380a:	d115      	bne.n	8003838 <ai_platform_interface_api_get_version+0x7c>
 800380c:	f7ff fe3a 	bl	8003484 <_ai_platform_release_crc>
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <ai_platform_interface_api_get_version+0x94>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2000      	movs	r0, #0
 8003816:	b2da      	uxtb	r2, r3
 8003818:	f362 0007 	bfi	r0, r2, #0, #8
 800381c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003820:	f362 200f 	bfi	r0, r2, #8, #8
 8003824:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003828:	f362 4017 	bfi	r0, r2, #16, #8
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	f363 601f 	bfi	r0, r3, #24, #8
 8003832:	b003      	add	sp, #12
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
 8003838:	e7fe      	b.n	8003838 <ai_platform_interface_api_get_version+0x7c>
 800383a:	bf00      	nop
 800383c:	e0042000 	.word	0xe0042000
 8003840:	58024000 	.word	0x58024000
 8003844:	f407a5c2 	.word	0xf407a5c2
 8003848:	b5e8b5cd 	.word	0xb5e8b5cd
 800384c:	40023000 	.word	0x40023000
 8003850:	0800965c 	.word	0x0800965c

08003854 <ai_platform_context_acquire>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	b120      	cbz	r0, 8003864 <ai_platform_context_acquire+0x10>
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <ai_platform_context_acquire+0x68>)
 800385c:	6802      	ldr	r2, [r0, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	bf18      	it	ne
 8003862:	2400      	movne	r4, #0
 8003864:	f7ff fe0c 	bl	8003480 <_ai_platform_acquire_crc>
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <ai_platform_context_acquire+0x6c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003874:	d010      	beq.n	8003898 <ai_platform_context_acquire+0x44>
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <ai_platform_context_acquire+0x70>)
 8003878:	2301      	movs	r3, #1
 800387a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800387e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1fb      	bne.n	800387e <ai_platform_context_acquire+0x2a>
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <ai_platform_context_acquire+0x74>)
 8003888:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800388c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <ai_platform_context_acquire+0x78>)
 8003892:	429a      	cmp	r2, r3
 8003894:	d00c      	beq.n	80038b0 <ai_platform_context_acquire+0x5c>
 8003896:	e7fe      	b.n	8003896 <ai_platform_context_acquire+0x42>
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <ai_platform_context_acquire+0x7c>)
 800389a:	2301      	movs	r3, #1
 800389c:	6093      	str	r3, [r2, #8]
 800389e:	6893      	ldr	r3, [r2, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1fc      	bne.n	800389e <ai_platform_context_acquire+0x4a>
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <ai_platform_context_acquire+0x74>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <ai_platform_context_acquire+0x78>)
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d103      	bne.n	80038b8 <ai_platform_context_acquire+0x64>
 80038b0:	f7ff fde8 	bl	8003484 <_ai_platform_release_crc>
 80038b4:	4620      	mov	r0, r4
 80038b6:	bd10      	pop	{r4, pc}
 80038b8:	e7fe      	b.n	80038b8 <ai_platform_context_acquire+0x64>
 80038ba:	bf00      	nop
 80038bc:	a1c00100 	.word	0xa1c00100
 80038c0:	e0042000 	.word	0xe0042000
 80038c4:	58024000 	.word	0x58024000
 80038c8:	f407a5c2 	.word	0xf407a5c2
 80038cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80038d0:	40023000 	.word	0x40023000

080038d4 <ai_platform_network_get_error>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	b1f0      	cbz	r0, 8003916 <ai_platform_network_get_error+0x42>
 80038d8:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <ai_platform_network_get_error+0xc4>)
 80038da:	6802      	ldr	r2, [r0, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	4604      	mov	r4, r0
 80038e0:	d119      	bne.n	8003916 <ai_platform_network_get_error+0x42>
 80038e2:	f7ff fdcd 	bl	8003480 <_ai_platform_acquire_crc>
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <ai_platform_network_get_error+0xc8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d03c      	beq.n	800396e <ai_platform_network_get_error+0x9a>
 80038f4:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <ai_platform_network_get_error+0xcc>)
 80038f6:	2301      	movs	r3, #1
 80038f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1fb      	bne.n	80038fc <ai_platform_network_get_error+0x28>
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <ai_platform_network_get_error+0xd0>)
 8003906:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800390a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <ai_platform_network_get_error+0xd4>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d038      	beq.n	8003986 <ai_platform_network_get_error+0xb2>
 8003914:	e7fe      	b.n	8003914 <ai_platform_network_get_error+0x40>
 8003916:	f7ff fdb3 	bl	8003480 <_ai_platform_acquire_crc>
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <ai_platform_network_get_error+0xc8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d010      	beq.n	800394a <ai_platform_network_get_error+0x76>
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <ai_platform_network_get_error+0xcc>)
 800392a:	2301      	movs	r3, #1
 800392c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003930:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1fb      	bne.n	8003930 <ai_platform_network_get_error+0x5c>
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <ai_platform_network_get_error+0xd0>)
 800393a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800393e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <ai_platform_network_get_error+0xd4>)
 8003944:	429a      	cmp	r2, r3
 8003946:	d00d      	beq.n	8003964 <ai_platform_network_get_error+0x90>
 8003948:	e7fe      	b.n	8003948 <ai_platform_network_get_error+0x74>
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <ai_platform_network_get_error+0xd8>)
 800394c:	2301      	movs	r3, #1
 800394e:	6093      	str	r3, [r2, #8]
 8003950:	6893      	ldr	r3, [r2, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1fc      	bne.n	8003950 <ai_platform_network_get_error+0x7c>
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <ai_platform_network_get_error+0xd0>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <ai_platform_network_get_error+0xd4>)
 800395e:	429a      	cmp	r2, r3
 8003960:	d000      	beq.n	8003964 <ai_platform_network_get_error+0x90>
 8003962:	e7fe      	b.n	8003962 <ai_platform_network_get_error+0x8e>
 8003964:	f7ff fd8e 	bl	8003484 <_ai_platform_release_crc>
 8003968:	f241 0010 	movw	r0, #4112	; 0x1010
 800396c:	bd10      	pop	{r4, pc}
 800396e:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <ai_platform_network_get_error+0xd8>)
 8003970:	2301      	movs	r3, #1
 8003972:	6093      	str	r3, [r2, #8]
 8003974:	6893      	ldr	r3, [r2, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1fc      	bne.n	8003974 <ai_platform_network_get_error+0xa0>
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <ai_platform_network_get_error+0xd0>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <ai_platform_network_get_error+0xd4>)
 8003982:	429a      	cmp	r2, r3
 8003984:	d107      	bne.n	8003996 <ai_platform_network_get_error+0xc2>
 8003986:	f7ff fd7d 	bl	8003484 <_ai_platform_release_crc>
 800398a:	f104 0010 	add.w	r0, r4, #16
 800398e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003992:	f001 b80f 	b.w	80049b4 <core_get_error>
 8003996:	e7fe      	b.n	8003996 <ai_platform_network_get_error+0xc2>
 8003998:	a1c00100 	.word	0xa1c00100
 800399c:	e0042000 	.word	0xe0042000
 80039a0:	58024000 	.word	0x58024000
 80039a4:	f407a5c2 	.word	0xf407a5c2
 80039a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80039ac:	40023000 	.word	0x40023000

080039b0 <ai_platform_network_set_error>:
 80039b0:	b110      	cbz	r0, 80039b8 <ai_platform_network_set_error+0x8>
 80039b2:	3010      	adds	r0, #16
 80039b4:	f001 b804 	b.w	80049c0 <core_set_error>
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <ai_platform_api_get_network_report>:
 80039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c0:	b087      	sub	sp, #28
 80039c2:	b1f8      	cbz	r0, 8003a04 <ai_platform_api_get_network_report+0x48>
 80039c4:	4b95      	ldr	r3, [pc, #596]	; (8003c1c <ai_platform_api_get_network_report+0x260>)
 80039c6:	6802      	ldr	r2, [r0, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	4607      	mov	r7, r0
 80039cc:	d11a      	bne.n	8003a04 <ai_platform_api_get_network_report+0x48>
 80039ce:	468b      	mov	fp, r1
 80039d0:	f7ff fd56 	bl	8003480 <_ai_platform_acquire_crc>
 80039d4:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <ai_platform_api_get_network_report+0x264>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e0:	d03e      	beq.n	8003a60 <ai_platform_api_get_network_report+0xa4>
 80039e2:	4a90      	ldr	r2, [pc, #576]	; (8003c24 <ai_platform_api_get_network_report+0x268>)
 80039e4:	2301      	movs	r3, #1
 80039e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80039ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1fb      	bne.n	80039ea <ai_platform_api_get_network_report+0x2e>
 80039f2:	4b8d      	ldr	r3, [pc, #564]	; (8003c28 <ai_platform_api_get_network_report+0x26c>)
 80039f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80039f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80039fc:	4b8b      	ldr	r3, [pc, #556]	; (8003c2c <ai_platform_api_get_network_report+0x270>)
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d03a      	beq.n	8003a78 <ai_platform_api_get_network_report+0xbc>
 8003a02:	e7fe      	b.n	8003a02 <ai_platform_api_get_network_report+0x46>
 8003a04:	f7ff fd3c 	bl	8003480 <_ai_platform_acquire_crc>
 8003a08:	4b85      	ldr	r3, [pc, #532]	; (8003c20 <ai_platform_api_get_network_report+0x264>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d010      	beq.n	8003a38 <ai_platform_api_get_network_report+0x7c>
 8003a16:	4a83      	ldr	r2, [pc, #524]	; (8003c24 <ai_platform_api_get_network_report+0x268>)
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1fb      	bne.n	8003a1e <ai_platform_api_get_network_report+0x62>
 8003a26:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <ai_platform_api_get_network_report+0x26c>)
 8003a28:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a30:	4b7e      	ldr	r3, [pc, #504]	; (8003c2c <ai_platform_api_get_network_report+0x270>)
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d00d      	beq.n	8003a52 <ai_platform_api_get_network_report+0x96>
 8003a36:	e7fe      	b.n	8003a36 <ai_platform_api_get_network_report+0x7a>
 8003a38:	4a7d      	ldr	r2, [pc, #500]	; (8003c30 <ai_platform_api_get_network_report+0x274>)
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	6093      	str	r3, [r2, #8]
 8003a3e:	6893      	ldr	r3, [r2, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1fc      	bne.n	8003a3e <ai_platform_api_get_network_report+0x82>
 8003a44:	4b78      	ldr	r3, [pc, #480]	; (8003c28 <ai_platform_api_get_network_report+0x26c>)
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <ai_platform_api_get_network_report+0x270>)
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d000      	beq.n	8003a52 <ai_platform_api_get_network_report+0x96>
 8003a50:	e7fe      	b.n	8003a50 <ai_platform_api_get_network_report+0x94>
 8003a52:	f7ff fd17 	bl	8003484 <_ai_platform_release_crc>
 8003a56:	2400      	movs	r4, #0
 8003a58:	4620      	mov	r0, r4
 8003a5a:	b007      	add	sp, #28
 8003a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a60:	4a73      	ldr	r2, [pc, #460]	; (8003c30 <ai_platform_api_get_network_report+0x274>)
 8003a62:	2301      	movs	r3, #1
 8003a64:	6093      	str	r3, [r2, #8]
 8003a66:	6893      	ldr	r3, [r2, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1fc      	bne.n	8003a66 <ai_platform_api_get_network_report+0xaa>
 8003a6c:	4b6e      	ldr	r3, [pc, #440]	; (8003c28 <ai_platform_api_get_network_report+0x26c>)
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <ai_platform_api_get_network_report+0x270>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d112      	bne.n	8003a9e <ai_platform_api_get_network_report+0xe2>
 8003a78:	f7ff fd04 	bl	8003484 <_ai_platform_release_crc>
 8003a7c:	f1bb 0f00 	cmp.w	fp, #0
 8003a80:	d0e9      	beq.n	8003a56 <ai_platform_api_get_network_report+0x9a>
 8003a82:	2400      	movs	r4, #0
 8003a84:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8a:	b14b      	cbz	r3, 8003aa0 <ai_platform_api_get_network_report+0xe4>
 8003a8c:	3401      	adds	r4, #1
 8003a8e:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d003      	beq.n	8003aa0 <ai_platform_api_get_network_report+0xe4>
 8003a98:	b112      	cbz	r2, 8003aa0 <ai_platform_api_get_network_report+0xe4>
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	e7f5      	b.n	8003a8a <ai_platform_api_get_network_report+0xce>
 8003a9e:	e7fe      	b.n	8003a9e <ai_platform_api_get_network_report+0xe2>
 8003aa0:	2c00      	cmp	r4, #0
 8003aa2:	f000 819e 	beq.w	8003de2 <ai_platform_api_get_network_report+0x426>
 8003aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d04e      	beq.n	8003b4a <ai_platform_api_get_network_report+0x18e>
 8003aac:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8003ab0:	f1b9 0f00 	cmp.w	r9, #0
 8003ab4:	d049      	beq.n	8003b4a <ai_platform_api_get_network_report+0x18e>
 8003ab6:	f04f 0a00 	mov.w	sl, #0
 8003aba:	e9cd 7b00 	strd	r7, fp, [sp]
 8003abe:	4655      	mov	r5, sl
 8003ac0:	e016      	b.n	8003af0 <ai_platform_api_get_network_report+0x134>
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	f847 100e 	str.w	r1, [r7, lr]
 8003ac8:	69b1      	ldr	r1, [r6, #24]
 8003aca:	6849      	ldr	r1, [r1, #4]
 8003acc:	60a3      	str	r3, [r4, #8]
 8003ace:	f04f 0301 	mov.w	r3, #1
 8003ad2:	7523      	strb	r3, [r4, #20]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60e3      	str	r3, [r4, #12]
 8003ad8:	6963      	ldr	r3, [r4, #20]
 8003ada:	6121      	str	r1, [r4, #16]
 8003adc:	e9c4 0200 	strd	r0, r2, [r4]
 8003ae0:	f368 231f 	bfi	r3, r8, #8, #24
 8003ae4:	f8c4 b018 	str.w	fp, [r4, #24]
 8003ae8:	3501      	adds	r5, #1
 8003aea:	f10a 0a1c 	add.w	sl, sl, #28
 8003aee:	6163      	str	r3, [r4, #20]
 8003af0:	f8b9 3000 	ldrh.w	r3, [r9]
 8003af4:	42ab      	cmp	r3, r5
 8003af6:	b2aa      	uxth	r2, r5
 8003af8:	d933      	bls.n	8003b62 <ai_platform_api_get_network_report+0x1a6>
 8003afa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003afe:	b383      	cbz	r3, 8003b62 <ai_platform_api_get_network_report+0x1a6>
 8003b00:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003b04:	b36e      	cbz	r6, 8003b62 <ai_platform_api_get_network_report+0x1a6>
 8003b06:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003b0a:	69b2      	ldr	r2, [r6, #24]
 8003b0c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8003b10:	6810      	ldr	r0, [r2, #0]
 8003b12:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003b16:	68b3      	ldr	r3, [r6, #8]
 8003b18:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8003b1c:	f001 fe18 	bl	8005750 <ai_array_to_buffer_fmt>
 8003b20:	69b1      	ldr	r1, [r6, #24]
 8003b22:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003b26:	688a      	ldr	r2, [r1, #8]
 8003b28:	4454      	add	r4, sl
 8003b2a:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0cb      	beq.n	8003aca <ai_platform_api_get_network_report+0x10e>
 8003b32:	2100      	movs	r1, #0
 8003b34:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003b38:	6831      	ldr	r1, [r6, #0]
 8003b3a:	6059      	str	r1, [r3, #4]
 8003b3c:	b111      	cbz	r1, 8003b44 <ai_platform_api_get_network_report+0x188>
 8003b3e:	8849      	ldrh	r1, [r1, #2]
 8003b40:	2900      	cmp	r1, #0
 8003b42:	d1be      	bne.n	8003ac2 <ai_platform_api_get_network_report+0x106>
 8003b44:	69b1      	ldr	r1, [r6, #24]
 8003b46:	2300      	movs	r3, #0
 8003b48:	e7bf      	b.n	8003aca <ai_platform_api_get_network_report+0x10e>
 8003b4a:	2400      	movs	r4, #0
 8003b4c:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 8003b50:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 8003b54:	2218      	movs	r2, #24
 8003b56:	2112      	movs	r1, #18
 8003b58:	f107 0010 	add.w	r0, r7, #16
 8003b5c:	f000 ff30 	bl	80049c0 <core_set_error>
 8003b60:	e77a      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003b62:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d0ef      	beq.n	8003b4a <ai_platform_api_get_network_report+0x18e>
 8003b6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8003b74:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 8003b78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	f240 8125 	bls.w	8003dca <ai_platform_api_get_network_report+0x40e>
 8003b80:	f04f 0a00 	mov.w	sl, #0
 8003b84:	e9cd 7b00 	strd	r7, fp, [sp]
 8003b88:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8003b8c:	4655      	mov	r5, sl
 8003b8e:	e016      	b.n	8003bbe <ai_platform_api_get_network_report+0x202>
 8003b90:	2101      	movs	r1, #1
 8003b92:	f847 100e 	str.w	r1, [r7, lr]
 8003b96:	69b1      	ldr	r1, [r6, #24]
 8003b98:	6849      	ldr	r1, [r1, #4]
 8003b9a:	60a3      	str	r3, [r4, #8]
 8003b9c:	f04f 0301 	mov.w	r3, #1
 8003ba0:	7523      	strb	r3, [r4, #20]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60e3      	str	r3, [r4, #12]
 8003ba6:	6963      	ldr	r3, [r4, #20]
 8003ba8:	6121      	str	r1, [r4, #16]
 8003baa:	e9c4 0200 	strd	r0, r2, [r4]
 8003bae:	f368 231f 	bfi	r3, r8, #8, #24
 8003bb2:	f8c4 b018 	str.w	fp, [r4, #24]
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	f10a 0a1c 	add.w	sl, sl, #28
 8003bbc:	6163      	str	r3, [r4, #20]
 8003bbe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003bc2:	42ab      	cmp	r3, r5
 8003bc4:	b2aa      	uxth	r2, r5
 8003bc6:	d935      	bls.n	8003c34 <ai_platform_api_get_network_report+0x278>
 8003bc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d031      	beq.n	8003c34 <ai_platform_api_get_network_report+0x278>
 8003bd0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003bd4:	b376      	cbz	r6, 8003c34 <ai_platform_api_get_network_report+0x278>
 8003bd6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003bda:	69b2      	ldr	r2, [r6, #24]
 8003bdc:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8003be0:	6810      	ldr	r0, [r2, #0]
 8003be2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003be6:	68b3      	ldr	r3, [r6, #8]
 8003be8:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8003bec:	f001 fdb0 	bl	8005750 <ai_array_to_buffer_fmt>
 8003bf0:	69b1      	ldr	r1, [r6, #24]
 8003bf2:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003bf6:	688a      	ldr	r2, [r1, #8]
 8003bf8:	4454      	add	r4, sl
 8003bfa:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ca      	beq.n	8003b98 <ai_platform_api_get_network_report+0x1dc>
 8003c02:	2100      	movs	r1, #0
 8003c04:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003c08:	6831      	ldr	r1, [r6, #0]
 8003c0a:	6059      	str	r1, [r3, #4]
 8003c0c:	b111      	cbz	r1, 8003c14 <ai_platform_api_get_network_report+0x258>
 8003c0e:	8849      	ldrh	r1, [r1, #2]
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d1bd      	bne.n	8003b90 <ai_platform_api_get_network_report+0x1d4>
 8003c14:	69b1      	ldr	r1, [r6, #24]
 8003c16:	2300      	movs	r3, #0
 8003c18:	e7be      	b.n	8003b98 <ai_platform_api_get_network_report+0x1dc>
 8003c1a:	bf00      	nop
 8003c1c:	a1c00100 	.word	0xa1c00100
 8003c20:	e0042000 	.word	0xe0042000
 8003c24:	58024000 	.word	0x58024000
 8003c28:	f407a5c2 	.word	0xf407a5c2
 8003c2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c30:	40023000 	.word	0x40023000
 8003c34:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	f000 80c6 	beq.w	8003dca <ai_platform_api_get_network_report+0x40e>
 8003c3e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003c42:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8003c4c:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff fbfb 	bl	800344c <ai_buffer_array_sane>
 8003c56:	4604      	mov	r4, r0
 8003c58:	b938      	cbnz	r0, 8003c6a <ai_platform_api_get_network_report+0x2ae>
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f7ff fbf6 	bl	800344c <ai_buffer_array_sane>
 8003c60:	b118      	cbz	r0, 8003c6a <ai_platform_api_get_network_report+0x2ae>
 8003c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 80c5 	bne.w	8003df4 <ai_platform_api_get_network_report+0x438>
 8003c6a:	f107 081c 	add.w	r8, r7, #28
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f7ff fbec 	bl	800344c <ai_buffer_array_sane>
 8003c74:	4604      	mov	r4, r0
 8003c76:	b938      	cbnz	r0, 8003c88 <ai_platform_api_get_network_report+0x2cc>
 8003c78:	4640      	mov	r0, r8
 8003c7a:	f7ff fbe7 	bl	800344c <ai_buffer_array_sane>
 8003c7e:	b118      	cbz	r0, 8003c88 <ai_platform_api_get_network_report+0x2cc>
 8003c80:	8bfb      	ldrh	r3, [r7, #30]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 80bd 	bne.w	8003e02 <ai_platform_api_get_network_report+0x446>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 8003c8e:	f7ff fbf7 	bl	8003480 <_ai_platform_acquire_crc>
 8003c92:	4ba0      	ldr	r3, [pc, #640]	; (8003f14 <ai_platform_api_get_network_report+0x558>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d010      	beq.n	8003cc2 <ai_platform_api_get_network_report+0x306>
 8003ca0:	4a9d      	ldr	r2, [pc, #628]	; (8003f18 <ai_platform_api_get_network_report+0x55c>)
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003ca8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1fb      	bne.n	8003ca8 <ai_platform_api_get_network_report+0x2ec>
 8003cb0:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003cb2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003cb6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003cba:	4b99      	ldr	r3, [pc, #612]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d00d      	beq.n	8003cdc <ai_platform_api_get_network_report+0x320>
 8003cc0:	e7fe      	b.n	8003cc0 <ai_platform_api_get_network_report+0x304>
 8003cc2:	4a98      	ldr	r2, [pc, #608]	; (8003f24 <ai_platform_api_get_network_report+0x568>)
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	6893      	ldr	r3, [r2, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1fc      	bne.n	8003cc8 <ai_platform_api_get_network_report+0x30c>
 8003cce:	4b93      	ldr	r3, [pc, #588]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4b92      	ldr	r3, [pc, #584]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f040 808a 	bne.w	8003df0 <ai_platform_api_get_network_report+0x434>
 8003cdc:	f7ff fbd2 	bl	8003484 <_ai_platform_release_crc>
 8003ce0:	4b91      	ldr	r3, [pc, #580]	; (8003f28 <ai_platform_api_get_network_report+0x56c>)
 8003ce2:	f8cb 3010 	str.w	r3, [fp, #16]
 8003ce6:	f7ff fbcb 	bl	8003480 <_ai_platform_acquire_crc>
 8003cea:	4b8a      	ldr	r3, [pc, #552]	; (8003f14 <ai_platform_api_get_network_report+0x558>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d010      	beq.n	8003d1a <ai_platform_api_get_network_report+0x35e>
 8003cf8:	4b87      	ldr	r3, [pc, #540]	; (8003f18 <ai_platform_api_get_network_report+0x55c>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003d00:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003d04:	2a00      	cmp	r2, #0
 8003d06:	d1fb      	bne.n	8003d00 <ai_platform_api_get_network_report+0x344>
 8003d08:	4a84      	ldr	r2, [pc, #528]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003d0a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003d0e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003d12:	4b83      	ldr	r3, [pc, #524]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d00c      	beq.n	8003d32 <ai_platform_api_get_network_report+0x376>
 8003d18:	e7fe      	b.n	8003d18 <ai_platform_api_get_network_report+0x35c>
 8003d1a:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <ai_platform_api_get_network_report+0x568>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d1fc      	bne.n	8003d20 <ai_platform_api_get_network_report+0x364>
 8003d26:	4a7d      	ldr	r2, [pc, #500]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b7c      	ldr	r3, [pc, #496]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d15f      	bne.n	8003df2 <ai_platform_api_get_network_report+0x436>
 8003d32:	f7ff fba7 	bl	8003484 <_ai_platform_release_crc>
 8003d36:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003d3a:	f8cb 3014 	str.w	r3, [fp, #20]
 8003d3e:	f7ff fb9f 	bl	8003480 <_ai_platform_acquire_crc>
 8003d42:	4b74      	ldr	r3, [pc, #464]	; (8003f14 <ai_platform_api_get_network_report+0x558>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d010      	beq.n	8003d72 <ai_platform_api_get_network_report+0x3b6>
 8003d50:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <ai_platform_api_get_network_report+0x55c>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003d58:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003d5c:	2a00      	cmp	r2, #0
 8003d5e:	d1fb      	bne.n	8003d58 <ai_platform_api_get_network_report+0x39c>
 8003d60:	4a6e      	ldr	r2, [pc, #440]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003d62:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003d66:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d00c      	beq.n	8003d8a <ai_platform_api_get_network_report+0x3ce>
 8003d70:	e7fe      	b.n	8003d70 <ai_platform_api_get_network_report+0x3b4>
 8003d72:	4b6c      	ldr	r3, [pc, #432]	; (8003f24 <ai_platform_api_get_network_report+0x568>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	2a00      	cmp	r2, #0
 8003d7c:	d1fc      	bne.n	8003d78 <ai_platform_api_get_network_report+0x3bc>
 8003d7e:	4a67      	ldr	r2, [pc, #412]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d142      	bne.n	8003e10 <ai_platform_api_get_network_report+0x454>
 8003d8a:	f7ff fb7b 	bl	8003484 <_ai_platform_release_crc>
 8003d8e:	f240 2301 	movw	r3, #513	; 0x201
 8003d92:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8003d96:	f7ff fb73 	bl	8003480 <_ai_platform_acquire_crc>
 8003d9a:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <ai_platform_api_get_network_report+0x558>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d034      	beq.n	8003e12 <ai_platform_api_get_network_report+0x456>
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <ai_platform_api_get_network_report+0x55c>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003db0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	d1fb      	bne.n	8003db0 <ai_platform_api_get_network_report+0x3f4>
 8003db8:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003dba:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003dbe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003dc2:	4b57      	ldr	r3, [pc, #348]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d030      	beq.n	8003e2a <ai_platform_api_get_network_report+0x46e>
 8003dc8:	e7fe      	b.n	8003dc8 <ai_platform_api_get_network_report+0x40c>
 8003dca:	2400      	movs	r4, #0
 8003dcc:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 8003dd0:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 8003dd4:	2218      	movs	r2, #24
 8003dd6:	2113      	movs	r1, #19
 8003dd8:	f107 0010 	add.w	r0, r7, #16
 8003ddc:	f000 fdf0 	bl	80049c0 <core_set_error>
 8003de0:	e63a      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003de2:	2218      	movs	r2, #24
 8003de4:	2111      	movs	r1, #17
 8003de6:	f107 0010 	add.w	r0, r7, #16
 8003dea:	f000 fde9 	bl	80049c0 <core_set_error>
 8003dee:	e633      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003df0:	e7fe      	b.n	8003df0 <ai_platform_api_get_network_report+0x434>
 8003df2:	e7fe      	b.n	8003df2 <ai_platform_api_get_network_report+0x436>
 8003df4:	2213      	movs	r2, #19
 8003df6:	2111      	movs	r1, #17
 8003df8:	f107 0010 	add.w	r0, r7, #16
 8003dfc:	f000 fde0 	bl	80049c0 <core_set_error>
 8003e00:	e62a      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003e02:	2212      	movs	r2, #18
 8003e04:	2111      	movs	r1, #17
 8003e06:	f107 0010 	add.w	r0, r7, #16
 8003e0a:	f000 fdd9 	bl	80049c0 <core_set_error>
 8003e0e:	e623      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003e10:	e7fe      	b.n	8003e10 <ai_platform_api_get_network_report+0x454>
 8003e12:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <ai_platform_api_get_network_report+0x568>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	d1fc      	bne.n	8003e18 <ai_platform_api_get_network_report+0x45c>
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <ai_platform_api_get_network_report+0x560>)
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <ai_platform_api_get_network_report+0x564>)
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d14a      	bne.n	8003ec0 <ai_platform_api_get_network_report+0x504>
 8003e2a:	f7ff fb2b 	bl	8003484 <_ai_platform_release_crc>
 8003e2e:	f240 5301 	movw	r3, #1281	; 0x501
 8003e32:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8003e36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e38:	f001 fd36 	bl	80058a8 <ai_platform_version_get>
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <ai_platform_api_get_network_report+0x570>)
 8003e3e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8003e42:	f8cb 0020 	str.w	r0, [fp, #32]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d10d      	bne.n	8003e66 <ai_platform_api_get_network_report+0x4aa>
 8003e4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003e4e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8003e52:	e882 0003 	stmia.w	r2, {r0, r1}
 8003e56:	e898 0003 	ldmia.w	r8, {r0, r1}
 8003e5a:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 8003e5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003e62:	2401      	movs	r4, #1
 8003e64:	e5f8      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003e66:	4a32      	ldr	r2, [pc, #200]	; (8003f30 <ai_platform_api_get_network_report+0x574>)
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <ai_platform_api_get_network_report+0x578>)
 8003e6a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8003e6e:	2000      	movs	r0, #0
 8003e70:	2100      	movs	r1, #0
 8003e72:	f240 4201 	movw	r2, #1025	; 0x401
 8003e76:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8003e7a:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 8003e7e:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 8003e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e84:	f10d 0908 	add.w	r9, sp, #8
 8003e88:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 8003e8c:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 8003e90:	46a6      	mov	lr, r4
 8003e92:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8003e96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003e9a:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 8003e9e:	46ac      	mov	ip, r5
 8003ea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ea4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003ea8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff facd 	bl	800344c <ai_buffer_array_sane>
 8003eb2:	b990      	cbnz	r0, 8003eda <ai_platform_api_get_network_report+0x51e>
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f7ff fac9 	bl	800344c <ai_buffer_array_sane>
 8003eba:	b910      	cbnz	r0, 8003ec2 <ai_platform_api_get_network_report+0x506>
 8003ebc:	2401      	movs	r4, #1
 8003ebe:	e5cb      	b.n	8003a58 <ai_platform_api_get_network_report+0x9c>
 8003ec0:	e7fe      	b.n	8003ec0 <ai_platform_api_get_network_report+0x504>
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f7ff fac2 	bl	800344c <ai_buffer_array_sane>
 8003ec8:	b198      	cbz	r0, 8003ef2 <ai_platform_api_get_network_report+0x536>
 8003eca:	6a3d      	ldr	r5, [r7, #32]
 8003ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ed0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ed4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ed8:	e7f0      	b.n	8003ebc <ai_platform_api_get_network_report+0x500>
 8003eda:	4630      	mov	r0, r6
 8003edc:	f7ff fab6 	bl	800344c <ai_buffer_array_sane>
 8003ee0:	b178      	cbz	r0, 8003f02 <ai_platform_api_get_network_report+0x546>
 8003ee2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8003ee4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003eec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ef0:	e7e0      	b.n	8003eb4 <ai_platform_api_get_network_report+0x4f8>
 8003ef2:	4605      	mov	r5, r0
 8003ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003efc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f00:	deff      	udf	#255	; 0xff
 8003f02:	4604      	mov	r4, r0
 8003f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003f0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003f10:	deff      	udf	#255	; 0xff
 8003f12:	bf00      	nop
 8003f14:	e0042000 	.word	0xe0042000
 8003f18:	58024000 	.word	0x58024000
 8003f1c:	f407a5c2 	.word	0xf407a5c2
 8003f20:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f24:	40023000 	.word	0x40023000
 8003f28:	08009650 	.word	0x08009650
 8003f2c:	a1facade 	.word	0xa1facade
 8003f30:	00040440 	.word	0x00040440
 8003f34:	08008510 	.word	0x08008510

08003f38 <ai_platform_network_create>:
 8003f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	4606      	mov	r6, r0
 8003f40:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003f44:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003f48:	4615      	mov	r5, r2
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	f7ff fa98 	bl	8003480 <_ai_platform_acquire_crc>
 8003f50:	b188      	cbz	r0, 8003f76 <ai_platform_network_create+0x3e>
 8003f52:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <ai_platform_network_create+0x190>)
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f5a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003f5e:	4603      	mov	r3, r0
 8003f60:	d00e      	beq.n	8003f80 <ai_platform_network_create+0x48>
 8003f62:	4a5a      	ldr	r2, [pc, #360]	; (80040cc <ai_platform_network_create+0x194>)
 8003f64:	2118      	movs	r1, #24
 8003f66:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003f6a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003f6e:	2918      	cmp	r1, #24
 8003f70:	d018      	beq.n	8003fa4 <ai_platform_network_create+0x6c>
 8003f72:	f7ff fa87 	bl	8003484 <_ai_platform_release_crc>
 8003f76:	f244 1033 	movw	r0, #16691	; 0x4133
 8003f7a:	b003      	add	sp, #12
 8003f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f80:	4a53      	ldr	r2, [pc, #332]	; (80040d0 <ai_platform_network_create+0x198>)
 8003f82:	2101      	movs	r1, #1
 8003f84:	6091      	str	r1, [r2, #8]
 8003f86:	2114      	movs	r1, #20
 8003f88:	e001      	b.n	8003f8e <ai_platform_network_create+0x56>
 8003f8a:	3901      	subs	r1, #1
 8003f8c:	d002      	beq.n	8003f94 <ai_platform_network_create+0x5c>
 8003f8e:	6894      	ldr	r4, [r2, #8]
 8003f90:	2c00      	cmp	r4, #0
 8003f92:	d1fa      	bne.n	8003f8a <ai_platform_network_create+0x52>
 8003f94:	4a4e      	ldr	r2, [pc, #312]	; (80040d0 <ai_platform_network_create+0x198>)
 8003f96:	6891      	ldr	r1, [r2, #8]
 8003f98:	b911      	cbnz	r1, 8003fa0 <ai_platform_network_create+0x68>
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	3201      	adds	r2, #1
 8003f9e:	d008      	beq.n	8003fb2 <ai_platform_network_create+0x7a>
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	e7e6      	b.n	8003f72 <ai_platform_network_create+0x3a>
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003faa:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	d1fb      	bne.n	8003faa <ai_platform_network_create+0x72>
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fa66 	bl	8003484 <_ai_platform_release_crc>
 8003fb8:	f7ff fa62 	bl	8003480 <_ai_platform_acquire_crc>
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <ai_platform_network_create+0x190>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc8:	d010      	beq.n	8003fec <ai_platform_network_create+0xb4>
 8003fca:	4b40      	ldr	r3, [pc, #256]	; (80040cc <ai_platform_network_create+0x194>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003fd2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003fd6:	2900      	cmp	r1, #0
 8003fd8:	d1fb      	bne.n	8003fd2 <ai_platform_network_create+0x9a>
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <ai_platform_network_create+0x19c>)
 8003fdc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003fe0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003fe4:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <ai_platform_network_create+0x1a0>)
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d00c      	beq.n	8004004 <ai_platform_network_create+0xcc>
 8003fea:	e7fe      	b.n	8003fea <ai_platform_network_create+0xb2>
 8003fec:	4a38      	ldr	r2, [pc, #224]	; (80040d0 <ai_platform_network_create+0x198>)
 8003fee:	2301      	movs	r3, #1
 8003ff0:	6093      	str	r3, [r2, #8]
 8003ff2:	6893      	ldr	r3, [r2, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1fc      	bne.n	8003ff2 <ai_platform_network_create+0xba>
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <ai_platform_network_create+0x19c>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <ai_platform_network_create+0x1a0>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d122      	bne.n	800404a <ai_platform_network_create+0x112>
 8004004:	f7ff fa3e 	bl	8003484 <_ai_platform_release_crc>
 8004008:	b38e      	cbz	r6, 800406e <ai_platform_network_create+0x136>
 800400a:	4b34      	ldr	r3, [pc, #208]	; (80040dc <ai_platform_network_create+0x1a4>)
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	6035      	str	r5, [r6, #0]
 8004010:	f000 fcce 	bl	80049b0 <core_init>
 8004014:	b1d0      	cbz	r0, 800404c <ai_platform_network_create+0x114>
 8004016:	f7ff fa33 	bl	8003480 <_ai_platform_acquire_crc>
 800401a:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <ai_platform_network_create+0x190>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004026:	d025      	beq.n	8004074 <ai_platform_network_create+0x13c>
 8004028:	4a28      	ldr	r2, [pc, #160]	; (80040cc <ai_platform_network_create+0x194>)
 800402a:	2301      	movs	r3, #1
 800402c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004030:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1fb      	bne.n	8004030 <ai_platform_network_create+0xf8>
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <ai_platform_network_create+0x19c>)
 800403a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800403e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004042:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <ai_platform_network_create+0x1a0>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d022      	beq.n	800408e <ai_platform_network_create+0x156>
 8004048:	e7fe      	b.n	8004048 <ai_platform_network_create+0x110>
 800404a:	e7fe      	b.n	800404a <ai_platform_network_create+0x112>
 800404c:	2430      	movs	r4, #48	; 0x30
 800404e:	2300      	movs	r3, #0
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	2610      	movs	r6, #16
 8004054:	464a      	mov	r2, r9
 8004056:	4641      	mov	r1, r8
 8004058:	4638      	mov	r0, r7
 800405a:	f001 fc1f 	bl	800589c <ai_version_get>
 800405e:	4603      	mov	r3, r0
 8004060:	2000      	movs	r0, #0
 8004062:	f364 0007 	bfi	r0, r4, #0, #8
 8004066:	64ab      	str	r3, [r5, #72]	; 0x48
 8004068:	f366 201f 	bfi	r0, r6, #8, #24
 800406c:	e785      	b.n	8003f7a <ai_platform_network_create+0x42>
 800406e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004072:	e782      	b.n	8003f7a <ai_platform_network_create+0x42>
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <ai_platform_network_create+0x198>)
 8004076:	2301      	movs	r3, #1
 8004078:	6093      	str	r3, [r2, #8]
 800407a:	6893      	ldr	r3, [r2, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1fc      	bne.n	800407a <ai_platform_network_create+0x142>
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <ai_platform_network_create+0x19c>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <ai_platform_network_create+0x1a0>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d000      	beq.n	800408e <ai_platform_network_create+0x156>
 800408c:	e7fe      	b.n	800408c <ai_platform_network_create+0x154>
 800408e:	f7ff f9f9 	bl	8003484 <_ai_platform_release_crc>
 8004092:	2200      	movs	r2, #0
 8004094:	4641      	mov	r1, r8
 8004096:	4638      	mov	r0, r7
 8004098:	f001 fc00 	bl	800589c <ai_version_get>
 800409c:	2200      	movs	r2, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	2105      	movs	r1, #5
 80040a2:	2001      	movs	r0, #1
 80040a4:	f001 fbfa 	bl	800589c <ai_version_get>
 80040a8:	4284      	cmp	r4, r0
 80040aa:	d001      	beq.n	80040b0 <ai_platform_network_create+0x178>
 80040ac:	2401      	movs	r4, #1
 80040ae:	e7ce      	b.n	800404e <ai_platform_network_create+0x116>
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <ai_platform_network_create+0x1a8>)
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	a801      	add	r0, sp, #4
 80040b6:	f000 fc8f 	bl	80049d8 <ai_check_custom_types>
 80040ba:	b110      	cbz	r0, 80040c2 <ai_platform_network_create+0x18a>
 80040bc:	2600      	movs	r6, #0
 80040be:	4634      	mov	r4, r6
 80040c0:	e7c8      	b.n	8004054 <ai_platform_network_create+0x11c>
 80040c2:	2402      	movs	r4, #2
 80040c4:	e7c3      	b.n	800404e <ai_platform_network_create+0x116>
 80040c6:	bf00      	nop
 80040c8:	e0042000 	.word	0xe0042000
 80040cc:	58024000 	.word	0x58024000
 80040d0:	40023000 	.word	0x40023000
 80040d4:	f407a5c2 	.word	0xf407a5c2
 80040d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80040dc:	a1c00100 	.word	0xa1c00100
 80040e0:	84048403 	.word	0x84048403

080040e4 <ai_platform_network_destroy>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	4604      	mov	r4, r0
 80040e8:	b1e8      	cbz	r0, 8004126 <ai_platform_network_destroy+0x42>
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <ai_platform_network_destroy+0xc0>)
 80040ec:	6802      	ldr	r2, [r0, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d119      	bne.n	8004126 <ai_platform_network_destroy+0x42>
 80040f2:	f7ff f9c5 	bl	8003480 <_ai_platform_acquire_crc>
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <ai_platform_network_destroy+0xc4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d03b      	beq.n	800417c <ai_platform_network_destroy+0x98>
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <ai_platform_network_destroy+0xc8>)
 8004106:	2301      	movs	r3, #1
 8004108:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800410c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1fb      	bne.n	800410c <ai_platform_network_destroy+0x28>
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <ai_platform_network_destroy+0xcc>)
 8004116:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800411a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <ai_platform_network_destroy+0xd0>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d037      	beq.n	8004194 <ai_platform_network_destroy+0xb0>
 8004124:	e7fe      	b.n	8004124 <ai_platform_network_destroy+0x40>
 8004126:	f7ff f9ab 	bl	8003480 <_ai_platform_acquire_crc>
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <ai_platform_network_destroy+0xc4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d010      	beq.n	800415a <ai_platform_network_destroy+0x76>
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <ai_platform_network_destroy+0xc8>)
 800413a:	2301      	movs	r3, #1
 800413c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004140:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1fb      	bne.n	8004140 <ai_platform_network_destroy+0x5c>
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <ai_platform_network_destroy+0xcc>)
 800414a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800414e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <ai_platform_network_destroy+0xd0>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d00d      	beq.n	8004174 <ai_platform_network_destroy+0x90>
 8004158:	e7fe      	b.n	8004158 <ai_platform_network_destroy+0x74>
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <ai_platform_network_destroy+0xd4>)
 800415c:	2301      	movs	r3, #1
 800415e:	6093      	str	r3, [r2, #8]
 8004160:	6893      	ldr	r3, [r2, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1fc      	bne.n	8004160 <ai_platform_network_destroy+0x7c>
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <ai_platform_network_destroy+0xcc>)
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <ai_platform_network_destroy+0xd0>)
 800416e:	429a      	cmp	r2, r3
 8004170:	d000      	beq.n	8004174 <ai_platform_network_destroy+0x90>
 8004172:	e7fe      	b.n	8004172 <ai_platform_network_destroy+0x8e>
 8004174:	f7ff f986 	bl	8003484 <_ai_platform_release_crc>
 8004178:	4620      	mov	r0, r4
 800417a:	bd10      	pop	{r4, pc}
 800417c:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <ai_platform_network_destroy+0xd4>)
 800417e:	2301      	movs	r3, #1
 8004180:	6093      	str	r3, [r2, #8]
 8004182:	6893      	ldr	r3, [r2, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1fc      	bne.n	8004182 <ai_platform_network_destroy+0x9e>
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <ai_platform_network_destroy+0xcc>)
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <ai_platform_network_destroy+0xd0>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d106      	bne.n	80041a2 <ai_platform_network_destroy+0xbe>
 8004194:	f7ff f976 	bl	8003484 <_ai_platform_release_crc>
 8004198:	4620      	mov	r0, r4
 800419a:	f000 fcb3 	bl	8004b04 <ai_layers_destroy_all>
 800419e:	2000      	movs	r0, #0
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	e7fe      	b.n	80041a2 <ai_platform_network_destroy+0xbe>
 80041a4:	a1c00100 	.word	0xa1c00100
 80041a8:	e0042000 	.word	0xe0042000
 80041ac:	58024000 	.word	0x58024000
 80041b0:	f407a5c2 	.word	0xf407a5c2
 80041b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80041b8:	40023000 	.word	0x40023000

080041bc <ai_platform_network_init>:
 80041bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c0:	b1f8      	cbz	r0, 8004202 <ai_platform_network_init+0x46>
 80041c2:	4b6e      	ldr	r3, [pc, #440]	; (800437c <ai_platform_network_init+0x1c0>)
 80041c4:	6802      	ldr	r2, [r0, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	4604      	mov	r4, r0
 80041ca:	d11a      	bne.n	8004202 <ai_platform_network_init+0x46>
 80041cc:	460e      	mov	r6, r1
 80041ce:	f7ff f957 	bl	8003480 <_ai_platform_acquire_crc>
 80041d2:	4b6b      	ldr	r3, [pc, #428]	; (8004380 <ai_platform_network_init+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d03d      	beq.n	800425c <ai_platform_network_init+0xa0>
 80041e0:	4a68      	ldr	r2, [pc, #416]	; (8004384 <ai_platform_network_init+0x1c8>)
 80041e2:	2301      	movs	r3, #1
 80041e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80041e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1fb      	bne.n	80041e8 <ai_platform_network_init+0x2c>
 80041f0:	4b65      	ldr	r3, [pc, #404]	; (8004388 <ai_platform_network_init+0x1cc>)
 80041f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80041f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80041fa:	4b64      	ldr	r3, [pc, #400]	; (800438c <ai_platform_network_init+0x1d0>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d039      	beq.n	8004274 <ai_platform_network_init+0xb8>
 8004200:	e7fe      	b.n	8004200 <ai_platform_network_init+0x44>
 8004202:	f7ff f93d 	bl	8003480 <_ai_platform_acquire_crc>
 8004206:	4b5e      	ldr	r3, [pc, #376]	; (8004380 <ai_platform_network_init+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d010      	beq.n	8004236 <ai_platform_network_init+0x7a>
 8004214:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <ai_platform_network_init+0x1c8>)
 8004216:	2301      	movs	r3, #1
 8004218:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800421c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1fb      	bne.n	800421c <ai_platform_network_init+0x60>
 8004224:	4b58      	ldr	r3, [pc, #352]	; (8004388 <ai_platform_network_init+0x1cc>)
 8004226:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800422a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800422e:	4b57      	ldr	r3, [pc, #348]	; (800438c <ai_platform_network_init+0x1d0>)
 8004230:	429a      	cmp	r2, r3
 8004232:	d00d      	beq.n	8004250 <ai_platform_network_init+0x94>
 8004234:	e7fe      	b.n	8004234 <ai_platform_network_init+0x78>
 8004236:	4a56      	ldr	r2, [pc, #344]	; (8004390 <ai_platform_network_init+0x1d4>)
 8004238:	2301      	movs	r3, #1
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	6893      	ldr	r3, [r2, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1fc      	bne.n	800423c <ai_platform_network_init+0x80>
 8004242:	4b51      	ldr	r3, [pc, #324]	; (8004388 <ai_platform_network_init+0x1cc>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	4b50      	ldr	r3, [pc, #320]	; (800438c <ai_platform_network_init+0x1d0>)
 800424a:	429a      	cmp	r2, r3
 800424c:	d000      	beq.n	8004250 <ai_platform_network_init+0x94>
 800424e:	e7fe      	b.n	800424e <ai_platform_network_init+0x92>
 8004250:	f7ff f918 	bl	8003484 <_ai_platform_release_crc>
 8004254:	2600      	movs	r6, #0
 8004256:	4630      	mov	r0, r6
 8004258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800425c:	4a4c      	ldr	r2, [pc, #304]	; (8004390 <ai_platform_network_init+0x1d4>)
 800425e:	2301      	movs	r3, #1
 8004260:	6093      	str	r3, [r2, #8]
 8004262:	6893      	ldr	r3, [r2, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1fc      	bne.n	8004262 <ai_platform_network_init+0xa6>
 8004268:	4b47      	ldr	r3, [pc, #284]	; (8004388 <ai_platform_network_init+0x1cc>)
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4b47      	ldr	r3, [pc, #284]	; (800438c <ai_platform_network_init+0x1d0>)
 8004270:	429a      	cmp	r2, r3
 8004272:	d11c      	bne.n	80042ae <ai_platform_network_init+0xf2>
 8004274:	f7ff f906 	bl	8003484 <_ai_platform_release_crc>
 8004278:	2e00      	cmp	r6, #0
 800427a:	d06f      	beq.n	800435c <ai_platform_network_init+0x1a0>
 800427c:	4b45      	ldr	r3, [pc, #276]	; (8004394 <ai_platform_network_init+0x1d8>)
 800427e:	6832      	ldr	r2, [r6, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d115      	bne.n	80042b0 <ai_platform_network_init+0xf4>
 8004284:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004288:	6933      	ldr	r3, [r6, #16]
 800428a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800428e:	89f7      	ldrh	r7, [r6, #14]
 8004290:	62a3      	str	r3, [r4, #40]	; 0x28
 8004292:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004296:	2303      	movs	r3, #3
 8004298:	84e7      	strh	r7, [r4, #38]	; 0x26
 800429a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800429e:	60e3      	str	r3, [r4, #12]
 80042a0:	4620      	mov	r0, r4
 80042a2:	4626      	mov	r6, r4
 80042a4:	f000 fbc2 	bl	8004a2c <ai_layers_init_all>
 80042a8:	4630      	mov	r0, r6
 80042aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ae:	e7fe      	b.n	80042ae <ai_platform_network_init+0xf2>
 80042b0:	2101      	movs	r1, #1
 80042b2:	4630      	mov	r0, r6
 80042b4:	4635      	mov	r5, r6
 80042b6:	6876      	ldr	r6, [r6, #4]
 80042b8:	f7ff f894 	bl	80033e4 <ai_buffer_get_size>
 80042bc:	f105 081c 	add.w	r8, r5, #28
 80042c0:	4681      	mov	r9, r0
 80042c2:	2101      	movs	r1, #1
 80042c4:	4640      	mov	r0, r8
 80042c6:	6a2f      	ldr	r7, [r5, #32]
 80042c8:	f7ff f88c 	bl	80033e4 <ai_buffer_get_size>
 80042cc:	f1b9 0f00 	cmp.w	r9, #0
 80042d0:	d025      	beq.n	800431e <ai_platform_network_init+0x162>
 80042d2:	2201      	movs	r2, #1
 80042d4:	4696      	mov	lr, r2
 80042d6:	bb30      	cbnz	r0, 8004326 <ai_platform_network_init+0x16a>
 80042d8:	4680      	mov	r8, r0
 80042da:	4607      	mov	r7, r0
 80042dc:	b376      	cbz	r6, 800433c <ai_platform_network_init+0x180>
 80042de:	8be3      	ldrh	r3, [r4, #30]
 80042e0:	4573      	cmp	r3, lr
 80042e2:	d323      	bcc.n	800432c <ai_platform_network_init+0x170>
 80042e4:	b142      	cbz	r2, 80042f8 <ai_platform_network_init+0x13c>
 80042e6:	46ac      	mov	ip, r5
 80042e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042ec:	6a25      	ldr	r5, [r4, #32]
 80042ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042f0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80042f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80042f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80042fa:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80042fe:	2600      	movs	r6, #0
 8004300:	42bb      	cmp	r3, r7
 8004302:	83a6      	strh	r6, [r4, #28]
 8004304:	d323      	bcc.n	800434e <ai_platform_network_init+0x192>
 8004306:	b37f      	cbz	r7, 8004368 <ai_platform_network_init+0x1ac>
 8004308:	46c4      	mov	ip, r8
 800430a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800430e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004312:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004316:	46b6      	mov	lr, r6
 8004318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800431c:	e7bb      	b.n	8004296 <ai_platform_network_init+0xda>
 800431e:	464a      	mov	r2, r9
 8004320:	46ce      	mov	lr, r9
 8004322:	464d      	mov	r5, r9
 8004324:	e7d7      	b.n	80042d6 <ai_platform_network_init+0x11a>
 8004326:	b30f      	cbz	r7, 800436c <ai_platform_network_init+0x1b0>
 8004328:	2701      	movs	r7, #1
 800432a:	e7d7      	b.n	80042dc <ai_platform_network_init+0x120>
 800432c:	2212      	movs	r2, #18
 800432e:	2116      	movs	r1, #22
 8004330:	f104 0010 	add.w	r0, r4, #16
 8004334:	f000 fb44 	bl	80049c0 <core_set_error>
 8004338:	2600      	movs	r6, #0
 800433a:	e78c      	b.n	8004256 <ai_platform_network_init+0x9a>
 800433c:	f1b9 0f00 	cmp.w	r9, #0
 8004340:	d0cd      	beq.n	80042de <ai_platform_network_init+0x122>
 8004342:	2110      	movs	r1, #16
 8004344:	2212      	movs	r2, #18
 8004346:	1860      	adds	r0, r4, r1
 8004348:	f000 fb3a 	bl	80049c0 <core_set_error>
 800434c:	e783      	b.n	8004256 <ai_platform_network_init+0x9a>
 800434e:	2213      	movs	r2, #19
 8004350:	2116      	movs	r1, #22
 8004352:	f104 0010 	add.w	r0, r4, #16
 8004356:	f000 fb33 	bl	80049c0 <core_set_error>
 800435a:	e77c      	b.n	8004256 <ai_platform_network_init+0x9a>
 800435c:	2110      	movs	r1, #16
 800435e:	2211      	movs	r2, #17
 8004360:	1860      	adds	r0, r4, r1
 8004362:	f000 fb2d 	bl	80049c0 <core_set_error>
 8004366:	e776      	b.n	8004256 <ai_platform_network_init+0x9a>
 8004368:	46be      	mov	lr, r7
 800436a:	e794      	b.n	8004296 <ai_platform_network_init+0xda>
 800436c:	2110      	movs	r1, #16
 800436e:	2213      	movs	r2, #19
 8004370:	1860      	adds	r0, r4, r1
 8004372:	f000 fb25 	bl	80049c0 <core_set_error>
 8004376:	463e      	mov	r6, r7
 8004378:	e76d      	b.n	8004256 <ai_platform_network_init+0x9a>
 800437a:	bf00      	nop
 800437c:	a1c00100 	.word	0xa1c00100
 8004380:	e0042000 	.word	0xe0042000
 8004384:	58024000 	.word	0x58024000
 8004388:	f407a5c2 	.word	0xf407a5c2
 800438c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004390:	40023000 	.word	0x40023000
 8004394:	a1facade 	.word	0xa1facade

08004398 <ai_platform_network_post_init>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	b1f0      	cbz	r0, 80043da <ai_platform_network_post_init+0x42>
 800439c:	4b3c      	ldr	r3, [pc, #240]	; (8004490 <ai_platform_network_post_init+0xf8>)
 800439e:	6802      	ldr	r2, [r0, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	4604      	mov	r4, r0
 80043a4:	d119      	bne.n	80043da <ai_platform_network_post_init+0x42>
 80043a6:	f7ff f86b 	bl	8003480 <_ai_platform_acquire_crc>
 80043aa:	4b3a      	ldr	r3, [pc, #232]	; (8004494 <ai_platform_network_post_init+0xfc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b6:	d03b      	beq.n	8004430 <ai_platform_network_post_init+0x98>
 80043b8:	4a37      	ldr	r2, [pc, #220]	; (8004498 <ai_platform_network_post_init+0x100>)
 80043ba:	2301      	movs	r3, #1
 80043bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80043c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1fb      	bne.n	80043c0 <ai_platform_network_post_init+0x28>
 80043c8:	4b34      	ldr	r3, [pc, #208]	; (800449c <ai_platform_network_post_init+0x104>)
 80043ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80043ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80043d2:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <ai_platform_network_post_init+0x108>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d037      	beq.n	8004448 <ai_platform_network_post_init+0xb0>
 80043d8:	e7fe      	b.n	80043d8 <ai_platform_network_post_init+0x40>
 80043da:	f7ff f851 	bl	8003480 <_ai_platform_acquire_crc>
 80043de:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <ai_platform_network_post_init+0xfc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ea:	d010      	beq.n	800440e <ai_platform_network_post_init+0x76>
 80043ec:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <ai_platform_network_post_init+0x100>)
 80043ee:	2301      	movs	r3, #1
 80043f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80043f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1fb      	bne.n	80043f4 <ai_platform_network_post_init+0x5c>
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <ai_platform_network_post_init+0x104>)
 80043fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004402:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <ai_platform_network_post_init+0x108>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d00d      	beq.n	8004428 <ai_platform_network_post_init+0x90>
 800440c:	e7fe      	b.n	800440c <ai_platform_network_post_init+0x74>
 800440e:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <ai_platform_network_post_init+0x10c>)
 8004410:	2301      	movs	r3, #1
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	6893      	ldr	r3, [r2, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1fc      	bne.n	8004414 <ai_platform_network_post_init+0x7c>
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <ai_platform_network_post_init+0x104>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <ai_platform_network_post_init+0x108>)
 8004422:	429a      	cmp	r2, r3
 8004424:	d000      	beq.n	8004428 <ai_platform_network_post_init+0x90>
 8004426:	e7fe      	b.n	8004426 <ai_platform_network_post_init+0x8e>
 8004428:	f7ff f82c 	bl	8003484 <_ai_platform_release_crc>
 800442c:	2000      	movs	r0, #0
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <ai_platform_network_post_init+0x10c>)
 8004432:	2301      	movs	r3, #1
 8004434:	6093      	str	r3, [r2, #8]
 8004436:	6893      	ldr	r3, [r2, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1fc      	bne.n	8004436 <ai_platform_network_post_init+0x9e>
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <ai_platform_network_post_init+0x104>)
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <ai_platform_network_post_init+0x108>)
 8004444:	429a      	cmp	r2, r3
 8004446:	d11a      	bne.n	800447e <ai_platform_network_post_init+0xe6>
 8004448:	f7ff f81c 	bl	8003484 <_ai_platform_release_crc>
 800444c:	68e3      	ldr	r3, [r4, #12]
 800444e:	f013 0502 	ands.w	r5, r3, #2
 8004452:	d015      	beq.n	8004480 <ai_platform_network_post_init+0xe8>
 8004454:	4620      	mov	r0, r4
 8004456:	f000 faf7 	bl	8004a48 <ai_layers_post_init_all>
 800445a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800445c:	b16b      	cbz	r3, 800447a <ai_platform_network_post_init+0xe2>
 800445e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004460:	e007      	b.n	8004472 <ai_platform_network_post_init+0xda>
 8004462:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004466:	4798      	blx	r3
 8004468:	692b      	ldr	r3, [r5, #16]
 800446a:	42ab      	cmp	r3, r5
 800446c:	d005      	beq.n	800447a <ai_platform_network_post_init+0xe2>
 800446e:	b123      	cbz	r3, 800447a <ai_platform_network_post_init+0xe2>
 8004470:	461d      	mov	r5, r3
 8004472:	4629      	mov	r1, r5
 8004474:	2000      	movs	r0, #0
 8004476:	2d00      	cmp	r5, #0
 8004478:	d1f3      	bne.n	8004462 <ai_platform_network_post_init+0xca>
 800447a:	2001      	movs	r0, #1
 800447c:	bd38      	pop	{r3, r4, r5, pc}
 800447e:	e7fe      	b.n	800447e <ai_platform_network_post_init+0xe6>
 8004480:	2210      	movs	r2, #16
 8004482:	2111      	movs	r1, #17
 8004484:	18a0      	adds	r0, r4, r2
 8004486:	f000 fa9b 	bl	80049c0 <core_set_error>
 800448a:	4628      	mov	r0, r5
 800448c:	bd38      	pop	{r3, r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	a1c00100 	.word	0xa1c00100
 8004494:	e0042000 	.word	0xe0042000
 8004498:	58024000 	.word	0x58024000
 800449c:	f407a5c2 	.word	0xf407a5c2
 80044a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80044a4:	40023000 	.word	0x40023000

080044a8 <ai_platform_network_process>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	460e      	mov	r6, r1
 80044ae:	b085      	sub	sp, #20
 80044b0:	4693      	mov	fp, r2
 80044b2:	4605      	mov	r5, r0
 80044b4:	b120      	cbz	r0, 80044c0 <ai_platform_network_process+0x18>
 80044b6:	4bb8      	ldr	r3, [pc, #736]	; (8004798 <ai_platform_network_process+0x2f0>)
 80044b8:	6802      	ldr	r2, [r0, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	bf18      	it	ne
 80044be:	2500      	movne	r5, #0
 80044c0:	f7fe ffde 	bl	8003480 <_ai_platform_acquire_crc>
 80044c4:	4bb5      	ldr	r3, [pc, #724]	; (800479c <ai_platform_network_process+0x2f4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d010      	beq.n	80044f4 <ai_platform_network_process+0x4c>
 80044d2:	4ab3      	ldr	r2, [pc, #716]	; (80047a0 <ai_platform_network_process+0x2f8>)
 80044d4:	2301      	movs	r3, #1
 80044d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80044da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1fb      	bne.n	80044da <ai_platform_network_process+0x32>
 80044e2:	4bb0      	ldr	r3, [pc, #704]	; (80047a4 <ai_platform_network_process+0x2fc>)
 80044e4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80044e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80044ec:	4bae      	ldr	r3, [pc, #696]	; (80047a8 <ai_platform_network_process+0x300>)
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d00d      	beq.n	800450e <ai_platform_network_process+0x66>
 80044f2:	e7fe      	b.n	80044f2 <ai_platform_network_process+0x4a>
 80044f4:	4aad      	ldr	r2, [pc, #692]	; (80047ac <ai_platform_network_process+0x304>)
 80044f6:	2301      	movs	r3, #1
 80044f8:	6093      	str	r3, [r2, #8]
 80044fa:	6893      	ldr	r3, [r2, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1fc      	bne.n	80044fa <ai_platform_network_process+0x52>
 8004500:	4ba8      	ldr	r3, [pc, #672]	; (80047a4 <ai_platform_network_process+0x2fc>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	4ba8      	ldr	r3, [pc, #672]	; (80047a8 <ai_platform_network_process+0x300>)
 8004508:	429a      	cmp	r2, r3
 800450a:	f040 812c 	bne.w	8004766 <ai_platform_network_process+0x2be>
 800450e:	f7fe ffb9 	bl	8003484 <_ai_platform_release_crc>
 8004512:	2d00      	cmp	r5, #0
 8004514:	f000 8154 	beq.w	80047c0 <ai_platform_network_process+0x318>
 8004518:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8124 	beq.w	8004768 <ai_platform_network_process+0x2c0>
 8004520:	68eb      	ldr	r3, [r5, #12]
 8004522:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2700      	movs	r7, #0
 800452c:	2b03      	cmp	r3, #3
 800452e:	616f      	str	r7, [r5, #20]
 8004530:	f040 813e 	bne.w	80047b0 <ai_platform_network_process+0x308>
 8004534:	2e00      	cmp	r6, #0
 8004536:	f000 811d 	beq.w	8004774 <ai_platform_network_process+0x2cc>
 800453a:	f1ba 0f00 	cmp.w	sl, #0
 800453e:	f000 8119 	beq.w	8004774 <ai_platform_network_process+0x2cc>
 8004542:	f8ba 3000 	ldrh.w	r3, [sl]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8114 	beq.w	8004774 <ai_platform_network_process+0x2cc>
 800454c:	69b3      	ldr	r3, [r6, #24]
 800454e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004558:	f8da 3004 	ldr.w	r3, [sl, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d072      	beq.n	8004646 <ai_platform_network_process+0x19e>
 8004560:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004564:	2c00      	cmp	r4, #0
 8004566:	d06e      	beq.n	8004646 <ai_platform_network_process+0x19e>
 8004568:	f8da 3008 	ldr.w	r3, [sl, #8]
 800456c:	f8d3 9000 	ldr.w	r9, [r3]
 8004570:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004574:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004578:	f000 81de 	beq.w	8004938 <ai_platform_network_process+0x490>
 800457c:	69a3      	ldr	r3, [r4, #24]
 800457e:	2101      	movs	r1, #1
 8004580:	4630      	mov	r0, r6
 8004582:	685d      	ldr	r5, [r3, #4]
 8004584:	f7fe ff2e 	bl	80033e4 <ai_buffer_get_size>
 8004588:	4285      	cmp	r5, r0
 800458a:	f0c0 811b 	bcc.w	80047c4 <ai_platform_network_process+0x31c>
 800458e:	68e0      	ldr	r0, [r4, #12]
 8004590:	69b1      	ldr	r1, [r6, #24]
 8004592:	68c2      	ldr	r2, [r0, #12]
 8004594:	68cb      	ldr	r3, [r1, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	f040 8114 	bne.w	80047c4 <ai_platform_network_process+0x31c>
 800459c:	6882      	ldr	r2, [r0, #8]
 800459e:	688b      	ldr	r3, [r1, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	f040 810f 	bne.w	80047c4 <ai_platform_network_process+0x31c>
 80045a6:	6842      	ldr	r2, [r0, #4]
 80045a8:	684b      	ldr	r3, [r1, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	f040 810a 	bne.w	80047c4 <ai_platform_network_process+0x31c>
 80045b0:	69a3      	ldr	r3, [r4, #24]
 80045b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045b6:	f001 f95f 	bl	8005878 <ai_array_get_data_byte_size>
 80045ba:	4605      	mov	r5, r0
 80045bc:	4620      	mov	r0, r4
 80045be:	f001 f985 	bl	80058cc <get_tensor_byte_size>
 80045c2:	4285      	cmp	r5, r0
 80045c4:	f0c0 80fe 	bcc.w	80047c4 <ai_platform_network_process+0x31c>
 80045c8:	69a3      	ldr	r3, [r4, #24]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	f001 f8c0 	bl	8005750 <ai_array_to_buffer_fmt>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	4058      	eors	r0, r3
 80045d4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80045d8:	f040 81b9 	bne.w	800494e <ai_platform_network_process+0x4a6>
 80045dc:	6873      	ldr	r3, [r6, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 81ac 	beq.w	800493c <ai_platform_network_process+0x494>
 80045e4:	69b3      	ldr	r3, [r6, #24]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 819c 	beq.w	8004926 <ai_platform_network_process+0x47e>
 80045ee:	9a01      	ldr	r2, [sp, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	bf38      	it	cc
 80045f4:	461a      	movcc	r2, r3
 80045f6:	4620      	mov	r0, r4
 80045f8:	9201      	str	r2, [sp, #4]
 80045fa:	f001 f967 	bl	80058cc <get_tensor_byte_size>
 80045fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8004602:	69b3      	ldr	r3, [r6, #24]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	fb00 f303 	mul.w	r3, r0, r3
 800460a:	f8c8 300c 	str.w	r3, [r8, #12]
 800460e:	6871      	ldr	r1, [r6, #4]
 8004610:	f8c8 1004 	str.w	r1, [r8, #4]
 8004614:	440b      	add	r3, r1
 8004616:	f849 300b 	str.w	r3, [r9, fp]
 800461a:	69a0      	ldr	r0, [r4, #24]
 800461c:	6803      	ldr	r3, [r0, #0]
 800461e:	009a      	lsls	r2, r3, #2
 8004620:	f107 0701 	add.w	r7, r7, #1
 8004624:	f106 061c 	add.w	r6, r6, #28
 8004628:	f100 80af 	bmi.w	800478a <ai_platform_network_process+0x2e2>
 800462c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	4419      	add	r1, r3
 8004634:	6081      	str	r1, [r0, #8]
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	f8ba 3000 	ldrh.w	r3, [sl]
 8004642:	42bb      	cmp	r3, r7
 8004644:	d888      	bhi.n	8004558 <ai_platform_network_process+0xb0>
 8004646:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800464a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800464c:	f1bb 0f00 	cmp.w	fp, #0
 8004650:	f000 8186 	beq.w	8004960 <ai_platform_network_process+0x4b8>
 8004654:	2a01      	cmp	r2, #1
 8004656:	f240 815e 	bls.w	8004916 <ai_platform_network_process+0x46e>
 800465a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800465e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8157 	beq.w	8004916 <ai_platform_network_process+0x46e>
 8004668:	465e      	mov	r6, fp
 800466a:	2700      	movs	r7, #0
 800466c:	462c      	mov	r4, r5
 800466e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80b4 	beq.w	80047e0 <ai_platform_network_process+0x338>
 8004678:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800467c:	2d00      	cmp	r5, #0
 800467e:	f000 80af 	beq.w	80047e0 <ai_platform_network_process+0x338>
 8004682:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004686:	f8d3 8000 	ldr.w	r8, [r3]
 800468a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800468e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004692:	f000 8171 	beq.w	8004978 <ai_platform_network_process+0x4d0>
 8004696:	69ab      	ldr	r3, [r5, #24]
 8004698:	2101      	movs	r1, #1
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	4630      	mov	r0, r6
 80046a0:	f7fe fea0 	bl	80033e4 <ai_buffer_get_size>
 80046a4:	9b02      	ldr	r3, [sp, #8]
 80046a6:	4283      	cmp	r3, r0
 80046a8:	f0c0 8134 	bcc.w	8004914 <ai_platform_network_process+0x46c>
 80046ac:	68e8      	ldr	r0, [r5, #12]
 80046ae:	69b1      	ldr	r1, [r6, #24]
 80046b0:	68c2      	ldr	r2, [r0, #12]
 80046b2:	68cb      	ldr	r3, [r1, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	f040 812d 	bne.w	8004914 <ai_platform_network_process+0x46c>
 80046ba:	6882      	ldr	r2, [r0, #8]
 80046bc:	688b      	ldr	r3, [r1, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	f040 8128 	bne.w	8004914 <ai_platform_network_process+0x46c>
 80046c4:	6842      	ldr	r2, [r0, #4]
 80046c6:	684b      	ldr	r3, [r1, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f040 8123 	bne.w	8004914 <ai_platform_network_process+0x46c>
 80046ce:	69ab      	ldr	r3, [r5, #24]
 80046d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046d4:	f001 f8d0 	bl	8005878 <ai_array_get_data_byte_size>
 80046d8:	9002      	str	r0, [sp, #8]
 80046da:	4628      	mov	r0, r5
 80046dc:	f001 f8f6 	bl	80058cc <get_tensor_byte_size>
 80046e0:	9b02      	ldr	r3, [sp, #8]
 80046e2:	4283      	cmp	r3, r0
 80046e4:	f0c0 8116 	bcc.w	8004914 <ai_platform_network_process+0x46c>
 80046e8:	69ab      	ldr	r3, [r5, #24]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	f001 f830 	bl	8005750 <ai_array_to_buffer_fmt>
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	4058      	eors	r0, r3
 80046f4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80046f8:	f040 8136 	bne.w	8004968 <ai_platform_network_process+0x4c0>
 80046fc:	6873      	ldr	r3, [r6, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 814d 	beq.w	800499e <ai_platform_network_process+0x4f6>
 8004704:	69b3      	ldr	r3, [r6, #24]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 813f 	beq.w	800498c <ai_platform_network_process+0x4e4>
 800470e:	9a01      	ldr	r2, [sp, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	bf38      	it	cc
 8004714:	461a      	movcc	r2, r3
 8004716:	4628      	mov	r0, r5
 8004718:	9201      	str	r2, [sp, #4]
 800471a:	f001 f8d7 	bl	80058cc <get_tensor_byte_size>
 800471e:	f8ca 0008 	str.w	r0, [sl, #8]
 8004722:	69b3      	ldr	r3, [r6, #24]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	f8ca 300c 	str.w	r3, [sl, #12]
 800472e:	6871      	ldr	r1, [r6, #4]
 8004730:	f8ca 1004 	str.w	r1, [sl, #4]
 8004734:	440b      	add	r3, r1
 8004736:	f848 300b 	str.w	r3, [r8, fp]
 800473a:	69a8      	ldr	r0, [r5, #24]
 800473c:	6803      	ldr	r3, [r0, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	f107 0701 	add.w	r7, r7, #1
 8004744:	f106 061c 	add.w	r6, r6, #28
 8004748:	d445      	bmi.n	80047d6 <ai_platform_network_process+0x32e>
 800474a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	4419      	add	r1, r3
 8004752:	6081      	str	r1, [r0, #8]
 8004754:	69ab      	ldr	r3, [r5, #24]
 8004756:	f8da 2004 	ldr.w	r2, [sl, #4]
 800475a:	60da      	str	r2, [r3, #12]
 800475c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004760:	429f      	cmp	r7, r3
 8004762:	d384      	bcc.n	800466e <ai_platform_network_process+0x1c6>
 8004764:	e03c      	b.n	80047e0 <ai_platform_network_process+0x338>
 8004766:	e7fe      	b.n	8004766 <ai_platform_network_process+0x2be>
 8004768:	68ea      	ldr	r2, [r5, #12]
 800476a:	616b      	str	r3, [r5, #20]
 800476c:	f002 0203 	and.w	r2, r2, #3
 8004770:	2a03      	cmp	r2, #3
 8004772:	d11d      	bne.n	80047b0 <ai_platform_network_process+0x308>
 8004774:	2217      	movs	r2, #23
 8004776:	2112      	movs	r1, #18
 8004778:	f105 0010 	add.w	r0, r5, #16
 800477c:	f000 f920 	bl	80049c0 <core_set_error>
 8004780:	2400      	movs	r4, #0
 8004782:	4620      	mov	r0, r4
 8004784:	b005      	add	sp, #20
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	f8ba 3000 	ldrh.w	r3, [sl]
 800478e:	429f      	cmp	r7, r3
 8004790:	f4ff aee2 	bcc.w	8004558 <ai_platform_network_process+0xb0>
 8004794:	e757      	b.n	8004646 <ai_platform_network_process+0x19e>
 8004796:	bf00      	nop
 8004798:	a1c00100 	.word	0xa1c00100
 800479c:	e0042000 	.word	0xe0042000
 80047a0:	58024000 	.word	0x58024000
 80047a4:	f407a5c2 	.word	0xf407a5c2
 80047a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80047ac:	40023000 	.word	0x40023000
 80047b0:	2230      	movs	r2, #48	; 0x30
 80047b2:	2111      	movs	r1, #17
 80047b4:	f105 0010 	add.w	r0, r5, #16
 80047b8:	f000 f902 	bl	80049c0 <core_set_error>
 80047bc:	2400      	movs	r4, #0
 80047be:	e7e0      	b.n	8004782 <ai_platform_network_process+0x2da>
 80047c0:	462c      	mov	r4, r5
 80047c2:	e7de      	b.n	8004782 <ai_platform_network_process+0x2da>
 80047c4:	9d02      	ldr	r5, [sp, #8]
 80047c6:	2218      	movs	r2, #24
 80047c8:	2112      	movs	r1, #18
 80047ca:	f105 0010 	add.w	r0, r5, #16
 80047ce:	f000 f8f7 	bl	80049c0 <core_set_error>
 80047d2:	2400      	movs	r4, #0
 80047d4:	e7d5      	b.n	8004782 <ai_platform_network_process+0x2da>
 80047d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80047da:	429f      	cmp	r7, r3
 80047dc:	f4ff af47 	bcc.w	800466e <ai_platform_network_process+0x1c6>
 80047e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80047e4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80047e6:	82a3      	strh	r3, [r4, #20]
 80047e8:	4625      	mov	r5, r4
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	f040 808c 	bne.w	8004908 <ai_platform_network_process+0x460>
 80047f0:	4616      	mov	r6, r2
 80047f2:	4617      	mov	r7, r2
 80047f4:	8aec      	ldrh	r4, [r5, #22]
 80047f6:	429c      	cmp	r4, r3
 80047f8:	bf38      	it	cc
 80047fa:	46ab      	movcc	fp, r5
 80047fc:	d2c1      	bcs.n	8004782 <ai_platform_network_process+0x2da>
 80047fe:	2e00      	cmp	r6, #0
 8004800:	d030      	beq.n	8004864 <ai_platform_network_process+0x3bc>
 8004802:	f04f 0800 	mov.w	r8, #0
 8004806:	e014      	b.n	8004832 <ai_platform_network_process+0x38a>
 8004808:	6882      	ldr	r2, [r0, #8]
 800480a:	68c5      	ldr	r5, [r0, #12]
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	1b52      	subs	r2, r2, r5
 8004810:	4413      	add	r3, r2
 8004812:	6083      	str	r3, [r0, #8]
 8004814:	698b      	ldr	r3, [r1, #24]
 8004816:	6862      	ldr	r2, [r4, #4]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800481e:	f859 200a 	ldr.w	r2, [r9, sl]
 8004822:	440b      	add	r3, r1
 8004824:	4293      	cmp	r3, r2
 8004826:	bf24      	itt	cs
 8004828:	68e3      	ldrcs	r3, [r4, #12]
 800482a:	1ad3      	subcs	r3, r2, r3
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	f108 0801 	add.w	r8, r8, #1
 8004832:	8833      	ldrh	r3, [r6, #0]
 8004834:	4543      	cmp	r3, r8
 8004836:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800483a:	d913      	bls.n	8004864 <ai_platform_network_process+0x3bc>
 800483c:	6873      	ldr	r3, [r6, #4]
 800483e:	b18b      	cbz	r3, 8004864 <ai_platform_network_process+0x3bc>
 8004840:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004844:	b171      	cbz	r1, 8004864 <ai_platform_network_process+0x3bc>
 8004846:	6988      	ldr	r0, [r1, #24]
 8004848:	68b2      	ldr	r2, [r6, #8]
 800484a:	6803      	ldr	r3, [r0, #0]
 800484c:	f8d2 9000 	ldr.w	r9, [r2]
 8004850:	009d      	lsls	r5, r3, #2
 8004852:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004856:	d5d7      	bpl.n	8004808 <ai_platform_network_process+0x360>
 8004858:	6881      	ldr	r1, [r0, #8]
 800485a:	68a2      	ldr	r2, [r4, #8]
 800485c:	6860      	ldr	r0, [r4, #4]
 800485e:	f000 fef1 	bl	8005644 <st_int8_copy>
 8004862:	e7da      	b.n	800481a <ai_platform_network_process+0x372>
 8004864:	4658      	mov	r0, fp
 8004866:	f000 f903 	bl	8004a70 <ai_layers_forward_all>
 800486a:	2f00      	cmp	r7, #0
 800486c:	d03d      	beq.n	80048ea <ai_platform_network_process+0x442>
 800486e:	2400      	movs	r4, #0
 8004870:	e016      	b.n	80048a0 <ai_platform_network_process+0x3f8>
 8004872:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004876:	f859 100a 	ldr.w	r1, [r9, sl]
 800487a:	4413      	add	r3, r2
 800487c:	428b      	cmp	r3, r1
 800487e:	bf24      	itt	cs
 8004880:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004884:	1acb      	subcs	r3, r1, r3
 8004886:	f8c8 3004 	str.w	r3, [r8, #4]
 800488a:	6981      	ldr	r1, [r0, #24]
 800488c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004890:	1b52      	subs	r2, r2, r5
 8004892:	4413      	add	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
 8004896:	6983      	ldr	r3, [r0, #24]
 8004898:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	3401      	adds	r4, #1
 80048a0:	883b      	ldrh	r3, [r7, #0]
 80048a2:	42a3      	cmp	r3, r4
 80048a4:	d921      	bls.n	80048ea <ai_platform_network_process+0x442>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	b1fb      	cbz	r3, 80048ea <ai_platform_network_process+0x442>
 80048aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048ae:	b1e0      	cbz	r0, 80048ea <ai_platform_network_process+0x442>
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	6983      	ldr	r3, [r0, #24]
 80048b4:	f8d2 9000 	ldr.w	r9, [r2]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	0092      	lsls	r2, r2, #2
 80048bc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80048c0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80048c4:	d5d5      	bpl.n	8004872 <ai_platform_network_process+0x3ca>
 80048c6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80048ca:	6898      	ldr	r0, [r3, #8]
 80048cc:	f000 feba 	bl	8005644 <st_int8_copy>
 80048d0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80048d4:	f859 200a 	ldr.w	r2, [r9, sl]
 80048d8:	440b      	add	r3, r1
 80048da:	4293      	cmp	r3, r2
 80048dc:	bf24      	itt	cs
 80048de:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80048e2:	1ad3      	subcs	r3, r2, r3
 80048e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80048e8:	e7d9      	b.n	800489e <ai_platform_network_process+0x3f6>
 80048ea:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80048ee:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80048f2:	3401      	adds	r4, #1
 80048f4:	b2a4      	uxth	r4, r4
 80048f6:	42a3      	cmp	r3, r4
 80048f8:	f8ab 4016 	strh.w	r4, [fp, #22]
 80048fc:	f63f af7f 	bhi.w	80047fe <ai_platform_network_process+0x356>
 8004900:	4620      	mov	r0, r4
 8004902:	b005      	add	sp, #20
 8004904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004908:	2a01      	cmp	r2, #1
 800490a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800490c:	d03c      	beq.n	8004988 <ai_platform_network_process+0x4e0>
 800490e:	f106 070c 	add.w	r7, r6, #12
 8004912:	e76f      	b.n	80047f4 <ai_platform_network_process+0x34c>
 8004914:	4625      	mov	r5, r4
 8004916:	2218      	movs	r2, #24
 8004918:	2113      	movs	r1, #19
 800491a:	f105 0010 	add.w	r0, r5, #16
 800491e:	f000 f84f 	bl	80049c0 <core_set_error>
 8004922:	2400      	movs	r4, #0
 8004924:	e72d      	b.n	8004782 <ai_platform_network_process+0x2da>
 8004926:	9d02      	ldr	r5, [sp, #8]
 8004928:	4604      	mov	r4, r0
 800492a:	2221      	movs	r2, #33	; 0x21
 800492c:	2112      	movs	r1, #18
 800492e:	f105 0010 	add.w	r0, r5, #16
 8004932:	f000 f845 	bl	80049c0 <core_set_error>
 8004936:	e724      	b.n	8004782 <ai_platform_network_process+0x2da>
 8004938:	9d02      	ldr	r5, [sp, #8]
 800493a:	e71b      	b.n	8004774 <ai_platform_network_process+0x2cc>
 800493c:	9d02      	ldr	r5, [sp, #8]
 800493e:	4604      	mov	r4, r0
 8004940:	2217      	movs	r2, #23
 8004942:	2112      	movs	r1, #18
 8004944:	f105 0010 	add.w	r0, r5, #16
 8004948:	f000 f83a 	bl	80049c0 <core_set_error>
 800494c:	e719      	b.n	8004782 <ai_platform_network_process+0x2da>
 800494e:	9d02      	ldr	r5, [sp, #8]
 8004950:	2219      	movs	r2, #25
 8004952:	2112      	movs	r1, #18
 8004954:	f105 0010 	add.w	r0, r5, #16
 8004958:	f000 f832 	bl	80049c0 <core_set_error>
 800495c:	2400      	movs	r4, #0
 800495e:	e710      	b.n	8004782 <ai_platform_network_process+0x2da>
 8004960:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004964:	82ab      	strh	r3, [r5, #20]
 8004966:	e740      	b.n	80047ea <ai_platform_network_process+0x342>
 8004968:	f104 0010 	add.w	r0, r4, #16
 800496c:	2219      	movs	r2, #25
 800496e:	2113      	movs	r1, #19
 8004970:	f000 f826 	bl	80049c0 <core_set_error>
 8004974:	2400      	movs	r4, #0
 8004976:	e704      	b.n	8004782 <ai_platform_network_process+0x2da>
 8004978:	f104 0010 	add.w	r0, r4, #16
 800497c:	2217      	movs	r2, #23
 800497e:	2113      	movs	r1, #19
 8004980:	f000 f81e 	bl	80049c0 <core_set_error>
 8004984:	4654      	mov	r4, sl
 8004986:	e6fc      	b.n	8004782 <ai_platform_network_process+0x2da>
 8004988:	2700      	movs	r7, #0
 800498a:	e733      	b.n	80047f4 <ai_platform_network_process+0x34c>
 800498c:	4625      	mov	r5, r4
 800498e:	2221      	movs	r2, #33	; 0x21
 8004990:	4604      	mov	r4, r0
 8004992:	2113      	movs	r1, #19
 8004994:	f105 0010 	add.w	r0, r5, #16
 8004998:	f000 f812 	bl	80049c0 <core_set_error>
 800499c:	e6f1      	b.n	8004782 <ai_platform_network_process+0x2da>
 800499e:	4625      	mov	r5, r4
 80049a0:	2217      	movs	r2, #23
 80049a2:	4604      	mov	r4, r0
 80049a4:	2113      	movs	r1, #19
 80049a6:	f105 0010 	add.w	r0, r5, #16
 80049aa:	f000 f809 	bl	80049c0 <core_set_error>
 80049ae:	e6e8      	b.n	8004782 <ai_platform_network_process+0x2da>

080049b0 <core_init>:
 80049b0:	2001      	movs	r0, #1
 80049b2:	4770      	bx	lr

080049b4 <core_get_error>:
 80049b4:	4603      	mov	r3, r0
 80049b6:	2200      	movs	r2, #0
 80049b8:	6800      	ldr	r0, [r0, #0]
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop

080049c0 <core_set_error>:
 80049c0:	4603      	mov	r3, r0
 80049c2:	7800      	ldrb	r0, [r0, #0]
 80049c4:	b108      	cbz	r0, 80049ca <core_set_error+0xa>
 80049c6:	2000      	movs	r0, #0
 80049c8:	4770      	bx	lr
 80049ca:	7019      	strb	r1, [r3, #0]
 80049cc:	6819      	ldr	r1, [r3, #0]
 80049ce:	f362 211f 	bfi	r1, r2, #8, #24
 80049d2:	2001      	movs	r0, #1
 80049d4:	6019      	str	r1, [r3, #0]
 80049d6:	4770      	bx	lr

080049d8 <ai_check_custom_types>:
 80049d8:	b082      	sub	sp, #8
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <ai_check_custom_types+0x50>)
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	b118      	cbz	r0, 80049e8 <ai_check_custom_types+0x10>
 80049e0:	7803      	ldrb	r3, [r0, #0]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d002      	beq.n	80049ec <ai_check_custom_types+0x14>
 80049e6:	2000      	movs	r0, #0
 80049e8:	b002      	add	sp, #8
 80049ea:	4770      	bx	lr
 80049ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <ai_check_custom_types+0x26>
 80049f4:	2001      	movs	r0, #1
 80049f6:	f080 0001 	eor.w	r0, r0, #1
 80049fa:	b002      	add	sp, #8
 80049fc:	4770      	bx	lr
 80049fe:	7842      	ldrb	r2, [r0, #1]
 8004a00:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	f100 0001 	add.w	r0, r0, #1
 8004a0a:	d1f3      	bne.n	80049f4 <ai_check_custom_types+0x1c>
 8004a0c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004a10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1ed      	bne.n	80049f4 <ai_check_custom_types+0x1c>
 8004a18:	7842      	ldrb	r2, [r0, #1]
 8004a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d1e8      	bne.n	80049f4 <ai_check_custom_types+0x1c>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e7e7      	b.n	80049f6 <ai_check_custom_types+0x1e>
 8004a26:	bf00      	nop
 8004a28:	84048403 	.word	0x84048403

08004a2c <ai_layers_init_all>:
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	2000      	movs	r0, #0
 8004a30:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004a32:	b143      	cbz	r3, 8004a46 <ai_layers_init_all+0x1a>
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	60d9      	str	r1, [r3, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	f100 0001 	add.w	r0, r0, #1
 8004a3e:	d002      	beq.n	8004a46 <ai_layers_init_all+0x1a>
 8004a40:	b10a      	cbz	r2, 8004a46 <ai_layers_init_all+0x1a>
 8004a42:	4613      	mov	r3, r2
 8004a44:	e7f5      	b.n	8004a32 <ai_layers_init_all+0x6>
 8004a46:	4770      	bx	lr

08004a48 <ai_layers_post_init_all>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004a4c:	2500      	movs	r5, #0
 8004a4e:	b16c      	cbz	r4, 8004a6c <ai_layers_post_init_all+0x24>
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d504      	bpl.n	8004a60 <ai_layers_post_init_all+0x18>
 8004a56:	6a23      	ldr	r3, [r4, #32]
 8004a58:	4620      	mov	r0, r4
 8004a5a:	b10b      	cbz	r3, 8004a60 <ai_layers_post_init_all+0x18>
 8004a5c:	4798      	blx	r3
 8004a5e:	3501      	adds	r5, #1
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	d002      	beq.n	8004a6c <ai_layers_post_init_all+0x24>
 8004a66:	b10b      	cbz	r3, 8004a6c <ai_layers_post_init_all+0x24>
 8004a68:	461c      	mov	r4, r3
 8004a6a:	e7f0      	b.n	8004a4e <ai_layers_post_init_all+0x6>
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}

08004a70 <ai_layers_forward_all>:
 8004a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a74:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004a78:	4604      	mov	r4, r0
 8004a7a:	f1b8 0f00 	cmp.w	r8, #0
 8004a7e:	d02b      	beq.n	8004ad8 <ai_layers_forward_all+0x68>
 8004a80:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004a82:	6381      	str	r1, [r0, #56]	; 0x38
 8004a84:	b321      	cbz	r1, 8004ad0 <ai_layers_forward_all+0x60>
 8004a86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004a88:	2001      	movs	r0, #1
 8004a8a:	47c0      	blx	r8
 8004a8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004a8e:	b1fe      	cbz	r6, 8004ad0 <ai_layers_forward_all+0x60>
 8004a90:	2700      	movs	r7, #0
 8004a92:	4631      	mov	r1, r6
 8004a94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a96:	2002      	movs	r0, #2
 8004a98:	47c0      	blx	r8
 8004a9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	696b      	ldr	r3, [r5, #20]
 8004aa0:	4798      	blx	r3
 8004aa2:	692e      	ldr	r6, [r5, #16]
 8004aa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004aa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004aa8:	42b5      	cmp	r5, r6
 8004aaa:	f04f 0003 	mov.w	r0, #3
 8004aae:	d007      	beq.n	8004ac0 <ai_layers_forward_all+0x50>
 8004ab0:	47c0      	blx	r8
 8004ab2:	3701      	adds	r7, #1
 8004ab4:	63a6      	str	r6, [r4, #56]	; 0x38
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	d1eb      	bne.n	8004a92 <ai_layers_forward_all+0x22>
 8004aba:	4638      	mov	r0, r7
 8004abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac0:	2003      	movs	r0, #3
 8004ac2:	47c0      	blx	r8
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	3701      	adds	r7, #1
 8004ac8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004aca:	4638      	mov	r0, r7
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	2700      	movs	r7, #0
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004ada:	6385      	str	r5, [r0, #56]	; 0x38
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	d0f7      	beq.n	8004ad0 <ai_layers_forward_all+0x60>
 8004ae0:	4647      	mov	r7, r8
 8004ae2:	696b      	ldr	r3, [r5, #20]
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	4798      	blx	r3
 8004ae8:	462b      	mov	r3, r5
 8004aea:	692d      	ldr	r5, [r5, #16]
 8004aec:	429d      	cmp	r5, r3
 8004aee:	d004      	beq.n	8004afa <ai_layers_forward_all+0x8a>
 8004af0:	63a5      	str	r5, [r4, #56]	; 0x38
 8004af2:	3701      	adds	r7, #1
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	d1f4      	bne.n	8004ae2 <ai_layers_forward_all+0x72>
 8004af8:	e7df      	b.n	8004aba <ai_layers_forward_all+0x4a>
 8004afa:	2300      	movs	r3, #0
 8004afc:	63a3      	str	r3, [r4, #56]	; 0x38
 8004afe:	3701      	adds	r7, #1
 8004b00:	e7db      	b.n	8004aba <ai_layers_forward_all+0x4a>
 8004b02:	bf00      	nop

08004b04 <ai_layers_destroy_all>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004b08:	2500      	movs	r5, #0
 8004b0a:	b16c      	cbz	r4, 8004b28 <ai_layers_destroy_all+0x24>
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	075b      	lsls	r3, r3, #29
 8004b10:	d504      	bpl.n	8004b1c <ai_layers_destroy_all+0x18>
 8004b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b14:	4620      	mov	r0, r4
 8004b16:	b10b      	cbz	r3, 8004b1c <ai_layers_destroy_all+0x18>
 8004b18:	4798      	blx	r3
 8004b1a:	3501      	adds	r5, #1
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	42a3      	cmp	r3, r4
 8004b20:	d002      	beq.n	8004b28 <ai_layers_destroy_all+0x24>
 8004b22:	b10b      	cbz	r3, 8004b28 <ai_layers_destroy_all+0x24>
 8004b24:	461c      	mov	r4, r3
 8004b26:	e7f0      	b.n	8004b0a <ai_layers_destroy_all+0x6>
 8004b28:	4628      	mov	r0, r5
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}

08004b2c <forward_dense>:
 8004b2c:	6983      	ldr	r3, [r0, #24]
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	f000 8181 	beq.w	8004e38 <forward_dense+0x30c>
 8004b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	ed2d 8b02 	vpush	{d8}
 8004b3e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004b42:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8004b46:	b095      	sub	sp, #84	; 0x54
 8004b48:	b105      	cbz	r5, 8004b4c <forward_dense+0x20>
 8004b4a:	682d      	ldr	r5, [r5, #0]
 8004b4c:	2a01      	cmp	r2, #1
 8004b4e:	f000 828f 	beq.w	8005070 <forward_dense+0x544>
 8004b52:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8004b56:	b106      	cbz	r6, 8004b5a <forward_dense+0x2e>
 8004b58:	6836      	ldr	r6, [r6, #0]
 8004b5a:	2a02      	cmp	r2, #2
 8004b5c:	f000 816e 	beq.w	8004e3c <forward_dense+0x310>
 8004b60:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8004b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8274 	beq.w	8005054 <forward_dense+0x528>
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	910d      	str	r1, [sp, #52]	; 0x34
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	f240 826e 	bls.w	8005058 <forward_dense+0x52c>
 8004b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b82:	460b      	mov	r3, r1
 8004b84:	68e8      	ldr	r0, [r5, #12]
 8004b86:	68f7      	ldr	r7, [r6, #12]
 8004b88:	6840      	ldr	r0, [r0, #4]
 8004b8a:	6999      	ldr	r1, [r3, #24]
 8004b8c:	9013      	str	r0, [sp, #76]	; 0x4c
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	680b      	ldr	r3, [r1, #0]
 8004b92:	9012      	str	r0, [sp, #72]	; 0x48
 8004b94:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004b98:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004b9c:	fb00 f404 	mul.w	r4, r0, r4
 8004ba0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004ba4:	fa4e f000 	asr.w	r0, lr, r0
 8004ba8:	2a03      	cmp	r2, #3
 8004baa:	9010      	str	r0, [sp, #64]	; 0x40
 8004bac:	f000 825d 	beq.w	800506a <forward_dense+0x53e>
 8004bb0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8004bb4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004bb8:	2a00      	cmp	r2, #0
 8004bba:	f000 8246 	beq.w	800504a <forward_dense+0x51e>
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	2a00      	cmp	r2, #0
 8004bc2:	f000 8242 	beq.w	800504a <forward_dense+0x51e>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004bcc:	f000 822c 	beq.w	8005028 <forward_dense+0x4fc>
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	f000 8229 	beq.w	8005028 <forward_dense+0x4fc>
 8004bd6:	f04f 0b00 	mov.w	fp, #0
 8004bda:	69b2      	ldr	r2, [r6, #24]
 8004bdc:	69ab      	ldr	r3, [r5, #24]
 8004bde:	6891      	ldr	r1, [r2, #8]
 8004be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	6952      	ldr	r2, [r2, #20]
 8004be6:	9106      	str	r1, [sp, #24]
 8004be8:	fb07 f404 	mul.w	r4, r7, r4
 8004bec:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004bf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bf2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004bf6:	4281      	cmp	r1, r0
 8004bf8:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8004bfc:	900e      	str	r0, [sp, #56]	; 0x38
 8004bfe:	940c      	str	r4, [sp, #48]	; 0x30
 8004c00:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8004c04:	f080 8113 	bcs.w	8004e2e <forward_dense+0x302>
 8004c08:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004c0a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8004e58 <forward_dense+0x32c>
 8004c0e:	f021 0201 	bic.w	r2, r1, #1
 8004c12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004c16:	9204      	str	r2, [sp, #16]
 8004c18:	f001 0201 	and.w	r2, r1, #1
 8004c1c:	08c8      	lsrs	r0, r1, #3
 8004c1e:	9208      	str	r2, [sp, #32]
 8004c20:	008a      	lsls	r2, r1, #2
 8004c22:	f001 0a07 	and.w	sl, r1, #7
 8004c26:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c28:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004c2c:	3320      	adds	r3, #32
 8004c2e:	465c      	mov	r4, fp
 8004c30:	9007      	str	r0, [sp, #28]
 8004c32:	46cb      	mov	fp, r9
 8004c34:	9205      	str	r2, [sp, #20]
 8004c36:	9302      	str	r3, [sp, #8]
 8004c38:	46c1      	mov	r9, r8
 8004c3a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	9b02      	ldr	r3, [sp, #8]
 8004c46:	3b20      	subs	r3, #32
 8004c48:	930a      	str	r3, [sp, #40]	; 0x28
 8004c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c4c:	b10b      	cbz	r3, 8004c52 <forward_dense+0x126>
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	f000 81da 	beq.w	800500c <forward_dense+0x4e0>
 8004c58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004c5a:	2904      	cmp	r1, #4
 8004c5c:	9906      	ldr	r1, [sp, #24]
 8004c5e:	f000 80fd 	beq.w	8004e5c <forward_dense+0x330>
 8004c62:	4549      	cmp	r1, r9
 8004c64:	f080 80d2 	bcs.w	8004e0c <forward_dense+0x2e0>
 8004c68:	460f      	mov	r7, r1
 8004c6a:	9907      	ldr	r1, [sp, #28]
 8004c6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004c70:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004c74:	1c4e      	adds	r6, r1, #1
 8004c76:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004c7a:	4694      	mov	ip, r2
 8004c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c7e:	468e      	mov	lr, r1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80de 	beq.w	8004e42 <forward_dense+0x316>
 8004c86:	ecf3 2a01 	vldmia	r3!, {s5}
 8004c8a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004e58 <forward_dense+0x32c>
 8004c8e:	f1be 0f00 	cmp.w	lr, #0
 8004c92:	f000 80de 	beq.w	8004e52 <forward_dense+0x326>
 8004c96:	f10c 0108 	add.w	r1, ip, #8
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004ca0:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8004ca4:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004ca8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8004cac:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8004cb0:	ed10 5a04 	vldr	s10, [r0, #-16]
 8004cb4:	ed50 5a03 	vldr	s11, [r0, #-12]
 8004cb8:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004cbc:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004cc0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004cc4:	edd5 7a00 	vldr	s15, [r5]
 8004cc8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8004ccc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004cd0:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004cd4:	ed95 3a00 	vldr	s6, [r5]
 8004cd8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8004cdc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004ce0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004ce4:	3108      	adds	r1, #8
 8004ce6:	edd5 3a00 	vldr	s7, [r5]
 8004cea:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8004cee:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004cf2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004cf6:	3020      	adds	r0, #32
 8004cf8:	ed95 4a00 	vldr	s8, [r5]
 8004cfc:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8004d00:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004d04:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d08:	edd5 4a00 	vldr	s9, [r5]
 8004d0c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8004d10:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004d14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d18:	ed95 5a00 	vldr	s10, [r5]
 8004d1c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8004d20:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004d24:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d28:	edd5 5a00 	vldr	s11, [r5]
 8004d2c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004d30:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004d34:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d38:	428e      	cmp	r6, r1
 8004d3a:	ed95 6a00 	vldr	s12, [r5]
 8004d3e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d46:	d1a9      	bne.n	8004c9c <forward_dense+0x170>
 8004d48:	f1a6 0108 	sub.w	r1, r6, #8
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	d04a      	beq.n	8004de8 <forward_dense+0x2bc>
 8004d52:	780d      	ldrb	r5, [r1, #0]
 8004d54:	edd0 6a00 	vldr	s13, [r0]
 8004d58:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d5c:	edd5 7a00 	vldr	s15, [r5]
 8004d60:	2a01      	cmp	r2, #1
 8004d62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d66:	d03f      	beq.n	8004de8 <forward_dense+0x2bc>
 8004d68:	784d      	ldrb	r5, [r1, #1]
 8004d6a:	edd0 6a01 	vldr	s13, [r0, #4]
 8004d6e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d72:	edd5 7a00 	vldr	s15, [r5]
 8004d76:	2a02      	cmp	r2, #2
 8004d78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d7c:	d034      	beq.n	8004de8 <forward_dense+0x2bc>
 8004d7e:	788d      	ldrb	r5, [r1, #2]
 8004d80:	edd0 6a02 	vldr	s13, [r0, #8]
 8004d84:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d88:	edd5 7a00 	vldr	s15, [r5]
 8004d8c:	2a03      	cmp	r2, #3
 8004d8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d92:	d029      	beq.n	8004de8 <forward_dense+0x2bc>
 8004d94:	78cd      	ldrb	r5, [r1, #3]
 8004d96:	edd0 6a03 	vldr	s13, [r0, #12]
 8004d9a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004d9e:	edd5 7a00 	vldr	s15, [r5]
 8004da2:	2a04      	cmp	r2, #4
 8004da4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004da8:	d01e      	beq.n	8004de8 <forward_dense+0x2bc>
 8004daa:	790d      	ldrb	r5, [r1, #4]
 8004dac:	edd0 6a04 	vldr	s13, [r0, #16]
 8004db0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004db4:	edd5 7a00 	vldr	s15, [r5]
 8004db8:	2a05      	cmp	r2, #5
 8004dba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004dbe:	d013      	beq.n	8004de8 <forward_dense+0x2bc>
 8004dc0:	794d      	ldrb	r5, [r1, #5]
 8004dc2:	edd0 6a05 	vldr	s13, [r0, #20]
 8004dc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004dca:	edd5 7a00 	vldr	s15, [r5]
 8004dce:	2a06      	cmp	r2, #6
 8004dd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004dd4:	d008      	beq.n	8004de8 <forward_dense+0x2bc>
 8004dd6:	7989      	ldrb	r1, [r1, #6]
 8004dd8:	edd0 7a06 	vldr	s15, [r0, #24]
 8004ddc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004de0:	edd1 6a00 	vldr	s13, [r1]
 8004de4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004de8:	44dc      	add	ip, fp
 8004dea:	445e      	add	r6, fp
 8004dec:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004df0:	eca7 7a01 	vstmia	r7!, {s14}
 8004df4:	454f      	cmp	r7, r9
 8004df6:	f4ff af43 	bcc.w	8004c80 <forward_dense+0x154>
 8004dfa:	9a06      	ldr	r2, [sp, #24]
 8004dfc:	eba9 0302 	sub.w	r3, r9, r2
 8004e00:	3b01      	subs	r3, #1
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	3304      	adds	r3, #4
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	9306      	str	r3, [sp, #24]
 8004e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e0e:	9a05      	ldr	r2, [sp, #20]
 8004e10:	4499      	add	r9, r3
 8004e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e14:	441a      	add	r2, r3
 8004e16:	9205      	str	r2, [sp, #20]
 8004e18:	9a02      	ldr	r2, [sp, #8]
 8004e1a:	441a      	add	r2, r3
 8004e1c:	9202      	str	r2, [sp, #8]
 8004e1e:	9a04      	ldr	r2, [sp, #16]
 8004e20:	441a      	add	r2, r3
 8004e22:	9204      	str	r2, [sp, #16]
 8004e24:	9b06      	ldr	r3, [sp, #24]
 8004e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	f4ff af08 	bcc.w	8004c3e <forward_dense+0x112>
 8004e2e:	b015      	add	sp, #84	; 0x54
 8004e30:	ecbd 8b02 	vpop	{d8}
 8004e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e38:	6853      	ldr	r3, [r2, #4]
 8004e3a:	deff      	udf	#255	; 0xff
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	deff      	udf	#255	; 0xff
 8004e42:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e58 <forward_dense+0x32c>
 8004e46:	eef0 2a48 	vmov.f32	s5, s16
 8004e4a:	f1be 0f00 	cmp.w	lr, #0
 8004e4e:	f47f af22 	bne.w	8004c96 <forward_dense+0x16a>
 8004e52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e54:	4661      	mov	r1, ip
 8004e56:	e77a      	b.n	8004d4e <forward_dense+0x222>
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	4549      	cmp	r1, r9
 8004e5e:	d2d5      	bcs.n	8004e0c <forward_dense+0x2e0>
 8004e60:	9807      	ldr	r0, [sp, #28]
 8004e62:	9103      	str	r1, [sp, #12]
 8004e64:	9904      	ldr	r1, [sp, #16]
 8004e66:	f100 0c01 	add.w	ip, r0, #1
 8004e6a:	3901      	subs	r1, #1
 8004e6c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004e70:	9109      	str	r1, [sp, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80b2 	beq.w	8004fdc <forward_dense+0x4b0>
 8004e78:	9907      	ldr	r1, [sp, #28]
 8004e7a:	ecf3 2a01 	vldmia	r3!, {s5}
 8004e7e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8004e58 <forward_dense+0x32c>
 8004e82:	2900      	cmp	r1, #0
 8004e84:	f000 80b2 	beq.w	8004fec <forward_dense+0x4c0>
 8004e88:	9902      	ldr	r1, [sp, #8]
 8004e8a:	1d10      	adds	r0, r2, #4
 8004e8c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004e90:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004e94:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004e98:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004e9c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004ea0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004ea4:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004ea8:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004eac:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004eb0:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004eb4:	f006 070f 	and.w	r7, r6, #15
 8004eb8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004ebc:	edd7 7a00 	vldr	s15, [r7]
 8004ec0:	0936      	lsrs	r6, r6, #4
 8004ec2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004ec6:	ed96 3a00 	vldr	s6, [r6]
 8004eca:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004ece:	092e      	lsrs	r6, r5, #4
 8004ed0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004ed4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004ed8:	f005 050f 	and.w	r5, r5, #15
 8004edc:	edd6 3a00 	vldr	s7, [r6]
 8004ee0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8004ee4:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004ee8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004eec:	0937      	lsrs	r7, r6, #4
 8004eee:	ed95 4a00 	vldr	s8, [r5]
 8004ef2:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8004ef6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004efa:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004efe:	f006 060f 	and.w	r6, r6, #15
 8004f02:	edd7 4a00 	vldr	s9, [r7]
 8004f06:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004f0a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004f0e:	3004      	adds	r0, #4
 8004f10:	ed96 5a00 	vldr	s10, [r6]
 8004f14:	092e      	lsrs	r6, r5, #4
 8004f16:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004f1a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004f1e:	f005 050f 	and.w	r5, r5, #15
 8004f22:	edd6 5a00 	vldr	s11, [r6]
 8004f26:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004f2a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004f2e:	4584      	cmp	ip, r0
 8004f30:	ed95 6a00 	vldr	s12, [r5]
 8004f34:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f38:	f101 0120 	add.w	r1, r1, #32
 8004f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f40:	d1a4      	bne.n	8004e8c <forward_dense+0x360>
 8004f42:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004f46:	f1ac 0804 	sub.w	r8, ip, #4
 8004f4a:	9904      	ldr	r1, [sp, #16]
 8004f4c:	458e      	cmp	lr, r1
 8004f4e:	d22a      	bcs.n	8004fa6 <forward_dense+0x47a>
 8004f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f52:	eba1 070e 	sub.w	r7, r1, lr
 8004f56:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8004f5a:	f10e 0008 	add.w	r0, lr, #8
 8004f5e:	f108 36ff 	add.w	r6, r8, #4294967295
 8004f62:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8004f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f6a:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004f6e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004f72:	f001 050f 	and.w	r5, r1, #15
 8004f76:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004f7a:	edd5 7a00 	vldr	s15, [r5]
 8004f7e:	0909      	lsrs	r1, r1, #4
 8004f80:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004f84:	ed91 6a00 	vldr	s12, [r1]
 8004f88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004f8c:	42b7      	cmp	r7, r6
 8004f8e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f92:	f100 0008 	add.w	r0, r0, #8
 8004f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f9a:	d1e4      	bne.n	8004f66 <forward_dense+0x43a>
 8004f9c:	f10a 0a01 	add.w	sl, sl, #1
 8004fa0:	44d0      	add	r8, sl
 8004fa2:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004fa6:	9908      	ldr	r1, [sp, #32]
 8004fa8:	b321      	cbz	r1, 8004ff4 <forward_dense+0x4c8>
 8004faa:	f898 1000 	ldrb.w	r1, [r8]
 8004fae:	edde 7a00 	vldr	s15, [lr]
 8004fb2:	0909      	lsrs	r1, r1, #4
 8004fb4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004fb8:	edd1 6a00 	vldr	s13, [r1]
 8004fbc:	9903      	ldr	r1, [sp, #12]
 8004fbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004fc2:	445a      	add	r2, fp
 8004fc4:	44dc      	add	ip, fp
 8004fc6:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004fca:	ece1 2a01 	vstmia	r1!, {s5}
 8004fce:	4589      	cmp	r9, r1
 8004fd0:	9103      	str	r1, [sp, #12]
 8004fd2:	f67f af12 	bls.w	8004dfa <forward_dense+0x2ce>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f47f af4e 	bne.w	8004e78 <forward_dense+0x34c>
 8004fdc:	9907      	ldr	r1, [sp, #28]
 8004fde:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8004e58 <forward_dense+0x32c>
 8004fe2:	eef0 2a48 	vmov.f32	s5, s16
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	f47f af4e 	bne.w	8004e88 <forward_dense+0x35c>
 8004fec:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	e7aa      	b.n	8004f4a <forward_dense+0x41e>
 8004ff4:	9903      	ldr	r1, [sp, #12]
 8004ff6:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004ffa:	445a      	add	r2, fp
 8004ffc:	eca1 7a01 	vstmia	r1!, {s14}
 8005000:	4549      	cmp	r1, r9
 8005002:	9103      	str	r1, [sp, #12]
 8005004:	44dc      	add	ip, fp
 8005006:	f4ff af34 	bcc.w	8004e72 <forward_dense+0x346>
 800500a:	e6f6      	b.n	8004dfa <forward_dense+0x2ce>
 800500c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800500e:	9d06      	ldr	r5, [sp, #24]
 8005010:	9101      	str	r1, [sp, #4]
 8005012:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005014:	9100      	str	r1, [sp, #0]
 8005016:	4628      	mov	r0, r5
 8005018:	990a      	ldr	r1, [sp, #40]	; 0x28
 800501a:	f000 f9ef 	bl	80053fc <forward_lite_dense_if32of32wf32>
 800501e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005020:	462b      	mov	r3, r5
 8005022:	4413      	add	r3, r2
 8005024:	9306      	str	r3, [sp, #24]
 8005026:	e6f1      	b.n	8004e0c <forward_dense+0x2e0>
 8005028:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800502c:	f1b9 0f00 	cmp.w	r9, #0
 8005030:	d016      	beq.n	8005060 <forward_dense+0x534>
 8005032:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005036:	f000 fbf7 	bl	8005828 <ai_array_get_byte_size>
 800503a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800503e:	4602      	mov	r2, r0
 8005040:	4659      	mov	r1, fp
 8005042:	4640      	mov	r0, r8
 8005044:	f000 fafe 	bl	8005644 <st_int8_copy>
 8005048:	e5c7      	b.n	8004bda <forward_dense+0xae>
 800504a:	2b04      	cmp	r3, #4
 800504c:	d00a      	beq.n	8005064 <forward_dense+0x538>
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	e5bd      	b.n	8004bd0 <forward_dense+0xa4>
 8005054:	930d      	str	r3, [sp, #52]	; 0x34
 8005056:	e595      	b.n	8004b84 <forward_dense+0x58>
 8005058:	2300      	movs	r3, #0
 800505a:	930b      	str	r3, [sp, #44]	; 0x2c
 800505c:	460b      	mov	r3, r1
 800505e:	e591      	b.n	8004b84 <forward_dense+0x58>
 8005060:	46c3      	mov	fp, r8
 8005062:	e5ba      	b.n	8004bda <forward_dense+0xae>
 8005064:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005068:	e5b7      	b.n	8004bda <forward_dense+0xae>
 800506a:	2300      	movs	r3, #0
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	deff      	udf	#255	; 0xff
 8005070:	2300      	movs	r3, #0
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	deff      	udf	#255	; 0xff
 8005076:	bf00      	nop

08005078 <forward_relu>:
 8005078:	6982      	ldr	r2, [r0, #24]
 800507a:	8813      	ldrh	r3, [r2, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05b      	beq.n	8005138 <forward_relu+0xc0>
 8005080:	6851      	ldr	r1, [r2, #4]
 8005082:	684a      	ldr	r2, [r1, #4]
 8005084:	b102      	cbz	r2, 8005088 <forward_relu+0x10>
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	f000 8123 	beq.w	80052d4 <forward_relu+0x25c>
 800508e:	b470      	push	{r4, r5, r6}
 8005090:	6909      	ldr	r1, [r1, #16]
 8005092:	b101      	cbz	r1, 8005096 <forward_relu+0x1e>
 8005094:	6809      	ldr	r1, [r1, #0]
 8005096:	69c6      	ldr	r6, [r0, #28]
 8005098:	2e00      	cmp	r6, #0
 800509a:	f000 8097 	beq.w	80051cc <forward_relu+0x154>
 800509e:	6873      	ldr	r3, [r6, #4]
 80050a0:	6988      	ldr	r0, [r1, #24]
 80050a2:	6991      	ldr	r1, [r2, #24]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f000 80c1 	beq.w	800522c <forward_relu+0x1b4>
 80050aa:	6893      	ldr	r3, [r2, #8]
 80050ac:	6880      	ldr	r0, [r0, #8]
 80050ae:	688c      	ldr	r4, [r1, #8]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f000 80f2 	beq.w	800529a <forward_relu+0x222>
 80050b6:	68d5      	ldr	r5, [r2, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80050be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050c2:	42ab      	cmp	r3, r5
 80050c4:	fb01 f202 	mul.w	r2, r1, r2
 80050c8:	d1f9      	bne.n	80050be <forward_relu+0x46>
 80050ca:	68b3      	ldr	r3, [r6, #8]
 80050cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80050d0:	edd3 6a00 	vldr	s13, [r3]
 80050d4:	ed93 6a01 	vldr	s12, [r3, #4]
 80050d8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80050dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80050e0:	3a01      	subs	r2, #1
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80050ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80050ee:	d425      	bmi.n	800513c <forward_relu+0xc4>
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d81f      	bhi.n	8005134 <forward_relu+0xbc>
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	1d01      	adds	r1, r0, #4
 80050f8:	e00d      	b.n	8005116 <forward_relu+0x9e>
 80050fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005102:	db03      	blt.n	800510c <forward_relu+0x94>
 8005104:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005108:	ee67 7a86 	vmul.f32	s15, s15, s12
 800510c:	3b08      	subs	r3, #8
 800510e:	429c      	cmp	r4, r3
 8005110:	ed61 7a01 	vstmdb	r1!, {s15}
 8005114:	d80e      	bhi.n	8005134 <forward_relu+0xbc>
 8005116:	4613      	mov	r3, r2
 8005118:	ed72 7a01 	vldmdb	r2!, {s15}
 800511c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005124:	d9e9      	bls.n	80050fa <forward_relu+0x82>
 8005126:	3b08      	subs	r3, #8
 8005128:	eef0 7a47 	vmov.f32	s15, s14
 800512c:	429c      	cmp	r4, r3
 800512e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005132:	d9f0      	bls.n	8005116 <forward_relu+0x9e>
 8005134:	bc70      	pop	{r4, r5, r6}
 8005136:	4770      	bx	lr
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	deff      	udf	#255	; 0xff
 800513c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005144:	d11f      	bne.n	8005186 <forward_relu+0x10e>
 8005146:	429c      	cmp	r4, r3
 8005148:	d8f4      	bhi.n	8005134 <forward_relu+0xbc>
 800514a:	1b1c      	subs	r4, r3, r4
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	2500      	movs	r5, #0
 8005154:	1b1b      	subs	r3, r3, r4
 8005156:	1d01      	adds	r1, r0, #4
 8005158:	ed72 7a01 	vldmdb	r2!, {s15}
 800515c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005164:	dc0a      	bgt.n	800517c <forward_relu+0x104>
 8005166:	429a      	cmp	r2, r3
 8005168:	f841 5d04 	str.w	r5, [r1, #-4]!
 800516c:	d0e2      	beq.n	8005134 <forward_relu+0xbc>
 800516e:	ed72 7a01 	vldmdb	r2!, {s15}
 8005172:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	ddf4      	ble.n	8005166 <forward_relu+0xee>
 800517c:	429a      	cmp	r2, r3
 800517e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005182:	d1e9      	bne.n	8005158 <forward_relu+0xe0>
 8005184:	e7d6      	b.n	8005134 <forward_relu+0xbc>
 8005186:	429c      	cmp	r4, r3
 8005188:	d8d4      	bhi.n	8005134 <forward_relu+0xbc>
 800518a:	1b1c      	subs	r4, r3, r4
 800518c:	f024 0403 	bic.w	r4, r4, #3
 8005190:	1d1a      	adds	r2, r3, #4
 8005192:	1d01      	adds	r1, r0, #4
 8005194:	1b1b      	subs	r3, r3, r4
 8005196:	ed72 7a01 	vldmdb	r2!, {s15}
 800519a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a2:	db0e      	blt.n	80051c2 <forward_relu+0x14a>
 80051a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051a8:	4293      	cmp	r3, r2
 80051aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80051ae:	ed61 7a01 	vstmdb	r1!, {s15}
 80051b2:	d0bf      	beq.n	8005134 <forward_relu+0xbc>
 80051b4:	ed72 7a01 	vldmdb	r2!, {s15}
 80051b8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	daf0      	bge.n	80051a4 <forward_relu+0x12c>
 80051c2:	4293      	cmp	r3, r2
 80051c4:	ed61 7a01 	vstmdb	r1!, {s15}
 80051c8:	d1e5      	bne.n	8005196 <forward_relu+0x11e>
 80051ca:	e7b3      	b.n	8005134 <forward_relu+0xbc>
 80051cc:	6893      	ldr	r3, [r2, #8]
 80051ce:	6989      	ldr	r1, [r1, #24]
 80051d0:	6990      	ldr	r0, [r2, #24]
 80051d2:	6889      	ldr	r1, [r1, #8]
 80051d4:	6884      	ldr	r4, [r0, #8]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	d075      	beq.n	80052c6 <forward_relu+0x24e>
 80051da:	68d5      	ldr	r5, [r2, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80051e2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80051e6:	429d      	cmp	r5, r3
 80051e8:	fb00 f202 	mul.w	r2, r0, r2
 80051ec:	d1f9      	bne.n	80051e2 <forward_relu+0x16a>
 80051ee:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80051f2:	3b01      	subs	r3, #1
 80051f4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80051f8:	4294      	cmp	r4, r2
 80051fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80051fe:	d899      	bhi.n	8005134 <forward_relu+0xbc>
 8005200:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80052dc <forward_relu+0x264>
 8005204:	3204      	adds	r2, #4
 8005206:	3104      	adds	r1, #4
 8005208:	4613      	mov	r3, r2
 800520a:	ed72 7a01 	vldmdb	r2!, {s15}
 800520e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	f1a3 0308 	sub.w	r3, r3, #8
 800521a:	bfb8      	it	lt
 800521c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005220:	429c      	cmp	r4, r3
 8005222:	ed61 7a01 	vstmdb	r1!, {s15}
 8005226:	d9ef      	bls.n	8005208 <forward_relu+0x190>
 8005228:	bc70      	pop	{r4, r5, r6}
 800522a:	4770      	bx	lr
 800522c:	688c      	ldr	r4, [r1, #8]
 800522e:	6891      	ldr	r1, [r2, #8]
 8005230:	6880      	ldr	r0, [r0, #8]
 8005232:	0a09      	lsrs	r1, r1, #8
 8005234:	d049      	beq.n	80052ca <forward_relu+0x252>
 8005236:	68d5      	ldr	r5, [r2, #12]
 8005238:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800523c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005240:	42aa      	cmp	r2, r5
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	d1f9      	bne.n	800523c <forward_relu+0x1c4>
 8005248:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800524c:	3a01      	subs	r2, #1
 800524e:	68b1      	ldr	r1, [r6, #8]
 8005250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005254:	429c      	cmp	r4, r3
 8005256:	ed91 7a00 	vldr	s14, [r1]
 800525a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800525e:	f63f af69 	bhi.w	8005134 <forward_relu+0xbc>
 8005262:	2500      	movs	r5, #0
 8005264:	3304      	adds	r3, #4
 8005266:	1d02      	adds	r2, r0, #4
 8005268:	ed53 7a01 	vldr	s15, [r3, #-4]
 800526c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	f1a3 0104 	sub.w	r1, r3, #4
 8005278:	f1a3 0308 	sub.w	r3, r3, #8
 800527c:	d406      	bmi.n	800528c <forward_relu+0x214>
 800527e:	429c      	cmp	r4, r3
 8005280:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005284:	f63f af56 	bhi.w	8005134 <forward_relu+0xbc>
 8005288:	460b      	mov	r3, r1
 800528a:	e7ed      	b.n	8005268 <forward_relu+0x1f0>
 800528c:	429c      	cmp	r4, r3
 800528e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005292:	f63f af4f 	bhi.w	8005134 <forward_relu+0xbc>
 8005296:	460b      	mov	r3, r1
 8005298:	e7e6      	b.n	8005268 <forward_relu+0x1f0>
 800529a:	68b3      	ldr	r3, [r6, #8]
 800529c:	ed93 7a02 	vldr	s14, [r3, #8]
 80052a0:	edd3 6a00 	vldr	s13, [r3]
 80052a4:	ed93 6a01 	vldr	s12, [r3, #4]
 80052a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80052ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b0:	d401      	bmi.n	80052b6 <forward_relu+0x23e>
 80052b2:	4623      	mov	r3, r4
 80052b4:	e71e      	b.n	80050f4 <forward_relu+0x7c>
 80052b6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	4623      	mov	r3, r4
 80052c0:	f47f af63 	bne.w	800518a <forward_relu+0x112>
 80052c4:	e741      	b.n	800514a <forward_relu+0xd2>
 80052c6:	4622      	mov	r2, r4
 80052c8:	e79a      	b.n	8005200 <forward_relu+0x188>
 80052ca:	68b2      	ldr	r2, [r6, #8]
 80052cc:	4623      	mov	r3, r4
 80052ce:	ed92 7a00 	vldr	s14, [r2]
 80052d2:	e7c6      	b.n	8005262 <forward_relu+0x1ea>
 80052d4:	2300      	movs	r3, #0
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	deff      	udf	#255	; 0xff
 80052da:	bf00      	nop
 80052dc:	00000000 	.word	0x00000000

080052e0 <forward_sm>:
 80052e0:	6982      	ldr	r2, [r0, #24]
 80052e2:	8813      	ldrh	r3, [r2, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d07c      	beq.n	80053e2 <forward_sm+0x102>
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ed2d 8b04 	vpush	{d8-d9}
 80052f0:	6852      	ldr	r2, [r2, #4]
 80052f2:	6854      	ldr	r4, [r2, #4]
 80052f4:	b085      	sub	sp, #20
 80052f6:	b104      	cbz	r4, 80052fa <forward_sm+0x1a>
 80052f8:	6824      	ldr	r4, [r4, #0]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d076      	beq.n	80053ec <forward_sm+0x10c>
 80052fe:	6913      	ldr	r3, [r2, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d076      	beq.n	80053f2 <forward_sm+0x112>
 8005304:	681e      	ldr	r6, [r3, #0]
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	68e0      	ldr	r0, [r4, #12]
 800530a:	68f2      	ldr	r2, [r6, #12]
 800530c:	6845      	ldr	r5, [r0, #4]
 800530e:	6857      	ldr	r7, [r2, #4]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	d068      	beq.n	80053e6 <forward_sm+0x106>
 8005314:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005318:	2201      	movs	r2, #1
 800531a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800531e:	4298      	cmp	r0, r3
 8005320:	fb01 f202 	mul.w	r2, r1, r2
 8005324:	d1f9      	bne.n	800531a <forward_sm+0x3a>
 8005326:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800532a:	69a2      	ldr	r2, [r4, #24]
 800532c:	69b3      	ldr	r3, [r6, #24]
 800532e:	6892      	ldr	r2, [r2, #8]
 8005330:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8005334:	eb02 0309 	add.w	r3, r2, r9
 8005338:	429a      	cmp	r2, r3
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	d24c      	bcs.n	80053d8 <forward_sm+0xf8>
 800533e:	00bb      	lsls	r3, r7, #2
 8005340:	9303      	str	r3, [sp, #12]
 8005342:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8005346:	00ab      	lsls	r3, r5, #2
 8005348:	2d01      	cmp	r5, #1
 800534a:	ed92 8a00 	vldr	s16, [r2]
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005354:	463e      	mov	r6, r7
 8005356:	d93c      	bls.n	80053d2 <forward_sm+0xf2>
 8005358:	1d13      	adds	r3, r2, #4
 800535a:	ecf3 7a01 	vldmia	r3!, {s15}
 800535e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	bfb8      	it	lt
 8005368:	eeb0 8a67 	vmovlt.f32	s16, s15
 800536c:	429e      	cmp	r6, r3
 800536e:	d1f4      	bne.n	800535a <forward_sm+0x7a>
 8005370:	eddf 8a21 	vldr	s17, [pc, #132]	; 80053f8 <forward_sm+0x118>
 8005374:	4692      	mov	sl, r2
 8005376:	46c3      	mov	fp, r8
 8005378:	46c1      	mov	r9, r8
 800537a:	2400      	movs	r4, #0
 800537c:	ecba 0a01 	vldmia	sl!, {s0}
 8005380:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005384:	f002 ff74 	bl	8008270 <expf>
 8005388:	3401      	adds	r4, #1
 800538a:	42a5      	cmp	r5, r4
 800538c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005390:	eca9 0a01 	vstmia	r9!, {s0}
 8005394:	d8f2      	bhi.n	800537c <forward_sm+0x9c>
 8005396:	eef5 8a40 	vcmp.f32	s17, #0.0
 800539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539e:	d00b      	beq.n	80053b8 <forward_sm+0xd8>
 80053a0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80053a4:	2300      	movs	r3, #0
 80053a6:	3301      	adds	r3, #1
 80053a8:	429d      	cmp	r5, r3
 80053aa:	eddb 7a00 	vldr	s15, [fp]
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	eceb 7a01 	vstmia	fp!, {s15}
 80053b6:	d8f6      	bhi.n	80053a6 <forward_sm+0xc6>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	9901      	ldr	r1, [sp, #4]
 80053bc:	4498      	add	r8, r3
 80053be:	9b02      	ldr	r3, [sp, #8]
 80053c0:	42b9      	cmp	r1, r7
 80053c2:	463a      	mov	r2, r7
 80053c4:	441e      	add	r6, r3
 80053c6:	d907      	bls.n	80053d8 <forward_sm+0xf8>
 80053c8:	2d01      	cmp	r5, #1
 80053ca:	ed92 8a00 	vldr	s16, [r2]
 80053ce:	441f      	add	r7, r3
 80053d0:	d8c2      	bhi.n	8005358 <forward_sm+0x78>
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	d0f0      	beq.n	80053b8 <forward_sm+0xd8>
 80053d6:	e7cb      	b.n	8005370 <forward_sm+0x90>
 80053d8:	b005      	add	sp, #20
 80053da:	ecbd 8b04 	vpop	{d8-d9}
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	deff      	udf	#255	; 0xff
 80053e6:	f04f 0904 	mov.w	r9, #4
 80053ea:	e79e      	b.n	800532a <forward_sm+0x4a>
 80053ec:	2300      	movs	r3, #0
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	deff      	udf	#255	; 0xff
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	deff      	udf	#255	; 0xff
 80053f6:	bf00      	nop
 80053f8:	00000000 	.word	0x00000000

080053fc <forward_lite_dense_if32of32wf32>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8005404:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8005408:	4287      	cmp	r7, r0
 800540a:	f240 8106 	bls.w	800561a <forward_lite_dense_if32of32wf32+0x21e>
 800540e:	f1a6 0810 	sub.w	r8, r6, #16
 8005412:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8005416:	f108 0801 	add.w	r8, r8, #1
 800541a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800541e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8005422:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8005426:	4605      	mov	r5, r0
 8005428:	f006 0a0f 	and.w	sl, r6, #15
 800542c:	2e0f      	cmp	r6, #15
 800542e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005640 <forward_lite_dense_if32of32wf32+0x244>
 8005432:	f240 8101 	bls.w	8005638 <forward_lite_dense_if32of32wf32+0x23c>
 8005436:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800543a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800543e:	46b6      	mov	lr, r6
 8005440:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8005444:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8005448:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800544c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8005450:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8005454:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8005458:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800545c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8005460:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8005464:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8005468:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800546c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8005470:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005474:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005478:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800547c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005480:	f1ae 0e10 	sub.w	lr, lr, #16
 8005484:	f1be 0f0f 	cmp.w	lr, #15
 8005488:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800548c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8005490:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005494:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005498:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800549c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80054a0:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80054a4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80054a8:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80054ac:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80054b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80054b4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80054b8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80054bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80054c0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80054c4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80054c8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80054cc:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80054d0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80054d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80054d8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80054dc:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80054e0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80054e4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80054e8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80054ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80054f0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80054f4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80054f8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80054fc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005500:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005504:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005508:	eee5 7a25 	vfma.f32	s15, s10, s11
 800550c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005514:	d894      	bhi.n	8005440 <forward_lite_dense_if32of32wf32+0x44>
 8005516:	eb02 0e0b 	add.w	lr, r2, fp
 800551a:	4654      	mov	r4, sl
 800551c:	46c4      	mov	ip, r8
 800551e:	2c00      	cmp	r4, #0
 8005520:	d075      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005522:	eddc 6a00 	vldr	s13, [ip]
 8005526:	edde 7a00 	vldr	s15, [lr]
 800552a:	2c01      	cmp	r4, #1
 800552c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005530:	d06d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005532:	eddc 6a01 	vldr	s13, [ip, #4]
 8005536:	edde 7a01 	vldr	s15, [lr, #4]
 800553a:	2c02      	cmp	r4, #2
 800553c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005540:	d065      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005542:	eddc 6a02 	vldr	s13, [ip, #8]
 8005546:	edde 7a02 	vldr	s15, [lr, #8]
 800554a:	2c03      	cmp	r4, #3
 800554c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005550:	d05d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005552:	eddc 6a03 	vldr	s13, [ip, #12]
 8005556:	edde 7a03 	vldr	s15, [lr, #12]
 800555a:	2c04      	cmp	r4, #4
 800555c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005560:	d055      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005562:	eddc 6a04 	vldr	s13, [ip, #16]
 8005566:	edde 7a04 	vldr	s15, [lr, #16]
 800556a:	2c05      	cmp	r4, #5
 800556c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005570:	d04d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005572:	eddc 6a05 	vldr	s13, [ip, #20]
 8005576:	edde 7a05 	vldr	s15, [lr, #20]
 800557a:	2c06      	cmp	r4, #6
 800557c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005580:	d045      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005582:	eddc 6a06 	vldr	s13, [ip, #24]
 8005586:	edde 7a06 	vldr	s15, [lr, #24]
 800558a:	2c07      	cmp	r4, #7
 800558c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005590:	d03d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005592:	eddc 6a07 	vldr	s13, [ip, #28]
 8005596:	edde 7a07 	vldr	s15, [lr, #28]
 800559a:	2c08      	cmp	r4, #8
 800559c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055a0:	d035      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 80055a2:	eddc 6a08 	vldr	s13, [ip, #32]
 80055a6:	edde 7a08 	vldr	s15, [lr, #32]
 80055aa:	2c09      	cmp	r4, #9
 80055ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055b0:	d02d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 80055b2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80055b6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80055ba:	2c0a      	cmp	r4, #10
 80055bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055c0:	d025      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 80055c2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80055c6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80055ca:	2c0b      	cmp	r4, #11
 80055cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055d0:	d01d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 80055d2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80055d6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80055da:	2c0c      	cmp	r4, #12
 80055dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055e0:	d015      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 80055e2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80055e6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80055ea:	3c0d      	subs	r4, #13
 80055ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055f0:	d00d      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 80055f2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80055f6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80055fa:	2c01      	cmp	r4, #1
 80055fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005600:	d005      	beq.n	800560e <forward_lite_dense_if32of32wf32+0x212>
 8005602:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8005606:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800560a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800560e:	444a      	add	r2, r9
 8005610:	eca5 7a01 	vstmia	r5!, {s14}
 8005614:	42af      	cmp	r7, r5
 8005616:	f63f af09 	bhi.w	800542c <forward_lite_dense_if32of32wf32+0x30>
 800561a:	b15b      	cbz	r3, 8005634 <forward_lite_dense_if32of32wf32+0x238>
 800561c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561e:	b14a      	cbz	r2, 8005634 <forward_lite_dense_if32of32wf32+0x238>
 8005620:	edd0 7a00 	vldr	s15, [r0]
 8005624:	ecb3 7a01 	vldmia	r3!, {s14}
 8005628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800562c:	ece0 7a01 	vstmia	r0!, {s15}
 8005630:	4287      	cmp	r7, r0
 8005632:	d1f5      	bne.n	8005620 <forward_lite_dense_if32of32wf32+0x224>
 8005634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005638:	4634      	mov	r4, r6
 800563a:	4696      	mov	lr, r2
 800563c:	468c      	mov	ip, r1
 800563e:	e76e      	b.n	800551e <forward_lite_dense_if32of32wf32+0x122>
 8005640:	00000000 	.word	0x00000000

08005644 <st_int8_copy>:
 8005644:	4288      	cmp	r0, r1
 8005646:	d057      	beq.n	80056f8 <st_int8_copy+0xb4>
 8005648:	2a00      	cmp	r2, #0
 800564a:	d055      	beq.n	80056f8 <st_int8_copy+0xb4>
 800564c:	4288      	cmp	r0, r1
 800564e:	d354      	bcc.n	80056fa <st_int8_copy+0xb6>
 8005650:	078b      	lsls	r3, r1, #30
 8005652:	d102      	bne.n	800565a <st_int8_copy+0x16>
 8005654:	e009      	b.n	800566a <st_int8_copy+0x26>
 8005656:	2a00      	cmp	r2, #0
 8005658:	d05c      	beq.n	8005714 <st_int8_copy+0xd0>
 800565a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800565e:	f801 3b01 	strb.w	r3, [r1], #1
 8005662:	078b      	lsls	r3, r1, #30
 8005664:	f102 32ff 	add.w	r2, r2, #4294967295
 8005668:	d1f5      	bne.n	8005656 <st_int8_copy+0x12>
 800566a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8005672:	d069      	beq.n	8005748 <st_int8_copy+0x104>
 8005674:	ea41 0300 	orr.w	r3, r1, r0
 8005678:	075b      	lsls	r3, r3, #29
 800567a:	d14c      	bne.n	8005716 <st_int8_copy+0xd2>
 800567c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8005680:	2b01      	cmp	r3, #1
 8005682:	d948      	bls.n	8005716 <st_int8_copy+0xd2>
 8005684:	f100 0310 	add.w	r3, r0, #16
 8005688:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800568c:	f101 0c10 	add.w	ip, r1, #16
 8005690:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8005694:	ed13 6b04 	vldr	d6, [r3, #-16]
 8005698:	ed13 7b02 	vldr	d7, [r3, #-8]
 800569c:	3310      	adds	r3, #16
 800569e:	4573      	cmp	r3, lr
 80056a0:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80056a4:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80056a8:	f10c 0c10 	add.w	ip, ip, #16
 80056ac:	d1f2      	bne.n	8005694 <st_int8_copy+0x50>
 80056ae:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80056b2:	4421      	add	r1, r4
 80056b4:	4420      	add	r0, r4
 80056b6:	f002 0203 	and.w	r2, r2, #3
 80056ba:	b16b      	cbz	r3, 80056d8 <st_int8_copy+0x94>
 80056bc:	6804      	ldr	r4, [r0, #0]
 80056be:	600c      	str	r4, [r1, #0]
 80056c0:	1e5c      	subs	r4, r3, #1
 80056c2:	d005      	beq.n	80056d0 <st_int8_copy+0x8c>
 80056c4:	6845      	ldr	r5, [r0, #4]
 80056c6:	604d      	str	r5, [r1, #4]
 80056c8:	2c01      	cmp	r4, #1
 80056ca:	bf1c      	itt	ne
 80056cc:	6884      	ldrne	r4, [r0, #8]
 80056ce:	608c      	strne	r4, [r1, #8]
 80056d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80056d4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80056d8:	b162      	cbz	r2, 80056f4 <st_int8_copy+0xb0>
 80056da:	f990 3000 	ldrsb.w	r3, [r0]
 80056de:	700b      	strb	r3, [r1, #0]
 80056e0:	3a01      	subs	r2, #1
 80056e2:	d007      	beq.n	80056f4 <st_int8_copy+0xb0>
 80056e4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80056e8:	704b      	strb	r3, [r1, #1]
 80056ea:	2a01      	cmp	r2, #1
 80056ec:	bf1c      	itt	ne
 80056ee:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80056f2:	708b      	strbne	r3, [r1, #2]
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	4770      	bx	lr
 80056fa:	1883      	adds	r3, r0, r2
 80056fc:	428b      	cmp	r3, r1
 80056fe:	d9a7      	bls.n	8005650 <st_int8_copy+0xc>
 8005700:	4283      	cmp	r3, r0
 8005702:	440a      	add	r2, r1
 8005704:	d9f8      	bls.n	80056f8 <st_int8_copy+0xb4>
 8005706:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800570a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800570e:	4283      	cmp	r3, r0
 8005710:	d1f9      	bne.n	8005706 <st_int8_copy+0xc2>
 8005712:	4770      	bx	lr
 8005714:	4770      	bx	lr
 8005716:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800571a:	460b      	mov	r3, r1
 800571c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8005720:	4684      	mov	ip, r0
 8005722:	f8dc 7000 	ldr.w	r7, [ip]
 8005726:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800572a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800572e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8005732:	f8c3 800c 	str.w	r8, [r3, #12]
 8005736:	601f      	str	r7, [r3, #0]
 8005738:	605e      	str	r6, [r3, #4]
 800573a:	609d      	str	r5, [r3, #8]
 800573c:	3310      	adds	r3, #16
 800573e:	459e      	cmp	lr, r3
 8005740:	f10c 0c10 	add.w	ip, ip, #16
 8005744:	d1ed      	bne.n	8005722 <st_int8_copy+0xde>
 8005746:	e7b2      	b.n	80056ae <st_int8_copy+0x6a>
 8005748:	0893      	lsrs	r3, r2, #2
 800574a:	f002 0203 	and.w	r2, r2, #3
 800574e:	e7b4      	b.n	80056ba <st_int8_copy+0x76>

08005750 <ai_array_to_buffer_fmt>:
 8005750:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005754:	2b02      	cmp	r3, #2
 8005756:	d050      	beq.n	80057fa <ai_array_to_buffer_fmt+0xaa>
 8005758:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <ai_array_to_buffer_fmt+0xb4>)
 800575a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800575e:	429a      	cmp	r2, r3
 8005760:	d00b      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 8005762:	dc1c      	bgt.n	800579e <ai_array_to_buffer_fmt+0x4e>
 8005764:	4b28      	ldr	r3, [pc, #160]	; (8005808 <ai_array_to_buffer_fmt+0xb8>)
 8005766:	429a      	cmp	r2, r3
 8005768:	d007      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 800576a:	dd0b      	ble.n	8005784 <ai_array_to_buffer_fmt+0x34>
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <ai_array_to_buffer_fmt+0xbc>)
 800576e:	429a      	cmp	r2, r3
 8005770:	d003      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 8005772:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005776:	429a      	cmp	r2, r3
 8005778:	d131      	bne.n	80057de <ai_array_to_buffer_fmt+0x8e>
 800577a:	4613      	mov	r3, r2
 800577c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005780:	4318      	orrs	r0, r3
 8005782:	4770      	bx	lr
 8005784:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005788:	429a      	cmp	r2, r3
 800578a:	d0f6      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 800578c:	dd2c      	ble.n	80057e8 <ai_array_to_buffer_fmt+0x98>
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <ai_array_to_buffer_fmt+0xc0>)
 8005790:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005794:	429a      	cmp	r2, r3
 8005796:	bf18      	it	ne
 8005798:	2340      	movne	r3, #64	; 0x40
 800579a:	4318      	orrs	r0, r3
 800579c:	4770      	bx	lr
 800579e:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <ai_array_to_buffer_fmt+0xc4>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d0ea      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 80057a4:	dd0e      	ble.n	80057c4 <ai_array_to_buffer_fmt+0x74>
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <ai_array_to_buffer_fmt+0xc8>)
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d0e6      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 80057ac:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d0e2      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <ai_array_to_buffer_fmt+0xcc>)
 80057b6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80057ba:	429a      	cmp	r2, r3
 80057bc:	bf18      	it	ne
 80057be:	2340      	movne	r3, #64	; 0x40
 80057c0:	4318      	orrs	r0, r3
 80057c2:	4770      	bx	lr
 80057c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d0d6      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 80057cc:	3307      	adds	r3, #7
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d0d3      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 80057d2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80057d6:	429a      	cmp	r2, r3
 80057d8:	bf18      	it	ne
 80057da:	2340      	movne	r3, #64	; 0x40
 80057dc:	e7ce      	b.n	800577c <ai_array_to_buffer_fmt+0x2c>
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <ai_array_to_buffer_fmt+0xd0>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	bf18      	it	ne
 80057e4:	2340      	movne	r3, #64	; 0x40
 80057e6:	e7c9      	b.n	800577c <ai_array_to_buffer_fmt+0x2c>
 80057e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d0c4      	beq.n	800577a <ai_array_to_buffer_fmt+0x2a>
 80057f0:	3380      	adds	r3, #128	; 0x80
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf18      	it	ne
 80057f6:	2340      	movne	r3, #64	; 0x40
 80057f8:	e7c0      	b.n	800577c <ai_array_to_buffer_fmt+0x2c>
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <ai_array_to_buffer_fmt+0xd4>)
 80057fc:	4003      	ands	r3, r0
 80057fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005802:	e7bb      	b.n	800577c <ai_array_to_buffer_fmt+0x2c>
 8005804:	00840040 	.word	0x00840040
 8005808:	00040840 	.word	0x00040840
 800580c:	00041040 	.word	0x00041040
 8005810:	00040447 	.word	0x00040447
 8005814:	00840840 	.word	0x00840840
 8005818:	00841040 	.word	0x00841040
 800581c:	0084084f 	.word	0x0084084f
 8005820:	0004084f 	.word	0x0004084f
 8005824:	00803fff 	.word	0x00803fff

08005828 <ai_array_get_byte_size>:
 8005828:	b319      	cbz	r1, 8005872 <ai_array_get_byte_size+0x4a>
 800582a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800582e:	fb03 f101 	mul.w	r1, r3, r1
 8005832:	3107      	adds	r1, #7
 8005834:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8005838:	f021 0307 	bic.w	r3, r1, #7
 800583c:	2a04      	cmp	r2, #4
 800583e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8005842:	fa23 f101 	lsr.w	r1, r3, r1
 8005846:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800584a:	d00b      	beq.n	8005864 <ai_array_get_byte_size+0x3c>
 800584c:	2a08      	cmp	r2, #8
 800584e:	d002      	beq.n	8005856 <ai_array_get_byte_size+0x2e>
 8005850:	3107      	adds	r1, #7
 8005852:	08c8      	lsrs	r0, r1, #3
 8005854:	4770      	bx	lr
 8005856:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800585a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800585e:	3107      	adds	r1, #7
 8005860:	08c8      	lsrs	r0, r1, #3
 8005862:	4770      	bx	lr
 8005864:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005868:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800586c:	3107      	adds	r1, #7
 800586e:	08c8      	lsrs	r0, r1, #3
 8005870:	4770      	bx	lr
 8005872:	4608      	mov	r0, r1
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop

08005878 <ai_array_get_data_byte_size>:
 8005878:	b169      	cbz	r1, 8005896 <ai_array_get_data_byte_size+0x1e>
 800587a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800587e:	fb02 f101 	mul.w	r1, r2, r1
 8005882:	1dcb      	adds	r3, r1, #7
 8005884:	f023 0307 	bic.w	r3, r3, #7
 8005888:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800588c:	fa23 f000 	lsr.w	r0, r3, r0
 8005890:	3007      	adds	r0, #7
 8005892:	08c0      	lsrs	r0, r0, #3
 8005894:	4770      	bx	lr
 8005896:	4608      	mov	r0, r1
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop

0800589c <ai_version_get>:
 800589c:	0212      	lsls	r2, r2, #8
 800589e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058a2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80058a6:	4770      	bx	lr

080058a8 <ai_platform_version_get>:
 80058a8:	0e02      	lsrs	r2, r0, #24
 80058aa:	2300      	movs	r3, #0
 80058ac:	f362 0307 	bfi	r3, r2, #0, #8
 80058b0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80058b4:	f362 230f 	bfi	r3, r2, #8, #8
 80058b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80058bc:	f360 4317 	bfi	r3, r0, #16, #8
 80058c0:	b082      	sub	sp, #8
 80058c2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80058c6:	b002      	add	sp, #8
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop

080058cc <get_tensor_byte_size>:
 80058cc:	b410      	push	{r4}
 80058ce:	6983      	ldr	r3, [r0, #24]
 80058d0:	68c4      	ldr	r4, [r0, #12]
 80058d2:	6941      	ldr	r1, [r0, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68e0      	ldr	r0, [r4, #12]
 80058d8:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <get_tensor_byte_size+0x2c>)
 80058da:	68c9      	ldr	r1, [r1, #12]
 80058dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80058e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058e8:	fb01 f000 	mul.w	r0, r1, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bf04      	itt	eq
 80058f0:	3007      	addeq	r0, #7
 80058f2:	08c0      	lsreq	r0, r0, #3
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	000400c0 	.word	0x000400c0

080058fc <_calloc_r>:
 80058fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058fe:	fba1 2402 	umull	r2, r4, r1, r2
 8005902:	b94c      	cbnz	r4, 8005918 <_calloc_r+0x1c>
 8005904:	4611      	mov	r1, r2
 8005906:	9201      	str	r2, [sp, #4]
 8005908:	f000 f836 	bl	8005978 <_malloc_r>
 800590c:	9a01      	ldr	r2, [sp, #4]
 800590e:	4605      	mov	r5, r0
 8005910:	b930      	cbnz	r0, 8005920 <_calloc_r+0x24>
 8005912:	4628      	mov	r0, r5
 8005914:	b003      	add	sp, #12
 8005916:	bd30      	pop	{r4, r5, pc}
 8005918:	220c      	movs	r2, #12
 800591a:	6002      	str	r2, [r0, #0]
 800591c:	2500      	movs	r5, #0
 800591e:	e7f8      	b.n	8005912 <_calloc_r+0x16>
 8005920:	4621      	mov	r1, r4
 8005922:	f000 febc 	bl	800669e <memset>
 8005926:	e7f4      	b.n	8005912 <_calloc_r+0x16>

08005928 <malloc>:
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <malloc+0xc>)
 800592a:	4601      	mov	r1, r0
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f000 b823 	b.w	8005978 <_malloc_r>
 8005932:	bf00      	nop
 8005934:	200006a0 	.word	0x200006a0

08005938 <sbrk_aligned>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4e0e      	ldr	r6, [pc, #56]	; (8005974 <sbrk_aligned+0x3c>)
 800593c:	460c      	mov	r4, r1
 800593e:	6831      	ldr	r1, [r6, #0]
 8005940:	4605      	mov	r5, r0
 8005942:	b911      	cbnz	r1, 800594a <sbrk_aligned+0x12>
 8005944:	f000 fefe 	bl	8006744 <_sbrk_r>
 8005948:	6030      	str	r0, [r6, #0]
 800594a:	4621      	mov	r1, r4
 800594c:	4628      	mov	r0, r5
 800594e:	f000 fef9 	bl	8006744 <_sbrk_r>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	d00a      	beq.n	800596c <sbrk_aligned+0x34>
 8005956:	1cc4      	adds	r4, r0, #3
 8005958:	f024 0403 	bic.w	r4, r4, #3
 800595c:	42a0      	cmp	r0, r4
 800595e:	d007      	beq.n	8005970 <sbrk_aligned+0x38>
 8005960:	1a21      	subs	r1, r4, r0
 8005962:	4628      	mov	r0, r5
 8005964:	f000 feee 	bl	8006744 <_sbrk_r>
 8005968:	3001      	adds	r0, #1
 800596a:	d101      	bne.n	8005970 <sbrk_aligned+0x38>
 800596c:	f04f 34ff 	mov.w	r4, #4294967295
 8005970:	4620      	mov	r0, r4
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	200009cc 	.word	0x200009cc

08005978 <_malloc_r>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	1ccd      	adds	r5, r1, #3
 800597e:	f025 0503 	bic.w	r5, r5, #3
 8005982:	3508      	adds	r5, #8
 8005984:	2d0c      	cmp	r5, #12
 8005986:	bf38      	it	cc
 8005988:	250c      	movcc	r5, #12
 800598a:	2d00      	cmp	r5, #0
 800598c:	4607      	mov	r7, r0
 800598e:	db01      	blt.n	8005994 <_malloc_r+0x1c>
 8005990:	42a9      	cmp	r1, r5
 8005992:	d905      	bls.n	80059a0 <_malloc_r+0x28>
 8005994:	230c      	movs	r3, #12
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	2600      	movs	r6, #0
 800599a:	4630      	mov	r0, r6
 800599c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a74 <_malloc_r+0xfc>
 80059a4:	f000 f868 	bl	8005a78 <__malloc_lock>
 80059a8:	f8d8 3000 	ldr.w	r3, [r8]
 80059ac:	461c      	mov	r4, r3
 80059ae:	bb5c      	cbnz	r4, 8005a08 <_malloc_r+0x90>
 80059b0:	4629      	mov	r1, r5
 80059b2:	4638      	mov	r0, r7
 80059b4:	f7ff ffc0 	bl	8005938 <sbrk_aligned>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	4604      	mov	r4, r0
 80059bc:	d155      	bne.n	8005a6a <_malloc_r+0xf2>
 80059be:	f8d8 4000 	ldr.w	r4, [r8]
 80059c2:	4626      	mov	r6, r4
 80059c4:	2e00      	cmp	r6, #0
 80059c6:	d145      	bne.n	8005a54 <_malloc_r+0xdc>
 80059c8:	2c00      	cmp	r4, #0
 80059ca:	d048      	beq.n	8005a5e <_malloc_r+0xe6>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	4631      	mov	r1, r6
 80059d0:	4638      	mov	r0, r7
 80059d2:	eb04 0903 	add.w	r9, r4, r3
 80059d6:	f000 feb5 	bl	8006744 <_sbrk_r>
 80059da:	4581      	cmp	r9, r0
 80059dc:	d13f      	bne.n	8005a5e <_malloc_r+0xe6>
 80059de:	6821      	ldr	r1, [r4, #0]
 80059e0:	1a6d      	subs	r5, r5, r1
 80059e2:	4629      	mov	r1, r5
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff ffa7 	bl	8005938 <sbrk_aligned>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d037      	beq.n	8005a5e <_malloc_r+0xe6>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	442b      	add	r3, r5
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	f8d8 3000 	ldr.w	r3, [r8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d038      	beq.n	8005a6e <_malloc_r+0xf6>
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	42a2      	cmp	r2, r4
 8005a00:	d12b      	bne.n	8005a5a <_malloc_r+0xe2>
 8005a02:	2200      	movs	r2, #0
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	e00f      	b.n	8005a28 <_malloc_r+0xb0>
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	1b52      	subs	r2, r2, r5
 8005a0c:	d41f      	bmi.n	8005a4e <_malloc_r+0xd6>
 8005a0e:	2a0b      	cmp	r2, #11
 8005a10:	d917      	bls.n	8005a42 <_malloc_r+0xca>
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	6025      	str	r5, [r4, #0]
 8005a18:	bf18      	it	ne
 8005a1a:	6059      	strne	r1, [r3, #4]
 8005a1c:	6863      	ldr	r3, [r4, #4]
 8005a1e:	bf08      	it	eq
 8005a20:	f8c8 1000 	streq.w	r1, [r8]
 8005a24:	5162      	str	r2, [r4, r5]
 8005a26:	604b      	str	r3, [r1, #4]
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f104 060b 	add.w	r6, r4, #11
 8005a2e:	f000 f829 	bl	8005a84 <__malloc_unlock>
 8005a32:	f026 0607 	bic.w	r6, r6, #7
 8005a36:	1d23      	adds	r3, r4, #4
 8005a38:	1af2      	subs	r2, r6, r3
 8005a3a:	d0ae      	beq.n	800599a <_malloc_r+0x22>
 8005a3c:	1b9b      	subs	r3, r3, r6
 8005a3e:	50a3      	str	r3, [r4, r2]
 8005a40:	e7ab      	b.n	800599a <_malloc_r+0x22>
 8005a42:	42a3      	cmp	r3, r4
 8005a44:	6862      	ldr	r2, [r4, #4]
 8005a46:	d1dd      	bne.n	8005a04 <_malloc_r+0x8c>
 8005a48:	f8c8 2000 	str.w	r2, [r8]
 8005a4c:	e7ec      	b.n	8005a28 <_malloc_r+0xb0>
 8005a4e:	4623      	mov	r3, r4
 8005a50:	6864      	ldr	r4, [r4, #4]
 8005a52:	e7ac      	b.n	80059ae <_malloc_r+0x36>
 8005a54:	4634      	mov	r4, r6
 8005a56:	6876      	ldr	r6, [r6, #4]
 8005a58:	e7b4      	b.n	80059c4 <_malloc_r+0x4c>
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	e7cc      	b.n	80059f8 <_malloc_r+0x80>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4638      	mov	r0, r7
 8005a64:	f000 f80e 	bl	8005a84 <__malloc_unlock>
 8005a68:	e797      	b.n	800599a <_malloc_r+0x22>
 8005a6a:	6025      	str	r5, [r4, #0]
 8005a6c:	e7dc      	b.n	8005a28 <_malloc_r+0xb0>
 8005a6e:	605b      	str	r3, [r3, #4]
 8005a70:	deff      	udf	#255	; 0xff
 8005a72:	bf00      	nop
 8005a74:	200009c8 	.word	0x200009c8

08005a78 <__malloc_lock>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__malloc_lock+0x8>)
 8005a7a:	f000 beaf 	b.w	80067dc <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	20000b10 	.word	0x20000b10

08005a84 <__malloc_unlock>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__malloc_unlock+0x8>)
 8005a86:	f000 beaa 	b.w	80067de <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20000b10 	.word	0x20000b10

08005a90 <__cvt>:
 8005a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	ec55 4b10 	vmov	r4, r5, d0
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	460e      	mov	r6, r1
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	bfbb      	ittet	lt
 8005aa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aa6:	461d      	movlt	r5, r3
 8005aa8:	2300      	movge	r3, #0
 8005aaa:	232d      	movlt	r3, #45	; 0x2d
 8005aac:	700b      	strb	r3, [r1, #0]
 8005aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ab4:	4691      	mov	r9, r2
 8005ab6:	f023 0820 	bic.w	r8, r3, #32
 8005aba:	bfbc      	itt	lt
 8005abc:	4622      	movlt	r2, r4
 8005abe:	4614      	movlt	r4, r2
 8005ac0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ac4:	d005      	beq.n	8005ad2 <__cvt+0x42>
 8005ac6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aca:	d100      	bne.n	8005ace <__cvt+0x3e>
 8005acc:	3601      	adds	r6, #1
 8005ace:	2102      	movs	r1, #2
 8005ad0:	e000      	b.n	8005ad4 <__cvt+0x44>
 8005ad2:	2103      	movs	r1, #3
 8005ad4:	ab03      	add	r3, sp, #12
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	ab02      	add	r3, sp, #8
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	ec45 4b10 	vmov	d0, r4, r5
 8005ae0:	4653      	mov	r3, sl
 8005ae2:	4632      	mov	r2, r6
 8005ae4:	f000 ff30 	bl	8006948 <_dtoa_r>
 8005ae8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005aec:	4607      	mov	r7, r0
 8005aee:	d102      	bne.n	8005af6 <__cvt+0x66>
 8005af0:	f019 0f01 	tst.w	r9, #1
 8005af4:	d022      	beq.n	8005b3c <__cvt+0xac>
 8005af6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005afa:	eb07 0906 	add.w	r9, r7, r6
 8005afe:	d110      	bne.n	8005b22 <__cvt+0x92>
 8005b00:	783b      	ldrb	r3, [r7, #0]
 8005b02:	2b30      	cmp	r3, #48	; 0x30
 8005b04:	d10a      	bne.n	8005b1c <__cvt+0x8c>
 8005b06:	2200      	movs	r2, #0
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	f7fa ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b12:	b918      	cbnz	r0, 8005b1c <__cvt+0x8c>
 8005b14:	f1c6 0601 	rsb	r6, r6, #1
 8005b18:	f8ca 6000 	str.w	r6, [sl]
 8005b1c:	f8da 3000 	ldr.w	r3, [sl]
 8005b20:	4499      	add	r9, r3
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b2e:	b108      	cbz	r0, 8005b34 <__cvt+0xa4>
 8005b30:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b34:	2230      	movs	r2, #48	; 0x30
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	454b      	cmp	r3, r9
 8005b3a:	d307      	bcc.n	8005b4c <__cvt+0xbc>
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b40:	1bdb      	subs	r3, r3, r7
 8005b42:	4638      	mov	r0, r7
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	b004      	add	sp, #16
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	1c59      	adds	r1, r3, #1
 8005b4e:	9103      	str	r1, [sp, #12]
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e7f0      	b.n	8005b36 <__cvt+0xa6>

08005b54 <__exponent>:
 8005b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b56:	4603      	mov	r3, r0
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	bfb8      	it	lt
 8005b5c:	4249      	neglt	r1, r1
 8005b5e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b62:	bfb4      	ite	lt
 8005b64:	222d      	movlt	r2, #45	; 0x2d
 8005b66:	222b      	movge	r2, #43	; 0x2b
 8005b68:	2909      	cmp	r1, #9
 8005b6a:	7042      	strb	r2, [r0, #1]
 8005b6c:	dd2a      	ble.n	8005bc4 <__exponent+0x70>
 8005b6e:	f10d 0207 	add.w	r2, sp, #7
 8005b72:	4617      	mov	r7, r2
 8005b74:	260a      	movs	r6, #10
 8005b76:	4694      	mov	ip, r2
 8005b78:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b7c:	fb06 1415 	mls	r4, r6, r5, r1
 8005b80:	3430      	adds	r4, #48	; 0x30
 8005b82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b86:	460c      	mov	r4, r1
 8005b88:	2c63      	cmp	r4, #99	; 0x63
 8005b8a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b8e:	4629      	mov	r1, r5
 8005b90:	dcf1      	bgt.n	8005b76 <__exponent+0x22>
 8005b92:	3130      	adds	r1, #48	; 0x30
 8005b94:	f1ac 0402 	sub.w	r4, ip, #2
 8005b98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b9c:	1c41      	adds	r1, r0, #1
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	42ba      	cmp	r2, r7
 8005ba2:	d30a      	bcc.n	8005bba <__exponent+0x66>
 8005ba4:	f10d 0209 	add.w	r2, sp, #9
 8005ba8:	eba2 020c 	sub.w	r2, r2, ip
 8005bac:	42bc      	cmp	r4, r7
 8005bae:	bf88      	it	hi
 8005bb0:	2200      	movhi	r2, #0
 8005bb2:	4413      	add	r3, r2
 8005bb4:	1a18      	subs	r0, r3, r0
 8005bb6:	b003      	add	sp, #12
 8005bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bbe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bc2:	e7ed      	b.n	8005ba0 <__exponent+0x4c>
 8005bc4:	2330      	movs	r3, #48	; 0x30
 8005bc6:	3130      	adds	r1, #48	; 0x30
 8005bc8:	7083      	strb	r3, [r0, #2]
 8005bca:	70c1      	strb	r1, [r0, #3]
 8005bcc:	1d03      	adds	r3, r0, #4
 8005bce:	e7f1      	b.n	8005bb4 <__exponent+0x60>

08005bd0 <_printf_float>:
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	ed2d 8b02 	vpush	{d8}
 8005bd8:	b08d      	sub	sp, #52	; 0x34
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005be0:	4616      	mov	r6, r2
 8005be2:	461f      	mov	r7, r3
 8005be4:	4605      	mov	r5, r0
 8005be6:	f000 fd75 	bl	80066d4 <_localeconv_r>
 8005bea:	f8d0 a000 	ldr.w	sl, [r0]
 8005bee:	4650      	mov	r0, sl
 8005bf0:	f7fa fb3e 	bl	8000270 <strlen>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8005c00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c04:	3307      	adds	r3, #7
 8005c06:	f023 0307 	bic.w	r3, r3, #7
 8005c0a:	f103 0208 	add.w	r2, r3, #8
 8005c0e:	f8c8 2000 	str.w	r2, [r8]
 8005c12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c1a:	9307      	str	r3, [sp, #28]
 8005c1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c20:	ee08 0a10 	vmov	s16, r0
 8005c24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c2c:	4b9e      	ldr	r3, [pc, #632]	; (8005ea8 <_printf_float+0x2d8>)
 8005c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c32:	f7fa ff7b 	bl	8000b2c <__aeabi_dcmpun>
 8005c36:	bb88      	cbnz	r0, 8005c9c <_printf_float+0xcc>
 8005c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c3c:	4b9a      	ldr	r3, [pc, #616]	; (8005ea8 <_printf_float+0x2d8>)
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	f7fa ff55 	bl	8000af0 <__aeabi_dcmple>
 8005c46:	bb48      	cbnz	r0, 8005c9c <_printf_float+0xcc>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4649      	mov	r1, r9
 8005c50:	f7fa ff44 	bl	8000adc <__aeabi_dcmplt>
 8005c54:	b110      	cbz	r0, 8005c5c <_printf_float+0x8c>
 8005c56:	232d      	movs	r3, #45	; 0x2d
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	4a93      	ldr	r2, [pc, #588]	; (8005eac <_printf_float+0x2dc>)
 8005c5e:	4b94      	ldr	r3, [pc, #592]	; (8005eb0 <_printf_float+0x2e0>)
 8005c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c64:	bf94      	ite	ls
 8005c66:	4690      	movls	r8, r2
 8005c68:	4698      	movhi	r8, r3
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	9b05      	ldr	r3, [sp, #20]
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	f04f 0900 	mov.w	r9, #0
 8005c7a:	9700      	str	r7, [sp, #0]
 8005c7c:	4633      	mov	r3, r6
 8005c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c80:	4621      	mov	r1, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 f9da 	bl	800603c <_printf_common>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f040 8090 	bne.w	8005dae <_printf_float+0x1de>
 8005c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c92:	b00d      	add	sp, #52	; 0x34
 8005c94:	ecbd 8b02 	vpop	{d8}
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa ff42 	bl	8000b2c <__aeabi_dcmpun>
 8005ca8:	b140      	cbz	r0, 8005cbc <_printf_float+0xec>
 8005caa:	464b      	mov	r3, r9
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfbc      	itt	lt
 8005cb0:	232d      	movlt	r3, #45	; 0x2d
 8005cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cb6:	4a7f      	ldr	r2, [pc, #508]	; (8005eb4 <_printf_float+0x2e4>)
 8005cb8:	4b7f      	ldr	r3, [pc, #508]	; (8005eb8 <_printf_float+0x2e8>)
 8005cba:	e7d1      	b.n	8005c60 <_printf_float+0x90>
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cc2:	9206      	str	r2, [sp, #24]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	d13f      	bne.n	8005d48 <_printf_float+0x178>
 8005cc8:	2306      	movs	r3, #6
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	9b05      	ldr	r3, [sp, #20]
 8005cce:	6861      	ldr	r1, [r4, #4]
 8005cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8005cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cde:	ab09      	add	r3, sp, #36	; 0x24
 8005ce0:	ec49 8b10 	vmov	d0, r8, r9
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7ff fecf 	bl	8005a90 <__cvt>
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cf6:	2b47      	cmp	r3, #71	; 0x47
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	d108      	bne.n	8005d0e <_printf_float+0x13e>
 8005cfc:	1cc8      	adds	r0, r1, #3
 8005cfe:	db02      	blt.n	8005d06 <_printf_float+0x136>
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	4299      	cmp	r1, r3
 8005d04:	dd41      	ble.n	8005d8a <_printf_float+0x1ba>
 8005d06:	f1ab 0302 	sub.w	r3, fp, #2
 8005d0a:	fa5f fb83 	uxtb.w	fp, r3
 8005d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d12:	d820      	bhi.n	8005d56 <_printf_float+0x186>
 8005d14:	3901      	subs	r1, #1
 8005d16:	465a      	mov	r2, fp
 8005d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8005d1e:	f7ff ff19 	bl	8005b54 <__exponent>
 8005d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d24:	1813      	adds	r3, r2, r0
 8005d26:	2a01      	cmp	r2, #1
 8005d28:	4681      	mov	r9, r0
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	dc02      	bgt.n	8005d34 <_printf_float+0x164>
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	07d2      	lsls	r2, r2, #31
 8005d32:	d501      	bpl.n	8005d38 <_printf_float+0x168>
 8005d34:	3301      	adds	r3, #1
 8005d36:	6123      	str	r3, [r4, #16]
 8005d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d09c      	beq.n	8005c7a <_printf_float+0xaa>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d46:	e798      	b.n	8005c7a <_printf_float+0xaa>
 8005d48:	9a06      	ldr	r2, [sp, #24]
 8005d4a:	2a47      	cmp	r2, #71	; 0x47
 8005d4c:	d1be      	bne.n	8005ccc <_printf_float+0xfc>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1bc      	bne.n	8005ccc <_printf_float+0xfc>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7b9      	b.n	8005cca <_printf_float+0xfa>
 8005d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d5a:	d118      	bne.n	8005d8e <_printf_float+0x1be>
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	dd0b      	ble.n	8005d7a <_printf_float+0x1aa>
 8005d62:	6121      	str	r1, [r4, #16]
 8005d64:	b913      	cbnz	r3, 8005d6c <_printf_float+0x19c>
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	07d0      	lsls	r0, r2, #31
 8005d6a:	d502      	bpl.n	8005d72 <_printf_float+0x1a2>
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	440b      	add	r3, r1
 8005d70:	6123      	str	r3, [r4, #16]
 8005d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d74:	f04f 0900 	mov.w	r9, #0
 8005d78:	e7de      	b.n	8005d38 <_printf_float+0x168>
 8005d7a:	b913      	cbnz	r3, 8005d82 <_printf_float+0x1b2>
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	07d2      	lsls	r2, r2, #31
 8005d80:	d501      	bpl.n	8005d86 <_printf_float+0x1b6>
 8005d82:	3302      	adds	r3, #2
 8005d84:	e7f4      	b.n	8005d70 <_printf_float+0x1a0>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e7f2      	b.n	8005d70 <_printf_float+0x1a0>
 8005d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d90:	4299      	cmp	r1, r3
 8005d92:	db05      	blt.n	8005da0 <_printf_float+0x1d0>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	6121      	str	r1, [r4, #16]
 8005d98:	07d8      	lsls	r0, r3, #31
 8005d9a:	d5ea      	bpl.n	8005d72 <_printf_float+0x1a2>
 8005d9c:	1c4b      	adds	r3, r1, #1
 8005d9e:	e7e7      	b.n	8005d70 <_printf_float+0x1a0>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	bfd4      	ite	le
 8005da4:	f1c1 0202 	rsble	r2, r1, #2
 8005da8:	2201      	movgt	r2, #1
 8005daa:	4413      	add	r3, r2
 8005dac:	e7e0      	b.n	8005d70 <_printf_float+0x1a0>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	055a      	lsls	r2, r3, #21
 8005db2:	d407      	bmi.n	8005dc4 <_printf_float+0x1f4>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	4642      	mov	r2, r8
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d12c      	bne.n	8005e1c <_printf_float+0x24c>
 8005dc2:	e764      	b.n	8005c8e <_printf_float+0xbe>
 8005dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dc8:	f240 80e0 	bls.w	8005f8c <_printf_float+0x3bc>
 8005dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f7fa fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d034      	beq.n	8005e46 <_printf_float+0x276>
 8005ddc:	4a37      	ldr	r2, [pc, #220]	; (8005ebc <_printf_float+0x2ec>)
 8005dde:	2301      	movs	r3, #1
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f af51 	beq.w	8005c8e <_printf_float+0xbe>
 8005dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db02      	blt.n	8005dfa <_printf_float+0x22a>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07d8      	lsls	r0, r3, #31
 8005df8:	d510      	bpl.n	8005e1c <_printf_float+0x24c>
 8005dfa:	ee18 3a10 	vmov	r3, s16
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af41 	beq.w	8005c8e <_printf_float+0xbe>
 8005e0c:	f04f 0800 	mov.w	r8, #0
 8005e10:	f104 091a 	add.w	r9, r4, #26
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4543      	cmp	r3, r8
 8005e1a:	dc09      	bgt.n	8005e30 <_printf_float+0x260>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	079b      	lsls	r3, r3, #30
 8005e20:	f100 8107 	bmi.w	8006032 <_printf_float+0x462>
 8005e24:	68e0      	ldr	r0, [r4, #12]
 8005e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	bfb8      	it	lt
 8005e2c:	4618      	movlt	r0, r3
 8005e2e:	e730      	b.n	8005c92 <_printf_float+0xc2>
 8005e30:	2301      	movs	r3, #1
 8005e32:	464a      	mov	r2, r9
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af27 	beq.w	8005c8e <_printf_float+0xbe>
 8005e40:	f108 0801 	add.w	r8, r8, #1
 8005e44:	e7e6      	b.n	8005e14 <_printf_float+0x244>
 8005e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dc39      	bgt.n	8005ec0 <_printf_float+0x2f0>
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <_printf_float+0x2ec>)
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4631      	mov	r1, r6
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f af19 	beq.w	8005c8e <_printf_float+0xbe>
 8005e5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d102      	bne.n	8005e6a <_printf_float+0x29a>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	d5d8      	bpl.n	8005e1c <_printf_float+0x24c>
 8005e6a:	ee18 3a10 	vmov	r3, s16
 8005e6e:	4652      	mov	r2, sl
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	f43f af09 	beq.w	8005c8e <_printf_float+0xbe>
 8005e7c:	f04f 0900 	mov.w	r9, #0
 8005e80:	f104 0a1a 	add.w	sl, r4, #26
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	425b      	negs	r3, r3
 8005e88:	454b      	cmp	r3, r9
 8005e8a:	dc01      	bgt.n	8005e90 <_printf_float+0x2c0>
 8005e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8e:	e792      	b.n	8005db6 <_printf_float+0x1e6>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4652      	mov	r2, sl
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f43f aef7 	beq.w	8005c8e <_printf_float+0xbe>
 8005ea0:	f109 0901 	add.w	r9, r9, #1
 8005ea4:	e7ee      	b.n	8005e84 <_printf_float+0x2b4>
 8005ea6:	bf00      	nop
 8005ea8:	7fefffff 	.word	0x7fefffff
 8005eac:	08009660 	.word	0x08009660
 8005eb0:	08009664 	.word	0x08009664
 8005eb4:	08009668 	.word	0x08009668
 8005eb8:	0800966c 	.word	0x0800966c
 8005ebc:	08008666 	.word	0x08008666
 8005ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	bfa8      	it	ge
 8005ec8:	461a      	movge	r2, r3
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	4691      	mov	r9, r2
 8005ece:	dc37      	bgt.n	8005f40 <_printf_float+0x370>
 8005ed0:	f04f 0b00 	mov.w	fp, #0
 8005ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ed8:	f104 021a 	add.w	r2, r4, #26
 8005edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	eba3 0309 	sub.w	r3, r3, r9
 8005ee4:	455b      	cmp	r3, fp
 8005ee6:	dc33      	bgt.n	8005f50 <_printf_float+0x380>
 8005ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eec:	429a      	cmp	r2, r3
 8005eee:	db3b      	blt.n	8005f68 <_printf_float+0x398>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d438      	bmi.n	8005f68 <_printf_float+0x398>
 8005ef6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005efa:	eba2 0903 	sub.w	r9, r2, r3
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	4591      	cmp	r9, r2
 8005f04:	bfa8      	it	ge
 8005f06:	4691      	movge	r9, r2
 8005f08:	f1b9 0f00 	cmp.w	r9, #0
 8005f0c:	dc35      	bgt.n	8005f7a <_printf_float+0x3aa>
 8005f0e:	f04f 0800 	mov.w	r8, #0
 8005f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f16:	f104 0a1a 	add.w	sl, r4, #26
 8005f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	eba3 0309 	sub.w	r3, r3, r9
 8005f24:	4543      	cmp	r3, r8
 8005f26:	f77f af79 	ble.w	8005e1c <_printf_float+0x24c>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f aeaa 	beq.w	8005c8e <_printf_float+0xbe>
 8005f3a:	f108 0801 	add.w	r8, r8, #1
 8005f3e:	e7ec      	b.n	8005f1a <_printf_float+0x34a>
 8005f40:	4613      	mov	r3, r2
 8005f42:	4631      	mov	r1, r6
 8005f44:	4642      	mov	r2, r8
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d1c0      	bne.n	8005ed0 <_printf_float+0x300>
 8005f4e:	e69e      	b.n	8005c8e <_printf_float+0xbe>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	9205      	str	r2, [sp, #20]
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f ae97 	beq.w	8005c8e <_printf_float+0xbe>
 8005f60:	9a05      	ldr	r2, [sp, #20]
 8005f62:	f10b 0b01 	add.w	fp, fp, #1
 8005f66:	e7b9      	b.n	8005edc <_printf_float+0x30c>
 8005f68:	ee18 3a10 	vmov	r3, s16
 8005f6c:	4652      	mov	r2, sl
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1be      	bne.n	8005ef6 <_printf_float+0x326>
 8005f78:	e689      	b.n	8005c8e <_printf_float+0xbe>
 8005f7a:	9a05      	ldr	r2, [sp, #20]
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	4442      	add	r2, r8
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	d1c1      	bne.n	8005f0e <_printf_float+0x33e>
 8005f8a:	e680      	b.n	8005c8e <_printf_float+0xbe>
 8005f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f8e:	2a01      	cmp	r2, #1
 8005f90:	dc01      	bgt.n	8005f96 <_printf_float+0x3c6>
 8005f92:	07db      	lsls	r3, r3, #31
 8005f94:	d53a      	bpl.n	800600c <_printf_float+0x43c>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4642      	mov	r2, r8
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b8      	blx	r7
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	f43f ae74 	beq.w	8005c8e <_printf_float+0xbe>
 8005fa6:	ee18 3a10 	vmov	r3, s16
 8005faa:	4652      	mov	r2, sl
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f43f ae6b 	beq.w	8005c8e <_printf_float+0xbe>
 8005fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005fc4:	f7fa fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc8:	b9d8      	cbnz	r0, 8006002 <_printf_float+0x432>
 8005fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005fce:	f108 0201 	add.w	r2, r8, #1
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d10e      	bne.n	8005ffa <_printf_float+0x42a>
 8005fdc:	e657      	b.n	8005c8e <_printf_float+0xbe>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4652      	mov	r2, sl
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f ae50 	beq.w	8005c8e <_printf_float+0xbe>
 8005fee:	f108 0801 	add.w	r8, r8, #1
 8005ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	4543      	cmp	r3, r8
 8005ff8:	dcf1      	bgt.n	8005fde <_printf_float+0x40e>
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006000:	e6da      	b.n	8005db8 <_printf_float+0x1e8>
 8006002:	f04f 0800 	mov.w	r8, #0
 8006006:	f104 0a1a 	add.w	sl, r4, #26
 800600a:	e7f2      	b.n	8005ff2 <_printf_float+0x422>
 800600c:	2301      	movs	r3, #1
 800600e:	4642      	mov	r2, r8
 8006010:	e7df      	b.n	8005fd2 <_printf_float+0x402>
 8006012:	2301      	movs	r3, #1
 8006014:	464a      	mov	r2, r9
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	f43f ae36 	beq.w	8005c8e <_printf_float+0xbe>
 8006022:	f108 0801 	add.w	r8, r8, #1
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	4543      	cmp	r3, r8
 800602e:	dcf0      	bgt.n	8006012 <_printf_float+0x442>
 8006030:	e6f8      	b.n	8005e24 <_printf_float+0x254>
 8006032:	f04f 0800 	mov.w	r8, #0
 8006036:	f104 0919 	add.w	r9, r4, #25
 800603a:	e7f4      	b.n	8006026 <_printf_float+0x456>

0800603c <_printf_common>:
 800603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006040:	4616      	mov	r6, r2
 8006042:	4699      	mov	r9, r3
 8006044:	688a      	ldr	r2, [r1, #8]
 8006046:	690b      	ldr	r3, [r1, #16]
 8006048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800604c:	4293      	cmp	r3, r2
 800604e:	bfb8      	it	lt
 8006050:	4613      	movlt	r3, r2
 8006052:	6033      	str	r3, [r6, #0]
 8006054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006058:	4607      	mov	r7, r0
 800605a:	460c      	mov	r4, r1
 800605c:	b10a      	cbz	r2, 8006062 <_printf_common+0x26>
 800605e:	3301      	adds	r3, #1
 8006060:	6033      	str	r3, [r6, #0]
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	0699      	lsls	r1, r3, #26
 8006066:	bf42      	ittt	mi
 8006068:	6833      	ldrmi	r3, [r6, #0]
 800606a:	3302      	addmi	r3, #2
 800606c:	6033      	strmi	r3, [r6, #0]
 800606e:	6825      	ldr	r5, [r4, #0]
 8006070:	f015 0506 	ands.w	r5, r5, #6
 8006074:	d106      	bne.n	8006084 <_printf_common+0x48>
 8006076:	f104 0a19 	add.w	sl, r4, #25
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	6832      	ldr	r2, [r6, #0]
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	42ab      	cmp	r3, r5
 8006082:	dc26      	bgt.n	80060d2 <_printf_common+0x96>
 8006084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006088:	1e13      	subs	r3, r2, #0
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	bf18      	it	ne
 800608e:	2301      	movne	r3, #1
 8006090:	0692      	lsls	r2, r2, #26
 8006092:	d42b      	bmi.n	80060ec <_printf_common+0xb0>
 8006094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d01e      	beq.n	80060e0 <_printf_common+0xa4>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	f003 0306 	and.w	r3, r3, #6
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	bf02      	ittt	eq
 80060ae:	68e5      	ldreq	r5, [r4, #12]
 80060b0:	6833      	ldreq	r3, [r6, #0]
 80060b2:	1aed      	subeq	r5, r5, r3
 80060b4:	68a3      	ldr	r3, [r4, #8]
 80060b6:	bf0c      	ite	eq
 80060b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060bc:	2500      	movne	r5, #0
 80060be:	4293      	cmp	r3, r2
 80060c0:	bfc4      	itt	gt
 80060c2:	1a9b      	subgt	r3, r3, r2
 80060c4:	18ed      	addgt	r5, r5, r3
 80060c6:	2600      	movs	r6, #0
 80060c8:	341a      	adds	r4, #26
 80060ca:	42b5      	cmp	r5, r6
 80060cc:	d11a      	bne.n	8006104 <_printf_common+0xc8>
 80060ce:	2000      	movs	r0, #0
 80060d0:	e008      	b.n	80060e4 <_printf_common+0xa8>
 80060d2:	2301      	movs	r3, #1
 80060d4:	4652      	mov	r2, sl
 80060d6:	4649      	mov	r1, r9
 80060d8:	4638      	mov	r0, r7
 80060da:	47c0      	blx	r8
 80060dc:	3001      	adds	r0, #1
 80060de:	d103      	bne.n	80060e8 <_printf_common+0xac>
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e8:	3501      	adds	r5, #1
 80060ea:	e7c6      	b.n	800607a <_printf_common+0x3e>
 80060ec:	18e1      	adds	r1, r4, r3
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	2030      	movs	r0, #48	; 0x30
 80060f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060f6:	4422      	add	r2, r4
 80060f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006100:	3302      	adds	r3, #2
 8006102:	e7c7      	b.n	8006094 <_printf_common+0x58>
 8006104:	2301      	movs	r3, #1
 8006106:	4622      	mov	r2, r4
 8006108:	4649      	mov	r1, r9
 800610a:	4638      	mov	r0, r7
 800610c:	47c0      	blx	r8
 800610e:	3001      	adds	r0, #1
 8006110:	d0e6      	beq.n	80060e0 <_printf_common+0xa4>
 8006112:	3601      	adds	r6, #1
 8006114:	e7d9      	b.n	80060ca <_printf_common+0x8e>
	...

08006118 <_printf_i>:
 8006118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	7e0f      	ldrb	r7, [r1, #24]
 800611e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006120:	2f78      	cmp	r7, #120	; 0x78
 8006122:	4691      	mov	r9, r2
 8006124:	4680      	mov	r8, r0
 8006126:	460c      	mov	r4, r1
 8006128:	469a      	mov	sl, r3
 800612a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800612e:	d807      	bhi.n	8006140 <_printf_i+0x28>
 8006130:	2f62      	cmp	r7, #98	; 0x62
 8006132:	d80a      	bhi.n	800614a <_printf_i+0x32>
 8006134:	2f00      	cmp	r7, #0
 8006136:	f000 80d4 	beq.w	80062e2 <_printf_i+0x1ca>
 800613a:	2f58      	cmp	r7, #88	; 0x58
 800613c:	f000 80c0 	beq.w	80062c0 <_printf_i+0x1a8>
 8006140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006148:	e03a      	b.n	80061c0 <_printf_i+0xa8>
 800614a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800614e:	2b15      	cmp	r3, #21
 8006150:	d8f6      	bhi.n	8006140 <_printf_i+0x28>
 8006152:	a101      	add	r1, pc, #4	; (adr r1, 8006158 <_printf_i+0x40>)
 8006154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006158:	080061b1 	.word	0x080061b1
 800615c:	080061c5 	.word	0x080061c5
 8006160:	08006141 	.word	0x08006141
 8006164:	08006141 	.word	0x08006141
 8006168:	08006141 	.word	0x08006141
 800616c:	08006141 	.word	0x08006141
 8006170:	080061c5 	.word	0x080061c5
 8006174:	08006141 	.word	0x08006141
 8006178:	08006141 	.word	0x08006141
 800617c:	08006141 	.word	0x08006141
 8006180:	08006141 	.word	0x08006141
 8006184:	080062c9 	.word	0x080062c9
 8006188:	080061f1 	.word	0x080061f1
 800618c:	08006283 	.word	0x08006283
 8006190:	08006141 	.word	0x08006141
 8006194:	08006141 	.word	0x08006141
 8006198:	080062eb 	.word	0x080062eb
 800619c:	08006141 	.word	0x08006141
 80061a0:	080061f1 	.word	0x080061f1
 80061a4:	08006141 	.word	0x08006141
 80061a8:	08006141 	.word	0x08006141
 80061ac:	0800628b 	.word	0x0800628b
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	1d1a      	adds	r2, r3, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	602a      	str	r2, [r5, #0]
 80061b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061c0:	2301      	movs	r3, #1
 80061c2:	e09f      	b.n	8006304 <_printf_i+0x1ec>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	682b      	ldr	r3, [r5, #0]
 80061c8:	0607      	lsls	r7, r0, #24
 80061ca:	f103 0104 	add.w	r1, r3, #4
 80061ce:	6029      	str	r1, [r5, #0]
 80061d0:	d501      	bpl.n	80061d6 <_printf_i+0xbe>
 80061d2:	681e      	ldr	r6, [r3, #0]
 80061d4:	e003      	b.n	80061de <_printf_i+0xc6>
 80061d6:	0646      	lsls	r6, r0, #25
 80061d8:	d5fb      	bpl.n	80061d2 <_printf_i+0xba>
 80061da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061de:	2e00      	cmp	r6, #0
 80061e0:	da03      	bge.n	80061ea <_printf_i+0xd2>
 80061e2:	232d      	movs	r3, #45	; 0x2d
 80061e4:	4276      	negs	r6, r6
 80061e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ea:	485a      	ldr	r0, [pc, #360]	; (8006354 <_printf_i+0x23c>)
 80061ec:	230a      	movs	r3, #10
 80061ee:	e012      	b.n	8006216 <_printf_i+0xfe>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	1d19      	adds	r1, r3, #4
 80061f6:	6029      	str	r1, [r5, #0]
 80061f8:	0605      	lsls	r5, r0, #24
 80061fa:	d501      	bpl.n	8006200 <_printf_i+0xe8>
 80061fc:	681e      	ldr	r6, [r3, #0]
 80061fe:	e002      	b.n	8006206 <_printf_i+0xee>
 8006200:	0641      	lsls	r1, r0, #25
 8006202:	d5fb      	bpl.n	80061fc <_printf_i+0xe4>
 8006204:	881e      	ldrh	r6, [r3, #0]
 8006206:	4853      	ldr	r0, [pc, #332]	; (8006354 <_printf_i+0x23c>)
 8006208:	2f6f      	cmp	r7, #111	; 0x6f
 800620a:	bf0c      	ite	eq
 800620c:	2308      	moveq	r3, #8
 800620e:	230a      	movne	r3, #10
 8006210:	2100      	movs	r1, #0
 8006212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006216:	6865      	ldr	r5, [r4, #4]
 8006218:	60a5      	str	r5, [r4, #8]
 800621a:	2d00      	cmp	r5, #0
 800621c:	bfa2      	ittt	ge
 800621e:	6821      	ldrge	r1, [r4, #0]
 8006220:	f021 0104 	bicge.w	r1, r1, #4
 8006224:	6021      	strge	r1, [r4, #0]
 8006226:	b90e      	cbnz	r6, 800622c <_printf_i+0x114>
 8006228:	2d00      	cmp	r5, #0
 800622a:	d04b      	beq.n	80062c4 <_printf_i+0x1ac>
 800622c:	4615      	mov	r5, r2
 800622e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006232:	fb03 6711 	mls	r7, r3, r1, r6
 8006236:	5dc7      	ldrb	r7, [r0, r7]
 8006238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800623c:	4637      	mov	r7, r6
 800623e:	42bb      	cmp	r3, r7
 8006240:	460e      	mov	r6, r1
 8006242:	d9f4      	bls.n	800622e <_printf_i+0x116>
 8006244:	2b08      	cmp	r3, #8
 8006246:	d10b      	bne.n	8006260 <_printf_i+0x148>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	07de      	lsls	r6, r3, #31
 800624c:	d508      	bpl.n	8006260 <_printf_i+0x148>
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	6861      	ldr	r1, [r4, #4]
 8006252:	4299      	cmp	r1, r3
 8006254:	bfde      	ittt	le
 8006256:	2330      	movle	r3, #48	; 0x30
 8006258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800625c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006260:	1b52      	subs	r2, r2, r5
 8006262:	6122      	str	r2, [r4, #16]
 8006264:	f8cd a000 	str.w	sl, [sp]
 8006268:	464b      	mov	r3, r9
 800626a:	aa03      	add	r2, sp, #12
 800626c:	4621      	mov	r1, r4
 800626e:	4640      	mov	r0, r8
 8006270:	f7ff fee4 	bl	800603c <_printf_common>
 8006274:	3001      	adds	r0, #1
 8006276:	d14a      	bne.n	800630e <_printf_i+0x1f6>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	b004      	add	sp, #16
 800627e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	f043 0320 	orr.w	r3, r3, #32
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	4833      	ldr	r0, [pc, #204]	; (8006358 <_printf_i+0x240>)
 800628c:	2778      	movs	r7, #120	; 0x78
 800628e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	6829      	ldr	r1, [r5, #0]
 8006296:	061f      	lsls	r7, r3, #24
 8006298:	f851 6b04 	ldr.w	r6, [r1], #4
 800629c:	d402      	bmi.n	80062a4 <_printf_i+0x18c>
 800629e:	065f      	lsls	r7, r3, #25
 80062a0:	bf48      	it	mi
 80062a2:	b2b6      	uxthmi	r6, r6
 80062a4:	07df      	lsls	r7, r3, #31
 80062a6:	bf48      	it	mi
 80062a8:	f043 0320 	orrmi.w	r3, r3, #32
 80062ac:	6029      	str	r1, [r5, #0]
 80062ae:	bf48      	it	mi
 80062b0:	6023      	strmi	r3, [r4, #0]
 80062b2:	b91e      	cbnz	r6, 80062bc <_printf_i+0x1a4>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	2310      	movs	r3, #16
 80062be:	e7a7      	b.n	8006210 <_printf_i+0xf8>
 80062c0:	4824      	ldr	r0, [pc, #144]	; (8006354 <_printf_i+0x23c>)
 80062c2:	e7e4      	b.n	800628e <_printf_i+0x176>
 80062c4:	4615      	mov	r5, r2
 80062c6:	e7bd      	b.n	8006244 <_printf_i+0x12c>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	6826      	ldr	r6, [r4, #0]
 80062cc:	6961      	ldr	r1, [r4, #20]
 80062ce:	1d18      	adds	r0, r3, #4
 80062d0:	6028      	str	r0, [r5, #0]
 80062d2:	0635      	lsls	r5, r6, #24
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	d501      	bpl.n	80062dc <_printf_i+0x1c4>
 80062d8:	6019      	str	r1, [r3, #0]
 80062da:	e002      	b.n	80062e2 <_printf_i+0x1ca>
 80062dc:	0670      	lsls	r0, r6, #25
 80062de:	d5fb      	bpl.n	80062d8 <_printf_i+0x1c0>
 80062e0:	8019      	strh	r1, [r3, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	6123      	str	r3, [r4, #16]
 80062e6:	4615      	mov	r5, r2
 80062e8:	e7bc      	b.n	8006264 <_printf_i+0x14c>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	1d1a      	adds	r2, r3, #4
 80062ee:	602a      	str	r2, [r5, #0]
 80062f0:	681d      	ldr	r5, [r3, #0]
 80062f2:	6862      	ldr	r2, [r4, #4]
 80062f4:	2100      	movs	r1, #0
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7f9 ff6a 	bl	80001d0 <memchr>
 80062fc:	b108      	cbz	r0, 8006302 <_printf_i+0x1ea>
 80062fe:	1b40      	subs	r0, r0, r5
 8006300:	6060      	str	r0, [r4, #4]
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	2300      	movs	r3, #0
 8006308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630c:	e7aa      	b.n	8006264 <_printf_i+0x14c>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	462a      	mov	r2, r5
 8006312:	4649      	mov	r1, r9
 8006314:	4640      	mov	r0, r8
 8006316:	47d0      	blx	sl
 8006318:	3001      	adds	r0, #1
 800631a:	d0ad      	beq.n	8006278 <_printf_i+0x160>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	079b      	lsls	r3, r3, #30
 8006320:	d413      	bmi.n	800634a <_printf_i+0x232>
 8006322:	68e0      	ldr	r0, [r4, #12]
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	4298      	cmp	r0, r3
 8006328:	bfb8      	it	lt
 800632a:	4618      	movlt	r0, r3
 800632c:	e7a6      	b.n	800627c <_printf_i+0x164>
 800632e:	2301      	movs	r3, #1
 8006330:	4632      	mov	r2, r6
 8006332:	4649      	mov	r1, r9
 8006334:	4640      	mov	r0, r8
 8006336:	47d0      	blx	sl
 8006338:	3001      	adds	r0, #1
 800633a:	d09d      	beq.n	8006278 <_printf_i+0x160>
 800633c:	3501      	adds	r5, #1
 800633e:	68e3      	ldr	r3, [r4, #12]
 8006340:	9903      	ldr	r1, [sp, #12]
 8006342:	1a5b      	subs	r3, r3, r1
 8006344:	42ab      	cmp	r3, r5
 8006346:	dcf2      	bgt.n	800632e <_printf_i+0x216>
 8006348:	e7eb      	b.n	8006322 <_printf_i+0x20a>
 800634a:	2500      	movs	r5, #0
 800634c:	f104 0619 	add.w	r6, r4, #25
 8006350:	e7f5      	b.n	800633e <_printf_i+0x226>
 8006352:	bf00      	nop
 8006354:	08009670 	.word	0x08009670
 8006358:	08009681 	.word	0x08009681

0800635c <__sflush_r>:
 800635c:	898a      	ldrh	r2, [r1, #12]
 800635e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006362:	4605      	mov	r5, r0
 8006364:	0710      	lsls	r0, r2, #28
 8006366:	460c      	mov	r4, r1
 8006368:	d458      	bmi.n	800641c <__sflush_r+0xc0>
 800636a:	684b      	ldr	r3, [r1, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dc05      	bgt.n	800637c <__sflush_r+0x20>
 8006370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	dc02      	bgt.n	800637c <__sflush_r+0x20>
 8006376:	2000      	movs	r0, #0
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800637e:	2e00      	cmp	r6, #0
 8006380:	d0f9      	beq.n	8006376 <__sflush_r+0x1a>
 8006382:	2300      	movs	r3, #0
 8006384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006388:	682f      	ldr	r7, [r5, #0]
 800638a:	6a21      	ldr	r1, [r4, #32]
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	d032      	beq.n	80063f6 <__sflush_r+0x9a>
 8006390:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	075a      	lsls	r2, r3, #29
 8006396:	d505      	bpl.n	80063a4 <__sflush_r+0x48>
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	1ac0      	subs	r0, r0, r3
 800639c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800639e:	b10b      	cbz	r3, 80063a4 <__sflush_r+0x48>
 80063a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063a2:	1ac0      	subs	r0, r0, r3
 80063a4:	2300      	movs	r3, #0
 80063a6:	4602      	mov	r2, r0
 80063a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063aa:	6a21      	ldr	r1, [r4, #32]
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b0      	blx	r6
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	d106      	bne.n	80063c4 <__sflush_r+0x68>
 80063b6:	6829      	ldr	r1, [r5, #0]
 80063b8:	291d      	cmp	r1, #29
 80063ba:	d82b      	bhi.n	8006414 <__sflush_r+0xb8>
 80063bc:	4a29      	ldr	r2, [pc, #164]	; (8006464 <__sflush_r+0x108>)
 80063be:	410a      	asrs	r2, r1
 80063c0:	07d6      	lsls	r6, r2, #31
 80063c2:	d427      	bmi.n	8006414 <__sflush_r+0xb8>
 80063c4:	2200      	movs	r2, #0
 80063c6:	6062      	str	r2, [r4, #4]
 80063c8:	04d9      	lsls	r1, r3, #19
 80063ca:	6922      	ldr	r2, [r4, #16]
 80063cc:	6022      	str	r2, [r4, #0]
 80063ce:	d504      	bpl.n	80063da <__sflush_r+0x7e>
 80063d0:	1c42      	adds	r2, r0, #1
 80063d2:	d101      	bne.n	80063d8 <__sflush_r+0x7c>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b903      	cbnz	r3, 80063da <__sflush_r+0x7e>
 80063d8:	6560      	str	r0, [r4, #84]	; 0x54
 80063da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063dc:	602f      	str	r7, [r5, #0]
 80063de:	2900      	cmp	r1, #0
 80063e0:	d0c9      	beq.n	8006376 <__sflush_r+0x1a>
 80063e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063e6:	4299      	cmp	r1, r3
 80063e8:	d002      	beq.n	80063f0 <__sflush_r+0x94>
 80063ea:	4628      	mov	r0, r5
 80063ec:	f001 f89e 	bl	800752c <_free_r>
 80063f0:	2000      	movs	r0, #0
 80063f2:	6360      	str	r0, [r4, #52]	; 0x34
 80063f4:	e7c0      	b.n	8006378 <__sflush_r+0x1c>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b0      	blx	r6
 80063fc:	1c41      	adds	r1, r0, #1
 80063fe:	d1c8      	bne.n	8006392 <__sflush_r+0x36>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0c5      	beq.n	8006392 <__sflush_r+0x36>
 8006406:	2b1d      	cmp	r3, #29
 8006408:	d001      	beq.n	800640e <__sflush_r+0xb2>
 800640a:	2b16      	cmp	r3, #22
 800640c:	d101      	bne.n	8006412 <__sflush_r+0xb6>
 800640e:	602f      	str	r7, [r5, #0]
 8006410:	e7b1      	b.n	8006376 <__sflush_r+0x1a>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	e7ad      	b.n	8006378 <__sflush_r+0x1c>
 800641c:	690f      	ldr	r7, [r1, #16]
 800641e:	2f00      	cmp	r7, #0
 8006420:	d0a9      	beq.n	8006376 <__sflush_r+0x1a>
 8006422:	0793      	lsls	r3, r2, #30
 8006424:	680e      	ldr	r6, [r1, #0]
 8006426:	bf08      	it	eq
 8006428:	694b      	ldreq	r3, [r1, #20]
 800642a:	600f      	str	r7, [r1, #0]
 800642c:	bf18      	it	ne
 800642e:	2300      	movne	r3, #0
 8006430:	eba6 0807 	sub.w	r8, r6, r7
 8006434:	608b      	str	r3, [r1, #8]
 8006436:	f1b8 0f00 	cmp.w	r8, #0
 800643a:	dd9c      	ble.n	8006376 <__sflush_r+0x1a>
 800643c:	6a21      	ldr	r1, [r4, #32]
 800643e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006440:	4643      	mov	r3, r8
 8006442:	463a      	mov	r2, r7
 8006444:	4628      	mov	r0, r5
 8006446:	47b0      	blx	r6
 8006448:	2800      	cmp	r0, #0
 800644a:	dc06      	bgt.n	800645a <__sflush_r+0xfe>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	e78e      	b.n	8006378 <__sflush_r+0x1c>
 800645a:	4407      	add	r7, r0
 800645c:	eba8 0800 	sub.w	r8, r8, r0
 8006460:	e7e9      	b.n	8006436 <__sflush_r+0xda>
 8006462:	bf00      	nop
 8006464:	dfbffffe 	.word	0xdfbffffe

08006468 <_fflush_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	690b      	ldr	r3, [r1, #16]
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	b913      	cbnz	r3, 8006478 <_fflush_r+0x10>
 8006472:	2500      	movs	r5, #0
 8006474:	4628      	mov	r0, r5
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	b118      	cbz	r0, 8006482 <_fflush_r+0x1a>
 800647a:	6a03      	ldr	r3, [r0, #32]
 800647c:	b90b      	cbnz	r3, 8006482 <_fflush_r+0x1a>
 800647e:	f000 f895 	bl	80065ac <__sinit>
 8006482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f3      	beq.n	8006472 <_fflush_r+0xa>
 800648a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800648c:	07d0      	lsls	r0, r2, #31
 800648e:	d404      	bmi.n	800649a <_fflush_r+0x32>
 8006490:	0599      	lsls	r1, r3, #22
 8006492:	d402      	bmi.n	800649a <_fflush_r+0x32>
 8006494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006496:	f000 f9a1 	bl	80067dc <__retarget_lock_acquire_recursive>
 800649a:	4628      	mov	r0, r5
 800649c:	4621      	mov	r1, r4
 800649e:	f7ff ff5d 	bl	800635c <__sflush_r>
 80064a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a4:	07da      	lsls	r2, r3, #31
 80064a6:	4605      	mov	r5, r0
 80064a8:	d4e4      	bmi.n	8006474 <_fflush_r+0xc>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	059b      	lsls	r3, r3, #22
 80064ae:	d4e1      	bmi.n	8006474 <_fflush_r+0xc>
 80064b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b2:	f000 f994 	bl	80067de <__retarget_lock_release_recursive>
 80064b6:	e7dd      	b.n	8006474 <_fflush_r+0xc>

080064b8 <std>:
 80064b8:	2300      	movs	r3, #0
 80064ba:	b510      	push	{r4, lr}
 80064bc:	4604      	mov	r4, r0
 80064be:	e9c0 3300 	strd	r3, r3, [r0]
 80064c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064c6:	6083      	str	r3, [r0, #8]
 80064c8:	8181      	strh	r1, [r0, #12]
 80064ca:	6643      	str	r3, [r0, #100]	; 0x64
 80064cc:	81c2      	strh	r2, [r0, #14]
 80064ce:	6183      	str	r3, [r0, #24]
 80064d0:	4619      	mov	r1, r3
 80064d2:	2208      	movs	r2, #8
 80064d4:	305c      	adds	r0, #92	; 0x5c
 80064d6:	f000 f8e2 	bl	800669e <memset>
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <std+0x38>)
 80064dc:	6263      	str	r3, [r4, #36]	; 0x24
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <std+0x3c>)
 80064e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <std+0x40>)
 80064e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <std+0x44>)
 80064e8:	6224      	str	r4, [r4, #32]
 80064ea:	6323      	str	r3, [r4, #48]	; 0x30
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	bf00      	nop
 80064f0:	08006619 	.word	0x08006619
 80064f4:	0800663b 	.word	0x0800663b
 80064f8:	08006673 	.word	0x08006673
 80064fc:	08006697 	.word	0x08006697

08006500 <stdio_exit_handler>:
 8006500:	4a02      	ldr	r2, [pc, #8]	; (800650c <stdio_exit_handler+0xc>)
 8006502:	4903      	ldr	r1, [pc, #12]	; (8006510 <stdio_exit_handler+0x10>)
 8006504:	4803      	ldr	r0, [pc, #12]	; (8006514 <stdio_exit_handler+0x14>)
 8006506:	f000 b869 	b.w	80065dc <_fwalk_sglue>
 800650a:	bf00      	nop
 800650c:	20000648 	.word	0x20000648
 8006510:	08006469 	.word	0x08006469
 8006514:	20000654 	.word	0x20000654

08006518 <cleanup_stdio>:
 8006518:	6841      	ldr	r1, [r0, #4]
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <cleanup_stdio+0x34>)
 800651c:	4299      	cmp	r1, r3
 800651e:	b510      	push	{r4, lr}
 8006520:	4604      	mov	r4, r0
 8006522:	d001      	beq.n	8006528 <cleanup_stdio+0x10>
 8006524:	f7ff ffa0 	bl	8006468 <_fflush_r>
 8006528:	68a1      	ldr	r1, [r4, #8]
 800652a:	4b09      	ldr	r3, [pc, #36]	; (8006550 <cleanup_stdio+0x38>)
 800652c:	4299      	cmp	r1, r3
 800652e:	d002      	beq.n	8006536 <cleanup_stdio+0x1e>
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff ff99 	bl	8006468 <_fflush_r>
 8006536:	68e1      	ldr	r1, [r4, #12]
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <cleanup_stdio+0x3c>)
 800653a:	4299      	cmp	r1, r3
 800653c:	d004      	beq.n	8006548 <cleanup_stdio+0x30>
 800653e:	4620      	mov	r0, r4
 8006540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006544:	f7ff bf90 	b.w	8006468 <_fflush_r>
 8006548:	bd10      	pop	{r4, pc}
 800654a:	bf00      	nop
 800654c:	200009d0 	.word	0x200009d0
 8006550:	20000a38 	.word	0x20000a38
 8006554:	20000aa0 	.word	0x20000aa0

08006558 <global_stdio_init.part.0>:
 8006558:	b510      	push	{r4, lr}
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <global_stdio_init.part.0+0x30>)
 800655c:	4c0b      	ldr	r4, [pc, #44]	; (800658c <global_stdio_init.part.0+0x34>)
 800655e:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <global_stdio_init.part.0+0x38>)
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	4620      	mov	r0, r4
 8006564:	2200      	movs	r2, #0
 8006566:	2104      	movs	r1, #4
 8006568:	f7ff ffa6 	bl	80064b8 <std>
 800656c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006570:	2201      	movs	r2, #1
 8006572:	2109      	movs	r1, #9
 8006574:	f7ff ffa0 	bl	80064b8 <std>
 8006578:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800657c:	2202      	movs	r2, #2
 800657e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006582:	2112      	movs	r1, #18
 8006584:	f7ff bf98 	b.w	80064b8 <std>
 8006588:	20000b08 	.word	0x20000b08
 800658c:	200009d0 	.word	0x200009d0
 8006590:	08006501 	.word	0x08006501

08006594 <__sfp_lock_acquire>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__sfp_lock_acquire+0x8>)
 8006596:	f000 b921 	b.w	80067dc <__retarget_lock_acquire_recursive>
 800659a:	bf00      	nop
 800659c:	20000b11 	.word	0x20000b11

080065a0 <__sfp_lock_release>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__sfp_lock_release+0x8>)
 80065a2:	f000 b91c 	b.w	80067de <__retarget_lock_release_recursive>
 80065a6:	bf00      	nop
 80065a8:	20000b11 	.word	0x20000b11

080065ac <__sinit>:
 80065ac:	b510      	push	{r4, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	f7ff fff0 	bl	8006594 <__sfp_lock_acquire>
 80065b4:	6a23      	ldr	r3, [r4, #32]
 80065b6:	b11b      	cbz	r3, 80065c0 <__sinit+0x14>
 80065b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065bc:	f7ff bff0 	b.w	80065a0 <__sfp_lock_release>
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <__sinit+0x28>)
 80065c2:	6223      	str	r3, [r4, #32]
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <__sinit+0x2c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f5      	bne.n	80065b8 <__sinit+0xc>
 80065cc:	f7ff ffc4 	bl	8006558 <global_stdio_init.part.0>
 80065d0:	e7f2      	b.n	80065b8 <__sinit+0xc>
 80065d2:	bf00      	nop
 80065d4:	08006519 	.word	0x08006519
 80065d8:	20000b08 	.word	0x20000b08

080065dc <_fwalk_sglue>:
 80065dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	4607      	mov	r7, r0
 80065e2:	4688      	mov	r8, r1
 80065e4:	4614      	mov	r4, r2
 80065e6:	2600      	movs	r6, #0
 80065e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065ec:	f1b9 0901 	subs.w	r9, r9, #1
 80065f0:	d505      	bpl.n	80065fe <_fwalk_sglue+0x22>
 80065f2:	6824      	ldr	r4, [r4, #0]
 80065f4:	2c00      	cmp	r4, #0
 80065f6:	d1f7      	bne.n	80065e8 <_fwalk_sglue+0xc>
 80065f8:	4630      	mov	r0, r6
 80065fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d907      	bls.n	8006614 <_fwalk_sglue+0x38>
 8006604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006608:	3301      	adds	r3, #1
 800660a:	d003      	beq.n	8006614 <_fwalk_sglue+0x38>
 800660c:	4629      	mov	r1, r5
 800660e:	4638      	mov	r0, r7
 8006610:	47c0      	blx	r8
 8006612:	4306      	orrs	r6, r0
 8006614:	3568      	adds	r5, #104	; 0x68
 8006616:	e7e9      	b.n	80065ec <_fwalk_sglue+0x10>

08006618 <__sread>:
 8006618:	b510      	push	{r4, lr}
 800661a:	460c      	mov	r4, r1
 800661c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006620:	f000 f87e 	bl	8006720 <_read_r>
 8006624:	2800      	cmp	r0, #0
 8006626:	bfab      	itete	ge
 8006628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800662a:	89a3      	ldrhlt	r3, [r4, #12]
 800662c:	181b      	addge	r3, r3, r0
 800662e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006632:	bfac      	ite	ge
 8006634:	6563      	strge	r3, [r4, #84]	; 0x54
 8006636:	81a3      	strhlt	r3, [r4, #12]
 8006638:	bd10      	pop	{r4, pc}

0800663a <__swrite>:
 800663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663e:	461f      	mov	r7, r3
 8006640:	898b      	ldrh	r3, [r1, #12]
 8006642:	05db      	lsls	r3, r3, #23
 8006644:	4605      	mov	r5, r0
 8006646:	460c      	mov	r4, r1
 8006648:	4616      	mov	r6, r2
 800664a:	d505      	bpl.n	8006658 <__swrite+0x1e>
 800664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006650:	2302      	movs	r3, #2
 8006652:	2200      	movs	r2, #0
 8006654:	f000 f852 	bl	80066fc <_lseek_r>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800665e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006662:	81a3      	strh	r3, [r4, #12]
 8006664:	4632      	mov	r2, r6
 8006666:	463b      	mov	r3, r7
 8006668:	4628      	mov	r0, r5
 800666a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	f000 b879 	b.w	8006764 <_write_r>

08006672 <__sseek>:
 8006672:	b510      	push	{r4, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667a:	f000 f83f 	bl	80066fc <_lseek_r>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	bf15      	itete	ne
 8006684:	6560      	strne	r0, [r4, #84]	; 0x54
 8006686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800668a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800668e:	81a3      	strheq	r3, [r4, #12]
 8006690:	bf18      	it	ne
 8006692:	81a3      	strhne	r3, [r4, #12]
 8006694:	bd10      	pop	{r4, pc}

08006696 <__sclose>:
 8006696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669a:	f000 b81f 	b.w	80066dc <_close_r>

0800669e <memset>:
 800669e:	4402      	add	r2, r0
 80066a0:	4603      	mov	r3, r0
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d100      	bne.n	80066a8 <memset+0xa>
 80066a6:	4770      	bx	lr
 80066a8:	f803 1b01 	strb.w	r1, [r3], #1
 80066ac:	e7f9      	b.n	80066a2 <memset+0x4>

080066ae <strncmp>:
 80066ae:	b510      	push	{r4, lr}
 80066b0:	b16a      	cbz	r2, 80066ce <strncmp+0x20>
 80066b2:	3901      	subs	r1, #1
 80066b4:	1884      	adds	r4, r0, r2
 80066b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80066be:	429a      	cmp	r2, r3
 80066c0:	d103      	bne.n	80066ca <strncmp+0x1c>
 80066c2:	42a0      	cmp	r0, r4
 80066c4:	d001      	beq.n	80066ca <strncmp+0x1c>
 80066c6:	2a00      	cmp	r2, #0
 80066c8:	d1f5      	bne.n	80066b6 <strncmp+0x8>
 80066ca:	1ad0      	subs	r0, r2, r3
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	4610      	mov	r0, r2
 80066d0:	e7fc      	b.n	80066cc <strncmp+0x1e>
	...

080066d4 <_localeconv_r>:
 80066d4:	4800      	ldr	r0, [pc, #0]	; (80066d8 <_localeconv_r+0x4>)
 80066d6:	4770      	bx	lr
 80066d8:	20000794 	.word	0x20000794

080066dc <_close_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_close_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa fdae 	bl	8001248 <_close>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_close_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_close_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20000b0c 	.word	0x20000b0c

080066fc <_lseek_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_lseek_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fa fda6 	bl	800125c <_lseek>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_lseek_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_lseek_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000b0c 	.word	0x20000b0c

08006720 <_read_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	; (8006740 <_read_r+0x20>)
 8006724:	4604      	mov	r4, r0
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	2200      	movs	r2, #0
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f7fa fd7c 	bl	800122c <_read>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_read_r+0x1e>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_read_r+0x1e>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	20000b0c 	.word	0x20000b0c

08006744 <_sbrk_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d06      	ldr	r5, [pc, #24]	; (8006760 <_sbrk_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa fd86 	bl	8001260 <_sbrk>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_sbrk_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_sbrk_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	20000b0c 	.word	0x20000b0c

08006764 <_write_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d07      	ldr	r5, [pc, #28]	; (8006784 <_write_r+0x20>)
 8006768:	4604      	mov	r4, r0
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fc f97e 	bl	8002a74 <_write>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_write_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_write_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000b0c 	.word	0x20000b0c

08006788 <__errno>:
 8006788:	4b01      	ldr	r3, [pc, #4]	; (8006790 <__errno+0x8>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	200006a0 	.word	0x200006a0

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4d0d      	ldr	r5, [pc, #52]	; (80067cc <__libc_init_array+0x38>)
 8006798:	4c0d      	ldr	r4, [pc, #52]	; (80067d0 <__libc_init_array+0x3c>)
 800679a:	1b64      	subs	r4, r4, r5
 800679c:	10a4      	asrs	r4, r4, #2
 800679e:	2600      	movs	r6, #0
 80067a0:	42a6      	cmp	r6, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	4d0b      	ldr	r5, [pc, #44]	; (80067d4 <__libc_init_array+0x40>)
 80067a6:	4c0c      	ldr	r4, [pc, #48]	; (80067d8 <__libc_init_array+0x44>)
 80067a8:	f001 fe96 	bl	80084d8 <_init>
 80067ac:	1b64      	subs	r4, r4, r5
 80067ae:	10a4      	asrs	r4, r4, #2
 80067b0:	2600      	movs	r6, #0
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067bc:	4798      	blx	r3
 80067be:	3601      	adds	r6, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c6:	4798      	blx	r3
 80067c8:	3601      	adds	r6, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	080099f0 	.word	0x080099f0
 80067d0:	080099f0 	.word	0x080099f0
 80067d4:	080099f0 	.word	0x080099f0
 80067d8:	080099f4 	.word	0x080099f4

080067dc <__retarget_lock_acquire_recursive>:
 80067dc:	4770      	bx	lr

080067de <__retarget_lock_release_recursive>:
 80067de:	4770      	bx	lr

080067e0 <memcpy>:
 80067e0:	440a      	add	r2, r1
 80067e2:	4291      	cmp	r1, r2
 80067e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e8:	d100      	bne.n	80067ec <memcpy+0xc>
 80067ea:	4770      	bx	lr
 80067ec:	b510      	push	{r4, lr}
 80067ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f6:	4291      	cmp	r1, r2
 80067f8:	d1f9      	bne.n	80067ee <memcpy+0xe>
 80067fa:	bd10      	pop	{r4, pc}

080067fc <__assert_func>:
 80067fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067fe:	4614      	mov	r4, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <__assert_func+0x2c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4605      	mov	r5, r0
 8006808:	68d8      	ldr	r0, [r3, #12]
 800680a:	b14c      	cbz	r4, 8006820 <__assert_func+0x24>
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <__assert_func+0x30>)
 800680e:	9100      	str	r1, [sp, #0]
 8006810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006814:	4906      	ldr	r1, [pc, #24]	; (8006830 <__assert_func+0x34>)
 8006816:	462b      	mov	r3, r5
 8006818:	f001 fa50 	bl	8007cbc <fiprintf>
 800681c:	f001 fa60 	bl	8007ce0 <abort>
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <__assert_func+0x38>)
 8006822:	461c      	mov	r4, r3
 8006824:	e7f3      	b.n	800680e <__assert_func+0x12>
 8006826:	bf00      	nop
 8006828:	200006a0 	.word	0x200006a0
 800682c:	08009692 	.word	0x08009692
 8006830:	0800969f 	.word	0x0800969f
 8006834:	08008540 	.word	0x08008540

08006838 <quorem>:
 8006838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	6903      	ldr	r3, [r0, #16]
 800683e:	690c      	ldr	r4, [r1, #16]
 8006840:	42a3      	cmp	r3, r4
 8006842:	4607      	mov	r7, r0
 8006844:	db7e      	blt.n	8006944 <quorem+0x10c>
 8006846:	3c01      	subs	r4, #1
 8006848:	f101 0814 	add.w	r8, r1, #20
 800684c:	f100 0514 	add.w	r5, r0, #20
 8006850:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800685a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800685e:	3301      	adds	r3, #1
 8006860:	429a      	cmp	r2, r3
 8006862:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006866:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800686a:	fbb2 f6f3 	udiv	r6, r2, r3
 800686e:	d331      	bcc.n	80068d4 <quorem+0x9c>
 8006870:	f04f 0e00 	mov.w	lr, #0
 8006874:	4640      	mov	r0, r8
 8006876:	46ac      	mov	ip, r5
 8006878:	46f2      	mov	sl, lr
 800687a:	f850 2b04 	ldr.w	r2, [r0], #4
 800687e:	b293      	uxth	r3, r2
 8006880:	fb06 e303 	mla	r3, r6, r3, lr
 8006884:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006888:	0c1a      	lsrs	r2, r3, #16
 800688a:	b29b      	uxth	r3, r3
 800688c:	ebaa 0303 	sub.w	r3, sl, r3
 8006890:	f8dc a000 	ldr.w	sl, [ip]
 8006894:	fa13 f38a 	uxtah	r3, r3, sl
 8006898:	fb06 220e 	mla	r2, r6, lr, r2
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068a4:	b292      	uxth	r2, r2
 80068a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80068b2:	4581      	cmp	r9, r0
 80068b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b8:	f84c 3b04 	str.w	r3, [ip], #4
 80068bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068c0:	d2db      	bcs.n	800687a <quorem+0x42>
 80068c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80068c6:	b92b      	cbnz	r3, 80068d4 <quorem+0x9c>
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	3b04      	subs	r3, #4
 80068cc:	429d      	cmp	r5, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	d32c      	bcc.n	800692c <quorem+0xf4>
 80068d2:	613c      	str	r4, [r7, #16]
 80068d4:	4638      	mov	r0, r7
 80068d6:	f001 f8f1 	bl	8007abc <__mcmp>
 80068da:	2800      	cmp	r0, #0
 80068dc:	db22      	blt.n	8006924 <quorem+0xec>
 80068de:	3601      	adds	r6, #1
 80068e0:	4629      	mov	r1, r5
 80068e2:	2000      	movs	r0, #0
 80068e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80068e8:	f8d1 c000 	ldr.w	ip, [r1]
 80068ec:	b293      	uxth	r3, r2
 80068ee:	1ac3      	subs	r3, r0, r3
 80068f0:	0c12      	lsrs	r2, r2, #16
 80068f2:	fa13 f38c 	uxtah	r3, r3, ip
 80068f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80068fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068fe:	b29b      	uxth	r3, r3
 8006900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006904:	45c1      	cmp	r9, r8
 8006906:	f841 3b04 	str.w	r3, [r1], #4
 800690a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800690e:	d2e9      	bcs.n	80068e4 <quorem+0xac>
 8006910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006918:	b922      	cbnz	r2, 8006924 <quorem+0xec>
 800691a:	3b04      	subs	r3, #4
 800691c:	429d      	cmp	r5, r3
 800691e:	461a      	mov	r2, r3
 8006920:	d30a      	bcc.n	8006938 <quorem+0x100>
 8006922:	613c      	str	r4, [r7, #16]
 8006924:	4630      	mov	r0, r6
 8006926:	b003      	add	sp, #12
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	3b04      	subs	r3, #4
 8006930:	2a00      	cmp	r2, #0
 8006932:	d1ce      	bne.n	80068d2 <quorem+0x9a>
 8006934:	3c01      	subs	r4, #1
 8006936:	e7c9      	b.n	80068cc <quorem+0x94>
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	3b04      	subs	r3, #4
 800693c:	2a00      	cmp	r2, #0
 800693e:	d1f0      	bne.n	8006922 <quorem+0xea>
 8006940:	3c01      	subs	r4, #1
 8006942:	e7eb      	b.n	800691c <quorem+0xe4>
 8006944:	2000      	movs	r0, #0
 8006946:	e7ee      	b.n	8006926 <quorem+0xee>

08006948 <_dtoa_r>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	ed2d 8b04 	vpush	{d8-d9}
 8006950:	69c5      	ldr	r5, [r0, #28]
 8006952:	b093      	sub	sp, #76	; 0x4c
 8006954:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006958:	ec57 6b10 	vmov	r6, r7, d0
 800695c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006960:	9107      	str	r1, [sp, #28]
 8006962:	4604      	mov	r4, r0
 8006964:	920a      	str	r2, [sp, #40]	; 0x28
 8006966:	930d      	str	r3, [sp, #52]	; 0x34
 8006968:	b975      	cbnz	r5, 8006988 <_dtoa_r+0x40>
 800696a:	2010      	movs	r0, #16
 800696c:	f7fc f8b4 	bl	8002ad8 <__wrap_malloc>
 8006970:	4602      	mov	r2, r0
 8006972:	61e0      	str	r0, [r4, #28]
 8006974:	b920      	cbnz	r0, 8006980 <_dtoa_r+0x38>
 8006976:	4bae      	ldr	r3, [pc, #696]	; (8006c30 <_dtoa_r+0x2e8>)
 8006978:	21ef      	movs	r1, #239	; 0xef
 800697a:	48ae      	ldr	r0, [pc, #696]	; (8006c34 <_dtoa_r+0x2ec>)
 800697c:	f7ff ff3e 	bl	80067fc <__assert_func>
 8006980:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006984:	6005      	str	r5, [r0, #0]
 8006986:	60c5      	str	r5, [r0, #12]
 8006988:	69e3      	ldr	r3, [r4, #28]
 800698a:	6819      	ldr	r1, [r3, #0]
 800698c:	b151      	cbz	r1, 80069a4 <_dtoa_r+0x5c>
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	604a      	str	r2, [r1, #4]
 8006992:	2301      	movs	r3, #1
 8006994:	4093      	lsls	r3, r2
 8006996:	608b      	str	r3, [r1, #8]
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fe53 	bl	8007644 <_Bfree>
 800699e:	69e3      	ldr	r3, [r4, #28]
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	1e3b      	subs	r3, r7, #0
 80069a6:	bfbb      	ittet	lt
 80069a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	9303      	strlt	r3, [sp, #12]
 80069ae:	2300      	movge	r3, #0
 80069b0:	2201      	movlt	r2, #1
 80069b2:	bfac      	ite	ge
 80069b4:	f8c8 3000 	strge.w	r3, [r8]
 80069b8:	f8c8 2000 	strlt.w	r2, [r8]
 80069bc:	4b9e      	ldr	r3, [pc, #632]	; (8006c38 <_dtoa_r+0x2f0>)
 80069be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80069c2:	ea33 0308 	bics.w	r3, r3, r8
 80069c6:	d11b      	bne.n	8006a00 <_dtoa_r+0xb8>
 80069c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80069d4:	4333      	orrs	r3, r6
 80069d6:	f000 8593 	beq.w	8007500 <_dtoa_r+0xbb8>
 80069da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069dc:	b963      	cbnz	r3, 80069f8 <_dtoa_r+0xb0>
 80069de:	4b97      	ldr	r3, [pc, #604]	; (8006c3c <_dtoa_r+0x2f4>)
 80069e0:	e027      	b.n	8006a32 <_dtoa_r+0xea>
 80069e2:	4b97      	ldr	r3, [pc, #604]	; (8006c40 <_dtoa_r+0x2f8>)
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	9800      	ldr	r0, [sp, #0]
 80069ee:	b013      	add	sp, #76	; 0x4c
 80069f0:	ecbd 8b04 	vpop	{d8-d9}
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	4b90      	ldr	r3, [pc, #576]	; (8006c3c <_dtoa_r+0x2f4>)
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	3303      	adds	r3, #3
 80069fe:	e7f3      	b.n	80069e8 <_dtoa_r+0xa0>
 8006a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a04:	2200      	movs	r2, #0
 8006a06:	ec51 0b17 	vmov	r0, r1, d7
 8006a0a:	eeb0 8a47 	vmov.f32	s16, s14
 8006a0e:	eef0 8a67 	vmov.f32	s17, s15
 8006a12:	2300      	movs	r3, #0
 8006a14:	f7fa f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a18:	4681      	mov	r9, r0
 8006a1a:	b160      	cbz	r0, 8006a36 <_dtoa_r+0xee>
 8006a1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a1e:	2301      	movs	r3, #1
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8568 	beq.w	80074fa <_dtoa_r+0xbb2>
 8006a2a:	4b86      	ldr	r3, [pc, #536]	; (8006c44 <_dtoa_r+0x2fc>)
 8006a2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	e7da      	b.n	80069ec <_dtoa_r+0xa4>
 8006a36:	aa10      	add	r2, sp, #64	; 0x40
 8006a38:	a911      	add	r1, sp, #68	; 0x44
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a40:	eef0 0a68 	vmov.f32	s1, s17
 8006a44:	f001 f8e0 	bl	8007c08 <__d2b>
 8006a48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a4c:	4682      	mov	sl, r0
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	d07f      	beq.n	8006b52 <_dtoa_r+0x20a>
 8006a52:	ee18 3a90 	vmov	r3, s17
 8006a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a5e:	ec51 0b18 	vmov	r0, r1, d8
 8006a62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006a6e:	4619      	mov	r1, r3
 8006a70:	2200      	movs	r2, #0
 8006a72:	4b75      	ldr	r3, [pc, #468]	; (8006c48 <_dtoa_r+0x300>)
 8006a74:	f7f9 fc08 	bl	8000288 <__aeabi_dsub>
 8006a78:	a367      	add	r3, pc, #412	; (adr r3, 8006c18 <_dtoa_r+0x2d0>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	a367      	add	r3, pc, #412	; (adr r3, 8006c20 <_dtoa_r+0x2d8>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fc00 	bl	800028c <__adddf3>
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	460f      	mov	r7, r1
 8006a92:	f7f9 fd47 	bl	8000524 <__aeabi_i2d>
 8006a96:	a364      	add	r3, pc, #400	; (adr r3, 8006c28 <_dtoa_r+0x2e0>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fdac 	bl	80005f8 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7f9 fbf0 	bl	800028c <__adddf3>
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	f7fa f852 	bl	8000b58 <__aeabi_d2iz>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4683      	mov	fp, r0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7fa f80d 	bl	8000adc <__aeabi_dcmplt>
 8006ac2:	b148      	cbz	r0, 8006ad8 <_dtoa_r+0x190>
 8006ac4:	4658      	mov	r0, fp
 8006ac6:	f7f9 fd2d 	bl	8000524 <__aeabi_i2d>
 8006aca:	4632      	mov	r2, r6
 8006acc:	463b      	mov	r3, r7
 8006ace:	f7f9 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad2:	b908      	cbnz	r0, 8006ad8 <_dtoa_r+0x190>
 8006ad4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ad8:	f1bb 0f16 	cmp.w	fp, #22
 8006adc:	d857      	bhi.n	8006b8e <_dtoa_r+0x246>
 8006ade:	4b5b      	ldr	r3, [pc, #364]	; (8006c4c <_dtoa_r+0x304>)
 8006ae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	ec51 0b18 	vmov	r0, r1, d8
 8006aec:	f7f9 fff6 	bl	8000adc <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d04e      	beq.n	8006b92 <_dtoa_r+0x24a>
 8006af4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006af8:	2300      	movs	r3, #0
 8006afa:	930c      	str	r3, [sp, #48]	; 0x30
 8006afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006afe:	1b5b      	subs	r3, r3, r5
 8006b00:	1e5a      	subs	r2, r3, #1
 8006b02:	bf45      	ittet	mi
 8006b04:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b08:	9305      	strmi	r3, [sp, #20]
 8006b0a:	2300      	movpl	r3, #0
 8006b0c:	2300      	movmi	r3, #0
 8006b0e:	9206      	str	r2, [sp, #24]
 8006b10:	bf54      	ite	pl
 8006b12:	9305      	strpl	r3, [sp, #20]
 8006b14:	9306      	strmi	r3, [sp, #24]
 8006b16:	f1bb 0f00 	cmp.w	fp, #0
 8006b1a:	db3c      	blt.n	8006b96 <_dtoa_r+0x24e>
 8006b1c:	9b06      	ldr	r3, [sp, #24]
 8006b1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b22:	445b      	add	r3, fp
 8006b24:	9306      	str	r3, [sp, #24]
 8006b26:	2300      	movs	r3, #0
 8006b28:	9308      	str	r3, [sp, #32]
 8006b2a:	9b07      	ldr	r3, [sp, #28]
 8006b2c:	2b09      	cmp	r3, #9
 8006b2e:	d868      	bhi.n	8006c02 <_dtoa_r+0x2ba>
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	bfc4      	itt	gt
 8006b34:	3b04      	subgt	r3, #4
 8006b36:	9307      	strgt	r3, [sp, #28]
 8006b38:	9b07      	ldr	r3, [sp, #28]
 8006b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006b3e:	bfcc      	ite	gt
 8006b40:	2500      	movgt	r5, #0
 8006b42:	2501      	movle	r5, #1
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	f200 8085 	bhi.w	8006c54 <_dtoa_r+0x30c>
 8006b4a:	e8df f003 	tbb	[pc, r3]
 8006b4e:	3b2e      	.short	0x3b2e
 8006b50:	5839      	.short	0x5839
 8006b52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b56:	441d      	add	r5, r3
 8006b58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	bfc1      	itttt	gt
 8006b60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b64:	fa08 f803 	lslgt.w	r8, r8, r3
 8006b68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006b6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b70:	bfd6      	itet	le
 8006b72:	f1c3 0320 	rsble	r3, r3, #32
 8006b76:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b7a:	fa06 f003 	lslle.w	r0, r6, r3
 8006b7e:	f7f9 fcc1 	bl	8000504 <__aeabi_ui2d>
 8006b82:	2201      	movs	r2, #1
 8006b84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b88:	3d01      	subs	r5, #1
 8006b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8006b8c:	e76f      	b.n	8006a6e <_dtoa_r+0x126>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e7b3      	b.n	8006afa <_dtoa_r+0x1b2>
 8006b92:	900c      	str	r0, [sp, #48]	; 0x30
 8006b94:	e7b2      	b.n	8006afc <_dtoa_r+0x1b4>
 8006b96:	9b05      	ldr	r3, [sp, #20]
 8006b98:	eba3 030b 	sub.w	r3, r3, fp
 8006b9c:	9305      	str	r3, [sp, #20]
 8006b9e:	f1cb 0300 	rsb	r3, fp, #0
 8006ba2:	9308      	str	r3, [sp, #32]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba8:	e7bf      	b.n	8006b2a <_dtoa_r+0x1e2>
 8006baa:	2300      	movs	r3, #0
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dc52      	bgt.n	8006c5a <_dtoa_r+0x312>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	920a      	str	r2, [sp, #40]	; 0x28
 8006bbe:	e00b      	b.n	8006bd8 <_dtoa_r+0x290>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7f3      	b.n	8006bac <_dtoa_r+0x264>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bca:	445b      	add	r3, fp
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	bfb8      	it	lt
 8006bd6:	2301      	movlt	r3, #1
 8006bd8:	69e0      	ldr	r0, [r4, #28]
 8006bda:	2100      	movs	r1, #0
 8006bdc:	2204      	movs	r2, #4
 8006bde:	f102 0614 	add.w	r6, r2, #20
 8006be2:	429e      	cmp	r6, r3
 8006be4:	d93d      	bls.n	8006c62 <_dtoa_r+0x31a>
 8006be6:	6041      	str	r1, [r0, #4]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fceb 	bl	80075c4 <_Balloc>
 8006bee:	9000      	str	r0, [sp, #0]
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d139      	bne.n	8006c68 <_dtoa_r+0x320>
 8006bf4:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <_dtoa_r+0x308>)
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	f240 11af 	movw	r1, #431	; 0x1af
 8006bfc:	e6bd      	b.n	800697a <_dtoa_r+0x32>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e7e1      	b.n	8006bc6 <_dtoa_r+0x27e>
 8006c02:	2501      	movs	r5, #1
 8006c04:	2300      	movs	r3, #0
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	9509      	str	r5, [sp, #36]	; 0x24
 8006c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2312      	movs	r3, #18
 8006c16:	e7d1      	b.n	8006bbc <_dtoa_r+0x274>
 8006c18:	636f4361 	.word	0x636f4361
 8006c1c:	3fd287a7 	.word	0x3fd287a7
 8006c20:	8b60c8b3 	.word	0x8b60c8b3
 8006c24:	3fc68a28 	.word	0x3fc68a28
 8006c28:	509f79fb 	.word	0x509f79fb
 8006c2c:	3fd34413 	.word	0x3fd34413
 8006c30:	080096db 	.word	0x080096db
 8006c34:	080096f2 	.word	0x080096f2
 8006c38:	7ff00000 	.word	0x7ff00000
 8006c3c:	080096d7 	.word	0x080096d7
 8006c40:	080096ce 	.word	0x080096ce
 8006c44:	08008667 	.word	0x08008667
 8006c48:	3ff80000 	.word	0x3ff80000
 8006c4c:	080097e0 	.word	0x080097e0
 8006c50:	0800974a 	.word	0x0800974a
 8006c54:	2301      	movs	r3, #1
 8006c56:	9309      	str	r3, [sp, #36]	; 0x24
 8006c58:	e7d7      	b.n	8006c0a <_dtoa_r+0x2c2>
 8006c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	9304      	str	r3, [sp, #16]
 8006c60:	e7ba      	b.n	8006bd8 <_dtoa_r+0x290>
 8006c62:	3101      	adds	r1, #1
 8006c64:	0052      	lsls	r2, r2, #1
 8006c66:	e7ba      	b.n	8006bde <_dtoa_r+0x296>
 8006c68:	69e3      	ldr	r3, [r4, #28]
 8006c6a:	9a00      	ldr	r2, [sp, #0]
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	2b0e      	cmp	r3, #14
 8006c72:	f200 80a8 	bhi.w	8006dc6 <_dtoa_r+0x47e>
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	f000 80a5 	beq.w	8006dc6 <_dtoa_r+0x47e>
 8006c7c:	f1bb 0f00 	cmp.w	fp, #0
 8006c80:	dd38      	ble.n	8006cf4 <_dtoa_r+0x3ac>
 8006c82:	4bc0      	ldr	r3, [pc, #768]	; (8006f84 <_dtoa_r+0x63c>)
 8006c84:	f00b 020f 	and.w	r2, fp, #15
 8006c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006c98:	d019      	beq.n	8006cce <_dtoa_r+0x386>
 8006c9a:	4bbb      	ldr	r3, [pc, #748]	; (8006f88 <_dtoa_r+0x640>)
 8006c9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ca0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ca4:	f7f9 fdd2 	bl	800084c <__aeabi_ddiv>
 8006ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cac:	f008 080f 	and.w	r8, r8, #15
 8006cb0:	2503      	movs	r5, #3
 8006cb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006f88 <_dtoa_r+0x640>
 8006cb6:	f1b8 0f00 	cmp.w	r8, #0
 8006cba:	d10a      	bne.n	8006cd2 <_dtoa_r+0x38a>
 8006cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	f7f9 fdc2 	bl	800084c <__aeabi_ddiv>
 8006cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ccc:	e02b      	b.n	8006d26 <_dtoa_r+0x3de>
 8006cce:	2502      	movs	r5, #2
 8006cd0:	e7ef      	b.n	8006cb2 <_dtoa_r+0x36a>
 8006cd2:	f018 0f01 	tst.w	r8, #1
 8006cd6:	d008      	beq.n	8006cea <_dtoa_r+0x3a2>
 8006cd8:	4630      	mov	r0, r6
 8006cda:	4639      	mov	r1, r7
 8006cdc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ce0:	f7f9 fc8a 	bl	80005f8 <__aeabi_dmul>
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cee:	f109 0908 	add.w	r9, r9, #8
 8006cf2:	e7e0      	b.n	8006cb6 <_dtoa_r+0x36e>
 8006cf4:	f000 809f 	beq.w	8006e36 <_dtoa_r+0x4ee>
 8006cf8:	f1cb 0600 	rsb	r6, fp, #0
 8006cfc:	4ba1      	ldr	r3, [pc, #644]	; (8006f84 <_dtoa_r+0x63c>)
 8006cfe:	4fa2      	ldr	r7, [pc, #648]	; (8006f88 <_dtoa_r+0x640>)
 8006d00:	f006 020f 	and.w	r2, r6, #15
 8006d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	ec51 0b18 	vmov	r0, r1, d8
 8006d10:	f7f9 fc72 	bl	80005f8 <__aeabi_dmul>
 8006d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d18:	1136      	asrs	r6, r6, #4
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2502      	movs	r5, #2
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	d17e      	bne.n	8006e20 <_dtoa_r+0x4d8>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1d0      	bne.n	8006cc8 <_dtoa_r+0x380>
 8006d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8084 	beq.w	8006e3a <_dtoa_r+0x4f2>
 8006d32:	4b96      	ldr	r3, [pc, #600]	; (8006f8c <_dtoa_r+0x644>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7f9 fecf 	bl	8000adc <__aeabi_dcmplt>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d07b      	beq.n	8006e3a <_dtoa_r+0x4f2>
 8006d42:	9b04      	ldr	r3, [sp, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d078      	beq.n	8006e3a <_dtoa_r+0x4f2>
 8006d48:	9b01      	ldr	r3, [sp, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dd39      	ble.n	8006dc2 <_dtoa_r+0x47a>
 8006d4e:	4b90      	ldr	r3, [pc, #576]	; (8006f90 <_dtoa_r+0x648>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	4640      	mov	r0, r8
 8006d54:	4649      	mov	r1, r9
 8006d56:	f7f9 fc4f 	bl	80005f8 <__aeabi_dmul>
 8006d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5e:	9e01      	ldr	r6, [sp, #4]
 8006d60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006d64:	3501      	adds	r5, #1
 8006d66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7f9 fbda 	bl	8000524 <__aeabi_i2d>
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	4b86      	ldr	r3, [pc, #536]	; (8006f94 <_dtoa_r+0x64c>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f7f9 fa86 	bl	800028c <__adddf3>
 8006d80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d88:	9303      	str	r3, [sp, #12]
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d158      	bne.n	8006e40 <_dtoa_r+0x4f8>
 8006d8e:	4b82      	ldr	r3, [pc, #520]	; (8006f98 <_dtoa_r+0x650>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	4640      	mov	r0, r8
 8006d94:	4649      	mov	r1, r9
 8006d96:	f7f9 fa77 	bl	8000288 <__aeabi_dsub>
 8006d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d9e:	4680      	mov	r8, r0
 8006da0:	4689      	mov	r9, r1
 8006da2:	f7f9 feb9 	bl	8000b18 <__aeabi_dcmpgt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f040 8296 	bne.w	80072d8 <_dtoa_r+0x990>
 8006dac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006db0:	4640      	mov	r0, r8
 8006db2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006db6:	4649      	mov	r1, r9
 8006db8:	f7f9 fe90 	bl	8000adc <__aeabi_dcmplt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 8289 	bne.w	80072d4 <_dtoa_r+0x98c>
 8006dc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f2c0 814e 	blt.w	800706a <_dtoa_r+0x722>
 8006dce:	f1bb 0f0e 	cmp.w	fp, #14
 8006dd2:	f300 814a 	bgt.w	800706a <_dtoa_r+0x722>
 8006dd6:	4b6b      	ldr	r3, [pc, #428]	; (8006f84 <_dtoa_r+0x63c>)
 8006dd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f280 80dc 	bge.w	8006fa0 <_dtoa_r+0x658>
 8006de8:	9b04      	ldr	r3, [sp, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f300 80d8 	bgt.w	8006fa0 <_dtoa_r+0x658>
 8006df0:	f040 826f 	bne.w	80072d2 <_dtoa_r+0x98a>
 8006df4:	4b68      	ldr	r3, [pc, #416]	; (8006f98 <_dtoa_r+0x650>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	4640      	mov	r0, r8
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	f7f9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8006e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e04:	f7f9 fe7e 	bl	8000b04 <__aeabi_dcmpge>
 8006e08:	9e04      	ldr	r6, [sp, #16]
 8006e0a:	4637      	mov	r7, r6
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f040 8245 	bne.w	800729c <_dtoa_r+0x954>
 8006e12:	9d00      	ldr	r5, [sp, #0]
 8006e14:	2331      	movs	r3, #49	; 0x31
 8006e16:	f805 3b01 	strb.w	r3, [r5], #1
 8006e1a:	f10b 0b01 	add.w	fp, fp, #1
 8006e1e:	e241      	b.n	80072a4 <_dtoa_r+0x95c>
 8006e20:	07f2      	lsls	r2, r6, #31
 8006e22:	d505      	bpl.n	8006e30 <_dtoa_r+0x4e8>
 8006e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e28:	f7f9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	2301      	movs	r3, #1
 8006e30:	1076      	asrs	r6, r6, #1
 8006e32:	3708      	adds	r7, #8
 8006e34:	e773      	b.n	8006d1e <_dtoa_r+0x3d6>
 8006e36:	2502      	movs	r5, #2
 8006e38:	e775      	b.n	8006d26 <_dtoa_r+0x3de>
 8006e3a:	9e04      	ldr	r6, [sp, #16]
 8006e3c:	465f      	mov	r7, fp
 8006e3e:	e792      	b.n	8006d66 <_dtoa_r+0x41e>
 8006e40:	9900      	ldr	r1, [sp, #0]
 8006e42:	4b50      	ldr	r3, [pc, #320]	; (8006f84 <_dtoa_r+0x63c>)
 8006e44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e48:	4431      	add	r1, r6
 8006e4a:	9102      	str	r1, [sp, #8]
 8006e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e4e:	eeb0 9a47 	vmov.f32	s18, s14
 8006e52:	eef0 9a67 	vmov.f32	s19, s15
 8006e56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	d044      	beq.n	8006eec <_dtoa_r+0x5a4>
 8006e62:	494e      	ldr	r1, [pc, #312]	; (8006f9c <_dtoa_r+0x654>)
 8006e64:	2000      	movs	r0, #0
 8006e66:	f7f9 fcf1 	bl	800084c <__aeabi_ddiv>
 8006e6a:	ec53 2b19 	vmov	r2, r3, d9
 8006e6e:	f7f9 fa0b 	bl	8000288 <__aeabi_dsub>
 8006e72:	9d00      	ldr	r5, [sp, #0]
 8006e74:	ec41 0b19 	vmov	d9, r0, r1
 8006e78:	4649      	mov	r1, r9
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7f9 fe6c 	bl	8000b58 <__aeabi_d2iz>
 8006e80:	4606      	mov	r6, r0
 8006e82:	f7f9 fb4f 	bl	8000524 <__aeabi_i2d>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 f9fb 	bl	8000288 <__aeabi_dsub>
 8006e92:	3630      	adds	r6, #48	; 0x30
 8006e94:	f805 6b01 	strb.w	r6, [r5], #1
 8006e98:	ec53 2b19 	vmov	r2, r3, d9
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4689      	mov	r9, r1
 8006ea0:	f7f9 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d164      	bne.n	8006f72 <_dtoa_r+0x62a>
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	4937      	ldr	r1, [pc, #220]	; (8006f8c <_dtoa_r+0x644>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7f9 f9ea 	bl	8000288 <__aeabi_dsub>
 8006eb4:	ec53 2b19 	vmov	r2, r3, d9
 8006eb8:	f7f9 fe10 	bl	8000adc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f040 80b6 	bne.w	800702e <_dtoa_r+0x6e6>
 8006ec2:	9b02      	ldr	r3, [sp, #8]
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	f43f af7c 	beq.w	8006dc2 <_dtoa_r+0x47a>
 8006eca:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <_dtoa_r+0x648>)
 8006ecc:	ec51 0b19 	vmov	r0, r1, d9
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f7f9 fb91 	bl	80005f8 <__aeabi_dmul>
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <_dtoa_r+0x648>)
 8006ed8:	ec41 0b19 	vmov	d9, r0, r1
 8006edc:	2200      	movs	r2, #0
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 fb89 	bl	80005f8 <__aeabi_dmul>
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	4689      	mov	r9, r1
 8006eea:	e7c5      	b.n	8006e78 <_dtoa_r+0x530>
 8006eec:	ec51 0b17 	vmov	r0, r1, d7
 8006ef0:	f7f9 fb82 	bl	80005f8 <__aeabi_dmul>
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	9d00      	ldr	r5, [sp, #0]
 8006ef8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006efa:	ec41 0b19 	vmov	d9, r0, r1
 8006efe:	4649      	mov	r1, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	f7f9 fe29 	bl	8000b58 <__aeabi_d2iz>
 8006f06:	4606      	mov	r6, r0
 8006f08:	f7f9 fb0c 	bl	8000524 <__aeabi_i2d>
 8006f0c:	3630      	adds	r6, #48	; 0x30
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4640      	mov	r0, r8
 8006f14:	4649      	mov	r1, r9
 8006f16:	f7f9 f9b7 	bl	8000288 <__aeabi_dsub>
 8006f1a:	f805 6b01 	strb.w	r6, [r5], #1
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	429d      	cmp	r5, r3
 8006f22:	4680      	mov	r8, r0
 8006f24:	4689      	mov	r9, r1
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	d124      	bne.n	8006f76 <_dtoa_r+0x62e>
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <_dtoa_r+0x654>)
 8006f2e:	ec51 0b19 	vmov	r0, r1, d9
 8006f32:	f7f9 f9ab 	bl	800028c <__adddf3>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d173      	bne.n	800702e <_dtoa_r+0x6e6>
 8006f46:	ec53 2b19 	vmov	r2, r3, d9
 8006f4a:	4914      	ldr	r1, [pc, #80]	; (8006f9c <_dtoa_r+0x654>)
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	f7f9 f99b 	bl	8000288 <__aeabi_dsub>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f43f af2f 	beq.w	8006dc2 <_dtoa_r+0x47a>
 8006f64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f66:	1e6b      	subs	r3, r5, #1
 8006f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f6e:	2b30      	cmp	r3, #48	; 0x30
 8006f70:	d0f8      	beq.n	8006f64 <_dtoa_r+0x61c>
 8006f72:	46bb      	mov	fp, r7
 8006f74:	e04a      	b.n	800700c <_dtoa_r+0x6c4>
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <_dtoa_r+0x648>)
 8006f78:	f7f9 fb3e 	bl	80005f8 <__aeabi_dmul>
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4689      	mov	r9, r1
 8006f80:	e7bd      	b.n	8006efe <_dtoa_r+0x5b6>
 8006f82:	bf00      	nop
 8006f84:	080097e0 	.word	0x080097e0
 8006f88:	080097b8 	.word	0x080097b8
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	40240000 	.word	0x40240000
 8006f94:	401c0000 	.word	0x401c0000
 8006f98:	40140000 	.word	0x40140000
 8006f9c:	3fe00000 	.word	0x3fe00000
 8006fa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fa4:	9d00      	ldr	r5, [sp, #0]
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	464b      	mov	r3, r9
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 fc4d 	bl	800084c <__aeabi_ddiv>
 8006fb2:	f7f9 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8006fb6:	9001      	str	r0, [sp, #4]
 8006fb8:	f7f9 fab4 	bl	8000524 <__aeabi_i2d>
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f7f9 fb1a 	bl	80005f8 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 f95c 	bl	8000288 <__aeabi_dsub>
 8006fd0:	9e01      	ldr	r6, [sp, #4]
 8006fd2:	9f04      	ldr	r7, [sp, #16]
 8006fd4:	3630      	adds	r6, #48	; 0x30
 8006fd6:	f805 6b01 	strb.w	r6, [r5], #1
 8006fda:	9e00      	ldr	r6, [sp, #0]
 8006fdc:	1bae      	subs	r6, r5, r6
 8006fde:	42b7      	cmp	r7, r6
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	d134      	bne.n	8007050 <_dtoa_r+0x708>
 8006fe6:	f7f9 f951 	bl	800028c <__adddf3>
 8006fea:	4642      	mov	r2, r8
 8006fec:	464b      	mov	r3, r9
 8006fee:	4606      	mov	r6, r0
 8006ff0:	460f      	mov	r7, r1
 8006ff2:	f7f9 fd91 	bl	8000b18 <__aeabi_dcmpgt>
 8006ff6:	b9c8      	cbnz	r0, 800702c <_dtoa_r+0x6e4>
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8007004:	b110      	cbz	r0, 800700c <_dtoa_r+0x6c4>
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	07db      	lsls	r3, r3, #31
 800700a:	d40f      	bmi.n	800702c <_dtoa_r+0x6e4>
 800700c:	4651      	mov	r1, sl
 800700e:	4620      	mov	r0, r4
 8007010:	f000 fb18 	bl	8007644 <_Bfree>
 8007014:	2300      	movs	r3, #0
 8007016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007018:	702b      	strb	r3, [r5, #0]
 800701a:	f10b 0301 	add.w	r3, fp, #1
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007022:	2b00      	cmp	r3, #0
 8007024:	f43f ace2 	beq.w	80069ec <_dtoa_r+0xa4>
 8007028:	601d      	str	r5, [r3, #0]
 800702a:	e4df      	b.n	80069ec <_dtoa_r+0xa4>
 800702c:	465f      	mov	r7, fp
 800702e:	462b      	mov	r3, r5
 8007030:	461d      	mov	r5, r3
 8007032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007036:	2a39      	cmp	r2, #57	; 0x39
 8007038:	d106      	bne.n	8007048 <_dtoa_r+0x700>
 800703a:	9a00      	ldr	r2, [sp, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d1f7      	bne.n	8007030 <_dtoa_r+0x6e8>
 8007040:	9900      	ldr	r1, [sp, #0]
 8007042:	2230      	movs	r2, #48	; 0x30
 8007044:	3701      	adds	r7, #1
 8007046:	700a      	strb	r2, [r1, #0]
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	3201      	adds	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e790      	b.n	8006f72 <_dtoa_r+0x62a>
 8007050:	4ba3      	ldr	r3, [pc, #652]	; (80072e0 <_dtoa_r+0x998>)
 8007052:	2200      	movs	r2, #0
 8007054:	f7f9 fad0 	bl	80005f8 <__aeabi_dmul>
 8007058:	2200      	movs	r2, #0
 800705a:	2300      	movs	r3, #0
 800705c:	4606      	mov	r6, r0
 800705e:	460f      	mov	r7, r1
 8007060:	f7f9 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007064:	2800      	cmp	r0, #0
 8007066:	d09e      	beq.n	8006fa6 <_dtoa_r+0x65e>
 8007068:	e7d0      	b.n	800700c <_dtoa_r+0x6c4>
 800706a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800706c:	2a00      	cmp	r2, #0
 800706e:	f000 80ca 	beq.w	8007206 <_dtoa_r+0x8be>
 8007072:	9a07      	ldr	r2, [sp, #28]
 8007074:	2a01      	cmp	r2, #1
 8007076:	f300 80ad 	bgt.w	80071d4 <_dtoa_r+0x88c>
 800707a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800707c:	2a00      	cmp	r2, #0
 800707e:	f000 80a5 	beq.w	80071cc <_dtoa_r+0x884>
 8007082:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007086:	9e08      	ldr	r6, [sp, #32]
 8007088:	9d05      	ldr	r5, [sp, #20]
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	441a      	add	r2, r3
 800708e:	9205      	str	r2, [sp, #20]
 8007090:	9a06      	ldr	r2, [sp, #24]
 8007092:	2101      	movs	r1, #1
 8007094:	441a      	add	r2, r3
 8007096:	4620      	mov	r0, r4
 8007098:	9206      	str	r2, [sp, #24]
 800709a:	f000 fb89 	bl	80077b0 <__i2b>
 800709e:	4607      	mov	r7, r0
 80070a0:	b165      	cbz	r5, 80070bc <_dtoa_r+0x774>
 80070a2:	9b06      	ldr	r3, [sp, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd09      	ble.n	80070bc <_dtoa_r+0x774>
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	9a05      	ldr	r2, [sp, #20]
 80070ac:	bfa8      	it	ge
 80070ae:	462b      	movge	r3, r5
 80070b0:	1ad2      	subs	r2, r2, r3
 80070b2:	9205      	str	r2, [sp, #20]
 80070b4:	9a06      	ldr	r2, [sp, #24]
 80070b6:	1aed      	subs	r5, r5, r3
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	9306      	str	r3, [sp, #24]
 80070bc:	9b08      	ldr	r3, [sp, #32]
 80070be:	b1f3      	cbz	r3, 80070fe <_dtoa_r+0x7b6>
 80070c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80a3 	beq.w	800720e <_dtoa_r+0x8c6>
 80070c8:	2e00      	cmp	r6, #0
 80070ca:	dd10      	ble.n	80070ee <_dtoa_r+0x7a6>
 80070cc:	4639      	mov	r1, r7
 80070ce:	4632      	mov	r2, r6
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fc2d 	bl	8007930 <__pow5mult>
 80070d6:	4652      	mov	r2, sl
 80070d8:	4601      	mov	r1, r0
 80070da:	4607      	mov	r7, r0
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fb7d 	bl	80077dc <__multiply>
 80070e2:	4651      	mov	r1, sl
 80070e4:	4680      	mov	r8, r0
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 faac 	bl	8007644 <_Bfree>
 80070ec:	46c2      	mov	sl, r8
 80070ee:	9b08      	ldr	r3, [sp, #32]
 80070f0:	1b9a      	subs	r2, r3, r6
 80070f2:	d004      	beq.n	80070fe <_dtoa_r+0x7b6>
 80070f4:	4651      	mov	r1, sl
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fc1a 	bl	8007930 <__pow5mult>
 80070fc:	4682      	mov	sl, r0
 80070fe:	2101      	movs	r1, #1
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fb55 	bl	80077b0 <__i2b>
 8007106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	4606      	mov	r6, r0
 800710c:	f340 8081 	ble.w	8007212 <_dtoa_r+0x8ca>
 8007110:	461a      	mov	r2, r3
 8007112:	4601      	mov	r1, r0
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fc0b 	bl	8007930 <__pow5mult>
 800711a:	9b07      	ldr	r3, [sp, #28]
 800711c:	2b01      	cmp	r3, #1
 800711e:	4606      	mov	r6, r0
 8007120:	dd7a      	ble.n	8007218 <_dtoa_r+0x8d0>
 8007122:	f04f 0800 	mov.w	r8, #0
 8007126:	6933      	ldr	r3, [r6, #16]
 8007128:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800712c:	6918      	ldr	r0, [r3, #16]
 800712e:	f000 faf1 	bl	8007714 <__hi0bits>
 8007132:	f1c0 0020 	rsb	r0, r0, #32
 8007136:	9b06      	ldr	r3, [sp, #24]
 8007138:	4418      	add	r0, r3
 800713a:	f010 001f 	ands.w	r0, r0, #31
 800713e:	f000 8094 	beq.w	800726a <_dtoa_r+0x922>
 8007142:	f1c0 0320 	rsb	r3, r0, #32
 8007146:	2b04      	cmp	r3, #4
 8007148:	f340 8085 	ble.w	8007256 <_dtoa_r+0x90e>
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	f1c0 001c 	rsb	r0, r0, #28
 8007152:	4403      	add	r3, r0
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	4403      	add	r3, r0
 800715a:	4405      	add	r5, r0
 800715c:	9306      	str	r3, [sp, #24]
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	dd05      	ble.n	8007170 <_dtoa_r+0x828>
 8007164:	4651      	mov	r1, sl
 8007166:	461a      	mov	r2, r3
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fc3b 	bl	80079e4 <__lshift>
 800716e:	4682      	mov	sl, r0
 8007170:	9b06      	ldr	r3, [sp, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	dd05      	ble.n	8007182 <_dtoa_r+0x83a>
 8007176:	4631      	mov	r1, r6
 8007178:	461a      	mov	r2, r3
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fc32 	bl	80079e4 <__lshift>
 8007180:	4606      	mov	r6, r0
 8007182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007184:	2b00      	cmp	r3, #0
 8007186:	d072      	beq.n	800726e <_dtoa_r+0x926>
 8007188:	4631      	mov	r1, r6
 800718a:	4650      	mov	r0, sl
 800718c:	f000 fc96 	bl	8007abc <__mcmp>
 8007190:	2800      	cmp	r0, #0
 8007192:	da6c      	bge.n	800726e <_dtoa_r+0x926>
 8007194:	2300      	movs	r3, #0
 8007196:	4651      	mov	r1, sl
 8007198:	220a      	movs	r2, #10
 800719a:	4620      	mov	r0, r4
 800719c:	f000 fa74 	bl	8007688 <__multadd>
 80071a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071a6:	4682      	mov	sl, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 81b0 	beq.w	800750e <_dtoa_r+0xbc6>
 80071ae:	2300      	movs	r3, #0
 80071b0:	4639      	mov	r1, r7
 80071b2:	220a      	movs	r2, #10
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fa67 	bl	8007688 <__multadd>
 80071ba:	9b01      	ldr	r3, [sp, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	4607      	mov	r7, r0
 80071c0:	f300 8096 	bgt.w	80072f0 <_dtoa_r+0x9a8>
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dc59      	bgt.n	800727e <_dtoa_r+0x936>
 80071ca:	e091      	b.n	80072f0 <_dtoa_r+0x9a8>
 80071cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071d2:	e758      	b.n	8007086 <_dtoa_r+0x73e>
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	1e5e      	subs	r6, r3, #1
 80071d8:	9b08      	ldr	r3, [sp, #32]
 80071da:	42b3      	cmp	r3, r6
 80071dc:	bfbf      	itttt	lt
 80071de:	9b08      	ldrlt	r3, [sp, #32]
 80071e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80071e2:	9608      	strlt	r6, [sp, #32]
 80071e4:	1af3      	sublt	r3, r6, r3
 80071e6:	bfb4      	ite	lt
 80071e8:	18d2      	addlt	r2, r2, r3
 80071ea:	1b9e      	subge	r6, r3, r6
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	bfbc      	itt	lt
 80071f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80071f2:	2600      	movlt	r6, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfb7      	itett	lt
 80071f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80071fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007200:	1a9d      	sublt	r5, r3, r2
 8007202:	2300      	movlt	r3, #0
 8007204:	e741      	b.n	800708a <_dtoa_r+0x742>
 8007206:	9e08      	ldr	r6, [sp, #32]
 8007208:	9d05      	ldr	r5, [sp, #20]
 800720a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800720c:	e748      	b.n	80070a0 <_dtoa_r+0x758>
 800720e:	9a08      	ldr	r2, [sp, #32]
 8007210:	e770      	b.n	80070f4 <_dtoa_r+0x7ac>
 8007212:	9b07      	ldr	r3, [sp, #28]
 8007214:	2b01      	cmp	r3, #1
 8007216:	dc19      	bgt.n	800724c <_dtoa_r+0x904>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	b9bb      	cbnz	r3, 800724c <_dtoa_r+0x904>
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007222:	b99b      	cbnz	r3, 800724c <_dtoa_r+0x904>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800722a:	0d1b      	lsrs	r3, r3, #20
 800722c:	051b      	lsls	r3, r3, #20
 800722e:	b183      	cbz	r3, 8007252 <_dtoa_r+0x90a>
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	3301      	adds	r3, #1
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	3301      	adds	r3, #1
 800723a:	9306      	str	r3, [sp, #24]
 800723c:	f04f 0801 	mov.w	r8, #1
 8007240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007242:	2b00      	cmp	r3, #0
 8007244:	f47f af6f 	bne.w	8007126 <_dtoa_r+0x7de>
 8007248:	2001      	movs	r0, #1
 800724a:	e774      	b.n	8007136 <_dtoa_r+0x7ee>
 800724c:	f04f 0800 	mov.w	r8, #0
 8007250:	e7f6      	b.n	8007240 <_dtoa_r+0x8f8>
 8007252:	4698      	mov	r8, r3
 8007254:	e7f4      	b.n	8007240 <_dtoa_r+0x8f8>
 8007256:	d082      	beq.n	800715e <_dtoa_r+0x816>
 8007258:	9a05      	ldr	r2, [sp, #20]
 800725a:	331c      	adds	r3, #28
 800725c:	441a      	add	r2, r3
 800725e:	9205      	str	r2, [sp, #20]
 8007260:	9a06      	ldr	r2, [sp, #24]
 8007262:	441a      	add	r2, r3
 8007264:	441d      	add	r5, r3
 8007266:	9206      	str	r2, [sp, #24]
 8007268:	e779      	b.n	800715e <_dtoa_r+0x816>
 800726a:	4603      	mov	r3, r0
 800726c:	e7f4      	b.n	8007258 <_dtoa_r+0x910>
 800726e:	9b04      	ldr	r3, [sp, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	dc37      	bgt.n	80072e4 <_dtoa_r+0x99c>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	2b02      	cmp	r3, #2
 8007278:	dd34      	ble.n	80072e4 <_dtoa_r+0x99c>
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	b963      	cbnz	r3, 800729c <_dtoa_r+0x954>
 8007282:	4631      	mov	r1, r6
 8007284:	2205      	movs	r2, #5
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f9fe 	bl	8007688 <__multadd>
 800728c:	4601      	mov	r1, r0
 800728e:	4606      	mov	r6, r0
 8007290:	4650      	mov	r0, sl
 8007292:	f000 fc13 	bl	8007abc <__mcmp>
 8007296:	2800      	cmp	r0, #0
 8007298:	f73f adbb 	bgt.w	8006e12 <_dtoa_r+0x4ca>
 800729c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729e:	9d00      	ldr	r5, [sp, #0]
 80072a0:	ea6f 0b03 	mvn.w	fp, r3
 80072a4:	f04f 0800 	mov.w	r8, #0
 80072a8:	4631      	mov	r1, r6
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 f9ca 	bl	8007644 <_Bfree>
 80072b0:	2f00      	cmp	r7, #0
 80072b2:	f43f aeab 	beq.w	800700c <_dtoa_r+0x6c4>
 80072b6:	f1b8 0f00 	cmp.w	r8, #0
 80072ba:	d005      	beq.n	80072c8 <_dtoa_r+0x980>
 80072bc:	45b8      	cmp	r8, r7
 80072be:	d003      	beq.n	80072c8 <_dtoa_r+0x980>
 80072c0:	4641      	mov	r1, r8
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f9be 	bl	8007644 <_Bfree>
 80072c8:	4639      	mov	r1, r7
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f9ba 	bl	8007644 <_Bfree>
 80072d0:	e69c      	b.n	800700c <_dtoa_r+0x6c4>
 80072d2:	2600      	movs	r6, #0
 80072d4:	4637      	mov	r7, r6
 80072d6:	e7e1      	b.n	800729c <_dtoa_r+0x954>
 80072d8:	46bb      	mov	fp, r7
 80072da:	4637      	mov	r7, r6
 80072dc:	e599      	b.n	8006e12 <_dtoa_r+0x4ca>
 80072de:	bf00      	nop
 80072e0:	40240000 	.word	0x40240000
 80072e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80c8 	beq.w	800747c <_dtoa_r+0xb34>
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	dd05      	ble.n	8007300 <_dtoa_r+0x9b8>
 80072f4:	4639      	mov	r1, r7
 80072f6:	462a      	mov	r2, r5
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 fb73 	bl	80079e4 <__lshift>
 80072fe:	4607      	mov	r7, r0
 8007300:	f1b8 0f00 	cmp.w	r8, #0
 8007304:	d05b      	beq.n	80073be <_dtoa_r+0xa76>
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4620      	mov	r0, r4
 800730a:	f000 f95b 	bl	80075c4 <_Balloc>
 800730e:	4605      	mov	r5, r0
 8007310:	b928      	cbnz	r0, 800731e <_dtoa_r+0x9d6>
 8007312:	4b83      	ldr	r3, [pc, #524]	; (8007520 <_dtoa_r+0xbd8>)
 8007314:	4602      	mov	r2, r0
 8007316:	f240 21ef 	movw	r1, #751	; 0x2ef
 800731a:	f7ff bb2e 	b.w	800697a <_dtoa_r+0x32>
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	3202      	adds	r2, #2
 8007322:	0092      	lsls	r2, r2, #2
 8007324:	f107 010c 	add.w	r1, r7, #12
 8007328:	300c      	adds	r0, #12
 800732a:	f7ff fa59 	bl	80067e0 <memcpy>
 800732e:	2201      	movs	r2, #1
 8007330:	4629      	mov	r1, r5
 8007332:	4620      	mov	r0, r4
 8007334:	f000 fb56 	bl	80079e4 <__lshift>
 8007338:	9b00      	ldr	r3, [sp, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007342:	4413      	add	r3, r2
 8007344:	9308      	str	r3, [sp, #32]
 8007346:	9b02      	ldr	r3, [sp, #8]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	46b8      	mov	r8, r7
 800734e:	9306      	str	r3, [sp, #24]
 8007350:	4607      	mov	r7, r0
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	4631      	mov	r1, r6
 8007356:	3b01      	subs	r3, #1
 8007358:	4650      	mov	r0, sl
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f7ff fa6c 	bl	8006838 <quorem>
 8007360:	4641      	mov	r1, r8
 8007362:	9002      	str	r0, [sp, #8]
 8007364:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007368:	4650      	mov	r0, sl
 800736a:	f000 fba7 	bl	8007abc <__mcmp>
 800736e:	463a      	mov	r2, r7
 8007370:	9005      	str	r0, [sp, #20]
 8007372:	4631      	mov	r1, r6
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fbbd 	bl	8007af4 <__mdiff>
 800737a:	68c2      	ldr	r2, [r0, #12]
 800737c:	4605      	mov	r5, r0
 800737e:	bb02      	cbnz	r2, 80073c2 <_dtoa_r+0xa7a>
 8007380:	4601      	mov	r1, r0
 8007382:	4650      	mov	r0, sl
 8007384:	f000 fb9a 	bl	8007abc <__mcmp>
 8007388:	4602      	mov	r2, r0
 800738a:	4629      	mov	r1, r5
 800738c:	4620      	mov	r0, r4
 800738e:	9209      	str	r2, [sp, #36]	; 0x24
 8007390:	f000 f958 	bl	8007644 <_Bfree>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007398:	9d04      	ldr	r5, [sp, #16]
 800739a:	ea43 0102 	orr.w	r1, r3, r2
 800739e:	9b06      	ldr	r3, [sp, #24]
 80073a0:	4319      	orrs	r1, r3
 80073a2:	d110      	bne.n	80073c6 <_dtoa_r+0xa7e>
 80073a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073a8:	d029      	beq.n	80073fe <_dtoa_r+0xab6>
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd02      	ble.n	80073b6 <_dtoa_r+0xa6e>
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	f883 9000 	strb.w	r9, [r3]
 80073bc:	e774      	b.n	80072a8 <_dtoa_r+0x960>
 80073be:	4638      	mov	r0, r7
 80073c0:	e7ba      	b.n	8007338 <_dtoa_r+0x9f0>
 80073c2:	2201      	movs	r2, #1
 80073c4:	e7e1      	b.n	800738a <_dtoa_r+0xa42>
 80073c6:	9b05      	ldr	r3, [sp, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	db04      	blt.n	80073d6 <_dtoa_r+0xa8e>
 80073cc:	9907      	ldr	r1, [sp, #28]
 80073ce:	430b      	orrs	r3, r1
 80073d0:	9906      	ldr	r1, [sp, #24]
 80073d2:	430b      	orrs	r3, r1
 80073d4:	d120      	bne.n	8007418 <_dtoa_r+0xad0>
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	dded      	ble.n	80073b6 <_dtoa_r+0xa6e>
 80073da:	4651      	mov	r1, sl
 80073dc:	2201      	movs	r2, #1
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fb00 	bl	80079e4 <__lshift>
 80073e4:	4631      	mov	r1, r6
 80073e6:	4682      	mov	sl, r0
 80073e8:	f000 fb68 	bl	8007abc <__mcmp>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	dc03      	bgt.n	80073f8 <_dtoa_r+0xab0>
 80073f0:	d1e1      	bne.n	80073b6 <_dtoa_r+0xa6e>
 80073f2:	f019 0f01 	tst.w	r9, #1
 80073f6:	d0de      	beq.n	80073b6 <_dtoa_r+0xa6e>
 80073f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073fc:	d1d8      	bne.n	80073b0 <_dtoa_r+0xa68>
 80073fe:	9a01      	ldr	r2, [sp, #4]
 8007400:	2339      	movs	r3, #57	; 0x39
 8007402:	7013      	strb	r3, [r2, #0]
 8007404:	462b      	mov	r3, r5
 8007406:	461d      	mov	r5, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800740e:	2a39      	cmp	r2, #57	; 0x39
 8007410:	d06c      	beq.n	80074ec <_dtoa_r+0xba4>
 8007412:	3201      	adds	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e747      	b.n	80072a8 <_dtoa_r+0x960>
 8007418:	2a00      	cmp	r2, #0
 800741a:	dd07      	ble.n	800742c <_dtoa_r+0xae4>
 800741c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007420:	d0ed      	beq.n	80073fe <_dtoa_r+0xab6>
 8007422:	9a01      	ldr	r2, [sp, #4]
 8007424:	f109 0301 	add.w	r3, r9, #1
 8007428:	7013      	strb	r3, [r2, #0]
 800742a:	e73d      	b.n	80072a8 <_dtoa_r+0x960>
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	9a08      	ldr	r2, [sp, #32]
 8007430:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007434:	4293      	cmp	r3, r2
 8007436:	d043      	beq.n	80074c0 <_dtoa_r+0xb78>
 8007438:	4651      	mov	r1, sl
 800743a:	2300      	movs	r3, #0
 800743c:	220a      	movs	r2, #10
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f922 	bl	8007688 <__multadd>
 8007444:	45b8      	cmp	r8, r7
 8007446:	4682      	mov	sl, r0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	f04f 020a 	mov.w	r2, #10
 8007450:	4641      	mov	r1, r8
 8007452:	4620      	mov	r0, r4
 8007454:	d107      	bne.n	8007466 <_dtoa_r+0xb1e>
 8007456:	f000 f917 	bl	8007688 <__multadd>
 800745a:	4680      	mov	r8, r0
 800745c:	4607      	mov	r7, r0
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	3301      	adds	r3, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	e775      	b.n	8007352 <_dtoa_r+0xa0a>
 8007466:	f000 f90f 	bl	8007688 <__multadd>
 800746a:	4639      	mov	r1, r7
 800746c:	4680      	mov	r8, r0
 800746e:	2300      	movs	r3, #0
 8007470:	220a      	movs	r2, #10
 8007472:	4620      	mov	r0, r4
 8007474:	f000 f908 	bl	8007688 <__multadd>
 8007478:	4607      	mov	r7, r0
 800747a:	e7f0      	b.n	800745e <_dtoa_r+0xb16>
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	9d00      	ldr	r5, [sp, #0]
 8007482:	4631      	mov	r1, r6
 8007484:	4650      	mov	r0, sl
 8007486:	f7ff f9d7 	bl	8006838 <quorem>
 800748a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	f805 9b01 	strb.w	r9, [r5], #1
 8007494:	1aea      	subs	r2, r5, r3
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	4293      	cmp	r3, r2
 800749a:	dd07      	ble.n	80074ac <_dtoa_r+0xb64>
 800749c:	4651      	mov	r1, sl
 800749e:	2300      	movs	r3, #0
 80074a0:	220a      	movs	r2, #10
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f8f0 	bl	8007688 <__multadd>
 80074a8:	4682      	mov	sl, r0
 80074aa:	e7ea      	b.n	8007482 <_dtoa_r+0xb3a>
 80074ac:	9b01      	ldr	r3, [sp, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfc8      	it	gt
 80074b2:	461d      	movgt	r5, r3
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	bfd8      	it	le
 80074b8:	2501      	movle	r5, #1
 80074ba:	441d      	add	r5, r3
 80074bc:	f04f 0800 	mov.w	r8, #0
 80074c0:	4651      	mov	r1, sl
 80074c2:	2201      	movs	r2, #1
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 fa8d 	bl	80079e4 <__lshift>
 80074ca:	4631      	mov	r1, r6
 80074cc:	4682      	mov	sl, r0
 80074ce:	f000 faf5 	bl	8007abc <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	dc96      	bgt.n	8007404 <_dtoa_r+0xabc>
 80074d6:	d102      	bne.n	80074de <_dtoa_r+0xb96>
 80074d8:	f019 0f01 	tst.w	r9, #1
 80074dc:	d192      	bne.n	8007404 <_dtoa_r+0xabc>
 80074de:	462b      	mov	r3, r5
 80074e0:	461d      	mov	r5, r3
 80074e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074e6:	2a30      	cmp	r2, #48	; 0x30
 80074e8:	d0fa      	beq.n	80074e0 <_dtoa_r+0xb98>
 80074ea:	e6dd      	b.n	80072a8 <_dtoa_r+0x960>
 80074ec:	9a00      	ldr	r2, [sp, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d189      	bne.n	8007406 <_dtoa_r+0xabe>
 80074f2:	f10b 0b01 	add.w	fp, fp, #1
 80074f6:	2331      	movs	r3, #49	; 0x31
 80074f8:	e796      	b.n	8007428 <_dtoa_r+0xae0>
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <_dtoa_r+0xbdc>)
 80074fc:	f7ff ba99 	b.w	8006a32 <_dtoa_r+0xea>
 8007500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007502:	2b00      	cmp	r3, #0
 8007504:	f47f aa6d 	bne.w	80069e2 <_dtoa_r+0x9a>
 8007508:	4b07      	ldr	r3, [pc, #28]	; (8007528 <_dtoa_r+0xbe0>)
 800750a:	f7ff ba92 	b.w	8006a32 <_dtoa_r+0xea>
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dcb5      	bgt.n	8007480 <_dtoa_r+0xb38>
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	2b02      	cmp	r3, #2
 8007518:	f73f aeb1 	bgt.w	800727e <_dtoa_r+0x936>
 800751c:	e7b0      	b.n	8007480 <_dtoa_r+0xb38>
 800751e:	bf00      	nop
 8007520:	0800974a 	.word	0x0800974a
 8007524:	08008666 	.word	0x08008666
 8007528:	080096ce 	.word	0x080096ce

0800752c <_free_r>:
 800752c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800752e:	2900      	cmp	r1, #0
 8007530:	d044      	beq.n	80075bc <_free_r+0x90>
 8007532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007536:	9001      	str	r0, [sp, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f1a1 0404 	sub.w	r4, r1, #4
 800753e:	bfb8      	it	lt
 8007540:	18e4      	addlt	r4, r4, r3
 8007542:	f7fe fa99 	bl	8005a78 <__malloc_lock>
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <_free_r+0x94>)
 8007548:	9801      	ldr	r0, [sp, #4]
 800754a:	6813      	ldr	r3, [r2, #0]
 800754c:	b933      	cbnz	r3, 800755c <_free_r+0x30>
 800754e:	6063      	str	r3, [r4, #4]
 8007550:	6014      	str	r4, [r2, #0]
 8007552:	b003      	add	sp, #12
 8007554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007558:	f7fe ba94 	b.w	8005a84 <__malloc_unlock>
 800755c:	42a3      	cmp	r3, r4
 800755e:	d908      	bls.n	8007572 <_free_r+0x46>
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	1961      	adds	r1, r4, r5
 8007564:	428b      	cmp	r3, r1
 8007566:	bf01      	itttt	eq
 8007568:	6819      	ldreq	r1, [r3, #0]
 800756a:	685b      	ldreq	r3, [r3, #4]
 800756c:	1949      	addeq	r1, r1, r5
 800756e:	6021      	streq	r1, [r4, #0]
 8007570:	e7ed      	b.n	800754e <_free_r+0x22>
 8007572:	461a      	mov	r2, r3
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b10b      	cbz	r3, 800757c <_free_r+0x50>
 8007578:	42a3      	cmp	r3, r4
 800757a:	d9fa      	bls.n	8007572 <_free_r+0x46>
 800757c:	6811      	ldr	r1, [r2, #0]
 800757e:	1855      	adds	r5, r2, r1
 8007580:	42a5      	cmp	r5, r4
 8007582:	d10b      	bne.n	800759c <_free_r+0x70>
 8007584:	6824      	ldr	r4, [r4, #0]
 8007586:	4421      	add	r1, r4
 8007588:	1854      	adds	r4, r2, r1
 800758a:	42a3      	cmp	r3, r4
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	d1e0      	bne.n	8007552 <_free_r+0x26>
 8007590:	681c      	ldr	r4, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	6053      	str	r3, [r2, #4]
 8007596:	440c      	add	r4, r1
 8007598:	6014      	str	r4, [r2, #0]
 800759a:	e7da      	b.n	8007552 <_free_r+0x26>
 800759c:	d902      	bls.n	80075a4 <_free_r+0x78>
 800759e:	230c      	movs	r3, #12
 80075a0:	6003      	str	r3, [r0, #0]
 80075a2:	e7d6      	b.n	8007552 <_free_r+0x26>
 80075a4:	6825      	ldr	r5, [r4, #0]
 80075a6:	1961      	adds	r1, r4, r5
 80075a8:	428b      	cmp	r3, r1
 80075aa:	bf04      	itt	eq
 80075ac:	6819      	ldreq	r1, [r3, #0]
 80075ae:	685b      	ldreq	r3, [r3, #4]
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	bf04      	itt	eq
 80075b4:	1949      	addeq	r1, r1, r5
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	6054      	str	r4, [r2, #4]
 80075ba:	e7ca      	b.n	8007552 <_free_r+0x26>
 80075bc:	b003      	add	sp, #12
 80075be:	bd30      	pop	{r4, r5, pc}
 80075c0:	200009c8 	.word	0x200009c8

080075c4 <_Balloc>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	69c6      	ldr	r6, [r0, #28]
 80075c8:	4604      	mov	r4, r0
 80075ca:	460d      	mov	r5, r1
 80075cc:	b976      	cbnz	r6, 80075ec <_Balloc+0x28>
 80075ce:	2010      	movs	r0, #16
 80075d0:	f7fb fa82 	bl	8002ad8 <__wrap_malloc>
 80075d4:	4602      	mov	r2, r0
 80075d6:	61e0      	str	r0, [r4, #28]
 80075d8:	b920      	cbnz	r0, 80075e4 <_Balloc+0x20>
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <_Balloc+0x78>)
 80075dc:	4818      	ldr	r0, [pc, #96]	; (8007640 <_Balloc+0x7c>)
 80075de:	216b      	movs	r1, #107	; 0x6b
 80075e0:	f7ff f90c 	bl	80067fc <__assert_func>
 80075e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e8:	6006      	str	r6, [r0, #0]
 80075ea:	60c6      	str	r6, [r0, #12]
 80075ec:	69e6      	ldr	r6, [r4, #28]
 80075ee:	68f3      	ldr	r3, [r6, #12]
 80075f0:	b183      	cbz	r3, 8007614 <_Balloc+0x50>
 80075f2:	69e3      	ldr	r3, [r4, #28]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075fa:	b9b8      	cbnz	r0, 800762c <_Balloc+0x68>
 80075fc:	2101      	movs	r1, #1
 80075fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007602:	1d72      	adds	r2, r6, #5
 8007604:	0092      	lsls	r2, r2, #2
 8007606:	4620      	mov	r0, r4
 8007608:	f7fe f978 	bl	80058fc <_calloc_r>
 800760c:	b160      	cbz	r0, 8007628 <_Balloc+0x64>
 800760e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007612:	e00e      	b.n	8007632 <_Balloc+0x6e>
 8007614:	2221      	movs	r2, #33	; 0x21
 8007616:	2104      	movs	r1, #4
 8007618:	4620      	mov	r0, r4
 800761a:	f7fe f96f 	bl	80058fc <_calloc_r>
 800761e:	69e3      	ldr	r3, [r4, #28]
 8007620:	60f0      	str	r0, [r6, #12]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e4      	bne.n	80075f2 <_Balloc+0x2e>
 8007628:	2000      	movs	r0, #0
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	6802      	ldr	r2, [r0, #0]
 800762e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007632:	2300      	movs	r3, #0
 8007634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007638:	e7f7      	b.n	800762a <_Balloc+0x66>
 800763a:	bf00      	nop
 800763c:	080096db 	.word	0x080096db
 8007640:	0800975b 	.word	0x0800975b

08007644 <_Bfree>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	69c6      	ldr	r6, [r0, #28]
 8007648:	4605      	mov	r5, r0
 800764a:	460c      	mov	r4, r1
 800764c:	b976      	cbnz	r6, 800766c <_Bfree+0x28>
 800764e:	2010      	movs	r0, #16
 8007650:	f7fb fa42 	bl	8002ad8 <__wrap_malloc>
 8007654:	4602      	mov	r2, r0
 8007656:	61e8      	str	r0, [r5, #28]
 8007658:	b920      	cbnz	r0, 8007664 <_Bfree+0x20>
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <_Bfree+0x3c>)
 800765c:	4809      	ldr	r0, [pc, #36]	; (8007684 <_Bfree+0x40>)
 800765e:	218f      	movs	r1, #143	; 0x8f
 8007660:	f7ff f8cc 	bl	80067fc <__assert_func>
 8007664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007668:	6006      	str	r6, [r0, #0]
 800766a:	60c6      	str	r6, [r0, #12]
 800766c:	b13c      	cbz	r4, 800767e <_Bfree+0x3a>
 800766e:	69eb      	ldr	r3, [r5, #28]
 8007670:	6862      	ldr	r2, [r4, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007678:	6021      	str	r1, [r4, #0]
 800767a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	080096db 	.word	0x080096db
 8007684:	0800975b 	.word	0x0800975b

08007688 <__multadd>:
 8007688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768c:	690d      	ldr	r5, [r1, #16]
 800768e:	4607      	mov	r7, r0
 8007690:	460c      	mov	r4, r1
 8007692:	461e      	mov	r6, r3
 8007694:	f101 0c14 	add.w	ip, r1, #20
 8007698:	2000      	movs	r0, #0
 800769a:	f8dc 3000 	ldr.w	r3, [ip]
 800769e:	b299      	uxth	r1, r3
 80076a0:	fb02 6101 	mla	r1, r2, r1, r6
 80076a4:	0c1e      	lsrs	r6, r3, #16
 80076a6:	0c0b      	lsrs	r3, r1, #16
 80076a8:	fb02 3306 	mla	r3, r2, r6, r3
 80076ac:	b289      	uxth	r1, r1
 80076ae:	3001      	adds	r0, #1
 80076b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076b4:	4285      	cmp	r5, r0
 80076b6:	f84c 1b04 	str.w	r1, [ip], #4
 80076ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076be:	dcec      	bgt.n	800769a <__multadd+0x12>
 80076c0:	b30e      	cbz	r6, 8007706 <__multadd+0x7e>
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	42ab      	cmp	r3, r5
 80076c6:	dc19      	bgt.n	80076fc <__multadd+0x74>
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	4638      	mov	r0, r7
 80076cc:	3101      	adds	r1, #1
 80076ce:	f7ff ff79 	bl	80075c4 <_Balloc>
 80076d2:	4680      	mov	r8, r0
 80076d4:	b928      	cbnz	r0, 80076e2 <__multadd+0x5a>
 80076d6:	4602      	mov	r2, r0
 80076d8:	4b0c      	ldr	r3, [pc, #48]	; (800770c <__multadd+0x84>)
 80076da:	480d      	ldr	r0, [pc, #52]	; (8007710 <__multadd+0x88>)
 80076dc:	21ba      	movs	r1, #186	; 0xba
 80076de:	f7ff f88d 	bl	80067fc <__assert_func>
 80076e2:	6922      	ldr	r2, [r4, #16]
 80076e4:	3202      	adds	r2, #2
 80076e6:	f104 010c 	add.w	r1, r4, #12
 80076ea:	0092      	lsls	r2, r2, #2
 80076ec:	300c      	adds	r0, #12
 80076ee:	f7ff f877 	bl	80067e0 <memcpy>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4638      	mov	r0, r7
 80076f6:	f7ff ffa5 	bl	8007644 <_Bfree>
 80076fa:	4644      	mov	r4, r8
 80076fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007700:	3501      	adds	r5, #1
 8007702:	615e      	str	r6, [r3, #20]
 8007704:	6125      	str	r5, [r4, #16]
 8007706:	4620      	mov	r0, r4
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	0800974a 	.word	0x0800974a
 8007710:	0800975b 	.word	0x0800975b

08007714 <__hi0bits>:
 8007714:	0c03      	lsrs	r3, r0, #16
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	b9d3      	cbnz	r3, 8007750 <__hi0bits+0x3c>
 800771a:	0400      	lsls	r0, r0, #16
 800771c:	2310      	movs	r3, #16
 800771e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007722:	bf04      	itt	eq
 8007724:	0200      	lsleq	r0, r0, #8
 8007726:	3308      	addeq	r3, #8
 8007728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800772c:	bf04      	itt	eq
 800772e:	0100      	lsleq	r0, r0, #4
 8007730:	3304      	addeq	r3, #4
 8007732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007736:	bf04      	itt	eq
 8007738:	0080      	lsleq	r0, r0, #2
 800773a:	3302      	addeq	r3, #2
 800773c:	2800      	cmp	r0, #0
 800773e:	db05      	blt.n	800774c <__hi0bits+0x38>
 8007740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007744:	f103 0301 	add.w	r3, r3, #1
 8007748:	bf08      	it	eq
 800774a:	2320      	moveq	r3, #32
 800774c:	4618      	mov	r0, r3
 800774e:	4770      	bx	lr
 8007750:	2300      	movs	r3, #0
 8007752:	e7e4      	b.n	800771e <__hi0bits+0xa>

08007754 <__lo0bits>:
 8007754:	6803      	ldr	r3, [r0, #0]
 8007756:	f013 0207 	ands.w	r2, r3, #7
 800775a:	d00c      	beq.n	8007776 <__lo0bits+0x22>
 800775c:	07d9      	lsls	r1, r3, #31
 800775e:	d422      	bmi.n	80077a6 <__lo0bits+0x52>
 8007760:	079a      	lsls	r2, r3, #30
 8007762:	bf49      	itett	mi
 8007764:	085b      	lsrmi	r3, r3, #1
 8007766:	089b      	lsrpl	r3, r3, #2
 8007768:	6003      	strmi	r3, [r0, #0]
 800776a:	2201      	movmi	r2, #1
 800776c:	bf5c      	itt	pl
 800776e:	6003      	strpl	r3, [r0, #0]
 8007770:	2202      	movpl	r2, #2
 8007772:	4610      	mov	r0, r2
 8007774:	4770      	bx	lr
 8007776:	b299      	uxth	r1, r3
 8007778:	b909      	cbnz	r1, 800777e <__lo0bits+0x2a>
 800777a:	0c1b      	lsrs	r3, r3, #16
 800777c:	2210      	movs	r2, #16
 800777e:	b2d9      	uxtb	r1, r3
 8007780:	b909      	cbnz	r1, 8007786 <__lo0bits+0x32>
 8007782:	3208      	adds	r2, #8
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	0719      	lsls	r1, r3, #28
 8007788:	bf04      	itt	eq
 800778a:	091b      	lsreq	r3, r3, #4
 800778c:	3204      	addeq	r2, #4
 800778e:	0799      	lsls	r1, r3, #30
 8007790:	bf04      	itt	eq
 8007792:	089b      	lsreq	r3, r3, #2
 8007794:	3202      	addeq	r2, #2
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	d403      	bmi.n	80077a2 <__lo0bits+0x4e>
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	f102 0201 	add.w	r2, r2, #1
 80077a0:	d003      	beq.n	80077aa <__lo0bits+0x56>
 80077a2:	6003      	str	r3, [r0, #0]
 80077a4:	e7e5      	b.n	8007772 <__lo0bits+0x1e>
 80077a6:	2200      	movs	r2, #0
 80077a8:	e7e3      	b.n	8007772 <__lo0bits+0x1e>
 80077aa:	2220      	movs	r2, #32
 80077ac:	e7e1      	b.n	8007772 <__lo0bits+0x1e>
	...

080077b0 <__i2b>:
 80077b0:	b510      	push	{r4, lr}
 80077b2:	460c      	mov	r4, r1
 80077b4:	2101      	movs	r1, #1
 80077b6:	f7ff ff05 	bl	80075c4 <_Balloc>
 80077ba:	4602      	mov	r2, r0
 80077bc:	b928      	cbnz	r0, 80077ca <__i2b+0x1a>
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <__i2b+0x24>)
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <__i2b+0x28>)
 80077c2:	f240 1145 	movw	r1, #325	; 0x145
 80077c6:	f7ff f819 	bl	80067fc <__assert_func>
 80077ca:	2301      	movs	r3, #1
 80077cc:	6144      	str	r4, [r0, #20]
 80077ce:	6103      	str	r3, [r0, #16]
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	bf00      	nop
 80077d4:	0800974a 	.word	0x0800974a
 80077d8:	0800975b 	.word	0x0800975b

080077dc <__multiply>:
 80077dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	4691      	mov	r9, r2
 80077e2:	690a      	ldr	r2, [r1, #16]
 80077e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	bfb8      	it	lt
 80077ec:	460b      	movlt	r3, r1
 80077ee:	460c      	mov	r4, r1
 80077f0:	bfbc      	itt	lt
 80077f2:	464c      	movlt	r4, r9
 80077f4:	4699      	movlt	r9, r3
 80077f6:	6927      	ldr	r7, [r4, #16]
 80077f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077fc:	68a3      	ldr	r3, [r4, #8]
 80077fe:	6861      	ldr	r1, [r4, #4]
 8007800:	eb07 060a 	add.w	r6, r7, sl
 8007804:	42b3      	cmp	r3, r6
 8007806:	b085      	sub	sp, #20
 8007808:	bfb8      	it	lt
 800780a:	3101      	addlt	r1, #1
 800780c:	f7ff feda 	bl	80075c4 <_Balloc>
 8007810:	b930      	cbnz	r0, 8007820 <__multiply+0x44>
 8007812:	4602      	mov	r2, r0
 8007814:	4b44      	ldr	r3, [pc, #272]	; (8007928 <__multiply+0x14c>)
 8007816:	4845      	ldr	r0, [pc, #276]	; (800792c <__multiply+0x150>)
 8007818:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800781c:	f7fe ffee 	bl	80067fc <__assert_func>
 8007820:	f100 0514 	add.w	r5, r0, #20
 8007824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007828:	462b      	mov	r3, r5
 800782a:	2200      	movs	r2, #0
 800782c:	4543      	cmp	r3, r8
 800782e:	d321      	bcc.n	8007874 <__multiply+0x98>
 8007830:	f104 0314 	add.w	r3, r4, #20
 8007834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007838:	f109 0314 	add.w	r3, r9, #20
 800783c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	1b3a      	subs	r2, r7, r4
 8007844:	3a15      	subs	r2, #21
 8007846:	f022 0203 	bic.w	r2, r2, #3
 800784a:	3204      	adds	r2, #4
 800784c:	f104 0115 	add.w	r1, r4, #21
 8007850:	428f      	cmp	r7, r1
 8007852:	bf38      	it	cc
 8007854:	2204      	movcc	r2, #4
 8007856:	9201      	str	r2, [sp, #4]
 8007858:	9a02      	ldr	r2, [sp, #8]
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	429a      	cmp	r2, r3
 800785e:	d80c      	bhi.n	800787a <__multiply+0x9e>
 8007860:	2e00      	cmp	r6, #0
 8007862:	dd03      	ble.n	800786c <__multiply+0x90>
 8007864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007868:	2b00      	cmp	r3, #0
 800786a:	d05b      	beq.n	8007924 <__multiply+0x148>
 800786c:	6106      	str	r6, [r0, #16]
 800786e:	b005      	add	sp, #20
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	f843 2b04 	str.w	r2, [r3], #4
 8007878:	e7d8      	b.n	800782c <__multiply+0x50>
 800787a:	f8b3 a000 	ldrh.w	sl, [r3]
 800787e:	f1ba 0f00 	cmp.w	sl, #0
 8007882:	d024      	beq.n	80078ce <__multiply+0xf2>
 8007884:	f104 0e14 	add.w	lr, r4, #20
 8007888:	46a9      	mov	r9, r5
 800788a:	f04f 0c00 	mov.w	ip, #0
 800788e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007892:	f8d9 1000 	ldr.w	r1, [r9]
 8007896:	fa1f fb82 	uxth.w	fp, r2
 800789a:	b289      	uxth	r1, r1
 800789c:	fb0a 110b 	mla	r1, sl, fp, r1
 80078a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078a4:	f8d9 2000 	ldr.w	r2, [r9]
 80078a8:	4461      	add	r1, ip
 80078aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80078b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078b6:	b289      	uxth	r1, r1
 80078b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078bc:	4577      	cmp	r7, lr
 80078be:	f849 1b04 	str.w	r1, [r9], #4
 80078c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078c6:	d8e2      	bhi.n	800788e <__multiply+0xb2>
 80078c8:	9a01      	ldr	r2, [sp, #4]
 80078ca:	f845 c002 	str.w	ip, [r5, r2]
 80078ce:	9a03      	ldr	r2, [sp, #12]
 80078d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078d4:	3304      	adds	r3, #4
 80078d6:	f1b9 0f00 	cmp.w	r9, #0
 80078da:	d021      	beq.n	8007920 <__multiply+0x144>
 80078dc:	6829      	ldr	r1, [r5, #0]
 80078de:	f104 0c14 	add.w	ip, r4, #20
 80078e2:	46ae      	mov	lr, r5
 80078e4:	f04f 0a00 	mov.w	sl, #0
 80078e8:	f8bc b000 	ldrh.w	fp, [ip]
 80078ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078f0:	fb09 220b 	mla	r2, r9, fp, r2
 80078f4:	4452      	add	r2, sl
 80078f6:	b289      	uxth	r1, r1
 80078f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007900:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007904:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007908:	f8be 1000 	ldrh.w	r1, [lr]
 800790c:	fb09 110a 	mla	r1, r9, sl, r1
 8007910:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007914:	4567      	cmp	r7, ip
 8007916:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800791a:	d8e5      	bhi.n	80078e8 <__multiply+0x10c>
 800791c:	9a01      	ldr	r2, [sp, #4]
 800791e:	50a9      	str	r1, [r5, r2]
 8007920:	3504      	adds	r5, #4
 8007922:	e799      	b.n	8007858 <__multiply+0x7c>
 8007924:	3e01      	subs	r6, #1
 8007926:	e79b      	b.n	8007860 <__multiply+0x84>
 8007928:	0800974a 	.word	0x0800974a
 800792c:	0800975b 	.word	0x0800975b

08007930 <__pow5mult>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4615      	mov	r5, r2
 8007936:	f012 0203 	ands.w	r2, r2, #3
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	d007      	beq.n	8007950 <__pow5mult+0x20>
 8007940:	4c25      	ldr	r4, [pc, #148]	; (80079d8 <__pow5mult+0xa8>)
 8007942:	3a01      	subs	r2, #1
 8007944:	2300      	movs	r3, #0
 8007946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800794a:	f7ff fe9d 	bl	8007688 <__multadd>
 800794e:	4607      	mov	r7, r0
 8007950:	10ad      	asrs	r5, r5, #2
 8007952:	d03d      	beq.n	80079d0 <__pow5mult+0xa0>
 8007954:	69f4      	ldr	r4, [r6, #28]
 8007956:	b97c      	cbnz	r4, 8007978 <__pow5mult+0x48>
 8007958:	2010      	movs	r0, #16
 800795a:	f7fb f8bd 	bl	8002ad8 <__wrap_malloc>
 800795e:	4602      	mov	r2, r0
 8007960:	61f0      	str	r0, [r6, #28]
 8007962:	b928      	cbnz	r0, 8007970 <__pow5mult+0x40>
 8007964:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <__pow5mult+0xac>)
 8007966:	481e      	ldr	r0, [pc, #120]	; (80079e0 <__pow5mult+0xb0>)
 8007968:	f240 11b3 	movw	r1, #435	; 0x1b3
 800796c:	f7fe ff46 	bl	80067fc <__assert_func>
 8007970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007974:	6004      	str	r4, [r0, #0]
 8007976:	60c4      	str	r4, [r0, #12]
 8007978:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800797c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007980:	b94c      	cbnz	r4, 8007996 <__pow5mult+0x66>
 8007982:	f240 2171 	movw	r1, #625	; 0x271
 8007986:	4630      	mov	r0, r6
 8007988:	f7ff ff12 	bl	80077b0 <__i2b>
 800798c:	2300      	movs	r3, #0
 800798e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007992:	4604      	mov	r4, r0
 8007994:	6003      	str	r3, [r0, #0]
 8007996:	f04f 0900 	mov.w	r9, #0
 800799a:	07eb      	lsls	r3, r5, #31
 800799c:	d50a      	bpl.n	80079b4 <__pow5mult+0x84>
 800799e:	4639      	mov	r1, r7
 80079a0:	4622      	mov	r2, r4
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff ff1a 	bl	80077dc <__multiply>
 80079a8:	4639      	mov	r1, r7
 80079aa:	4680      	mov	r8, r0
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7ff fe49 	bl	8007644 <_Bfree>
 80079b2:	4647      	mov	r7, r8
 80079b4:	106d      	asrs	r5, r5, #1
 80079b6:	d00b      	beq.n	80079d0 <__pow5mult+0xa0>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	b938      	cbnz	r0, 80079cc <__pow5mult+0x9c>
 80079bc:	4622      	mov	r2, r4
 80079be:	4621      	mov	r1, r4
 80079c0:	4630      	mov	r0, r6
 80079c2:	f7ff ff0b 	bl	80077dc <__multiply>
 80079c6:	6020      	str	r0, [r4, #0]
 80079c8:	f8c0 9000 	str.w	r9, [r0]
 80079cc:	4604      	mov	r4, r0
 80079ce:	e7e4      	b.n	800799a <__pow5mult+0x6a>
 80079d0:	4638      	mov	r0, r7
 80079d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d6:	bf00      	nop
 80079d8:	080098a8 	.word	0x080098a8
 80079dc:	080096db 	.word	0x080096db
 80079e0:	0800975b 	.word	0x0800975b

080079e4 <__lshift>:
 80079e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	460c      	mov	r4, r1
 80079ea:	6849      	ldr	r1, [r1, #4]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	4607      	mov	r7, r0
 80079f6:	4691      	mov	r9, r2
 80079f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079fc:	f108 0601 	add.w	r6, r8, #1
 8007a00:	42b3      	cmp	r3, r6
 8007a02:	db0b      	blt.n	8007a1c <__lshift+0x38>
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff fddd 	bl	80075c4 <_Balloc>
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	b948      	cbnz	r0, 8007a22 <__lshift+0x3e>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <__lshift+0xd0>)
 8007a12:	4829      	ldr	r0, [pc, #164]	; (8007ab8 <__lshift+0xd4>)
 8007a14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007a18:	f7fe fef0 	bl	80067fc <__assert_func>
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	e7ee      	b.n	8007a00 <__lshift+0x1c>
 8007a22:	2300      	movs	r3, #0
 8007a24:	f100 0114 	add.w	r1, r0, #20
 8007a28:	f100 0210 	add.w	r2, r0, #16
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	4553      	cmp	r3, sl
 8007a30:	db33      	blt.n	8007a9a <__lshift+0xb6>
 8007a32:	6920      	ldr	r0, [r4, #16]
 8007a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a38:	f104 0314 	add.w	r3, r4, #20
 8007a3c:	f019 091f 	ands.w	r9, r9, #31
 8007a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a48:	d02b      	beq.n	8007aa2 <__lshift+0xbe>
 8007a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a4e:	468a      	mov	sl, r1
 8007a50:	2200      	movs	r2, #0
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	fa00 f009 	lsl.w	r0, r0, r9
 8007a58:	4310      	orrs	r0, r2
 8007a5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a62:	459c      	cmp	ip, r3
 8007a64:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a68:	d8f3      	bhi.n	8007a52 <__lshift+0x6e>
 8007a6a:	ebac 0304 	sub.w	r3, ip, r4
 8007a6e:	3b15      	subs	r3, #21
 8007a70:	f023 0303 	bic.w	r3, r3, #3
 8007a74:	3304      	adds	r3, #4
 8007a76:	f104 0015 	add.w	r0, r4, #21
 8007a7a:	4584      	cmp	ip, r0
 8007a7c:	bf38      	it	cc
 8007a7e:	2304      	movcc	r3, #4
 8007a80:	50ca      	str	r2, [r1, r3]
 8007a82:	b10a      	cbz	r2, 8007a88 <__lshift+0xa4>
 8007a84:	f108 0602 	add.w	r6, r8, #2
 8007a88:	3e01      	subs	r6, #1
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	612e      	str	r6, [r5, #16]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	f7ff fdd8 	bl	8007644 <_Bfree>
 8007a94:	4628      	mov	r0, r5
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	e7c5      	b.n	8007a2e <__lshift+0x4a>
 8007aa2:	3904      	subs	r1, #4
 8007aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007aac:	459c      	cmp	ip, r3
 8007aae:	d8f9      	bhi.n	8007aa4 <__lshift+0xc0>
 8007ab0:	e7ea      	b.n	8007a88 <__lshift+0xa4>
 8007ab2:	bf00      	nop
 8007ab4:	0800974a 	.word	0x0800974a
 8007ab8:	0800975b 	.word	0x0800975b

08007abc <__mcmp>:
 8007abc:	b530      	push	{r4, r5, lr}
 8007abe:	6902      	ldr	r2, [r0, #16]
 8007ac0:	690c      	ldr	r4, [r1, #16]
 8007ac2:	1b12      	subs	r2, r2, r4
 8007ac4:	d10e      	bne.n	8007ae4 <__mcmp+0x28>
 8007ac6:	f100 0314 	add.w	r3, r0, #20
 8007aca:	3114      	adds	r1, #20
 8007acc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ad4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ad8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007adc:	42a5      	cmp	r5, r4
 8007ade:	d003      	beq.n	8007ae8 <__mcmp+0x2c>
 8007ae0:	d305      	bcc.n	8007aee <__mcmp+0x32>
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	bd30      	pop	{r4, r5, pc}
 8007ae8:	4283      	cmp	r3, r0
 8007aea:	d3f3      	bcc.n	8007ad4 <__mcmp+0x18>
 8007aec:	e7fa      	b.n	8007ae4 <__mcmp+0x28>
 8007aee:	f04f 32ff 	mov.w	r2, #4294967295
 8007af2:	e7f7      	b.n	8007ae4 <__mcmp+0x28>

08007af4 <__mdiff>:
 8007af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	460c      	mov	r4, r1
 8007afa:	4606      	mov	r6, r0
 8007afc:	4611      	mov	r1, r2
 8007afe:	4620      	mov	r0, r4
 8007b00:	4690      	mov	r8, r2
 8007b02:	f7ff ffdb 	bl	8007abc <__mcmp>
 8007b06:	1e05      	subs	r5, r0, #0
 8007b08:	d110      	bne.n	8007b2c <__mdiff+0x38>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff fd59 	bl	80075c4 <_Balloc>
 8007b12:	b930      	cbnz	r0, 8007b22 <__mdiff+0x2e>
 8007b14:	4b3a      	ldr	r3, [pc, #232]	; (8007c00 <__mdiff+0x10c>)
 8007b16:	4602      	mov	r2, r0
 8007b18:	f240 2137 	movw	r1, #567	; 0x237
 8007b1c:	4839      	ldr	r0, [pc, #228]	; (8007c04 <__mdiff+0x110>)
 8007b1e:	f7fe fe6d 	bl	80067fc <__assert_func>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	bfa4      	itt	ge
 8007b2e:	4643      	movge	r3, r8
 8007b30:	46a0      	movge	r8, r4
 8007b32:	4630      	mov	r0, r6
 8007b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b38:	bfa6      	itte	ge
 8007b3a:	461c      	movge	r4, r3
 8007b3c:	2500      	movge	r5, #0
 8007b3e:	2501      	movlt	r5, #1
 8007b40:	f7ff fd40 	bl	80075c4 <_Balloc>
 8007b44:	b920      	cbnz	r0, 8007b50 <__mdiff+0x5c>
 8007b46:	4b2e      	ldr	r3, [pc, #184]	; (8007c00 <__mdiff+0x10c>)
 8007b48:	4602      	mov	r2, r0
 8007b4a:	f240 2145 	movw	r1, #581	; 0x245
 8007b4e:	e7e5      	b.n	8007b1c <__mdiff+0x28>
 8007b50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b54:	6926      	ldr	r6, [r4, #16]
 8007b56:	60c5      	str	r5, [r0, #12]
 8007b58:	f104 0914 	add.w	r9, r4, #20
 8007b5c:	f108 0514 	add.w	r5, r8, #20
 8007b60:	f100 0e14 	add.w	lr, r0, #20
 8007b64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b6c:	f108 0210 	add.w	r2, r8, #16
 8007b70:	46f2      	mov	sl, lr
 8007b72:	2100      	movs	r1, #0
 8007b74:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b7c:	fa11 f88b 	uxtah	r8, r1, fp
 8007b80:	b299      	uxth	r1, r3
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	eba8 0801 	sub.w	r8, r8, r1
 8007b88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b90:	fa1f f888 	uxth.w	r8, r8
 8007b94:	1419      	asrs	r1, r3, #16
 8007b96:	454e      	cmp	r6, r9
 8007b98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b9c:	f84a 3b04 	str.w	r3, [sl], #4
 8007ba0:	d8e8      	bhi.n	8007b74 <__mdiff+0x80>
 8007ba2:	1b33      	subs	r3, r6, r4
 8007ba4:	3b15      	subs	r3, #21
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	3304      	adds	r3, #4
 8007bac:	3415      	adds	r4, #21
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	bf38      	it	cc
 8007bb2:	2304      	movcc	r3, #4
 8007bb4:	441d      	add	r5, r3
 8007bb6:	4473      	add	r3, lr
 8007bb8:	469e      	mov	lr, r3
 8007bba:	462e      	mov	r6, r5
 8007bbc:	4566      	cmp	r6, ip
 8007bbe:	d30e      	bcc.n	8007bde <__mdiff+0xea>
 8007bc0:	f10c 0203 	add.w	r2, ip, #3
 8007bc4:	1b52      	subs	r2, r2, r5
 8007bc6:	f022 0203 	bic.w	r2, r2, #3
 8007bca:	3d03      	subs	r5, #3
 8007bcc:	45ac      	cmp	ip, r5
 8007bce:	bf38      	it	cc
 8007bd0:	2200      	movcc	r2, #0
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bd8:	b17a      	cbz	r2, 8007bfa <__mdiff+0x106>
 8007bda:	6107      	str	r7, [r0, #16]
 8007bdc:	e7a4      	b.n	8007b28 <__mdiff+0x34>
 8007bde:	f856 8b04 	ldr.w	r8, [r6], #4
 8007be2:	fa11 f288 	uxtah	r2, r1, r8
 8007be6:	1414      	asrs	r4, r2, #16
 8007be8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bec:	b292      	uxth	r2, r2
 8007bee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bf2:	f84e 2b04 	str.w	r2, [lr], #4
 8007bf6:	1421      	asrs	r1, r4, #16
 8007bf8:	e7e0      	b.n	8007bbc <__mdiff+0xc8>
 8007bfa:	3f01      	subs	r7, #1
 8007bfc:	e7ea      	b.n	8007bd4 <__mdiff+0xe0>
 8007bfe:	bf00      	nop
 8007c00:	0800974a 	.word	0x0800974a
 8007c04:	0800975b 	.word	0x0800975b

08007c08 <__d2b>:
 8007c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c0c:	460f      	mov	r7, r1
 8007c0e:	2101      	movs	r1, #1
 8007c10:	ec59 8b10 	vmov	r8, r9, d0
 8007c14:	4616      	mov	r6, r2
 8007c16:	f7ff fcd5 	bl	80075c4 <_Balloc>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	b930      	cbnz	r0, 8007c2c <__d2b+0x24>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <__d2b+0xac>)
 8007c22:	4825      	ldr	r0, [pc, #148]	; (8007cb8 <__d2b+0xb0>)
 8007c24:	f240 310f 	movw	r1, #783	; 0x30f
 8007c28:	f7fe fde8 	bl	80067fc <__assert_func>
 8007c2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c34:	bb2d      	cbnz	r5, 8007c82 <__d2b+0x7a>
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	f1b8 0300 	subs.w	r3, r8, #0
 8007c3c:	d026      	beq.n	8007c8c <__d2b+0x84>
 8007c3e:	4668      	mov	r0, sp
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	f7ff fd87 	bl	8007754 <__lo0bits>
 8007c46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c4a:	b1e8      	cbz	r0, 8007c88 <__d2b+0x80>
 8007c4c:	f1c0 0320 	rsb	r3, r0, #32
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	430b      	orrs	r3, r1
 8007c56:	40c2      	lsrs	r2, r0
 8007c58:	6163      	str	r3, [r4, #20]
 8007c5a:	9201      	str	r2, [sp, #4]
 8007c5c:	9b01      	ldr	r3, [sp, #4]
 8007c5e:	61a3      	str	r3, [r4, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf14      	ite	ne
 8007c64:	2202      	movne	r2, #2
 8007c66:	2201      	moveq	r2, #1
 8007c68:	6122      	str	r2, [r4, #16]
 8007c6a:	b1bd      	cbz	r5, 8007c9c <__d2b+0x94>
 8007c6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c70:	4405      	add	r5, r0
 8007c72:	603d      	str	r5, [r7, #0]
 8007c74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c78:	6030      	str	r0, [r6, #0]
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	b003      	add	sp, #12
 8007c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c86:	e7d6      	b.n	8007c36 <__d2b+0x2e>
 8007c88:	6161      	str	r1, [r4, #20]
 8007c8a:	e7e7      	b.n	8007c5c <__d2b+0x54>
 8007c8c:	a801      	add	r0, sp, #4
 8007c8e:	f7ff fd61 	bl	8007754 <__lo0bits>
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	6163      	str	r3, [r4, #20]
 8007c96:	3020      	adds	r0, #32
 8007c98:	2201      	movs	r2, #1
 8007c9a:	e7e5      	b.n	8007c68 <__d2b+0x60>
 8007c9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ca0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ca4:	6038      	str	r0, [r7, #0]
 8007ca6:	6918      	ldr	r0, [r3, #16]
 8007ca8:	f7ff fd34 	bl	8007714 <__hi0bits>
 8007cac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cb0:	e7e2      	b.n	8007c78 <__d2b+0x70>
 8007cb2:	bf00      	nop
 8007cb4:	0800974a 	.word	0x0800974a
 8007cb8:	0800975b 	.word	0x0800975b

08007cbc <fiprintf>:
 8007cbc:	b40e      	push	{r1, r2, r3}
 8007cbe:	b503      	push	{r0, r1, lr}
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <fiprintf+0x20>)
 8007cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	f000 f857 	bl	8007d80 <_vfiprintf_r>
 8007cd2:	b002      	add	sp, #8
 8007cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd8:	b003      	add	sp, #12
 8007cda:	4770      	bx	lr
 8007cdc:	200006a0 	.word	0x200006a0

08007ce0 <abort>:
 8007ce0:	b508      	push	{r3, lr}
 8007ce2:	2006      	movs	r0, #6
 8007ce4:	f000 fa24 	bl	8008130 <raise>
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7f9 fa99 	bl	8001220 <_exit>

08007cee <__ascii_mbtowc>:
 8007cee:	b082      	sub	sp, #8
 8007cf0:	b901      	cbnz	r1, 8007cf4 <__ascii_mbtowc+0x6>
 8007cf2:	a901      	add	r1, sp, #4
 8007cf4:	b142      	cbz	r2, 8007d08 <__ascii_mbtowc+0x1a>
 8007cf6:	b14b      	cbz	r3, 8007d0c <__ascii_mbtowc+0x1e>
 8007cf8:	7813      	ldrb	r3, [r2, #0]
 8007cfa:	600b      	str	r3, [r1, #0]
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	1e10      	subs	r0, r2, #0
 8007d00:	bf18      	it	ne
 8007d02:	2001      	movne	r0, #1
 8007d04:	b002      	add	sp, #8
 8007d06:	4770      	bx	lr
 8007d08:	4610      	mov	r0, r2
 8007d0a:	e7fb      	b.n	8007d04 <__ascii_mbtowc+0x16>
 8007d0c:	f06f 0001 	mvn.w	r0, #1
 8007d10:	e7f8      	b.n	8007d04 <__ascii_mbtowc+0x16>

08007d12 <__ascii_wctomb>:
 8007d12:	b149      	cbz	r1, 8007d28 <__ascii_wctomb+0x16>
 8007d14:	2aff      	cmp	r2, #255	; 0xff
 8007d16:	bf85      	ittet	hi
 8007d18:	238a      	movhi	r3, #138	; 0x8a
 8007d1a:	6003      	strhi	r3, [r0, #0]
 8007d1c:	700a      	strbls	r2, [r1, #0]
 8007d1e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d22:	bf98      	it	ls
 8007d24:	2001      	movls	r0, #1
 8007d26:	4770      	bx	lr
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4770      	bx	lr

08007d2c <__sfputc_r>:
 8007d2c:	6893      	ldr	r3, [r2, #8]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	b410      	push	{r4}
 8007d34:	6093      	str	r3, [r2, #8]
 8007d36:	da08      	bge.n	8007d4a <__sfputc_r+0x1e>
 8007d38:	6994      	ldr	r4, [r2, #24]
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	db01      	blt.n	8007d42 <__sfputc_r+0x16>
 8007d3e:	290a      	cmp	r1, #10
 8007d40:	d103      	bne.n	8007d4a <__sfputc_r+0x1e>
 8007d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d46:	f000 b935 	b.w	8007fb4 <__swbuf_r>
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	1c58      	adds	r0, r3, #1
 8007d4e:	6010      	str	r0, [r2, #0]
 8007d50:	7019      	strb	r1, [r3, #0]
 8007d52:	4608      	mov	r0, r1
 8007d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <__sfputs_r>:
 8007d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	4614      	mov	r4, r2
 8007d62:	18d5      	adds	r5, r2, r3
 8007d64:	42ac      	cmp	r4, r5
 8007d66:	d101      	bne.n	8007d6c <__sfputs_r+0x12>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e007      	b.n	8007d7c <__sfputs_r+0x22>
 8007d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d70:	463a      	mov	r2, r7
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ffda 	bl	8007d2c <__sfputc_r>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d1f3      	bne.n	8007d64 <__sfputs_r+0xa>
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d80 <_vfiprintf_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	460d      	mov	r5, r1
 8007d86:	b09d      	sub	sp, #116	; 0x74
 8007d88:	4614      	mov	r4, r2
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	b118      	cbz	r0, 8007d98 <_vfiprintf_r+0x18>
 8007d90:	6a03      	ldr	r3, [r0, #32]
 8007d92:	b90b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x18>
 8007d94:	f7fe fc0a 	bl	80065ac <__sinit>
 8007d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d9a:	07d9      	lsls	r1, r3, #31
 8007d9c:	d405      	bmi.n	8007daa <_vfiprintf_r+0x2a>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d402      	bmi.n	8007daa <_vfiprintf_r+0x2a>
 8007da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da6:	f7fe fd19 	bl	80067dc <__retarget_lock_acquire_recursive>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	071b      	lsls	r3, r3, #28
 8007dae:	d501      	bpl.n	8007db4 <_vfiprintf_r+0x34>
 8007db0:	692b      	ldr	r3, [r5, #16]
 8007db2:	b99b      	cbnz	r3, 8007ddc <_vfiprintf_r+0x5c>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4630      	mov	r0, r6
 8007db8:	f000 f93a 	bl	8008030 <__swsetup_r>
 8007dbc:	b170      	cbz	r0, 8007ddc <_vfiprintf_r+0x5c>
 8007dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dc0:	07dc      	lsls	r4, r3, #31
 8007dc2:	d504      	bpl.n	8007dce <_vfiprintf_r+0x4e>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	b01d      	add	sp, #116	; 0x74
 8007dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	0598      	lsls	r0, r3, #22
 8007dd2:	d4f7      	bmi.n	8007dc4 <_vfiprintf_r+0x44>
 8007dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd6:	f7fe fd02 	bl	80067de <__retarget_lock_release_recursive>
 8007dda:	e7f3      	b.n	8007dc4 <_vfiprintf_r+0x44>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9309      	str	r3, [sp, #36]	; 0x24
 8007de0:	2320      	movs	r3, #32
 8007de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dea:	2330      	movs	r3, #48	; 0x30
 8007dec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007fa0 <_vfiprintf_r+0x220>
 8007df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007df4:	f04f 0901 	mov.w	r9, #1
 8007df8:	4623      	mov	r3, r4
 8007dfa:	469a      	mov	sl, r3
 8007dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e00:	b10a      	cbz	r2, 8007e06 <_vfiprintf_r+0x86>
 8007e02:	2a25      	cmp	r2, #37	; 0x25
 8007e04:	d1f9      	bne.n	8007dfa <_vfiprintf_r+0x7a>
 8007e06:	ebba 0b04 	subs.w	fp, sl, r4
 8007e0a:	d00b      	beq.n	8007e24 <_vfiprintf_r+0xa4>
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ffa1 	bl	8007d5a <__sfputs_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f000 80a9 	beq.w	8007f70 <_vfiprintf_r+0x1f0>
 8007e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e20:	445a      	add	r2, fp
 8007e22:	9209      	str	r2, [sp, #36]	; 0x24
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80a1 	beq.w	8007f70 <_vfiprintf_r+0x1f0>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e38:	f10a 0a01 	add.w	sl, sl, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	9307      	str	r3, [sp, #28]
 8007e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e44:	931a      	str	r3, [sp, #104]	; 0x68
 8007e46:	4654      	mov	r4, sl
 8007e48:	2205      	movs	r2, #5
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4854      	ldr	r0, [pc, #336]	; (8007fa0 <_vfiprintf_r+0x220>)
 8007e50:	f7f8 f9be 	bl	80001d0 <memchr>
 8007e54:	9a04      	ldr	r2, [sp, #16]
 8007e56:	b9d8      	cbnz	r0, 8007e90 <_vfiprintf_r+0x110>
 8007e58:	06d1      	lsls	r1, r2, #27
 8007e5a:	bf44      	itt	mi
 8007e5c:	2320      	movmi	r3, #32
 8007e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e62:	0713      	lsls	r3, r2, #28
 8007e64:	bf44      	itt	mi
 8007e66:	232b      	movmi	r3, #43	; 0x2b
 8007e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e70:	2b2a      	cmp	r3, #42	; 0x2a
 8007e72:	d015      	beq.n	8007ea0 <_vfiprintf_r+0x120>
 8007e74:	9a07      	ldr	r2, [sp, #28]
 8007e76:	4654      	mov	r4, sl
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f04f 0c0a 	mov.w	ip, #10
 8007e7e:	4621      	mov	r1, r4
 8007e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e84:	3b30      	subs	r3, #48	; 0x30
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d94d      	bls.n	8007f26 <_vfiprintf_r+0x1a6>
 8007e8a:	b1b0      	cbz	r0, 8007eba <_vfiprintf_r+0x13a>
 8007e8c:	9207      	str	r2, [sp, #28]
 8007e8e:	e014      	b.n	8007eba <_vfiprintf_r+0x13a>
 8007e90:	eba0 0308 	sub.w	r3, r0, r8
 8007e94:	fa09 f303 	lsl.w	r3, r9, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	46a2      	mov	sl, r4
 8007e9e:	e7d2      	b.n	8007e46 <_vfiprintf_r+0xc6>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	1d19      	adds	r1, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	9103      	str	r1, [sp, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bfbb      	ittet	lt
 8007eac:	425b      	neglt	r3, r3
 8007eae:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb2:	9307      	strge	r3, [sp, #28]
 8007eb4:	9307      	strlt	r3, [sp, #28]
 8007eb6:	bfb8      	it	lt
 8007eb8:	9204      	strlt	r2, [sp, #16]
 8007eba:	7823      	ldrb	r3, [r4, #0]
 8007ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ebe:	d10c      	bne.n	8007eda <_vfiprintf_r+0x15a>
 8007ec0:	7863      	ldrb	r3, [r4, #1]
 8007ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec4:	d134      	bne.n	8007f30 <_vfiprintf_r+0x1b0>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	9203      	str	r2, [sp, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfb8      	it	lt
 8007ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ed6:	3402      	adds	r4, #2
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fb0 <_vfiprintf_r+0x230>
 8007ede:	7821      	ldrb	r1, [r4, #0]
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f7f8 f974 	bl	80001d0 <memchr>
 8007ee8:	b138      	cbz	r0, 8007efa <_vfiprintf_r+0x17a>
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	eba0 000a 	sub.w	r0, r0, sl
 8007ef0:	2240      	movs	r2, #64	; 0x40
 8007ef2:	4082      	lsls	r2, r0
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	3401      	adds	r4, #1
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efe:	4829      	ldr	r0, [pc, #164]	; (8007fa4 <_vfiprintf_r+0x224>)
 8007f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f04:	2206      	movs	r2, #6
 8007f06:	f7f8 f963 	bl	80001d0 <memchr>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d03f      	beq.n	8007f8e <_vfiprintf_r+0x20e>
 8007f0e:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <_vfiprintf_r+0x228>)
 8007f10:	bb1b      	cbnz	r3, 8007f5a <_vfiprintf_r+0x1da>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	3307      	adds	r3, #7
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f20:	443b      	add	r3, r7
 8007f22:	9309      	str	r3, [sp, #36]	; 0x24
 8007f24:	e768      	b.n	8007df8 <_vfiprintf_r+0x78>
 8007f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	e7a6      	b.n	8007e7e <_vfiprintf_r+0xfe>
 8007f30:	2300      	movs	r3, #0
 8007f32:	3401      	adds	r4, #1
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	4619      	mov	r1, r3
 8007f38:	f04f 0c0a 	mov.w	ip, #10
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f42:	3a30      	subs	r2, #48	; 0x30
 8007f44:	2a09      	cmp	r2, #9
 8007f46:	d903      	bls.n	8007f50 <_vfiprintf_r+0x1d0>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0c6      	beq.n	8007eda <_vfiprintf_r+0x15a>
 8007f4c:	9105      	str	r1, [sp, #20]
 8007f4e:	e7c4      	b.n	8007eda <_vfiprintf_r+0x15a>
 8007f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f54:	4604      	mov	r4, r0
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7f0      	b.n	8007f3c <_vfiprintf_r+0x1bc>
 8007f5a:	ab03      	add	r3, sp, #12
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	462a      	mov	r2, r5
 8007f60:	4b12      	ldr	r3, [pc, #72]	; (8007fac <_vfiprintf_r+0x22c>)
 8007f62:	a904      	add	r1, sp, #16
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7fd fe33 	bl	8005bd0 <_printf_float>
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	1c78      	adds	r0, r7, #1
 8007f6e:	d1d6      	bne.n	8007f1e <_vfiprintf_r+0x19e>
 8007f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f72:	07d9      	lsls	r1, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_vfiprintf_r+0x202>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_vfiprintf_r+0x202>
 8007f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f7e:	f7fe fc2e 	bl	80067de <__retarget_lock_release_recursive>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	065b      	lsls	r3, r3, #25
 8007f86:	f53f af1d 	bmi.w	8007dc4 <_vfiprintf_r+0x44>
 8007f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f8c:	e71c      	b.n	8007dc8 <_vfiprintf_r+0x48>
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	462a      	mov	r2, r5
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <_vfiprintf_r+0x22c>)
 8007f96:	a904      	add	r1, sp, #16
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7fe f8bd 	bl	8006118 <_printf_i>
 8007f9e:	e7e4      	b.n	8007f6a <_vfiprintf_r+0x1ea>
 8007fa0:	080099bf 	.word	0x080099bf
 8007fa4:	080099c9 	.word	0x080099c9
 8007fa8:	08005bd1 	.word	0x08005bd1
 8007fac:	08007d5b 	.word	0x08007d5b
 8007fb0:	080099c5 	.word	0x080099c5

08007fb4 <__swbuf_r>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	460e      	mov	r6, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	4605      	mov	r5, r0
 8007fbc:	b118      	cbz	r0, 8007fc6 <__swbuf_r+0x12>
 8007fbe:	6a03      	ldr	r3, [r0, #32]
 8007fc0:	b90b      	cbnz	r3, 8007fc6 <__swbuf_r+0x12>
 8007fc2:	f7fe faf3 	bl	80065ac <__sinit>
 8007fc6:	69a3      	ldr	r3, [r4, #24]
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	071a      	lsls	r2, r3, #28
 8007fce:	d525      	bpl.n	800801c <__swbuf_r+0x68>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	b31b      	cbz	r3, 800801c <__swbuf_r+0x68>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	6922      	ldr	r2, [r4, #16]
 8007fd8:	1a98      	subs	r0, r3, r2
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	b2f6      	uxtb	r6, r6
 8007fde:	4283      	cmp	r3, r0
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	dc04      	bgt.n	8007fee <__swbuf_r+0x3a>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7fe fa3e 	bl	8006468 <_fflush_r>
 8007fec:	b9e0      	cbnz	r0, 8008028 <__swbuf_r+0x74>
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	60a3      	str	r3, [r4, #8]
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	6022      	str	r2, [r4, #0]
 8007ffa:	701e      	strb	r6, [r3, #0]
 8007ffc:	6962      	ldr	r2, [r4, #20]
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	429a      	cmp	r2, r3
 8008002:	d004      	beq.n	800800e <__swbuf_r+0x5a>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	07db      	lsls	r3, r3, #31
 8008008:	d506      	bpl.n	8008018 <__swbuf_r+0x64>
 800800a:	2e0a      	cmp	r6, #10
 800800c:	d104      	bne.n	8008018 <__swbuf_r+0x64>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f7fe fa29 	bl	8006468 <_fflush_r>
 8008016:	b938      	cbnz	r0, 8008028 <__swbuf_r+0x74>
 8008018:	4638      	mov	r0, r7
 800801a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f806 	bl	8008030 <__swsetup_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0d5      	beq.n	8007fd4 <__swbuf_r+0x20>
 8008028:	f04f 37ff 	mov.w	r7, #4294967295
 800802c:	e7f4      	b.n	8008018 <__swbuf_r+0x64>
	...

08008030 <__swsetup_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4b2a      	ldr	r3, [pc, #168]	; (80080dc <__swsetup_r+0xac>)
 8008034:	4605      	mov	r5, r0
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	460c      	mov	r4, r1
 800803a:	b118      	cbz	r0, 8008044 <__swsetup_r+0x14>
 800803c:	6a03      	ldr	r3, [r0, #32]
 800803e:	b90b      	cbnz	r3, 8008044 <__swsetup_r+0x14>
 8008040:	f7fe fab4 	bl	80065ac <__sinit>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800804a:	0718      	lsls	r0, r3, #28
 800804c:	d422      	bmi.n	8008094 <__swsetup_r+0x64>
 800804e:	06d9      	lsls	r1, r3, #27
 8008050:	d407      	bmi.n	8008062 <__swsetup_r+0x32>
 8008052:	2309      	movs	r3, #9
 8008054:	602b      	str	r3, [r5, #0]
 8008056:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	e034      	b.n	80080cc <__swsetup_r+0x9c>
 8008062:	0758      	lsls	r0, r3, #29
 8008064:	d512      	bpl.n	800808c <__swsetup_r+0x5c>
 8008066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008068:	b141      	cbz	r1, 800807c <__swsetup_r+0x4c>
 800806a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800806e:	4299      	cmp	r1, r3
 8008070:	d002      	beq.n	8008078 <__swsetup_r+0x48>
 8008072:	4628      	mov	r0, r5
 8008074:	f7ff fa5a 	bl	800752c <_free_r>
 8008078:	2300      	movs	r3, #0
 800807a:	6363      	str	r3, [r4, #52]	; 0x34
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	2300      	movs	r3, #0
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f043 0308 	orr.w	r3, r3, #8
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	b94b      	cbnz	r3, 80080ac <__swsetup_r+0x7c>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800809e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a2:	d003      	beq.n	80080ac <__swsetup_r+0x7c>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 f884 	bl	80081b4 <__smakebuf_r>
 80080ac:	89a0      	ldrh	r0, [r4, #12]
 80080ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080b2:	f010 0301 	ands.w	r3, r0, #1
 80080b6:	d00a      	beq.n	80080ce <__swsetup_r+0x9e>
 80080b8:	2300      	movs	r3, #0
 80080ba:	60a3      	str	r3, [r4, #8]
 80080bc:	6963      	ldr	r3, [r4, #20]
 80080be:	425b      	negs	r3, r3
 80080c0:	61a3      	str	r3, [r4, #24]
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	b943      	cbnz	r3, 80080d8 <__swsetup_r+0xa8>
 80080c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080ca:	d1c4      	bne.n	8008056 <__swsetup_r+0x26>
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	0781      	lsls	r1, r0, #30
 80080d0:	bf58      	it	pl
 80080d2:	6963      	ldrpl	r3, [r4, #20]
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	e7f4      	b.n	80080c2 <__swsetup_r+0x92>
 80080d8:	2000      	movs	r0, #0
 80080da:	e7f7      	b.n	80080cc <__swsetup_r+0x9c>
 80080dc:	200006a0 	.word	0x200006a0

080080e0 <_raise_r>:
 80080e0:	291f      	cmp	r1, #31
 80080e2:	b538      	push	{r3, r4, r5, lr}
 80080e4:	4604      	mov	r4, r0
 80080e6:	460d      	mov	r5, r1
 80080e8:	d904      	bls.n	80080f4 <_raise_r+0x14>
 80080ea:	2316      	movs	r3, #22
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	f04f 30ff 	mov.w	r0, #4294967295
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80080f6:	b112      	cbz	r2, 80080fe <_raise_r+0x1e>
 80080f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080fc:	b94b      	cbnz	r3, 8008112 <_raise_r+0x32>
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f830 	bl	8008164 <_getpid_r>
 8008104:	462a      	mov	r2, r5
 8008106:	4601      	mov	r1, r0
 8008108:	4620      	mov	r0, r4
 800810a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800810e:	f000 b817 	b.w	8008140 <_kill_r>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d00a      	beq.n	800812c <_raise_r+0x4c>
 8008116:	1c59      	adds	r1, r3, #1
 8008118:	d103      	bne.n	8008122 <_raise_r+0x42>
 800811a:	2316      	movs	r3, #22
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	2001      	movs	r0, #1
 8008120:	e7e7      	b.n	80080f2 <_raise_r+0x12>
 8008122:	2400      	movs	r4, #0
 8008124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008128:	4628      	mov	r0, r5
 800812a:	4798      	blx	r3
 800812c:	2000      	movs	r0, #0
 800812e:	e7e0      	b.n	80080f2 <_raise_r+0x12>

08008130 <raise>:
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <raise+0xc>)
 8008132:	4601      	mov	r1, r0
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	f7ff bfd3 	b.w	80080e0 <_raise_r>
 800813a:	bf00      	nop
 800813c:	200006a0 	.word	0x200006a0

08008140 <_kill_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	; (8008160 <_kill_r+0x20>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	4611      	mov	r1, r2
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	f7f9 f85f 	bl	8001210 <_kill>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d102      	bne.n	800815c <_kill_r+0x1c>
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	b103      	cbz	r3, 800815c <_kill_r+0x1c>
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	20000b0c 	.word	0x20000b0c

08008164 <_getpid_r>:
 8008164:	f7f9 b852 	b.w	800120c <_getpid>

08008168 <__swhatbuf_r>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	460c      	mov	r4, r1
 800816c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008170:	2900      	cmp	r1, #0
 8008172:	b096      	sub	sp, #88	; 0x58
 8008174:	4615      	mov	r5, r2
 8008176:	461e      	mov	r6, r3
 8008178:	da0d      	bge.n	8008196 <__swhatbuf_r+0x2e>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	bf0c      	ite	eq
 8008186:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800818a:	2340      	movne	r3, #64	; 0x40
 800818c:	2000      	movs	r0, #0
 800818e:	6031      	str	r1, [r6, #0]
 8008190:	602b      	str	r3, [r5, #0]
 8008192:	b016      	add	sp, #88	; 0x58
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	466a      	mov	r2, sp
 8008198:	f000 f848 	bl	800822c <_fstat_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	dbec      	blt.n	800817a <__swhatbuf_r+0x12>
 80081a0:	9901      	ldr	r1, [sp, #4]
 80081a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081aa:	4259      	negs	r1, r3
 80081ac:	4159      	adcs	r1, r3
 80081ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b2:	e7eb      	b.n	800818c <__swhatbuf_r+0x24>

080081b4 <__smakebuf_r>:
 80081b4:	898b      	ldrh	r3, [r1, #12]
 80081b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081b8:	079d      	lsls	r5, r3, #30
 80081ba:	4606      	mov	r6, r0
 80081bc:	460c      	mov	r4, r1
 80081be:	d507      	bpl.n	80081d0 <__smakebuf_r+0x1c>
 80081c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	2301      	movs	r3, #1
 80081ca:	6163      	str	r3, [r4, #20]
 80081cc:	b002      	add	sp, #8
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	ab01      	add	r3, sp, #4
 80081d2:	466a      	mov	r2, sp
 80081d4:	f7ff ffc8 	bl	8008168 <__swhatbuf_r>
 80081d8:	9900      	ldr	r1, [sp, #0]
 80081da:	4605      	mov	r5, r0
 80081dc:	4630      	mov	r0, r6
 80081de:	f7fd fbcb 	bl	8005978 <_malloc_r>
 80081e2:	b948      	cbnz	r0, 80081f8 <__smakebuf_r+0x44>
 80081e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e8:	059a      	lsls	r2, r3, #22
 80081ea:	d4ef      	bmi.n	80081cc <__smakebuf_r+0x18>
 80081ec:	f023 0303 	bic.w	r3, r3, #3
 80081f0:	f043 0302 	orr.w	r3, r3, #2
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	e7e3      	b.n	80081c0 <__smakebuf_r+0xc>
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	6020      	str	r0, [r4, #0]
 80081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	6163      	str	r3, [r4, #20]
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	6120      	str	r0, [r4, #16]
 800820a:	b15b      	cbz	r3, 8008224 <__smakebuf_r+0x70>
 800820c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008210:	4630      	mov	r0, r6
 8008212:	f000 f81d 	bl	8008250 <_isatty_r>
 8008216:	b128      	cbz	r0, 8008224 <__smakebuf_r+0x70>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	f043 0301 	orr.w	r3, r3, #1
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	431d      	orrs	r5, r3
 8008228:	81a5      	strh	r5, [r4, #12]
 800822a:	e7cf      	b.n	80081cc <__smakebuf_r+0x18>

0800822c <_fstat_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	; (800824c <_fstat_r+0x20>)
 8008230:	2300      	movs	r3, #0
 8008232:	4604      	mov	r4, r0
 8008234:	4608      	mov	r0, r1
 8008236:	4611      	mov	r1, r2
 8008238:	602b      	str	r3, [r5, #0]
 800823a:	f7f9 f808 	bl	800124e <_fstat>
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	d102      	bne.n	8008248 <_fstat_r+0x1c>
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	b103      	cbz	r3, 8008248 <_fstat_r+0x1c>
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	bd38      	pop	{r3, r4, r5, pc}
 800824a:	bf00      	nop
 800824c:	20000b0c 	.word	0x20000b0c

08008250 <_isatty_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	; (800826c <_isatty_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7f8 fffc 	bl	8001258 <_isatty>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_isatty_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_isatty_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	20000b0c 	.word	0x20000b0c

08008270 <expf>:
 8008270:	b508      	push	{r3, lr}
 8008272:	ed2d 8b02 	vpush	{d8}
 8008276:	eef0 8a40 	vmov.f32	s17, s0
 800827a:	f000 f85f 	bl	800833c <__ieee754_expf>
 800827e:	eeb0 8a40 	vmov.f32	s16, s0
 8008282:	eeb0 0a68 	vmov.f32	s0, s17
 8008286:	f000 f829 	bl	80082dc <finitef>
 800828a:	b160      	cbz	r0, 80082a6 <expf+0x36>
 800828c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80082cc <expf+0x5c>
 8008290:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008298:	dd0a      	ble.n	80082b0 <expf+0x40>
 800829a:	f7fe fa75 	bl	8006788 <__errno>
 800829e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80082d0 <expf+0x60>
 80082a2:	2322      	movs	r3, #34	; 0x22
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	eeb0 0a48 	vmov.f32	s0, s16
 80082aa:	ecbd 8b02 	vpop	{d8}
 80082ae:	bd08      	pop	{r3, pc}
 80082b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80082d4 <expf+0x64>
 80082b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80082b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082bc:	d5f3      	bpl.n	80082a6 <expf+0x36>
 80082be:	f7fe fa63 	bl	8006788 <__errno>
 80082c2:	2322      	movs	r3, #34	; 0x22
 80082c4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80082d8 <expf+0x68>
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	e7ec      	b.n	80082a6 <expf+0x36>
 80082cc:	42b17217 	.word	0x42b17217
 80082d0:	7f800000 	.word	0x7f800000
 80082d4:	c2cff1b5 	.word	0xc2cff1b5
 80082d8:	00000000 	.word	0x00000000

080082dc <finitef>:
 80082dc:	b082      	sub	sp, #8
 80082de:	ed8d 0a01 	vstr	s0, [sp, #4]
 80082e2:	9801      	ldr	r0, [sp, #4]
 80082e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80082e8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80082ec:	bfac      	ite	ge
 80082ee:	2000      	movge	r0, #0
 80082f0:	2001      	movlt	r0, #1
 80082f2:	b002      	add	sp, #8
 80082f4:	4770      	bx	lr

080082f6 <with_errnof>:
 80082f6:	b513      	push	{r0, r1, r4, lr}
 80082f8:	4604      	mov	r4, r0
 80082fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80082fe:	f7fe fa43 	bl	8006788 <__errno>
 8008302:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008306:	6004      	str	r4, [r0, #0]
 8008308:	b002      	add	sp, #8
 800830a:	bd10      	pop	{r4, pc}

0800830c <xflowf>:
 800830c:	b130      	cbz	r0, 800831c <xflowf+0x10>
 800830e:	eef1 7a40 	vneg.f32	s15, s0
 8008312:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008316:	2022      	movs	r0, #34	; 0x22
 8008318:	f7ff bfed 	b.w	80082f6 <with_errnof>
 800831c:	eef0 7a40 	vmov.f32	s15, s0
 8008320:	e7f7      	b.n	8008312 <xflowf+0x6>
	...

08008324 <__math_uflowf>:
 8008324:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800832c <__math_uflowf+0x8>
 8008328:	f7ff bff0 	b.w	800830c <xflowf>
 800832c:	10000000 	.word	0x10000000

08008330 <__math_oflowf>:
 8008330:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008338 <__math_oflowf+0x8>
 8008334:	f7ff bfea 	b.w	800830c <xflowf>
 8008338:	70000000 	.word	0x70000000

0800833c <__ieee754_expf>:
 800833c:	ee10 2a10 	vmov	r2, s0
 8008340:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008344:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008348:	d902      	bls.n	8008350 <__ieee754_expf+0x14>
 800834a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800834e:	4770      	bx	lr
 8008350:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8008354:	d106      	bne.n	8008364 <__ieee754_expf+0x28>
 8008356:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008490 <__ieee754_expf+0x154>
 800835a:	2900      	cmp	r1, #0
 800835c:	bf18      	it	ne
 800835e:	eeb0 0a67 	vmovne.f32	s0, s15
 8008362:	4770      	bx	lr
 8008364:	484b      	ldr	r0, [pc, #300]	; (8008494 <__ieee754_expf+0x158>)
 8008366:	4282      	cmp	r2, r0
 8008368:	dd02      	ble.n	8008370 <__ieee754_expf+0x34>
 800836a:	2000      	movs	r0, #0
 800836c:	f7ff bfe0 	b.w	8008330 <__math_oflowf>
 8008370:	2a00      	cmp	r2, #0
 8008372:	da05      	bge.n	8008380 <__ieee754_expf+0x44>
 8008374:	4a48      	ldr	r2, [pc, #288]	; (8008498 <__ieee754_expf+0x15c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d902      	bls.n	8008380 <__ieee754_expf+0x44>
 800837a:	2000      	movs	r0, #0
 800837c:	f7ff bfd2 	b.w	8008324 <__math_uflowf>
 8008380:	4a46      	ldr	r2, [pc, #280]	; (800849c <__ieee754_expf+0x160>)
 8008382:	4293      	cmp	r3, r2
 8008384:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008388:	d952      	bls.n	8008430 <__ieee754_expf+0xf4>
 800838a:	4a45      	ldr	r2, [pc, #276]	; (80084a0 <__ieee754_expf+0x164>)
 800838c:	4293      	cmp	r3, r2
 800838e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008392:	d834      	bhi.n	80083fe <__ieee754_expf+0xc2>
 8008394:	4b43      	ldr	r3, [pc, #268]	; (80084a4 <__ieee754_expf+0x168>)
 8008396:	4413      	add	r3, r2
 8008398:	ed93 7a00 	vldr	s14, [r3]
 800839c:	4b42      	ldr	r3, [pc, #264]	; (80084a8 <__ieee754_expf+0x16c>)
 800839e:	4413      	add	r3, r2
 80083a0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80083a4:	f1c1 0201 	rsb	r2, r1, #1
 80083a8:	edd3 7a00 	vldr	s15, [r3]
 80083ac:	1a52      	subs	r2, r2, r1
 80083ae:	ee37 0a67 	vsub.f32	s0, s14, s15
 80083b2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80083b6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80084ac <__ieee754_expf+0x170>
 80083ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084b0 <__ieee754_expf+0x174>
 80083be:	eee6 6a05 	vfma.f32	s13, s12, s10
 80083c2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80084b4 <__ieee754_expf+0x178>
 80083c6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80083ca:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80084b8 <__ieee754_expf+0x17c>
 80083ce:	eee5 6a06 	vfma.f32	s13, s10, s12
 80083d2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80084bc <__ieee754_expf+0x180>
 80083d6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80083da:	eef0 6a40 	vmov.f32	s13, s0
 80083de:	eee5 6a46 	vfms.f32	s13, s10, s12
 80083e2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80083e6:	ee20 5a26 	vmul.f32	s10, s0, s13
 80083ea:	bb92      	cbnz	r2, 8008452 <__ieee754_expf+0x116>
 80083ec:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80083f0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80083f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80083f8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80083fc:	4770      	bx	lr
 80083fe:	4b30      	ldr	r3, [pc, #192]	; (80084c0 <__ieee754_expf+0x184>)
 8008400:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80084c4 <__ieee754_expf+0x188>
 8008404:	eddf 6a30 	vldr	s13, [pc, #192]	; 80084c8 <__ieee754_expf+0x18c>
 8008408:	4413      	add	r3, r2
 800840a:	edd3 7a00 	vldr	s15, [r3]
 800840e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008412:	eeb0 7a40 	vmov.f32	s14, s0
 8008416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800841a:	ee17 2a90 	vmov	r2, s15
 800841e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008422:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008426:	eddf 6a29 	vldr	s13, [pc, #164]	; 80084cc <__ieee754_expf+0x190>
 800842a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800842e:	e7be      	b.n	80083ae <__ieee754_expf+0x72>
 8008430:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8008434:	d20b      	bcs.n	800844e <__ieee754_expf+0x112>
 8008436:	eddf 6a26 	vldr	s13, [pc, #152]	; 80084d0 <__ieee754_expf+0x194>
 800843a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800843e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008446:	dd02      	ble.n	800844e <__ieee754_expf+0x112>
 8008448:	ee30 0a25 	vadd.f32	s0, s0, s11
 800844c:	4770      	bx	lr
 800844e:	2200      	movs	r2, #0
 8008450:	e7af      	b.n	80083b2 <__ieee754_expf+0x76>
 8008452:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008456:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800845a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800845e:	bfb8      	it	lt
 8008460:	3264      	addlt	r2, #100	; 0x64
 8008462:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800846a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800846e:	ee17 3a90 	vmov	r3, s15
 8008472:	bfab      	itete	ge
 8008474:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008478:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800847c:	ee00 3a10 	vmovge	s0, r3
 8008480:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80084d4 <__ieee754_expf+0x198>
 8008484:	bfbc      	itt	lt
 8008486:	ee00 3a10 	vmovlt	s0, r3
 800848a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800848e:	4770      	bx	lr
 8008490:	00000000 	.word	0x00000000
 8008494:	42b17217 	.word	0x42b17217
 8008498:	42cff1b5 	.word	0x42cff1b5
 800849c:	3eb17218 	.word	0x3eb17218
 80084a0:	3f851591 	.word	0x3f851591
 80084a4:	080099d8 	.word	0x080099d8
 80084a8:	080099e0 	.word	0x080099e0
 80084ac:	3331bb4c 	.word	0x3331bb4c
 80084b0:	b5ddea0e 	.word	0xb5ddea0e
 80084b4:	388ab355 	.word	0x388ab355
 80084b8:	bb360b61 	.word	0xbb360b61
 80084bc:	3e2aaaab 	.word	0x3e2aaaab
 80084c0:	080099d0 	.word	0x080099d0
 80084c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80084c8:	3f317180 	.word	0x3f317180
 80084cc:	3717f7d1 	.word	0x3717f7d1
 80084d0:	7149f2ca 	.word	0x7149f2ca
 80084d4:	0d800000 	.word	0x0d800000

080084d8 <_init>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr

080084e4 <_fini>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr
