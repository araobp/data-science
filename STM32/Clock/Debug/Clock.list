
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d0  080070d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d8  080070d8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080070e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  0800713c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800713c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013246  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac1  00000000  00000000  00033315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7f  00000000  00000000  00036e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027867  00000000  00000000  00037a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001493e  00000000  00000000  0005f2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f155d  00000000  00000000  00073c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ab8  00000000  00000000  00165184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00169c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ebc 	.word	0x08006ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006ebc 	.word	0x08006ebc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <write_command>:

/*
 * AQM1602XA-RN-GBW
 * LCD write command
 */
void write_command(uint8_t command) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[2] = { 0x00, 0x00 };
 8000586:	2300      	movs	r3, #0
 8000588:	81bb      	strh	r3, [r7, #12]
  buf[1] = command;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <write_command+0x34>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	217c      	movs	r1, #124	; 0x7c
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	f001 faeb 	bl	8001b78 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fea4 	bl	80012f0 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000078 	.word	0x20000078

080005b4 <write_data>:

/*
 * AQM1602XA-RN-GBW
 * LCD write data
 */
void write_data(uint8_t data) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[2] = { 0x40, 0x00 };
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	81bb      	strh	r3, [r7, #12]
  buf[1] = data;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <write_data+0x34>)
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	217c      	movs	r1, #124	; 0x7c
 80005cc:	f107 020c 	add.w	r2, r7, #12
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2302      	movs	r3, #2
 80005d6:	f001 facf 	bl	8001b78 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fe88 	bl	80012f0 <HAL_Delay>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000078 	.word	0x20000078

080005ec <lcd_init>:

void lcd_init(I2C_HandleTypeDef *p_hi2c) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  phi2c = p_hi2c;
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <lcd_init+0x60>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(50);
 80005fa:	2032      	movs	r0, #50	; 0x32
 80005fc:	f000 fe78 	bl	80012f0 <HAL_Delay>
  write_command(0x38);
 8000600:	2038      	movs	r0, #56	; 0x38
 8000602:	f7ff ffbb 	bl	800057c <write_command>
  write_command(0x39);
 8000606:	2039      	movs	r0, #57	; 0x39
 8000608:	f7ff ffb8 	bl	800057c <write_command>
  write_command(0x14);
 800060c:	2014      	movs	r0, #20
 800060e:	f7ff ffb5 	bl	800057c <write_command>
  write_command(0x73);  // Contrast: C3=0 C2=0 C1=1 C0=1
 8000612:	2073      	movs	r0, #115	; 0x73
 8000614:	f7ff ffb2 	bl	800057c <write_command>
  write_command(0x52);  // Contrast: BON=0 C5=1 C4=0
 8000618:	2052      	movs	r0, #82	; 0x52
 800061a:	f7ff ffaf 	bl	800057c <write_command>
  write_command(0x6c);
 800061e:	206c      	movs	r0, #108	; 0x6c
 8000620:	f7ff ffac 	bl	800057c <write_command>
  HAL_Delay(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fe63 	bl	80012f0 <HAL_Delay>
  write_command(0x38);
 800062a:	2038      	movs	r0, #56	; 0x38
 800062c:	f7ff ffa6 	bl	800057c <write_command>
  write_command(0x01);
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff ffa3 	bl	800057c <write_command>
  write_command(0x0c);
 8000636:	200c      	movs	r0, #12
 8000638:	f7ff ffa0 	bl	800057c <write_command>
  HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 fe57 	bl	80012f0 <HAL_Delay>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000078 	.word	0x20000078

08000650 <lcd_clear>:

void lcd_clear(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  write_command(0x01);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff91 	bl	800057c <write_command>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <lcd_newline>:

void lcd_newline(void) {
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  write_command(0xc0);
 8000662:	20c0      	movs	r0, #192	; 0xc0
 8000664:	f7ff ff8a 	bl	800057c <write_command>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <lcd_move_right>:

void lcd_move_left(void) {
  write_command(0x10);
}

void lcd_move_right(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  write_command(0x14);
 8000670:	2014      	movs	r0, #20
 8000672:	f7ff ff83 	bl	800057c <write_command>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}

0800067a <lcd_string>:

void lcd_string(uint8_t *pbuf, uint8_t len) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  for(i=0; i<len; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e009      	b.n	80006a0 <lcd_string+0x26>
    write_data(pbuf[i]);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff8d 	bl	80005b4 <write_data>
  for(i=0; i<len; i++) {
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	3301      	adds	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f1      	bcc.n	800068c <lcd_string+0x12>
  }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <lcd_test>:

void lcd_test(void) {
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  write_data(0x33);  // 3
 80006b6:	2033      	movs	r0, #51	; 0x33
 80006b8:	f7ff ff7c 	bl	80005b4 <write_data>
  write_data(0x37);  // 7
 80006bc:	2037      	movs	r0, #55	; 0x37
 80006be:	f7ff ff79 	bl	80005b4 <write_data>
  write_data(0x2e);  // .
 80006c2:	202e      	movs	r0, #46	; 0x2e
 80006c4:	f7ff ff76 	bl	80005b4 <write_data>
  write_data(0x30);  // 0
 80006c8:	2030      	movs	r0, #48	; 0x30
 80006ca:	f7ff ff73 	bl	80005b4 <write_data>
  write_data(0xf2);  // o
 80006ce:	20f2      	movs	r0, #242	; 0xf2
 80006d0:	f7ff ff70 	bl	80005b4 <write_data>
  write_data(0x43);  // C
 80006d4:	2043      	movs	r0, #67	; 0x43
 80006d6:	f7ff ff6d 	bl	80005b4 <write_data>
  write_command(0xc0);  // new line
 80006da:	20c0      	movs	r0, #192	; 0xc0
 80006dc:	f7ff ff4e 	bl	800057c <write_command>
  write_data(0x28);  // (
 80006e0:	2028      	movs	r0, #40	; 0x28
 80006e2:	f7ff ff67 	bl	80005b4 <write_data>
  write_data(0x5e);  // ~
 80006e6:	205e      	movs	r0, #94	; 0x5e
 80006e8:	f7ff ff64 	bl	80005b4 <write_data>
  write_data(0x2d);  // -
 80006ec:	202d      	movs	r0, #45	; 0x2d
 80006ee:	f7ff ff61 	bl	80005b4 <write_data>
  write_data(0x5e);  // ~
 80006f2:	205e      	movs	r0, #94	; 0x5e
 80006f4:	f7ff ff5e 	bl	80005b4 <write_data>
  write_data(0x29);  // )
 80006f8:	2029      	movs	r0, #41	; 0x29
 80006fa:	f7ff ff5b 	bl	80005b4 <write_data>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <get_current_datetime>:
static void MX_RTC_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_current_datetime(current_datetime *dt, bool add_seconds) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;

  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);  // RTC Time
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	483a      	ldr	r0, [pc, #232]	; (8000804 <get_current_datetime+0x100>)
 800071a:	f003 fa42 	bl	8003ba2 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);  // RTC Date
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	4837      	ldr	r0, [pc, #220]	; (8000804 <get_current_datetime+0x100>)
 8000728:	f003 fb1e 	bl	8003d68 <HAL_RTC_GetDate>

  sprintf(dt->date, "20%02d/%02d/%02d", sDate.Year, sDate.Month, sDate.Date);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	7ffb      	ldrb	r3, [r7, #31]
 8000730:	461a      	mov	r2, r3
 8000732:	7f7b      	ldrb	r3, [r7, #29]
 8000734:	4619      	mov	r1, r3
 8000736:	7fbb      	ldrb	r3, [r7, #30]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	460b      	mov	r3, r1
 800073c:	4932      	ldr	r1, [pc, #200]	; (8000808 <get_current_datetime+0x104>)
 800073e:	f005 fa5f 	bl	8005c00 <siprintf>
  if (add_seconds) {
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00d      	beq.n	8000764 <get_current_datetime+0x60>
    sprintf(dt->time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 000b 	add.w	r0, r3, #11
 800074e:	7a3b      	ldrb	r3, [r7, #8]
 8000750:	461a      	mov	r2, r3
 8000752:	7a7b      	ldrb	r3, [r7, #9]
 8000754:	4619      	mov	r1, r3
        sTime.Seconds);
 8000756:	7abb      	ldrb	r3, [r7, #10]
    sprintf(dt->time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	460b      	mov	r3, r1
 800075c:	492b      	ldr	r1, [pc, #172]	; (800080c <get_current_datetime+0x108>)
 800075e:	f005 fa4f 	bl	8005c00 <siprintf>
 8000762:	e00c      	b.n	800077e <get_current_datetime+0x7a>
  } else {
    sprintf(dt->time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 000b 	add.w	r0, r3, #11
 800076a:	7a3b      	ldrb	r3, [r7, #8]
 800076c:	461a      	mov	r2, r3
 800076e:	7a7b      	ldrb	r3, [r7, #9]
 8000770:	4619      	mov	r1, r3
        sTime.Seconds);
 8000772:	7abb      	ldrb	r3, [r7, #10]
    sprintf(dt->time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	460b      	mov	r3, r1
 8000778:	4924      	ldr	r1, [pc, #144]	; (800080c <get_current_datetime+0x108>)
 800077a:	f005 fa41 	bl	8005c00 <siprintf>
  }

  switch (sDate.WeekDay) {
 800077e:	7f3b      	ldrb	r3, [r7, #28]
 8000780:	3b01      	subs	r3, #1
 8000782:	2b06      	cmp	r3, #6
 8000784:	d83a      	bhi.n	80007fc <get_current_datetime+0xf8>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <get_current_datetime+0x88>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007a9 	.word	0x080007a9
 8000790:	080007b5 	.word	0x080007b5
 8000794:	080007c1 	.word	0x080007c1
 8000798:	080007cd 	.word	0x080007cd
 800079c:	080007d9 	.word	0x080007d9
 80007a0:	080007e5 	.word	0x080007e5
 80007a4:	080007f1 	.word	0x080007f1
  case RTC_WEEKDAY_MONDAY:
    strcpy(dt->weekday, "MON");
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3314      	adds	r3, #20
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <get_current_datetime+0x10c>)
 80007ae:	6810      	ldr	r0, [r2, #0]
 80007b0:	6018      	str	r0, [r3, #0]
    break;
 80007b2:	e023      	b.n	80007fc <get_current_datetime+0xf8>
  case RTC_WEEKDAY_TUESDAY:
    strcpy(dt->weekday, "TUE");
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3314      	adds	r3, #20
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <get_current_datetime+0x110>)
 80007ba:	6810      	ldr	r0, [r2, #0]
 80007bc:	6018      	str	r0, [r3, #0]
    break;
 80007be:	e01d      	b.n	80007fc <get_current_datetime+0xf8>
  case RTC_WEEKDAY_WEDNESDAY:
    strcpy(dt->weekday, "WED");
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3314      	adds	r3, #20
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <get_current_datetime+0x114>)
 80007c6:	6810      	ldr	r0, [r2, #0]
 80007c8:	6018      	str	r0, [r3, #0]
    break;
 80007ca:	e017      	b.n	80007fc <get_current_datetime+0xf8>
  case RTC_WEEKDAY_THURSDAY:
    strcpy(dt->weekday, "THU");
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3314      	adds	r3, #20
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <get_current_datetime+0x118>)
 80007d2:	6810      	ldr	r0, [r2, #0]
 80007d4:	6018      	str	r0, [r3, #0]
    break;
 80007d6:	e011      	b.n	80007fc <get_current_datetime+0xf8>
  case RTC_WEEKDAY_FRIDAY:
    strcpy(dt->weekday, "FRI");
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3314      	adds	r3, #20
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <get_current_datetime+0x11c>)
 80007de:	6810      	ldr	r0, [r2, #0]
 80007e0:	6018      	str	r0, [r3, #0]
    break;
 80007e2:	e00b      	b.n	80007fc <get_current_datetime+0xf8>
  case RTC_WEEKDAY_SATURDAY:
    strcpy(dt->weekday, "SAT");
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3314      	adds	r3, #20
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <get_current_datetime+0x120>)
 80007ea:	6810      	ldr	r0, [r2, #0]
 80007ec:	6018      	str	r0, [r3, #0]
    break;
 80007ee:	e005      	b.n	80007fc <get_current_datetime+0xf8>
  case RTC_WEEKDAY_SUNDAY:
    strcpy(dt->weekday, "SUN");
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3314      	adds	r3, #20
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <get_current_datetime+0x124>)
 80007f6:	6810      	ldr	r0, [r2, #0]
 80007f8:	6018      	str	r0, [r3, #0]
    break;
 80007fa:	bf00      	nop
  }
}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000d0 	.word	0x200000d0
 8000808:	08006ed4 	.word	0x08006ed4
 800080c:	08006ee8 	.word	0x08006ee8
 8000810:	08006ef8 	.word	0x08006ef8
 8000814:	08006efc 	.word	0x08006efc
 8000818:	08006f00 	.word	0x08006f00
 800081c:	08006f04 	.word	0x08006f04
 8000820:	08006f08 	.word	0x08006f08
 8000824:	08006f0c 	.word	0x08006f0c
 8000828:	08006f10 	.word	0x08006f10

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fce8 	bl	8001206 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f83f 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f99f 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083e:	f000 f96d 	bl	8000b1c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000842:	f000 f8d9 	bl	80009f8 <MX_RTC_Init>
  MX_I2C1_Init();
 8000846:	f000 f897 	bl	8000978 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	4916      	ldr	r1, [pc, #88]	; (80008a8 <main+0x7c>)
 800084e:	4817      	ldr	r0, [pc, #92]	; (80008ac <main+0x80>)
 8000850:	f003 fee6 	bl	8004620 <HAL_UART_Receive_IT>

  lcd_init(&hi2c1);
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <main+0x84>)
 8000856:	f7ff fec9 	bl	80005ec <lcd_init>
  lcd_test();
 800085a:	f7ff ff2a 	bl	80006b2 <lcd_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (alerted) {
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <main+0x88>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0fb      	beq.n	800085e <main+0x32>
      get_current_datetime(&cd, false);
 8000866:	463b      	mov	r3, r7
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff4a 	bl	8000704 <get_current_datetime>
      lcd_clear();
 8000870:	f7ff feee 	bl	8000650 <lcd_clear>
      lcd_string((uint8_t*) cd.date, sizeof(cd.date));
 8000874:	463b      	mov	r3, r7
 8000876:	210b      	movs	r1, #11
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fefe 	bl	800067a <lcd_string>
      lcd_move_right();
 800087e:	f7ff fef5 	bl	800066c <lcd_move_right>
      lcd_string((uint8_t*) cd.weekday, sizeof(cd.weekday));
 8000882:	463b      	mov	r3, r7
 8000884:	3314      	adds	r3, #20
 8000886:	2104      	movs	r1, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fef6 	bl	800067a <lcd_string>
      lcd_newline();
 800088e:	f7ff fee6 	bl	800065e <lcd_newline>
      lcd_string((uint8_t*) cd.time, sizeof(cd.time));
 8000892:	463b      	mov	r3, r7
 8000894:	330b      	adds	r3, #11
 8000896:	2109      	movs	r1, #9
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff feee 	bl	800067a <lcd_string>
      alerted = false;
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <main+0x88>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
    if (alerted) {
 80008a4:	e7db      	b.n	800085e <main+0x32>
 80008a6:	bf00      	nop
 80008a8:	2000017c 	.word	0x2000017c
 80008ac:	200000f4 	.word	0x200000f4
 80008b0:	2000007c 	.word	0x2000007c
 80008b4:	2000017d 	.word	0x2000017d

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b096      	sub	sp, #88	; 0x58
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2244      	movs	r2, #68	; 0x44
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 f9e8 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008de:	f001 fd29 	bl	8002334 <HAL_PWREx_ControlVoltageScaling>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008e8:	f000 fab0 	bl	8000e4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ec:	f001 fd04 	bl	80022f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <SystemClock_Config+0xbc>)
 80008f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <SystemClock_Config+0xbc>)
 80008f8:	f023 0318 	bic.w	r3, r3, #24
 80008fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000900:	2306      	movs	r3, #6
 8000902:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090e:	2310      	movs	r3, #16
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000916:	2302      	movs	r3, #2
 8000918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800091e:	230a      	movs	r3, #10
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000922:	2307      	movs	r3, #7
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fd54 	bl	80023e0 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800093e:	f000 fa85 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2303      	movs	r3, #3
 8000948:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	2104      	movs	r1, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f91c 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000966:	f000 fa71 	bl	8000e4c <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3758      	adds	r7, #88	; 0x58
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_I2C1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_I2C1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_I2C1_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_I2C1_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_I2C1_Init+0x74>)
 80009b4:	f001 f844 	bl	8001a40 <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 fa45 	bl	8000e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_I2C1_Init+0x74>)
 80009c6:	f001 fbff 	bl	80021c8 <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 fa3c 	bl	8000e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_I2C1_Init+0x74>)
 80009d8:	f001 fc41 	bl	800225e <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fa33 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000007c 	.word	0x2000007c
 80009f0:	40005400 	.word	0x40005400
 80009f4:	10909cec 	.word	0x10909cec

080009f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b092      	sub	sp, #72	; 0x48
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	222c      	movs	r2, #44	; 0x2c
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f005 f93f 	bl	8005c9c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a20:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <MX_RTC_Init+0x11c>)
 8000a22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a2c:	227f      	movs	r2, #127	; 0x7f
 8000a2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a30:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a4e:	4830      	ldr	r0, [pc, #192]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a50:	f002 ff82 	bl	8003958 <HAL_RTC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000a5a:	f000 f9f7 	bl	8000e4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_RTC_Init+0x118>)
 8000a82:	f002 fff1 	bl	8003a68 <HAL_RTC_SetTime>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000a8c:	f000 f9de 	bl	8000e4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000a90:	2307      	movs	r3, #7
 8000a92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x23;
 8000aa2:	2323      	movs	r3, #35	; 0x23
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4817      	ldr	r0, [pc, #92]	; (8000b10 <MX_RTC_Init+0x118>)
 8000ab2:	f003 f8d2 	bl	8003c5a <HAL_RTC_SetDate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000abc:	f000 f9c6 	bl	8000e4c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_RTC_Init+0x120>)
 8000ada:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2201      	movs	r2, #1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_RTC_Init+0x118>)
 8000af8:	f003 f984 	bl	8003e04 <HAL_RTC_SetAlarm_IT>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000b02:	f000 f9a3 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3748      	adds	r7, #72	; 0x48
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	40002800 	.word	0x40002800
 8000b18:	80808000 	.word	0x80808000

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART2_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b60:	f003 fc85 	bl	800446e <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f96f 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000f4 	.word	0x200000f4
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_GPIO_Init+0xd4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f000 fed7 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <MX_GPIO_Init+0xd8>)
 8000c16:	f000 fd1f 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f000 fd10 	bl	8001658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2028      	movs	r0, #40	; 0x28
 8000c3e:	f000 fc56 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c42:	2028      	movs	r0, #40	; 0x28
 8000c44:	f000 fc6f 	bl	8001526 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000800 	.word	0x48000800

08000c58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]

  current_datetime cd;

  char newline[] = { '\n' };
 8000c62:	230a      	movs	r3, #10
 8000c64:	733b      	strb	r3, [r7, #12]

  if (GPIO_Pin == GPIO_PIN_13) {  // User button (blue tactile switch)
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c6c:	d138      	bne.n	8000ce0 <HAL_GPIO_EXTI_Callback+0x88>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // LD2
 8000c6e:	2120      	movs	r1, #32
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 feb2 	bl	80019dc <HAL_GPIO_TogglePin>

    get_current_datetime(&cd, true);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fd40 	bl	8000704 <get_current_datetime>

    HAL_UART_Transmit(&huart2, (uint8_t*) cd.date, sizeof(cd.date), 100); // RTC date
 8000c84:	f107 0110 	add.w	r1, r7, #16
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	220b      	movs	r2, #11
 8000c8c:	4816      	ldr	r0, [pc, #88]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000c8e:	f003 fc3c 	bl	800450a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) newline, 1, 100);  // new line
 8000c92:	f107 010c 	add.w	r1, r7, #12
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000c9c:	f003 fc35 	bl	800450a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) cd.time, sizeof(cd.time), 100); // RTC time
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	f103 010b 	add.w	r1, r3, #11
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2209      	movs	r2, #9
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000cae:	f003 fc2c 	bl	800450a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) newline, 1, 100);  // new line
 8000cb2:	f107 010c 	add.w	r1, r7, #12
 8000cb6:	2364      	movs	r3, #100	; 0x64
 8000cb8:	2201      	movs	r2, #1
 8000cba:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000cbc:	f003 fc25 	bl	800450a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) cd.weekday, sizeof(cd.weekday), 100); // RTC weekday
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	f103 0114 	add.w	r1, r3, #20
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000cce:	f003 fc1c 	bl	800450a <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) newline, 1, 100);  // new line
 8000cd2:	f107 010c 	add.w	r1, r7, #12
 8000cd6:	2364      	movs	r3, #100	; 0x64
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000cdc:	f003 fc15 	bl	800450a <HAL_UART_Transmit>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000f4 	.word	0x200000f4

08000cec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b096      	sub	sp, #88	; 0x58
 8000cf0:	af06      	add	r7, sp, #24
 8000cf2:	6078      	str	r0, [r7, #4]
  static uint8_t cnt = 0;
  int year, month, date, hours, minutes, seconds, weekday;
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  cmd_buf[cnt++] = rxbuf[0];
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <HAL_UART_RxCpltCallback+0xe8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	b2d1      	uxtb	r1, r2
 8000cfc:	4a35      	ldr	r2, [pc, #212]	; (8000dd4 <HAL_UART_RxCpltCallback+0xe8>)
 8000cfe:	7011      	strb	r1, [r2, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <HAL_UART_RxCpltCallback+0xec>)
 8000d04:	7819      	ldrb	r1, [r3, #0]
 8000d06:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <HAL_UART_RxCpltCallback+0xf0>)
 8000d08:	5499      	strb	r1, [r3, r2]
  //HAL_UART_Transmit_IT(&huart2, rxbuf, 1);  // Echo back

  if (rxbuf[0] == '\n') {
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <HAL_UART_RxCpltCallback+0xec>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b0a      	cmp	r3, #10
 8000d10:	d157      	bne.n	8000dc2 <HAL_UART_RxCpltCallback+0xd6>
    cmd_buf[cnt] = '\0';
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_UART_RxCpltCallback+0xf0>)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	5499      	strb	r1, [r3, r2]
    sscanf((char*) cmd_buf, "%d %d %d %d %d %d %d", &year, &month, &date,
 8000d1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d22:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	9304      	str	r3, [sp, #16]
 8000d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d30:	9303      	str	r3, [sp, #12]
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	460b      	mov	r3, r1
 8000d46:	4926      	ldr	r1, [pc, #152]	; (8000de0 <HAL_UART_RxCpltCallback+0xf4>)
 8000d48:	4824      	ldr	r0, [pc, #144]	; (8000ddc <HAL_UART_RxCpltCallback+0xf0>)
 8000d4a:	f004 ff79 	bl	8005c40 <siscanf>
        &hours, &minutes, &seconds, &weekday);
    cnt = 0;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]

    /* Initialize RTC and set the Time and Date */
    sTime.Hours = hours;
 8000d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	743b      	strb	r3, [r7, #16]
    sTime.Minutes = minutes;
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	747b      	strb	r3, [r7, #17]
    sTime.Seconds = seconds;
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	74bb      	strb	r3, [r7, #18]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	481b      	ldr	r0, [pc, #108]	; (8000de4 <HAL_UART_RxCpltCallback+0xf8>)
 8000d78:	f002 fe76 	bl	8003a68 <HAL_RTC_SetTime>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_UART_RxCpltCallback+0x9a>
      Error_Handler();
 8000d82:	f000 f863 	bl	8000e4c <Error_Handler>
    }

    sDate.WeekDay = weekday;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	733b      	strb	r3, [r7, #12]
    sDate.Month = month;
 8000d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	737b      	strb	r3, [r7, #13]
    sDate.Date = date;
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	73bb      	strb	r3, [r7, #14]
    sDate.Year = year;
 8000d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_UART_RxCpltCallback+0xf8>)
 8000da8:	f002 ff57 	bl	8003c5a <HAL_RTC_SetDate>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_UART_RxCpltCallback+0xca>
      Error_Handler();
 8000db2:	f000 f84b 	bl	8000e4c <Error_Handler>
    }

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8000db6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_UART_RxCpltCallback+0xf8>)
 8000dbe:	f003 fb3d 	bl	800443c <HAL_RTCEx_BKUPWrite>

  }
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <HAL_UART_RxCpltCallback+0xec>)
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_UART_RxCpltCallback+0xfc>)
 8000dc8:	f003 fc2a 	bl	8004620 <HAL_UART_Receive_IT>
}
 8000dcc:	bf00      	nop
 8000dce:	3740      	adds	r7, #64	; 0x40
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000017e 	.word	0x2000017e
 8000dd8:	2000017c 	.word	0x2000017c
 8000ddc:	20000180 	.word	0x20000180
 8000de0:	08006f14 	.word	0x08006f14
 8000de4:	200000d0 	.word	0x200000d0
 8000de8:	200000f4 	.word	0x200000f4

08000dec <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc, &sAlarm, RTC_ALARM_A, FORMAT_BIN);
 8000df4:	f107 010c 	add.w	r1, r7, #12
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f003 f93c 	bl	800407c <HAL_RTC_GetAlarm>
  if (sAlarm.AlarmTime.Seconds > 58) {
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	2b3a      	cmp	r3, #58	; 0x3a
 8000e08:	d902      	bls.n	8000e10 <HAL_RTC_AlarmAEventCallback+0x24>
    sAlarm.AlarmTime.Seconds = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	e003      	b.n	8000e18 <HAL_RTC_AlarmAEventCallback+0x2c>
  } else {
    sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 1;
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73bb      	strb	r3, [r7, #14]
  }
  while (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN) != HAL_OK) {
 8000e18:	bf00      	nop
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f002 ffee 	bl	8003e04 <HAL_RTC_SetAlarm_IT>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f5      	bne.n	8000e1a <HAL_RTC_AlarmAEventCallback+0x2e>
  }

  alerted = true;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_RTC_AlarmAEventCallback+0x5c>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  // Blink LD2
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e34:	2120      	movs	r1, #32
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f000 fdcf 	bl	80019dc <HAL_GPIO_TogglePin>
}
 8000e3e:	bf00      	nop
 8000e40:	3738      	adds	r7, #56	; 0x38
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000017d 	.word	0x2000017d

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x44>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x44>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ac      	sub	sp, #176	; 0xb0
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2288      	movs	r2, #136	; 0x88
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 feeb 	bl	8005c9c <memset>
  if(hi2c->Instance==I2C1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_I2C_MspInit+0xb0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d13b      	bne.n	8000f48 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 f87f 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ee8:	f7ff ffb0 	bl	8000e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_I2C_MspInit+0xb4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <HAL_I2C_MspInit+0xb4>)
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_I2C_MspInit+0xb4>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0c:	2312      	movs	r3, #18
 8000f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480b      	ldr	r0, [pc, #44]	; (8000f58 <HAL_I2C_MspInit+0xb8>)
 8000f2c:	f000 fb94 	bl	8001658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_I2C_MspInit+0xb4>)
 8000f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_I2C_MspInit+0xb4>)
 8000f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_I2C_MspInit+0xb4>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	37b0      	adds	r7, #176	; 0xb0
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40005400 	.word	0x40005400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400

08000f5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0a4      	sub	sp, #144	; 0x90
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2288      	movs	r2, #136	; 0x88
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fe95 	bl	8005c9c <memset>
  if(hrtc->Instance==RTC)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_RTC_MspInit+0x6c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d120      	bne.n	8000fbe <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 f826 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f9a:	f7ff ff57 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_RTC_MspInit+0x70>)
 8000fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_RTC_MspInit+0x70>)
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2029      	movs	r0, #41	; 0x29
 8000fb4:	f000 fa9b 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000fb8:	2029      	movs	r0, #41	; 0x29
 8000fba:	f000 fab4 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3790      	adds	r7, #144	; 0x90
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40002800 	.word	0x40002800
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ac      	sub	sp, #176	; 0xb0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2288      	movs	r2, #136	; 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fe53 	bl	8005c9c <memset>
  if(huart->Instance==USART2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a25      	ldr	r2, [pc, #148]	; (8001090 <HAL_UART_MspInit+0xc0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d143      	bne.n	8001088 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f001 ffe7 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff ff18 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001026:	6593      	str	r3, [r2, #88]	; 0x58
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104c:	230c      	movs	r3, #12
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f000 faf0 	bl	8001658 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2026      	movs	r0, #38	; 0x26
 800107e:	f000 fa36 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001082:	2026      	movs	r0, #38	; 0x26
 8001084:	f000 fa4f 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	37b0      	adds	r7, #176	; 0xb0
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40004400 	.word	0x40004400
 8001094:	40021000 	.word	0x40021000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 f8e4 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <USART2_IRQHandler+0x10>)
 80010f2:	f003 fae1 	bl	80046b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000f4 	.word	0x200000f4

08001100 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001104:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001108:	f000 fc82 	bl	8001a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <RTC_Alarm_IRQHandler+0x10>)
 8001116:	f003 f871 	bl	80041fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000d0 	.word	0x200000d0

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f004 fdaa 	bl	8005cac <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20018000 	.word	0x20018000
 8001184:	00000400 	.word	0x00000400
 8001188:	200001a0 	.word	0x200001a0
 800118c:	200002f0 	.word	0x200002f0

08001190 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	; (80011f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	; (8001200 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f004 fd69 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011e6:	f7ff fb21 	bl	800082c <main>

080011ea <LoopForever>:

LoopForever:
    b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011f8:	080070e0 	.word	0x080070e0
  ldr r2, =_sbss
 80011fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001200:	200002f0 	.word	0x200002f0

08001204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_2_IRQHandler>

08001206 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f961 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f80e 	bl	8001238 <HAL_InitTick>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	e001      	b.n	800122c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001228:	f7ff fe16 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800122c:	79fb      	ldrb	r3, [r7, #7]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_InitTick+0x6c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d023      	beq.n	8001294 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_InitTick+0x70>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_InitTick+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f96d 	bl	8001542 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10f      	bne.n	800128e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d809      	bhi.n	8001288 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f937 	bl	80014ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_InitTick+0x74>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e007      	b.n	8001298 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e004      	b.n	8001298 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e001      	b.n	8001298 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	200001a4 	.word	0x200001a4

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200001a4 	.word	0x200001a4

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff ffee 	bl	80012d8 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001316:	bf00      	nop
 8001318:	f7ff ffde 	bl	80012d8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff29 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff3e 	bl	8001380 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff31 	bl	800139c <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa2 	bl	8001494 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d008      	beq.n	8001584 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e022      	b.n	80015ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 020e 	bic.w	r2, r2, #14
 8001592:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 021c 	and.w	r2, r3, #28
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d005      	beq.n	80015fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2204      	movs	r2, #4
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e029      	b.n	800164e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020e 	bic.w	r2, r2, #14
 8001608:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 021c 	and.w	r2, r3, #28
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
    }
  }
  return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e17f      	b.n	8001968 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8171 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d005      	beq.n	8001698 <HAL_GPIO_Init+0x40>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d130      	bne.n	80016fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ce:	2201      	movs	r2, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 0201 	and.w	r2, r3, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b03      	cmp	r3, #3
 8001704:	d118      	bne.n	8001738 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800170c:	2201      	movs	r2, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	f003 0201 	and.w	r2, r3, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b03      	cmp	r3, #3
 8001742:	d017      	beq.n	8001774 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	6939      	ldr	r1, [r7, #16]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80ac 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_GPIO_Init+0x330>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_GPIO_Init+0x330>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6613      	str	r3, [r2, #96]	; 0x60
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_GPIO_Init+0x330>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001822:	4a5a      	ldr	r2, [pc, #360]	; (800198c <HAL_GPIO_Init+0x334>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x242>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x338>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x23e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x33c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x23a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x340>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x236>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x344>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x232>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x348>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x22e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x22a>
 800187e:	2306      	movs	r3, #6
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001882:	2307      	movs	r3, #7
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x244>
 800189a:	2300      	movs	r3, #0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ac:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_GPIO_Init+0x334>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_GPIO_Init+0x350>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <HAL_GPIO_Init+0x350>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_GPIO_Init+0x350>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_GPIO_Init+0x350>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_GPIO_Init+0x350>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x350>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_GPIO_Init+0x350>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_GPIO_Init+0x350>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae78 	bne.w	8001668 <HAL_GPIO_Init+0x10>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	48000400 	.word	0x48000400
 8001994:	48000800 	.word	0x48000800
 8001998:	48000c00 	.word	0x48000c00
 800199c:	48001000 	.word	0x48001000
 80019a0:	48001400 	.word	0x48001400
 80019a4:	48001800 	.word	0x48001800
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43d9      	mvns	r1, r3
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	400b      	ands	r3, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f912 	bl	8000c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e08d      	b.n	8001b6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fa1a 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2224      	movs	r2, #36	; 0x24
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	e006      	b.n	8001ac8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ac6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d108      	bne.n	8001ae2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	e007      	b.n	8001af2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69d9      	ldr	r1, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	461a      	mov	r2, r3
 8001b84:	460b      	mov	r3, r1
 8001b86:	817b      	strh	r3, [r7, #10]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	f040 80fd 	bne.w	8001d94 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_I2C_Master_Transmit+0x30>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0f6      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x21e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bb0:	f7ff fb92 	bl	80012d8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2319      	movs	r3, #25
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f914 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e1      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2221      	movs	r2, #33	; 0x21
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	893a      	ldrh	r2, [r7, #8]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2bff      	cmp	r3, #255	; 0xff
 8001c02:	d906      	bls.n	8001c12 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e007      	b.n	8001c22 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c20:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d024      	beq.n	8001c74 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <HAL_I2C_Master_Transmit+0x228>)
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fa79 	bl	8002164 <I2C_TransferConfig>
 8001c72:	e066      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	8979      	ldrh	r1, [r7, #10]
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_I2C_Master_Transmit+0x228>)
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fa6e 	bl	8002164 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c88:	e05b      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	6a39      	ldr	r1, [r7, #32]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8fd 	bl	8001e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07b      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d034      	beq.n	8001d42 <HAL_I2C_Master_Transmit+0x1ca>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d130      	bne.n	8001d42 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f880 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e04d      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2bff      	cmp	r3, #255	; 0xff
 8001d02:	d90e      	bls.n	8001d22 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	22ff      	movs	r2, #255	; 0xff
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fa22 	bl	8002164 <I2C_TransferConfig>
 8001d20:	e00f      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	8979      	ldrh	r1, [r7, #10]
 8001d34:	2300      	movs	r3, #0
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 fa11 	bl	8002164 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d19e      	bne.n	8001c8a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	6a39      	ldr	r1, [r7, #32]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f8e3 	bl	8001f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e01a      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2220      	movs	r2, #32
 8001d66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_I2C_Master_Transmit+0x22c>)
 8001d74:	400b      	ands	r3, r1
 8001d76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	80002000 	.word	0x80002000
 8001da4:	fe00e800 	.word	0xfe00e800

08001da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d103      	bne.n	8001dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d007      	beq.n	8001de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	619a      	str	r2, [r3, #24]
  }
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e00:	e031      	b.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d02d      	beq.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0a:	f7ff fa65 	bl	80012d8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d122      	bne.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d113      	bne.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0220 	orr.w	r2, r3, #32
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d0be      	beq.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e9a:	e033      	b.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f87f 	bl	8001fa4 <I2C_IsErrorOccurred>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e031      	b.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d025      	beq.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb8:	f7ff fa0e 	bl	80012d8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d11a      	bne.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d013      	beq.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e007      	b.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d1c4      	bne.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f28:	e02f      	b.n	8001f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f838 	bl	8001fa4 <I2C_IsErrorOccurred>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02d      	b.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7ff f9cb 	bl	80012d8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11a      	bne.n	8001f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d013      	beq.n	8001f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e007      	b.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d1c8      	bne.n	8001f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d068      	beq.n	80020a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fd8:	e049      	b.n	800206e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d045      	beq.n	800206e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f979 	bl	80012d8 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_IsErrorOccurred+0x54>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d13a      	bne.n	800206e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800200a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201a:	d121      	bne.n	8002060 <I2C_IsErrorOccurred+0xbc>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002022:	d01d      	beq.n	8002060 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b20      	cmp	r3, #32
 8002028:	d01a      	beq.n	8002060 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002038:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800203a:	f7ff f94d 	bl	80012d8 <HAL_GetTick>
 800203e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002040:	e00e      	b.n	8002060 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002042:	f7ff f949 	bl	80012d8 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b19      	cmp	r3, #25
 800204e:	d907      	bls.n	8002060 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800205e:	e006      	b.n	800206e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	d1e9      	bne.n	8002042 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d003      	beq.n	8002084 <I2C_IsErrorOccurred+0xe0>
 800207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0aa      	beq.n	8001fda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2220      	movs	r2, #32
 8002092:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01c      	beq.n	8002152 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff fe45 	bl	8001da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <I2C_IsErrorOccurred+0x1bc>)
 800212a:	400b      	ands	r3, r1
 800212c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002156:	4618      	mov	r0, r3
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	fe00e800 	.word	0xfe00e800

08002164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	817b      	strh	r3, [r7, #10]
 8002172:	4613      	mov	r3, r2
 8002174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800217c:	7a7b      	ldrb	r3, [r7, #9]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002184:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	4313      	orrs	r3, r2
 800218e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002192:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <I2C_TransferConfig+0x60>)
 80021a4:	430b      	orrs	r3, r1
 80021a6:	43db      	mvns	r3, r3
 80021a8:	ea02 0103 	and.w	r1, r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	03ff63ff 	.word	0x03ff63ff

080021c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d138      	bne.n	8002250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e032      	b.n	8002252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800221a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b20      	cmp	r3, #32
 8002272:	d139      	bne.n	80022e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800227e:	2302      	movs	r3, #2
 8002280:	e033      	b.n	80022ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2224      	movs	r2, #36	; 0x24
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40007000 	.word	0x40007000

08002318 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_PWREx_GetVoltageRange+0x18>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40007000 	.word	0x40007000

08002334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002342:	d130      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800234c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002350:	d038      	beq.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800235a:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2232      	movs	r2, #50	; 0x32
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0c9b      	lsrs	r3, r3, #18
 8002374:	3301      	adds	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002378:	e002      	b.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3b01      	subs	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238c:	d102      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x60>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f2      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a0:	d110      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e00f      	b.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b2:	d007      	beq.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023bc:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40007000 	.word	0x40007000
 80023d8:	20000000 	.word	0x20000000
 80023dc:	431bde83 	.word	0x431bde83

080023e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e3ca      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f2:	4b97      	ldr	r3, [pc, #604]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023fc:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80e4 	beq.w	80025dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_RCC_OscConfig+0x4a>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	f040 808b 	bne.w	8002538 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 8087 	bne.w	8002538 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e3a2      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	4b82      	ldr	r3, [pc, #520]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_RCC_OscConfig+0x7c>
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245a:	e005      	b.n	8002468 <HAL_RCC_OscConfig+0x88>
 800245c:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002468:	4293      	cmp	r3, r2
 800246a:	d223      	bcs.n	80024b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fd55 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e383      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002480:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a72      	ldr	r2, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	496d      	ldr	r1, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249e:	4b6c      	ldr	r3, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	4968      	ldr	r1, [pc, #416]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
 80024b2:	e025      	b.n	8002500 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b4:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4960      	ldr	r1, [pc, #384]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	495b      	ldr	r1, [pc, #364]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fd15 	bl	8002f20 <RCC_SetFlashLatencyFromMSIRange>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e343      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002500:	f000 fc4a 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b52      	ldr	r3, [pc, #328]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4950      	ldr	r1, [pc, #320]	; (8002654 <HAL_RCC_OscConfig+0x274>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	4a4e      	ldr	r2, [pc, #312]	; (8002658 <HAL_RCC_OscConfig+0x278>)
 800251e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_RCC_OscConfig+0x27c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fe87 	bl	8001238 <HAL_InitTick>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d052      	beq.n	80025da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	e327      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d032      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002540:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a42      	ldr	r2, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800254c:	f7fe fec4 	bl	80012d8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002554:	f7fe fec0 	bl	80012d8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e310      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002566:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a36      	ldr	r2, [pc, #216]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4931      	ldr	r1, [pc, #196]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	492c      	ldr	r1, [pc, #176]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
 80025a4:	e01a      	b.n	80025dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fe91 	bl	80012d8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ba:	f7fe fe8d 	bl	80012d8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e2dd      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x1da>
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d074      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x21a>
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d10e      	bne.n	8002612 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d10b      	bne.n	8002612 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d064      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d160      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e2ba      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x24a>
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e026      	b.n	8002678 <HAL_RCC_OscConfig+0x298>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002632:	d115      	bne.n	8002660 <HAL_RCC_OscConfig+0x280>
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 800263a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a02      	ldr	r2, [pc, #8]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x298>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	08006f38 	.word	0x08006f38
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004
 8002660:	4ba0      	ldr	r3, [pc, #640]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a9f      	ldr	r2, [pc, #636]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b9d      	ldr	r3, [pc, #628]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a9c      	ldr	r2, [pc, #624]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fe2a 	bl	80012d8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe fe26 	bl	80012d8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e276      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269a:	4b92      	ldr	r3, [pc, #584]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x2a8>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fe16 	bl	80012d8 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fe12 	bl	80012d8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e262      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c2:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2d0>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d060      	beq.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x310>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d119      	bne.n	800271e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d116      	bne.n	800271e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f0:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_OscConfig+0x328>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e23f      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	4973      	ldr	r1, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271c:	e040      	b.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d023      	beq.n	800276e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002726:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fdd1 	bl	80012d8 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fdcd 	bl	80012d8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e21d      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800274c:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b62      	ldr	r3, [pc, #392]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	495f      	ldr	r1, [pc, #380]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e018      	b.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276e:	4b5d      	ldr	r3, [pc, #372]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5c      	ldr	r2, [pc, #368]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fdad 	bl	80012d8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe fda9 	bl	80012d8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1f9      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d03c      	beq.n	8002826 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01c      	beq.n	80027ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b4:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ba:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fd88 	bl	80012d8 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fd84 	bl	80012d8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1d4      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80027e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ef      	beq.n	80027cc <HAL_RCC_OscConfig+0x3ec>
 80027ec:	e01b      	b.n	8002826 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80027f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f4:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fd6b 	bl	80012d8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fd67 	bl	80012d8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1b7      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ef      	bne.n	8002806 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80a6 	beq.w	8002980 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002838:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10d      	bne.n	8002860 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	6593      	str	r3, [r2, #88]	; 0x58
 8002850:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285c:	2301      	movs	r3, #1
 800285e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_RCC_OscConfig+0x508>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d118      	bne.n	800289e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_OscConfig+0x508>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x508>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002878:	f7fe fd2e 	bl	80012d8 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe fd2a 	bl	80012d8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e17a      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x508>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d108      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4d8>
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b6:	e029      	b.n	800290c <HAL_RCC_OscConfig+0x52c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d115      	bne.n	80028ec <HAL_RCC_OscConfig+0x50c>
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <HAL_RCC_OscConfig+0x504>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e0:	e014      	b.n	800290c <HAL_RCC_OscConfig+0x52c>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40007000 	.word	0x40007000
 80028ec:	4b9c      	ldr	r3, [pc, #624]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	4a9b      	ldr	r2, [pc, #620]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028fc:	4b98      	ldr	r3, [pc, #608]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	4a97      	ldr	r2, [pc, #604]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d016      	beq.n	8002942 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fce0 	bl	80012d8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe fcdc 	bl	80012d8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e12a      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002932:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ed      	beq.n	800291c <HAL_RCC_OscConfig+0x53c>
 8002940:	e015      	b.n	800296e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fcc9 	bl	80012d8 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fcc5 	bl	80012d8 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e113      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002960:	4b7f      	ldr	r3, [pc, #508]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ed      	bne.n	800294a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296e:	7ffb      	ldrb	r3, [r7, #31]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002974:	4b7a      	ldr	r3, [pc, #488]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4a79      	ldr	r2, [pc, #484]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80fe 	beq.w	8002b86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	2b02      	cmp	r3, #2
 8002990:	f040 80d0 	bne.w	8002b34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002994:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0203 	and.w	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d130      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	3b01      	subs	r3, #1
 80029b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d127      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d11f      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d4:	2a07      	cmp	r2, #7
 80029d6:	bf14      	ite	ne
 80029d8:	2201      	movne	r2, #1
 80029da:	2200      	moveq	r2, #0
 80029dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029de:	4293      	cmp	r3, r2
 80029e0:	d113      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d06e      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	d069      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0ad      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a4b      	ldr	r2, [pc, #300]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a38:	f7fe fc4e 	bl	80012d8 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fc4a 	bl	80012d8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e09a      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_RCC_OscConfig+0x784>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a78:	0212      	lsls	r2, r2, #8
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0552      	lsls	r2, r2, #21
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a8c:	0852      	lsrs	r2, r2, #1
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	0652      	lsls	r2, r2, #25
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a98:	0912      	lsrs	r2, r2, #4
 8002a9a:	0452      	lsls	r2, r2, #17
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	4930      	ldr	r1, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002abc:	f7fe fc0c 	bl	80012d8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fc08 	bl	80012d8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e058      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae2:	e050      	b.n	8002b86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e04f      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d148      	bne.n	8002b86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b0c:	f7fe fbe4 	bl	80012d8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fbe0 	bl	80012d8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e030      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x734>
 8002b32:	e028      	b.n	8002b86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d023      	beq.n	8002b82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_RCC_OscConfig+0x780>)
 8002b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fbc7 	bl	80012d8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	e00c      	b.n	8002b68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe fbc3 	bl	80012d8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d905      	bls.n	8002b68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e013      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
 8002b60:	40021000 	.word	0x40021000
 8002b64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ec      	bne.n	8002b4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4905      	ldr	r1, [pc, #20]	; (8002b90 <HAL_RCC_OscConfig+0x7b0>)
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCC_OscConfig+0x7b4>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
 8002b80:	e001      	b.n	8002b86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	feeefffc 	.word	0xfeeefffc

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0e7      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4970      	ldr	r1, [pc, #448]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0cf      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d908      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4960      	ldr	r1, [pc, #384]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04c      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a6      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e09a      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e086      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4943      	ldr	r1, [pc, #268]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe fb2a 	bl	80012d8 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe fb26 	bl	80012d8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d208      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	492b      	ldr	r1, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d210      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4910      	ldr	r1, [pc, #64]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4c:	f000 f824 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	490b      	ldr	r1, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1f4>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1fc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fa61 	bl	8001238 <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08006f38 	.word	0x08006f38
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d11e      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e004      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d134      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d003      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xac>
 8002e3c:	e005      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e40:	617b      	str	r3, [r7, #20]
      break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e46:	617b      	str	r3, [r7, #20]
      break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	0e5b      	lsrs	r3, r3, #25
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e90:	69bb      	ldr	r3, [r7, #24]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08006f50 	.word	0x08006f50
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	007a1200 	.word	0x007a1200

08002eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08006f48 	.word	0x08006f48

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef8:	f7ff ffda 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08006f48 	.word	0x08006f48

08002f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff f9ee 	bl	8002318 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
 8002f3e:	e014      	b.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f9de 	bl	8002318 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f70:	d10b      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d919      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f7c:	d902      	bls.n	8002f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7e:	2302      	movs	r3, #2
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e013      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e010      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d902      	bls.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f90:	2303      	movs	r3, #3
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e00a      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d102      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e004      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d101      	bne.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d041      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003004:	d02a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800300a:	d824      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800300c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003016:	d81e      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800301c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003020:	d010      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003022:	e018      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003024:	4b86      	ldr	r3, [pc, #536]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a85      	ldr	r2, [pc, #532]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003030:	e015      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fabb 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003042:	e00c      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3320      	adds	r3, #32
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fba6 	bl	800379c <RCCEx_PLLSAI2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003054:	e003      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	74fb      	strb	r3, [r7, #19]
      break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800305c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003064:	4b76      	ldr	r3, [pc, #472]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003072:	4973      	ldr	r1, [pc, #460]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d041      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003094:	d02a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003096:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800309a:	d824      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800309c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a6:	d81e      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b0:	d010      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030b2:	e018      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b4:	4b62      	ldr	r3, [pc, #392]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a61      	ldr	r2, [pc, #388]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c0:	e015      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fa73 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030d2:	e00c      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3320      	adds	r3, #32
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fb5e 	bl	800379c <RCCEx_PLLSAI2_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030e4:	e003      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ea:	e000      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030f4:	4b52      	ldr	r3, [pc, #328]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003102:	494f      	ldr	r1, [pc, #316]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800310a:	e001      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a0 	beq.w	800325e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	4a40      	ldr	r2, [pc, #256]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	6593      	str	r3, [r2, #88]	; 0x58
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003150:	2301      	movs	r3, #1
 8003152:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003160:	f7fe f8ba 	bl	80012d8 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003166:	e009      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7fe f8b6 	bl	80012d8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d902      	bls.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	74fb      	strb	r3, [r7, #19]
        break;
 800317a:	e005      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800317c:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ef      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d15c      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800318e:	4b2c      	ldr	r3, [pc, #176]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003198:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01f      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d019      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	4a20      	ldr	r2, [pc, #128]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe f875 	bl	80012d8 <HAL_GetTick>
 80031ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f0:	e00b      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe f871 	bl	80012d8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d902      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	74fb      	strb	r3, [r7, #19]
            break;
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ec      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322e:	4904      	ldr	r1, [pc, #16]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003236:	e009      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	74bb      	strb	r3, [r7, #18]
 800323c:	e006      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324c:	7c7b      	ldrb	r3, [r7, #17]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003252:	4b9e      	ldr	r3, [pc, #632]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	4a9d      	ldr	r2, [pc, #628]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800326a:	4b98      	ldr	r3, [pc, #608]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f023 0203 	bic.w	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	4994      	ldr	r1, [pc, #592]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800328c:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f023 020c 	bic.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329a:	498c      	ldr	r1, [pc, #560]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ae:	4b87      	ldr	r3, [pc, #540]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	4983      	ldr	r1, [pc, #524]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d0:	4b7e      	ldr	r3, [pc, #504]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	497b      	ldr	r1, [pc, #492]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032f2:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003300:	4972      	ldr	r1, [pc, #456]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003314:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	496a      	ldr	r1, [pc, #424]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	4961      	ldr	r1, [pc, #388]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003358:	4b5c      	ldr	r3, [pc, #368]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	4959      	ldr	r1, [pc, #356]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003388:	4950      	ldr	r1, [pc, #320]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800339c:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	4948      	ldr	r1, [pc, #288]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033be:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	493f      	ldr	r1, [pc, #252]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d028      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e0:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ee:	4937      	ldr	r1, [pc, #220]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fe:	d106      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340a:	60d3      	str	r3, [r2, #12]
 800340c:	e011      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003416:	d10c      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f8c8 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d028      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800343e:	4b23      	ldr	r3, [pc, #140]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	491f      	ldr	r1, [pc, #124]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345c:	d106      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003468:	60d3      	str	r3, [r2, #12]
 800346a:	e011      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003474:	d10c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f899 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ba:	d109      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a02      	ldr	r2, [pc, #8]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	60d3      	str	r3, [r2, #12]
 80034c8:	e014      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2101      	movs	r1, #1
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f867 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02f      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	4928      	ldr	r1, [pc, #160]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351e:	d10d      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2102      	movs	r1, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f844 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	74bb      	strb	r3, [r7, #18]
 800353a:	e011      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003544:	d10c      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3320      	adds	r3, #32
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f925 	bl	800379c <RCCEx_PLLSAI2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357a:	490d      	ldr	r1, [pc, #52]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359e:	4904      	ldr	r1, [pc, #16]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000

080035b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c2:	4b75      	ldr	r3, [pc, #468]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
       ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035e6:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
       ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d047      	beq.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI1_Config+0x86>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x62>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI1_Config+0x74>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b57      	ldr	r3, [pc, #348]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	430b      	orrs	r3, r1
 8003684:	4944      	ldr	r1, [pc, #272]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d17d      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003690:	4b41      	ldr	r3, [pc, #260]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a40      	ldr	r2, [pc, #256]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fd fe1c 	bl	80012d8 <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a2:	e009      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a4:	f7fd fe18 	bl	80012d8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	73fb      	strb	r3, [r7, #15]
        break;
 80036b6:	e005      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d160      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	0912      	lsrs	r2, r2, #4
 80036e8:	0452      	lsls	r2, r2, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	492a      	ldr	r1, [pc, #168]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	610b      	str	r3, [r1, #16]
 80036f2:	e027      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d112      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	0211      	lsls	r1, r2, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6912      	ldr	r2, [r2, #16]
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0552      	lsls	r2, r2, #21
 8003716:	430a      	orrs	r2, r1
 8003718:	491f      	ldr	r1, [pc, #124]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
 800371e:	e011      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6952      	ldr	r2, [r2, #20]
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0652      	lsls	r2, r2, #25
 800373c:	430a      	orrs	r2, r1
 800373e:	4916      	ldr	r1, [pc, #88]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a13      	ldr	r2, [pc, #76]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800374e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fdc2 	bl	80012d8 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003756:	e009      	b.n	800376c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003758:	f7fd fdbe 	bl	80012d8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	73fb      	strb	r3, [r7, #15]
          break;
 800376a:	e005      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	4904      	ldr	r1, [pc, #16]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000

0800379c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0203 	and.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10d      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ce:	4b61      	ldr	r3, [pc, #388]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
       ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d047      	beq.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e044      	b.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d018      	beq.n	8003822 <RCCEx_PLLSAI2_Config+0x86>
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d825      	bhi.n	8003840 <RCCEx_PLLSAI2_Config+0xa4>
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d002      	beq.n	80037fe <RCCEx_PLLSAI2_Config+0x62>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d009      	beq.n	8003810 <RCCEx_PLLSAI2_Config+0x74>
 80037fc:	e020      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fe:	4b55      	ldr	r3, [pc, #340]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11d      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380e:	e01a      	b.n	8003846 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d116      	bne.n	800384a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003820:	e013      	b.n	800384a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383e:	e006      	b.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e004      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	430b      	orrs	r3, r1
 800386c:	4939      	ldr	r1, [pc, #228]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d167      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a35      	ldr	r2, [pc, #212]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7fd fd28 	bl	80012d8 <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800388a:	e009      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800388c:	f7fd fd24 	bl	80012d8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
        break;
 800389e:	e005      	b.n	80038ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ef      	bne.n	800388c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d14a      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
 80038c8:	0211      	lsls	r1, r2, #8
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	0912      	lsrs	r2, r2, #4
 80038d0:	0452      	lsls	r2, r2, #17
 80038d2:	430a      	orrs	r2, r1
 80038d4:	491f      	ldr	r1, [pc, #124]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	614b      	str	r3, [r1, #20]
 80038da:	e011      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	0211      	lsls	r1, r2, #8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6912      	ldr	r2, [r2, #16]
 80038f2:	0852      	lsrs	r2, r2, #1
 80038f4:	3a01      	subs	r2, #1
 80038f6:	0652      	lsls	r2, r2, #25
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4916      	ldr	r1, [pc, #88]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fce4 	bl	80012d8 <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003914:	f7fd fce0 	bl	80012d8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
          break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d079      	beq.n	8003a5e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd faec 	bl	8000f5c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b10      	cmp	r3, #16
 8003998:	d058      	beq.n	8003a4c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	22ca      	movs	r2, #202	; 0xca
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2253      	movs	r2, #83	; 0x53
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fc90 	bl	80042d0 <RTC_EnterInitMode>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d127      	bne.n	8003a0a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039cc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68d2      	ldr	r2, [r2, #12]
 80039f4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fc94 	bl	8004338 <RTC_ExitInitMode>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d113      	bne.n	8003a42 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0203 	bic.w	r2, r2, #3
 8003a28:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
 8003a4a:	e001      	b.n	8003a50 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_RTC_SetTime+0x1a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e08b      	b.n	8003b9a <HAL_RTC_SetTime+0x132>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	22ca      	movs	r2, #202	; 0xca
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2253      	movs	r2, #83	; 0x53
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fc14 	bl	80042d0 <RTC_EnterInitMode>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d163      	bne.n	8003b7a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d126      	bne.n	8003b06 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fc6f 	bl	80043b4 <RTC_ByteToBcd2>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fc68 	bl	80043b4 <RTC_ByteToBcd2>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ae8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	789b      	ldrb	r3, [r3, #2]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fc60 	bl	80043b4 <RTC_ByteToBcd2>
 8003af4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003af6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	78db      	ldrb	r3, [r3, #3]
 8003afe:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e018      	b.n	8003b38 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2200      	movs	r2, #0
 8003b18:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b26:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b2c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	78db      	ldrb	r3, [r3, #3]
 8003b32:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6899      	ldr	r1, [r3, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fbe1 	bl	8004338 <RTC_ExitInitMode>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}

08003ba2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003bd0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	0d9b      	lsrs	r3, r3, #22
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11a      	bne.n	8003c50 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fbe8 	bl	80043f4 <RTC_Bcd2ToByte>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fbdf 	bl	80043f4 <RTC_Bcd2ToByte>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	789b      	ldrb	r3, [r3, #2]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fbd6 	bl	80043f4 <RTC_Bcd2ToByte>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_RTC_SetDate+0x1a>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e075      	b.n	8003d60 <HAL_RTC_SetDate+0x106>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10e      	bne.n	8003ca8 <HAL_RTC_SetDate+0x4e>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	f023 0310 	bic.w	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	330a      	adds	r3, #10
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11c      	bne.n	8003ce8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	78db      	ldrb	r3, [r3, #3]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fb7e 	bl	80043b4 <RTC_ByteToBcd2>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb77 	bl	80043b4 <RTC_ByteToBcd2>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003cca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	789b      	ldrb	r3, [r3, #2]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fb6f 	bl	80043b4 <RTC_ByteToBcd2>
 8003cd6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003cd8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e00e      	b.n	8003d06 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	785b      	ldrb	r3, [r3, #1]
 8003cf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003cf4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003cfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	22ca      	movs	r2, #202	; 0xca
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2253      	movs	r2, #83	; 0x53
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fada 	bl	80042d0 <RTC_EnterInitMode>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10c      	bne.n	8003d40 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fafe 	bl	8004338 <RTC_ExitInitMode>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}

08003d68 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11a      	bne.n	8003df8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	78db      	ldrb	r3, [r3, #3]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fb14 	bl	80043f4 <RTC_Bcd2ToByte>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fb0b 	bl	80043f4 <RTC_Bcd2ToByte>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	789b      	ldrb	r3, [r3, #2]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fb02 	bl	80043f4 <RTC_Bcd2ToByte>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_RTC_SetAlarm_IT+0x1a>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e127      	b.n	800406e <HAL_RTC_SetAlarm_IT+0x26a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d137      	bne.n	8003ea4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fab1 	bl	80043b4 <RTC_ByteToBcd2>
 8003e52:	4603      	mov	r3, r0
 8003e54:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 faaa 	bl	80043b4 <RTC_ByteToBcd2>
 8003e60:	4603      	mov	r3, r0
 8003e62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e64:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	789b      	ldrb	r3, [r3, #2]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 faa2 	bl	80043b4 <RTC_ByteToBcd2>
 8003e70:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003e72:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	78db      	ldrb	r3, [r3, #3]
 8003e7a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003e7c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa94 	bl	80043b4 <RTC_ByteToBcd2>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003e90:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003e98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e023      	b.n	8003eec <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ec4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003eca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	78db      	ldrb	r3, [r3, #3]
 8003ed0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ed2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eda:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003edc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ee2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	22ca      	movs	r2, #202	; 0xca
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2253      	movs	r2, #83	; 0x53
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f10:	d14a      	bne.n	8003fa8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f20:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003f32:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003f34:	f7fd f9d0 	bl	80012d8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f3a:	e015      	b.n	8003f68 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f3c:	f7fd f9cc 	bl	80012d8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4a:	d90d      	bls.n	8003f68 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2203      	movs	r2, #3
 8003f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e082      	b.n	800406e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0e2      	beq.n	8003f3c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f94:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	e049      	b.n	800403c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fb6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003fc8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003fca:	f7fd f985 	bl	80012d8 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003fd0:	e015      	b.n	8003ffe <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fd2:	f7fd f981 	bl	80012d8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fe0:	d90d      	bls.n	8003ffe <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e037      	b.n	800406e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0e2      	beq.n	8003fd2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_RTC_SetAlarm_IT+0x274>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <HAL_RTC_SetAlarm_IT+0x274>)
 8004042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004046:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RTC_SetAlarm_IT+0x274>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_RTC_SetAlarm_IT+0x274>)
 800404e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004052:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	bf00      	nop
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d143      	bne.n	800411a <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004098:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80040ac:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	0d9b      	lsrs	r3, r3, #22
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	0e1b      	lsrs	r3, r3, #24
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	615a      	str	r2, [r3, #20]
 8004118:	e042      	b.n	80041a0 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004120:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004130:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004134:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0d9b      	lsrs	r3, r3, #22
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	0e1b      	lsrs	r3, r3, #24
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d125      	bne.n	80041f2 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f922 	bl	80043f4 <RTC_Bcd2ToByte>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f919 	bl	80043f4 <RTC_Bcd2ToByte>
 80041c2:	4603      	mov	r3, r0
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	789b      	ldrb	r3, [r3, #2]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f910 	bl	80043f4 <RTC_Bcd2ToByte>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f906 	bl	80043f4 <RTC_Bcd2ToByte>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004204:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004206:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800420a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d012      	beq.n	8004240 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004238:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fdd6 	bl	8000dec <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f462 7220 	orn	r2, r2, #640	; 0x280
 800426c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8da 	bl	8004428 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40010400 	.word	0x40010400

08004288 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <HAL_RTC_WaitForSynchro+0x44>)
 8004296:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004298:	f7fd f81e 	bl	80012d8 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800429e:	e009      	b.n	80042b4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042a0:	f7fd f81a 	bl	80012d8 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ae:	d901      	bls.n	80042b4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e007      	b.n	80042c4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ee      	beq.n	80042a0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	0003ff5f 	.word	0x0003ff5f

080042d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d120      	bne.n	800432c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f04f 32ff 	mov.w	r2, #4294967295
 80042f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80042f4:	f7fc fff0 	bl	80012d8 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80042fa:	e00d      	b.n	8004318 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80042fc:	f7fc ffec 	bl	80012d8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430a:	d905      	bls.n	8004318 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2203      	movs	r2, #3
 8004314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <RTC_EnterInitMode+0x5c>
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d1e7      	bne.n	80042fc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <RTC_ExitInitMode+0x78>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <RTC_ExitInitMode+0x78>)
 800434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004350:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <RTC_ExitInitMode+0x78>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10c      	bne.n	8004376 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff93 	bl	8004288 <HAL_RTC_WaitForSynchro>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01e      	beq.n	80043a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2203      	movs	r2, #3
 800436c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e017      	b.n	80043a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <RTC_ExitInitMode+0x78>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <RTC_ExitInitMode+0x78>)
 800437c:	f023 0320 	bic.w	r3, r3, #32
 8004380:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff80 	bl	8004288 <HAL_RTC_WaitForSynchro>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <RTC_ExitInitMode+0x78>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <RTC_ExitInitMode+0x78>)
 80043a0:	f043 0320 	orr.w	r3, r3, #32
 80043a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40002800 	.word	0x40002800

080043b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80043c6:	e005      	b.n	80043d4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80043ce:	7afb      	ldrb	r3, [r7, #11]
 80043d0:	3b0a      	subs	r3, #10
 80043d2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	d8f6      	bhi.n	80043c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	0092      	lsls	r2, r2, #2
 8004408:	4413      	add	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	b2da      	uxtb	r2, r3
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	4413      	add	r3, r2
 800441a:	b2db      	uxtb	r3, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3350      	adds	r3, #80	; 0x50
 800444e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4413      	add	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e040      	b.n	8004502 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fc fd9d 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2224      	movs	r2, #36	; 0x24
 800449a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fec1 	bl	800523c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fc06 	bl	8004ccc <UART_SetConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e01b      	b.n	8004502 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 ff40 	bl	8005380 <UART_CheckIdleState>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b08a      	sub	sp, #40	; 0x28
 800450e:	af02      	add	r7, sp, #8
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451e:	2b20      	cmp	r3, #32
 8004520:	d178      	bne.n	8004614 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_UART_Transmit+0x24>
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e071      	b.n	8004616 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2221      	movs	r2, #33	; 0x21
 800453e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004540:	f7fc feca 	bl	80012d8 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	d108      	bne.n	8004572 <HAL_UART_Transmit+0x68>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e003      	b.n	800457a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800457a:	e030      	b.n	80045de <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2200      	movs	r2, #0
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 ffa2 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e03c      	b.n	8004616 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	881a      	ldrh	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ae:	b292      	uxth	r2, r2
 80045b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	3302      	adds	r3, #2
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e008      	b.n	80045cc <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b292      	uxth	r2, r2
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3301      	adds	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1c8      	bne.n	800457c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 ff6b 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e005      	b.n	8004616 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004634:	2b20      	cmp	r3, #32
 8004636:	d137      	bne.n	80046a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Receive_IT+0x24>
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e030      	b.n	80046aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_UART_Receive_IT+0x94>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01f      	beq.n	8004698 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d018      	beq.n	8004698 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	613b      	str	r3, [r7, #16]
   return(result);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	69f9      	ldr	r1, [r7, #28]
 800468a:	6a3a      	ldr	r2, [r7, #32]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	61bb      	str	r3, [r7, #24]
   return(result);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e6      	bne.n	8004666 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	461a      	mov	r2, r3
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 ff7e 	bl	80055a0 <UART_Start_Receive_IT>
 80046a4:	4603      	mov	r3, r0
 80046a6:	e000      	b.n	80046aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3728      	adds	r7, #40	; 0x28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40008000 	.word	0x40008000

080046b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b0ba      	sub	sp, #232	; 0xe8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80046e6:	4013      	ands	r3, r2
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d115      	bne.n	8004720 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 82ae 	beq.w	8004c72 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
      }
      return;
 800471e:	e2a8      	b.n	8004c72 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8117 	beq.w	8004958 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800472a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004736:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800473a:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_UART_IRQHandler+0x298>)
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 810a 	beq.w	8004958 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <HAL_UART_IRQHandler+0xbc>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	f043 0201 	orr.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d011      	beq.n	80047a4 <HAL_UART_IRQHandler+0xec>
 8004780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00b      	beq.n	80047a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2202      	movs	r2, #2
 8004792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479a:	f043 0204 	orr.w	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d011      	beq.n	80047d4 <HAL_UART_IRQHandler+0x11c>
 80047b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00b      	beq.n	80047d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2204      	movs	r2, #4
 80047c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	f043 0202 	orr.w	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004806:	f043 0208 	orr.w	r2, r3, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <HAL_UART_IRQHandler+0x18a>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8214 	beq.w	8004c76 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00d      	beq.n	8004876 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800488e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004892:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04f      	beq.n	800493a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 ff46 	bl	800572c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d141      	bne.n	8004932 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1d9      	bne.n	80048ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	4a13      	ldr	r2, [pc, #76]	; (8004954 <HAL_UART_IRQHandler+0x29c>)
 8004908:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc fe61 	bl	80015d6 <HAL_DMA_Abort_IT>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d017      	beq.n	800494a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e00f      	b.n	800494a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9b8 	bl	8004ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e00b      	b.n	800494a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9b4 	bl	8004ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e007      	b.n	800494a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9b0 	bl	8004ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004948:	e195      	b.n	8004c76 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494a:	bf00      	nop
    return;
 800494c:	e193      	b.n	8004c76 <HAL_UART_IRQHandler+0x5be>
 800494e:	bf00      	nop
 8004950:	04000120 	.word	0x04000120
 8004954:	080057f5 	.word	0x080057f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	2b01      	cmp	r3, #1
 800495e:	f040 814e 	bne.w	8004bfe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8147 	beq.w	8004bfe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8140 	beq.w	8004bfe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	f040 80b8 	bne.w	8004b06 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8167 	beq.w	8004c7a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049b6:	429a      	cmp	r2, r3
 80049b8:	f080 815f 	bcs.w	8004c7a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8086 	bne.w	8004ae4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1da      	bne.n	80049d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e1      	bne.n	8004a22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e3      	bne.n	8004a5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab4:	f023 0310 	bic.w	r3, r3, #16
 8004ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ac8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e4      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc fd3b 	bl	800155a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8d8 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b04:	e0b9      	b.n	8004c7a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80ab 	beq.w	8004c7e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a6 	beq.w	8004c7e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
 8004b56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e4      	bne.n	8004b32 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	623b      	str	r3, [r7, #32]
   return(result);
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e3      	bne.n	8004b68 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0310 	bic.w	r3, r3, #16
 8004bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	617b      	str	r3, [r7, #20]
   return(result);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e4      	bne.n	8004bb4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f85c 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bfc:	e03f      	b.n	8004c7e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00e      	beq.n	8004c28 <HAL_UART_IRQHandler+0x570>
 8004c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 ffe3 	bl	8005bec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c26:	e02d      	b.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00e      	beq.n	8004c52 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01c      	beq.n	8004c82 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
    }
    return;
 8004c50:	e017      	b.n	8004c82 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d012      	beq.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fdd8 	bl	8005820 <UART_EndTransmit_IT>
    return;
 8004c70:	e008      	b.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c72:	bf00      	nop
 8004c74:	e006      	b.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004c76:	bf00      	nop
 8004c78:	e004      	b.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004c82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c84:	37e8      	adds	r7, #232	; 0xe8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop

08004c8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b08a      	sub	sp, #40	; 0x28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4ba4      	ldr	r3, [pc, #656]	; (8004f8c <UART_SetConfig+0x2c0>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a99      	ldr	r2, [pc, #612]	; (8004f90 <UART_SetConfig+0x2c4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d34:	4313      	orrs	r3, r2
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a90      	ldr	r2, [pc, #576]	; (8004f94 <UART_SetConfig+0x2c8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d126      	bne.n	8004da4 <UART_SetConfig+0xd8>
 8004d56:	4b90      	ldr	r3, [pc, #576]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d81b      	bhi.n	8004d9c <UART_SetConfig+0xd0>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0xa0>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004d7d 	.word	0x08004d7d
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e116      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004d84:	2302      	movs	r3, #2
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e112      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e10e      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004d94:	2308      	movs	r3, #8
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e10a      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e106      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7c      	ldr	r2, [pc, #496]	; (8004f9c <UART_SetConfig+0x2d0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d138      	bne.n	8004e20 <UART_SetConfig+0x154>
 8004dae:	4b7a      	ldr	r3, [pc, #488]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	d82d      	bhi.n	8004e18 <UART_SetConfig+0x14c>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0xf8>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004e19 	.word	0x08004e19
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004e19 	.word	0x08004e19
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e0d8      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e0d4      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e0d0      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e0cc      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e0c8      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a5e      	ldr	r2, [pc, #376]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d125      	bne.n	8004e76 <UART_SetConfig+0x1aa>
 8004e2a:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e34:	2b30      	cmp	r3, #48	; 0x30
 8004e36:	d016      	beq.n	8004e66 <UART_SetConfig+0x19a>
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d818      	bhi.n	8004e6e <UART_SetConfig+0x1a2>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d00a      	beq.n	8004e56 <UART_SetConfig+0x18a>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d814      	bhi.n	8004e6e <UART_SetConfig+0x1a2>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <UART_SetConfig+0x182>
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d008      	beq.n	8004e5e <UART_SetConfig+0x192>
 8004e4c:	e00f      	b.n	8004e6e <UART_SetConfig+0x1a2>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e54:	e0ad      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e56:	2302      	movs	r3, #2
 8004e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5c:	e0a9      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e64:	e0a5      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e66:	2308      	movs	r3, #8
 8004e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6c:	e0a1      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e6e:	2310      	movs	r3, #16
 8004e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e74:	e09d      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a4a      	ldr	r2, [pc, #296]	; (8004fa4 <UART_SetConfig+0x2d8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d125      	bne.n	8004ecc <UART_SetConfig+0x200>
 8004e80:	4b45      	ldr	r3, [pc, #276]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e8c:	d016      	beq.n	8004ebc <UART_SetConfig+0x1f0>
 8004e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e90:	d818      	bhi.n	8004ec4 <UART_SetConfig+0x1f8>
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d00a      	beq.n	8004eac <UART_SetConfig+0x1e0>
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d814      	bhi.n	8004ec4 <UART_SetConfig+0x1f8>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <UART_SetConfig+0x1d8>
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d008      	beq.n	8004eb4 <UART_SetConfig+0x1e8>
 8004ea2:	e00f      	b.n	8004ec4 <UART_SetConfig+0x1f8>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e082      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004eac:	2302      	movs	r3, #2
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e07e      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e07a      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e076      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e072      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a35      	ldr	r2, [pc, #212]	; (8004fa8 <UART_SetConfig+0x2dc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d12a      	bne.n	8004f2c <UART_SetConfig+0x260>
 8004ed6:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee4:	d01a      	beq.n	8004f1c <UART_SetConfig+0x250>
 8004ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eea:	d81b      	bhi.n	8004f24 <UART_SetConfig+0x258>
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d00c      	beq.n	8004f0c <UART_SetConfig+0x240>
 8004ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef6:	d815      	bhi.n	8004f24 <UART_SetConfig+0x258>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <UART_SetConfig+0x238>
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f00:	d008      	beq.n	8004f14 <UART_SetConfig+0x248>
 8004f02:	e00f      	b.n	8004f24 <UART_SetConfig+0x258>
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e052      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e04e      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f14:	2304      	movs	r3, #4
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1a:	e04a      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f22:	e046      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f24:	2310      	movs	r3, #16
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2a:	e042      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <UART_SetConfig+0x2c4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d13a      	bne.n	8004fac <UART_SetConfig+0x2e0>
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f44:	d01a      	beq.n	8004f7c <UART_SetConfig+0x2b0>
 8004f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f4a:	d81b      	bhi.n	8004f84 <UART_SetConfig+0x2b8>
 8004f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f50:	d00c      	beq.n	8004f6c <UART_SetConfig+0x2a0>
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d815      	bhi.n	8004f84 <UART_SetConfig+0x2b8>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <UART_SetConfig+0x298>
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f60:	d008      	beq.n	8004f74 <UART_SetConfig+0x2a8>
 8004f62:	e00f      	b.n	8004f84 <UART_SetConfig+0x2b8>
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e022      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e01e      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e01a      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e016      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e012      	b.n	8004fb2 <UART_SetConfig+0x2e6>
 8004f8c:	efff69f3 	.word	0xefff69f3
 8004f90:	40008000 	.word	0x40008000
 8004f94:	40013800 	.word	0x40013800
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40004400 	.word	0x40004400
 8004fa0:	40004800 	.word	0x40004800
 8004fa4:	40004c00 	.word	0x40004c00
 8004fa8:	40005000 	.word	0x40005000
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a9f      	ldr	r2, [pc, #636]	; (8005234 <UART_SetConfig+0x568>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d17a      	bne.n	80050b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d824      	bhi.n	800500e <UART_SetConfig+0x342>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0x300>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	08004fff 	.word	0x08004fff
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	0800500f 	.word	0x0800500f
 8004fe8:	0800500f 	.word	0x0800500f
 8004fec:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7fd ff6a 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8004ff4:	61f8      	str	r0, [r7, #28]
        break;
 8004ff6:	e010      	b.n	800501a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <UART_SetConfig+0x56c>)
 8004ffa:	61fb      	str	r3, [r7, #28]
        break;
 8004ffc:	e00d      	b.n	800501a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fd fecb 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8005002:	61f8      	str	r0, [r7, #28]
        break;
 8005004:	e009      	b.n	800501a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61fb      	str	r3, [r7, #28]
        break;
 800500c:	e005      	b.n	800501a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80fb 	beq.w	8005218 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	429a      	cmp	r2, r3
 8005030:	d305      	bcc.n	800503e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	429a      	cmp	r2, r3
 800503c:	d903      	bls.n	8005046 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005044:	e0e8      	b.n	8005218 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2200      	movs	r2, #0
 800504a:	461c      	mov	r4, r3
 800504c:	4615      	mov	r5, r2
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	022b      	lsls	r3, r5, #8
 8005058:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800505c:	0222      	lsls	r2, r4, #8
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	6849      	ldr	r1, [r1, #4]
 8005062:	0849      	lsrs	r1, r1, #1
 8005064:	2000      	movs	r0, #0
 8005066:	4688      	mov	r8, r1
 8005068:	4681      	mov	r9, r0
 800506a:	eb12 0a08 	adds.w	sl, r2, r8
 800506e:	eb43 0b09 	adc.w	fp, r3, r9
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005080:	4650      	mov	r0, sl
 8005082:	4659      	mov	r1, fp
 8005084:	f7fb f8fc 	bl	8000280 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4613      	mov	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005096:	d308      	bcc.n	80050aa <UART_SetConfig+0x3de>
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509e:	d204      	bcs.n	80050aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e0b6      	b.n	8005218 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b0:	e0b2      	b.n	8005218 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ba:	d15e      	bne.n	800517a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d828      	bhi.n	8005116 <UART_SetConfig+0x44a>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0x400>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	08005117 	.word	0x08005117
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005117 	.word	0x08005117
 80050e4:	08005117 	.word	0x08005117
 80050e8:	08005117 	.word	0x08005117
 80050ec:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fd feea 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 80050f4:	61f8      	str	r0, [r7, #28]
        break;
 80050f6:	e014      	b.n	8005122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7fd fefc 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80050fc:	61f8      	str	r0, [r7, #28]
        break;
 80050fe:	e010      	b.n	8005122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b4d      	ldr	r3, [pc, #308]	; (8005238 <UART_SetConfig+0x56c>)
 8005102:	61fb      	str	r3, [r7, #28]
        break;
 8005104:	e00d      	b.n	8005122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7fd fe47 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 800510a:	61f8      	str	r0, [r7, #28]
        break;
 800510c:	e009      	b.n	8005122 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61fb      	str	r3, [r7, #28]
        break;
 8005114:	e005      	b.n	8005122 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d077      	beq.n	8005218 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	005a      	lsls	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	441a      	add	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d916      	bls.n	8005172 <UART_SetConfig+0x4a6>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d212      	bcs.n	8005172 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	b29a      	uxth	r2, r3
 8005162:	8afb      	ldrh	r3, [r7, #22]
 8005164:	4313      	orrs	r3, r2
 8005166:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	8afa      	ldrh	r2, [r7, #22]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e052      	b.n	8005218 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005178:	e04e      	b.n	8005218 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800517a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800517e:	2b08      	cmp	r3, #8
 8005180:	d827      	bhi.n	80051d2 <UART_SetConfig+0x506>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x4bc>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051bd 	.word	0x080051bd
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051c3 	.word	0x080051c3
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051d3 	.word	0x080051d3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fd fe8c 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 80051b0:	61f8      	str	r0, [r7, #28]
        break;
 80051b2:	e014      	b.n	80051de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b4:	f7fd fe9e 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80051b8:	61f8      	str	r0, [r7, #28]
        break;
 80051ba:	e010      	b.n	80051de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <UART_SetConfig+0x56c>)
 80051be:	61fb      	str	r3, [r7, #28]
        break;
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fd fde9 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
        break;
 80051c8:	e009      	b.n	80051de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	61fb      	str	r3, [r7, #28]
        break;
 80051d0:	e005      	b.n	80051de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051dc:	bf00      	nop
    }

    if (pclk != 0U)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d019      	beq.n	8005218 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	085a      	lsrs	r2, r3, #1
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	d909      	bls.n	8005212 <UART_SetConfig+0x546>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005204:	d205      	bcs.n	8005212 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	e002      	b.n	8005218 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005224:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	; 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005232:	bf00      	nop
 8005234:	40008000 	.word	0x40008000
 8005238:	00f42400 	.word	0x00f42400

0800523c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01a      	beq.n	8005352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533a:	d10a      	bne.n	8005352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b098      	sub	sp, #96	; 0x60
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005390:	f7fb ffa2 	bl	80012d8 <HAL_GetTick>
 8005394:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d12e      	bne.n	8005402 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f88c 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e062      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d149      	bne.n	80054a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f856 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d03c      	beq.n	80054a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	623b      	str	r3, [r7, #32]
   return(result);
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60fb      	str	r3, [r7, #12]
   return(result);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	617b      	str	r3, [r7, #20]
   return(result);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e011      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3758      	adds	r7, #88	; 0x58
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e049      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d045      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fb fef5 	bl	80012d8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e048      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d031      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d110      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f8ff 	bl	800572c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2208      	movs	r2, #8
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e029      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005550:	d111      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f8e5 	bl	800572c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0a6      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b097      	sub	sp, #92	; 0x5c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d10e      	bne.n	80055f2 <UART_Start_Receive_IT+0x52>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <UART_Start_Receive_IT+0x48>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055e6:	e02d      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	22ff      	movs	r2, #255	; 0xff
 80055ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f0:	e028      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <UART_Start_Receive_IT+0x76>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <UART_Start_Receive_IT+0x6c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800560a:	e01b      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	227f      	movs	r2, #127	; 0x7f
 8005610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005614:	e016      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561e:	d10d      	bne.n	800563c <UART_Start_Receive_IT+0x9c>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <UART_Start_Receive_IT+0x92>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	227f      	movs	r2, #127	; 0x7f
 800562c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005630:	e008      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	223f      	movs	r2, #63	; 0x3f
 8005636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563a:	e003      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2222      	movs	r2, #34	; 0x22
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	657b      	str	r3, [r7, #84]	; 0x54
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005674:	64ba      	str	r2, [r7, #72]	; 0x48
 8005676:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005690:	d107      	bne.n	80056a2 <UART_Start_Receive_IT+0x102>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <UART_Start_Receive_IT+0x184>)
 800569e:	669a      	str	r2, [r3, #104]	; 0x68
 80056a0:	e002      	b.n	80056a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <UART_Start_Receive_IT+0x188>)
 80056a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d019      	beq.n	80056e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80056c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
 80056d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_Start_Receive_IT+0x110>
 80056e2:	e018      	b.n	8005716 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	613b      	str	r3, [r7, #16]
   return(result);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f043 0320 	orr.w	r3, r3, #32
 80056f8:	653b      	str	r3, [r7, #80]	; 0x50
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69f9      	ldr	r1, [r7, #28]
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e6      	bne.n	80056e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	375c      	adds	r7, #92	; 0x5c
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	08005a31 	.word	0x08005a31
 8005728:	08005875 	.word	0x08005875

0800572c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b095      	sub	sp, #84	; 0x54
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
 8005754:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	61fb      	str	r3, [r7, #28]
   return(result);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e5      	bne.n	8005766 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d118      	bne.n	80057d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	647b      	str	r3, [r7, #68]	; 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6979      	ldr	r1, [r7, #20]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	613b      	str	r3, [r7, #16]
   return(result);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057e8:	bf00      	nop
 80057ea:	3754      	adds	r7, #84	; 0x54
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fa44 	bl	8004ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	60bb      	str	r3, [r7, #8]
   return(result);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	613b      	str	r3, [r7, #16]
   return(result);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fa10 	bl	8004c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b09c      	sub	sp, #112	; 0x70
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005882:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588c:	2b22      	cmp	r3, #34	; 0x22
 800588e:	f040 80be 	bne.w	8005a0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005898:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800589c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058a0:	b2d9      	uxtb	r1, r3
 80058a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	400a      	ands	r2, r1
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 80a3 	bne.w	8005a22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80058fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e6      	bne.n	80058dc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	667b      	str	r3, [r7, #100]	; 0x64
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800592e:	647a      	str	r2, [r7, #68]	; 0x44
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <UART_RxISR_8BIT+0x1b8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01f      	beq.n	80059a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	623b      	str	r3, [r7, #32]
   return(result);
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e6      	bne.n	800596e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d12e      	bne.n	8005a06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0310 	bic.w	r3, r3, #16
 80059c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	69b9      	ldr	r1, [r7, #24]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	617b      	str	r3, [r7, #20]
   return(result);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e6      	bne.n	80059ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b10      	cmp	r3, #16
 80059ec:	d103      	bne.n	80059f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2210      	movs	r2, #16
 80059f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff f958 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a04:	e00d      	b.n	8005a22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb f970 	bl	8000cec <HAL_UART_RxCpltCallback>
}
 8005a0c:	e009      	b.n	8005a22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	8b1b      	ldrh	r3, [r3, #24]
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0208 	orr.w	r2, r2, #8
 8005a1e:	b292      	uxth	r2, r2
 8005a20:	831a      	strh	r2, [r3, #24]
}
 8005a22:	bf00      	nop
 8005a24:	3770      	adds	r7, #112	; 0x70
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40008000 	.word	0x40008000

08005a30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b09c      	sub	sp, #112	; 0x70
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a48:	2b22      	cmp	r3, #34	; 0x22
 8005a4a:	f040 80be 	bne.w	8005bca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005a62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a66:	4013      	ands	r3, r2
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 80a3 	bne.w	8005bde <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aac:	667b      	str	r3, [r7, #100]	; 0x64
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ab8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e6      	bne.n	8005a98 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aea:	643a      	str	r2, [r7, #64]	; 0x40
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <UART_RxISR_16BIT+0x1b8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01f      	beq.n	8005b5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e6      	bne.n	8005b2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d12e      	bne.n	8005bc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d103      	bne.n	8005bb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff f87a 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bc0:	e00d      	b.n	8005bde <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb f892 	bl	8000cec <HAL_UART_RxCpltCallback>
}
 8005bc8:	e009      	b.n	8005bde <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	8b1b      	ldrh	r3, [r3, #24]
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0208 	orr.w	r2, r2, #8
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	831a      	strh	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	3770      	adds	r7, #112	; 0x70
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40008000 	.word	0x40008000

08005bec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <siprintf>:
 8005c00:	b40e      	push	{r1, r2, r3}
 8005c02:	b500      	push	{lr}
 8005c04:	b09c      	sub	sp, #112	; 0x70
 8005c06:	ab1d      	add	r3, sp, #116	; 0x74
 8005c08:	9002      	str	r0, [sp, #8]
 8005c0a:	9006      	str	r0, [sp, #24]
 8005c0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c10:	4809      	ldr	r0, [pc, #36]	; (8005c38 <siprintf+0x38>)
 8005c12:	9107      	str	r1, [sp, #28]
 8005c14:	9104      	str	r1, [sp, #16]
 8005c16:	4909      	ldr	r1, [pc, #36]	; (8005c3c <siprintf+0x3c>)
 8005c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1c:	9105      	str	r1, [sp, #20]
 8005c1e:	6800      	ldr	r0, [r0, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	a902      	add	r1, sp, #8
 8005c24:	f000 f9c0 	bl	8005fa8 <_svfiprintf_r>
 8005c28:	9b02      	ldr	r3, [sp, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	b01c      	add	sp, #112	; 0x70
 8005c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c34:	b003      	add	sp, #12
 8005c36:	4770      	bx	lr
 8005c38:	20000058 	.word	0x20000058
 8005c3c:	ffff0208 	.word	0xffff0208

08005c40 <siscanf>:
 8005c40:	b40e      	push	{r1, r2, r3}
 8005c42:	b510      	push	{r4, lr}
 8005c44:	b09f      	sub	sp, #124	; 0x7c
 8005c46:	ac21      	add	r4, sp, #132	; 0x84
 8005c48:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005c4c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005c50:	9201      	str	r2, [sp, #4]
 8005c52:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005c56:	9004      	str	r0, [sp, #16]
 8005c58:	9008      	str	r0, [sp, #32]
 8005c5a:	f7fa fab9 	bl	80001d0 <strlen>
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <siscanf+0x50>)
 8005c60:	9005      	str	r0, [sp, #20]
 8005c62:	9009      	str	r0, [sp, #36]	; 0x24
 8005c64:	930d      	str	r3, [sp, #52]	; 0x34
 8005c66:	480b      	ldr	r0, [pc, #44]	; (8005c94 <siscanf+0x54>)
 8005c68:	9a01      	ldr	r2, [sp, #4]
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	9403      	str	r4, [sp, #12]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9311      	str	r3, [sp, #68]	; 0x44
 8005c72:	9316      	str	r3, [sp, #88]	; 0x58
 8005c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005c7c:	a904      	add	r1, sp, #16
 8005c7e:	4623      	mov	r3, r4
 8005c80:	f000 faea 	bl	8006258 <__ssvfiscanf_r>
 8005c84:	b01f      	add	sp, #124	; 0x7c
 8005c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8a:	b003      	add	sp, #12
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	08005c99 	.word	0x08005c99
 8005c94:	20000058 	.word	0x20000058

08005c98 <__seofread>:
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4770      	bx	lr

08005c9c <memset>:
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000058 	.word	0x20000058

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f001 f8f6 	bl	8006ebc <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	080070d8 	.word	0x080070d8
 8005cf4:	080070d8 	.word	0x080070d8
 8005cf8:	080070d8 	.word	0x080070d8
 8005cfc:	080070dc 	.word	0x080070dc

08005d00 <__retarget_lock_acquire_recursive>:
 8005d00:	4770      	bx	lr

08005d02 <__retarget_lock_release_recursive>:
 8005d02:	4770      	bx	lr

08005d04 <_free_r>:
 8005d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d06:	2900      	cmp	r1, #0
 8005d08:	d044      	beq.n	8005d94 <_free_r+0x90>
 8005d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d0e:	9001      	str	r0, [sp, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f1a1 0404 	sub.w	r4, r1, #4
 8005d16:	bfb8      	it	lt
 8005d18:	18e4      	addlt	r4, r4, r3
 8005d1a:	f000 f8df 	bl	8005edc <__malloc_lock>
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <_free_r+0x94>)
 8005d20:	9801      	ldr	r0, [sp, #4]
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	b933      	cbnz	r3, 8005d34 <_free_r+0x30>
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	6014      	str	r4, [r2, #0]
 8005d2a:	b003      	add	sp, #12
 8005d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d30:	f000 b8da 	b.w	8005ee8 <__malloc_unlock>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x46>
 8005d38:	6825      	ldr	r5, [r4, #0]
 8005d3a:	1961      	adds	r1, r4, r5
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf01      	itttt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	1949      	addeq	r1, r1, r5
 8005d46:	6021      	streq	r1, [r4, #0]
 8005d48:	e7ed      	b.n	8005d26 <_free_r+0x22>
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b10b      	cbz	r3, 8005d54 <_free_r+0x50>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d9fa      	bls.n	8005d4a <_free_r+0x46>
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	1855      	adds	r5, r2, r1
 8005d58:	42a5      	cmp	r5, r4
 8005d5a:	d10b      	bne.n	8005d74 <_free_r+0x70>
 8005d5c:	6824      	ldr	r4, [r4, #0]
 8005d5e:	4421      	add	r1, r4
 8005d60:	1854      	adds	r4, r2, r1
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	d1e0      	bne.n	8005d2a <_free_r+0x26>
 8005d68:	681c      	ldr	r4, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	440c      	add	r4, r1
 8005d70:	6014      	str	r4, [r2, #0]
 8005d72:	e7da      	b.n	8005d2a <_free_r+0x26>
 8005d74:	d902      	bls.n	8005d7c <_free_r+0x78>
 8005d76:	230c      	movs	r3, #12
 8005d78:	6003      	str	r3, [r0, #0]
 8005d7a:	e7d6      	b.n	8005d2a <_free_r+0x26>
 8005d7c:	6825      	ldr	r5, [r4, #0]
 8005d7e:	1961      	adds	r1, r4, r5
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf04      	itt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	6063      	str	r3, [r4, #4]
 8005d8a:	bf04      	itt	eq
 8005d8c:	1949      	addeq	r1, r1, r5
 8005d8e:	6021      	streq	r1, [r4, #0]
 8005d90:	6054      	str	r4, [r2, #4]
 8005d92:	e7ca      	b.n	8005d2a <_free_r+0x26>
 8005d94:	b003      	add	sp, #12
 8005d96:	bd30      	pop	{r4, r5, pc}
 8005d98:	200002e8 	.word	0x200002e8

08005d9c <sbrk_aligned>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4e0e      	ldr	r6, [pc, #56]	; (8005dd8 <sbrk_aligned+0x3c>)
 8005da0:	460c      	mov	r4, r1
 8005da2:	6831      	ldr	r1, [r6, #0]
 8005da4:	4605      	mov	r5, r0
 8005da6:	b911      	cbnz	r1, 8005dae <sbrk_aligned+0x12>
 8005da8:	f000 ff3a 	bl	8006c20 <_sbrk_r>
 8005dac:	6030      	str	r0, [r6, #0]
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 ff35 	bl	8006c20 <_sbrk_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d00a      	beq.n	8005dd0 <sbrk_aligned+0x34>
 8005dba:	1cc4      	adds	r4, r0, #3
 8005dbc:	f024 0403 	bic.w	r4, r4, #3
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d007      	beq.n	8005dd4 <sbrk_aligned+0x38>
 8005dc4:	1a21      	subs	r1, r4, r0
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 ff2a 	bl	8006c20 <_sbrk_r>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d101      	bne.n	8005dd4 <sbrk_aligned+0x38>
 8005dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	200002ec 	.word	0x200002ec

08005ddc <_malloc_r>:
 8005ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de0:	1ccd      	adds	r5, r1, #3
 8005de2:	f025 0503 	bic.w	r5, r5, #3
 8005de6:	3508      	adds	r5, #8
 8005de8:	2d0c      	cmp	r5, #12
 8005dea:	bf38      	it	cc
 8005dec:	250c      	movcc	r5, #12
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	4607      	mov	r7, r0
 8005df2:	db01      	blt.n	8005df8 <_malloc_r+0x1c>
 8005df4:	42a9      	cmp	r1, r5
 8005df6:	d905      	bls.n	8005e04 <_malloc_r+0x28>
 8005df8:	230c      	movs	r3, #12
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	4630      	mov	r0, r6
 8005e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ed8 <_malloc_r+0xfc>
 8005e08:	f000 f868 	bl	8005edc <__malloc_lock>
 8005e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e10:	461c      	mov	r4, r3
 8005e12:	bb5c      	cbnz	r4, 8005e6c <_malloc_r+0x90>
 8005e14:	4629      	mov	r1, r5
 8005e16:	4638      	mov	r0, r7
 8005e18:	f7ff ffc0 	bl	8005d9c <sbrk_aligned>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	4604      	mov	r4, r0
 8005e20:	d155      	bne.n	8005ece <_malloc_r+0xf2>
 8005e22:	f8d8 4000 	ldr.w	r4, [r8]
 8005e26:	4626      	mov	r6, r4
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	d145      	bne.n	8005eb8 <_malloc_r+0xdc>
 8005e2c:	2c00      	cmp	r4, #0
 8005e2e:	d048      	beq.n	8005ec2 <_malloc_r+0xe6>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	4631      	mov	r1, r6
 8005e34:	4638      	mov	r0, r7
 8005e36:	eb04 0903 	add.w	r9, r4, r3
 8005e3a:	f000 fef1 	bl	8006c20 <_sbrk_r>
 8005e3e:	4581      	cmp	r9, r0
 8005e40:	d13f      	bne.n	8005ec2 <_malloc_r+0xe6>
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	1a6d      	subs	r5, r5, r1
 8005e46:	4629      	mov	r1, r5
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7ff ffa7 	bl	8005d9c <sbrk_aligned>
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d037      	beq.n	8005ec2 <_malloc_r+0xe6>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	442b      	add	r3, r5
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	f8d8 3000 	ldr.w	r3, [r8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d038      	beq.n	8005ed2 <_malloc_r+0xf6>
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	42a2      	cmp	r2, r4
 8005e64:	d12b      	bne.n	8005ebe <_malloc_r+0xe2>
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	e00f      	b.n	8005e8c <_malloc_r+0xb0>
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	1b52      	subs	r2, r2, r5
 8005e70:	d41f      	bmi.n	8005eb2 <_malloc_r+0xd6>
 8005e72:	2a0b      	cmp	r2, #11
 8005e74:	d917      	bls.n	8005ea6 <_malloc_r+0xca>
 8005e76:	1961      	adds	r1, r4, r5
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	6025      	str	r5, [r4, #0]
 8005e7c:	bf18      	it	ne
 8005e7e:	6059      	strne	r1, [r3, #4]
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	bf08      	it	eq
 8005e84:	f8c8 1000 	streq.w	r1, [r8]
 8005e88:	5162      	str	r2, [r4, r5]
 8005e8a:	604b      	str	r3, [r1, #4]
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f104 060b 	add.w	r6, r4, #11
 8005e92:	f000 f829 	bl	8005ee8 <__malloc_unlock>
 8005e96:	f026 0607 	bic.w	r6, r6, #7
 8005e9a:	1d23      	adds	r3, r4, #4
 8005e9c:	1af2      	subs	r2, r6, r3
 8005e9e:	d0ae      	beq.n	8005dfe <_malloc_r+0x22>
 8005ea0:	1b9b      	subs	r3, r3, r6
 8005ea2:	50a3      	str	r3, [r4, r2]
 8005ea4:	e7ab      	b.n	8005dfe <_malloc_r+0x22>
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	6862      	ldr	r2, [r4, #4]
 8005eaa:	d1dd      	bne.n	8005e68 <_malloc_r+0x8c>
 8005eac:	f8c8 2000 	str.w	r2, [r8]
 8005eb0:	e7ec      	b.n	8005e8c <_malloc_r+0xb0>
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	6864      	ldr	r4, [r4, #4]
 8005eb6:	e7ac      	b.n	8005e12 <_malloc_r+0x36>
 8005eb8:	4634      	mov	r4, r6
 8005eba:	6876      	ldr	r6, [r6, #4]
 8005ebc:	e7b4      	b.n	8005e28 <_malloc_r+0x4c>
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	e7cc      	b.n	8005e5c <_malloc_r+0x80>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f000 f80e 	bl	8005ee8 <__malloc_unlock>
 8005ecc:	e797      	b.n	8005dfe <_malloc_r+0x22>
 8005ece:	6025      	str	r5, [r4, #0]
 8005ed0:	e7dc      	b.n	8005e8c <_malloc_r+0xb0>
 8005ed2:	605b      	str	r3, [r3, #4]
 8005ed4:	deff      	udf	#255	; 0xff
 8005ed6:	bf00      	nop
 8005ed8:	200002e8 	.word	0x200002e8

08005edc <__malloc_lock>:
 8005edc:	4801      	ldr	r0, [pc, #4]	; (8005ee4 <__malloc_lock+0x8>)
 8005ede:	f7ff bf0f 	b.w	8005d00 <__retarget_lock_acquire_recursive>
 8005ee2:	bf00      	nop
 8005ee4:	200002e4 	.word	0x200002e4

08005ee8 <__malloc_unlock>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__malloc_unlock+0x8>)
 8005eea:	f7ff bf0a 	b.w	8005d02 <__retarget_lock_release_recursive>
 8005eee:	bf00      	nop
 8005ef0:	200002e4 	.word	0x200002e4

08005ef4 <__ssputs_r>:
 8005ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	688e      	ldr	r6, [r1, #8]
 8005efa:	461f      	mov	r7, r3
 8005efc:	42be      	cmp	r6, r7
 8005efe:	680b      	ldr	r3, [r1, #0]
 8005f00:	4682      	mov	sl, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	4690      	mov	r8, r2
 8005f06:	d82c      	bhi.n	8005f62 <__ssputs_r+0x6e>
 8005f08:	898a      	ldrh	r2, [r1, #12]
 8005f0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f0e:	d026      	beq.n	8005f5e <__ssputs_r+0x6a>
 8005f10:	6965      	ldr	r5, [r4, #20]
 8005f12:	6909      	ldr	r1, [r1, #16]
 8005f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f18:	eba3 0901 	sub.w	r9, r3, r1
 8005f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f20:	1c7b      	adds	r3, r7, #1
 8005f22:	444b      	add	r3, r9
 8005f24:	106d      	asrs	r5, r5, #1
 8005f26:	429d      	cmp	r5, r3
 8005f28:	bf38      	it	cc
 8005f2a:	461d      	movcc	r5, r3
 8005f2c:	0553      	lsls	r3, r2, #21
 8005f2e:	d527      	bpl.n	8005f80 <__ssputs_r+0x8c>
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7ff ff53 	bl	8005ddc <_malloc_r>
 8005f36:	4606      	mov	r6, r0
 8005f38:	b360      	cbz	r0, 8005f94 <__ssputs_r+0xa0>
 8005f3a:	6921      	ldr	r1, [r4, #16]
 8005f3c:	464a      	mov	r2, r9
 8005f3e:	f000 fe7f 	bl	8006c40 <memcpy>
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	6126      	str	r6, [r4, #16]
 8005f50:	6165      	str	r5, [r4, #20]
 8005f52:	444e      	add	r6, r9
 8005f54:	eba5 0509 	sub.w	r5, r5, r9
 8005f58:	6026      	str	r6, [r4, #0]
 8005f5a:	60a5      	str	r5, [r4, #8]
 8005f5c:	463e      	mov	r6, r7
 8005f5e:	42be      	cmp	r6, r7
 8005f60:	d900      	bls.n	8005f64 <__ssputs_r+0x70>
 8005f62:	463e      	mov	r6, r7
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	4632      	mov	r2, r6
 8005f68:	4641      	mov	r1, r8
 8005f6a:	f000 fe3e 	bl	8006bea <memmove>
 8005f6e:	68a3      	ldr	r3, [r4, #8]
 8005f70:	1b9b      	subs	r3, r3, r6
 8005f72:	60a3      	str	r3, [r4, #8]
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	4433      	add	r3, r6
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	462a      	mov	r2, r5
 8005f82:	f000 fe6b 	bl	8006c5c <_realloc_r>
 8005f86:	4606      	mov	r6, r0
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d1e0      	bne.n	8005f4e <__ssputs_r+0x5a>
 8005f8c:	6921      	ldr	r1, [r4, #16]
 8005f8e:	4650      	mov	r0, sl
 8005f90:	f7ff feb8 	bl	8005d04 <_free_r>
 8005f94:	230c      	movs	r3, #12
 8005f96:	f8ca 3000 	str.w	r3, [sl]
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	e7e9      	b.n	8005f7c <__ssputs_r+0x88>

08005fa8 <_svfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	4698      	mov	r8, r3
 8005fae:	898b      	ldrh	r3, [r1, #12]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	b09d      	sub	sp, #116	; 0x74
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	4614      	mov	r4, r2
 8005fba:	d50e      	bpl.n	8005fda <_svfiprintf_r+0x32>
 8005fbc:	690b      	ldr	r3, [r1, #16]
 8005fbe:	b963      	cbnz	r3, 8005fda <_svfiprintf_r+0x32>
 8005fc0:	2140      	movs	r1, #64	; 0x40
 8005fc2:	f7ff ff0b 	bl	8005ddc <_malloc_r>
 8005fc6:	6028      	str	r0, [r5, #0]
 8005fc8:	6128      	str	r0, [r5, #16]
 8005fca:	b920      	cbnz	r0, 8005fd6 <_svfiprintf_r+0x2e>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	e0d0      	b.n	8006178 <_svfiprintf_r+0x1d0>
 8005fd6:	2340      	movs	r3, #64	; 0x40
 8005fd8:	616b      	str	r3, [r5, #20]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	2320      	movs	r3, #32
 8005fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe8:	2330      	movs	r3, #48	; 0x30
 8005fea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006190 <_svfiprintf_r+0x1e8>
 8005fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ff2:	f04f 0901 	mov.w	r9, #1
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	469a      	mov	sl, r3
 8005ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ffe:	b10a      	cbz	r2, 8006004 <_svfiprintf_r+0x5c>
 8006000:	2a25      	cmp	r2, #37	; 0x25
 8006002:	d1f9      	bne.n	8005ff8 <_svfiprintf_r+0x50>
 8006004:	ebba 0b04 	subs.w	fp, sl, r4
 8006008:	d00b      	beq.n	8006022 <_svfiprintf_r+0x7a>
 800600a:	465b      	mov	r3, fp
 800600c:	4622      	mov	r2, r4
 800600e:	4629      	mov	r1, r5
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff ff6f 	bl	8005ef4 <__ssputs_r>
 8006016:	3001      	adds	r0, #1
 8006018:	f000 80a9 	beq.w	800616e <_svfiprintf_r+0x1c6>
 800601c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800601e:	445a      	add	r2, fp
 8006020:	9209      	str	r2, [sp, #36]	; 0x24
 8006022:	f89a 3000 	ldrb.w	r3, [sl]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80a1 	beq.w	800616e <_svfiprintf_r+0x1c6>
 800602c:	2300      	movs	r3, #0
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006036:	f10a 0a01 	add.w	sl, sl, #1
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006042:	931a      	str	r3, [sp, #104]	; 0x68
 8006044:	4654      	mov	r4, sl
 8006046:	2205      	movs	r2, #5
 8006048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604c:	4850      	ldr	r0, [pc, #320]	; (8006190 <_svfiprintf_r+0x1e8>)
 800604e:	f7fa f8c7 	bl	80001e0 <memchr>
 8006052:	9a04      	ldr	r2, [sp, #16]
 8006054:	b9d8      	cbnz	r0, 800608e <_svfiprintf_r+0xe6>
 8006056:	06d0      	lsls	r0, r2, #27
 8006058:	bf44      	itt	mi
 800605a:	2320      	movmi	r3, #32
 800605c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006060:	0711      	lsls	r1, r2, #28
 8006062:	bf44      	itt	mi
 8006064:	232b      	movmi	r3, #43	; 0x2b
 8006066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606a:	f89a 3000 	ldrb.w	r3, [sl]
 800606e:	2b2a      	cmp	r3, #42	; 0x2a
 8006070:	d015      	beq.n	800609e <_svfiprintf_r+0xf6>
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	4654      	mov	r4, sl
 8006076:	2000      	movs	r0, #0
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4621      	mov	r1, r4
 800607e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006082:	3b30      	subs	r3, #48	; 0x30
 8006084:	2b09      	cmp	r3, #9
 8006086:	d94d      	bls.n	8006124 <_svfiprintf_r+0x17c>
 8006088:	b1b0      	cbz	r0, 80060b8 <_svfiprintf_r+0x110>
 800608a:	9207      	str	r2, [sp, #28]
 800608c:	e014      	b.n	80060b8 <_svfiprintf_r+0x110>
 800608e:	eba0 0308 	sub.w	r3, r0, r8
 8006092:	fa09 f303 	lsl.w	r3, r9, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	46a2      	mov	sl, r4
 800609c:	e7d2      	b.n	8006044 <_svfiprintf_r+0x9c>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	1d19      	adds	r1, r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	9103      	str	r1, [sp, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfbb      	ittet	lt
 80060aa:	425b      	neglt	r3, r3
 80060ac:	f042 0202 	orrlt.w	r2, r2, #2
 80060b0:	9307      	strge	r3, [sp, #28]
 80060b2:	9307      	strlt	r3, [sp, #28]
 80060b4:	bfb8      	it	lt
 80060b6:	9204      	strlt	r2, [sp, #16]
 80060b8:	7823      	ldrb	r3, [r4, #0]
 80060ba:	2b2e      	cmp	r3, #46	; 0x2e
 80060bc:	d10c      	bne.n	80060d8 <_svfiprintf_r+0x130>
 80060be:	7863      	ldrb	r3, [r4, #1]
 80060c0:	2b2a      	cmp	r3, #42	; 0x2a
 80060c2:	d134      	bne.n	800612e <_svfiprintf_r+0x186>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	9203      	str	r2, [sp, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bfb8      	it	lt
 80060d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060d4:	3402      	adds	r4, #2
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80061a0 <_svfiprintf_r+0x1f8>
 80060dc:	7821      	ldrb	r1, [r4, #0]
 80060de:	2203      	movs	r2, #3
 80060e0:	4650      	mov	r0, sl
 80060e2:	f7fa f87d 	bl	80001e0 <memchr>
 80060e6:	b138      	cbz	r0, 80060f8 <_svfiprintf_r+0x150>
 80060e8:	9b04      	ldr	r3, [sp, #16]
 80060ea:	eba0 000a 	sub.w	r0, r0, sl
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	4082      	lsls	r2, r0
 80060f2:	4313      	orrs	r3, r2
 80060f4:	3401      	adds	r4, #1
 80060f6:	9304      	str	r3, [sp, #16]
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	4825      	ldr	r0, [pc, #148]	; (8006194 <_svfiprintf_r+0x1ec>)
 80060fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006102:	2206      	movs	r2, #6
 8006104:	f7fa f86c 	bl	80001e0 <memchr>
 8006108:	2800      	cmp	r0, #0
 800610a:	d038      	beq.n	800617e <_svfiprintf_r+0x1d6>
 800610c:	4b22      	ldr	r3, [pc, #136]	; (8006198 <_svfiprintf_r+0x1f0>)
 800610e:	bb1b      	cbnz	r3, 8006158 <_svfiprintf_r+0x1b0>
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	3307      	adds	r3, #7
 8006114:	f023 0307 	bic.w	r3, r3, #7
 8006118:	3308      	adds	r3, #8
 800611a:	9303      	str	r3, [sp, #12]
 800611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611e:	4433      	add	r3, r6
 8006120:	9309      	str	r3, [sp, #36]	; 0x24
 8006122:	e768      	b.n	8005ff6 <_svfiprintf_r+0x4e>
 8006124:	fb0c 3202 	mla	r2, ip, r2, r3
 8006128:	460c      	mov	r4, r1
 800612a:	2001      	movs	r0, #1
 800612c:	e7a6      	b.n	800607c <_svfiprintf_r+0xd4>
 800612e:	2300      	movs	r3, #0
 8006130:	3401      	adds	r4, #1
 8006132:	9305      	str	r3, [sp, #20]
 8006134:	4619      	mov	r1, r3
 8006136:	f04f 0c0a 	mov.w	ip, #10
 800613a:	4620      	mov	r0, r4
 800613c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006140:	3a30      	subs	r2, #48	; 0x30
 8006142:	2a09      	cmp	r2, #9
 8006144:	d903      	bls.n	800614e <_svfiprintf_r+0x1a6>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0c6      	beq.n	80060d8 <_svfiprintf_r+0x130>
 800614a:	9105      	str	r1, [sp, #20]
 800614c:	e7c4      	b.n	80060d8 <_svfiprintf_r+0x130>
 800614e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006152:	4604      	mov	r4, r0
 8006154:	2301      	movs	r3, #1
 8006156:	e7f0      	b.n	800613a <_svfiprintf_r+0x192>
 8006158:	ab03      	add	r3, sp, #12
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	462a      	mov	r2, r5
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <_svfiprintf_r+0x1f4>)
 8006160:	a904      	add	r1, sp, #16
 8006162:	4638      	mov	r0, r7
 8006164:	f3af 8000 	nop.w
 8006168:	1c42      	adds	r2, r0, #1
 800616a:	4606      	mov	r6, r0
 800616c:	d1d6      	bne.n	800611c <_svfiprintf_r+0x174>
 800616e:	89ab      	ldrh	r3, [r5, #12]
 8006170:	065b      	lsls	r3, r3, #25
 8006172:	f53f af2d 	bmi.w	8005fd0 <_svfiprintf_r+0x28>
 8006176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006178:	b01d      	add	sp, #116	; 0x74
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	ab03      	add	r3, sp, #12
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	462a      	mov	r2, r5
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <_svfiprintf_r+0x1f4>)
 8006186:	a904      	add	r1, sp, #16
 8006188:	4638      	mov	r0, r7
 800618a:	f000 fa4b 	bl	8006624 <_printf_i>
 800618e:	e7eb      	b.n	8006168 <_svfiprintf_r+0x1c0>
 8006190:	08006f80 	.word	0x08006f80
 8006194:	08006f8a 	.word	0x08006f8a
 8006198:	00000000 	.word	0x00000000
 800619c:	08005ef5 	.word	0x08005ef5
 80061a0:	08006f86 	.word	0x08006f86

080061a4 <_sungetc_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	1c4b      	adds	r3, r1, #1
 80061a8:	4614      	mov	r4, r2
 80061aa:	d103      	bne.n	80061b4 <_sungetc_r+0x10>
 80061ac:	f04f 35ff 	mov.w	r5, #4294967295
 80061b0:	4628      	mov	r0, r5
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	8993      	ldrh	r3, [r2, #12]
 80061b6:	f023 0320 	bic.w	r3, r3, #32
 80061ba:	8193      	strh	r3, [r2, #12]
 80061bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061be:	6852      	ldr	r2, [r2, #4]
 80061c0:	b2cd      	uxtb	r5, r1
 80061c2:	b18b      	cbz	r3, 80061e8 <_sungetc_r+0x44>
 80061c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061c6:	4293      	cmp	r3, r2
 80061c8:	dd08      	ble.n	80061dc <_sungetc_r+0x38>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	3301      	adds	r3, #1
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	e7e9      	b.n	80061b0 <_sungetc_r+0xc>
 80061dc:	4621      	mov	r1, r4
 80061de:	f000 fcca 	bl	8006b76 <__submore>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0f1      	beq.n	80061ca <_sungetc_r+0x26>
 80061e6:	e7e1      	b.n	80061ac <_sungetc_r+0x8>
 80061e8:	6921      	ldr	r1, [r4, #16]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	b151      	cbz	r1, 8006204 <_sungetc_r+0x60>
 80061ee:	4299      	cmp	r1, r3
 80061f0:	d208      	bcs.n	8006204 <_sungetc_r+0x60>
 80061f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80061f6:	42a9      	cmp	r1, r5
 80061f8:	d104      	bne.n	8006204 <_sungetc_r+0x60>
 80061fa:	3b01      	subs	r3, #1
 80061fc:	3201      	adds	r2, #1
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	6062      	str	r2, [r4, #4]
 8006202:	e7d5      	b.n	80061b0 <_sungetc_r+0xc>
 8006204:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800620c:	6363      	str	r3, [r4, #52]	; 0x34
 800620e:	2303      	movs	r3, #3
 8006210:	63a3      	str	r3, [r4, #56]	; 0x38
 8006212:	4623      	mov	r3, r4
 8006214:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	2301      	movs	r3, #1
 800621c:	e7dc      	b.n	80061d8 <_sungetc_r+0x34>

0800621e <__ssrefill_r>:
 800621e:	b510      	push	{r4, lr}
 8006220:	460c      	mov	r4, r1
 8006222:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006224:	b169      	cbz	r1, 8006242 <__ssrefill_r+0x24>
 8006226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800622a:	4299      	cmp	r1, r3
 800622c:	d001      	beq.n	8006232 <__ssrefill_r+0x14>
 800622e:	f7ff fd69 	bl	8005d04 <_free_r>
 8006232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	2000      	movs	r0, #0
 8006238:	6360      	str	r0, [r4, #52]	; 0x34
 800623a:	b113      	cbz	r3, 8006242 <__ssrefill_r+0x24>
 800623c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	bd10      	pop	{r4, pc}
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	6063      	str	r3, [r4, #4]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	f04f 30ff 	mov.w	r0, #4294967295
 8006256:	e7f3      	b.n	8006240 <__ssrefill_r+0x22>

08006258 <__ssvfiscanf_r>:
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	460c      	mov	r4, r1
 800625e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006262:	2100      	movs	r1, #0
 8006264:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006268:	49a6      	ldr	r1, [pc, #664]	; (8006504 <__ssvfiscanf_r+0x2ac>)
 800626a:	91a0      	str	r1, [sp, #640]	; 0x280
 800626c:	f10d 0804 	add.w	r8, sp, #4
 8006270:	49a5      	ldr	r1, [pc, #660]	; (8006508 <__ssvfiscanf_r+0x2b0>)
 8006272:	4fa6      	ldr	r7, [pc, #664]	; (800650c <__ssvfiscanf_r+0x2b4>)
 8006274:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006510 <__ssvfiscanf_r+0x2b8>
 8006278:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800627c:	4606      	mov	r6, r0
 800627e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	7813      	ldrb	r3, [r2, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 815a 	beq.w	800653e <__ssvfiscanf_r+0x2e6>
 800628a:	5cf9      	ldrb	r1, [r7, r3]
 800628c:	f011 0108 	ands.w	r1, r1, #8
 8006290:	f102 0501 	add.w	r5, r2, #1
 8006294:	d019      	beq.n	80062ca <__ssvfiscanf_r+0x72>
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	dd0f      	ble.n	80062bc <__ssvfiscanf_r+0x64>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	781a      	ldrb	r2, [r3, #0]
 80062a0:	5cba      	ldrb	r2, [r7, r2]
 80062a2:	0712      	lsls	r2, r2, #28
 80062a4:	d401      	bmi.n	80062aa <__ssvfiscanf_r+0x52>
 80062a6:	462a      	mov	r2, r5
 80062a8:	e7eb      	b.n	8006282 <__ssvfiscanf_r+0x2a>
 80062aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80062ac:	3201      	adds	r2, #1
 80062ae:	9245      	str	r2, [sp, #276]	; 0x114
 80062b0:	6862      	ldr	r2, [r4, #4]
 80062b2:	3301      	adds	r3, #1
 80062b4:	3a01      	subs	r2, #1
 80062b6:	6062      	str	r2, [r4, #4]
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	e7ec      	b.n	8006296 <__ssvfiscanf_r+0x3e>
 80062bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062be:	4621      	mov	r1, r4
 80062c0:	4630      	mov	r0, r6
 80062c2:	4798      	blx	r3
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d0e9      	beq.n	800629c <__ssvfiscanf_r+0x44>
 80062c8:	e7ed      	b.n	80062a6 <__ssvfiscanf_r+0x4e>
 80062ca:	2b25      	cmp	r3, #37	; 0x25
 80062cc:	d012      	beq.n	80062f4 <__ssvfiscanf_r+0x9c>
 80062ce:	469a      	mov	sl, r3
 80062d0:	6863      	ldr	r3, [r4, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f340 8091 	ble.w	80063fa <__ssvfiscanf_r+0x1a2>
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	7813      	ldrb	r3, [r2, #0]
 80062dc:	4553      	cmp	r3, sl
 80062de:	f040 812e 	bne.w	800653e <__ssvfiscanf_r+0x2e6>
 80062e2:	6863      	ldr	r3, [r4, #4]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80062ea:	3201      	adds	r2, #1
 80062ec:	3301      	adds	r3, #1
 80062ee:	6022      	str	r2, [r4, #0]
 80062f0:	9345      	str	r3, [sp, #276]	; 0x114
 80062f2:	e7d8      	b.n	80062a6 <__ssvfiscanf_r+0x4e>
 80062f4:	9141      	str	r1, [sp, #260]	; 0x104
 80062f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80062f8:	7853      	ldrb	r3, [r2, #1]
 80062fa:	2b2a      	cmp	r3, #42	; 0x2a
 80062fc:	bf02      	ittt	eq
 80062fe:	2310      	moveq	r3, #16
 8006300:	1c95      	addeq	r5, r2, #2
 8006302:	9341      	streq	r3, [sp, #260]	; 0x104
 8006304:	220a      	movs	r2, #10
 8006306:	46aa      	mov	sl, r5
 8006308:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800630c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006310:	2b09      	cmp	r3, #9
 8006312:	d91c      	bls.n	800634e <__ssvfiscanf_r+0xf6>
 8006314:	487e      	ldr	r0, [pc, #504]	; (8006510 <__ssvfiscanf_r+0x2b8>)
 8006316:	2203      	movs	r2, #3
 8006318:	f7f9 ff62 	bl	80001e0 <memchr>
 800631c:	b138      	cbz	r0, 800632e <__ssvfiscanf_r+0xd6>
 800631e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006320:	eba0 0009 	sub.w	r0, r0, r9
 8006324:	2301      	movs	r3, #1
 8006326:	4083      	lsls	r3, r0
 8006328:	4313      	orrs	r3, r2
 800632a:	9341      	str	r3, [sp, #260]	; 0x104
 800632c:	4655      	mov	r5, sl
 800632e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006332:	2b78      	cmp	r3, #120	; 0x78
 8006334:	d806      	bhi.n	8006344 <__ssvfiscanf_r+0xec>
 8006336:	2b57      	cmp	r3, #87	; 0x57
 8006338:	d810      	bhi.n	800635c <__ssvfiscanf_r+0x104>
 800633a:	2b25      	cmp	r3, #37	; 0x25
 800633c:	d0c7      	beq.n	80062ce <__ssvfiscanf_r+0x76>
 800633e:	d857      	bhi.n	80063f0 <__ssvfiscanf_r+0x198>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d065      	beq.n	8006410 <__ssvfiscanf_r+0x1b8>
 8006344:	2303      	movs	r3, #3
 8006346:	9347      	str	r3, [sp, #284]	; 0x11c
 8006348:	230a      	movs	r3, #10
 800634a:	9342      	str	r3, [sp, #264]	; 0x108
 800634c:	e076      	b.n	800643c <__ssvfiscanf_r+0x1e4>
 800634e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006350:	fb02 1103 	mla	r1, r2, r3, r1
 8006354:	3930      	subs	r1, #48	; 0x30
 8006356:	9143      	str	r1, [sp, #268]	; 0x10c
 8006358:	4655      	mov	r5, sl
 800635a:	e7d4      	b.n	8006306 <__ssvfiscanf_r+0xae>
 800635c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006360:	2a20      	cmp	r2, #32
 8006362:	d8ef      	bhi.n	8006344 <__ssvfiscanf_r+0xec>
 8006364:	a101      	add	r1, pc, #4	; (adr r1, 800636c <__ssvfiscanf_r+0x114>)
 8006366:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800636a:	bf00      	nop
 800636c:	0800641f 	.word	0x0800641f
 8006370:	08006345 	.word	0x08006345
 8006374:	08006345 	.word	0x08006345
 8006378:	0800647d 	.word	0x0800647d
 800637c:	08006345 	.word	0x08006345
 8006380:	08006345 	.word	0x08006345
 8006384:	08006345 	.word	0x08006345
 8006388:	08006345 	.word	0x08006345
 800638c:	08006345 	.word	0x08006345
 8006390:	08006345 	.word	0x08006345
 8006394:	08006345 	.word	0x08006345
 8006398:	08006493 	.word	0x08006493
 800639c:	08006479 	.word	0x08006479
 80063a0:	080063f7 	.word	0x080063f7
 80063a4:	080063f7 	.word	0x080063f7
 80063a8:	080063f7 	.word	0x080063f7
 80063ac:	08006345 	.word	0x08006345
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006345 	.word	0x08006345
 80063b8:	08006345 	.word	0x08006345
 80063bc:	08006345 	.word	0x08006345
 80063c0:	08006345 	.word	0x08006345
 80063c4:	080064a3 	.word	0x080064a3
 80063c8:	08006471 	.word	0x08006471
 80063cc:	08006417 	.word	0x08006417
 80063d0:	08006345 	.word	0x08006345
 80063d4:	08006345 	.word	0x08006345
 80063d8:	0800649f 	.word	0x0800649f
 80063dc:	08006345 	.word	0x08006345
 80063e0:	08006479 	.word	0x08006479
 80063e4:	08006345 	.word	0x08006345
 80063e8:	08006345 	.word	0x08006345
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	3b45      	subs	r3, #69	; 0x45
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d8a6      	bhi.n	8006344 <__ssvfiscanf_r+0xec>
 80063f6:	2305      	movs	r3, #5
 80063f8:	e01f      	b.n	800643a <__ssvfiscanf_r+0x1e2>
 80063fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80063fc:	4621      	mov	r1, r4
 80063fe:	4630      	mov	r0, r6
 8006400:	4798      	blx	r3
 8006402:	2800      	cmp	r0, #0
 8006404:	f43f af68 	beq.w	80062d8 <__ssvfiscanf_r+0x80>
 8006408:	9844      	ldr	r0, [sp, #272]	; 0x110
 800640a:	2800      	cmp	r0, #0
 800640c:	f040 808d 	bne.w	800652a <__ssvfiscanf_r+0x2d2>
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e08f      	b.n	8006536 <__ssvfiscanf_r+0x2de>
 8006416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006418:	f042 0220 	orr.w	r2, r2, #32
 800641c:	9241      	str	r2, [sp, #260]	; 0x104
 800641e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006424:	9241      	str	r2, [sp, #260]	; 0x104
 8006426:	2210      	movs	r2, #16
 8006428:	2b6f      	cmp	r3, #111	; 0x6f
 800642a:	9242      	str	r2, [sp, #264]	; 0x108
 800642c:	bf34      	ite	cc
 800642e:	2303      	movcc	r3, #3
 8006430:	2304      	movcs	r3, #4
 8006432:	e002      	b.n	800643a <__ssvfiscanf_r+0x1e2>
 8006434:	2300      	movs	r3, #0
 8006436:	9342      	str	r3, [sp, #264]	; 0x108
 8006438:	2303      	movs	r3, #3
 800643a:	9347      	str	r3, [sp, #284]	; 0x11c
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	dd3d      	ble.n	80064be <__ssvfiscanf_r+0x266>
 8006442:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006444:	0659      	lsls	r1, r3, #25
 8006446:	d404      	bmi.n	8006452 <__ssvfiscanf_r+0x1fa>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	5cba      	ldrb	r2, [r7, r2]
 800644e:	0712      	lsls	r2, r2, #28
 8006450:	d43c      	bmi.n	80064cc <__ssvfiscanf_r+0x274>
 8006452:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006454:	2b02      	cmp	r3, #2
 8006456:	dc4b      	bgt.n	80064f0 <__ssvfiscanf_r+0x298>
 8006458:	466b      	mov	r3, sp
 800645a:	4622      	mov	r2, r4
 800645c:	a941      	add	r1, sp, #260	; 0x104
 800645e:	4630      	mov	r0, r6
 8006460:	f000 fa02 	bl	8006868 <_scanf_chars>
 8006464:	2801      	cmp	r0, #1
 8006466:	d06a      	beq.n	800653e <__ssvfiscanf_r+0x2e6>
 8006468:	2802      	cmp	r0, #2
 800646a:	f47f af1c 	bne.w	80062a6 <__ssvfiscanf_r+0x4e>
 800646e:	e7cb      	b.n	8006408 <__ssvfiscanf_r+0x1b0>
 8006470:	2308      	movs	r3, #8
 8006472:	9342      	str	r3, [sp, #264]	; 0x108
 8006474:	2304      	movs	r3, #4
 8006476:	e7e0      	b.n	800643a <__ssvfiscanf_r+0x1e2>
 8006478:	220a      	movs	r2, #10
 800647a:	e7d5      	b.n	8006428 <__ssvfiscanf_r+0x1d0>
 800647c:	4629      	mov	r1, r5
 800647e:	4640      	mov	r0, r8
 8006480:	f000 fb40 	bl	8006b04 <__sccl>
 8006484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648a:	9341      	str	r3, [sp, #260]	; 0x104
 800648c:	4605      	mov	r5, r0
 800648e:	2301      	movs	r3, #1
 8006490:	e7d3      	b.n	800643a <__ssvfiscanf_r+0x1e2>
 8006492:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006498:	9341      	str	r3, [sp, #260]	; 0x104
 800649a:	2300      	movs	r3, #0
 800649c:	e7cd      	b.n	800643a <__ssvfiscanf_r+0x1e2>
 800649e:	2302      	movs	r3, #2
 80064a0:	e7cb      	b.n	800643a <__ssvfiscanf_r+0x1e2>
 80064a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80064a4:	06c3      	lsls	r3, r0, #27
 80064a6:	f53f aefe 	bmi.w	80062a6 <__ssvfiscanf_r+0x4e>
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064ae:	1d19      	adds	r1, r3, #4
 80064b0:	9100      	str	r1, [sp, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	07c0      	lsls	r0, r0, #31
 80064b6:	bf4c      	ite	mi
 80064b8:	801a      	strhmi	r2, [r3, #0]
 80064ba:	601a      	strpl	r2, [r3, #0]
 80064bc:	e6f3      	b.n	80062a6 <__ssvfiscanf_r+0x4e>
 80064be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064c0:	4621      	mov	r1, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	4798      	blx	r3
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0bb      	beq.n	8006442 <__ssvfiscanf_r+0x1ea>
 80064ca:	e79d      	b.n	8006408 <__ssvfiscanf_r+0x1b0>
 80064cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064ce:	3201      	adds	r2, #1
 80064d0:	9245      	str	r2, [sp, #276]	; 0x114
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	3a01      	subs	r2, #1
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	6062      	str	r2, [r4, #4]
 80064da:	dd02      	ble.n	80064e2 <__ssvfiscanf_r+0x28a>
 80064dc:	3301      	adds	r3, #1
 80064de:	6023      	str	r3, [r4, #0]
 80064e0:	e7b2      	b.n	8006448 <__ssvfiscanf_r+0x1f0>
 80064e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064e4:	4621      	mov	r1, r4
 80064e6:	4630      	mov	r0, r6
 80064e8:	4798      	blx	r3
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d0ac      	beq.n	8006448 <__ssvfiscanf_r+0x1f0>
 80064ee:	e78b      	b.n	8006408 <__ssvfiscanf_r+0x1b0>
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	dc0f      	bgt.n	8006514 <__ssvfiscanf_r+0x2bc>
 80064f4:	466b      	mov	r3, sp
 80064f6:	4622      	mov	r2, r4
 80064f8:	a941      	add	r1, sp, #260	; 0x104
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 fa0e 	bl	800691c <_scanf_i>
 8006500:	e7b0      	b.n	8006464 <__ssvfiscanf_r+0x20c>
 8006502:	bf00      	nop
 8006504:	080061a5 	.word	0x080061a5
 8006508:	0800621f 	.word	0x0800621f
 800650c:	08006fcf 	.word	0x08006fcf
 8006510:	08006f86 	.word	0x08006f86
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <__ssvfiscanf_r+0x2ec>)
 8006516:	2b00      	cmp	r3, #0
 8006518:	f43f aec5 	beq.w	80062a6 <__ssvfiscanf_r+0x4e>
 800651c:	466b      	mov	r3, sp
 800651e:	4622      	mov	r2, r4
 8006520:	a941      	add	r1, sp, #260	; 0x104
 8006522:	4630      	mov	r0, r6
 8006524:	f3af 8000 	nop.w
 8006528:	e79c      	b.n	8006464 <__ssvfiscanf_r+0x20c>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006530:	bf18      	it	ne
 8006532:	f04f 30ff 	movne.w	r0, #4294967295
 8006536:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006540:	e7f9      	b.n	8006536 <__ssvfiscanf_r+0x2de>
 8006542:	bf00      	nop
 8006544:	00000000 	.word	0x00000000

08006548 <_printf_common>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	4616      	mov	r6, r2
 800654e:	4699      	mov	r9, r3
 8006550:	688a      	ldr	r2, [r1, #8]
 8006552:	690b      	ldr	r3, [r1, #16]
 8006554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006558:	4293      	cmp	r3, r2
 800655a:	bfb8      	it	lt
 800655c:	4613      	movlt	r3, r2
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006564:	4607      	mov	r7, r0
 8006566:	460c      	mov	r4, r1
 8006568:	b10a      	cbz	r2, 800656e <_printf_common+0x26>
 800656a:	3301      	adds	r3, #1
 800656c:	6033      	str	r3, [r6, #0]
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	0699      	lsls	r1, r3, #26
 8006572:	bf42      	ittt	mi
 8006574:	6833      	ldrmi	r3, [r6, #0]
 8006576:	3302      	addmi	r3, #2
 8006578:	6033      	strmi	r3, [r6, #0]
 800657a:	6825      	ldr	r5, [r4, #0]
 800657c:	f015 0506 	ands.w	r5, r5, #6
 8006580:	d106      	bne.n	8006590 <_printf_common+0x48>
 8006582:	f104 0a19 	add.w	sl, r4, #25
 8006586:	68e3      	ldr	r3, [r4, #12]
 8006588:	6832      	ldr	r2, [r6, #0]
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	42ab      	cmp	r3, r5
 800658e:	dc26      	bgt.n	80065de <_printf_common+0x96>
 8006590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006594:	1e13      	subs	r3, r2, #0
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	bf18      	it	ne
 800659a:	2301      	movne	r3, #1
 800659c:	0692      	lsls	r2, r2, #26
 800659e:	d42b      	bmi.n	80065f8 <_printf_common+0xb0>
 80065a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065a4:	4649      	mov	r1, r9
 80065a6:	4638      	mov	r0, r7
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d01e      	beq.n	80065ec <_printf_common+0xa4>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	6922      	ldr	r2, [r4, #16]
 80065b2:	f003 0306 	and.w	r3, r3, #6
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	bf02      	ittt	eq
 80065ba:	68e5      	ldreq	r5, [r4, #12]
 80065bc:	6833      	ldreq	r3, [r6, #0]
 80065be:	1aed      	subeq	r5, r5, r3
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	bf0c      	ite	eq
 80065c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065c8:	2500      	movne	r5, #0
 80065ca:	4293      	cmp	r3, r2
 80065cc:	bfc4      	itt	gt
 80065ce:	1a9b      	subgt	r3, r3, r2
 80065d0:	18ed      	addgt	r5, r5, r3
 80065d2:	2600      	movs	r6, #0
 80065d4:	341a      	adds	r4, #26
 80065d6:	42b5      	cmp	r5, r6
 80065d8:	d11a      	bne.n	8006610 <_printf_common+0xc8>
 80065da:	2000      	movs	r0, #0
 80065dc:	e008      	b.n	80065f0 <_printf_common+0xa8>
 80065de:	2301      	movs	r3, #1
 80065e0:	4652      	mov	r2, sl
 80065e2:	4649      	mov	r1, r9
 80065e4:	4638      	mov	r0, r7
 80065e6:	47c0      	blx	r8
 80065e8:	3001      	adds	r0, #1
 80065ea:	d103      	bne.n	80065f4 <_printf_common+0xac>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	3501      	adds	r5, #1
 80065f6:	e7c6      	b.n	8006586 <_printf_common+0x3e>
 80065f8:	18e1      	adds	r1, r4, r3
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	2030      	movs	r0, #48	; 0x30
 80065fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006602:	4422      	add	r2, r4
 8006604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800660c:	3302      	adds	r3, #2
 800660e:	e7c7      	b.n	80065a0 <_printf_common+0x58>
 8006610:	2301      	movs	r3, #1
 8006612:	4622      	mov	r2, r4
 8006614:	4649      	mov	r1, r9
 8006616:	4638      	mov	r0, r7
 8006618:	47c0      	blx	r8
 800661a:	3001      	adds	r0, #1
 800661c:	d0e6      	beq.n	80065ec <_printf_common+0xa4>
 800661e:	3601      	adds	r6, #1
 8006620:	e7d9      	b.n	80065d6 <_printf_common+0x8e>
	...

08006624 <_printf_i>:
 8006624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	7e0f      	ldrb	r7, [r1, #24]
 800662a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800662c:	2f78      	cmp	r7, #120	; 0x78
 800662e:	4691      	mov	r9, r2
 8006630:	4680      	mov	r8, r0
 8006632:	460c      	mov	r4, r1
 8006634:	469a      	mov	sl, r3
 8006636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800663a:	d807      	bhi.n	800664c <_printf_i+0x28>
 800663c:	2f62      	cmp	r7, #98	; 0x62
 800663e:	d80a      	bhi.n	8006656 <_printf_i+0x32>
 8006640:	2f00      	cmp	r7, #0
 8006642:	f000 80d4 	beq.w	80067ee <_printf_i+0x1ca>
 8006646:	2f58      	cmp	r7, #88	; 0x58
 8006648:	f000 80c0 	beq.w	80067cc <_printf_i+0x1a8>
 800664c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006654:	e03a      	b.n	80066cc <_printf_i+0xa8>
 8006656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800665a:	2b15      	cmp	r3, #21
 800665c:	d8f6      	bhi.n	800664c <_printf_i+0x28>
 800665e:	a101      	add	r1, pc, #4	; (adr r1, 8006664 <_printf_i+0x40>)
 8006660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006664:	080066bd 	.word	0x080066bd
 8006668:	080066d1 	.word	0x080066d1
 800666c:	0800664d 	.word	0x0800664d
 8006670:	0800664d 	.word	0x0800664d
 8006674:	0800664d 	.word	0x0800664d
 8006678:	0800664d 	.word	0x0800664d
 800667c:	080066d1 	.word	0x080066d1
 8006680:	0800664d 	.word	0x0800664d
 8006684:	0800664d 	.word	0x0800664d
 8006688:	0800664d 	.word	0x0800664d
 800668c:	0800664d 	.word	0x0800664d
 8006690:	080067d5 	.word	0x080067d5
 8006694:	080066fd 	.word	0x080066fd
 8006698:	0800678f 	.word	0x0800678f
 800669c:	0800664d 	.word	0x0800664d
 80066a0:	0800664d 	.word	0x0800664d
 80066a4:	080067f7 	.word	0x080067f7
 80066a8:	0800664d 	.word	0x0800664d
 80066ac:	080066fd 	.word	0x080066fd
 80066b0:	0800664d 	.word	0x0800664d
 80066b4:	0800664d 	.word	0x0800664d
 80066b8:	08006797 	.word	0x08006797
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	602a      	str	r2, [r5, #0]
 80066c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066cc:	2301      	movs	r3, #1
 80066ce:	e09f      	b.n	8006810 <_printf_i+0x1ec>
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	0607      	lsls	r7, r0, #24
 80066d6:	f103 0104 	add.w	r1, r3, #4
 80066da:	6029      	str	r1, [r5, #0]
 80066dc:	d501      	bpl.n	80066e2 <_printf_i+0xbe>
 80066de:	681e      	ldr	r6, [r3, #0]
 80066e0:	e003      	b.n	80066ea <_printf_i+0xc6>
 80066e2:	0646      	lsls	r6, r0, #25
 80066e4:	d5fb      	bpl.n	80066de <_printf_i+0xba>
 80066e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	da03      	bge.n	80066f6 <_printf_i+0xd2>
 80066ee:	232d      	movs	r3, #45	; 0x2d
 80066f0:	4276      	negs	r6, r6
 80066f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f6:	485a      	ldr	r0, [pc, #360]	; (8006860 <_printf_i+0x23c>)
 80066f8:	230a      	movs	r3, #10
 80066fa:	e012      	b.n	8006722 <_printf_i+0xfe>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	1d19      	adds	r1, r3, #4
 8006702:	6029      	str	r1, [r5, #0]
 8006704:	0605      	lsls	r5, r0, #24
 8006706:	d501      	bpl.n	800670c <_printf_i+0xe8>
 8006708:	681e      	ldr	r6, [r3, #0]
 800670a:	e002      	b.n	8006712 <_printf_i+0xee>
 800670c:	0641      	lsls	r1, r0, #25
 800670e:	d5fb      	bpl.n	8006708 <_printf_i+0xe4>
 8006710:	881e      	ldrh	r6, [r3, #0]
 8006712:	4853      	ldr	r0, [pc, #332]	; (8006860 <_printf_i+0x23c>)
 8006714:	2f6f      	cmp	r7, #111	; 0x6f
 8006716:	bf0c      	ite	eq
 8006718:	2308      	moveq	r3, #8
 800671a:	230a      	movne	r3, #10
 800671c:	2100      	movs	r1, #0
 800671e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006722:	6865      	ldr	r5, [r4, #4]
 8006724:	60a5      	str	r5, [r4, #8]
 8006726:	2d00      	cmp	r5, #0
 8006728:	bfa2      	ittt	ge
 800672a:	6821      	ldrge	r1, [r4, #0]
 800672c:	f021 0104 	bicge.w	r1, r1, #4
 8006730:	6021      	strge	r1, [r4, #0]
 8006732:	b90e      	cbnz	r6, 8006738 <_printf_i+0x114>
 8006734:	2d00      	cmp	r5, #0
 8006736:	d04b      	beq.n	80067d0 <_printf_i+0x1ac>
 8006738:	4615      	mov	r5, r2
 800673a:	fbb6 f1f3 	udiv	r1, r6, r3
 800673e:	fb03 6711 	mls	r7, r3, r1, r6
 8006742:	5dc7      	ldrb	r7, [r0, r7]
 8006744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006748:	4637      	mov	r7, r6
 800674a:	42bb      	cmp	r3, r7
 800674c:	460e      	mov	r6, r1
 800674e:	d9f4      	bls.n	800673a <_printf_i+0x116>
 8006750:	2b08      	cmp	r3, #8
 8006752:	d10b      	bne.n	800676c <_printf_i+0x148>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	07de      	lsls	r6, r3, #31
 8006758:	d508      	bpl.n	800676c <_printf_i+0x148>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	6861      	ldr	r1, [r4, #4]
 800675e:	4299      	cmp	r1, r3
 8006760:	bfde      	ittt	le
 8006762:	2330      	movle	r3, #48	; 0x30
 8006764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800676c:	1b52      	subs	r2, r2, r5
 800676e:	6122      	str	r2, [r4, #16]
 8006770:	f8cd a000 	str.w	sl, [sp]
 8006774:	464b      	mov	r3, r9
 8006776:	aa03      	add	r2, sp, #12
 8006778:	4621      	mov	r1, r4
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff fee4 	bl	8006548 <_printf_common>
 8006780:	3001      	adds	r0, #1
 8006782:	d14a      	bne.n	800681a <_printf_i+0x1f6>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	b004      	add	sp, #16
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	f043 0320 	orr.w	r3, r3, #32
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	4833      	ldr	r0, [pc, #204]	; (8006864 <_printf_i+0x240>)
 8006798:	2778      	movs	r7, #120	; 0x78
 800679a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	6829      	ldr	r1, [r5, #0]
 80067a2:	061f      	lsls	r7, r3, #24
 80067a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067a8:	d402      	bmi.n	80067b0 <_printf_i+0x18c>
 80067aa:	065f      	lsls	r7, r3, #25
 80067ac:	bf48      	it	mi
 80067ae:	b2b6      	uxthmi	r6, r6
 80067b0:	07df      	lsls	r7, r3, #31
 80067b2:	bf48      	it	mi
 80067b4:	f043 0320 	orrmi.w	r3, r3, #32
 80067b8:	6029      	str	r1, [r5, #0]
 80067ba:	bf48      	it	mi
 80067bc:	6023      	strmi	r3, [r4, #0]
 80067be:	b91e      	cbnz	r6, 80067c8 <_printf_i+0x1a4>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	f023 0320 	bic.w	r3, r3, #32
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	2310      	movs	r3, #16
 80067ca:	e7a7      	b.n	800671c <_printf_i+0xf8>
 80067cc:	4824      	ldr	r0, [pc, #144]	; (8006860 <_printf_i+0x23c>)
 80067ce:	e7e4      	b.n	800679a <_printf_i+0x176>
 80067d0:	4615      	mov	r5, r2
 80067d2:	e7bd      	b.n	8006750 <_printf_i+0x12c>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	6826      	ldr	r6, [r4, #0]
 80067d8:	6961      	ldr	r1, [r4, #20]
 80067da:	1d18      	adds	r0, r3, #4
 80067dc:	6028      	str	r0, [r5, #0]
 80067de:	0635      	lsls	r5, r6, #24
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	d501      	bpl.n	80067e8 <_printf_i+0x1c4>
 80067e4:	6019      	str	r1, [r3, #0]
 80067e6:	e002      	b.n	80067ee <_printf_i+0x1ca>
 80067e8:	0670      	lsls	r0, r6, #25
 80067ea:	d5fb      	bpl.n	80067e4 <_printf_i+0x1c0>
 80067ec:	8019      	strh	r1, [r3, #0]
 80067ee:	2300      	movs	r3, #0
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	4615      	mov	r5, r2
 80067f4:	e7bc      	b.n	8006770 <_printf_i+0x14c>
 80067f6:	682b      	ldr	r3, [r5, #0]
 80067f8:	1d1a      	adds	r2, r3, #4
 80067fa:	602a      	str	r2, [r5, #0]
 80067fc:	681d      	ldr	r5, [r3, #0]
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	2100      	movs	r1, #0
 8006802:	4628      	mov	r0, r5
 8006804:	f7f9 fcec 	bl	80001e0 <memchr>
 8006808:	b108      	cbz	r0, 800680e <_printf_i+0x1ea>
 800680a:	1b40      	subs	r0, r0, r5
 800680c:	6060      	str	r0, [r4, #4]
 800680e:	6863      	ldr	r3, [r4, #4]
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	2300      	movs	r3, #0
 8006814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006818:	e7aa      	b.n	8006770 <_printf_i+0x14c>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	462a      	mov	r2, r5
 800681e:	4649      	mov	r1, r9
 8006820:	4640      	mov	r0, r8
 8006822:	47d0      	blx	sl
 8006824:	3001      	adds	r0, #1
 8006826:	d0ad      	beq.n	8006784 <_printf_i+0x160>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	079b      	lsls	r3, r3, #30
 800682c:	d413      	bmi.n	8006856 <_printf_i+0x232>
 800682e:	68e0      	ldr	r0, [r4, #12]
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	4298      	cmp	r0, r3
 8006834:	bfb8      	it	lt
 8006836:	4618      	movlt	r0, r3
 8006838:	e7a6      	b.n	8006788 <_printf_i+0x164>
 800683a:	2301      	movs	r3, #1
 800683c:	4632      	mov	r2, r6
 800683e:	4649      	mov	r1, r9
 8006840:	4640      	mov	r0, r8
 8006842:	47d0      	blx	sl
 8006844:	3001      	adds	r0, #1
 8006846:	d09d      	beq.n	8006784 <_printf_i+0x160>
 8006848:	3501      	adds	r5, #1
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	9903      	ldr	r1, [sp, #12]
 800684e:	1a5b      	subs	r3, r3, r1
 8006850:	42ab      	cmp	r3, r5
 8006852:	dcf2      	bgt.n	800683a <_printf_i+0x216>
 8006854:	e7eb      	b.n	800682e <_printf_i+0x20a>
 8006856:	2500      	movs	r5, #0
 8006858:	f104 0619 	add.w	r6, r4, #25
 800685c:	e7f5      	b.n	800684a <_printf_i+0x226>
 800685e:	bf00      	nop
 8006860:	08006f91 	.word	0x08006f91
 8006864:	08006fa2 	.word	0x08006fa2

08006868 <_scanf_chars>:
 8006868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800686c:	4615      	mov	r5, r2
 800686e:	688a      	ldr	r2, [r1, #8]
 8006870:	4680      	mov	r8, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b932      	cbnz	r2, 8006884 <_scanf_chars+0x1c>
 8006876:	698a      	ldr	r2, [r1, #24]
 8006878:	2a00      	cmp	r2, #0
 800687a:	bf0c      	ite	eq
 800687c:	2201      	moveq	r2, #1
 800687e:	f04f 32ff 	movne.w	r2, #4294967295
 8006882:	608a      	str	r2, [r1, #8]
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006918 <_scanf_chars+0xb0>
 800688a:	06d1      	lsls	r1, r2, #27
 800688c:	bf5f      	itttt	pl
 800688e:	681a      	ldrpl	r2, [r3, #0]
 8006890:	1d11      	addpl	r1, r2, #4
 8006892:	6019      	strpl	r1, [r3, #0]
 8006894:	6816      	ldrpl	r6, [r2, #0]
 8006896:	2700      	movs	r7, #0
 8006898:	69a0      	ldr	r0, [r4, #24]
 800689a:	b188      	cbz	r0, 80068c0 <_scanf_chars+0x58>
 800689c:	2801      	cmp	r0, #1
 800689e:	d107      	bne.n	80068b0 <_scanf_chars+0x48>
 80068a0:	682a      	ldr	r2, [r5, #0]
 80068a2:	7811      	ldrb	r1, [r2, #0]
 80068a4:	6962      	ldr	r2, [r4, #20]
 80068a6:	5c52      	ldrb	r2, [r2, r1]
 80068a8:	b952      	cbnz	r2, 80068c0 <_scanf_chars+0x58>
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d031      	beq.n	8006912 <_scanf_chars+0xaa>
 80068ae:	e022      	b.n	80068f6 <_scanf_chars+0x8e>
 80068b0:	2802      	cmp	r0, #2
 80068b2:	d120      	bne.n	80068f6 <_scanf_chars+0x8e>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80068bc:	071b      	lsls	r3, r3, #28
 80068be:	d41a      	bmi.n	80068f6 <_scanf_chars+0x8e>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	06da      	lsls	r2, r3, #27
 80068c4:	bf5e      	ittt	pl
 80068c6:	682b      	ldrpl	r3, [r5, #0]
 80068c8:	781b      	ldrbpl	r3, [r3, #0]
 80068ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80068ce:	682a      	ldr	r2, [r5, #0]
 80068d0:	686b      	ldr	r3, [r5, #4]
 80068d2:	3201      	adds	r2, #1
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	68a2      	ldr	r2, [r4, #8]
 80068d8:	3b01      	subs	r3, #1
 80068da:	3a01      	subs	r2, #1
 80068dc:	606b      	str	r3, [r5, #4]
 80068de:	3701      	adds	r7, #1
 80068e0:	60a2      	str	r2, [r4, #8]
 80068e2:	b142      	cbz	r2, 80068f6 <_scanf_chars+0x8e>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dcd7      	bgt.n	8006898 <_scanf_chars+0x30>
 80068e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80068ec:	4629      	mov	r1, r5
 80068ee:	4640      	mov	r0, r8
 80068f0:	4798      	blx	r3
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0d0      	beq.n	8006898 <_scanf_chars+0x30>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f013 0310 	ands.w	r3, r3, #16
 80068fc:	d105      	bne.n	800690a <_scanf_chars+0xa2>
 80068fe:	68e2      	ldr	r2, [r4, #12]
 8006900:	3201      	adds	r2, #1
 8006902:	60e2      	str	r2, [r4, #12]
 8006904:	69a2      	ldr	r2, [r4, #24]
 8006906:	b102      	cbz	r2, 800690a <_scanf_chars+0xa2>
 8006908:	7033      	strb	r3, [r6, #0]
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	443b      	add	r3, r7
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	2000      	movs	r0, #0
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	bf00      	nop
 8006918:	08006fcf 	.word	0x08006fcf

0800691c <_scanf_i>:
 800691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	4698      	mov	r8, r3
 8006922:	4b74      	ldr	r3, [pc, #464]	; (8006af4 <_scanf_i+0x1d8>)
 8006924:	460c      	mov	r4, r1
 8006926:	4682      	mov	sl, r0
 8006928:	4616      	mov	r6, r2
 800692a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800692e:	b087      	sub	sp, #28
 8006930:	ab03      	add	r3, sp, #12
 8006932:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006936:	4b70      	ldr	r3, [pc, #448]	; (8006af8 <_scanf_i+0x1dc>)
 8006938:	69a1      	ldr	r1, [r4, #24]
 800693a:	4a70      	ldr	r2, [pc, #448]	; (8006afc <_scanf_i+0x1e0>)
 800693c:	2903      	cmp	r1, #3
 800693e:	bf18      	it	ne
 8006940:	461a      	movne	r2, r3
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	9201      	str	r2, [sp, #4]
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800694c:	bf88      	it	hi
 800694e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006952:	4627      	mov	r7, r4
 8006954:	bf82      	ittt	hi
 8006956:	eb03 0905 	addhi.w	r9, r3, r5
 800695a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800695e:	60a3      	strhi	r3, [r4, #8]
 8006960:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006964:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006968:	bf98      	it	ls
 800696a:	f04f 0900 	movls.w	r9, #0
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	463d      	mov	r5, r7
 8006972:	f04f 0b00 	mov.w	fp, #0
 8006976:	6831      	ldr	r1, [r6, #0]
 8006978:	ab03      	add	r3, sp, #12
 800697a:	7809      	ldrb	r1, [r1, #0]
 800697c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006980:	2202      	movs	r2, #2
 8006982:	f7f9 fc2d 	bl	80001e0 <memchr>
 8006986:	b328      	cbz	r0, 80069d4 <_scanf_i+0xb8>
 8006988:	f1bb 0f01 	cmp.w	fp, #1
 800698c:	d159      	bne.n	8006a42 <_scanf_i+0x126>
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	b92a      	cbnz	r2, 800699e <_scanf_i+0x82>
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	2308      	movs	r3, #8
 8006996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	6022      	str	r2, [r4, #0]
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80069a4:	6022      	str	r2, [r4, #0]
 80069a6:	68a2      	ldr	r2, [r4, #8]
 80069a8:	1e51      	subs	r1, r2, #1
 80069aa:	60a1      	str	r1, [r4, #8]
 80069ac:	b192      	cbz	r2, 80069d4 <_scanf_i+0xb8>
 80069ae:	6832      	ldr	r2, [r6, #0]
 80069b0:	1c51      	adds	r1, r2, #1
 80069b2:	6031      	str	r1, [r6, #0]
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	f805 2b01 	strb.w	r2, [r5], #1
 80069ba:	6872      	ldr	r2, [r6, #4]
 80069bc:	3a01      	subs	r2, #1
 80069be:	2a00      	cmp	r2, #0
 80069c0:	6072      	str	r2, [r6, #4]
 80069c2:	dc07      	bgt.n	80069d4 <_scanf_i+0xb8>
 80069c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80069c8:	4631      	mov	r1, r6
 80069ca:	4650      	mov	r0, sl
 80069cc:	4790      	blx	r2
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8085 	bne.w	8006ade <_scanf_i+0x1c2>
 80069d4:	f10b 0b01 	add.w	fp, fp, #1
 80069d8:	f1bb 0f03 	cmp.w	fp, #3
 80069dc:	d1cb      	bne.n	8006976 <_scanf_i+0x5a>
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	b90b      	cbnz	r3, 80069e6 <_scanf_i+0xca>
 80069e2:	230a      	movs	r3, #10
 80069e4:	6063      	str	r3, [r4, #4]
 80069e6:	6863      	ldr	r3, [r4, #4]
 80069e8:	4945      	ldr	r1, [pc, #276]	; (8006b00 <_scanf_i+0x1e4>)
 80069ea:	6960      	ldr	r0, [r4, #20]
 80069ec:	1ac9      	subs	r1, r1, r3
 80069ee:	f000 f889 	bl	8006b04 <__sccl>
 80069f2:	f04f 0b00 	mov.w	fp, #0
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03d      	beq.n	8006a7a <_scanf_i+0x15e>
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	6960      	ldr	r0, [r4, #20]
 8006a02:	f891 c000 	ldrb.w	ip, [r1]
 8006a06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d035      	beq.n	8006a7a <_scanf_i+0x15e>
 8006a0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006a12:	d124      	bne.n	8006a5e <_scanf_i+0x142>
 8006a14:	0510      	lsls	r0, r2, #20
 8006a16:	d522      	bpl.n	8006a5e <_scanf_i+0x142>
 8006a18:	f10b 0b01 	add.w	fp, fp, #1
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	d003      	beq.n	8006a2a <_scanf_i+0x10e>
 8006a22:	3301      	adds	r3, #1
 8006a24:	f109 39ff 	add.w	r9, r9, #4294967295
 8006a28:	60a3      	str	r3, [r4, #8]
 8006a2a:	6873      	ldr	r3, [r6, #4]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	6073      	str	r3, [r6, #4]
 8006a32:	dd1b      	ble.n	8006a6c <_scanf_i+0x150>
 8006a34:	6833      	ldr	r3, [r6, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	6033      	str	r3, [r6, #0]
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	60a3      	str	r3, [r4, #8]
 8006a40:	e7d9      	b.n	80069f6 <_scanf_i+0xda>
 8006a42:	f1bb 0f02 	cmp.w	fp, #2
 8006a46:	d1ae      	bne.n	80069a6 <_scanf_i+0x8a>
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006a4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006a52:	d1bf      	bne.n	80069d4 <_scanf_i+0xb8>
 8006a54:	2310      	movs	r3, #16
 8006a56:	6063      	str	r3, [r4, #4]
 8006a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a5c:	e7a2      	b.n	80069a4 <_scanf_i+0x88>
 8006a5e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	780b      	ldrb	r3, [r1, #0]
 8006a66:	f805 3b01 	strb.w	r3, [r5], #1
 8006a6a:	e7de      	b.n	8006a2a <_scanf_i+0x10e>
 8006a6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a70:	4631      	mov	r1, r6
 8006a72:	4650      	mov	r0, sl
 8006a74:	4798      	blx	r3
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d0df      	beq.n	8006a3a <_scanf_i+0x11e>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	05d9      	lsls	r1, r3, #23
 8006a7e:	d50d      	bpl.n	8006a9c <_scanf_i+0x180>
 8006a80:	42bd      	cmp	r5, r7
 8006a82:	d909      	bls.n	8006a98 <_scanf_i+0x17c>
 8006a84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	4650      	mov	r0, sl
 8006a90:	4798      	blx	r3
 8006a92:	f105 39ff 	add.w	r9, r5, #4294967295
 8006a96:	464d      	mov	r5, r9
 8006a98:	42bd      	cmp	r5, r7
 8006a9a:	d028      	beq.n	8006aee <_scanf_i+0x1d2>
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	f012 0210 	ands.w	r2, r2, #16
 8006aa2:	d113      	bne.n	8006acc <_scanf_i+0x1b0>
 8006aa4:	702a      	strb	r2, [r5, #0]
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	9e01      	ldr	r6, [sp, #4]
 8006aaa:	4639      	mov	r1, r7
 8006aac:	4650      	mov	r0, sl
 8006aae:	47b0      	blx	r6
 8006ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab4:	6821      	ldr	r1, [r4, #0]
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	f8c8 2000 	str.w	r2, [r8]
 8006abc:	f011 0f20 	tst.w	r1, #32
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	d00f      	beq.n	8006ae4 <_scanf_i+0x1c8>
 8006ac4:	6018      	str	r0, [r3, #0]
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60e3      	str	r3, [r4, #12]
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	1bed      	subs	r5, r5, r7
 8006ad0:	445d      	add	r5, fp
 8006ad2:	442b      	add	r3, r5
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	b007      	add	sp, #28
 8006ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ade:	f04f 0b00 	mov.w	fp, #0
 8006ae2:	e7ca      	b.n	8006a7a <_scanf_i+0x15e>
 8006ae4:	07ca      	lsls	r2, r1, #31
 8006ae6:	bf4c      	ite	mi
 8006ae8:	8018      	strhmi	r0, [r3, #0]
 8006aea:	6018      	strpl	r0, [r3, #0]
 8006aec:	e7eb      	b.n	8006ac6 <_scanf_i+0x1aa>
 8006aee:	2001      	movs	r0, #1
 8006af0:	e7f2      	b.n	8006ad8 <_scanf_i+0x1bc>
 8006af2:	bf00      	nop
 8006af4:	08006f2c 	.word	0x08006f2c
 8006af8:	08006ea9 	.word	0x08006ea9
 8006afc:	08006dc1 	.word	0x08006dc1
 8006b00:	08006fc3 	.word	0x08006fc3

08006b04 <__sccl>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	780b      	ldrb	r3, [r1, #0]
 8006b08:	4604      	mov	r4, r0
 8006b0a:	2b5e      	cmp	r3, #94	; 0x5e
 8006b0c:	bf0b      	itete	eq
 8006b0e:	784b      	ldrbeq	r3, [r1, #1]
 8006b10:	1c4a      	addne	r2, r1, #1
 8006b12:	1c8a      	addeq	r2, r1, #2
 8006b14:	2100      	movne	r1, #0
 8006b16:	bf08      	it	eq
 8006b18:	2101      	moveq	r1, #1
 8006b1a:	3801      	subs	r0, #1
 8006b1c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006b20:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006b24:	42a8      	cmp	r0, r5
 8006b26:	d1fb      	bne.n	8006b20 <__sccl+0x1c>
 8006b28:	b90b      	cbnz	r3, 8006b2e <__sccl+0x2a>
 8006b2a:	1e50      	subs	r0, r2, #1
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	f081 0101 	eor.w	r1, r1, #1
 8006b32:	54e1      	strb	r1, [r4, r3]
 8006b34:	4610      	mov	r0, r2
 8006b36:	4602      	mov	r2, r0
 8006b38:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b3c:	2d2d      	cmp	r5, #45	; 0x2d
 8006b3e:	d005      	beq.n	8006b4c <__sccl+0x48>
 8006b40:	2d5d      	cmp	r5, #93	; 0x5d
 8006b42:	d016      	beq.n	8006b72 <__sccl+0x6e>
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	d0f1      	beq.n	8006b2c <__sccl+0x28>
 8006b48:	462b      	mov	r3, r5
 8006b4a:	e7f2      	b.n	8006b32 <__sccl+0x2e>
 8006b4c:	7846      	ldrb	r6, [r0, #1]
 8006b4e:	2e5d      	cmp	r6, #93	; 0x5d
 8006b50:	d0fa      	beq.n	8006b48 <__sccl+0x44>
 8006b52:	42b3      	cmp	r3, r6
 8006b54:	dcf8      	bgt.n	8006b48 <__sccl+0x44>
 8006b56:	3002      	adds	r0, #2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	3201      	adds	r2, #1
 8006b5c:	4296      	cmp	r6, r2
 8006b5e:	54a1      	strb	r1, [r4, r2]
 8006b60:	dcfb      	bgt.n	8006b5a <__sccl+0x56>
 8006b62:	1af2      	subs	r2, r6, r3
 8006b64:	3a01      	subs	r2, #1
 8006b66:	1c5d      	adds	r5, r3, #1
 8006b68:	42b3      	cmp	r3, r6
 8006b6a:	bfa8      	it	ge
 8006b6c:	2200      	movge	r2, #0
 8006b6e:	18ab      	adds	r3, r5, r2
 8006b70:	e7e1      	b.n	8006b36 <__sccl+0x32>
 8006b72:	4610      	mov	r0, r2
 8006b74:	e7da      	b.n	8006b2c <__sccl+0x28>

08006b76 <__submore>:
 8006b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b82:	4299      	cmp	r1, r3
 8006b84:	d11d      	bne.n	8006bc2 <__submore+0x4c>
 8006b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b8a:	f7ff f927 	bl	8005ddc <_malloc_r>
 8006b8e:	b918      	cbnz	r0, 8006b98 <__submore+0x22>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b9e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ba4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006ba8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006bac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006bb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006bb4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006bb8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006bbc:	6020      	str	r0, [r4, #0]
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7e8      	b.n	8006b94 <__submore+0x1e>
 8006bc2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006bc4:	0077      	lsls	r7, r6, #1
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	f000 f848 	bl	8006c5c <_realloc_r>
 8006bcc:	4605      	mov	r5, r0
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0de      	beq.n	8006b90 <__submore+0x1a>
 8006bd2:	eb00 0806 	add.w	r8, r0, r6
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	4632      	mov	r2, r6
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f000 f830 	bl	8006c40 <memcpy>
 8006be0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006be4:	f8c4 8000 	str.w	r8, [r4]
 8006be8:	e7e9      	b.n	8006bbe <__submore+0x48>

08006bea <memmove>:
 8006bea:	4288      	cmp	r0, r1
 8006bec:	b510      	push	{r4, lr}
 8006bee:	eb01 0402 	add.w	r4, r1, r2
 8006bf2:	d902      	bls.n	8006bfa <memmove+0x10>
 8006bf4:	4284      	cmp	r4, r0
 8006bf6:	4623      	mov	r3, r4
 8006bf8:	d807      	bhi.n	8006c0a <memmove+0x20>
 8006bfa:	1e43      	subs	r3, r0, #1
 8006bfc:	42a1      	cmp	r1, r4
 8006bfe:	d008      	beq.n	8006c12 <memmove+0x28>
 8006c00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c08:	e7f8      	b.n	8006bfc <memmove+0x12>
 8006c0a:	4402      	add	r2, r0
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	428a      	cmp	r2, r1
 8006c10:	d100      	bne.n	8006c14 <memmove+0x2a>
 8006c12:	bd10      	pop	{r4, pc}
 8006c14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c1c:	e7f7      	b.n	8006c0e <memmove+0x24>
	...

08006c20 <_sbrk_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d06      	ldr	r5, [pc, #24]	; (8006c3c <_sbrk_r+0x1c>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fa fa7a 	bl	8001124 <_sbrk>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_sbrk_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_sbrk_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	200002e0 	.word	0x200002e0

08006c40 <memcpy>:
 8006c40:	440a      	add	r2, r1
 8006c42:	4291      	cmp	r1, r2
 8006c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c48:	d100      	bne.n	8006c4c <memcpy+0xc>
 8006c4a:	4770      	bx	lr
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c56:	4291      	cmp	r1, r2
 8006c58:	d1f9      	bne.n	8006c4e <memcpy+0xe>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <_realloc_r>:
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	4680      	mov	r8, r0
 8006c62:	4614      	mov	r4, r2
 8006c64:	460e      	mov	r6, r1
 8006c66:	b921      	cbnz	r1, 8006c72 <_realloc_r+0x16>
 8006c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	f7ff b8b5 	b.w	8005ddc <_malloc_r>
 8006c72:	b92a      	cbnz	r2, 8006c80 <_realloc_r+0x24>
 8006c74:	f7ff f846 	bl	8005d04 <_free_r>
 8006c78:	4625      	mov	r5, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	f000 f914 	bl	8006eac <_malloc_usable_size_r>
 8006c84:	4284      	cmp	r4, r0
 8006c86:	4607      	mov	r7, r0
 8006c88:	d802      	bhi.n	8006c90 <_realloc_r+0x34>
 8006c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c8e:	d812      	bhi.n	8006cb6 <_realloc_r+0x5a>
 8006c90:	4621      	mov	r1, r4
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff f8a2 	bl	8005ddc <_malloc_r>
 8006c98:	4605      	mov	r5, r0
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d0ed      	beq.n	8006c7a <_realloc_r+0x1e>
 8006c9e:	42bc      	cmp	r4, r7
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	bf28      	it	cs
 8006ca6:	463a      	movcs	r2, r7
 8006ca8:	f7ff ffca 	bl	8006c40 <memcpy>
 8006cac:	4631      	mov	r1, r6
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff f828 	bl	8005d04 <_free_r>
 8006cb4:	e7e1      	b.n	8006c7a <_realloc_r+0x1e>
 8006cb6:	4635      	mov	r5, r6
 8006cb8:	e7df      	b.n	8006c7a <_realloc_r+0x1e>
	...

08006cbc <_strtol_l.constprop.0>:
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc2:	d001      	beq.n	8006cc8 <_strtol_l.constprop.0+0xc>
 8006cc4:	2b24      	cmp	r3, #36	; 0x24
 8006cc6:	d906      	bls.n	8006cd6 <_strtol_l.constprop.0+0x1a>
 8006cc8:	f7fe fff0 	bl	8005cac <__errno>
 8006ccc:	2316      	movs	r3, #22
 8006cce:	6003      	str	r3, [r0, #0]
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006dbc <_strtol_l.constprop.0+0x100>
 8006cda:	460d      	mov	r5, r1
 8006cdc:	462e      	mov	r6, r5
 8006cde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ce2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006ce6:	f017 0708 	ands.w	r7, r7, #8
 8006cea:	d1f7      	bne.n	8006cdc <_strtol_l.constprop.0+0x20>
 8006cec:	2c2d      	cmp	r4, #45	; 0x2d
 8006cee:	d132      	bne.n	8006d56 <_strtol_l.constprop.0+0x9a>
 8006cf0:	782c      	ldrb	r4, [r5, #0]
 8006cf2:	2701      	movs	r7, #1
 8006cf4:	1cb5      	adds	r5, r6, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d05b      	beq.n	8006db2 <_strtol_l.constprop.0+0xf6>
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d109      	bne.n	8006d12 <_strtol_l.constprop.0+0x56>
 8006cfe:	2c30      	cmp	r4, #48	; 0x30
 8006d00:	d107      	bne.n	8006d12 <_strtol_l.constprop.0+0x56>
 8006d02:	782c      	ldrb	r4, [r5, #0]
 8006d04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d08:	2c58      	cmp	r4, #88	; 0x58
 8006d0a:	d14d      	bne.n	8006da8 <_strtol_l.constprop.0+0xec>
 8006d0c:	786c      	ldrb	r4, [r5, #1]
 8006d0e:	2310      	movs	r3, #16
 8006d10:	3502      	adds	r5, #2
 8006d12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d16:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d1a:	f04f 0e00 	mov.w	lr, #0
 8006d1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d22:	4676      	mov	r6, lr
 8006d24:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d2c:	f1bc 0f09 	cmp.w	ip, #9
 8006d30:	d816      	bhi.n	8006d60 <_strtol_l.constprop.0+0xa4>
 8006d32:	4664      	mov	r4, ip
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	dd24      	ble.n	8006d82 <_strtol_l.constprop.0+0xc6>
 8006d38:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d3c:	d008      	beq.n	8006d50 <_strtol_l.constprop.0+0x94>
 8006d3e:	45b1      	cmp	r9, r6
 8006d40:	d31c      	bcc.n	8006d7c <_strtol_l.constprop.0+0xc0>
 8006d42:	d101      	bne.n	8006d48 <_strtol_l.constprop.0+0x8c>
 8006d44:	45a2      	cmp	sl, r4
 8006d46:	db19      	blt.n	8006d7c <_strtol_l.constprop.0+0xc0>
 8006d48:	fb06 4603 	mla	r6, r6, r3, r4
 8006d4c:	f04f 0e01 	mov.w	lr, #1
 8006d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d54:	e7e8      	b.n	8006d28 <_strtol_l.constprop.0+0x6c>
 8006d56:	2c2b      	cmp	r4, #43	; 0x2b
 8006d58:	bf04      	itt	eq
 8006d5a:	782c      	ldrbeq	r4, [r5, #0]
 8006d5c:	1cb5      	addeq	r5, r6, #2
 8006d5e:	e7ca      	b.n	8006cf6 <_strtol_l.constprop.0+0x3a>
 8006d60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d64:	f1bc 0f19 	cmp.w	ip, #25
 8006d68:	d801      	bhi.n	8006d6e <_strtol_l.constprop.0+0xb2>
 8006d6a:	3c37      	subs	r4, #55	; 0x37
 8006d6c:	e7e2      	b.n	8006d34 <_strtol_l.constprop.0+0x78>
 8006d6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006d72:	f1bc 0f19 	cmp.w	ip, #25
 8006d76:	d804      	bhi.n	8006d82 <_strtol_l.constprop.0+0xc6>
 8006d78:	3c57      	subs	r4, #87	; 0x57
 8006d7a:	e7db      	b.n	8006d34 <_strtol_l.constprop.0+0x78>
 8006d7c:	f04f 3eff 	mov.w	lr, #4294967295
 8006d80:	e7e6      	b.n	8006d50 <_strtol_l.constprop.0+0x94>
 8006d82:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d86:	d105      	bne.n	8006d94 <_strtol_l.constprop.0+0xd8>
 8006d88:	2322      	movs	r3, #34	; 0x22
 8006d8a:	6003      	str	r3, [r0, #0]
 8006d8c:	4646      	mov	r6, r8
 8006d8e:	b942      	cbnz	r2, 8006da2 <_strtol_l.constprop.0+0xe6>
 8006d90:	4630      	mov	r0, r6
 8006d92:	e79e      	b.n	8006cd2 <_strtol_l.constprop.0+0x16>
 8006d94:	b107      	cbz	r7, 8006d98 <_strtol_l.constprop.0+0xdc>
 8006d96:	4276      	negs	r6, r6
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	d0f9      	beq.n	8006d90 <_strtol_l.constprop.0+0xd4>
 8006d9c:	f1be 0f00 	cmp.w	lr, #0
 8006da0:	d000      	beq.n	8006da4 <_strtol_l.constprop.0+0xe8>
 8006da2:	1e69      	subs	r1, r5, #1
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	e7f3      	b.n	8006d90 <_strtol_l.constprop.0+0xd4>
 8006da8:	2430      	movs	r4, #48	; 0x30
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1b1      	bne.n	8006d12 <_strtol_l.constprop.0+0x56>
 8006dae:	2308      	movs	r3, #8
 8006db0:	e7af      	b.n	8006d12 <_strtol_l.constprop.0+0x56>
 8006db2:	2c30      	cmp	r4, #48	; 0x30
 8006db4:	d0a5      	beq.n	8006d02 <_strtol_l.constprop.0+0x46>
 8006db6:	230a      	movs	r3, #10
 8006db8:	e7ab      	b.n	8006d12 <_strtol_l.constprop.0+0x56>
 8006dba:	bf00      	nop
 8006dbc:	08006fcf 	.word	0x08006fcf

08006dc0 <_strtol_r>:
 8006dc0:	f7ff bf7c 	b.w	8006cbc <_strtol_l.constprop.0>

08006dc4 <_strtoul_l.constprop.0>:
 8006dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dc8:	4f36      	ldr	r7, [pc, #216]	; (8006ea4 <_strtoul_l.constprop.0+0xe0>)
 8006dca:	4686      	mov	lr, r0
 8006dcc:	460d      	mov	r5, r1
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dd4:	5d3e      	ldrb	r6, [r7, r4]
 8006dd6:	f016 0608 	ands.w	r6, r6, #8
 8006dda:	d1f8      	bne.n	8006dce <_strtoul_l.constprop.0+0xa>
 8006ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8006dde:	d130      	bne.n	8006e42 <_strtoul_l.constprop.0+0x7e>
 8006de0:	782c      	ldrb	r4, [r5, #0]
 8006de2:	2601      	movs	r6, #1
 8006de4:	1c85      	adds	r5, r0, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d057      	beq.n	8006e9a <_strtoul_l.constprop.0+0xd6>
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d109      	bne.n	8006e02 <_strtoul_l.constprop.0+0x3e>
 8006dee:	2c30      	cmp	r4, #48	; 0x30
 8006df0:	d107      	bne.n	8006e02 <_strtoul_l.constprop.0+0x3e>
 8006df2:	7828      	ldrb	r0, [r5, #0]
 8006df4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006df8:	2858      	cmp	r0, #88	; 0x58
 8006dfa:	d149      	bne.n	8006e90 <_strtoul_l.constprop.0+0xcc>
 8006dfc:	786c      	ldrb	r4, [r5, #1]
 8006dfe:	2310      	movs	r3, #16
 8006e00:	3502      	adds	r5, #2
 8006e02:	f04f 38ff 	mov.w	r8, #4294967295
 8006e06:	2700      	movs	r7, #0
 8006e08:	fbb8 f8f3 	udiv	r8, r8, r3
 8006e0c:	fb03 f908 	mul.w	r9, r3, r8
 8006e10:	ea6f 0909 	mvn.w	r9, r9
 8006e14:	4638      	mov	r0, r7
 8006e16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006e1a:	f1bc 0f09 	cmp.w	ip, #9
 8006e1e:	d815      	bhi.n	8006e4c <_strtoul_l.constprop.0+0x88>
 8006e20:	4664      	mov	r4, ip
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	dd23      	ble.n	8006e6e <_strtoul_l.constprop.0+0xaa>
 8006e26:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006e2a:	d007      	beq.n	8006e3c <_strtoul_l.constprop.0+0x78>
 8006e2c:	4580      	cmp	r8, r0
 8006e2e:	d31b      	bcc.n	8006e68 <_strtoul_l.constprop.0+0xa4>
 8006e30:	d101      	bne.n	8006e36 <_strtoul_l.constprop.0+0x72>
 8006e32:	45a1      	cmp	r9, r4
 8006e34:	db18      	blt.n	8006e68 <_strtoul_l.constprop.0+0xa4>
 8006e36:	fb00 4003 	mla	r0, r0, r3, r4
 8006e3a:	2701      	movs	r7, #1
 8006e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e40:	e7e9      	b.n	8006e16 <_strtoul_l.constprop.0+0x52>
 8006e42:	2c2b      	cmp	r4, #43	; 0x2b
 8006e44:	bf04      	itt	eq
 8006e46:	782c      	ldrbeq	r4, [r5, #0]
 8006e48:	1c85      	addeq	r5, r0, #2
 8006e4a:	e7cc      	b.n	8006de6 <_strtoul_l.constprop.0+0x22>
 8006e4c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e50:	f1bc 0f19 	cmp.w	ip, #25
 8006e54:	d801      	bhi.n	8006e5a <_strtoul_l.constprop.0+0x96>
 8006e56:	3c37      	subs	r4, #55	; 0x37
 8006e58:	e7e3      	b.n	8006e22 <_strtoul_l.constprop.0+0x5e>
 8006e5a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e5e:	f1bc 0f19 	cmp.w	ip, #25
 8006e62:	d804      	bhi.n	8006e6e <_strtoul_l.constprop.0+0xaa>
 8006e64:	3c57      	subs	r4, #87	; 0x57
 8006e66:	e7dc      	b.n	8006e22 <_strtoul_l.constprop.0+0x5e>
 8006e68:	f04f 37ff 	mov.w	r7, #4294967295
 8006e6c:	e7e6      	b.n	8006e3c <_strtoul_l.constprop.0+0x78>
 8006e6e:	1c7b      	adds	r3, r7, #1
 8006e70:	d106      	bne.n	8006e80 <_strtoul_l.constprop.0+0xbc>
 8006e72:	2322      	movs	r3, #34	; 0x22
 8006e74:	f8ce 3000 	str.w	r3, [lr]
 8006e78:	4638      	mov	r0, r7
 8006e7a:	b932      	cbnz	r2, 8006e8a <_strtoul_l.constprop.0+0xc6>
 8006e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e80:	b106      	cbz	r6, 8006e84 <_strtoul_l.constprop.0+0xc0>
 8006e82:	4240      	negs	r0, r0
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	d0f9      	beq.n	8006e7c <_strtoul_l.constprop.0+0xb8>
 8006e88:	b107      	cbz	r7, 8006e8c <_strtoul_l.constprop.0+0xc8>
 8006e8a:	1e69      	subs	r1, r5, #1
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	e7f5      	b.n	8006e7c <_strtoul_l.constprop.0+0xb8>
 8006e90:	2430      	movs	r4, #48	; 0x30
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1b5      	bne.n	8006e02 <_strtoul_l.constprop.0+0x3e>
 8006e96:	2308      	movs	r3, #8
 8006e98:	e7b3      	b.n	8006e02 <_strtoul_l.constprop.0+0x3e>
 8006e9a:	2c30      	cmp	r4, #48	; 0x30
 8006e9c:	d0a9      	beq.n	8006df2 <_strtoul_l.constprop.0+0x2e>
 8006e9e:	230a      	movs	r3, #10
 8006ea0:	e7af      	b.n	8006e02 <_strtoul_l.constprop.0+0x3e>
 8006ea2:	bf00      	nop
 8006ea4:	08006fcf 	.word	0x08006fcf

08006ea8 <_strtoul_r>:
 8006ea8:	f7ff bf8c 	b.w	8006dc4 <_strtoul_l.constprop.0>

08006eac <_malloc_usable_size_r>:
 8006eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb0:	1f18      	subs	r0, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bfbc      	itt	lt
 8006eb6:	580b      	ldrlt	r3, [r1, r0]
 8006eb8:	18c0      	addlt	r0, r0, r3
 8006eba:	4770      	bx	lr

08006ebc <_init>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	bf00      	nop
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr

08006ec8 <_fini>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	bf00      	nop
 8006ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ece:	bc08      	pop	{r3}
 8006ed0:	469e      	mov	lr, r3
 8006ed2:	4770      	bx	lr
