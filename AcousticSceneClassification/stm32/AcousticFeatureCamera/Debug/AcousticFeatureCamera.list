
AcousticFeatureCamera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c10  0800cea0  0800cea0  0001cea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020ab0  08020ab0  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08020ab0  08020ab0  00030ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020ab8  08020ab8  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020ab8  08020ab8  00030ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020abc  08020abc  00030abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08020ac0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d08  200001f0  08020cb0  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007ef8  08020cb0  00047ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022cb1  00000000  00000000  000402d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000505c  00000000  00000000  00062f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00067fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac7  00000000  00000000  000690c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278f6  00000000  00000000  00069b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001636f  00000000  00000000  0009147d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eef6d  00000000  00000000  000a77ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055d8  00000000  00000000  0019675c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0019bd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000059ce  00000000  00000000  0019bdc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000258  00000000  00000000  001a1794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce84 	.word	0x0800ce84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800ce84 	.word	0x0800ce84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <c_k>:

#include <stdlib.h>
#include "math.h"
#include "dct.h"

float32_t c_k(int k) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <c_k+0x12>
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <c_k+0x28>)
 8000f54:	e001      	b.n	8000f5a <c_k+0x16>
 8000f56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f5a:	ee07 3a90 	vmov	s15, r3
}
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	3f3504f3 	.word	0x3f3504f3

08000f70 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	ed2d 8b02 	vpush	{d8}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
  float32_t *pDataW = NULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  float32_t *pDataW_I = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  float32_t *pDataX = NULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  S->width = width;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	801a      	strh	r2, [r3, #0]

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	1d18      	adds	r0, r3, #4
 8000f96:	8879      	ldrh	r1, [r7, #2]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f006 ff4a 	bl	8007e34 <arm_mat_init_f32>

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 ff3e 	bl	8008e2c <calloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 000c 	add.w	r0, r3, #12
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	8879      	ldrh	r1, [r7, #2]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f006 ff38 	bl	8007e34 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 ff2c 	bl	8008e2c <calloc>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	613b      	str	r3, [r7, #16]
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 0014 	add.w	r0, r3, #20
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	8879      	ldrh	r1, [r7, #2]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	f006 ff26 	bl	8007e34 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 ff1d 	bl	8008e2c <calloc>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f103 001c 	add.w	r0, r3, #28
 8000ffc:	8879      	ldrh	r1, [r7, #2]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	f006 ff17 	bl	8007e34 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e046      	b.n	800109a <dct2_init_f32+0x12a>
    for (int n = 0; n < S->width; n++) {
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	e03a      	b.n	8001088 <dct2_init_f32+0x118>
      S->W.pData[k * S->width + n] = arm_cos_f32(
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	3301      	adds	r3, #1
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa80 	bl	8000524 <__aeabi_i2d>
 8001024:	a350      	add	r3, pc, #320	; (adr r3, 8001168 <dct2_init_f32+0x1f8>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4614      	mov	r4, r2
 8001034:	461d      	mov	r5, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa71 	bl	8000524 <__aeabi_i2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff fbff 	bl	800084c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fda7 	bl	8000ba8 <__aeabi_d2f>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	fb03 f101 	mul.w	r1, r3, r1
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	440b      	add	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	18d4      	adds	r4, r2, r3
 8001072:	ee00 0a10 	vmov	s0, r0
 8001076:	f007 fa95 	bl	80085a4 <arm_cos_f32>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	edc4 7a00 	vstr	s15, [r4]
    for (int n = 0; n < S->width; n++) {
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	3301      	adds	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	4293      	cmp	r3, r2
 8001092:	dbbe      	blt.n	8001012 <dct2_init_f32+0xa2>
  for (int k = 0; k < S->width; k++) {
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3301      	adds	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dbb2      	blt.n	800100c <dct2_init_f32+0x9c>
    }
  }

  for (int n = 0; n < S->width; n++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e04e      	b.n	800114a <dct2_init_f32+0x1da>
    for (int k = 0; k < S->width; k++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	e042      	b.n	8001138 <dct2_init_f32+0x1c8>
      S->W_I.pData[n * S->width + k] = c_k(k)
 80010b2:	69b8      	ldr	r0, [r7, #24]
 80010b4:	f7ff ff46 	bl	8000f44 <c_k>
 80010b8:	eeb0 8a40 	vmov.f32	s16, s0
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3301      	adds	r3, #1
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa2b 	bl	8000524 <__aeabi_i2d>
 80010ce:	a326      	add	r3, pc, #152	; (adr r3, 8001168 <dct2_init_f32+0x1f8>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa90 	bl	80005f8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4614      	mov	r4, r2
 80010de:	461d      	mov	r5, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa1c 	bl	8000524 <__aeabi_i2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff fbaa 	bl	800084c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd52 	bl	8000ba8 <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	ee00 3a10 	vmov	s0, r3
 800110a:	f007 fa4b 	bl	80085a4 <arm_cos_f32>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
      S->W_I.pData[n * S->width + k] = c_k(k)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	fb03 f101 	mul.w	r1, r3, r1
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	440b      	add	r3, r1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 800112a:	ee68 7a27 	vmul.f32	s15, s16, s15
      S->W_I.pData[n * S->width + k] = c_k(k)
 800112e:	edc3 7a00 	vstr	s15, [r3]
    for (int k = 0; k < S->width; k++) {
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4293      	cmp	r3, r2
 8001142:	dbb6      	blt.n	80010b2 <dct2_init_f32+0x142>
  for (int n = 0; n < S->width; n++) {
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	3301      	adds	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	4293      	cmp	r3, r2
 8001154:	dbaa      	blt.n	80010ac <dct2_init_f32+0x13c>
    }
  }

}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	ecbd 8b02 	vpop	{d8}
 8001162:	bdb0      	pop	{r4, r5, r7, pc}
 8001164:	f3af 8000 	nop.w
 8001168:	54442d18 	.word	0x54442d18
 800116c:	400921fb 	.word	0x400921fb

08001170 <dct2_f32>:
 * @param[out]    *pDst      points to the output buffer.
 * @param[in]     idctFlag   DCT if flag is 0, IDCT if flag is 1.
 * @return        none.
 */
void dct2_f32(dct2_instance_f32 *S, float32_t *pSrc, float32_t *pDst,
    uint8_t idctFlag) {
 8001170:	b580      	push	{r7, lr}
 8001172:	ed2d 8b02 	vpush	{d8}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	70fb      	strb	r3, [r7, #3]

  S->X.pData = pSrc;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	621a      	str	r2, [r3, #32]
  S->Y.pData = pDst;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]

  if (idctFlag == 0) {
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d13e      	bne.n	8001212 <dct2_f32+0xa2>
    arm_mat_mult_f32(&(S->W), &(S->X), &(S->Y));
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f103 000c 	add.w	r0, r3, #12
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 011c 	add.w	r1, r3, #28
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3304      	adds	r3, #4
 80011a4:	461a      	mov	r2, r3
 80011a6:	f006 fda5 	bl	8007cf4 <arm_mat_mult_f32>
    pDst[0] = pDst[0] * c_k(0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	ed93 8a00 	vldr	s16, [r3]
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fec7 	bl	8000f44 <c_k>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edc3 7a00 	vstr	s15, [r3]
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011da:	f7ff fb37 	bl	800084c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b17 	vmov	d7, r2, r3
 80011e6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ea:	eef0 0a67 	vmov.f32	s1, s15
 80011ee:	f00a fc61 	bl	800bab4 <sqrt>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcd5 	bl	8000ba8 <__aeabi_d2f>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	ee00 0a10 	vmov	s0, r0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f007 fa14 	bl	8008638 <arm_scale_f32>
  } else {
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
  }
}
 8001210:	e030      	b.n	8001274 <dct2_f32+0x104>
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f103 0014 	add.w	r0, r3, #20
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f103 011c 	add.w	r1, r3, #28
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	461a      	mov	r2, r3
 8001224:	f006 fd66 	bl	8007cf4 <arm_mat_mult_f32>
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f979 	bl	8000524 <__aeabi_i2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b17 	vmov	d7, r2, r3
 800124a:	eeb0 0a47 	vmov.f32	s0, s14
 800124e:	eef0 0a67 	vmov.f32	s1, s15
 8001252:	f00a fc2f 	bl	800bab4 <sqrt>
 8001256:	ec53 2b10 	vmov	r2, r3, d0
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fca3 	bl	8000ba8 <__aeabi_d2f>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	ee00 0a10 	vmov	s0, r0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f007 f9e2 	bl	8008638 <arm_scale_f32>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	ecbd 8b02 	vpop	{d8}
 800127e:	bd80      	pop	{r7, pc}

08001280 <log10_approx>:
 *  reference: https://community.arm.com/support-forums/f/armds-forum/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = { 1.23149591368684f, -4.11852516267426f,
    6.02197014179219f, -3.13396450166353f };
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t f, l;
  int e;
  f = frexpf(fabsf(x), &e);
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	eef0 7ae7 	vabs.f32	s15, s15
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4618      	mov	r0, r3
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	f008 fda4 	bl	8009de8 <frexpf>
 80012a0:	ed87 0a05 	vstr	s0, [r7, #20]
  l = LOG10_2 * (C[0] * f * f * f + C[1] * f * f + C[2] * f + C[3] + e);
 80012a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800131c <log10_approx+0x9c>
 80012a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001320 <log10_approx+0xa0>
 80012c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001324 <log10_approx+0xa4>
 80012dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001328 <log10_approx+0xa8>
 80012ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800132c <log10_approx+0xac>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc7 7a04 	vstr	s15, [r7, #16]
  return l;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	ee07 3a90 	vmov	s15, r3
  //return (l >= 0.0) ? l : 0.0;  // regard a negative value as featureless
}
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	3f9da1a8 	.word	0x3f9da1a8
 8001320:	c083caf5 	.word	0xc083caf5
 8001324:	40c0b3fb 	.word	0x40c0b3fb
 8001328:	c04892e0 	.word	0xc04892e0
 800132c:	3e9a209b 	.word	0x3e9a209b

08001330 <hann>:

// Hann window generation
void hann(int num) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  arm_fill_f32(0.0f, hann_window, NN);
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <hann+0x84>)
 800133e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80013b8 <hann+0x88>
 8001342:	f005 febb 	bl	80070bc <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001350:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013bc <hann+0x8c>
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	edc7 7a02 	vstr	s15, [r7, #8]
  for (int n = 0; n < num; n++) {
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e01f      	b.n	80013a2 <hann+0x72>
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	f007 f914 	bl	80085a4 <arm_cos_f32>
 800137c:	eef0 7a40 	vmov.f32	s15, s0
 8001380:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <hann+0x84>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	edc3 7a00 	vstr	s15, [r3]
  for (int n = 0; n < num; n++) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbdb      	blt.n	8001362 <hann+0x32>
  }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200020b0 	.word	0x200020b0
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40c90fdb 	.word	0x40c90fdb

080013c0 <freq2mel>:

// Frequency in Hz to Mel-scale
float32_t freq2mel(float32_t hz) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	ed87 0a01 	vstr	s0, [r7, #4]
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 80013ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ce:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001428 <freq2mel+0x68>
 80013d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013de:	ee17 0a90 	vmov	r0, s15
 80013e2:	f7ff f8b1 	bl	8000548 <__aeabi_f2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	ec43 2b10 	vmov	d0, r2, r3
 80013ee:	f00a fab3 	bl	800b958 <log10>
 80013f2:	ec51 0b10 	vmov	r0, r1, d0
 80013f6:	a30a      	add	r3, pc, #40	; (adr r3, 8001420 <freq2mel+0x60>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8fc 	bl	80005f8 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fbce 	bl	8000ba8 <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a67 	vmov.f32	s0, s15
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	f3af 8000 	nop.w
 8001420:	00000000 	.word	0x00000000
 8001424:	40a44600 	.word	0x40a44600
 8001428:	442f0000 	.word	0x442f0000
 800142c:	00000000 	.word	0x00000000

08001430 <mel2freq>:

// Mel-scale to Frequency in Hz
float32_t mel2freq(float32_t mel) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80014a8 <mel2freq+0x78>
 8001442:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001446:	ee16 0a90 	vmov	r0, s13
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	ec43 2b11 	vmov	d1, r2, r3
 8001456:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80014a0 <mel2freq+0x70>
 800145a:	f00a fabb 	bl	800b9d4 <pow>
 800145e:	ec51 0b10 	vmov	r0, r1, d0
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <mel2freq+0x7c>)
 8001468:	f7fe ff0e 	bl	8000288 <__aeabi_dsub>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <mel2freq+0x80>)
 800147a:	f7ff f8bd 	bl	80005f8 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb8f 	bl	8000ba8 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	ee07 3a90 	vmov	s15, r3
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40240000 	.word	0x40240000
 80014a8:	45223000 	.word	0x45223000
 80014ac:	3ff00000 	.word	0x3ff00000
 80014b0:	4085e000 	.word	0x4085e000

080014b4 <generate_filters>:

// Generate Mel filter bank
void generate_filters(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80014ba:	af00      	add	r7, sp, #0
  const float32_t mel_min = 0.0f;
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  float32_t mel_points[NUM_FILTERS + 2];
  float32_t hz_points[NUM_FILTERS + 2];
  float32_t f[NUM_FILTERS + 2];
  float32_t f_minus, f_center, f_plus;
  float32_t mel_max = freq2mel(nyq_fs);
 80014c4:	4bae      	ldr	r3, [pc, #696]	; (8001780 <generate_filters+0x2cc>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	f7ff ff77 	bl	80013c0 <freq2mel>
 80014d2:	ed87 0a83 	vstr	s0, [r7, #524]	; 0x20c
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
 80014d6:	ed97 7a83 	vldr	s14, [r7, #524]	; 0x20c
 80014da:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 80014de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e2:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8001784 <generate_filters+0x2d0>
 80014e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ea:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80014f4:	e05d      	b.n	80015b2 <generate_filters+0xfe>
    mel_points[m] = delta_mel * m;
 80014f6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001502:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001514:	443b      	add	r3, r7
 8001516:	3bd4      	subs	r3, #212	; 0xd4
 8001518:	edc3 7a00 	vstr	s15, [r3]
    hz_points[m] = mel2freq(mel_points[m]);
 800151c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001526:	443b      	add	r3, r7
 8001528:	3bd4      	subs	r3, #212	; 0xd4
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	f7ff ff7d 	bl	8001430 <mel2freq>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800153e:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001542:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	edc3 7a00 	vstr	s15, [r3]
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 800154e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001552:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001556:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001788 <generate_filters+0x2d4>
 8001566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <generate_filters+0x2d8>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001574:	ee16 0a90 	vmov	r0, s13
 8001578:	f7fe ffe6 	bl	8000548 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	ec43 2b10 	vmov	d0, r2, r3
 8001584:	f00a fbd4 	bl	800bd30 <floor>
 8001588:	ec53 2b10 	vmov	r2, r3, d0
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb0a 	bl	8000ba8 <__aeabi_d2f>
 8001594:	4601      	mov	r1, r0
 8001596:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800159a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800159e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	6019      	str	r1, [r3, #0]
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80015a8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80015ac:	3301      	adds	r3, #1
 80015ae:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80015b2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80015b6:	2b29      	cmp	r3, #41	; 0x29
 80015b8:	d99d      	bls.n	80014f6 <generate_filters+0x42>
  }
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 80015ba:	2301      	movs	r3, #1
 80015bc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80015c0:	e0d2      	b.n	8001768 <generate_filters+0x2b4>
    for (int k = 1; k < NN / 2; k++) {
 80015c2:	2301      	movs	r3, #1
 80015c4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80015c8:	e0c4      	b.n	8001754 <generate_filters+0x2a0>
      f_minus = f[m - 1];
 80015ca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80015d4:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
      f_center = f[m];
 80015e2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80015e6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80015ea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      f_plus = f[m + 1];
 80015f8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80015fc:	3301      	adds	r3, #1
 80015fe:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001602:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      for (int k = f_minus; k < f_center; k++) {
 8001610:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001620:	e028      	b.n	8001674 <generate_filters+0x1c0>
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8001622:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162e:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001632:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001636:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 800163a:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 800163e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001642:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 2a90 	vmov	r2, s15
 800164e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <generate_filters+0x2dc>)
 800165a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800165e:	0152      	lsls	r2, r2, #5
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	edc3 7a00 	vstr	s15, [r3]
      for (int k = f_minus; k < f_center; k++) {
 800166a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800166e:	3301      	adds	r3, #1
 8001670:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001674:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 8001684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dcc9      	bgt.n	8001622 <generate_filters+0x16e>
      }
      for (int k = f_center; k <= f_plus; k++) {
 800168e:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8001692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001696:	ee17 3a90 	vmov	r3, s15
 800169a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800169e:	e028      	b.n	80016f2 <generate_filters+0x23e>
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 80016a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ac:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 80016b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016b4:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 80016b8:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80016c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c8:	ee17 2a90 	vmov	r2, s15
 80016cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d6:	492e      	ldr	r1, [pc, #184]	; (8001790 <generate_filters+0x2dc>)
 80016d8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80016dc:	0152      	lsls	r2, r2, #5
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	edc3 7a00 	vstr	s15, [r3]
      for (int k = f_center; k <= f_plus; k++) {
 80016e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80016f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fe:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 8001702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	dac9      	bge.n	80016a0 <generate_filters+0x1ec>
      }
      k_range[m][0] = (int) f_minus;
 800170c:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001714:	ee17 1a90 	vmov	r1, s15
 8001718:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <generate_filters+0x2e0>)
 800171a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800171e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8001722:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 8001726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172a:	ee17 2a90 	vmov	r2, s15
 800172e:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <generate_filters+0x2e0>)
 8001740:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	605a      	str	r2, [r3, #4]
    for (int k = 1; k < NN / 2; k++) {
 800174a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001754:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001758:	2bff      	cmp	r3, #255	; 0xff
 800175a:	f77f af36 	ble.w	80015ca <generate_filters+0x116>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 800175e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001762:	3301      	adds	r3, #1
 8001764:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001768:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800176c:	2b28      	cmp	r3, #40	; 0x28
 800176e:	f67f af28 	bls.w	80015c2 <generate_filters+0x10e>
    }
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000210 	.word	0x20000210
 8001784:	42280000 	.word	0x42280000
 8001788:	44004000 	.word	0x44004000
 800178c:	2000020c 	.word	0x2000020c
 8001790:	20000a60 	.word	0x20000a60
 8001794:	20001f60 	.word	0x20001f60

08001798 <init_dsp>:

/*
 * DSP pipeline initialization
 */
void init_dsp(float32_t f_s) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af02      	add	r7, sp, #8
 800179e:	ed87 0a01 	vstr	s0, [r7, #4]
  // Generate Hanning window
  hann(NN);
 80017a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017a6:	f7ff fdc3 	bl	8001330 <hann>
  fs = f_s;
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <init_dsp+0x5c>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6013      	str	r3, [r2, #0]
  nyq_fs = f_s / 2.0;
 80017b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <init_dsp+0x60>)
 80017be:	edc3 7a00 	vstr	s15, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 80017c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <init_dsp+0x64>)
 80017c8:	f005 fdd2 	bl	8007370 <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <init_dsp+0x68>)
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <init_dsp+0x6c>)
 80017d6:	2102      	movs	r1, #2
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <init_dsp+0x70>)
 80017da:	f006 fb2f 	bl	8007e3c <arm_fir_init_f32>
  generate_filters();
 80017de:	f7ff fe69 	bl	80014b4 <generate_filters>
#ifndef FEATURE_MFSC
  dct2_init_f32(&S_DCT, NUM_FILTERS);
 80017e2:	2128      	movs	r1, #40	; 0x28
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <init_dsp+0x74>)
 80017e6:	f7ff fbc3 	bl	8000f70 <dct2_init_f32>
#endif
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000020c 	.word	0x2000020c
 80017f8:	20000210 	.word	0x20000210
 80017fc:	20000214 	.word	0x20000214
 8001800:	2000025c 	.word	0x2000025c
 8001804:	20000000 	.word	0x20000000
 8001808:	2000022c 	.word	0x2000022c
 800180c:	20000238 	.word	0x20000238

08001810 <apply_pre_emphasis>:

//--- DSP pipeline functions -----------------------------//

// Apply pre-emphasis
void apply_pre_emphasis(float32_t *signal) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  arm_fir_f32(&S_PRE, signal, signal, NN);
 8001818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <apply_pre_emphasis+0x20>)
 8001822:	f006 fb1b 	bl	8007e5c <arm_fir_f32>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000022c 	.word	0x2000022c

08001834 <apply_ac_coupling>:

// AC coupling (to remove DC)
void apply_ac_coupling(float32_t *signal) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  float32_t mean;
  static float32_t mean_hist[NUM_MEANS] = { 0.0f };
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <apply_ac_coupling+0x54>)
 800183e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001842:	4912      	ldr	r1, [pc, #72]	; (800188c <apply_ac_coupling+0x58>)
 8001844:	4618      	mov	r0, r3
 8001846:	f005 fc5d 	bl	8007104 <arm_copy_f32>
  arm_mean_f32(signal, NN, mean_hist + NUM_MEANS - 1);
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <apply_ac_coupling+0x5c>)
 800184c:	461a      	mov	r2, r3
 800184e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f005 fc86 	bl	8007164 <arm_mean_f32>
  arm_mean_f32(mean_hist, NUM_MEANS, &mean);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	461a      	mov	r2, r3
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <apply_ac_coupling+0x58>)
 8001864:	f005 fc7e 	bl	8007164 <arm_mean_f32>
  arm_offset_f32(signal, -mean, signal, NN);
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	eef1 7a67 	vneg.f32	s15, s15
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	eeb0 0a67 	vmov.f32	s0, s15
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f006 ff20 	bl	80086c0 <arm_offset_f32>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200030b4 	.word	0x200030b4
 800188c:	200030b0 	.word	0x200030b0
 8001890:	200038ac 	.word	0x200038ac

08001894 <apply_hann>:

// Apply Hann window
void apply_hann(float32_t *signal) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  arm_mult_f32(signal, hann_window, signal, NN);
 800189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4904      	ldr	r1, [pc, #16]	; (80018b4 <apply_hann+0x20>)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f006 ff4f 	bl	8008748 <arm_mult_f32>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200020b0 	.word	0x200020b0

080018b8 <apply_fft>:

// FFT
void apply_fft(float32_t *signal) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  // Caution: arm_rfft_fast_f32() rewrites the 2nd arg (signal)
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 80018c0:	2300      	movs	r3, #0
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <apply_fft+0x28>)
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <apply_fft+0x2c>)
 80018c8:	f005 fe36 	bl	8007538 <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, signal, NN);
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <apply_fft+0x28>)
 80018d4:	f005 fc16 	bl	8007104 <arm_copy_f32>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200028b0 	.word	0x200028b0
 80018e4:	20000214 	.word	0x20000214

080018e8 <apply_psd>:

// PSD
void apply_psd(float32_t *signal) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 80018f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f4:	4908      	ldr	r1, [pc, #32]	; (8001918 <apply_psd+0x30>)
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f006 fd30 	bl	800835c <arm_cmplx_mag_f32>
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 80018fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800191c <apply_psd+0x34>
 8001900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	eeb0 0a67 	vmov.f32	s0, s15
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <apply_psd+0x30>)
 800190c:	f006 fe94 	bl	8008638 <arm_scale_f32>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200028b0 	.word	0x200028b0
 800191c:	3b000000 	.word	0x3b000000

08001920 <apply_psd_logscale>:

// PSD in logscale
void apply_psd_logscale(float32_t *signal) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  for (int n = 0; n < NN / 2; n++) {
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e022      	b.n	8001974 <apply_psd_logscale+0x54>
    signal[n] = 20.0 * log10_approx(signal[n]);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	f7ff fc9f 	bl	8001280 <log10_approx>
 8001942:	ee10 3a10 	vmov	r3, s0
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdfe 	bl	8000548 <__aeabi_f2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <apply_psd_logscale+0x64>)
 8001952:	f7fe fe51 	bl	80005f8 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	18d4      	adds	r4, r2, r3
 8001966:	f7ff f91f 	bl	8000ba8 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	6023      	str	r3, [r4, #0]
  for (int n = 0; n < NN / 2; n++) {
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	ddd9      	ble.n	800192e <apply_psd_logscale+0xe>
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	40340000 	.word	0x40340000

08001988 <apply_filterbank>:

// Apply mel filter bank
void apply_filterbank(float32_t *signal) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  float32_t sum = 0.0f;
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  int left_k, len;
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 8001996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199a:	481b      	ldr	r0, [pc, #108]	; (8001a08 <apply_filterbank+0x80>)
 800199c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001a0c <apply_filterbank+0x84>
 80019a0:	f005 fb8c 	bl	80070bc <arm_fill_f32>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e021      	b.n	80019ee <apply_filterbank+0x66>
    left_k = k_range[m][0];
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <apply_filterbank+0x88>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019b2:	613b      	str	r3, [r7, #16]
    len = k_range[m][1];
 80019b4:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <apply_filterbank+0x88>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	60fb      	str	r3, [r7, #12]
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	18d0      	adds	r0, r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <apply_filterbank+0x8c>)
 80019ce:	1899      	adds	r1, r3, r2
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	f006 ff11 	bl	80087fc <arm_dot_prod_f32>
    signal_buf[m - 1] = sum;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3b01      	subs	r3, #1
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4909      	ldr	r1, [pc, #36]	; (8001a08 <apply_filterbank+0x80>)
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	601a      	str	r2, [r3, #0]
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b28      	cmp	r3, #40	; 0x28
 80019f2:	d9da      	bls.n	80019aa <apply_filterbank+0x22>
  }
  arm_copy_f32(signal_buf, signal, NUM_FILTERS);
 80019f4:	2228      	movs	r2, #40	; 0x28
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <apply_filterbank+0x80>)
 80019fa:	f005 fb83 	bl	8007104 <arm_copy_f32>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200028b0 	.word	0x200028b0
 8001a0c:	00000000 	.word	0x00000000
 8001a10:	20001f60 	.word	0x20001f60
 8001a14:	20000a60 	.word	0x20000a60

08001a18 <apply_filterbank_logscale>:

// Filtered PSD in logscale
void apply_filterbank_logscale(float32_t *signal) {
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  for (int n = 0; n < NUM_FILTERS; n++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e022      	b.n	8001a6c <apply_filterbank_logscale+0x54>
    signal[n] = 20.0 * log10_approx(signal[n]);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	f7ff fc23 	bl	8001280 <log10_approx>
 8001a3a:	ee10 3a10 	vmov	r3, s0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <apply_filterbank_logscale+0x64>)
 8001a4a:	f7fe fdd5 	bl	80005f8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	18d4      	adds	r4, r2, r3
 8001a5e:	f7ff f8a3 	bl	8000ba8 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	6023      	str	r3, [r4, #0]
  for (int n = 0; n < NUM_FILTERS; n++) {
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b27      	cmp	r3, #39	; 0x27
 8001a70:	d9d9      	bls.n	8001a26 <apply_filterbank_logscale+0xe>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	40340000 	.word	0x40340000

08001a80 <apply_dct2>:

#ifndef FEATURE_MFSC
// DCT Type-II
void apply_dct2(float32_t *signal) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  arm_copy_f32(signal, signal_buf, NUM_FILTERS);
 8001a88:	2228      	movs	r2, #40	; 0x28
 8001a8a:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <apply_dct2+0x30>)
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f005 fb39 	bl	8007104 <arm_copy_f32>
  // DCT Type-II
  dct2_f32(&S_DCT, signal_buf, signal, 0);
 8001a92:	2300      	movs	r3, #0
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4906      	ldr	r1, [pc, #24]	; (8001ab0 <apply_dct2+0x30>)
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <apply_dct2+0x34>)
 8001a9a:	f7ff fb69 	bl	8001170 <dct2_f32>
  signal[0] = 0.0;  // Remove DC
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200028b0 	.word	0x200028b0
 8001ab4:	20000238 	.word	0x20000238

08001ab8 <uart_tx>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*
 * Output raw wave or feature to UART by memory-to-peripheral DMA
 */
void uart_tx(float32_t *in, int8_t *f, mode mode, bool dma_start, bool reset) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	4613      	mov	r3, r2
 8001acc:	71bb      	strb	r3, [r7, #6]

  int length = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  static char uart_buf[NUM_FILTERS * 2] = { 0 };
#else
  static char uart_buf[NN * 2] = { 0 };
#endif

  if (reset) {
 8001ad2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <uart_tx+0x28>
    idx = 0;
 8001ada:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <uart_tx+0x16c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
  }

  switch (mode) {
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d00e      	beq.n	8001b04 <uart_tx+0x4c>
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	dc0f      	bgt.n	8001b0a <uart_tx+0x52>
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d002      	beq.n	8001af4 <uart_tx+0x3c>
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d004      	beq.n	8001afc <uart_tx+0x44>
  case FEATURES:
    length = NUM_FILTERS * 2;
    break;

  default:
    break;
 8001af2:	e00a      	b.n	8001b0a <uart_tx+0x52>
    length = NN;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001afa:	e007      	b.n	8001b0c <uart_tx+0x54>
    length = NN / 2;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001b02:	e003      	b.n	8001b0c <uart_tx+0x54>
    length = NUM_FILTERS * 2;
 8001b04:	2350      	movs	r3, #80	; 0x50
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001b08:	e000      	b.n	8001b0c <uart_tx+0x54>
    break;
 8001b0a:	bf00      	nop
  }

  // Quantization: convert float into int
  if (mode == RAW_WAVE) {
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d130      	bne.n	8001b74 <uart_tx+0xbc>
    for (int n = 0; n < length; n++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	e028      	b.n	8001b6a <uart_tx+0xb2>
      // fit 24bit PCM into 18bit PCM by right bit shift
      int32_t raw32 = (int32_t) in[n] >> pcm_bit_shift;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b28:	ee17 2a90 	vmov	r2, s15
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <uart_tx+0x170>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa42 f303 	asr.w	r3, r2, r3
 8001b34:	61bb      	str	r3, [r7, #24]
      int16_t raw16 = (int16_t) raw32;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	82fb      	strh	r3, [r7, #22]
      uart_buf[idx++] = (uint8_t) (raw16 >> 8);      // MSB
 8001b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b3e:	121b      	asrs	r3, r3, #8
 8001b40:	b218      	sxth	r0, r3
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <uart_tx+0x16c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4936      	ldr	r1, [pc, #216]	; (8001c24 <uart_tx+0x16c>)
 8001b4a:	600a      	str	r2, [r1, #0]
 8001b4c:	b2c1      	uxtb	r1, r0
 8001b4e:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <uart_tx+0x174>)
 8001b50:	54d1      	strb	r1, [r2, r3]
      uart_buf[idx++] = (uint8_t) (raw16 & 0x00ff);  // LSB
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <uart_tx+0x16c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	4932      	ldr	r1, [pc, #200]	; (8001c24 <uart_tx+0x16c>)
 8001b5a:	600a      	str	r2, [r1, #0]
 8001b5c:	8afa      	ldrh	r2, [r7, #22]
 8001b5e:	b2d1      	uxtb	r1, r2
 8001b60:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <uart_tx+0x174>)
 8001b62:	54d1      	strb	r1, [r2, r3]
    for (int n = 0; n < length; n++) {
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	3301      	adds	r3, #1
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3a      	ldr	r2, [r7, #32]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbd2      	blt.n	8001b18 <uart_tx+0x60>
 8001b72:	e048      	b.n	8001c06 <uart_tx+0x14e>
    }
  } else if (mode == FEATURES) {
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d113      	bne.n	8001ba2 <uart_tx+0xea>
    if (f != NULL) {
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d042      	beq.n	8001c06 <uart_tx+0x14e>
      memcpy(uart_buf + idx, f, NUM_FILTERS * 2);
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <uart_tx+0x16c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <uart_tx+0x174>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	2250      	movs	r2, #80	; 0x50
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f008 f91b 	bl	8009dca <memcpy>
      idx += NUM_FILTERS * 2;
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <uart_tx+0x16c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3350      	adds	r3, #80	; 0x50
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <uart_tx+0x16c>)
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e031      	b.n	8001c06 <uart_tx+0x14e>
    }
  } else {
    for (int n = 0; n < length; n++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e02a      	b.n	8001bfe <uart_tx+0x146>
      if (in[n] < -128.0f)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001c30 <uart_tx+0x178>
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d506      	bpl.n	8001bd0 <uart_tx+0x118>
        in[n] = -128.0f;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8001bce:	601a      	str	r2, [r3, #0]
      uart_buf[idx++] = (int8_t) in[n];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	edc7 7a00 	vstr	s15, [r7]
 8001be4:	783b      	ldrb	r3, [r7, #0]
 8001be6:	b258      	sxtb	r0, r3
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <uart_tx+0x16c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <uart_tx+0x16c>)
 8001bf0:	600a      	str	r2, [r1, #0]
 8001bf2:	b2c1      	uxtb	r1, r0
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <uart_tx+0x174>)
 8001bf6:	54d1      	strb	r1, [r2, r3]
    for (int n = 0; n < length; n++) {
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbd0      	blt.n	8001ba8 <uart_tx+0xf0>
    }
  }

  // memory-to-peripheral DMA to UART
  if (dma_start) {
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <uart_tx+0x164>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*) uart_buf, idx);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <uart_tx+0x16c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4905      	ldr	r1, [pc, #20]	; (8001c2c <uart_tx+0x174>)
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <uart_tx+0x17c>)
 8001c18:	f003 fe66 	bl	80058e8 <HAL_UART_Transmit_DMA>
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20007974 	.word	0x20007974
 8001c28:	20003ae0 	.word	0x20003ae0
 8001c2c:	20007978 	.word	0x20007978
 8001c30:	c3000000 	.word	0xc3000000
 8001c34:	20003a0c 	.word	0x20003a0c

08001c38 <dsp>:

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, int8_t *f, mode mode) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]

  uint32_t start = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t end = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]

  start = HAL_GetTick();
 8001c4e:	f001 f975 	bl	8002f3c <HAL_GetTick>
 8001c52:	6178      	str	r0, [r7, #20]

#ifdef AC_COUPLING
  apply_ac_coupling(s1);  // remove DC
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fded 	bl	8001834 <apply_ac_coupling>
#endif

  if (mode >= SFFT) {
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f240 8083 	bls.w	8001d68 <dsp+0x130>
    // Pre-emphasis
    if (pre_emphasis_enabled) {
 8001c62:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <dsp+0x160>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <dsp+0x3a>
      apply_pre_emphasis(s1);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff fdcf 	bl	8001810 <apply_pre_emphasis>
    }
    apply_hann(s1);
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7ff fe0e 	bl	8001894 <apply_hann>
    apply_fft(s1);
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fe1d 	bl	80018b8 <apply_fft>
    apply_psd(s1);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fe32 	bl	80018e8 <apply_psd>
    if (mode < FEATURES) {
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d803      	bhi.n	8001c92 <dsp+0x5a>
      apply_psd_logscale(s1);
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff fe48 	bl	8001920 <apply_psd_logscale>
 8001c90:	e06a      	b.n	8001d68 <dsp+0x130>
    } else {
      apply_filterbank(s1);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fe78 	bl	8001988 <apply_filterbank>
      apply_filterbank_logscale(s1);
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff febd 	bl	8001a18 <apply_filterbank_logscale>
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e01a      	b.n	8001cda <dsp+0xa2>
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <dsp+0x164>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	edc7 7a00 	vstr	s15, [r7]
 8001ccc:	783a      	ldrb	r2, [r7, #0]
 8001cce:	b251      	sxtb	r1, r2
 8001cd0:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <dsp+0x168>)
 8001cd2:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b27      	cmp	r3, #39	; 0x27
 8001cde:	d9e1      	bls.n	8001ca4 <dsp+0x6c>
      }
      memcpy(f, mfsc_buffer + pos * NUM_FILTERS, NUM_FILTERS);
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <dsp+0x164>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <dsp+0x168>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2228      	movs	r2, #40	; 0x28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	68b8      	ldr	r0, [r7, #8]
 8001cfa:	f008 f866 	bl	8009dca <memcpy>
      apply_dct2(s1);
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff febe 	bl	8001a80 <apply_dct2>
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e01a      	b.n	8001d40 <dsp+0x108>
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <dsp+0x164>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	461a      	mov	r2, r3
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	edc7 7a00 	vstr	s15, [r7]
 8001d32:	783a      	ldrb	r2, [r7, #0]
 8001d34:	b251      	sxtb	r1, r2
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <dsp+0x16c>)
 8001d38:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b27      	cmp	r3, #39	; 0x27
 8001d44:	d9e1      	bls.n	8001d0a <dsp+0xd2>
      }
      memcpy(f + NUM_FILTERS, mfcc_buffer + pos * NUM_FILTERS, NUM_FILTERS);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <dsp+0x164>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <dsp+0x16c>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	2228      	movs	r2, #40	; 0x28
 8001d62:	4619      	mov	r1, r3
 8001d64:	f008 f831 	bl	8009dca <memcpy>
    }
  }
  if (++pos >= 200)
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <dsp+0x164>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <dsp+0x164>)
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <dsp+0x164>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2bc7      	cmp	r3, #199	; 0xc7
 8001d78:	dd02      	ble.n	8001d80 <dsp+0x148>
    pos = 0;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <dsp+0x164>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

  end = HAL_GetTick();
 8001d80:	f001 f8dc 	bl	8002f3c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]
  elapsed_time = end - start;
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <dsp+0x170>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000009 	.word	0x20000009
 8001d9c:	20007968 	.word	0x20007968
 8001da0:	20003ae8 	.word	0x20003ae8
 8001da4:	20005a28 	.word	0x20005a28
 8001da8:	20007970 	.word	0x20007970

08001dac <overlap_dsp>:
 *                 [ 5 | 6 ]       a(1/2)
 *                     [ 6 | 7 ]   a(2/2)
 * --- overlap dsp -----------------------
 *                         :
 */
void overlap_dsp(float32_t *buf, mode mode) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	f5ad 6d06 	sub.w	sp, sp, #2144	; 0x860
 8001db2:	af02      	add	r7, sp, #8
 8001db4:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001db8:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001dc4:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001dc8:	701a      	strb	r2, [r3, #0]

  float32_t signal[NN] = { 0.0f };
 8001dca:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001dce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f007 ff66 	bl	8009cac <memset>
  int8_t features[NUM_FILTERS * 2] = { 0U };
 8001de0:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001de4:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	3304      	adds	r3, #4
 8001dee:	224c      	movs	r2, #76	; 0x4c
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f007 ff5a 	bl	8009cac <memset>

  /*---- (1/2) -----------------------------------*/
  arm_copy_f32(buf, signal, NN);
 8001df8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001dfc:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e00:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f005 f97b 	bl	8007104 <arm_copy_f32>
  dsp(signal, features, mode);  // (1/2)
 8001e0e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e12:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	f107 0108 	add.w	r1, r7, #8
 8001e1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff09 	bl	8001c38 <dsp>

  if (uart_output) {
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <overlap_dsp+0x18c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d034      	beq.n	8001e9a <overlap_dsp+0xee>
    switch (mode) {
 8001e30:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e34:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <overlap_dsp+0x98>
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d00e      	beq.n	8001e60 <overlap_dsp+0xb4>
 8001e42:	e01b      	b.n	8001e7c <overlap_dsp+0xd0>
    case RAW_WAVE:
      uart_tx(signal, NULL, mode, true, true);
 8001e44:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e48:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001e52:	2301      	movs	r3, #1
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2301      	movs	r3, #1
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f7ff fe2d 	bl	8001ab8 <uart_tx>
      break;
 8001e5e:	e01c      	b.n	8001e9a <overlap_dsp+0xee>
    case SFFT:
      uart_tx(signal, NULL, mode, false, true);
 8001e60:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e64:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001e6e:	2301      	movs	r3, #1
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	f7ff fe1f 	bl	8001ab8 <uart_tx>
      break;
 8001e7a:	e00e      	b.n	8001e9a <overlap_dsp+0xee>
    default:
      uart_tx(signal, features, mode, false, true);
 8001e7c:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e80:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	f107 0108 	add.w	r1, r7, #8
 8001e8a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	f7ff fe10 	bl	8001ab8 <uart_tx>
      break;
 8001e98:	bf00      	nop
    }
  }

  /*---- (2/2) -----------------------------------*/
  arm_copy_f32(buf + NN_HALF, signal, NN);
 8001e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f607 0258 	addw	r2, r7, #2136	; 0x858
 8001ea4:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 f925 	bl	8007104 <arm_copy_f32>
  dsp(signal, features, mode);  // (2/2)
 8001eba:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001ebe:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	f107 0108 	add.w	r1, r7, #8
 8001ec8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff feb3 	bl	8001c38 <dsp>

  if (uart_output) {
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <overlap_dsp+0x18c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d028      	beq.n	8001f2e <overlap_dsp+0x182>
    switch (mode) {
 8001edc:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001ee0:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <overlap_dsp+0x144>
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d002      	beq.n	8001ef4 <overlap_dsp+0x148>
 8001eee:	e00f      	b.n	8001f10 <overlap_dsp+0x164>
    case RAW_WAVE:
      __NOP();
 8001ef0:	bf00      	nop
      break;
 8001ef2:	e01c      	b.n	8001f2e <overlap_dsp+0x182>
    case SFFT:
      uart_tx(signal, NULL, mode, true, false);
 8001ef4:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001ef8:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001f02:	2300      	movs	r3, #0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f7ff fdd5 	bl	8001ab8 <uart_tx>
      break;
 8001f0e:	e00e      	b.n	8001f2e <overlap_dsp+0x182>
    default:
      uart_tx(signal, features, mode, true, false);
 8001f10:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001f14:	f6a3 0355 	subw	r3, r3, #2133	; 0x855
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	f107 0108 	add.w	r1, r7, #8
 8001f1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001f22:	2300      	movs	r3, #0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2301      	movs	r3, #1
 8001f28:	f7ff fdc6 	bl	8001ab8 <uart_tx>
      break;
 8001f2c:	bf00      	nop
    }
  }

}
 8001f2e:	bf00      	nop
 8001f30:	f607 0758 	addw	r7, r7, #2136	; 0x858
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20003ade 	.word	0x20003ade

08001f3c <dump>:

/*
 * Dump debug info
 */
void dump(void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  if (debug_output != DISABLED) {
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <dump+0xb0>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d04b      	beq.n	8001fe4 <dump+0xa8>
    switch (debug_output) {
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <dump+0xb0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d002      	beq.n	8001f5c <dump+0x20>
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d036      	beq.n	8001fc8 <dump+0x8c>
      break;
    case ELAPSED_TIME:
      printf("mode: %d, elapsed_time: %lu(msec)\n", (int)output_mode, elapsed_time);
      break;
    default:
      break;
 8001f5a:	e040      	b.n	8001fde <dump+0xa2>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	e02b      	b.n	8001fba <dump+0x7e>
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 8001f62:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <dump+0xb4>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001f6a:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <dump+0xb4>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	461a      	mov	r2, r3
 8001f76:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <dump+0xb8>)
 8001f78:	f007 fd4a 	bl	8009a10 <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	e012      	b.n	8001fa8 <dump+0x6c>
          printf("%.3f,", filterbank[m][n]);
 8001f82:	491d      	ldr	r1, [pc, #116]	; (8001ff8 <dump+0xbc>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fad8 	bl	8000548 <__aeabi_f2d>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <dump+0xc0>)
 8001f9e:	f007 fd37 	bl	8009a10 <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b1f      	cmp	r3, #31
 8001fac:	dde9      	ble.n	8001f82 <dump+0x46>
        printf("\n");
 8001fae:	200a      	movs	r0, #10
 8001fb0:	f007 fd40 	bl	8009a34 <putchar>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b29      	cmp	r3, #41	; 0x29
 8001fbe:	d9d0      	bls.n	8001f62 <dump+0x26>
      printf("e\n");
 8001fc0:	480f      	ldr	r0, [pc, #60]	; (8002000 <dump+0xc4>)
 8001fc2:	f007 fd93 	bl	8009aec <puts>
      break;
 8001fc6:	e00a      	b.n	8001fde <dump+0xa2>
      printf("mode: %d, elapsed_time: %lu(msec)\n", (int)output_mode, elapsed_time);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <dump+0xc8>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <dump+0xcc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <dump+0xd0>)
 8001fd8:	f007 fd1a 	bl	8009a10 <iprintf>
      break;
 8001fdc:	bf00      	nop
    }
    debug_output = DISABLED;
 8001fde:	4b03      	ldr	r3, [pc, #12]	; (8001fec <dump+0xb0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2000796c 	.word	0x2000796c
 8001ff0:	20001f60 	.word	0x20001f60
 8001ff4:	0800cea0 	.word	0x0800cea0
 8001ff8:	20000a60 	.word	0x20000a60
 8001ffc:	0800cea8 	.word	0x0800cea8
 8002000:	0800ceb0 	.word	0x0800ceb0
 8002004:	20000008 	.word	0x20000008
 8002008:	20007970 	.word	0x20007970
 800200c:	0800ceb4 	.word	0x0800ceb4

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	f5ad 5de0 	sub.w	sp, sp, #7168	; 0x1c00
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
// Audio sample rate and period
  float32_t f_s;

// DMA peripheral-to-memory double buffer
  int32_t input_buf[NN * 2] = { 0 };
 800201a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800201e:	3b0c      	subs	r3, #12
 8002020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f007 fe40 	bl	8009cac <memset>

// PCM data store for further processing (FFT etc)
  float32_t signal_buf[NN + NN / 2] = { 0.0f };  // NN/2 overlap
 800202c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8002030:	f6a3 430c 	subw	r3, r3, #3084	; 0xc0c
 8002034:	4618      	mov	r0, r3
 8002036:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800203a:	461a      	mov	r2, r3
 800203c:	2100      	movs	r1, #0
 800203e:	f007 fe35 	bl	8009cac <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002042:	f000 ff0b 	bl	8002e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002046:	f000 f907 	bl	8002258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204a:	f000 fa43 	bl	80024d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800204e:	f000 fa1b 	bl	8002488 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002052:	f000 f9e9 	bl	8002428 <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8002056:	f000 f951 	bl	80022fc <MX_DFSDM1_Init>
  MX_USART1_UART_Init();
 800205a:	f000 f9b5 	bl	80023c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  f_s = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <main+0x228>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b76      	ldr	r3, [pc, #472]	; (800223c <main+0x22c>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 800206a:	4b75      	ldr	r3, [pc, #468]	; (8002240 <main+0x230>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <main+0x230>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
  f_s = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002082:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002086:	f103 0304 	add.w	r3, r3, #4
 800208a:	edc3 7a00 	vstr	s15, [r3]

// DSP initialization
  init_dsp(f_s);
 800208e:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002092:	f103 0304 	add.w	r3, r3, #4
 8002096:	ed93 0a00 	vldr	s0, [r3]
 800209a:	f7ff fb7d 	bl	8001798 <init_dsp>

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf, NN * 2)
 800209e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80020a2:	3b0c      	subs	r3, #12
 80020a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a8:	4619      	mov	r1, r3
 80020aa:	4865      	ldr	r0, [pc, #404]	; (8002240 <main+0x230>)
 80020ac:	f001 fa44 	bl	8003538 <HAL_DFSDM_FilterRegularStart_DMA>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <main+0xaa>
      != HAL_OK) {
    Error_Handler();
 80020b6:	f000 fb79 	bl	80027ac <Error_Handler>
  }

// Enable UART receive interrupt to receive a command
// from an application processor
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80020ba:	2201      	movs	r2, #1
 80020bc:	4961      	ldr	r1, [pc, #388]	; (8002244 <main+0x234>)
 80020be:	4862      	ldr	r0, [pc, #392]	; (8002248 <main+0x238>)
 80020c0:	f003 fbc6 	bl	8005850 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // Wait for next PCM samples from M1
    if (new_pcm_data_a) {  // 1st half of the buffer
 80020c4:	4b61      	ldr	r3, [pc, #388]	; (800224c <main+0x23c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d055      	beq.n	800217a <main+0x16a>

      // Overlap
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	3b0c      	subs	r3, #12
 80020d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020dc:	f107 0110 	add.w	r1, r7, #16
 80020e0:	390c      	subs	r1, #12
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 f80e 	bl	8007104 <arm_copy_f32>

      // Bit shift to obtain 16-bit PCM
      for (uint32_t n = 0; n < NN; n++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 80020ee:	f102 020c 	add.w	r2, r2, #12
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e02c      	b.n	8002150 <main+0x140>
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n]
 80020f6:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80020fa:	461a      	mov	r2, r3
 80020fc:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002100:	f103 030c 	add.w	r3, r3, #12
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
            >> REGISTER_BIT_SHIFT);
 800210e:	1219      	asrs	r1, r3, #8
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[n]
 8002110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002114:	461a      	mov	r2, r3
 8002116:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 800211a:	f103 030c 	add.w	r3, r3, #12
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4413      	add	r3, r2
 8002122:	ee07 1a90 	vmov	s15, r1
 8002126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212a:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 800212e:	f6a2 420c 	subw	r2, r2, #3084	; 0xc0c
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t n = 0; n < NN; n++) {
 800213a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 800213e:	f103 030c 	add.w	r3, r3, #12
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 800214a:	f102 020c 	add.w	r2, r2, #12
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002154:	f103 030c 	add.w	r3, r3, #12
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215e:	d3ca      	bcc.n	80020f6 <main+0xe6>
      }

      // Overlap dsp
      overlap_dsp(signal_buf, output_mode);
 8002160:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <main+0x240>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	3b0c      	subs	r3, #12
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fe1c 	bl	8001dac <overlap_dsp>

      new_pcm_data_a = false;
 8002174:	4b35      	ldr	r3, [pc, #212]	; (800224c <main+0x23c>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]

    }

    if (new_pcm_data_b) {  // 2nd half of the buffer
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <main+0x244>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d056      	beq.n	8002232 <main+0x222>

      // Overlap
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	3b0c      	subs	r3, #12
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002192:	f107 0110 	add.w	r1, r7, #16
 8002196:	390c      	subs	r1, #12
 8002198:	4618      	mov	r0, r3
 800219a:	f004 ffb3 	bl	8007104 <arm_copy_f32>

      // Bit shift to obtain 16-bit PCM
      for (uint32_t n = 0; n < NN; n++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 80021a4:	f102 0208 	add.w	r2, r2, #8
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e02d      	b.n	8002208 <main+0x1f8>
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[NN + n]
 80021ac:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 80021b0:	f103 0308 	add.w	r3, r3, #8
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021ba:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
            >> REGISTER_BIT_SHIFT);
 80021c6:	1219      	asrs	r1, r3, #8
        signal_buf[n + NN_HALF] = (float32_t) (input_buf[NN + n]
 80021c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021cc:	461a      	mov	r2, r3
 80021ce:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 80021d2:	f103 0308 	add.w	r3, r3, #8
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	ee07 1a90 	vmov	s15, r1
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80021e6:	f6a2 420c 	subw	r2, r2, #3084	; 0xc0c
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t n = 0; n < NN; n++) {
 80021f2:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 80021f6:	f103 0308 	add.w	r3, r3, #8
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8002202:	f102 0208 	add.w	r2, r2, #8
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 800220c:	f103 0308 	add.w	r3, r3, #8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002216:	d3c9      	bcc.n	80021ac <main+0x19c>
      }

      // Overlap dsp
      overlap_dsp(signal_buf, output_mode);
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <main+0x240>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	3b0c      	subs	r3, #12
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fdc0 	bl	8001dac <overlap_dsp>

      new_pcm_data_b = false;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <main+0x244>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
    }

    // Dump debug info
    dump();
 8002232:	f7ff fe83 	bl	8001f3c <dump>
    if (new_pcm_data_a) {  // 1st half of the buffer
 8002236:	e745      	b.n	80020c4 <main+0xb4>
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20003904 	.word	0x20003904
 8002240:	200038b0 	.word	0x200038b0
 8002244:	20003ae4 	.word	0x20003ae4
 8002248:	20003a0c 	.word	0x20003a0c
 800224c:	20003adc 	.word	0x20003adc
 8002250:	20000008 	.word	0x20000008
 8002254:	20003add 	.word	0x20003add

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b096      	sub	sp, #88	; 0x58
 800225c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	2244      	movs	r2, #68	; 0x44
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f007 fd20 	bl	8009cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800226c:	463b      	mov	r3, r7
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800227a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800227e:	f001 fefd 	bl	800407c <HAL_PWREx_ControlVoltageScaling>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002288:	f000 fa90 	bl	80027ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800228c:	2302      	movs	r3, #2
 800228e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002296:	2310      	movs	r3, #16
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229a:	2302      	movs	r3, #2
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800229e:	2302      	movs	r3, #2
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022a6:	230a      	movs	r3, #10
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022aa:	2307      	movs	r3, #7
 80022ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 ff34 	bl	8004128 <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80022c6:	f000 fa71 	bl	80027ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ca:	230f      	movs	r3, #15
 80022cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	2303      	movs	r3, #3
 80022d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	2104      	movs	r1, #4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fafc 	bl	80048e0 <HAL_RCC_ClockConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022ee:	f000 fa5d 	bl	80027ac <Error_Handler>
  }
}
 80022f2:	bf00      	nop
 80022f4:	3758      	adds	r7, #88	; 0x58
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8002300:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 8002302:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <MX_DFSDM1_Init+0xbc>)
 8002304:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 800230e:	2201      	movs	r2, #1
 8002310:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 8002314:	2201      	movs	r2, #1
 8002316:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 800231a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800231e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 8002328:	2201      	movs	r2, #1
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800232c:	4821      	ldr	r0, [pc, #132]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 800232e:	f000 ffe3 	bl	80032f8 <HAL_DFSDM_FilterInit>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8002338:	f000 fa38 	bl	80027ac <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <MX_DFSDM1_Init+0xc4>)
 8002340:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002344:	2201      	movs	r2, #1
 8002346:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 64;
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002368:	2200      	movs	r2, #0
 800236a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 800236e:	2204      	movs	r2, #4
 8002370:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 800237a:	2201      	movs	r2, #1
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002380:	2200      	movs	r2, #0
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x1;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 8002386:	2201      	movs	r2, #1
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800238a:	480c      	ldr	r0, [pc, #48]	; (80023bc <MX_DFSDM1_Init+0xc0>)
 800238c:	f000 fef4 	bl	8003178 <HAL_DFSDM_ChannelInit>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8002396:	f000 fa09 	bl	80027ac <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800239a:	2201      	movs	r2, #1
 800239c:	4909      	ldr	r1, [pc, #36]	; (80023c4 <MX_DFSDM1_Init+0xc8>)
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_DFSDM1_Init+0xb8>)
 80023a0:	f001 f884 	bl	80034ac <HAL_DFSDM_FilterConfigRegChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80023aa:	f000 f9ff 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200038b0 	.word	0x200038b0
 80023b8:	40016100 	.word	0x40016100
 80023bc:	20003904 	.word	0x20003904
 80023c0:	40016060 	.word	0x40016060
 80023c4:	00030008 	.word	0x00030008

080023c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <MX_USART1_UART_Init+0x5c>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_USART1_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_USART1_UART_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_USART1_UART_Init+0x58>)
 800240c:	f003 f948 	bl	80056a0 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002416:	f000 f9c9 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20003984 	.word	0x20003984
 8002424:	40013800 	.word	0x40013800

08002428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800242e:	4a15      	ldr	r2, [pc, #84]	; (8002484 <MX_USART2_UART_Init+0x5c>)
 8002430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002434:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800246c:	f003 f918 	bl	80056a0 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002476:	f000 f999 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20003a0c 	.word	0x20003a0c
 8002484:	40004400 	.word	0x40004400

08002488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <MX_DMA_Init+0x48>)
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <MX_DMA_Init+0x48>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6493      	str	r3, [r2, #72]	; 0x48
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_DMA_Init+0x48>)
 800249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	200e      	movs	r0, #14
 80024ac:	f000 fe2d 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80024b0:	200e      	movs	r0, #14
 80024b2:	f000 fe46 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2011      	movs	r0, #17
 80024bc:	f000 fe25 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80024c0:	2011      	movs	r0, #17
 80024c2:	f000 fe3e 	bl	8003142 <HAL_NVIC_EnableIRQ>

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <MX_GPIO_Init+0xc4>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <MX_GPIO_Init+0xc4>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <MX_GPIO_Init+0xc4>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a24      	ldr	r2, [pc, #144]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <MX_GPIO_Init+0xc4>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_GPIO_Init+0xc4>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	2120      	movs	r1, #32
 800254e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002552:	f001 fd6d 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800255c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	480b      	ldr	r0, [pc, #44]	; (800259c <MX_GPIO_Init+0xc8>)
 800256e:	f001 fbb5 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002572:	2320      	movs	r3, #32
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258c:	f001 fba6 	bl	8003cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	48000800 	.word	0x48000800

080025a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @brief  Half regular conversion complete callback.
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if (!new_pcm_data_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f083 0301 	eor.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d102      	bne.n	80025c6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
    new_pcm_data_a = true;  // ready for 1st half of the buffer
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20003adc 	.word	0x20003adc
 80025d8:	200038b0 	.word	0x200038b0

080025dc <HAL_DFSDM_FilterRegConvCpltCallback>:
 using HAL_DFSDM_FilterGetRegularValue.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if (!new_pcm_data_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a07      	ldr	r2, [pc, #28]	; (8002614 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
    new_pcm_data_b = true;  // ready for 2nd half of the buffer
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20003add 	.word	0x20003add
 8002614:	200038b0 	.word	0x200038b0

08002618 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, (uint16_t) len, 0xFFFFFFFF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	b29a      	uxth	r2, r3
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <_write+0x28>)
 8002630:	f003 f884 	bl	800573c <HAL_UART_Transmit>
  return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20003a0c 	.word	0x20003a0c

08002644 <HAL_UART_RxCpltCallback>:
}

/*
 * One-byte command reception from an application processor
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  char cmd;

  cmd = rxbuf[0];
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_UART_RxCpltCallback+0x14c>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	73fb      	strb	r3, [r7, #15]

  switch (cmd) {
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3b46      	subs	r3, #70	; 0x46
 8002656:	2b2e      	cmp	r3, #46	; 0x2e
 8002658:	f200 8085 	bhi.w	8002766 <HAL_UART_RxCpltCallback+0x122>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <HAL_UART_RxCpltCallback+0x20>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	08002757 	.word	0x08002757
 8002668:	08002767 	.word	0x08002767
 800266c:	08002767 	.word	0x08002767
 8002670:	08002767 	.word	0x08002767
 8002674:	08002767 	.word	0x08002767
 8002678:	08002767 	.word	0x08002767
 800267c:	08002767 	.word	0x08002767
 8002680:	08002767 	.word	0x08002767
 8002684:	08002767 	.word	0x08002767
 8002688:	08002751 	.word	0x08002751
 800268c:	08002741 	.word	0x08002741
 8002690:	08002767 	.word	0x08002767
 8002694:	08002767 	.word	0x08002767
 8002698:	08002767 	.word	0x08002767
 800269c:	08002767 	.word	0x08002767
 80026a0:	08002767 	.word	0x08002767
 80026a4:	08002767 	.word	0x08002767
 80026a8:	08002767 	.word	0x08002767
 80026ac:	08002767 	.word	0x08002767
 80026b0:	08002767 	.word	0x08002767
 80026b4:	08002767 	.word	0x08002767
 80026b8:	08002767 	.word	0x08002767
 80026bc:	08002767 	.word	0x08002767
 80026c0:	08002767 	.word	0x08002767
 80026c4:	08002767 	.word	0x08002767
 80026c8:	08002767 	.word	0x08002767
 80026cc:	08002767 	.word	0x08002767
 80026d0:	08002767 	.word	0x08002767
 80026d4:	08002767 	.word	0x08002767
 80026d8:	08002767 	.word	0x08002767
 80026dc:	08002767 	.word	0x08002767
 80026e0:	08002767 	.word	0x08002767
 80026e4:	08002731 	.word	0x08002731
 80026e8:	08002767 	.word	0x08002767
 80026ec:	08002767 	.word	0x08002767
 80026f0:	08002767 	.word	0x08002767
 80026f4:	08002767 	.word	0x08002767
 80026f8:	08002767 	.word	0x08002767
 80026fc:	08002767 	.word	0x08002767
 8002700:	08002767 	.word	0x08002767
 8002704:	08002767 	.word	0x08002767
 8002708:	08002749 	.word	0x08002749
 800270c:	08002739 	.word	0x08002739
 8002710:	08002767 	.word	0x08002767
 8002714:	08002721 	.word	0x08002721
 8002718:	08002729 	.word	0x08002729
 800271c:	0800275f 	.word	0x0800275f

// Pre-emphasis
  case 'r':
    output_mode = RAW_WAVE;
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_UART_RxCpltCallback+0x150>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
    break;
 8002726:	e029      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 's':
    output_mode = SFFT;
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_UART_RxCpltCallback+0x150>)
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
    break;
 800272e:	e025      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 'f':
    output_mode = FEATURES;
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_UART_RxCpltCallback+0x150>)
 8002732:	2203      	movs	r2, #3
 8002734:	701a      	strb	r2, [r3, #0]
    break;
 8002736:	e021      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 'p':
    pre_emphasis_enabled = true;
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_UART_RxCpltCallback+0x154>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    break;
 800273e:	e01d      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 'P':
    pre_emphasis_enabled = false;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_UART_RxCpltCallback+0x154>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
    break;
 8002746:	e019      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 'o':  // TX On
    uart_output = true;
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_UART_RxCpltCallback+0x158>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
    break;
 800274e:	e015      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 'O':  // Tx off
    uart_output = false;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_UART_RxCpltCallback+0x158>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
  case 'F':
    debug_output = FILTERBANK;
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_UART_RxCpltCallback+0x15c>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
    break;
 800275c:	e00e      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  case 't':
    debug_output = ELAPSED_TIME;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_UART_RxCpltCallback+0x15c>)
 8002760:	2202      	movs	r2, #2
 8002762:	701a      	strb	r2, [r3, #0]
    break;
 8002764:	e00a      	b.n	800277c <HAL_UART_RxCpltCallback+0x138>
  default:
    if (cmd >= 0x30 && cmd <= 0x38) {
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b2f      	cmp	r3, #47	; 0x2f
 800276a:	d906      	bls.n	800277a <HAL_UART_RxCpltCallback+0x136>
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b38      	cmp	r3, #56	; 0x38
 8002770:	d803      	bhi.n	800277a <HAL_UART_RxCpltCallback+0x136>
      pcm_bit_shift = (int) (cmd - 0x30);
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3b30      	subs	r3, #48	; 0x30
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_UART_RxCpltCallback+0x160>)
 8002778:	6013      	str	r3, [r2, #0]
    }
    break;
 800277a:	bf00      	nop
  }

  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	4904      	ldr	r1, [pc, #16]	; (8002790 <HAL_UART_RxCpltCallback+0x14c>)
 8002780:	4809      	ldr	r0, [pc, #36]	; (80027a8 <HAL_UART_RxCpltCallback+0x164>)
 8002782:	f003 f865 	bl	8005850 <HAL_UART_Receive_IT>
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20003ae4 	.word	0x20003ae4
 8002794:	20000008 	.word	0x20000008
 8002798:	20000009 	.word	0x20000009
 800279c:	20003ade 	.word	0x20003ade
 80027a0:	2000796c 	.word	0x2000796c
 80027a4:	20003ae0 	.word	0x20003ae0
 80027a8:	20003a0c 	.word	0x20003a0c

080027ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80027b4:	e7fe      	b.n	80027b4 <Error_Handler+0x8>
	...

080027b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_MspInit+0x44>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_MspInit+0x44>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_MspInit+0x44>)
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_MspInit+0x44>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_MspInit+0x44>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_MspInit+0x44>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b0ac      	sub	sp, #176	; 0xb0
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2288      	movs	r2, #136	; 0x88
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f007 fa43 	bl	8009cac <memset>
  if(DFSDM1_Init == 0)
 8002826:	4b44      	ldr	r3, [pc, #272]	; (8002938 <HAL_DFSDM_FilterMspInit+0x138>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d14a      	bne.n	80028c4 <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800282e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fa72 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800284a:	f7ff ffaf 	bl	80027ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_DFSDM_FilterMspInit+0x13c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	4a39      	ldr	r2, [pc, #228]	; (800293c <HAL_DFSDM_FilterMspInit+0x13c>)
 8002856:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_DFSDM_FilterMspInit+0x13c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10b      	bne.n	8002878 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_DFSDM_FilterMspInit+0x140>)
 8002862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002864:	4a36      	ldr	r2, [pc, #216]	; (8002940 <HAL_DFSDM_FilterMspInit+0x140>)
 8002866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286a:	6613      	str	r3, [r2, #96]	; 0x60
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <HAL_DFSDM_FilterMspInit+0x140>)
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002878:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_DFSDM_FilterMspInit+0x140>)
 800287a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287c:	4a30      	ldr	r2, [pc, #192]	; (8002940 <HAL_DFSDM_FilterMspInit+0x140>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_DFSDM_FilterMspInit+0x140>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8002890:	2384      	movs	r3, #132	; 0x84
 8002892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80028a8:	2306      	movs	r3, #6
 80028aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028b2:	4619      	mov	r1, r3
 80028b4:	4823      	ldr	r0, [pc, #140]	; (8002944 <HAL_DFSDM_FilterMspInit+0x144>)
 80028b6:	f001 fa11 	bl	8003cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_DFSDM_FilterMspInit+0x138>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_DFSDM_FilterMspInit+0x138>)
 80028c2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <HAL_DFSDM_FilterMspInit+0x148>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d130      	bne.n	8002930 <HAL_DFSDM_FilterMspInit+0x130>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028d0:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_DFSDM_FilterMspInit+0x150>)
 80028d2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028fa:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028fe:	2220      	movs	r2, #32
 8002900:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8002908:	4810      	ldr	r0, [pc, #64]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 800290a:	f000 ff71 	bl	80037f0 <HAL_DMA_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_DFSDM_FilterMspInit+0x118>
    {
      Error_Handler();
 8002914:	f7ff ff4a 	bl	80027ac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_DFSDM_FilterMspInit+0x14c>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8002930:	bf00      	nop
 8002932:	37b0      	adds	r7, #176	; 0xb0
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20007d7c 	.word	0x20007d7c
 800293c:	20007d78 	.word	0x20007d78
 8002940:	40021000 	.word	0x40021000
 8002944:	48000800 	.word	0x48000800
 8002948:	40016100 	.word	0x40016100
 800294c:	2000393c 	.word	0x2000393c
 8002950:	40020044 	.word	0x40020044

08002954 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0ac      	sub	sp, #176	; 0xb0
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2288      	movs	r2, #136	; 0x88
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f007 f999 	bl	8009cac <memset>
  if(DFSDM1_Init == 0)
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d14a      	bne.n	8002a18 <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002986:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4618      	mov	r0, r3
 8002994:	f002 f9c8 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800299e:	f7ff ff05 	bl	80027ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80029aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10b      	bne.n	80029cc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029be:	6613      	str	r3, [r2, #96]	; 0x60
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80029e4:	2384      	movs	r3, #132	; 0x84
 80029e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80029fc:	2306      	movs	r3, #6
 80029fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a06:	4619      	mov	r1, r3
 8002a08:	4808      	ldr	r0, [pc, #32]	; (8002a2c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002a0a:	f001 f967 	bl	8003cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a02      	ldr	r2, [pc, #8]	; (8002a20 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8002a16:	6013      	str	r3, [r2, #0]
  }

}
 8002a18:	bf00      	nop
 8002a1a:	37b0      	adds	r7, #176	; 0xb0
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20007d7c 	.word	0x20007d7c
 8002a24:	20007d78 	.word	0x20007d78
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	48000800 	.word	0x48000800

08002a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0ae      	sub	sp, #184	; 0xb8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	2288      	movs	r2, #136	; 0x88
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f007 f92b 	bl	8009cac <memset>
  if(huart->Instance==USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5f      	ldr	r2, [pc, #380]	; (8002bd8 <HAL_UART_MspInit+0x1a8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d145      	bne.n	8002aec <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a64:	2300      	movs	r3, #0
 8002a66:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f002 f95b 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a78:	f7ff fe98 	bl	80027ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a7c:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a80:	4a56      	ldr	r2, [pc, #344]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a86:	6613      	str	r3, [r2, #96]	; 0x60
 8002a88:	4b54      	ldr	r3, [pc, #336]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa0:	4b4e      	ldr	r3, [pc, #312]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002aac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f001 f901 	bl	8003cdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2025      	movs	r0, #37	; 0x25
 8002ae0:	f000 fb13 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ae4:	2025      	movs	r0, #37	; 0x25
 8002ae6:	f000 fb2c 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aea:	e071      	b.n	8002bd0 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <HAL_UART_MspInit+0x1b0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d16c      	bne.n	8002bd0 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002af6:	2302      	movs	r3, #2
 8002af8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002afa:	2300      	movs	r3, #0
 8002afc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 f910 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002b0e:	f7ff fe4d 	bl	80027ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_UART_MspInit+0x1ac>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b42:	230c      	movs	r3, #12
 8002b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b64:	4619      	mov	r1, r3
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6a:	f001 f8b7 	bl	8003cdc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_UART_MspInit+0x1b8>)
 8002b72:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b76:	2202      	movs	r2, #2
 8002b78:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ba4:	480f      	ldr	r0, [pc, #60]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002ba6:	f000 fe23 	bl	80037f0 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8002bb0:	f7ff fdfc 	bl	80027ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002bb8:	671a      	str	r2, [r3, #112]	; 0x70
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <HAL_UART_MspInit+0x1b4>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2026      	movs	r0, #38	; 0x26
 8002bc6:	f000 faa0 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bca:	2026      	movs	r0, #38	; 0x26
 8002bcc:	f000 fab9 	bl	8003142 <HAL_NVIC_EnableIRQ>
}
 8002bd0:	bf00      	nop
 8002bd2:	37b8      	adds	r7, #184	; 0xb8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40004400 	.word	0x40004400
 8002be4:	20003a94 	.word	0x20003a94
 8002be8:	40020080 	.word	0x40020080

08002bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <NMI_Handler+0x4>

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c38:	f000 f96c 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <DMA1_Channel4_IRQHandler+0x10>)
 8002c46:	f000 ff6a 	bl	8003b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000393c 	.word	0x2000393c

08002c54 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <DMA1_Channel7_IRQHandler+0x10>)
 8002c5a:	f000 ff60 	bl	8003b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20003a94 	.word	0x20003a94

08002c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <USART1_IRQHandler+0x10>)
 8002c6e:	f002 feb7 	bl	80059e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20003984 	.word	0x20003984

08002c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <USART2_IRQHandler+0x10>)
 8002c82:	f002 fead 	bl	80059e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20003a0c 	.word	0x20003a0c

08002c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return 1;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_kill>:

int _kill(int pid, int sig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002caa:	f007 f861 	bl	8009d70 <__errno>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2216      	movs	r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_exit>:

void _exit (int status)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe7 	bl	8002ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cd2:	e7fe      	b.n	8002cd2 <_exit+0x12>

08002cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e00a      	b.n	8002cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce6:	f3af 8000 	nop.w
 8002cea:	4601      	mov	r1, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	b2ca      	uxtb	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf0      	blt.n	8002ce6 <_read+0x12>
  }

  return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d36:	605a      	str	r2, [r3, #4]
  return 0;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_isatty>:

int _isatty(int file)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <_sbrk+0x5c>)
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <_sbrk+0x60>)
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <_sbrk+0x64>)
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <_sbrk+0x68>)
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <_sbrk+0x64>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d207      	bcs.n	8002db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da8:	f006 ffe2 	bl	8009d70 <__errno>
 8002dac:	4603      	mov	r3, r0
 8002dae:	220c      	movs	r2, #12
 8002db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	e009      	b.n	8002dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <_sbrk+0x64>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <_sbrk+0x64>)
 8002dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20018000 	.word	0x20018000
 8002dd8:	00000400 	.word	0x00000400
 8002ddc:	20007d80 	.word	0x20007d80
 8002de0:	20007ef8 	.word	0x20007ef8

08002de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <SystemInit+0x20>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <SystemInit+0x20>)
 8002df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e0c:	f7ff ffea 	bl	8002de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e10:	480c      	ldr	r0, [pc, #48]	; (8002e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e12:	490d      	ldr	r1, [pc, #52]	; (8002e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <LoopForever+0xe>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e28:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <LoopForever+0x16>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e36:	f006 ffa1 	bl	8009d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e3a:	f7ff f8e9 	bl	8002010 <main>

08002e3e <LoopForever>:

LoopForever:
    b LoopForever
 8002e3e:	e7fe      	b.n	8002e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e48:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002e4c:	08020ac0 	.word	0x08020ac0
  ldr r2, =_sbss
 8002e50:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002e54:	20007ef8 	.word	0x20007ef8

08002e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e58:	e7fe      	b.n	8002e58 <ADC1_2_IRQHandler>
	...

08002e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_Init+0x3c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <HAL_Init+0x3c>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e72:	2003      	movs	r0, #3
 8002e74:	f000 f93e 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f000 f80f 	bl	8002e9c <HAL_InitTick>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	e001      	b.n	8002e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e8a:	f7ff fc95 	bl	80027b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022000 	.word	0x40022000

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <HAL_InitTick+0x6c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d023      	beq.n	8002ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_InitTick+0x70>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_InitTick+0x6c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f949 	bl	800315e <HAL_SYSTICK_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d809      	bhi.n	8002eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f000 f913 	bl	800310a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_InitTick+0x74>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e007      	b.n	8002efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e004      	b.n	8002efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
 8002ef6:	e001      	b.n	8002efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000014 	.word	0x20000014
 8002f0c:	2000000c 	.word	0x2000000c
 8002f10:	20000010 	.word	0x20000010

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000014 	.word	0x20000014
 8002f38:	20007d84 	.word	0x20007d84

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20007d84 	.word	0x20007d84

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff8e 	bl	8002ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff29 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800311c:	f7ff ff3e 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 8003120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff8e 	bl	8003048 <NVIC_EncodePriority>
 800312c:	4602      	mov	r2, r0
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff5d 	bl	8002ff4 <__NVIC_SetPriority>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff31 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffa2 	bl	80030b0 <SysTick_Config>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0ac      	b.n	80032e4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa8c 	bl	80036ac <DFSDM_GetChannelFromInstance>
 8003194:	4603      	mov	r3, r0
 8003196:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_DFSDM_ChannelInit+0x174>)
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e09f      	b.n	80032e4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fbd5 	bl	8002954 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80031aa:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <HAL_DFSDM_ChannelInit+0x178>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	4a4f      	ldr	r2, [pc, #316]	; (80032f0 <HAL_DFSDM_ChannelInit+0x178>)
 80031b2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80031b4:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <HAL_DFSDM_ChannelInit+0x178>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d125      	bne.n	8003208 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80031bc:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4c      	ldr	r2, [pc, #304]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4948      	ldr	r1, [pc, #288]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a46      	ldr	r2, [pc, #280]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80031e0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d108      	bne.n	80031fc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80031ea:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	493f      	ldr	r1, [pc, #252]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80031fc:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3c      	ldr	r2, [pc, #240]	; (80032f4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003206:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003216:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003226:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800322c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020f 	bic.w	r2, r2, #15
 8003244:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800326c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f002 0207 	and.w	r2, r2, #7
 8003298:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f9ea 	bl	80036ac <DFSDM_GetChannelFromInstance>
 80032d8:	4602      	mov	r2, r0
 80032da:	4904      	ldr	r1, [pc, #16]	; (80032ec <HAL_DFSDM_ChannelInit+0x174>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20007d8c 	.word	0x20007d8c
 80032f0:	20007d88 	.word	0x20007d88
 80032f4:	40016000 	.word	0x40016000

080032f8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0ca      	b.n	80034a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a66      	ldr	r2, [pc, #408]	; (80034a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003318:	2b01      	cmp	r3, #1
 800331a:	d003      	beq.n	8003324 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0bb      	b.n	80034a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fa5d 	bl	8002800 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003354:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7a1b      	ldrb	r3, [r3, #8]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d108      	bne.n	8003370 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e007      	b.n	8003380 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800337e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7a5b      	ldrb	r3, [r3, #9]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d108      	bne.n	800339a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e007      	b.n	80033aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80033b8:	f023 0308 	bic.w	r3, r3, #8
 80033bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d108      	bne.n	80033d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7c1b      	ldrb	r3, [r3, #16]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0210 	orr.w	r2, r2, #16
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e007      	b.n	8003402 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0210 	bic.w	r2, r2, #16
 8003400:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7c5b      	ldrb	r3, [r3, #17]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d108      	bne.n	800341c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0220 	orr.w	r2, r2, #32
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e007      	b.n	800342c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0220 	bic.w	r2, r2, #32
 800342a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800343a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800343e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6959      	ldr	r1, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	3b01      	subs	r3, #1
 8003450:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003452:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800345a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7c1a      	ldrb	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40016100 	.word	0x40016100

080034ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02e      	beq.n	8003524 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80034cc:	2bff      	cmp	r3, #255	; 0xff
 80034ce:	d029      	beq.n	8003524 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10d      	bne.n	8003506 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e00a      	b.n	800351c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
 8003522:	e001      	b.n	8003528 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
}
 800352a:	4618      	mov	r0, r3
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
 8003558:	e064      	b.n	8003624 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003568:	d002      	beq.n	8003570 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
 800356e:	e059      	b.n	8003624 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10e      	bne.n	8003596 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d002      	beq.n	8003596 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
 8003594:	e046      	b.n	8003624 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d102      	bne.n	80035b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75fb      	strb	r3, [r7, #23]
 80035b4:	e036      	b.n	8003624 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d004      	beq.n	80035ca <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d12a      	bne.n	8003620 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	4a17      	ldr	r2, [pc, #92]	; (8003634 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d101      	bne.n	80035e8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80035e6:	e000      	b.n	80035ea <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80035e8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	331c      	adds	r3, #28
 80035fa:	4619      	mov	r1, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f000 f9ae 	bl	8003960 <HAL_DMA_Start_IT>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003616:	e005      	b.n	8003624 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f893 	bl	8003744 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800361e:	e001      	b.n	8003624 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	0800366d 	.word	0x0800366d
 8003634:	08003689 	.word	0x08003689
 8003638:	08003651 	.word	0x08003651

0800363c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7fe ff9e 	bl	80025a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7fe ffae 	bl	80025dc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2203      	movs	r2, #3
 800369a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ffcd 	bl	800363c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <DFSDM_GetChannelFromInstance+0x7c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d102      	bne.n	80036c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e02b      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a19      	ldr	r2, [pc, #100]	; (800372c <DFSDM_GetChannelFromInstance+0x80>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d102      	bne.n	80036d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e024      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a17      	ldr	r2, [pc, #92]	; (8003730 <DFSDM_GetChannelFromInstance+0x84>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d102      	bne.n	80036de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80036d8:	2302      	movs	r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e01d      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <DFSDM_GetChannelFromInstance+0x88>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d102      	bne.n	80036ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80036e6:	2304      	movs	r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e016      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <DFSDM_GetChannelFromInstance+0x8c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d102      	bne.n	80036fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80036f4:	2305      	movs	r3, #5
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e00f      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a0f      	ldr	r2, [pc, #60]	; (800373c <DFSDM_GetChannelFromInstance+0x90>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d102      	bne.n	8003708 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003702:	2306      	movs	r3, #6
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e008      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <DFSDM_GetChannelFromInstance+0x94>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d102      	bne.n	8003716 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003710:	2307      	movs	r3, #7
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e001      	b.n	800371a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003716:	2303      	movs	r3, #3
 8003718:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40016000 	.word	0x40016000
 800372c:	40016020 	.word	0x40016020
 8003730:	40016040 	.word	0x40016040
 8003734:	40016080 	.word	0x40016080
 8003738:	400160a0 	.word	0x400160a0
 800373c:	400160c0 	.word	0x400160c0
 8003740:	400160e0 	.word	0x400160e0

08003744 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e033      	b.n	80037ce <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003784:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800379c:	2b03      	cmp	r3, #3
 800379e:	d116      	bne.n	80037ce <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0202 	orr.w	r2, r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d102      	bne.n	80037c8 <DFSDM_RegConvStart+0x84>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	e000      	b.n	80037ca <DFSDM_RegConvStart+0x86>
 80037c8:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <DFSDM_RegConvStart+0x98>
 80037d8:	2202      	movs	r2, #2
 80037da:	e000      	b.n	80037de <DFSDM_RegConvStart+0x9a>
 80037dc:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e098      	b.n	8003934 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	4b4d      	ldr	r3, [pc, #308]	; (8003940 <HAL_DMA_Init+0x150>)
 800380a:	429a      	cmp	r2, r3
 800380c:	d80f      	bhi.n	800382e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_DMA_Init+0x154>)
 8003816:	4413      	add	r3, r2
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_DMA_Init+0x158>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	009a      	lsls	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a48      	ldr	r2, [pc, #288]	; (800394c <HAL_DMA_Init+0x15c>)
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
 800382c:	e00e      	b.n	800384c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_DMA_Init+0x160>)
 8003836:	4413      	add	r3, r2
 8003838:	4a43      	ldr	r2, [pc, #268]	; (8003948 <HAL_DMA_Init+0x158>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	009a      	lsls	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a42      	ldr	r2, [pc, #264]	; (8003954 <HAL_DMA_Init+0x164>)
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a6:	d039      	beq.n	800391c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_DMA_Init+0x15c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d11a      	bne.n	80038e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_DMA_Init+0x168>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f003 031c 	and.w	r3, r3, #28
 80038be:	210f      	movs	r1, #15
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	4924      	ldr	r1, [pc, #144]	; (8003958 <HAL_DMA_Init+0x168>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <HAL_DMA_Init+0x168>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f003 031c 	and.w	r3, r3, #28
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	491d      	ldr	r1, [pc, #116]	; (8003958 <HAL_DMA_Init+0x168>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
 80038e6:	e019      	b.n	800391c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_DMA_Init+0x16c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f003 031c 	and.w	r3, r3, #28
 80038f4:	210f      	movs	r1, #15
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	4917      	ldr	r1, [pc, #92]	; (800395c <HAL_DMA_Init+0x16c>)
 80038fe:	4013      	ands	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_DMA_Init+0x16c>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f003 031c 	and.w	r3, r3, #28
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	4911      	ldr	r1, [pc, #68]	; (800395c <HAL_DMA_Init+0x16c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40020407 	.word	0x40020407
 8003944:	bffdfff8 	.word	0xbffdfff8
 8003948:	cccccccd 	.word	0xcccccccd
 800394c:	40020000 	.word	0x40020000
 8003950:	bffdfbf8 	.word	0xbffdfbf8
 8003954:	40020400 	.word	0x40020400
 8003958:	400200a8 	.word	0x400200a8
 800395c:	400204a8 	.word	0x400204a8

08003960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Start_IT+0x20>
 800397c:	2302      	movs	r3, #2
 800397e:	e04b      	b.n	8003a18 <HAL_DMA_Start_IT+0xb8>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d13a      	bne.n	8003a0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f95f 	bl	8003c7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 020e 	orr.w	r2, r2, #14
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e00f      	b.n	80039f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0204 	bic.w	r2, r2, #4
 80039e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 020a 	orr.w	r2, r2, #10
 80039f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e005      	b.n	8003a16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 020e 	bic.w	r2, r2, #14
 8003a58:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f003 021c 	and.w	r2, r3, #28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d005      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e029      	b.n	8003b14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 020e 	bic.w	r2, r2, #14
 8003ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f003 021c 	and.w	r2, r3, #28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
    }
  }
  return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 031c 	and.w	r3, r3, #28
 8003b3e:	2204      	movs	r2, #4
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d026      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x7a>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d021      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0204 	bic.w	r2, r2, #4
 8003b70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f003 021c 	and.w	r2, r3, #28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2104      	movs	r1, #4
 8003b80:	fa01 f202 	lsl.w	r2, r1, r2
 8003b84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d071      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b96:	e06c      	b.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	f003 031c 	and.w	r3, r3, #28
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02e      	beq.n	8003c0a <HAL_DMA_IRQHandler+0xec>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d029      	beq.n	8003c0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020a 	bic.w	r2, r2, #10
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f003 021c 	and.w	r2, r3, #28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2102      	movs	r1, #2
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d038      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c08:	e033      	b.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f003 031c 	and.w	r3, r3, #28
 8003c12:	2208      	movs	r2, #8
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02a      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x156>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d025      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 020e 	bic.w	r2, r2, #14
 8003c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f003 021c 	and.w	r2, r3, #28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
}
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f003 021c 	and.w	r2, r3, #28
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2101      	movs	r1, #1
 8003c98:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d108      	bne.n	8003cc0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cbe:	e007      	b.n	8003cd0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cea:	e17f      	b.n	8003fec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8171 	beq.w	8003fe6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d005      	beq.n	8003d1c <HAL_GPIO_Init+0x40>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d130      	bne.n	8003d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d52:	2201      	movs	r2, #1
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0201 	and.w	r2, r3, #1
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d118      	bne.n	8003dbc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d90:	2201      	movs	r2, #1
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f003 0201 	and.w	r2, r3, #1
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d017      	beq.n	8003df8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d123      	bne.n	8003e4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	08da      	lsrs	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	08da      	lsrs	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3208      	adds	r2, #8
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0203 	and.w	r2, r3, #3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80ac 	beq.w	8003fe6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	; (800400c <HAL_GPIO_Init+0x330>)
 8003e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e92:	4a5e      	ldr	r2, [pc, #376]	; (800400c <HAL_GPIO_Init+0x330>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6613      	str	r3, [r2, #96]	; 0x60
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	; (800400c <HAL_GPIO_Init+0x330>)
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ea6:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <HAL_GPIO_Init+0x334>)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	220f      	movs	r2, #15
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ed0:	d025      	beq.n	8003f1e <HAL_GPIO_Init+0x242>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4f      	ldr	r2, [pc, #316]	; (8004014 <HAL_GPIO_Init+0x338>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01f      	beq.n	8003f1a <HAL_GPIO_Init+0x23e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <HAL_GPIO_Init+0x33c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d019      	beq.n	8003f16 <HAL_GPIO_Init+0x23a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_GPIO_Init+0x340>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_GPIO_Init+0x236>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a4c      	ldr	r2, [pc, #304]	; (8004020 <HAL_GPIO_Init+0x344>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00d      	beq.n	8003f0e <HAL_GPIO_Init+0x232>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4b      	ldr	r2, [pc, #300]	; (8004024 <HAL_GPIO_Init+0x348>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <HAL_GPIO_Init+0x22e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4a      	ldr	r2, [pc, #296]	; (8004028 <HAL_GPIO_Init+0x34c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_GPIO_Init+0x22a>
 8003f02:	2306      	movs	r3, #6
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f06:	2307      	movs	r3, #7
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x244>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f30:	4937      	ldr	r1, [pc, #220]	; (8004010 <HAL_GPIO_Init+0x334>)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_GPIO_Init+0x350>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f62:	4a32      	ldr	r2, [pc, #200]	; (800402c <HAL_GPIO_Init+0x350>)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f68:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_GPIO_Init+0x350>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f8c:	4a27      	ldr	r2, [pc, #156]	; (800402c <HAL_GPIO_Init+0x350>)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_GPIO_Init+0x350>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_GPIO_Init+0x350>)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_GPIO_Init+0x350>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fe0:	4a12      	ldr	r2, [pc, #72]	; (800402c <HAL_GPIO_Init+0x350>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f47f ae78 	bne.w	8003cec <HAL_GPIO_Init+0x10>
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	40010000 	.word	0x40010000
 8004014:	48000400 	.word	0x48000400
 8004018:	48000800 	.word	0x48000800
 800401c:	48000c00 	.word	0x48000c00
 8004020:	48001000 	.word	0x48001000
 8004024:	48001400 	.word	0x48001400
 8004028:	48001800 	.word	0x48001800
 800402c:	40010400 	.word	0x40010400

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800404c:	e002      	b.n	8004054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <HAL_PWREx_GetVoltageRange+0x18>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000

0800407c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408a:	d130      	bne.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d038      	beq.n	800410c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040a2:	4a1e      	ldr	r2, [pc, #120]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2232      	movs	r2, #50	; 0x32
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0c9b      	lsrs	r3, r3, #18
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c0:	e002      	b.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d102      	bne.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f2      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e8:	d110      	bne.n	800410c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e00f      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d007      	beq.n	800410c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004104:	4a05      	ldr	r2, [pc, #20]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40007000 	.word	0x40007000
 8004120:	2000000c 	.word	0x2000000c
 8004124:	431bde83 	.word	0x431bde83

08004128 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e3ca      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b97      	ldr	r3, [pc, #604]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004144:	4b94      	ldr	r3, [pc, #592]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80e4 	beq.w	8004324 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_RCC_OscConfig+0x4a>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	f040 808b 	bne.w	8004280 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 8087 	bne.w	8004280 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004172:	4b89      	ldr	r3, [pc, #548]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e3a2      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_RCC_OscConfig+0x7c>
 800419a:	4b7f      	ldr	r3, [pc, #508]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a2:	e005      	b.n	80041b0 <HAL_RCC_OscConfig+0x88>
 80041a4:	4b7c      	ldr	r3, [pc, #496]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d223      	bcs.n	80041fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fd55 	bl	8004c68 <RCC_SetFlashLatencyFromMSIRange>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e383      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c8:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a72      	ldr	r2, [pc, #456]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041ce:	f043 0308 	orr.w	r3, r3, #8
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	496d      	ldr	r1, [pc, #436]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e6:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	4968      	ldr	r1, [pc, #416]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
 80041fa:	e025      	b.n	8004248 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fc:	4b66      	ldr	r3, [pc, #408]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a65      	ldr	r2, [pc, #404]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004202:	f043 0308 	orr.w	r3, r3, #8
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4960      	ldr	r1, [pc, #384]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421a:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	495b      	ldr	r1, [pc, #364]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fd15 	bl	8004c68 <RCC_SetFlashLatencyFromMSIRange>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e343      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004248:	f000 fc4a 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b52      	ldr	r3, [pc, #328]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	4950      	ldr	r1, [pc, #320]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
 8004264:	4a4e      	ldr	r2, [pc, #312]	; (80043a0 <HAL_RCC_OscConfig+0x278>)
 8004266:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004268:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <HAL_RCC_OscConfig+0x27c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fe15 	bl	8002e9c <HAL_InitTick>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d052      	beq.n	8004322 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	e327      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d032      	beq.n	80042ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004288:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a42      	ldr	r2, [pc, #264]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004294:	f7fe fe52 	bl	8002f3c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429c:	f7fe fe4e 	bl	8002f3c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e310      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a36      	ldr	r2, [pc, #216]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4931      	ldr	r1, [pc, #196]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042d8:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	492c      	ldr	r1, [pc, #176]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	e01a      	b.n	8004324 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a29      	ldr	r2, [pc, #164]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042fa:	f7fe fe1f 	bl	8002f3c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004302:	f7fe fe1b 	bl	8002f3c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e2dd      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004314:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x1da>
 8004320:	e000      	b.n	8004324 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004322:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d074      	beq.n	800441a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x21a>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d10e      	bne.n	800435a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d10b      	bne.n	800435a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d064      	beq.n	8004418 <HAL_RCC_OscConfig+0x2f0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d160      	bne.n	8004418 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e2ba      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x24a>
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e026      	b.n	80043c0 <HAL_RCC_OscConfig+0x298>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437a:	d115      	bne.n	80043a8 <HAL_RCC_OscConfig+0x280>
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a05      	ldr	r2, [pc, #20]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a02      	ldr	r2, [pc, #8]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e014      	b.n	80043c0 <HAL_RCC_OscConfig+0x298>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	0800ced8 	.word	0x0800ced8
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	20000010 	.word	0x20000010
 80043a8:	4ba0      	ldr	r3, [pc, #640]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a9f      	ldr	r2, [pc, #636]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b9d      	ldr	r3, [pc, #628]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a9c      	ldr	r2, [pc, #624]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fe fdb8 	bl	8002f3c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fe fdb4 	bl	8002f3c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e276      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e2:	4b92      	ldr	r3, [pc, #584]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2a8>
 80043ee:	e014      	b.n	800441a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fda4 	bl	8002f3c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fe fda0 	bl	8002f3c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e262      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440a:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x2d0>
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d060      	beq.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d005      	beq.n	8004438 <HAL_RCC_OscConfig+0x310>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d119      	bne.n	8004466 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d116      	bne.n	8004466 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004438:	4b7c      	ldr	r3, [pc, #496]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_OscConfig+0x328>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e23f      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	4973      	ldr	r1, [pc, #460]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004464:	e040      	b.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d023      	beq.n	80044b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446e:	4b6f      	ldr	r3, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6e      	ldr	r2, [pc, #440]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fe fd5f 	bl	8002f3c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe fd5b 	bl	8002f3c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e21d      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a0:	4b62      	ldr	r3, [pc, #392]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	495f      	ldr	r1, [pc, #380]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	e018      	b.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5c      	ldr	r2, [pc, #368]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fe fd3b 	bl	8002f3c <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fe fd37 	bl	8002f3c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1f9      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03c      	beq.n	800456e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fc:	4b4b      	ldr	r3, [pc, #300]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004502:	4a4a      	ldr	r2, [pc, #296]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fe fd16 	bl	8002f3c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fe fd12 	bl	8002f3c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1d4      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ef      	beq.n	8004514 <HAL_RCC_OscConfig+0x3ec>
 8004534:	e01b      	b.n	800456e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453c:	4a3b      	ldr	r2, [pc, #236]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fe fcf9 	bl	8002f3c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe fcf5 	bl	8002f3c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e1b7      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ef      	bne.n	800454e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80a6 	beq.w	80046c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	; 0x58
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d118      	bne.n	80045e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b4:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c0:	f7fe fcbc 	bl	8002f3c <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c8:	f7fe fcb8 	bl	8002f3c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e17a      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_RCC_OscConfig+0x508>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d108      	bne.n	8004600 <HAL_RCC_OscConfig+0x4d8>
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_RCC_OscConfig+0x504>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045fe:	e029      	b.n	8004654 <HAL_RCC_OscConfig+0x52c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d115      	bne.n	8004634 <HAL_RCC_OscConfig+0x50c>
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_RCC_OscConfig+0x504>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	4a03      	ldr	r2, [pc, #12]	; (800462c <HAL_RCC_OscConfig+0x504>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004628:	e014      	b.n	8004654 <HAL_RCC_OscConfig+0x52c>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
 8004634:	4b9c      	ldr	r3, [pc, #624]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	4a9b      	ldr	r2, [pc, #620]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004644:	4b98      	ldr	r3, [pc, #608]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a97      	ldr	r2, [pc, #604]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d016      	beq.n	800468a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fe fc6e 	bl	8002f3c <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fe fc6a 	bl	8002f3c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e12a      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467a:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ed      	beq.n	8004664 <HAL_RCC_OscConfig+0x53c>
 8004688:	e015      	b.n	80046b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fe fc57 	bl	8002f3c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fe fc53 	bl	8002f3c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e113      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a8:	4b7f      	ldr	r3, [pc, #508]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ed      	bne.n	8004692 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b6:	7ffb      	ldrb	r3, [r7, #31]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b7a      	ldr	r3, [pc, #488]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	4a79      	ldr	r2, [pc, #484]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80fe 	beq.w	80048ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	f040 80d0 	bne.w	800487c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046dc:	4b72      	ldr	r3, [pc, #456]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 0203 	and.w	r2, r3, #3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d130      	bne.n	8004752 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	3b01      	subs	r3, #1
 80046fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d127      	bne.n	8004752 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d11f      	bne.n	8004752 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800471c:	2a07      	cmp	r2, #7
 800471e:	bf14      	ite	ne
 8004720:	2201      	movne	r2, #1
 8004722:	2200      	moveq	r2, #0
 8004724:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004726:	4293      	cmp	r3, r2
 8004728:	d113      	bne.n	8004752 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d109      	bne.n	8004752 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d06e      	beq.n	8004830 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d069      	beq.n	800482c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0ad      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004774:	4b4c      	ldr	r3, [pc, #304]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a4b      	ldr	r2, [pc, #300]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004780:	f7fe fbdc 	bl	8002f3c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe fbd8 	bl	8002f3c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e09a      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479a:	4b43      	ldr	r3, [pc, #268]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a6:	4b40      	ldr	r3, [pc, #256]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_RCC_OscConfig+0x784>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047b6:	3a01      	subs	r2, #1
 80047b8:	0112      	lsls	r2, r2, #4
 80047ba:	4311      	orrs	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c0:	0212      	lsls	r2, r2, #8
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047c8:	0852      	lsrs	r2, r2, #1
 80047ca:	3a01      	subs	r2, #1
 80047cc:	0552      	lsls	r2, r2, #21
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047d4:	0852      	lsrs	r2, r2, #1
 80047d6:	3a01      	subs	r2, #1
 80047d8:	0652      	lsls	r2, r2, #25
 80047da:	4311      	orrs	r1, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e0:	0912      	lsrs	r2, r2, #4
 80047e2:	0452      	lsls	r2, r2, #17
 80047e4:	430a      	orrs	r2, r1
 80047e6:	4930      	ldr	r1, [pc, #192]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047ec:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80047f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f8:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004802:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004804:	f7fe fb9a 	bl	8002f3c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe fb96 	bl	8002f3c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e058      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800482a:	e050      	b.n	80048ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e04f      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d148      	bne.n	80048ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004846:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 800484e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004852:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004854:	f7fe fb72 	bl	8002f3c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe fb6e 	bl	8002f3c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e030      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x734>
 800487a:	e028      	b.n	80048ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d023      	beq.n	80048ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <HAL_RCC_OscConfig+0x780>)
 8004888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800488c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fe fb55 	bl	8002f3c <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004894:	e00c      	b.n	80048b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004896:	f7fe fb51 	bl	8002f3c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d905      	bls.n	80048b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e013      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
 80048a8:	40021000 	.word	0x40021000
 80048ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_OscConfig+0x7b0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ec      	bne.n	8004896 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_OscConfig+0x7b0>)
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	4905      	ldr	r1, [pc, #20]	; (80048d8 <HAL_RCC_OscConfig+0x7b0>)
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x7b4>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
 80048c8:	e001      	b.n	80048ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	feeefffc 	.word	0xfeeefffc

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0e7      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b75      	ldr	r3, [pc, #468]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d910      	bls.n	8004924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b72      	ldr	r3, [pc, #456]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 0207 	bic.w	r2, r3, #7
 800490a:	4970      	ldr	r1, [pc, #448]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b6e      	ldr	r3, [pc, #440]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0cf      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800493c:	429a      	cmp	r2, r3
 800493e:	d908      	bls.n	8004952 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004940:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4960      	ldr	r1, [pc, #384]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d04c      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	4b5a      	ldr	r3, [pc, #360]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d121      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0a6      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497e:	4b54      	ldr	r3, [pc, #336]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d115      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e09a      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004996:	4b4e      	ldr	r3, [pc, #312]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e08e      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a6:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e086      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4943      	ldr	r1, [pc, #268]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c8:	f7fe fab8 	bl	8002f3c <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fe fab4 	bl	8002f3c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e06e      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b3a      	ldr	r3, [pc, #232]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d010      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d208      	bcs.n	8004a26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	4b2e      	ldr	r3, [pc, #184]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	492b      	ldr	r1, [pc, #172]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d210      	bcs.n	8004a56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 0207 	bic.w	r2, r3, #7
 8004a3c:	4923      	ldr	r1, [pc, #140]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <HAL_RCC_ClockConfig+0x1ec>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e036      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a62:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	4918      	ldr	r1, [pc, #96]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a94:	f000 f824 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	490b      	ldr	r1, [pc, #44]	; (8004ad4 <HAL_RCC_ClockConfig+0x1f4>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab0:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ab2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCC_ClockConfig+0x1fc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe f9ef 	bl	8002e9c <HAL_InitTick>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	0800ced8 	.word	0x0800ced8
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	20000010 	.word	0x20000010

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b089      	sub	sp, #36	; 0x24
 8004ae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af8:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x34>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d121      	bne.n	8004b52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d11e      	bne.n	8004b52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b14:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	e005      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b30:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10d      	bne.n	8004b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d102      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e004      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b64:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	d134      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b6e:	4b1e      	ldr	r3, [pc, #120]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d003      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0xac>
 8004b84:	e005      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b88:	617b      	str	r3, [r7, #20]
      break;
 8004b8a:	e005      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b8e:	617b      	str	r3, [r7, #20]
      break;
 8004b90:	e002      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	617b      	str	r3, [r7, #20]
      break;
 8004b96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	fb03 f202 	mul.w	r2, r3, r2
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	0e5b      	lsrs	r3, r3, #25
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3724      	adds	r7, #36	; 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800cef0 	.word	0x0800cef0
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	007a1200 	.word	0x007a1200

08004bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c14:	f7ff fff0 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4904      	ldr	r1, [pc, #16]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	0800cee8 	.word	0x0800cee8

08004c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c40:	f7ff ffda 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0adb      	lsrs	r3, r3, #11
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4904      	ldr	r1, [pc, #16]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40021000 	.word	0x40021000
 8004c64:	0800cee8 	.word	0x0800cee8

08004c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c80:	f7ff f9ee 	bl	8004060 <HAL_PWREx_GetVoltageRange>
 8004c84:	6178      	str	r0, [r7, #20]
 8004c86:	e014      	b.n	8004cb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58
 8004c94:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca0:	f7ff f9de 	bl	8004060 <HAL_PWREx_GetVoltageRange>
 8004ca4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d10b      	bne.n	8004cd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d919      	bls.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc4:	d902      	bls.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e013      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ccc:	2301      	movs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e010      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d902      	bls.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cd8:	2303      	movs	r3, #3
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e00a      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b80      	cmp	r3, #128	; 0x80
 8004ce2:	d102      	bne.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e004      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d101      	bne.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	4909      	ldr	r1, [pc, #36]	; (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d001      	beq.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40022000 	.word	0x40022000

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d34:	2300      	movs	r3, #0
 8004d36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d041      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d4c:	d02a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d52:	d824      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d58:	d008      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d5e:	d81e      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d68:	d010      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d6a:	e018      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d6c:	4b86      	ldr	r3, [pc, #536]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a85      	ldr	r2, [pc, #532]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d78:	e015      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fabb 	bl	80052fc <RCCEx_PLLSAI1_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d8a:	e00c      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3320      	adds	r3, #32
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fba6 	bl	80054e4 <RCCEx_PLLSAI2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	74fb      	strb	r3, [r7, #19]
      break;
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dac:	4b76      	ldr	r3, [pc, #472]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	4973      	ldr	r1, [pc, #460]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d041      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ddc:	d02a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004de2:	d824      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de8:	d008      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dee:	d81e      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df8:	d010      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dfa:	e018      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dfc:	4b62      	ldr	r3, [pc, #392]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a61      	ldr	r2, [pc, #388]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e08:	e015      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fa73 	bl	80052fc <RCCEx_PLLSAI1_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e1a:	e00c      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3320      	adds	r3, #32
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fb5e 	bl	80054e4 <RCCEx_PLLSAI2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	74fb      	strb	r3, [r7, #19]
      break;
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e3c:	4b52      	ldr	r3, [pc, #328]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4a:	494f      	ldr	r1, [pc, #316]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e52:	e001      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80a0 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	4a40      	ldr	r2, [pc, #256]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8c:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3a      	ldr	r2, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea8:	f7fe f848 	bl	8002f3c <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eae:	e009      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fe f844 	bl	8002f3c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ef      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d15c      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01f      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d019      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f00:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f10:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fe f803 	bl	8002f3c <HAL_GetTick>
 8004f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f38:	e00b      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fd ffff 	bl	8002f3c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f50:	e006      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ec      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f76:	4904      	ldr	r1, [pc, #16]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f7e:	e009      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f94:	7c7b      	ldrb	r3, [r7, #17]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4b9e      	ldr	r3, [pc, #632]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4a9d      	ldr	r2, [pc, #628]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb2:	4b98      	ldr	r3, [pc, #608]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 0203 	bic.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	4994      	ldr	r1, [pc, #592]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd4:	4b8f      	ldr	r3, [pc, #572]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 020c 	bic.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	498c      	ldr	r1, [pc, #560]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff6:	4b87      	ldr	r3, [pc, #540]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	4983      	ldr	r1, [pc, #524]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005018:	4b7e      	ldr	r3, [pc, #504]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	497b      	ldr	r1, [pc, #492]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800503a:	4b76      	ldr	r3, [pc, #472]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005048:	4972      	ldr	r1, [pc, #456]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800505c:	4b6d      	ldr	r3, [pc, #436]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	496a      	ldr	r1, [pc, #424]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800507e:	4b65      	ldr	r3, [pc, #404]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	4961      	ldr	r1, [pc, #388]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a0:	4b5c      	ldr	r3, [pc, #368]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	4959      	ldr	r1, [pc, #356]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050c2:	4b54      	ldr	r3, [pc, #336]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	4950      	ldr	r1, [pc, #320]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050e4:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	4948      	ldr	r1, [pc, #288]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005106:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	493f      	ldr	r1, [pc, #252]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d028      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	4937      	ldr	r1, [pc, #220]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005146:	d106      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a31      	ldr	r2, [pc, #196]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
 8005154:	e011      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800515e:	d10c      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f8c8 	bl	80052fc <RCCEx_PLLSAI1_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d028      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005186:	4b23      	ldr	r3, [pc, #140]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	491f      	ldr	r1, [pc, #124]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a4:	d106      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a6:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b0:	60d3      	str	r3, [r2, #12]
 80051b2:	e011      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f899 	bl	80052fc <RCCEx_PLLSAI1_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f2:	4908      	ldr	r1, [pc, #32]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005202:	d109      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a02      	ldr	r2, [pc, #8]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800520e:	60d3      	str	r3, [r2, #12]
 8005210:	e014      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005220:	d10c      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f867 	bl	80052fc <RCCEx_PLLSAI1_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005232:	7cfb      	ldrb	r3, [r7, #19]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02f      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005256:	4928      	ldr	r1, [pc, #160]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005266:	d10d      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f844 	bl	80052fc <RCCEx_PLLSAI1_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	74bb      	strb	r3, [r7, #18]
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3320      	adds	r3, #32
 8005292:	2102      	movs	r1, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f925 	bl	80054e4 <RCCEx_PLLSAI2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c2:	490d      	ldr	r1, [pc, #52]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e6:	4904      	ldr	r1, [pc, #16]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000

080052fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800530a:	4b75      	ldr	r3, [pc, #468]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d018      	beq.n	8005348 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005316:	4b72      	ldr	r3, [pc, #456]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0203 	and.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d10d      	bne.n	8005342 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
       ||
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800532e:	4b6c      	ldr	r3, [pc, #432]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
       ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d047      	beq.n	80053d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	e044      	b.n	80053d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d018      	beq.n	8005382 <RCCEx_PLLSAI1_Config+0x86>
 8005350:	2b03      	cmp	r3, #3
 8005352:	d825      	bhi.n	80053a0 <RCCEx_PLLSAI1_Config+0xa4>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d002      	beq.n	800535e <RCCEx_PLLSAI1_Config+0x62>
 8005358:	2b02      	cmp	r3, #2
 800535a:	d009      	beq.n	8005370 <RCCEx_PLLSAI1_Config+0x74>
 800535c:	e020      	b.n	80053a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800535e:	4b60      	ldr	r3, [pc, #384]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11d      	bne.n	80053a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800536e:	e01a      	b.n	80053a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005370:	4b5b      	ldr	r3, [pc, #364]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005378:	2b00      	cmp	r3, #0
 800537a:	d116      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005380:	e013      	b.n	80053aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10f      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800538e:	4b54      	ldr	r3, [pc, #336]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800539e:	e006      	b.n	80053ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
      break;
 80053a4:	e004      	b.n	80053b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053a6:	bf00      	nop
 80053a8:	e002      	b.n	80053b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053aa:	bf00      	nop
 80053ac:	e000      	b.n	80053b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053b6:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6819      	ldr	r1, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	430b      	orrs	r3, r1
 80053cc:	4944      	ldr	r1, [pc, #272]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d17d      	bne.n	80054d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053d8:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a40      	ldr	r2, [pc, #256]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e4:	f7fd fdaa 	bl	8002f3c <HAL_GetTick>
 80053e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ea:	e009      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ec:	f7fd fda6 	bl	8002f3c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d902      	bls.n	8005400 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	73fb      	strb	r3, [r7, #15]
        break;
 80053fe:	e005      	b.n	800540c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005400:	4b37      	ldr	r3, [pc, #220]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ef      	bne.n	80053ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d160      	bne.n	80054d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d111      	bne.n	800543c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005418:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6892      	ldr	r2, [r2, #8]
 8005428:	0211      	lsls	r1, r2, #8
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68d2      	ldr	r2, [r2, #12]
 800542e:	0912      	lsrs	r2, r2, #4
 8005430:	0452      	lsls	r2, r2, #17
 8005432:	430a      	orrs	r2, r1
 8005434:	492a      	ldr	r1, [pc, #168]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005436:	4313      	orrs	r3, r2
 8005438:	610b      	str	r3, [r1, #16]
 800543a:	e027      	b.n	800548c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d112      	bne.n	8005468 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005442:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800544a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6892      	ldr	r2, [r2, #8]
 8005452:	0211      	lsls	r1, r2, #8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6912      	ldr	r2, [r2, #16]
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	3a01      	subs	r2, #1
 800545c:	0552      	lsls	r2, r2, #21
 800545e:	430a      	orrs	r2, r1
 8005460:	491f      	ldr	r1, [pc, #124]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	610b      	str	r3, [r1, #16]
 8005466:	e011      	b.n	800548c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005468:	4b1d      	ldr	r3, [pc, #116]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	0211      	lsls	r1, r2, #8
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6952      	ldr	r2, [r2, #20]
 800547e:	0852      	lsrs	r2, r2, #1
 8005480:	3a01      	subs	r2, #1
 8005482:	0652      	lsls	r2, r2, #25
 8005484:	430a      	orrs	r2, r1
 8005486:	4916      	ldr	r1, [pc, #88]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800548c:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005496:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005498:	f7fd fd50 	bl	8002f3c <HAL_GetTick>
 800549c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800549e:	e009      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054a0:	f7fd fd4c 	bl	8002f3c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d902      	bls.n	80054b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	73fb      	strb	r3, [r7, #15]
          break;
 80054b2:	e005      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b4:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ef      	beq.n	80054a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	4904      	ldr	r1, [pc, #16]	; (80054e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40021000 	.word	0x40021000

080054e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f2:	4b6a      	ldr	r3, [pc, #424]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054fe:	4b67      	ldr	r3, [pc, #412]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d10d      	bne.n	800552a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
       ||
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005516:	4b61      	ldr	r3, [pc, #388]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
       ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d047      	beq.n	80055ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e044      	b.n	80055ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d018      	beq.n	800556a <RCCEx_PLLSAI2_Config+0x86>
 8005538:	2b03      	cmp	r3, #3
 800553a:	d825      	bhi.n	8005588 <RCCEx_PLLSAI2_Config+0xa4>
 800553c:	2b01      	cmp	r3, #1
 800553e:	d002      	beq.n	8005546 <RCCEx_PLLSAI2_Config+0x62>
 8005540:	2b02      	cmp	r3, #2
 8005542:	d009      	beq.n	8005558 <RCCEx_PLLSAI2_Config+0x74>
 8005544:	e020      	b.n	8005588 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005546:	4b55      	ldr	r3, [pc, #340]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11d      	bne.n	800558e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005556:	e01a      	b.n	800558e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005558:	4b50      	ldr	r3, [pc, #320]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005568:	e013      	b.n	8005592 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800556a:	4b4c      	ldr	r3, [pc, #304]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005576:	4b49      	ldr	r3, [pc, #292]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005586:	e006      	b.n	8005596 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	e004      	b.n	8005598 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005596:	bf00      	nop
    }

    if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800559e:	4b3f      	ldr	r3, [pc, #252]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	430b      	orrs	r3, r1
 80055b4:	4939      	ldr	r1, [pc, #228]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d167      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a35      	ldr	r2, [pc, #212]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055cc:	f7fd fcb6 	bl	8002f3c <HAL_GetTick>
 80055d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055d2:	e009      	b.n	80055e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055d4:	f7fd fcb2 	bl	8002f3c <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d902      	bls.n	80055e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	73fb      	strb	r3, [r7, #15]
        break;
 80055e6:	e005      	b.n	80055f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055e8:	4b2c      	ldr	r3, [pc, #176]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ef      	bne.n	80055d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d14a      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005600:	4b26      	ldr	r3, [pc, #152]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
 8005610:	0211      	lsls	r1, r2, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68d2      	ldr	r2, [r2, #12]
 8005616:	0912      	lsrs	r2, r2, #4
 8005618:	0452      	lsls	r2, r2, #17
 800561a:	430a      	orrs	r2, r1
 800561c:	491f      	ldr	r1, [pc, #124]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	614b      	str	r3, [r1, #20]
 8005622:	e011      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800562c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6892      	ldr	r2, [r2, #8]
 8005634:	0211      	lsls	r1, r2, #8
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6912      	ldr	r2, [r2, #16]
 800563a:	0852      	lsrs	r2, r2, #1
 800563c:	3a01      	subs	r2, #1
 800563e:	0652      	lsls	r2, r2, #25
 8005640:	430a      	orrs	r2, r1
 8005642:	4916      	ldr	r1, [pc, #88]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fd fc72 	bl	8002f3c <HAL_GetTick>
 8005658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565a:	e009      	b.n	8005670 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800565c:	f7fd fc6e 	bl	8002f3c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d902      	bls.n	8005670 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	73fb      	strb	r3, [r7, #15]
          break;
 800566e:	e005      	b.n	800567c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ef      	beq.n	800565c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	4904      	ldr	r1, [pc, #16]	; (800569c <RCCEx_PLLSAI2_Config+0x1b8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e040      	b.n	8005734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fd f9b4 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2224      	movs	r2, #36	; 0x24
 80056cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 ff46 	bl	8006578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fc8b 	bl	8006008 <UART_SetConfig>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e01b      	b.n	8005734 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800570a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800571a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 ffc5 	bl	80066bc <UART_CheckIdleState>
 8005732:	4603      	mov	r3, r0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005750:	2b20      	cmp	r3, #32
 8005752:	d178      	bne.n	8005846 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Transmit+0x24>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e071      	b.n	8005848 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2221      	movs	r2, #33	; 0x21
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005772:	f7fd fbe3 	bl	8002f3c <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d108      	bne.n	80057a4 <HAL_UART_Transmit+0x68>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e003      	b.n	80057ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ac:	e030      	b.n	8005810 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f001 f827 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e03c      	b.n	8005848 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	881a      	ldrh	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e0:	b292      	uxth	r2, r2
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	3302      	adds	r3, #2
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e008      	b.n	80057fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	781a      	ldrb	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	b292      	uxth	r2, r2
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1c8      	bne.n	80057ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	2140      	movs	r1, #64	; 0x40
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fff0 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e005      	b.n	8005848 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e000      	b.n	8005848 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005846:	2302      	movs	r3, #2
  }
}
 8005848:	4618      	mov	r0, r3
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005864:	2b20      	cmp	r3, #32
 8005866:	d137      	bne.n	80058d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_UART_Receive_IT+0x24>
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e030      	b.n	80058da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <HAL_UART_Receive_IT+0x94>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d01f      	beq.n	80058c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d018      	beq.n	80058c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 f804 	bl	80068dc <UART_Start_Receive_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	e000      	b.n	80058da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40008000 	.word	0x40008000

080058e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d165      	bne.n	80059ca <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Transmit_DMA+0x22>
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e05e      	b.n	80059cc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2221      	movs	r2, #33	; 0x21
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	2b00      	cmp	r3, #0
 8005938:	d027      	beq.n	800598a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <HAL_UART_Transmit_DMA+0xec>)
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <HAL_UART_Transmit_DMA+0xf0>)
 8005948:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	4a23      	ldr	r2, [pc, #140]	; (80059dc <HAL_UART_Transmit_DMA+0xf4>)
 8005950:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	2200      	movs	r2, #0
 8005958:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	4619      	mov	r1, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3328      	adds	r3, #40	; 0x28
 800596a:	461a      	mov	r2, r3
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	f7fd fff7 	bl	8003960 <HAL_DMA_Start_IT>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2210      	movs	r2, #16
 800597c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e020      	b.n	80059cc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2240      	movs	r2, #64	; 0x40
 8005990:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	613b      	str	r3, [r7, #16]
   return(result);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3308      	adds	r3, #8
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	623a      	str	r2, [r7, #32]
 80059b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	69f9      	ldr	r1, [r7, #28]
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e5      	bne.n	8005992 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3728      	adds	r7, #40	; 0x28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	08006b7d 	.word	0x08006b7d
 80059d8:	08006c17 	.word	0x08006c17
 80059dc:	08006c33 	.word	0x08006c33

080059e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b0ba      	sub	sp, #232	; 0xe8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a0e:	4013      	ands	r3, r2
 8005a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d115      	bne.n	8005a48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00f      	beq.n	8005a48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 82ae 	beq.w	8005f9a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
      }
      return;
 8005a46:	e2a8      	b.n	8005f9a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8117 	beq.w	8005c80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a62:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <HAL_UART_IRQHandler+0x298>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 810a 	beq.w	8005c80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d011      	beq.n	8005a9c <HAL_UART_IRQHandler+0xbc>
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a92:	f043 0201 	orr.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d011      	beq.n	8005acc <HAL_UART_IRQHandler+0xec>
 8005aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac2:	f043 0204 	orr.w	r2, r3, #4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d011      	beq.n	8005afc <HAL_UART_IRQHandler+0x11c>
 8005ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af2:	f043 0202 	orr.w	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2208      	movs	r2, #8
 8005b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2e:	f043 0208 	orr.w	r2, r3, #8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d012      	beq.n	8005b6a <HAL_UART_IRQHandler+0x18a>
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00c      	beq.n	8005b6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	f043 0220 	orr.w	r2, r3, #32
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8214 	beq.w	8005f9e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d005      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d04f      	beq.n	8005c62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 ff76 	bl	8006ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d141      	bne.n	8005c5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1d9      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d013      	beq.n	8005c52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <HAL_UART_IRQHandler+0x29c>)
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd ff30 	bl	8003a9c <HAL_DMA_Abort_IT>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d017      	beq.n	8005c72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	e00f      	b.n	8005c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f9c2 	bl	8005fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c58:	e00b      	b.n	8005c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9be 	bl	8005fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	e007      	b.n	8005c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9ba 	bl	8005fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c70:	e195      	b.n	8005f9e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c72:	bf00      	nop
    return;
 8005c74:	e193      	b.n	8005f9e <HAL_UART_IRQHandler+0x5be>
 8005c76:	bf00      	nop
 8005c78:	04000120 	.word	0x04000120
 8005c7c:	08006cb1 	.word	0x08006cb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 814e 	bne.w	8005f26 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8147 	beq.w	8005f26 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8140 	beq.w	8005f26 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2210      	movs	r2, #16
 8005cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	f040 80b8 	bne.w	8005e2e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8167 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	f080 815f 	bcs.w	8005fa2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 8086 	bne.w	8005e0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1da      	bne.n	8005d00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e1      	bne.n	8005d4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e3      	bne.n	8005d86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dee:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005df4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e4      	bne.n	8005dcc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fd fe0a 	bl	8003a20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8e2 	bl	8005ff0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e2c:	e0b9      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80ab 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a6 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e4      	bne.n	8005e5a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eb4:	633a      	str	r2, [r7, #48]	; 0x30
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e3      	bne.n	8005e90 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f023 0310 	bic.w	r3, r3, #16
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	69b9      	ldr	r1, [r7, #24]
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e4      	bne.n	8005edc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f866 	bl	8005ff0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f24:	e03f      	b.n	8005fa6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <HAL_UART_IRQHandler+0x570>
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 f8ad 	bl	80070a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f4e:	e02d      	b.n	8005fac <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01c      	beq.n	8005faa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
    }
    return;
 8005f78:	e017      	b.n	8005faa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <HAL_UART_IRQHandler+0x5cc>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fea2 	bl	8006cdc <UART_EndTransmit_IT>
    return;
 8005f98:	e008      	b.n	8005fac <HAL_UART_IRQHandler+0x5cc>
      return;
 8005f9a:	bf00      	nop
 8005f9c:	e006      	b.n	8005fac <HAL_UART_IRQHandler+0x5cc>
    return;
 8005f9e:	bf00      	nop
 8005fa0:	e004      	b.n	8005fac <HAL_UART_IRQHandler+0x5cc>
      return;
 8005fa2:	bf00      	nop
 8005fa4:	e002      	b.n	8005fac <HAL_UART_IRQHandler+0x5cc>
      return;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <HAL_UART_IRQHandler+0x5cc>
    return;
 8005faa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005fac:	37e8      	adds	r7, #232	; 0xe8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800600c:	b08a      	sub	sp, #40	; 0x28
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	431a      	orrs	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	4313      	orrs	r3, r2
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4ba4      	ldr	r3, [pc, #656]	; (80062c8 <UART_SetConfig+0x2c0>)
 8006038:	4013      	ands	r3, r2
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006040:	430b      	orrs	r3, r1
 8006042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a99      	ldr	r2, [pc, #612]	; (80062cc <UART_SetConfig+0x2c4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	4313      	orrs	r3, r2
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a90      	ldr	r2, [pc, #576]	; (80062d0 <UART_SetConfig+0x2c8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d126      	bne.n	80060e0 <UART_SetConfig+0xd8>
 8006092:	4b90      	ldr	r3, [pc, #576]	; (80062d4 <UART_SetConfig+0x2cc>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d81b      	bhi.n	80060d8 <UART_SetConfig+0xd0>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0xa0>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060d1 	.word	0x080060d1
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e116      	b.n	80062ee <UART_SetConfig+0x2e6>
 80060c0:	2302      	movs	r3, #2
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e112      	b.n	80062ee <UART_SetConfig+0x2e6>
 80060c8:	2304      	movs	r3, #4
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e10e      	b.n	80062ee <UART_SetConfig+0x2e6>
 80060d0:	2308      	movs	r3, #8
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d6:	e10a      	b.n	80062ee <UART_SetConfig+0x2e6>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060de:	e106      	b.n	80062ee <UART_SetConfig+0x2e6>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a7c      	ldr	r2, [pc, #496]	; (80062d8 <UART_SetConfig+0x2d0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d138      	bne.n	800615c <UART_SetConfig+0x154>
 80060ea:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <UART_SetConfig+0x2cc>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	d82d      	bhi.n	8006154 <UART_SetConfig+0x14c>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0xf8>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006135 	.word	0x08006135
 8006104:	08006155 	.word	0x08006155
 8006108:	08006155 	.word	0x08006155
 800610c:	08006155 	.word	0x08006155
 8006110:	08006145 	.word	0x08006145
 8006114:	08006155 	.word	0x08006155
 8006118:	08006155 	.word	0x08006155
 800611c:	08006155 	.word	0x08006155
 8006120:	0800613d 	.word	0x0800613d
 8006124:	08006155 	.word	0x08006155
 8006128:	08006155 	.word	0x08006155
 800612c:	08006155 	.word	0x08006155
 8006130:	0800614d 	.word	0x0800614d
 8006134:	2300      	movs	r3, #0
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613a:	e0d8      	b.n	80062ee <UART_SetConfig+0x2e6>
 800613c:	2302      	movs	r3, #2
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006142:	e0d4      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006144:	2304      	movs	r3, #4
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614a:	e0d0      	b.n	80062ee <UART_SetConfig+0x2e6>
 800614c:	2308      	movs	r3, #8
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006152:	e0cc      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006154:	2310      	movs	r3, #16
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615a:	e0c8      	b.n	80062ee <UART_SetConfig+0x2e6>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5e      	ldr	r2, [pc, #376]	; (80062dc <UART_SetConfig+0x2d4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d125      	bne.n	80061b2 <UART_SetConfig+0x1aa>
 8006166:	4b5b      	ldr	r3, [pc, #364]	; (80062d4 <UART_SetConfig+0x2cc>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d016      	beq.n	80061a2 <UART_SetConfig+0x19a>
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d818      	bhi.n	80061aa <UART_SetConfig+0x1a2>
 8006178:	2b20      	cmp	r3, #32
 800617a:	d00a      	beq.n	8006192 <UART_SetConfig+0x18a>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d814      	bhi.n	80061aa <UART_SetConfig+0x1a2>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <UART_SetConfig+0x182>
 8006184:	2b10      	cmp	r3, #16
 8006186:	d008      	beq.n	800619a <UART_SetConfig+0x192>
 8006188:	e00f      	b.n	80061aa <UART_SetConfig+0x1a2>
 800618a:	2300      	movs	r3, #0
 800618c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006190:	e0ad      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006192:	2302      	movs	r3, #2
 8006194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006198:	e0a9      	b.n	80062ee <UART_SetConfig+0x2e6>
 800619a:	2304      	movs	r3, #4
 800619c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a0:	e0a5      	b.n	80062ee <UART_SetConfig+0x2e6>
 80061a2:	2308      	movs	r3, #8
 80061a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a8:	e0a1      	b.n	80062ee <UART_SetConfig+0x2e6>
 80061aa:	2310      	movs	r3, #16
 80061ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b0:	e09d      	b.n	80062ee <UART_SetConfig+0x2e6>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4a      	ldr	r2, [pc, #296]	; (80062e0 <UART_SetConfig+0x2d8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d125      	bne.n	8006208 <UART_SetConfig+0x200>
 80061bc:	4b45      	ldr	r3, [pc, #276]	; (80062d4 <UART_SetConfig+0x2cc>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061c6:	2bc0      	cmp	r3, #192	; 0xc0
 80061c8:	d016      	beq.n	80061f8 <UART_SetConfig+0x1f0>
 80061ca:	2bc0      	cmp	r3, #192	; 0xc0
 80061cc:	d818      	bhi.n	8006200 <UART_SetConfig+0x1f8>
 80061ce:	2b80      	cmp	r3, #128	; 0x80
 80061d0:	d00a      	beq.n	80061e8 <UART_SetConfig+0x1e0>
 80061d2:	2b80      	cmp	r3, #128	; 0x80
 80061d4:	d814      	bhi.n	8006200 <UART_SetConfig+0x1f8>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <UART_SetConfig+0x1d8>
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d008      	beq.n	80061f0 <UART_SetConfig+0x1e8>
 80061de:	e00f      	b.n	8006200 <UART_SetConfig+0x1f8>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e6:	e082      	b.n	80062ee <UART_SetConfig+0x2e6>
 80061e8:	2302      	movs	r3, #2
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ee:	e07e      	b.n	80062ee <UART_SetConfig+0x2e6>
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e07a      	b.n	80062ee <UART_SetConfig+0x2e6>
 80061f8:	2308      	movs	r3, #8
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fe:	e076      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006200:	2310      	movs	r3, #16
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e072      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a35      	ldr	r2, [pc, #212]	; (80062e4 <UART_SetConfig+0x2dc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d12a      	bne.n	8006268 <UART_SetConfig+0x260>
 8006212:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <UART_SetConfig+0x2cc>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006220:	d01a      	beq.n	8006258 <UART_SetConfig+0x250>
 8006222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006226:	d81b      	bhi.n	8006260 <UART_SetConfig+0x258>
 8006228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800622c:	d00c      	beq.n	8006248 <UART_SetConfig+0x240>
 800622e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006232:	d815      	bhi.n	8006260 <UART_SetConfig+0x258>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <UART_SetConfig+0x238>
 8006238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623c:	d008      	beq.n	8006250 <UART_SetConfig+0x248>
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x258>
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e052      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e04e      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e04a      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e046      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e042      	b.n	80062ee <UART_SetConfig+0x2e6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a17      	ldr	r2, [pc, #92]	; (80062cc <UART_SetConfig+0x2c4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d13a      	bne.n	80062e8 <UART_SetConfig+0x2e0>
 8006272:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <UART_SetConfig+0x2cc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800627c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006280:	d01a      	beq.n	80062b8 <UART_SetConfig+0x2b0>
 8006282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006286:	d81b      	bhi.n	80062c0 <UART_SetConfig+0x2b8>
 8006288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628c:	d00c      	beq.n	80062a8 <UART_SetConfig+0x2a0>
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d815      	bhi.n	80062c0 <UART_SetConfig+0x2b8>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <UART_SetConfig+0x298>
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d008      	beq.n	80062b0 <UART_SetConfig+0x2a8>
 800629e:	e00f      	b.n	80062c0 <UART_SetConfig+0x2b8>
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a6:	e022      	b.n	80062ee <UART_SetConfig+0x2e6>
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ae:	e01e      	b.n	80062ee <UART_SetConfig+0x2e6>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b6:	e01a      	b.n	80062ee <UART_SetConfig+0x2e6>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062be:	e016      	b.n	80062ee <UART_SetConfig+0x2e6>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c6:	e012      	b.n	80062ee <UART_SetConfig+0x2e6>
 80062c8:	efff69f3 	.word	0xefff69f3
 80062cc:	40008000 	.word	0x40008000
 80062d0:	40013800 	.word	0x40013800
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40004400 	.word	0x40004400
 80062dc:	40004800 	.word	0x40004800
 80062e0:	40004c00 	.word	0x40004c00
 80062e4:	40005000 	.word	0x40005000
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a9f      	ldr	r2, [pc, #636]	; (8006570 <UART_SetConfig+0x568>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d17a      	bne.n	80063ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d824      	bhi.n	800634a <UART_SetConfig+0x342>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x300>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	0800632d 	.word	0x0800632d
 800630c:	0800634b 	.word	0x0800634b
 8006310:	08006335 	.word	0x08006335
 8006314:	0800634b 	.word	0x0800634b
 8006318:	0800633b 	.word	0x0800633b
 800631c:	0800634b 	.word	0x0800634b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800634b 	.word	0x0800634b
 8006328:	08006343 	.word	0x08006343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fe fc70 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8006330:	61f8      	str	r0, [r7, #28]
        break;
 8006332:	e010      	b.n	8006356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006334:	4b8f      	ldr	r3, [pc, #572]	; (8006574 <UART_SetConfig+0x56c>)
 8006336:	61fb      	str	r3, [r7, #28]
        break;
 8006338:	e00d      	b.n	8006356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633a:	f7fe fbd1 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 800633e:	61f8      	str	r0, [r7, #28]
        break;
 8006340:	e009      	b.n	8006356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006346:	61fb      	str	r3, [r7, #28]
        break;
 8006348:	e005      	b.n	8006356 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80fb 	beq.w	8006554 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	429a      	cmp	r2, r3
 800636c:	d305      	bcc.n	800637a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	429a      	cmp	r2, r3
 8006378:	d903      	bls.n	8006382 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006380:	e0e8      	b.n	8006554 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2200      	movs	r2, #0
 8006386:	461c      	mov	r4, r3
 8006388:	4615      	mov	r5, r2
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	022b      	lsls	r3, r5, #8
 8006394:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006398:	0222      	lsls	r2, r4, #8
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	6849      	ldr	r1, [r1, #4]
 800639e:	0849      	lsrs	r1, r1, #1
 80063a0:	2000      	movs	r0, #0
 80063a2:	4688      	mov	r8, r1
 80063a4:	4681      	mov	r9, r0
 80063a6:	eb12 0a08 	adds.w	sl, r2, r8
 80063aa:	eb43 0b09 	adc.w	fp, r3, r9
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063bc:	4650      	mov	r0, sl
 80063be:	4659      	mov	r1, fp
 80063c0:	f7fa fc42 	bl	8000c48 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4613      	mov	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d2:	d308      	bcc.n	80063e6 <UART_SetConfig+0x3de>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063da:	d204      	bcs.n	80063e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e0b6      	b.n	8006554 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063ec:	e0b2      	b.n	8006554 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f6:	d15e      	bne.n	80064b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80063f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d828      	bhi.n	8006452 <UART_SetConfig+0x44a>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x400>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	0800642d 	.word	0x0800642d
 800640c:	08006435 	.word	0x08006435
 8006410:	0800643d 	.word	0x0800643d
 8006414:	08006453 	.word	0x08006453
 8006418:	08006443 	.word	0x08006443
 800641c:	08006453 	.word	0x08006453
 8006420:	08006453 	.word	0x08006453
 8006424:	08006453 	.word	0x08006453
 8006428:	0800644b 	.word	0x0800644b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642c:	f7fe fbf0 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8006430:	61f8      	str	r0, [r7, #28]
        break;
 8006432:	e014      	b.n	800645e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7fe fc02 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 8006438:	61f8      	str	r0, [r7, #28]
        break;
 800643a:	e010      	b.n	800645e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800643c:	4b4d      	ldr	r3, [pc, #308]	; (8006574 <UART_SetConfig+0x56c>)
 800643e:	61fb      	str	r3, [r7, #28]
        break;
 8006440:	e00d      	b.n	800645e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006442:	f7fe fb4d 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8006446:	61f8      	str	r0, [r7, #28]
        break;
 8006448:	e009      	b.n	800645e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644e:	61fb      	str	r3, [r7, #28]
        break;
 8006450:	e005      	b.n	800645e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800645c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d077      	beq.n	8006554 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	005a      	lsls	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b0f      	cmp	r3, #15
 800647e:	d916      	bls.n	80064ae <UART_SetConfig+0x4a6>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d212      	bcs.n	80064ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f023 030f 	bic.w	r3, r3, #15
 8006490:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	b29b      	uxth	r3, r3
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	b29a      	uxth	r2, r3
 800649e:	8afb      	ldrh	r3, [r7, #22]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	8afa      	ldrh	r2, [r7, #22]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	e052      	b.n	8006554 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064b4:	e04e      	b.n	8006554 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d827      	bhi.n	800650e <UART_SetConfig+0x506>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x4bc>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	0800650f 	.word	0x0800650f
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	0800650f 	.word	0x0800650f
 80064e0:	0800650f 	.word	0x0800650f
 80064e4:	08006507 	.word	0x08006507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fe fb92 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e014      	b.n	800651a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fe fba4 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 80064f4:	61f8      	str	r0, [r7, #28]
        break;
 80064f6:	e010      	b.n	800651a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <UART_SetConfig+0x56c>)
 80064fa:	61fb      	str	r3, [r7, #28]
        break;
 80064fc:	e00d      	b.n	800651a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fe faef 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8006502:	61f8      	str	r0, [r7, #28]
        break;
 8006504:	e009      	b.n	800651a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61fb      	str	r3, [r7, #28]
        break;
 800650c:	e005      	b.n	800651a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006518:	bf00      	nop
    }

    if (pclk != 0U)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d019      	beq.n	8006554 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	085a      	lsrs	r2, r3, #1
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	441a      	add	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d909      	bls.n	800654e <UART_SetConfig+0x546>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d205      	bcs.n	800654e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60da      	str	r2, [r3, #12]
 800654c:	e002      	b.n	8006554 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006560:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656e:	bf00      	nop
 8006570:	40008000 	.word	0x40008000
 8006574:	00f42400 	.word	0x00f42400

08006578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006676:	d10a      	bne.n	800668e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b098      	sub	sp, #96	; 0x60
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066cc:	f7fc fc36 	bl	8002f3c <HAL_GetTick>
 80066d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d12e      	bne.n	800673e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f88c 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d021      	beq.n	800673e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800670e:	653b      	str	r3, [r7, #80]	; 0x50
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006718:	647b      	str	r3, [r7, #68]	; 0x44
 800671a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800671e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e6      	bne.n	80066fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e062      	b.n	8006804 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b04      	cmp	r3, #4
 800674a:	d149      	bne.n	80067e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800674c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006754:	2200      	movs	r2, #0
 8006756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f856 	bl	800680c <UART_WaitOnFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d03c      	beq.n	80067e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	623b      	str	r3, [r7, #32]
   return(result);
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006784:	633b      	str	r3, [r7, #48]	; 0x30
 8006786:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800678a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e6      	bne.n	8006766 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3308      	adds	r3, #8
 800679e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3308      	adds	r3, #8
 80067b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b8:	61fa      	str	r2, [r7, #28]
 80067ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	617b      	str	r3, [r7, #20]
   return(result);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e5      	bne.n	8006798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e011      	b.n	8006804 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3758      	adds	r7, #88	; 0x58
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681c:	e049      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d045      	beq.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fc fb89 	bl	8002f3c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <UART_WaitOnFlagUntilTimeout+0x30>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e048      	b.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d031      	beq.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b08      	cmp	r3, #8
 800685a:	d110      	bne.n	800687e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2208      	movs	r2, #8
 8006862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f925 	bl	8006ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2208      	movs	r2, #8
 800686e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e029      	b.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688c:	d111      	bne.n	80068b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f90b 	bl	8006ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e00f      	b.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	429a      	cmp	r2, r3
 80068c0:	bf0c      	ite	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	2300      	movne	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d0a6      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b097      	sub	sp, #92	; 0x5c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690e:	d10e      	bne.n	800692e <UART_Start_Receive_IT+0x52>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d105      	bne.n	8006924 <UART_Start_Receive_IT+0x48>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800691e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006922:	e02d      	b.n	8006980 <UART_Start_Receive_IT+0xa4>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800692c:	e028      	b.n	8006980 <UART_Start_Receive_IT+0xa4>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <UART_Start_Receive_IT+0x76>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <UART_Start_Receive_IT+0x6c>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	22ff      	movs	r2, #255	; 0xff
 8006942:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006946:	e01b      	b.n	8006980 <UART_Start_Receive_IT+0xa4>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	227f      	movs	r2, #127	; 0x7f
 800694c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006950:	e016      	b.n	8006980 <UART_Start_Receive_IT+0xa4>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695a:	d10d      	bne.n	8006978 <UART_Start_Receive_IT+0x9c>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <UART_Start_Receive_IT+0x92>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	227f      	movs	r2, #127	; 0x7f
 8006968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800696c:	e008      	b.n	8006980 <UART_Start_Receive_IT+0xa4>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	223f      	movs	r2, #63	; 0x3f
 8006972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006976:	e003      	b.n	8006980 <UART_Start_Receive_IT+0xa4>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2222      	movs	r2, #34	; 0x22
 800698c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	657b      	str	r3, [r7, #84]	; 0x54
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80069b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069cc:	d107      	bne.n	80069de <UART_Start_Receive_IT+0x102>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <UART_Start_Receive_IT+0x184>)
 80069da:	669a      	str	r2, [r3, #104]	; 0x68
 80069dc:	e002      	b.n	80069e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a20      	ldr	r2, [pc, #128]	; (8006a64 <UART_Start_Receive_IT+0x188>)
 80069e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d019      	beq.n	8006a20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e6      	bne.n	80069ec <UART_Start_Receive_IT+0x110>
 8006a1e:	e018      	b.n	8006a52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f043 0320 	orr.w	r3, r3, #32
 8006a34:	653b      	str	r3, [r7, #80]	; 0x50
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	69f9      	ldr	r1, [r7, #28]
 8006a44:	6a3a      	ldr	r2, [r7, #32]
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	375c      	adds	r7, #92	; 0x5c
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	08006eed 	.word	0x08006eed
 8006a64:	08006d31 	.word	0x08006d31

08006a68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6979      	ldr	r1, [r7, #20]
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e6      	bne.n	8006a70 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006aa8:	bf00      	nop
 8006aaa:	3724      	adds	r7, #36	; 0x24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b095      	sub	sp, #84	; 0x54
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ada:	643b      	str	r3, [r7, #64]	; 0x40
 8006adc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d118      	bne.n	8006b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0310 	bic.w	r3, r3, #16
 8006b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6979      	ldr	r1, [r7, #20]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	613b      	str	r3, [r7, #16]
   return(result);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e6      	bne.n	8006b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b70:	bf00      	nop
 8006b72:	3754      	adds	r7, #84	; 0x54
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b090      	sub	sp, #64	; 0x40
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d137      	bne.n	8006c08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc0:	633a      	str	r2, [r7, #48]	; 0x30
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e6      	bne.n	8006bd4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c06:	e002      	b.n	8006c0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c0a:	f7ff f9d3 	bl	8005fb4 <HAL_UART_TxCpltCallback>
}
 8006c0e:	bf00      	nop
 8006c10:	3740      	adds	r7, #64	; 0x40
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff f9cf 	bl	8005fc8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c58:	2b80      	cmp	r3, #128	; 0x80
 8006c5a:	d109      	bne.n	8006c70 <UART_DMAError+0x3e>
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b21      	cmp	r3, #33	; 0x21
 8006c60:	d106      	bne.n	8006c70 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	f7ff fefc 	bl	8006a68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d109      	bne.n	8006c92 <UART_DMAError+0x60>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b22      	cmp	r3, #34	; 0x22
 8006c82:	d106      	bne.n	8006c92 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006c8c:	6978      	ldr	r0, [r7, #20]
 8006c8e:	f7ff ff11 	bl	8006ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c98:	f043 0210 	orr.w	r2, r3, #16
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ca2:	6978      	ldr	r0, [r7, #20]
 8006ca4:	f7ff f99a 	bl	8005fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca8:	bf00      	nop
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff f984 	bl	8005fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6979      	ldr	r1, [r7, #20]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e6      	bne.n	8006ce4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff f946 	bl	8005fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d28:	bf00      	nop
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b09c      	sub	sp, #112	; 0x70
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d48:	2b22      	cmp	r3, #34	; 0x22
 8006d4a:	f040 80be 	bne.w	8006eca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d5c:	b2d9      	uxtb	r1, r3
 8006d5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d68:	400a      	ands	r2, r1
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f040 80a3 	bne.w	8006ede <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006db8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	667b      	str	r3, [r7, #100]	; 0x64
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dea:	647a      	str	r2, [r7, #68]	; 0x44
 8006dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a34      	ldr	r2, [pc, #208]	; (8006ee8 <UART_RxISR_8BIT+0x1b8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d01f      	beq.n	8006e5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d018      	beq.n	8006e5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	623b      	str	r3, [r7, #32]
   return(result);
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e48:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d12e      	bne.n	8006ec2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0310 	bic.w	r3, r3, #16
 8006e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	69b9      	ldr	r1, [r7, #24]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	617b      	str	r3, [r7, #20]
   return(result);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d103      	bne.n	8006eb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff f898 	bl	8005ff0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec0:	e00d      	b.n	8006ede <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fb fbbe 	bl	8002644 <HAL_UART_RxCpltCallback>
}
 8006ec8:	e009      	b.n	8006ede <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	8b1b      	ldrh	r3, [r3, #24]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0208 	orr.w	r2, r2, #8
 8006eda:	b292      	uxth	r2, r2
 8006edc:	831a      	strh	r2, [r3, #24]
}
 8006ede:	bf00      	nop
 8006ee0:	3770      	adds	r7, #112	; 0x70
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40008000 	.word	0x40008000

08006eec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b09c      	sub	sp, #112	; 0x70
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006efa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f04:	2b22      	cmp	r3, #34	; 0x22
 8006f06:	f040 80be 	bne.w	8007086 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f18:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006f1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006f22:	4013      	ands	r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f040 80a3 	bne.w	800709a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f68:	667b      	str	r3, [r7, #100]	; 0x64
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f72:	657b      	str	r3, [r7, #84]	; 0x54
 8006f74:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa6:	643a      	str	r2, [r7, #64]	; 0x40
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a34      	ldr	r2, [pc, #208]	; (80070a4 <UART_RxISR_16BIT+0x1b8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d01f      	beq.n	8007018 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d018      	beq.n	8007018 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007006:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e6      	bne.n	8006fe6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701c:	2b01      	cmp	r3, #1
 800701e:	d12e      	bne.n	800707e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	60bb      	str	r3, [r7, #8]
   return(result);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f023 0310 	bic.w	r3, r3, #16
 800703a:	65bb      	str	r3, [r7, #88]	; 0x58
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	613b      	str	r3, [r7, #16]
   return(result);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d103      	bne.n	800706e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2210      	movs	r2, #16
 800706c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fe ffba 	bl	8005ff0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800707c:	e00d      	b.n	800709a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fb fae0 	bl	8002644 <HAL_UART_RxCpltCallback>
}
 8007084:	e009      	b.n	800709a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	8b1b      	ldrh	r3, [r3, #24]
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0208 	orr.w	r2, r2, #8
 8007096:	b292      	uxth	r2, r2
 8007098:	831a      	strh	r2, [r3, #24]
}
 800709a:	bf00      	nop
 800709c:	3770      	adds	r7, #112	; 0x70
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40008000 	.word	0x40008000

080070a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <arm_fill_f32>:
 80070bc:	b410      	push	{r4}
 80070be:	088c      	lsrs	r4, r1, #2
 80070c0:	d010      	beq.n	80070e4 <arm_fill_f32+0x28>
 80070c2:	f100 0310 	add.w	r3, r0, #16
 80070c6:	4622      	mov	r2, r4
 80070c8:	3a01      	subs	r2, #1
 80070ca:	ed03 0a04 	vstr	s0, [r3, #-16]
 80070ce:	ed03 0a03 	vstr	s0, [r3, #-12]
 80070d2:	ed03 0a02 	vstr	s0, [r3, #-8]
 80070d6:	ed03 0a01 	vstr	s0, [r3, #-4]
 80070da:	f103 0310 	add.w	r3, r3, #16
 80070de:	d1f3      	bne.n	80070c8 <arm_fill_f32+0xc>
 80070e0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80070e4:	f011 0103 	ands.w	r1, r1, #3
 80070e8:	d009      	beq.n	80070fe <arm_fill_f32+0x42>
 80070ea:	3901      	subs	r1, #1
 80070ec:	ed80 0a00 	vstr	s0, [r0]
 80070f0:	d005      	beq.n	80070fe <arm_fill_f32+0x42>
 80070f2:	2901      	cmp	r1, #1
 80070f4:	ed80 0a01 	vstr	s0, [r0, #4]
 80070f8:	bf18      	it	ne
 80070fa:	ed80 0a02 	vstrne	s0, [r0, #8]
 80070fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007102:	4770      	bx	lr

08007104 <arm_copy_f32>:
 8007104:	b4f0      	push	{r4, r5, r6, r7}
 8007106:	0897      	lsrs	r7, r2, #2
 8007108:	d01d      	beq.n	8007146 <arm_copy_f32+0x42>
 800710a:	f100 0410 	add.w	r4, r0, #16
 800710e:	f101 0310 	add.w	r3, r1, #16
 8007112:	463d      	mov	r5, r7
 8007114:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8007118:	f843 6c10 	str.w	r6, [r3, #-16]
 800711c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8007120:	f843 6c0c 	str.w	r6, [r3, #-12]
 8007124:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8007128:	f843 6c08 	str.w	r6, [r3, #-8]
 800712c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007130:	f843 6c04 	str.w	r6, [r3, #-4]
 8007134:	3d01      	subs	r5, #1
 8007136:	f104 0410 	add.w	r4, r4, #16
 800713a:	f103 0310 	add.w	r3, r3, #16
 800713e:	d1e9      	bne.n	8007114 <arm_copy_f32+0x10>
 8007140:	013f      	lsls	r7, r7, #4
 8007142:	4438      	add	r0, r7
 8007144:	4439      	add	r1, r7
 8007146:	f012 0203 	ands.w	r2, r2, #3
 800714a:	d009      	beq.n	8007160 <arm_copy_f32+0x5c>
 800714c:	6803      	ldr	r3, [r0, #0]
 800714e:	600b      	str	r3, [r1, #0]
 8007150:	3a01      	subs	r2, #1
 8007152:	d005      	beq.n	8007160 <arm_copy_f32+0x5c>
 8007154:	6843      	ldr	r3, [r0, #4]
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	2a01      	cmp	r2, #1
 800715a:	bf1c      	itt	ne
 800715c:	6883      	ldrne	r3, [r0, #8]
 800715e:	608b      	strne	r3, [r1, #8]
 8007160:	bcf0      	pop	{r4, r5, r6, r7}
 8007162:	4770      	bx	lr

08007164 <arm_mean_f32>:
 8007164:	b430      	push	{r4, r5}
 8007166:	088d      	lsrs	r5, r1, #2
 8007168:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80071dc <arm_mean_f32+0x78>
 800716c:	d018      	beq.n	80071a0 <arm_mean_f32+0x3c>
 800716e:	f100 0310 	add.w	r3, r0, #16
 8007172:	462c      	mov	r4, r5
 8007174:	ed53 5a04 	vldr	s11, [r3, #-16]
 8007178:	ed13 6a03 	vldr	s12, [r3, #-12]
 800717c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007180:	ed13 7a01 	vldr	s14, [r3, #-4]
 8007184:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007188:	3c01      	subs	r4, #1
 800718a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800718e:	f103 0310 	add.w	r3, r3, #16
 8007192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800719a:	d1eb      	bne.n	8007174 <arm_mean_f32+0x10>
 800719c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80071a0:	f011 0303 	ands.w	r3, r1, #3
 80071a4:	d00f      	beq.n	80071c6 <arm_mean_f32+0x62>
 80071a6:	ed90 7a00 	vldr	s14, [r0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071b0:	d009      	beq.n	80071c6 <arm_mean_f32+0x62>
 80071b2:	ed90 7a01 	vldr	s14, [r0, #4]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071bc:	bf1c      	itt	ne
 80071be:	ed90 7a02 	vldrne	s14, [r0, #8]
 80071c2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80071c6:	ee07 1a10 	vmov	s14, r1
 80071ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80071ce:	bc30      	pop	{r4, r5}
 80071d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80071d4:	edc2 6a00 	vstr	s13, [r2]
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	00000000 	.word	0x00000000

080071e0 <arm_rfft_32_fast_init_f32>:
 80071e0:	b178      	cbz	r0, 8007202 <arm_rfft_32_fast_init_f32+0x22>
 80071e2:	b430      	push	{r4, r5}
 80071e4:	4908      	ldr	r1, [pc, #32]	; (8007208 <arm_rfft_32_fast_init_f32+0x28>)
 80071e6:	4a09      	ldr	r2, [pc, #36]	; (800720c <arm_rfft_32_fast_init_f32+0x2c>)
 80071e8:	2310      	movs	r3, #16
 80071ea:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80071ee:	8003      	strh	r3, [r0, #0]
 80071f0:	2520      	movs	r5, #32
 80071f2:	2414      	movs	r4, #20
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <arm_rfft_32_fast_init_f32+0x30>)
 80071f6:	8205      	strh	r5, [r0, #16]
 80071f8:	8184      	strh	r4, [r0, #12]
 80071fa:	6143      	str	r3, [r0, #20]
 80071fc:	bc30      	pop	{r4, r5}
 80071fe:	2000      	movs	r0, #0
 8007200:	4770      	bx	lr
 8007202:	f04f 30ff 	mov.w	r0, #4294967295
 8007206:	4770      	bx	lr
 8007208:	0800ded0 	.word	0x0800ded0
 800720c:	0801300c 	.word	0x0801300c
 8007210:	0801bd8c 	.word	0x0801bd8c

08007214 <arm_rfft_64_fast_init_f32>:
 8007214:	b178      	cbz	r0, 8007236 <arm_rfft_64_fast_init_f32+0x22>
 8007216:	b430      	push	{r4, r5}
 8007218:	4908      	ldr	r1, [pc, #32]	; (800723c <arm_rfft_64_fast_init_f32+0x28>)
 800721a:	4a09      	ldr	r2, [pc, #36]	; (8007240 <arm_rfft_64_fast_init_f32+0x2c>)
 800721c:	2320      	movs	r3, #32
 800721e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007222:	8003      	strh	r3, [r0, #0]
 8007224:	2540      	movs	r5, #64	; 0x40
 8007226:	2430      	movs	r4, #48	; 0x30
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <arm_rfft_64_fast_init_f32+0x30>)
 800722a:	8205      	strh	r5, [r0, #16]
 800722c:	8184      	strh	r4, [r0, #12]
 800722e:	6143      	str	r3, [r0, #20]
 8007230:	bc30      	pop	{r4, r5}
 8007232:	2000      	movs	r0, #0
 8007234:	4770      	bx	lr
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	4770      	bx	lr
 800723c:	08010028 	.word	0x08010028
 8007240:	0801788c 	.word	0x0801788c
 8007244:	0802060c 	.word	0x0802060c

08007248 <arm_rfft_256_fast_init_f32>:
 8007248:	b180      	cbz	r0, 800726c <arm_rfft_256_fast_init_f32+0x24>
 800724a:	b430      	push	{r4, r5}
 800724c:	4909      	ldr	r1, [pc, #36]	; (8007274 <arm_rfft_256_fast_init_f32+0x2c>)
 800724e:	4a0a      	ldr	r2, [pc, #40]	; (8007278 <arm_rfft_256_fast_init_f32+0x30>)
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007256:	8003      	strh	r3, [r0, #0]
 8007258:	f44f 7580 	mov.w	r5, #256	; 0x100
 800725c:	24d0      	movs	r4, #208	; 0xd0
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <arm_rfft_256_fast_init_f32+0x34>)
 8007260:	8205      	strh	r5, [r0, #16]
 8007262:	8184      	strh	r4, [r0, #12]
 8007264:	6143      	str	r3, [r0, #20]
 8007266:	bc30      	pop	{r4, r5}
 8007268:	2000      	movs	r0, #0
 800726a:	4770      	bx	lr
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	0800dd30 	.word	0x0800dd30
 8007278:	08012c0c 	.word	0x08012c0c
 800727c:	0801b98c 	.word	0x0801b98c

08007280 <arm_rfft_512_fast_init_f32>:
 8007280:	b190      	cbz	r0, 80072a8 <arm_rfft_512_fast_init_f32+0x28>
 8007282:	b430      	push	{r4, r5}
 8007284:	490a      	ldr	r1, [pc, #40]	; (80072b0 <arm_rfft_512_fast_init_f32+0x30>)
 8007286:	4a0b      	ldr	r2, [pc, #44]	; (80072b4 <arm_rfft_512_fast_init_f32+0x34>)
 8007288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800728c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007290:	8003      	strh	r3, [r0, #0]
 8007292:	f44f 7500 	mov.w	r5, #512	; 0x200
 8007296:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <arm_rfft_512_fast_init_f32+0x38>)
 800729c:	8205      	strh	r5, [r0, #16]
 800729e:	8184      	strh	r4, [r0, #12]
 80072a0:	6143      	str	r3, [r0, #20]
 80072a2:	bc30      	pop	{r4, r5}
 80072a4:	2000      	movs	r0, #0
 80072a6:	4770      	bx	lr
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	0800fcb8 	.word	0x0800fcb8
 80072b4:	0801708c 	.word	0x0801708c
 80072b8:	0801fe0c 	.word	0x0801fe0c

080072bc <arm_rfft_1024_fast_init_f32>:
 80072bc:	b190      	cbz	r0, 80072e4 <arm_rfft_1024_fast_init_f32+0x28>
 80072be:	b430      	push	{r4, r5}
 80072c0:	490a      	ldr	r1, [pc, #40]	; (80072ec <arm_rfft_1024_fast_init_f32+0x30>)
 80072c2:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <arm_rfft_1024_fast_init_f32+0x34>)
 80072c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80072cc:	8003      	strh	r3, [r0, #0]
 80072ce:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80072d2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <arm_rfft_1024_fast_init_f32+0x38>)
 80072d8:	8205      	strh	r5, [r0, #16]
 80072da:	8184      	strh	r4, [r0, #12]
 80072dc:	6143      	str	r3, [r0, #20]
 80072de:	bc30      	pop	{r4, r5}
 80072e0:	2000      	movs	r0, #0
 80072e2:	4770      	bx	lr
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	08010088 	.word	0x08010088
 80072f0:	0801798c 	.word	0x0801798c
 80072f4:	0801898c 	.word	0x0801898c

080072f8 <arm_rfft_2048_fast_init_f32>:
 80072f8:	b190      	cbz	r0, 8007320 <arm_rfft_2048_fast_init_f32+0x28>
 80072fa:	b430      	push	{r4, r5}
 80072fc:	490a      	ldr	r1, [pc, #40]	; (8007328 <arm_rfft_2048_fast_init_f32+0x30>)
 80072fe:	4a0b      	ldr	r2, [pc, #44]	; (800732c <arm_rfft_2048_fast_init_f32+0x34>)
 8007300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007304:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007308:	8003      	strh	r3, [r0, #0]
 800730a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800730e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8007312:	4b07      	ldr	r3, [pc, #28]	; (8007330 <arm_rfft_2048_fast_init_f32+0x38>)
 8007314:	8205      	strh	r5, [r0, #16]
 8007316:	8184      	strh	r4, [r0, #12]
 8007318:	6143      	str	r3, [r0, #20]
 800731a:	bc30      	pop	{r4, r5}
 800731c:	2000      	movs	r0, #0
 800731e:	4770      	bx	lr
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	0800cf20 	.word	0x0800cf20
 800732c:	08010c0c 	.word	0x08010c0c
 8007330:	0801998c 	.word	0x0801998c

08007334 <arm_rfft_4096_fast_init_f32>:
 8007334:	b190      	cbz	r0, 800735c <arm_rfft_4096_fast_init_f32+0x28>
 8007336:	b430      	push	{r4, r5}
 8007338:	490a      	ldr	r1, [pc, #40]	; (8007364 <arm_rfft_4096_fast_init_f32+0x30>)
 800733a:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <arm_rfft_4096_fast_init_f32+0x34>)
 800733c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007340:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007344:	8003      	strh	r3, [r0, #0]
 8007346:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800734a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800734e:	4b07      	ldr	r3, [pc, #28]	; (800736c <arm_rfft_4096_fast_init_f32+0x38>)
 8007350:	8205      	strh	r5, [r0, #16]
 8007352:	8184      	strh	r4, [r0, #12]
 8007354:	6143      	str	r3, [r0, #20]
 8007356:	bc30      	pop	{r4, r5}
 8007358:	2000      	movs	r0, #0
 800735a:	4770      	bx	lr
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	0800def8 	.word	0x0800def8
 8007368:	0801308c 	.word	0x0801308c
 800736c:	0801be0c 	.word	0x0801be0c

08007370 <arm_rfft_fast_init_f32>:
 8007370:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007374:	d01f      	beq.n	80073b6 <arm_rfft_fast_init_f32+0x46>
 8007376:	d90b      	bls.n	8007390 <arm_rfft_fast_init_f32+0x20>
 8007378:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800737c:	d019      	beq.n	80073b2 <arm_rfft_fast_init_f32+0x42>
 800737e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007382:	d012      	beq.n	80073aa <arm_rfft_fast_init_f32+0x3a>
 8007384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007388:	d00d      	beq.n	80073a6 <arm_rfft_fast_init_f32+0x36>
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	4770      	bx	lr
 8007390:	2940      	cmp	r1, #64	; 0x40
 8007392:	d00c      	beq.n	80073ae <arm_rfft_fast_init_f32+0x3e>
 8007394:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007398:	d003      	beq.n	80073a2 <arm_rfft_fast_init_f32+0x32>
 800739a:	2920      	cmp	r1, #32
 800739c:	d1f5      	bne.n	800738a <arm_rfft_fast_init_f32+0x1a>
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <arm_rfft_fast_init_f32+0x4c>)
 80073a0:	4718      	bx	r3
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <arm_rfft_fast_init_f32+0x50>)
 80073a4:	4718      	bx	r3
 80073a6:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <arm_rfft_fast_init_f32+0x54>)
 80073a8:	4718      	bx	r3
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <arm_rfft_fast_init_f32+0x58>)
 80073ac:	4718      	bx	r3
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <arm_rfft_fast_init_f32+0x5c>)
 80073b0:	e7f6      	b.n	80073a0 <arm_rfft_fast_init_f32+0x30>
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <arm_rfft_fast_init_f32+0x60>)
 80073b4:	e7f4      	b.n	80073a0 <arm_rfft_fast_init_f32+0x30>
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <arm_rfft_fast_init_f32+0x64>)
 80073b8:	e7f2      	b.n	80073a0 <arm_rfft_fast_init_f32+0x30>
 80073ba:	bf00      	nop
 80073bc:	080071e1 	.word	0x080071e1
 80073c0:	08007249 	.word	0x08007249
 80073c4:	080072bd 	.word	0x080072bd
 80073c8:	08007335 	.word	0x08007335
 80073cc:	08007215 	.word	0x08007215
 80073d0:	080072f9 	.word	0x080072f9
 80073d4:	08007281 	.word	0x08007281

080073d8 <stage_rfft_f32>:
 80073d8:	b410      	push	{r4}
 80073da:	edd1 7a00 	vldr	s15, [r1]
 80073de:	ed91 7a01 	vldr	s14, [r1, #4]
 80073e2:	8804      	ldrh	r4, [r0, #0]
 80073e4:	6940      	ldr	r0, [r0, #20]
 80073e6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80073ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073ee:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80073f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80073f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073fa:	3c01      	subs	r4, #1
 80073fc:	ee26 7a84 	vmul.f32	s14, s13, s8
 8007400:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007404:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8007408:	ed82 7a00 	vstr	s14, [r2]
 800740c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007410:	3010      	adds	r0, #16
 8007412:	3210      	adds	r2, #16
 8007414:	3b08      	subs	r3, #8
 8007416:	3110      	adds	r1, #16
 8007418:	ed11 5a02 	vldr	s10, [r1, #-8]
 800741c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007420:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007424:	edd3 4a03 	vldr	s9, [r3, #12]
 8007428:	ed51 7a01 	vldr	s15, [r1, #-4]
 800742c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007430:	ee77 5a45 	vsub.f32	s11, s14, s10
 8007434:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007438:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800743c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007440:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007444:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007448:	ee37 7a23 	vadd.f32	s14, s14, s7
 800744c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007450:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007454:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007458:	ee37 7a06 	vadd.f32	s14, s14, s12
 800745c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007460:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007464:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007468:	3c01      	subs	r4, #1
 800746a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800746e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007472:	f1a3 0308 	sub.w	r3, r3, #8
 8007476:	f101 0108 	add.w	r1, r1, #8
 800747a:	f100 0008 	add.w	r0, r0, #8
 800747e:	f102 0208 	add.w	r2, r2, #8
 8007482:	d1c9      	bne.n	8007418 <stage_rfft_f32+0x40>
 8007484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop

0800748c <merge_rfft_f32>:
 800748c:	b410      	push	{r4}
 800748e:	edd1 7a00 	vldr	s15, [r1]
 8007492:	edd1 6a01 	vldr	s13, [r1, #4]
 8007496:	8804      	ldrh	r4, [r0, #0]
 8007498:	6940      	ldr	r0, [r0, #20]
 800749a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800749e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074a2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80074a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80074aa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80074ae:	3c01      	subs	r4, #1
 80074b0:	ed82 7a00 	vstr	s14, [r2]
 80074b4:	edc2 7a01 	vstr	s15, [r2, #4]
 80074b8:	b3dc      	cbz	r4, 8007532 <merge_rfft_f32+0xa6>
 80074ba:	00e3      	lsls	r3, r4, #3
 80074bc:	3b08      	subs	r3, #8
 80074be:	440b      	add	r3, r1
 80074c0:	3010      	adds	r0, #16
 80074c2:	3210      	adds	r2, #16
 80074c4:	3110      	adds	r1, #16
 80074c6:	ed11 5a02 	vldr	s10, [r1, #-8]
 80074ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80074ce:	ed50 6a02 	vldr	s13, [r0, #-8]
 80074d2:	edd3 4a03 	vldr	s9, [r3, #12]
 80074d6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80074da:	ed10 6a01 	vldr	s12, [r0, #-4]
 80074de:	ee75 5a47 	vsub.f32	s11, s10, s14
 80074e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80074e6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80074ea:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80074ee:	ee66 5a25 	vmul.f32	s11, s12, s11
 80074f2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80074f6:	ee37 7a63 	vsub.f32	s14, s14, s7
 80074fa:	ee66 6a85 	vmul.f32	s13, s13, s10
 80074fe:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007502:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007506:	ee37 7a46 	vsub.f32	s14, s14, s12
 800750a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800750e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007512:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007516:	3c01      	subs	r4, #1
 8007518:	ed02 7a02 	vstr	s14, [r2, #-8]
 800751c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007520:	f1a3 0308 	sub.w	r3, r3, #8
 8007524:	f101 0108 	add.w	r1, r1, #8
 8007528:	f100 0008 	add.w	r0, r0, #8
 800752c:	f102 0208 	add.w	r2, r2, #8
 8007530:	d1c9      	bne.n	80074c6 <merge_rfft_f32+0x3a>
 8007532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007536:	4770      	bx	lr

08007538 <arm_rfft_fast_f32>:
 8007538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	8a05      	ldrh	r5, [r0, #16]
 800753e:	086d      	lsrs	r5, r5, #1
 8007540:	8005      	strh	r5, [r0, #0]
 8007542:	4604      	mov	r4, r0
 8007544:	4616      	mov	r6, r2
 8007546:	461d      	mov	r5, r3
 8007548:	b14b      	cbz	r3, 800755e <arm_rfft_fast_f32+0x26>
 800754a:	f7ff ff9f 	bl	800748c <merge_rfft_f32>
 800754e:	462a      	mov	r2, r5
 8007550:	4631      	mov	r1, r6
 8007552:	4620      	mov	r0, r4
 8007554:	2301      	movs	r3, #1
 8007556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	f000 bb33 	b.w	8007bc4 <arm_cfft_f32>
 800755e:	460f      	mov	r7, r1
 8007560:	461a      	mov	r2, r3
 8007562:	2301      	movs	r3, #1
 8007564:	f000 fb2e 	bl	8007bc4 <arm_cfft_f32>
 8007568:	4632      	mov	r2, r6
 800756a:	4639      	mov	r1, r7
 800756c:	4620      	mov	r0, r4
 800756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	f7ff bf31 	b.w	80073d8 <stage_rfft_f32>
 8007576:	bf00      	nop

08007578 <arm_cfft_radix8by2_f32>:
 8007578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757c:	ed2d 8b08 	vpush	{d8-d11}
 8007580:	4607      	mov	r7, r0
 8007582:	4608      	mov	r0, r1
 8007584:	f8b7 c000 	ldrh.w	ip, [r7]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800758e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8007592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007596:	f000 80b0 	beq.w	80076fa <arm_cfft_radix8by2_f32+0x182>
 800759a:	008c      	lsls	r4, r1, #2
 800759c:	3410      	adds	r4, #16
 800759e:	f100 0310 	add.w	r3, r0, #16
 80075a2:	1906      	adds	r6, r0, r4
 80075a4:	3210      	adds	r2, #16
 80075a6:	4444      	add	r4, r8
 80075a8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80075ac:	f108 0510 	add.w	r5, r8, #16
 80075b0:	ed15 2a04 	vldr	s4, [r5, #-16]
 80075b4:	ed55 2a03 	vldr	s5, [r5, #-12]
 80075b8:	ed54 4a04 	vldr	s9, [r4, #-16]
 80075bc:	ed14 4a03 	vldr	s8, [r4, #-12]
 80075c0:	ed14 6a02 	vldr	s12, [r4, #-8]
 80075c4:	ed54 5a01 	vldr	s11, [r4, #-4]
 80075c8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80075cc:	ed15 0a02 	vldr	s0, [r5, #-8]
 80075d0:	ed55 0a01 	vldr	s1, [r5, #-4]
 80075d4:	ed56 6a04 	vldr	s13, [r6, #-16]
 80075d8:	ed16 3a03 	vldr	s6, [r6, #-12]
 80075dc:	ed13 7a03 	vldr	s14, [r3, #-12]
 80075e0:	ed13 5a02 	vldr	s10, [r3, #-8]
 80075e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80075e8:	ed16 1a02 	vldr	s2, [r6, #-8]
 80075ec:	ed56 1a01 	vldr	s3, [r6, #-4]
 80075f0:	ee73 ba82 	vadd.f32	s23, s7, s4
 80075f4:	ee37 ba22 	vadd.f32	s22, s14, s5
 80075f8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80075fc:	ee33 9a04 	vadd.f32	s18, s6, s8
 8007600:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8007604:	ee75 aa00 	vadd.f32	s21, s10, s0
 8007608:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800760c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8007610:	ed43 ba04 	vstr	s23, [r3, #-16]
 8007614:	ed03 ba03 	vstr	s22, [r3, #-12]
 8007618:	ed43 aa02 	vstr	s21, [r3, #-8]
 800761c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8007620:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007624:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007628:	ed06 9a03 	vstr	s18, [r6, #-12]
 800762c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007630:	ee37 7a62 	vsub.f32	s14, s14, s5
 8007634:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007638:	ee34 4a43 	vsub.f32	s8, s8, s6
 800763c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8007640:	ed12 3a04 	vldr	s6, [r2, #-16]
 8007644:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007648:	ee27 8a26 	vmul.f32	s16, s14, s13
 800764c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8007650:	ee23 2a83 	vmul.f32	s4, s7, s6
 8007654:	ee64 4a83 	vmul.f32	s9, s9, s6
 8007658:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800765c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007660:	ee64 6a26 	vmul.f32	s13, s8, s13
 8007664:	ee24 4a03 	vmul.f32	s8, s8, s6
 8007668:	ee37 7a63 	vsub.f32	s14, s14, s7
 800766c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007670:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8007674:	ee32 3a08 	vadd.f32	s6, s4, s16
 8007678:	ed05 7a03 	vstr	s14, [r5, #-12]
 800767c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8007680:	ed04 4a04 	vstr	s8, [r4, #-16]
 8007684:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007688:	ed12 7a01 	vldr	s14, [r2, #-4]
 800768c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8007690:	ee35 5a40 	vsub.f32	s10, s10, s0
 8007694:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8007698:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800769c:	ed52 5a02 	vldr	s11, [r2, #-8]
 80076a0:	ee67 3a87 	vmul.f32	s7, s15, s14
 80076a4:	ee66 4a87 	vmul.f32	s9, s13, s14
 80076a8:	ee25 4a25 	vmul.f32	s8, s10, s11
 80076ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80076b0:	ee25 5a07 	vmul.f32	s10, s10, s14
 80076b4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80076b8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80076bc:	ee26 6a25 	vmul.f32	s12, s12, s11
 80076c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80076c4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80076c8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80076cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80076d0:	3310      	adds	r3, #16
 80076d2:	4563      	cmp	r3, ip
 80076d4:	ed45 5a02 	vstr	s11, [r5, #-8]
 80076d8:	f106 0610 	add.w	r6, r6, #16
 80076dc:	ed45 7a01 	vstr	s15, [r5, #-4]
 80076e0:	f102 0210 	add.w	r2, r2, #16
 80076e4:	ed04 6a02 	vstr	s12, [r4, #-8]
 80076e8:	ed04 7a01 	vstr	s14, [r4, #-4]
 80076ec:	f105 0510 	add.w	r5, r5, #16
 80076f0:	f104 0410 	add.w	r4, r4, #16
 80076f4:	f47f af5c 	bne.w	80075b0 <arm_cfft_radix8by2_f32+0x38>
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	b28c      	uxth	r4, r1
 80076fc:	4621      	mov	r1, r4
 80076fe:	2302      	movs	r3, #2
 8007700:	f001 f8d4 	bl	80088ac <arm_radix8_butterfly_f32>
 8007704:	ecbd 8b08 	vpop	{d8-d11}
 8007708:	4621      	mov	r1, r4
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4640      	mov	r0, r8
 800770e:	2302      	movs	r3, #2
 8007710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007714:	f001 b8ca 	b.w	80088ac <arm_radix8_butterfly_f32>

08007718 <arm_cfft_radix8by4_f32>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	ed2d 8b0a 	vpush	{d8-d12}
 8007720:	b08d      	sub	sp, #52	; 0x34
 8007722:	460d      	mov	r5, r1
 8007724:	910b      	str	r1, [sp, #44]	; 0x2c
 8007726:	8801      	ldrh	r1, [r0, #0]
 8007728:	6842      	ldr	r2, [r0, #4]
 800772a:	900a      	str	r0, [sp, #40]	; 0x28
 800772c:	0849      	lsrs	r1, r1, #1
 800772e:	008b      	lsls	r3, r1, #2
 8007730:	18ee      	adds	r6, r5, r3
 8007732:	18f0      	adds	r0, r6, r3
 8007734:	edd0 5a00 	vldr	s11, [r0]
 8007738:	edd5 7a00 	vldr	s15, [r5]
 800773c:	ed96 7a00 	vldr	s14, [r6]
 8007740:	edd0 3a01 	vldr	s7, [r0, #4]
 8007744:	ed96 4a01 	vldr	s8, [r6, #4]
 8007748:	ed95 5a01 	vldr	s10, [r5, #4]
 800774c:	9008      	str	r0, [sp, #32]
 800774e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8007752:	18c7      	adds	r7, r0, r3
 8007754:	edd7 4a00 	vldr	s9, [r7]
 8007758:	ed97 3a01 	vldr	s6, [r7, #4]
 800775c:	9701      	str	r7, [sp, #4]
 800775e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8007762:	462c      	mov	r4, r5
 8007764:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007768:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800776c:	ee16 ca90 	vmov	ip, s13
 8007770:	f844 cb08 	str.w	ip, [r4], #8
 8007774:	ee75 6a23 	vadd.f32	s13, s10, s7
 8007778:	edd6 5a01 	vldr	s11, [r6, #4]
 800777c:	edd7 2a01 	vldr	s5, [r7, #4]
 8007780:	9404      	str	r4, [sp, #16]
 8007782:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007786:	ee74 3a27 	vadd.f32	s7, s8, s15
 800778a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800778e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8007792:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007796:	0849      	lsrs	r1, r1, #1
 8007798:	f102 0e08 	add.w	lr, r2, #8
 800779c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80077a0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80077a4:	9109      	str	r1, [sp, #36]	; 0x24
 80077a6:	ee35 4a47 	vsub.f32	s8, s10, s14
 80077aa:	f1a1 0902 	sub.w	r9, r1, #2
 80077ae:	f8cd e00c 	str.w	lr, [sp, #12]
 80077b2:	4631      	mov	r1, r6
 80077b4:	ee13 ea90 	vmov	lr, s7
 80077b8:	ee36 6a64 	vsub.f32	s12, s12, s9
 80077bc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80077c0:	4604      	mov	r4, r0
 80077c2:	edc5 5a01 	vstr	s11, [r5, #4]
 80077c6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80077ca:	f841 eb08 	str.w	lr, [r1], #8
 80077ce:	ee34 5a24 	vadd.f32	s10, s8, s9
 80077d2:	ee16 ea10 	vmov	lr, s12
 80077d6:	ed86 5a01 	vstr	s10, [r6, #4]
 80077da:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80077de:	f844 eb08 	str.w	lr, [r4], #8
 80077e2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80077e6:	edc0 6a01 	vstr	s13, [r0, #4]
 80077ea:	9405      	str	r4, [sp, #20]
 80077ec:	4604      	mov	r4, r0
 80077ee:	ee17 0a90 	vmov	r0, s15
 80077f2:	9106      	str	r1, [sp, #24]
 80077f4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80077f8:	f102 0110 	add.w	r1, r2, #16
 80077fc:	46bc      	mov	ip, r7
 80077fe:	9100      	str	r1, [sp, #0]
 8007800:	f847 0b08 	str.w	r0, [r7], #8
 8007804:	f102 0118 	add.w	r1, r2, #24
 8007808:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800780c:	9102      	str	r1, [sp, #8]
 800780e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007812:	9007      	str	r0, [sp, #28]
 8007814:	f000 8134 	beq.w	8007a80 <arm_cfft_radix8by4_f32+0x368>
 8007818:	f102 0920 	add.w	r9, r2, #32
 800781c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8007820:	9a01      	ldr	r2, [sp, #4]
 8007822:	f8dd a000 	ldr.w	sl, [sp]
 8007826:	3b0c      	subs	r3, #12
 8007828:	4683      	mov	fp, r0
 800782a:	4463      	add	r3, ip
 800782c:	f105 0e10 	add.w	lr, r5, #16
 8007830:	f1a4 010c 	sub.w	r1, r4, #12
 8007834:	f104 0510 	add.w	r5, r4, #16
 8007838:	f1a6 0c0c 	sub.w	ip, r6, #12
 800783c:	f1a2 040c 	sub.w	r4, r2, #12
 8007840:	f106 0010 	add.w	r0, r6, #16
 8007844:	3210      	adds	r2, #16
 8007846:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800784a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800784e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007852:	ed52 1a02 	vldr	s3, [r2, #-8]
 8007856:	ed55 6a01 	vldr	s13, [r5, #-4]
 800785a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800785e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8007862:	ed10 8a01 	vldr	s16, [r0, #-4]
 8007866:	ee35 4a25 	vadd.f32	s8, s10, s11
 800786a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800786e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8007872:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007876:	ee37 7a21 	vadd.f32	s14, s14, s3
 800787a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800787e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8007882:	ed10 7a01 	vldr	s14, [r0, #-4]
 8007886:	ed52 6a01 	vldr	s13, [r2, #-4]
 800788a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800788e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8007892:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007896:	ee70 3a67 	vsub.f32	s7, s0, s15
 800789a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800789e:	ed94 7a02 	vldr	s14, [r4, #8]
 80078a2:	ed9c 2a02 	vldr	s4, [ip, #8]
 80078a6:	ed91 ba02 	vldr	s22, [r1, #8]
 80078aa:	edd3 9a02 	vldr	s19, [r3, #8]
 80078ae:	edd4 2a01 	vldr	s5, [r4, #4]
 80078b2:	ed9c 9a01 	vldr	s18, [ip, #4]
 80078b6:	ed93 5a01 	vldr	s10, [r3, #4]
 80078ba:	edd1 0a01 	vldr	s1, [r1, #4]
 80078be:	ee72 6a07 	vadd.f32	s13, s4, s14
 80078c2:	ee32 2a47 	vsub.f32	s4, s4, s14
 80078c6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80078ca:	ee79 4a22 	vadd.f32	s9, s18, s5
 80078ce:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80078d2:	ee79 2a62 	vsub.f32	s5, s18, s5
 80078d6:	ed8c 7a02 	vstr	s14, [ip, #8]
 80078da:	ed91 7a01 	vldr	s14, [r1, #4]
 80078de:	edd3 8a01 	vldr	s17, [r3, #4]
 80078e2:	ee34 7a87 	vadd.f32	s14, s9, s14
 80078e6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80078ea:	ee37 7a28 	vadd.f32	s14, s14, s17
 80078ee:	ee32 9a60 	vsub.f32	s18, s4, s1
 80078f2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80078f6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80078fa:	ed1a aa02 	vldr	s20, [sl, #-8]
 80078fe:	ee73 8a22 	vadd.f32	s17, s6, s5
 8007902:	ee39 9a05 	vadd.f32	s18, s18, s10
 8007906:	ee7a aac1 	vsub.f32	s21, s21, s2
 800790a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800790e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8007912:	ee69 ba07 	vmul.f32	s23, s18, s14
 8007916:	ee6a aa87 	vmul.f32	s21, s21, s14
 800791a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800791e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8007922:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8007926:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800792a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800792e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8007932:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007936:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800793a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800793e:	ee34 4a67 	vsub.f32	s8, s8, s15
 8007942:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007946:	ee36 6a48 	vsub.f32	s12, s12, s16
 800794a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800794e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8007952:	ed40 3a01 	vstr	s7, [r0, #-4]
 8007956:	edc1 8a01 	vstr	s17, [r1, #4]
 800795a:	ed81 aa02 	vstr	s20, [r1, #8]
 800795e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8007962:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007966:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800796a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800796e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8007972:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007976:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800797a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800797e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8007982:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007986:	ee24 4a26 	vmul.f32	s8, s8, s13
 800798a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800798e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007992:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007996:	ee36 6a44 	vsub.f32	s12, s12, s8
 800799a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800799e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80079a2:	ee79 3a29 	vadd.f32	s7, s18, s19
 80079a6:	ee75 6a60 	vsub.f32	s13, s10, s1
 80079aa:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80079ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80079b2:	ed45 3a02 	vstr	s7, [r5, #-8]
 80079b6:	ed05 6a01 	vstr	s12, [r5, #-4]
 80079ba:	ed84 7a01 	vstr	s14, [r4, #4]
 80079be:	ed84 4a02 	vstr	s8, [r4, #8]
 80079c2:	ee35 6a81 	vadd.f32	s12, s11, s2
 80079c6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80079ca:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80079ce:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80079d2:	ee33 3a62 	vsub.f32	s6, s6, s5
 80079d6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80079da:	ee67 2a26 	vmul.f32	s5, s14, s13
 80079de:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80079e2:	ee26 5a25 	vmul.f32	s10, s12, s11
 80079e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80079ea:	ee26 6a26 	vmul.f32	s12, s12, s13
 80079ee:	ee27 7a25 	vmul.f32	s14, s14, s11
 80079f2:	ee63 6a26 	vmul.f32	s13, s6, s13
 80079f6:	ee23 3a25 	vmul.f32	s6, s6, s11
 80079fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80079fe:	ee75 5a24 	vadd.f32	s11, s10, s9
 8007a02:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8007a06:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007a0a:	f1bb 0b01 	subs.w	fp, fp, #1
 8007a0e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8007a12:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007a16:	f10e 0e08 	add.w	lr, lr, #8
 8007a1a:	ed83 3a02 	vstr	s6, [r3, #8]
 8007a1e:	ed83 7a01 	vstr	s14, [r3, #4]
 8007a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8007a26:	f10a 0a08 	add.w	sl, sl, #8
 8007a2a:	f100 0008 	add.w	r0, r0, #8
 8007a2e:	f1a1 0108 	sub.w	r1, r1, #8
 8007a32:	f109 0910 	add.w	r9, r9, #16
 8007a36:	f105 0508 	add.w	r5, r5, #8
 8007a3a:	f1a4 0408 	sub.w	r4, r4, #8
 8007a3e:	f108 0818 	add.w	r8, r8, #24
 8007a42:	f102 0208 	add.w	r2, r2, #8
 8007a46:	f1a3 0308 	sub.w	r3, r3, #8
 8007a4a:	f47f aefc 	bne.w	8007846 <arm_cfft_radix8by4_f32+0x12e>
 8007a4e:	9907      	ldr	r1, [sp, #28]
 8007a50:	9800      	ldr	r0, [sp, #0]
 8007a52:	00cb      	lsls	r3, r1, #3
 8007a54:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007a58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007a5c:	9100      	str	r1, [sp, #0]
 8007a5e:	9904      	ldr	r1, [sp, #16]
 8007a60:	4419      	add	r1, r3
 8007a62:	9104      	str	r1, [sp, #16]
 8007a64:	9903      	ldr	r1, [sp, #12]
 8007a66:	4419      	add	r1, r3
 8007a68:	9103      	str	r1, [sp, #12]
 8007a6a:	9906      	ldr	r1, [sp, #24]
 8007a6c:	4419      	add	r1, r3
 8007a6e:	9106      	str	r1, [sp, #24]
 8007a70:	9905      	ldr	r1, [sp, #20]
 8007a72:	441f      	add	r7, r3
 8007a74:	4419      	add	r1, r3
 8007a76:	9b02      	ldr	r3, [sp, #8]
 8007a78:	9105      	str	r1, [sp, #20]
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	9904      	ldr	r1, [sp, #16]
 8007a82:	9805      	ldr	r0, [sp, #20]
 8007a84:	ed91 4a00 	vldr	s8, [r1]
 8007a88:	edd0 6a00 	vldr	s13, [r0]
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	ed97 3a00 	vldr	s6, [r7]
 8007a92:	edd3 7a00 	vldr	s15, [r3]
 8007a96:	edd0 4a01 	vldr	s9, [r0, #4]
 8007a9a:	edd1 3a01 	vldr	s7, [r1, #4]
 8007a9e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007aa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8007aa6:	9a03      	ldr	r2, [sp, #12]
 8007aa8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8007aac:	ee34 6a26 	vadd.f32	s12, s8, s13
 8007ab0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007ab4:	ee37 5a86 	vadd.f32	s10, s15, s12
 8007ab8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007abc:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007ac0:	ee74 6a66 	vsub.f32	s13, s8, s13
 8007ac4:	ed81 5a00 	vstr	s10, [r1]
 8007ac8:	ed93 5a01 	vldr	s10, [r3, #4]
 8007acc:	edd7 4a01 	vldr	s9, [r7, #4]
 8007ad0:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007ad4:	ee37 4a26 	vadd.f32	s8, s14, s13
 8007ad8:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007adc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8007ae0:	ed81 5a01 	vstr	s10, [r1, #4]
 8007ae4:	edd2 1a00 	vldr	s3, [r2]
 8007ae8:	edd2 2a01 	vldr	s5, [r2, #4]
 8007aec:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007af0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007af4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007af8:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007afc:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007b00:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007b04:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007b08:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007b0c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007b10:	edc3 2a00 	vstr	s5, [r3]
 8007b14:	ed83 5a01 	vstr	s10, [r3, #4]
 8007b18:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8007b1c:	9b00      	ldr	r3, [sp, #0]
 8007b1e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007b22:	ed93 4a01 	vldr	s8, [r3, #4]
 8007b26:	ed93 5a00 	vldr	s10, [r3]
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007b30:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007b34:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007b38:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007b3c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007b40:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007b44:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007b48:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007b4c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007b50:	ed80 6a01 	vstr	s12, [r0, #4]
 8007b54:	edc0 5a00 	vstr	s11, [r0]
 8007b58:	edd3 5a01 	vldr	s11, [r3, #4]
 8007b5c:	edd3 6a00 	vldr	s13, [r3]
 8007b60:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007b64:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007b68:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007b6c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007b70:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007b74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b78:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007b7c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007b80:	ed87 7a01 	vstr	s14, [r7, #4]
 8007b84:	edc7 7a00 	vstr	s15, [r7]
 8007b88:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	686a      	ldr	r2, [r5, #4]
 8007b90:	2304      	movs	r3, #4
 8007b92:	f000 fe8b 	bl	80088ac <arm_radix8_butterfly_f32>
 8007b96:	4630      	mov	r0, r6
 8007b98:	4621      	mov	r1, r4
 8007b9a:	686a      	ldr	r2, [r5, #4]
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	f000 fe85 	bl	80088ac <arm_radix8_butterfly_f32>
 8007ba2:	9808      	ldr	r0, [sp, #32]
 8007ba4:	686a      	ldr	r2, [r5, #4]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	2304      	movs	r3, #4
 8007baa:	f000 fe7f 	bl	80088ac <arm_radix8_butterfly_f32>
 8007bae:	686a      	ldr	r2, [r5, #4]
 8007bb0:	9801      	ldr	r0, [sp, #4]
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	b00d      	add	sp, #52	; 0x34
 8007bb8:	ecbd 8b0a 	vpop	{d8-d12}
 8007bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	f000 be74 	b.w	80088ac <arm_radix8_butterfly_f32>

08007bc4 <arm_cfft_f32>:
 8007bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	2a01      	cmp	r2, #1
 8007bca:	4606      	mov	r6, r0
 8007bcc:	4617      	mov	r7, r2
 8007bce:	460c      	mov	r4, r1
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	8805      	ldrh	r5, [r0, #0]
 8007bd4:	d056      	beq.n	8007c84 <arm_cfft_f32+0xc0>
 8007bd6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007bda:	d063      	beq.n	8007ca4 <arm_cfft_f32+0xe0>
 8007bdc:	d916      	bls.n	8007c0c <arm_cfft_f32+0x48>
 8007bde:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007be2:	d01a      	beq.n	8007c1a <arm_cfft_f32+0x56>
 8007be4:	d947      	bls.n	8007c76 <arm_cfft_f32+0xb2>
 8007be6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007bea:	d05b      	beq.n	8007ca4 <arm_cfft_f32+0xe0>
 8007bec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007bf0:	d105      	bne.n	8007bfe <arm_cfft_f32+0x3a>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	6872      	ldr	r2, [r6, #4]
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 fe57 	bl	80088ac <arm_radix8_butterfly_f32>
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	d111      	bne.n	8007c28 <arm_cfft_f32+0x64>
 8007c04:	2f01      	cmp	r7, #1
 8007c06:	d016      	beq.n	8007c36 <arm_cfft_f32+0x72>
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0c:	2d20      	cmp	r5, #32
 8007c0e:	d049      	beq.n	8007ca4 <arm_cfft_f32+0xe0>
 8007c10:	d935      	bls.n	8007c7e <arm_cfft_f32+0xba>
 8007c12:	2d40      	cmp	r5, #64	; 0x40
 8007c14:	d0ed      	beq.n	8007bf2 <arm_cfft_f32+0x2e>
 8007c16:	2d80      	cmp	r5, #128	; 0x80
 8007c18:	d1f1      	bne.n	8007bfe <arm_cfft_f32+0x3a>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7ff fcab 	bl	8007578 <arm_cfft_radix8by2_f32>
 8007c22:	f1b8 0f00 	cmp.w	r8, #0
 8007c26:	d0ed      	beq.n	8007c04 <arm_cfft_f32+0x40>
 8007c28:	68b2      	ldr	r2, [r6, #8]
 8007c2a:	89b1      	ldrh	r1, [r6, #12]
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f000 f841 	bl	8007cb4 <arm_bitreversal_32>
 8007c32:	2f01      	cmp	r7, #1
 8007c34:	d1e8      	bne.n	8007c08 <arm_cfft_f32+0x44>
 8007c36:	ee07 5a90 	vmov	s15, r5
 8007c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	d0de      	beq.n	8007c08 <arm_cfft_f32+0x44>
 8007c4a:	f104 0108 	add.w	r1, r4, #8
 8007c4e:	2300      	movs	r3, #0
 8007c50:	3301      	adds	r3, #1
 8007c52:	429d      	cmp	r5, r3
 8007c54:	f101 0108 	add.w	r1, r1, #8
 8007c58:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007c5c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007c60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007c68:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007c6c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007c70:	d1ee      	bne.n	8007c50 <arm_cfft_f32+0x8c>
 8007c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c76:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007c7a:	d0ba      	beq.n	8007bf2 <arm_cfft_f32+0x2e>
 8007c7c:	e7bf      	b.n	8007bfe <arm_cfft_f32+0x3a>
 8007c7e:	2d10      	cmp	r5, #16
 8007c80:	d0cb      	beq.n	8007c1a <arm_cfft_f32+0x56>
 8007c82:	e7bc      	b.n	8007bfe <arm_cfft_f32+0x3a>
 8007c84:	b19d      	cbz	r5, 8007cae <arm_cfft_f32+0xea>
 8007c86:	f101 030c 	add.w	r3, r1, #12
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007c90:	3201      	adds	r2, #1
 8007c92:	eef1 7a67 	vneg.f32	s15, s15
 8007c96:	4295      	cmp	r5, r2
 8007c98:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007c9c:	f103 0308 	add.w	r3, r3, #8
 8007ca0:	d1f4      	bne.n	8007c8c <arm_cfft_f32+0xc8>
 8007ca2:	e798      	b.n	8007bd6 <arm_cfft_f32+0x12>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff fd36 	bl	8007718 <arm_cfft_radix8by4_f32>
 8007cac:	e7a7      	b.n	8007bfe <arm_cfft_f32+0x3a>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0aa      	beq.n	8007c08 <arm_cfft_f32+0x44>
 8007cb2:	e7b9      	b.n	8007c28 <arm_cfft_f32+0x64>

08007cb4 <arm_bitreversal_32>:
 8007cb4:	b1e9      	cbz	r1, 8007cf2 <arm_bitreversal_32+0x3e>
 8007cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb8:	2500      	movs	r5, #0
 8007cba:	f102 0e02 	add.w	lr, r2, #2
 8007cbe:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8007cc2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8007cc6:	08a4      	lsrs	r4, r4, #2
 8007cc8:	089b      	lsrs	r3, r3, #2
 8007cca:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8007cce:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8007cd2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8007cd6:	00a6      	lsls	r6, r4, #2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	1d34      	adds	r4, r6, #4
 8007ce2:	3502      	adds	r5, #2
 8007ce4:	58c6      	ldr	r6, [r0, r3]
 8007ce6:	5907      	ldr	r7, [r0, r4]
 8007ce8:	50c7      	str	r7, [r0, r3]
 8007cea:	428d      	cmp	r5, r1
 8007cec:	5106      	str	r6, [r0, r4]
 8007cee:	d3e6      	bcc.n	8007cbe <arm_bitreversal_32+0xa>
 8007cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf2:	4770      	bx	lr

08007cf4 <arm_mat_mult_f32>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	8845      	ldrh	r5, [r0, #2]
 8007cfa:	880b      	ldrh	r3, [r1, #0]
 8007cfc:	8806      	ldrh	r6, [r0, #0]
 8007cfe:	6847      	ldr	r7, [r0, #4]
 8007d00:	6854      	ldr	r4, [r2, #4]
 8007d02:	6848      	ldr	r0, [r1, #4]
 8007d04:	b08b      	sub	sp, #44	; 0x2c
 8007d06:	42ab      	cmp	r3, r5
 8007d08:	9109      	str	r1, [sp, #36]	; 0x24
 8007d0a:	9604      	str	r6, [sp, #16]
 8007d0c:	8849      	ldrh	r1, [r1, #2]
 8007d0e:	f040 808a 	bne.w	8007e26 <arm_mat_mult_f32+0x132>
 8007d12:	8815      	ldrh	r5, [r2, #0]
 8007d14:	42b5      	cmp	r5, r6
 8007d16:	f040 8086 	bne.w	8007e26 <arm_mat_mult_f32+0x132>
 8007d1a:	8852      	ldrh	r2, [r2, #2]
 8007d1c:	428a      	cmp	r2, r1
 8007d1e:	f040 8082 	bne.w	8007e26 <arm_mat_mult_f32+0x132>
 8007d22:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007d26:	1d01      	adds	r1, r0, #4
 8007d28:	0116      	lsls	r6, r2, #4
 8007d2a:	9108      	str	r1, [sp, #32]
 8007d2c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8007d30:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8007d34:	9101      	str	r1, [sp, #4]
 8007d36:	fb06 f108 	mul.w	r1, r6, r8
 8007d3a:	0095      	lsls	r5, r2, #2
 8007d3c:	9103      	str	r1, [sp, #12]
 8007d3e:	00d2      	lsls	r2, r2, #3
 8007d40:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007d44:	f003 0903 	and.w	r9, r3, #3
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	f107 0b10 	add.w	fp, r7, #16
 8007d4e:	eb04 0a05 	add.w	sl, r4, r5
 8007d52:	9107      	str	r1, [sp, #28]
 8007d54:	9202      	str	r2, [sp, #8]
 8007d56:	9306      	str	r3, [sp, #24]
 8007d58:	f1ab 0310 	sub.w	r3, fp, #16
 8007d5c:	9305      	str	r3, [sp, #20]
 8007d5e:	9b07      	ldr	r3, [sp, #28]
 8007d60:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007d64:	eb03 0c0a 	add.w	ip, r3, sl
 8007d68:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007e30 <arm_mat_mult_f32+0x13c>
 8007d6c:	f1b8 0f00 	cmp.w	r8, #0
 8007d70:	d053      	beq.n	8007e1a <arm_mat_mult_f32+0x126>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	4644      	mov	r4, r8
 8007d76:	18c1      	adds	r1, r0, r3
 8007d78:	4602      	mov	r2, r0
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	ed92 6a00 	vldr	s12, [r2]
 8007d80:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007d84:	ed53 4a03 	vldr	s9, [r3, #-12]
 8007d88:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007d8c:	ed91 5a00 	vldr	s10, [r1]
 8007d90:	ed53 5a01 	vldr	s11, [r3, #-4]
 8007d94:	1957      	adds	r7, r2, r5
 8007d96:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007d9a:	ed97 6a00 	vldr	s12, [r7]
 8007d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007da6:	194f      	adds	r7, r1, r5
 8007da8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007dac:	ee26 7a85 	vmul.f32	s14, s13, s10
 8007db0:	edd7 7a00 	vldr	s15, [r7]
 8007db4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007db8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007dbc:	3c01      	subs	r4, #1
 8007dbe:	4432      	add	r2, r6
 8007dc0:	4431      	add	r1, r6
 8007dc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dc6:	f103 0310 	add.w	r3, r3, #16
 8007dca:	d1d7      	bne.n	8007d7c <arm_mat_mult_f32+0x88>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	9a01      	ldr	r2, [sp, #4]
 8007dd0:	4418      	add	r0, r3
 8007dd2:	f1b9 0f00 	cmp.w	r9, #0
 8007dd6:	d00b      	beq.n	8007df0 <arm_mat_mult_f32+0xfc>
 8007dd8:	464b      	mov	r3, r9
 8007dda:	edd0 6a00 	vldr	s13, [r0]
 8007dde:	ecb2 7a01 	vldmia	r2!, {s14}
 8007de2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007de6:	3b01      	subs	r3, #1
 8007de8:	4428      	add	r0, r5
 8007dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dee:	d1f4      	bne.n	8007dda <arm_mat_mult_f32+0xe6>
 8007df0:	ecec 7a01 	vstmia	ip!, {s15}
 8007df4:	45d4      	cmp	ip, sl
 8007df6:	4670      	mov	r0, lr
 8007df8:	f10e 0e04 	add.w	lr, lr, #4
 8007dfc:	d1b4      	bne.n	8007d68 <arm_mat_mult_f32+0x74>
 8007dfe:	9a01      	ldr	r2, [sp, #4]
 8007e00:	9b06      	ldr	r3, [sp, #24]
 8007e02:	4611      	mov	r1, r2
 8007e04:	4419      	add	r1, r3
 8007e06:	449b      	add	fp, r3
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	9101      	str	r1, [sp, #4]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	44aa      	add	sl, r5
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	d004      	beq.n	8007e1e <arm_mat_mult_f32+0x12a>
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	6858      	ldr	r0, [r3, #4]
 8007e18:	e79e      	b.n	8007d58 <arm_mat_mult_f32+0x64>
 8007e1a:	9a05      	ldr	r2, [sp, #20]
 8007e1c:	e7d9      	b.n	8007dd2 <arm_mat_mult_f32+0xde>
 8007e1e:	4618      	mov	r0, r3
 8007e20:	b00b      	add	sp, #44	; 0x2c
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	f06f 0002 	mvn.w	r0, #2
 8007e2a:	b00b      	add	sp, #44	; 0x2c
 8007e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e30:	00000000 	.word	0x00000000

08007e34 <arm_mat_init_f32>:
 8007e34:	8001      	strh	r1, [r0, #0]
 8007e36:	8042      	strh	r2, [r0, #2]
 8007e38:	6043      	str	r3, [r0, #4]
 8007e3a:	4770      	bx	lr

08007e3c <arm_fir_init_f32>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	9c04      	ldr	r4, [sp, #16]
 8007e40:	6082      	str	r2, [r0, #8]
 8007e42:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8007e46:	3c01      	subs	r4, #1
 8007e48:	440c      	add	r4, r1
 8007e4a:	8001      	strh	r1, [r0, #0]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	00a2      	lsls	r2, r4, #2
 8007e50:	4618      	mov	r0, r3
 8007e52:	2100      	movs	r1, #0
 8007e54:	f001 ff2a 	bl	8009cac <memset>
 8007e58:	6068      	str	r0, [r5, #4]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}

08007e5c <arm_fir_f32>:
 8007e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	ed2d 8b10 	vpush	{d8-d15}
 8007e64:	b08b      	sub	sp, #44	; 0x2c
 8007e66:	f8b0 8000 	ldrh.w	r8, [r0]
 8007e6a:	9003      	str	r0, [sp, #12]
 8007e6c:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8007e70:	461e      	mov	r6, r3
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 8007e7e:	08f3      	lsrs	r3, r6, #3
 8007e80:	9002      	str	r0, [sp, #8]
 8007e82:	9500      	str	r5, [sp, #0]
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	f000 81f1 	beq.w	800826c <arm_fir_f32+0x410>
 8007e8a:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 8007e8e:	f100 0620 	add.w	r6, r0, #32
 8007e92:	9405      	str	r4, [sp, #20]
 8007e94:	0164      	lsls	r4, r4, #5
 8007e96:	4420      	add	r0, r4
 8007e98:	f008 0a07 	and.w	sl, r8, #7
 8007e9c:	9607      	str	r6, [sp, #28]
 8007e9e:	9006      	str	r0, [sp, #24]
 8007ea0:	469c      	mov	ip, r3
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4623      	mov	r3, r4
 8007ea6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007eaa:	f8cd 8020 	str.w	r8, [sp, #32]
 8007eae:	1937      	adds	r7, r6, r4
 8007eb0:	f109 0b1c 	add.w	fp, r9, #28
 8007eb4:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eba:	f8cd 9014 	str.w	r9, [sp, #20]
 8007ebe:	f101 0620 	add.w	r6, r1, #32
 8007ec2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007ec6:	9106      	str	r1, [sp, #24]
 8007ec8:	3520      	adds	r5, #32
 8007eca:	f102 0420 	add.w	r4, r2, #32
 8007ece:	4698      	mov	r8, r3
 8007ed0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8007ed4:	f845 3c20 	str.w	r3, [r5, #-32]
 8007ed8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8007edc:	f845 3c1c 	str.w	r3, [r5, #-28]
 8007ee0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8007ee4:	f845 3c18 	str.w	r3, [r5, #-24]
 8007ee8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8007eec:	f845 3c14 	str.w	r3, [r5, #-20]
 8007ef0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8007ef4:	f845 3c10 	str.w	r3, [r5, #-16]
 8007ef8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8007efc:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007f00:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007f04:	f845 3c08 	str.w	r3, [r5, #-8]
 8007f08:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f0c:	f845 3c04 	str.w	r3, [r5, #-4]
 8007f10:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 8007f14:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 8007f18:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 8007f1c:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8007f20:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8007f24:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8007f28:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8007f2c:	eddf 6af5 	vldr	s13, [pc, #980]	; 8008304 <arm_fir_f32+0x4a8>
 8007f30:	465a      	mov	r2, fp
 8007f32:	f1be 0f00 	cmp.w	lr, #0
 8007f36:	f000 81fe 	beq.w	8008336 <arm_fir_f32+0x4da>
 8007f3a:	f10b 0120 	add.w	r1, fp, #32
 8007f3e:	eef0 ba66 	vmov.f32	s23, s13
 8007f42:	eeb0 6a66 	vmov.f32	s12, s13
 8007f46:	eeb0 9a66 	vmov.f32	s18, s13
 8007f4a:	eef0 9a66 	vmov.f32	s19, s13
 8007f4e:	eeb0 aa66 	vmov.f32	s20, s13
 8007f52:	eef0 aa66 	vmov.f32	s21, s13
 8007f56:	eeb0 ba66 	vmov.f32	s22, s13
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	4653      	mov	r3, sl
 8007f5e:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8007f62:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8007f66:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 8007f6a:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 8007f6e:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 8007f72:	ed53 ca04 	vldr	s25, [r3, #-16]
 8007f76:	ed53 2a03 	vldr	s5, [r3, #-12]
 8007f7a:	ed13 4a02 	vldr	s8, [r3, #-8]
 8007f7e:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007f82:	ee67 fa02 	vmul.f32	s31, s14, s4
 8007f86:	ee27 da21 	vmul.f32	s26, s14, s3
 8007f8a:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 8007f8e:	ee27 ca01 	vmul.f32	s24, s14, s2
 8007f92:	ee27 3a20 	vmul.f32	s6, s14, s1
 8007f96:	ee67 3a00 	vmul.f32	s7, s14, s0
 8007f9a:	ee67 5a08 	vmul.f32	s11, s14, s16
 8007f9e:	ee27 fa28 	vmul.f32	s30, s14, s17
 8007fa2:	ee67 7a24 	vmul.f32	s15, s14, s9
 8007fa6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007faa:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007fae:	ee6e faa1 	vmul.f32	s31, s29, s3
 8007fb2:	ee2e da81 	vmul.f32	s26, s29, s2
 8007fb6:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 8007fba:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007fbe:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007fc2:	ee2e caa0 	vmul.f32	s24, s29, s1
 8007fc6:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8007fca:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007fce:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007fd2:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8007fd6:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8007fda:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee24 faae 	vmul.f32	s30, s9, s29
 8007fe6:	ee6e ea82 	vmul.f32	s29, s29, s4
 8007fea:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8007fee:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007ff2:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 8007ff6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007ffa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007ffe:	ee2e da20 	vmul.f32	s26, s28, s1
 8008002:	ee2e ca00 	vmul.f32	s24, s28, s0
 8008006:	ee73 9a29 	vadd.f32	s19, s6, s19
 800800a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800800e:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8008012:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8008016:	ee35 6a86 	vadd.f32	s12, s11, s12
 800801a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800801e:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8008022:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8008026:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800802a:	ee2e ea21 	vmul.f32	s28, s28, s3
 800802e:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8008032:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008036:	ed52 0a04 	vldr	s1, [r2, #-16]
 800803a:	ee2d da80 	vmul.f32	s26, s27, s0
 800803e:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8008042:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008046:	ee73 9a29 	vadd.f32	s19, s6, s19
 800804a:	ee2d ca88 	vmul.f32	s24, s27, s16
 800804e:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8008052:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008056:	ee35 6a86 	vadd.f32	s12, s11, s12
 800805a:	ee64 3aad 	vmul.f32	s7, s9, s27
 800805e:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8008062:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008066:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800806a:	ee21 faad 	vmul.f32	s30, s3, s27
 800806e:	ee6d da81 	vmul.f32	s27, s27, s2
 8008072:	ee6c fa80 	vmul.f32	s31, s25, s0
 8008076:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800807a:	ed12 0a03 	vldr	s0, [r2, #-12]
 800807e:	ee3d da2a 	vadd.f32	s26, s26, s21
 8008082:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008086:	ee6c aa88 	vmul.f32	s21, s25, s16
 800808a:	ee2c caa8 	vmul.f32	s24, s25, s17
 800808e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008092:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008096:	ee24 3aac 	vmul.f32	s6, s9, s25
 800809a:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800809e:	ee35 6a86 	vadd.f32	s12, s11, s12
 80080a2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80080a6:	ee61 5aac 	vmul.f32	s11, s3, s25
 80080aa:	ee21 fa2c 	vmul.f32	s30, s2, s25
 80080ae:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80080b2:	ee6c caa0 	vmul.f32	s25, s25, s1
 80080b6:	ee62 ea88 	vmul.f32	s29, s5, s16
 80080ba:	ee3a da8d 	vadd.f32	s26, s21, s26
 80080be:	ed12 8a02 	vldr	s16, [r2, #-8]
 80080c2:	ee62 aaa8 	vmul.f32	s21, s5, s17
 80080c6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80080ca:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80080ce:	ee73 9a29 	vadd.f32	s19, s6, s19
 80080d2:	ee24 caa2 	vmul.f32	s24, s9, s5
 80080d6:	ee22 3a22 	vmul.f32	s6, s4, s5
 80080da:	ee33 9a89 	vadd.f32	s18, s7, s18
 80080de:	ee35 6a86 	vadd.f32	s12, s11, s12
 80080e2:	ee61 3aa2 	vmul.f32	s7, s3, s5
 80080e6:	ee61 5a22 	vmul.f32	s11, s2, s5
 80080ea:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80080ee:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 80080f2:	ee20 faa2 	vmul.f32	s30, s1, s5
 80080f6:	ee62 2a80 	vmul.f32	s5, s5, s0
 80080fa:	ee7e fa8b 	vadd.f32	s31, s29, s22
 80080fe:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8008102:	ee24 ba28 	vmul.f32	s22, s8, s17
 8008106:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800810a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800810e:	ee24 da84 	vmul.f32	s26, s9, s8
 8008112:	ee22 ca04 	vmul.f32	s24, s4, s8
 8008116:	ee73 9a29 	vadd.f32	s19, s6, s19
 800811a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800811e:	ee21 3a84 	vmul.f32	s6, s3, s8
 8008122:	ee61 3a04 	vmul.f32	s7, s2, s8
 8008126:	ee35 6a86 	vadd.f32	s12, s11, s12
 800812a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800812e:	ee60 5a84 	vmul.f32	s11, s1, s8
 8008132:	ee20 7a04 	vmul.f32	s14, s0, s8
 8008136:	ee64 6a08 	vmul.f32	s13, s8, s16
 800813a:	ed52 8a01 	vldr	s17, [r2, #-4]
 800813e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008142:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008146:	ee35 6a86 	vadd.f32	s12, s11, s12
 800814a:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800814e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008152:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8008156:	ee64 4a85 	vmul.f32	s9, s9, s10
 800815a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800815e:	ee22 4a05 	vmul.f32	s8, s4, s10
 8008162:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008166:	ee61 2a85 	vmul.f32	s5, s3, s10
 800816a:	ee21 3a05 	vmul.f32	s6, s2, s10
 800816e:	ee60 3a85 	vmul.f32	s7, s1, s10
 8008172:	ee60 5a05 	vmul.f32	s11, s0, s10
 8008176:	ee68 ba05 	vmul.f32	s23, s16, s10
 800817a:	ee65 7a28 	vmul.f32	s15, s10, s17
 800817e:	3320      	adds	r3, #32
 8008180:	429f      	cmp	r7, r3
 8008182:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8008186:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800818a:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800818e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008192:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008196:	ee35 6a86 	vadd.f32	s12, s11, s12
 800819a:	ee7b ba87 	vadd.f32	s23, s23, s14
 800819e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80081a2:	f102 0220 	add.w	r2, r2, #32
 80081a6:	f47f aeda 	bne.w	8007f5e <arm_fir_f32+0x102>
 80081aa:	eb0b 0208 	add.w	r2, fp, r8
 80081ae:	46cb      	mov	fp, r9
 80081b0:	b3a0      	cbz	r0, 800821c <arm_fir_f32+0x3c0>
 80081b2:	4603      	mov	r3, r0
 80081b4:	ecfb 7a01 	vldmia	fp!, {s15}
 80081b8:	ecf2 5a01 	vldmia	r2!, {s11}
 80081bc:	ee27 2a82 	vmul.f32	s4, s15, s4
 80081c0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 80081c4:	ee27 3a81 	vmul.f32	s6, s15, s2
 80081c8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 80081cc:	ee27 4a80 	vmul.f32	s8, s15, s0
 80081d0:	ee67 4a88 	vmul.f32	s9, s15, s16
 80081d4:	ee27 5aa8 	vmul.f32	s10, s15, s17
 80081d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80081dc:	3b01      	subs	r3, #1
 80081de:	ee3b ba02 	vadd.f32	s22, s22, s4
 80081e2:	ee7a aaa2 	vadd.f32	s21, s21, s5
 80081e6:	eeb0 2a61 	vmov.f32	s4, s3
 80081ea:	ee3a aa03 	vadd.f32	s20, s20, s6
 80081ee:	eef0 1a41 	vmov.f32	s3, s2
 80081f2:	ee79 9aa3 	vadd.f32	s19, s19, s7
 80081f6:	eeb0 1a60 	vmov.f32	s2, s1
 80081fa:	ee39 9a04 	vadd.f32	s18, s18, s8
 80081fe:	eef0 0a40 	vmov.f32	s1, s0
 8008202:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008206:	eeb0 0a48 	vmov.f32	s0, s16
 800820a:	ee7b ba85 	vadd.f32	s23, s23, s10
 800820e:	eeb0 8a68 	vmov.f32	s16, s17
 8008212:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008216:	eef0 8a65 	vmov.f32	s17, s11
 800821a:	d1cb      	bne.n	80081b4 <arm_fir_f32+0x358>
 800821c:	f1bc 0c01 	subs.w	ip, ip, #1
 8008220:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 8008224:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 8008228:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 800822c:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 8008230:	ed04 9a04 	vstr	s18, [r4, #-16]
 8008234:	ed04 6a03 	vstr	s12, [r4, #-12]
 8008238:	ed44 ba02 	vstr	s23, [r4, #-8]
 800823c:	ed44 6a01 	vstr	s13, [r4, #-4]
 8008240:	f106 0620 	add.w	r6, r6, #32
 8008244:	f105 0520 	add.w	r5, r5, #32
 8008248:	f104 0420 	add.w	r4, r4, #32
 800824c:	468b      	mov	fp, r1
 800824e:	f47f ae3f 	bne.w	8007ed0 <arm_fir_f32+0x74>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	9800      	ldr	r0, [sp, #0]
 8008256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800825c:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8008260:	015b      	lsls	r3, r3, #5
 8008262:	4418      	add	r0, r3
 8008264:	4419      	add	r1, r3
 8008266:	441a      	add	r2, r3
 8008268:	4499      	add	r9, r3
 800826a:	9000      	str	r0, [sp, #0]
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	f013 0707 	ands.w	r7, r3, #7
 8008272:	d020      	beq.n	80082b6 <arm_fir_f32+0x45a>
 8008274:	00bf      	lsls	r7, r7, #2
 8008276:	9e00      	ldr	r6, [sp, #0]
 8008278:	f8dd e008 	ldr.w	lr, [sp, #8]
 800827c:	eb01 0c07 	add.w	ip, r1, r7
 8008280:	464d      	mov	r5, r9
 8008282:	f851 3b04 	ldr.w	r3, [r1], #4
 8008286:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008304 <arm_fir_f32+0x4a8>
 800828a:	f846 3b04 	str.w	r3, [r6], #4
 800828e:	4674      	mov	r4, lr
 8008290:	4643      	mov	r3, r8
 8008292:	4628      	mov	r0, r5
 8008294:	ecf0 7a01 	vldmia	r0!, {s15}
 8008298:	ecf4 6a01 	vldmia	r4!, {s13}
 800829c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082a0:	3b01      	subs	r3, #1
 80082a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082a6:	d1f5      	bne.n	8008294 <arm_fir_f32+0x438>
 80082a8:	4561      	cmp	r1, ip
 80082aa:	eca2 7a01 	vstmia	r2!, {s14}
 80082ae:	f105 0504 	add.w	r5, r5, #4
 80082b2:	d1e6      	bne.n	8008282 <arm_fir_f32+0x426>
 80082b4:	44b9      	add	r9, r7
 80082b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	ea5f 0498 	movs.w	r4, r8, lsr #2
 80082c0:	685d      	ldr	r5, [r3, #4]
 80082c2:	d021      	beq.n	8008308 <arm_fir_f32+0x4ac>
 80082c4:	f109 0210 	add.w	r2, r9, #16
 80082c8:	f105 0310 	add.w	r3, r5, #16
 80082cc:	4621      	mov	r1, r4
 80082ce:	f852 0c10 	ldr.w	r0, [r2, #-16]
 80082d2:	f843 0c10 	str.w	r0, [r3, #-16]
 80082d6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80082da:	f843 0c0c 	str.w	r0, [r3, #-12]
 80082de:	f852 0c08 	ldr.w	r0, [r2, #-8]
 80082e2:	f843 0c08 	str.w	r0, [r3, #-8]
 80082e6:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80082ea:	f843 0c04 	str.w	r0, [r3, #-4]
 80082ee:	3901      	subs	r1, #1
 80082f0:	f102 0210 	add.w	r2, r2, #16
 80082f4:	f103 0310 	add.w	r3, r3, #16
 80082f8:	d1e9      	bne.n	80082ce <arm_fir_f32+0x472>
 80082fa:	0124      	lsls	r4, r4, #4
 80082fc:	44a1      	add	r9, r4
 80082fe:	4425      	add	r5, r4
 8008300:	e002      	b.n	8008308 <arm_fir_f32+0x4ac>
 8008302:	bf00      	nop
 8008304:	00000000 	.word	0x00000000
 8008308:	f018 0803 	ands.w	r8, r8, #3
 800830c:	d00e      	beq.n	800832c <arm_fir_f32+0x4d0>
 800830e:	f8d9 3000 	ldr.w	r3, [r9]
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f1b8 0801 	subs.w	r8, r8, #1
 8008318:	d008      	beq.n	800832c <arm_fir_f32+0x4d0>
 800831a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800831e:	606b      	str	r3, [r5, #4]
 8008320:	f1b8 0f01 	cmp.w	r8, #1
 8008324:	bf1c      	itt	ne
 8008326:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800832a:	60ab      	strne	r3, [r5, #8]
 800832c:	b00b      	add	sp, #44	; 0x2c
 800832e:	ecbd 8b10 	vpop	{d8-d15}
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008336:	eef0 ba66 	vmov.f32	s23, s13
 800833a:	eeb0 6a66 	vmov.f32	s12, s13
 800833e:	eeb0 9a66 	vmov.f32	s18, s13
 8008342:	eef0 9a66 	vmov.f32	s19, s13
 8008346:	eeb0 aa66 	vmov.f32	s20, s13
 800834a:	eef0 aa66 	vmov.f32	s21, s13
 800834e:	eeb0 ba66 	vmov.f32	s22, s13
 8008352:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008356:	f102 0120 	add.w	r1, r2, #32
 800835a:	e729      	b.n	80081b0 <arm_fir_f32+0x354>

0800835c <arm_cmplx_mag_f32>:
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	ed2d 8b02 	vpush	{d8}
 8008364:	0897      	lsrs	r7, r2, #2
 8008366:	b084      	sub	sp, #16
 8008368:	d077      	beq.n	800845a <arm_cmplx_mag_f32+0xfe>
 800836a:	f04f 0800 	mov.w	r8, #0
 800836e:	f100 0420 	add.w	r4, r0, #32
 8008372:	f101 0510 	add.w	r5, r1, #16
 8008376:	463e      	mov	r6, r7
 8008378:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800837c:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8008380:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008388:	ee30 0a27 	vadd.f32	s0, s0, s15
 800838c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	f2c0 80c5 	blt.w	8008522 <arm_cmplx_mag_f32+0x1c6>
 8008398:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80083a4:	f100 80cb 	bmi.w	800853e <arm_cmplx_mag_f32+0x1e2>
 80083a8:	ed05 8a04 	vstr	s16, [r5, #-16]
 80083ac:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80083b0:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80083b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	f2c0 80a8 	blt.w	800851c <arm_cmplx_mag_f32+0x1c0>
 80083cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80083d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80083d8:	f100 80a8 	bmi.w	800852c <arm_cmplx_mag_f32+0x1d0>
 80083dc:	ed05 8a03 	vstr	s16, [r5, #-12]
 80083e0:	ed14 0a04 	vldr	s0, [r4, #-16]
 80083e4:	ed54 7a03 	vldr	s15, [r4, #-12]
 80083e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80083f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fc:	f2c0 808b 	blt.w	8008516 <arm_cmplx_mag_f32+0x1ba>
 8008400:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800840c:	f100 80a9 	bmi.w	8008562 <arm_cmplx_mag_f32+0x206>
 8008410:	ed05 8a02 	vstr	s16, [r5, #-8]
 8008414:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008418:	ed54 7a01 	vldr	s15, [r4, #-4]
 800841c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008420:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008424:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008428:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008430:	db6e      	blt.n	8008510 <arm_cmplx_mag_f32+0x1b4>
 8008432:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800843e:	f100 8087 	bmi.w	8008550 <arm_cmplx_mag_f32+0x1f4>
 8008442:	ed05 8a01 	vstr	s16, [r5, #-4]
 8008446:	3e01      	subs	r6, #1
 8008448:	f104 0420 	add.w	r4, r4, #32
 800844c:	f105 0510 	add.w	r5, r5, #16
 8008450:	d192      	bne.n	8008378 <arm_cmplx_mag_f32+0x1c>
 8008452:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8008456:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800845a:	f012 0203 	ands.w	r2, r2, #3
 800845e:	d052      	beq.n	8008506 <arm_cmplx_mag_f32+0x1aa>
 8008460:	ed90 0a00 	vldr	s0, [r0]
 8008464:	edd0 7a01 	vldr	s15, [r0, #4]
 8008468:	ee20 0a00 	vmul.f32	s0, s0, s0
 800846c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008470:	2300      	movs	r3, #0
 8008472:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008476:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800847a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800847e:	bfb8      	it	lt
 8008480:	600b      	strlt	r3, [r1, #0]
 8008482:	db08      	blt.n	8008496 <arm_cmplx_mag_f32+0x13a>
 8008484:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008490:	d479      	bmi.n	8008586 <arm_cmplx_mag_f32+0x22a>
 8008492:	ed81 8a00 	vstr	s16, [r1]
 8008496:	3a01      	subs	r2, #1
 8008498:	d035      	beq.n	8008506 <arm_cmplx_mag_f32+0x1aa>
 800849a:	ed90 0a02 	vldr	s0, [r0, #8]
 800849e:	edd0 7a03 	vldr	s15, [r0, #12]
 80084a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80084a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80084aa:	2300      	movs	r3, #0
 80084ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 80084b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b8:	bfb8      	it	lt
 80084ba:	604b      	strlt	r3, [r1, #4]
 80084bc:	db08      	blt.n	80084d0 <arm_cmplx_mag_f32+0x174>
 80084be:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80084c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80084ca:	d453      	bmi.n	8008574 <arm_cmplx_mag_f32+0x218>
 80084cc:	ed81 8a01 	vstr	s16, [r1, #4]
 80084d0:	2a01      	cmp	r2, #1
 80084d2:	d018      	beq.n	8008506 <arm_cmplx_mag_f32+0x1aa>
 80084d4:	ed90 0a04 	vldr	s0, [r0, #16]
 80084d8:	edd0 7a05 	vldr	s15, [r0, #20]
 80084dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80084e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80084e4:	2300      	movs	r3, #0
 80084e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f2:	db19      	blt.n	8008528 <arm_cmplx_mag_f32+0x1cc>
 80084f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80084f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008500:	d44a      	bmi.n	8008598 <arm_cmplx_mag_f32+0x23c>
 8008502:	ed81 8a02 	vstr	s16, [r1, #8]
 8008506:	b004      	add	sp, #16
 8008508:	ecbd 8b02 	vpop	{d8}
 800850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008510:	f845 8c04 	str.w	r8, [r5, #-4]
 8008514:	e797      	b.n	8008446 <arm_cmplx_mag_f32+0xea>
 8008516:	f845 8c08 	str.w	r8, [r5, #-8]
 800851a:	e77b      	b.n	8008414 <arm_cmplx_mag_f32+0xb8>
 800851c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8008520:	e75e      	b.n	80083e0 <arm_cmplx_mag_f32+0x84>
 8008522:	f845 8c10 	str.w	r8, [r5, #-16]
 8008526:	e741      	b.n	80083ac <arm_cmplx_mag_f32+0x50>
 8008528:	608b      	str	r3, [r1, #8]
 800852a:	e7ec      	b.n	8008506 <arm_cmplx_mag_f32+0x1aa>
 800852c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008530:	9001      	str	r0, [sp, #4]
 8008532:	f003 faeb 	bl	800bb0c <sqrtf>
 8008536:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800853a:	9801      	ldr	r0, [sp, #4]
 800853c:	e74e      	b.n	80083dc <arm_cmplx_mag_f32+0x80>
 800853e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008542:	9001      	str	r0, [sp, #4]
 8008544:	f003 fae2 	bl	800bb0c <sqrtf>
 8008548:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800854c:	9801      	ldr	r0, [sp, #4]
 800854e:	e72b      	b.n	80083a8 <arm_cmplx_mag_f32+0x4c>
 8008550:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008554:	9001      	str	r0, [sp, #4]
 8008556:	f003 fad9 	bl	800bb0c <sqrtf>
 800855a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800855e:	9801      	ldr	r0, [sp, #4]
 8008560:	e76f      	b.n	8008442 <arm_cmplx_mag_f32+0xe6>
 8008562:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008566:	9001      	str	r0, [sp, #4]
 8008568:	f003 fad0 	bl	800bb0c <sqrtf>
 800856c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008570:	9801      	ldr	r0, [sp, #4]
 8008572:	e74d      	b.n	8008410 <arm_cmplx_mag_f32+0xb4>
 8008574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	f003 fac7 	bl	800bb0c <sqrtf>
 800857e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8008582:	9903      	ldr	r1, [sp, #12]
 8008584:	e7a2      	b.n	80084cc <arm_cmplx_mag_f32+0x170>
 8008586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858a:	9201      	str	r2, [sp, #4]
 800858c:	f003 fabe 	bl	800bb0c <sqrtf>
 8008590:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8008594:	9903      	ldr	r1, [sp, #12]
 8008596:	e77c      	b.n	8008492 <arm_cmplx_mag_f32+0x136>
 8008598:	9101      	str	r1, [sp, #4]
 800859a:	f003 fab7 	bl	800bb0c <sqrtf>
 800859e:	9901      	ldr	r1, [sp, #4]
 80085a0:	e7af      	b.n	8008502 <arm_cmplx_mag_f32+0x1a6>
 80085a2:	bf00      	nop

080085a4 <arm_cos_f32>:
 80085a4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800862c <arm_cos_f32+0x88>
 80085a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085ac:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80085b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80085b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80085b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80085c0:	d504      	bpl.n	80085cc <arm_cos_f32+0x28>
 80085c2:	ee17 3a90 	vmov	r3, s15
 80085c6:	3b01      	subs	r3, #1
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085d0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008630 <arm_cos_f32+0x8c>
 80085d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80085d8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80085dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80085e0:	ee17 3a90 	vmov	r3, s15
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ea:	d21a      	bcs.n	8008622 <arm_cos_f32+0x7e>
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f4:	1c59      	adds	r1, r3, #1
 80085f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80085fa:	4a0e      	ldr	r2, [pc, #56]	; (8008634 <arm_cos_f32+0x90>)
 80085fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008604:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008608:	ed93 7a00 	vldr	s14, [r3]
 800860c:	edd2 6a00 	vldr	s13, [r2]
 8008610:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008614:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800861c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008620:	4770      	bx	lr
 8008622:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008626:	2101      	movs	r1, #1
 8008628:	2300      	movs	r3, #0
 800862a:	e7e6      	b.n	80085fa <arm_cos_f32+0x56>
 800862c:	3e22f983 	.word	0x3e22f983
 8008630:	44000000 	.word	0x44000000
 8008634:	08010408 	.word	0x08010408

08008638 <arm_scale_f32>:
 8008638:	b470      	push	{r4, r5, r6}
 800863a:	0896      	lsrs	r6, r2, #2
 800863c:	d025      	beq.n	800868a <arm_scale_f32+0x52>
 800863e:	f100 0410 	add.w	r4, r0, #16
 8008642:	f101 0310 	add.w	r3, r1, #16
 8008646:	4635      	mov	r5, r6
 8008648:	ed54 7a04 	vldr	s15, [r4, #-16]
 800864c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008650:	3d01      	subs	r5, #1
 8008652:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008656:	ed54 7a03 	vldr	s15, [r4, #-12]
 800865a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800865e:	f104 0410 	add.w	r4, r4, #16
 8008662:	ed43 7a03 	vstr	s15, [r3, #-12]
 8008666:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800866a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800866e:	f103 0310 	add.w	r3, r3, #16
 8008672:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008676:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800867a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800867e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008682:	d1e1      	bne.n	8008648 <arm_scale_f32+0x10>
 8008684:	0136      	lsls	r6, r6, #4
 8008686:	4430      	add	r0, r6
 8008688:	4431      	add	r1, r6
 800868a:	f012 0203 	ands.w	r2, r2, #3
 800868e:	d015      	beq.n	80086bc <arm_scale_f32+0x84>
 8008690:	edd0 7a00 	vldr	s15, [r0]
 8008694:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008698:	3a01      	subs	r2, #1
 800869a:	edc1 7a00 	vstr	s15, [r1]
 800869e:	d00d      	beq.n	80086bc <arm_scale_f32+0x84>
 80086a0:	edd0 7a01 	vldr	s15, [r0, #4]
 80086a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80086a8:	2a01      	cmp	r2, #1
 80086aa:	edc1 7a01 	vstr	s15, [r1, #4]
 80086ae:	d005      	beq.n	80086bc <arm_scale_f32+0x84>
 80086b0:	edd0 7a02 	vldr	s15, [r0, #8]
 80086b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80086b8:	ed81 0a02 	vstr	s0, [r1, #8]
 80086bc:	bc70      	pop	{r4, r5, r6}
 80086be:	4770      	bx	lr

080086c0 <arm_offset_f32>:
 80086c0:	b470      	push	{r4, r5, r6}
 80086c2:	0896      	lsrs	r6, r2, #2
 80086c4:	d025      	beq.n	8008712 <arm_offset_f32+0x52>
 80086c6:	f100 0410 	add.w	r4, r0, #16
 80086ca:	f101 0310 	add.w	r3, r1, #16
 80086ce:	4635      	mov	r5, r6
 80086d0:	ed54 7a04 	vldr	s15, [r4, #-16]
 80086d4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086d8:	3d01      	subs	r5, #1
 80086da:	ed43 7a04 	vstr	s15, [r3, #-16]
 80086de:	ed54 7a03 	vldr	s15, [r4, #-12]
 80086e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086e6:	f104 0410 	add.w	r4, r4, #16
 80086ea:	ed43 7a03 	vstr	s15, [r3, #-12]
 80086ee:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80086f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086f6:	f103 0310 	add.w	r3, r3, #16
 80086fa:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80086fe:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8008702:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008706:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800870a:	d1e1      	bne.n	80086d0 <arm_offset_f32+0x10>
 800870c:	0136      	lsls	r6, r6, #4
 800870e:	4430      	add	r0, r6
 8008710:	4431      	add	r1, r6
 8008712:	f012 0203 	ands.w	r2, r2, #3
 8008716:	d015      	beq.n	8008744 <arm_offset_f32+0x84>
 8008718:	edd0 7a00 	vldr	s15, [r0]
 800871c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008720:	3a01      	subs	r2, #1
 8008722:	edc1 7a00 	vstr	s15, [r1]
 8008726:	d00d      	beq.n	8008744 <arm_offset_f32+0x84>
 8008728:	edd0 7a01 	vldr	s15, [r0, #4]
 800872c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008730:	2a01      	cmp	r2, #1
 8008732:	edc1 7a01 	vstr	s15, [r1, #4]
 8008736:	d005      	beq.n	8008744 <arm_offset_f32+0x84>
 8008738:	edd0 7a02 	vldr	s15, [r0, #8]
 800873c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008740:	ed81 0a02 	vstr	s0, [r1, #8]
 8008744:	bc70      	pop	{r4, r5, r6}
 8008746:	4770      	bx	lr

08008748 <arm_mult_f32>:
 8008748:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800874c:	b4f0      	push	{r4, r5, r6, r7}
 800874e:	d033      	beq.n	80087b8 <arm_mult_f32+0x70>
 8008750:	f100 0610 	add.w	r6, r0, #16
 8008754:	f101 0510 	add.w	r5, r1, #16
 8008758:	f102 0410 	add.w	r4, r2, #16
 800875c:	4667      	mov	r7, ip
 800875e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8008762:	ed56 7a04 	vldr	s15, [r6, #-16]
 8008766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800876a:	3f01      	subs	r7, #1
 800876c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8008770:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008774:	ed56 7a03 	vldr	s15, [r6, #-12]
 8008778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800877c:	f106 0610 	add.w	r6, r6, #16
 8008780:	ed44 7a03 	vstr	s15, [r4, #-12]
 8008784:	ed15 7a02 	vldr	s14, [r5, #-8]
 8008788:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800878c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008790:	f105 0510 	add.w	r5, r5, #16
 8008794:	ed44 7a02 	vstr	s15, [r4, #-8]
 8008798:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800879c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80087a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087a4:	f104 0410 	add.w	r4, r4, #16
 80087a8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80087ac:	d1d7      	bne.n	800875e <arm_mult_f32+0x16>
 80087ae:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80087b2:	4420      	add	r0, r4
 80087b4:	4421      	add	r1, r4
 80087b6:	4422      	add	r2, r4
 80087b8:	f013 0303 	ands.w	r3, r3, #3
 80087bc:	d01b      	beq.n	80087f6 <arm_mult_f32+0xae>
 80087be:	edd1 7a00 	vldr	s15, [r1]
 80087c2:	ed90 7a00 	vldr	s14, [r0]
 80087c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087ca:	3b01      	subs	r3, #1
 80087cc:	edc2 7a00 	vstr	s15, [r2]
 80087d0:	d011      	beq.n	80087f6 <arm_mult_f32+0xae>
 80087d2:	edd0 7a01 	vldr	s15, [r0, #4]
 80087d6:	ed91 7a01 	vldr	s14, [r1, #4]
 80087da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087de:	2b01      	cmp	r3, #1
 80087e0:	edc2 7a01 	vstr	s15, [r2, #4]
 80087e4:	d007      	beq.n	80087f6 <arm_mult_f32+0xae>
 80087e6:	edd0 7a02 	vldr	s15, [r0, #8]
 80087ea:	ed91 7a02 	vldr	s14, [r1, #8]
 80087ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087f2:	edc2 7a02 	vstr	s15, [r2, #8]
 80087f6:	bcf0      	pop	{r4, r5, r6, r7}
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop

080087fc <arm_dot_prod_f32>:
 80087fc:	b4f0      	push	{r4, r5, r6, r7}
 80087fe:	0897      	lsrs	r7, r2, #2
 8008800:	eddf 5a29 	vldr	s11, [pc, #164]	; 80088a8 <arm_dot_prod_f32+0xac>
 8008804:	d02d      	beq.n	8008862 <arm_dot_prod_f32+0x66>
 8008806:	f100 0510 	add.w	r5, r0, #16
 800880a:	f101 0410 	add.w	r4, r1, #16
 800880e:	463e      	mov	r6, r7
 8008810:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008814:	ed54 3a04 	vldr	s7, [r4, #-16]
 8008818:	ed15 7a03 	vldr	s14, [r5, #-12]
 800881c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008820:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008824:	ed54 4a02 	vldr	s9, [r4, #-8]
 8008828:	ed15 6a01 	vldr	s12, [r5, #-4]
 800882c:	ed14 5a01 	vldr	s10, [r4, #-4]
 8008830:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008834:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008838:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800883c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008840:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008844:	ee66 6a05 	vmul.f32	s13, s12, s10
 8008848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800884c:	3e01      	subs	r6, #1
 800884e:	f105 0510 	add.w	r5, r5, #16
 8008852:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8008856:	f104 0410 	add.w	r4, r4, #16
 800885a:	d1d9      	bne.n	8008810 <arm_dot_prod_f32+0x14>
 800885c:	013f      	lsls	r7, r7, #4
 800885e:	4438      	add	r0, r7
 8008860:	4439      	add	r1, r7
 8008862:	f012 0203 	ands.w	r2, r2, #3
 8008866:	d01b      	beq.n	80088a0 <arm_dot_prod_f32+0xa4>
 8008868:	edd1 7a00 	vldr	s15, [r1]
 800886c:	ed90 7a00 	vldr	s14, [r0]
 8008870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008874:	3a01      	subs	r2, #1
 8008876:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800887a:	d011      	beq.n	80088a0 <arm_dot_prod_f32+0xa4>
 800887c:	edd1 7a01 	vldr	s15, [r1, #4]
 8008880:	ed90 7a01 	vldr	s14, [r0, #4]
 8008884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008888:	2a01      	cmp	r2, #1
 800888a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800888e:	d007      	beq.n	80088a0 <arm_dot_prod_f32+0xa4>
 8008890:	edd0 7a02 	vldr	s15, [r0, #8]
 8008894:	ed91 7a02 	vldr	s14, [r1, #8]
 8008898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800889c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80088a0:	edc3 5a00 	vstr	s11, [r3]
 80088a4:	bcf0      	pop	{r4, r5, r6, r7}
 80088a6:	4770      	bx	lr
 80088a8:	00000000 	.word	0x00000000

080088ac <arm_radix8_butterfly_f32>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	ed2d 8b10 	vpush	{d8-d15}
 80088b4:	b095      	sub	sp, #84	; 0x54
 80088b6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80088ba:	4603      	mov	r3, r0
 80088bc:	3304      	adds	r3, #4
 80088be:	ed9f bab9 	vldr	s22, [pc, #740]	; 8008ba4 <arm_radix8_butterfly_f32+0x2f8>
 80088c2:	9012      	str	r0, [sp, #72]	; 0x48
 80088c4:	468b      	mov	fp, r1
 80088c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80088c8:	4689      	mov	r9, r1
 80088ca:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80088ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088d0:	960f      	str	r6, [sp, #60]	; 0x3c
 80088d2:	ea4f 1846 	mov.w	r8, r6, lsl #5
 80088d6:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80088da:	eb03 0508 	add.w	r5, r3, r8
 80088de:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80088e2:	eb05 040e 	add.w	r4, r5, lr
 80088e6:	0137      	lsls	r7, r6, #4
 80088e8:	eba6 030a 	sub.w	r3, r6, sl
 80088ec:	eb04 000e 	add.w	r0, r4, lr
 80088f0:	44b2      	add	sl, r6
 80088f2:	1d3a      	adds	r2, r7, #4
 80088f4:	9702      	str	r7, [sp, #8]
 80088f6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80088fa:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80088fe:	ebae 0c06 	sub.w	ip, lr, r6
 8008902:	9703      	str	r7, [sp, #12]
 8008904:	eb03 0708 	add.w	r7, r3, r8
 8008908:	9701      	str	r7, [sp, #4]
 800890a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800890e:	9706      	str	r7, [sp, #24]
 8008910:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008912:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8008916:	f10e 0104 	add.w	r1, lr, #4
 800891a:	4439      	add	r1, r7
 800891c:	443a      	add	r2, r7
 800891e:	0137      	lsls	r7, r6, #4
 8008920:	00f6      	lsls	r6, r6, #3
 8008922:	9704      	str	r7, [sp, #16]
 8008924:	9605      	str	r6, [sp, #20]
 8008926:	9f01      	ldr	r7, [sp, #4]
 8008928:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800892a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800892e:	f04f 0c00 	mov.w	ip, #0
 8008932:	edd4 6a00 	vldr	s13, [r4]
 8008936:	edd7 1a00 	vldr	s3, [r7]
 800893a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800893e:	edd5 5a00 	vldr	s11, [r5]
 8008942:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008946:	ed90 6a00 	vldr	s12, [r0]
 800894a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800894e:	ed93 3a00 	vldr	s6, [r3]
 8008952:	ee39 0a86 	vadd.f32	s0, s19, s12
 8008956:	ee33 2a21 	vadd.f32	s4, s6, s3
 800895a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800895e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8008962:	ee35 7a02 	vadd.f32	s14, s10, s4
 8008966:	ee34 4a80 	vadd.f32	s8, s9, s0
 800896a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800896e:	ee74 6a07 	vadd.f32	s13, s8, s14
 8008972:	ee34 4a47 	vsub.f32	s8, s8, s14
 8008976:	ed46 6a01 	vstr	s13, [r6, #-4]
 800897a:	ed85 4a00 	vstr	s8, [r5]
 800897e:	edd1 6a00 	vldr	s13, [r1]
 8008982:	ed94 9a01 	vldr	s18, [r4, #4]
 8008986:	edd3 2a01 	vldr	s5, [r3, #4]
 800898a:	edd7 8a01 	vldr	s17, [r7, #4]
 800898e:	edd6 0a00 	vldr	s1, [r6]
 8008992:	edd5 3a01 	vldr	s7, [r5, #4]
 8008996:	ed90 8a01 	vldr	s16, [r0, #4]
 800899a:	ed92 7a00 	vldr	s14, [r2]
 800899e:	ee33 3a61 	vsub.f32	s6, s6, s3
 80089a2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80089a6:	ee72 aae8 	vsub.f32	s21, s5, s17
 80089aa:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80089ae:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80089b2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80089b6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80089ba:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80089be:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80089c2:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80089c6:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80089ca:	ee77 0a08 	vadd.f32	s1, s14, s16
 80089ce:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80089d2:	ee37 7a48 	vsub.f32	s14, s14, s16
 80089d6:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80089da:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80089de:	ee76 6a89 	vadd.f32	s13, s13, s18
 80089e2:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80089e6:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80089ea:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80089ee:	ee35 5a42 	vsub.f32	s10, s10, s4
 80089f2:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80089f6:	ee33 2a20 	vadd.f32	s4, s6, s1
 80089fa:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80089fe:	ee33 3a60 	vsub.f32	s6, s6, s1
 8008a02:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8008a06:	ee77 0a01 	vadd.f32	s1, s14, s2
 8008a0a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8008a0e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8008a12:	ee73 1a84 	vadd.f32	s3, s7, s8
 8008a16:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008a1a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8008a1e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008a22:	ee32 8a00 	vadd.f32	s16, s4, s0
 8008a26:	ee33 1a45 	vsub.f32	s2, s6, s10
 8008a2a:	ee32 2a40 	vsub.f32	s4, s4, s0
 8008a2e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008a32:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8008a36:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8008a3a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008a3e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8008a42:	ee75 4a87 	vadd.f32	s9, s11, s14
 8008a46:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8008a4a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008a4e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008a52:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8008a56:	44dc      	add	ip, fp
 8008a58:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008a5c:	45e1      	cmp	r9, ip
 8008a5e:	ed86 8a00 	vstr	s16, [r6]
 8008a62:	ed85 2a01 	vstr	s4, [r5, #4]
 8008a66:	4456      	add	r6, sl
 8008a68:	ed02 0a01 	vstr	s0, [r2, #-4]
 8008a6c:	4455      	add	r5, sl
 8008a6e:	edc0 6a00 	vstr	s13, [r0]
 8008a72:	ed82 1a00 	vstr	s2, [r2]
 8008a76:	ed80 5a01 	vstr	s10, [r0, #4]
 8008a7a:	4452      	add	r2, sl
 8008a7c:	ed01 3a01 	vstr	s6, [r1, #-4]
 8008a80:	4450      	add	r0, sl
 8008a82:	edc7 2a00 	vstr	s5, [r7]
 8008a86:	edc4 4a00 	vstr	s9, [r4]
 8008a8a:	ed83 7a00 	vstr	s14, [r3]
 8008a8e:	edc1 5a00 	vstr	s11, [r1]
 8008a92:	edc7 3a01 	vstr	s7, [r7, #4]
 8008a96:	4451      	add	r1, sl
 8008a98:	ed84 6a01 	vstr	s12, [r4, #4]
 8008a9c:	4457      	add	r7, sl
 8008a9e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008aa2:	4454      	add	r4, sl
 8008aa4:	4453      	add	r3, sl
 8008aa6:	f63f af44 	bhi.w	8008932 <arm_radix8_butterfly_f32+0x86>
 8008aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aac:	2b07      	cmp	r3, #7
 8008aae:	f240 81b7 	bls.w	8008e20 <arm_radix8_butterfly_f32+0x574>
 8008ab2:	9b06      	ldr	r3, [sp, #24]
 8008ab4:	9903      	ldr	r1, [sp, #12]
 8008ab6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ab8:	9e05      	ldr	r6, [sp, #20]
 8008aba:	9a04      	ldr	r2, [sp, #16]
 8008abc:	f103 0c08 	add.w	ip, r3, #8
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	3108      	adds	r1, #8
 8008ac4:	f108 0808 	add.w	r8, r8, #8
 8008ac8:	1841      	adds	r1, r0, r1
 8008aca:	3608      	adds	r6, #8
 8008acc:	330c      	adds	r3, #12
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4444      	add	r4, r8
 8008ad2:	18c3      	adds	r3, r0, r3
 8008ad4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ad6:	1981      	adds	r1, r0, r6
 8008ad8:	f10e 0e08 	add.w	lr, lr, #8
 8008adc:	3208      	adds	r2, #8
 8008ade:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ae0:	9107      	str	r1, [sp, #28]
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	9304      	str	r3, [sp, #16]
 8008ae8:	f100 030c 	add.w	r3, r0, #12
 8008aec:	4474      	add	r4, lr
 8008aee:	f04f 0801 	mov.w	r8, #1
 8008af2:	1882      	adds	r2, r0, r2
 8008af4:	4461      	add	r1, ip
 8008af6:	9305      	str	r3, [sp, #20]
 8008af8:	464b      	mov	r3, r9
 8008afa:	940a      	str	r4, [sp, #40]	; 0x28
 8008afc:	46c1      	mov	r9, r8
 8008afe:	9208      	str	r2, [sp, #32]
 8008b00:	46d8      	mov	r8, fp
 8008b02:	9106      	str	r1, [sp, #24]
 8008b04:	f04f 0e00 	mov.w	lr, #0
 8008b08:	469b      	mov	fp, r3
 8008b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b0e:	449e      	add	lr, r3
 8008b10:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8008b14:	441a      	add	r2, r3
 8008b16:	920e      	str	r2, [sp, #56]	; 0x38
 8008b18:	441a      	add	r2, r3
 8008b1a:	18d4      	adds	r4, r2, r3
 8008b1c:	18e5      	adds	r5, r4, r3
 8008b1e:	18ee      	adds	r6, r5, r3
 8008b20:	18f7      	adds	r7, r6, r3
 8008b22:	eb07 0c03 	add.w	ip, r7, r3
 8008b26:	920d      	str	r2, [sp, #52]	; 0x34
 8008b28:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8008b2c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8008b30:	910c      	str	r1, [sp, #48]	; 0x30
 8008b32:	4419      	add	r1, r3
 8008b34:	9103      	str	r1, [sp, #12]
 8008b36:	4419      	add	r1, r3
 8008b38:	18ca      	adds	r2, r1, r3
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	18d0      	adds	r0, r2, r3
 8008b40:	ed92 ea01 	vldr	s28, [r2, #4]
 8008b44:	9a02      	ldr	r2, [sp, #8]
 8008b46:	edd4 7a00 	vldr	s15, [r4]
 8008b4a:	edd2 da01 	vldr	s27, [r2, #4]
 8008b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b50:	ed91 da01 	vldr	s26, [r1, #4]
 8008b54:	ed92 ca01 	vldr	s24, [r2, #4]
 8008b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b5a:	9903      	ldr	r1, [sp, #12]
 8008b5c:	edcd 7a03 	vstr	s15, [sp, #12]
 8008b60:	edd2 7a00 	vldr	s15, [r2]
 8008b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b66:	edcd 7a02 	vstr	s15, [sp, #8]
 8008b6a:	edd2 7a00 	vldr	s15, [r2]
 8008b6e:	edd0 ea01 	vldr	s29, [r0, #4]
 8008b72:	edd1 ca01 	vldr	s25, [r1, #4]
 8008b76:	eddc ba00 	vldr	s23, [ip]
 8008b7a:	edd7 aa00 	vldr	s21, [r7]
 8008b7e:	ed96 aa00 	vldr	s20, [r6]
 8008b82:	edd5 9a00 	vldr	s19, [r5]
 8008b86:	edcd 7a01 	vstr	s15, [sp, #4]
 8008b8a:	4403      	add	r3, r0
 8008b8c:	ed93 fa01 	vldr	s30, [r3, #4]
 8008b90:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8008b94:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8008b98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ba0:	46cc      	mov	ip, r9
 8008ba2:	e001      	b.n	8008ba8 <arm_radix8_butterfly_f32+0x2fc>
 8008ba4:	3f3504f3 	.word	0x3f3504f3
 8008ba8:	ed91 6a00 	vldr	s12, [r1]
 8008bac:	ed93 5a00 	vldr	s10, [r3]
 8008bb0:	edd0 fa00 	vldr	s31, [r0]
 8008bb4:	edd4 7a00 	vldr	s15, [r4]
 8008bb8:	ed95 7a00 	vldr	s14, [r5]
 8008bbc:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008bc0:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008bc4:	ed92 2a00 	vldr	s4, [r2]
 8008bc8:	ed96 0a00 	vldr	s0, [r6]
 8008bcc:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008bd0:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008bd4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8008bd8:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008bdc:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008be0:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008be4:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008be8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bf0:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008bf4:	edd4 8a01 	vldr	s17, [r4, #4]
 8008bf8:	ed92 9a01 	vldr	s18, [r2, #4]
 8008bfc:	edd7 0a00 	vldr	s1, [r7]
 8008c00:	edd1 2a01 	vldr	s5, [r1, #4]
 8008c04:	ed95 7a01 	vldr	s14, [r5, #4]
 8008c08:	ed93 6a01 	vldr	s12, [r3, #4]
 8008c0c:	edd0 5a01 	vldr	s11, [r0, #4]
 8008c10:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008c14:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8008c18:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008c1c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008c20:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008c24:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008c28:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008c2c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008c30:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008c34:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008c38:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008c3c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008c40:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008c44:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8008c48:	ee32 1a08 	vadd.f32	s2, s4, s16
 8008c4c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8008c50:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008c54:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008c58:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008c5c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008c60:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008c64:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008c68:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8008c6c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8008c70:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008c74:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008c78:	ee74 0a22 	vadd.f32	s1, s8, s5
 8008c7c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008c80:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008c84:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008c88:	ee32 4a64 	vsub.f32	s8, s4, s9
 8008c8c:	ee73 8a09 	vadd.f32	s17, s6, s18
 8008c90:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008c94:	ee33 9a49 	vsub.f32	s18, s6, s18
 8008c98:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8008c9c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8008ca0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008ca4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8008ca8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008cac:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008cb0:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008cb4:	ee35 8a03 	vadd.f32	s16, s10, s6
 8008cb8:	ee38 0a80 	vadd.f32	s0, s17, s0
 8008cbc:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008cc0:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008cc4:	ed9d 2a01 	vldr	s4, [sp, #4]
 8008cc8:	eddd 1a02 	vldr	s3, [sp, #8]
 8008ccc:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008cd0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008cd4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8008cd8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8008cdc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008ce0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008ce4:	ee76 5a49 	vsub.f32	s11, s12, s18
 8008ce8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8008cec:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008cf0:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008cf4:	ee21 4a84 	vmul.f32	s8, s3, s8
 8008cf8:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8008cfc:	ee22 7a07 	vmul.f32	s14, s4, s14
 8008d00:	ee22 2a08 	vmul.f32	s4, s4, s16
 8008d04:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008d08:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8008d0c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8008d10:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8008d14:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8008d18:	ee74 0a60 	vsub.f32	s1, s8, s1
 8008d1c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008d20:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008d24:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8008d28:	ee72 1a21 	vadd.f32	s3, s4, s3
 8008d2c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008d30:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008d34:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8008d38:	ee38 8a04 	vadd.f32	s16, s16, s8
 8008d3c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008d40:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008d44:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8008d48:	eddd 5a03 	vldr	s11, [sp, #12]
 8008d4c:	edc6 fa00 	vstr	s31, [r6]
 8008d50:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8008d54:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008d58:	ee30 0a45 	vsub.f32	s0, s0, s10
 8008d5c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8008d60:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8008d64:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8008d68:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8008d6c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8008d70:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008d74:	ee74 4a89 	vadd.f32	s9, s9, s18
 8008d78:	ee34 3a43 	vsub.f32	s6, s8, s6
 8008d7c:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008d80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008d84:	44c4      	add	ip, r8
 8008d86:	45e3      	cmp	fp, ip
 8008d88:	edc3 3a00 	vstr	s7, [r3]
 8008d8c:	edc3 6a01 	vstr	s13, [r3, #4]
 8008d90:	4456      	add	r6, sl
 8008d92:	ed07 1a01 	vstr	s2, [r7, #-4]
 8008d96:	edc7 0a00 	vstr	s1, [r7]
 8008d9a:	4453      	add	r3, sl
 8008d9c:	ed80 2a00 	vstr	s4, [r0]
 8008da0:	edc0 2a01 	vstr	s5, [r0, #4]
 8008da4:	4457      	add	r7, sl
 8008da6:	edc2 1a00 	vstr	s3, [r2]
 8008daa:	ed82 7a01 	vstr	s14, [r2, #4]
 8008dae:	4450      	add	r0, sl
 8008db0:	ed85 8a00 	vstr	s16, [r5]
 8008db4:	ed85 0a01 	vstr	s0, [r5, #4]
 8008db8:	4452      	add	r2, sl
 8008dba:	edc1 4a00 	vstr	s9, [r1]
 8008dbe:	4455      	add	r5, sl
 8008dc0:	ed81 3a01 	vstr	s6, [r1, #4]
 8008dc4:	edc4 8a00 	vstr	s17, [r4]
 8008dc8:	ed84 6a01 	vstr	s12, [r4, #4]
 8008dcc:	4451      	add	r1, sl
 8008dce:	4454      	add	r4, sl
 8008dd0:	f63f aeea 	bhi.w	8008ba8 <arm_radix8_butterfly_f32+0x2fc>
 8008dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	3308      	adds	r3, #8
 8008dde:	930a      	str	r3, [sp, #40]	; 0x28
 8008de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de2:	3308      	adds	r3, #8
 8008de4:	9309      	str	r3, [sp, #36]	; 0x24
 8008de6:	9b08      	ldr	r3, [sp, #32]
 8008de8:	3308      	adds	r3, #8
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	3308      	adds	r3, #8
 8008df0:	9307      	str	r3, [sp, #28]
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	3308      	adds	r3, #8
 8008df6:	9306      	str	r3, [sp, #24]
 8008df8:	9b05      	ldr	r3, [sp, #20]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	3308      	adds	r3, #8
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e06:	f109 0901 	add.w	r9, r9, #1
 8008e0a:	454b      	cmp	r3, r9
 8008e0c:	f47f ae7d 	bne.w	8008b0a <arm_radix8_butterfly_f32+0x25e>
 8008e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	46d9      	mov	r9, fp
 8008e18:	9310      	str	r3, [sp, #64]	; 0x40
 8008e1a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8008e1e:	e554      	b.n	80088ca <arm_radix8_butterfly_f32+0x1e>
 8008e20:	b015      	add	sp, #84	; 0x54
 8008e22:	ecbd 8b10 	vpop	{d8-d15}
 8008e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2a:	bf00      	nop

08008e2c <calloc>:
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <calloc+0xc>)
 8008e2e:	460a      	mov	r2, r1
 8008e30:	4601      	mov	r1, r0
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	f000 b802 	b.w	8008e3c <_calloc_r>
 8008e38:	20000070 	.word	0x20000070

08008e3c <_calloc_r>:
 8008e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e3e:	fba1 2402 	umull	r2, r4, r1, r2
 8008e42:	b94c      	cbnz	r4, 8008e58 <_calloc_r+0x1c>
 8008e44:	4611      	mov	r1, r2
 8008e46:	9201      	str	r2, [sp, #4]
 8008e48:	f000 f82e 	bl	8008ea8 <_malloc_r>
 8008e4c:	9a01      	ldr	r2, [sp, #4]
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b930      	cbnz	r0, 8008e60 <_calloc_r+0x24>
 8008e52:	4628      	mov	r0, r5
 8008e54:	b003      	add	sp, #12
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	220c      	movs	r2, #12
 8008e5a:	6002      	str	r2, [r0, #0]
 8008e5c:	2500      	movs	r5, #0
 8008e5e:	e7f8      	b.n	8008e52 <_calloc_r+0x16>
 8008e60:	4621      	mov	r1, r4
 8008e62:	f000 ff23 	bl	8009cac <memset>
 8008e66:	e7f4      	b.n	8008e52 <_calloc_r+0x16>

08008e68 <sbrk_aligned>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	4e0e      	ldr	r6, [pc, #56]	; (8008ea4 <sbrk_aligned+0x3c>)
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	6831      	ldr	r1, [r6, #0]
 8008e70:	4605      	mov	r5, r0
 8008e72:	b911      	cbnz	r1, 8008e7a <sbrk_aligned+0x12>
 8008e74:	f000 ff5a 	bl	8009d2c <_sbrk_r>
 8008e78:	6030      	str	r0, [r6, #0]
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 ff55 	bl	8009d2c <_sbrk_r>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d00a      	beq.n	8008e9c <sbrk_aligned+0x34>
 8008e86:	1cc4      	adds	r4, r0, #3
 8008e88:	f024 0403 	bic.w	r4, r4, #3
 8008e8c:	42a0      	cmp	r0, r4
 8008e8e:	d007      	beq.n	8008ea0 <sbrk_aligned+0x38>
 8008e90:	1a21      	subs	r1, r4, r0
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 ff4a 	bl	8009d2c <_sbrk_r>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d101      	bne.n	8008ea0 <sbrk_aligned+0x38>
 8008e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	20007db0 	.word	0x20007db0

08008ea8 <_malloc_r>:
 8008ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eac:	1ccd      	adds	r5, r1, #3
 8008eae:	f025 0503 	bic.w	r5, r5, #3
 8008eb2:	3508      	adds	r5, #8
 8008eb4:	2d0c      	cmp	r5, #12
 8008eb6:	bf38      	it	cc
 8008eb8:	250c      	movcc	r5, #12
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	db01      	blt.n	8008ec4 <_malloc_r+0x1c>
 8008ec0:	42a9      	cmp	r1, r5
 8008ec2:	d905      	bls.n	8008ed0 <_malloc_r+0x28>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	2600      	movs	r6, #0
 8008eca:	4630      	mov	r0, r6
 8008ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fa4 <_malloc_r+0xfc>
 8008ed4:	f000 f868 	bl	8008fa8 <__malloc_lock>
 8008ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8008edc:	461c      	mov	r4, r3
 8008ede:	bb5c      	cbnz	r4, 8008f38 <_malloc_r+0x90>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7ff ffc0 	bl	8008e68 <sbrk_aligned>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	4604      	mov	r4, r0
 8008eec:	d155      	bne.n	8008f9a <_malloc_r+0xf2>
 8008eee:	f8d8 4000 	ldr.w	r4, [r8]
 8008ef2:	4626      	mov	r6, r4
 8008ef4:	2e00      	cmp	r6, #0
 8008ef6:	d145      	bne.n	8008f84 <_malloc_r+0xdc>
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	d048      	beq.n	8008f8e <_malloc_r+0xe6>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	4631      	mov	r1, r6
 8008f00:	4638      	mov	r0, r7
 8008f02:	eb04 0903 	add.w	r9, r4, r3
 8008f06:	f000 ff11 	bl	8009d2c <_sbrk_r>
 8008f0a:	4581      	cmp	r9, r0
 8008f0c:	d13f      	bne.n	8008f8e <_malloc_r+0xe6>
 8008f0e:	6821      	ldr	r1, [r4, #0]
 8008f10:	1a6d      	subs	r5, r5, r1
 8008f12:	4629      	mov	r1, r5
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ffa7 	bl	8008e68 <sbrk_aligned>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d037      	beq.n	8008f8e <_malloc_r+0xe6>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	442b      	add	r3, r5
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	f8d8 3000 	ldr.w	r3, [r8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d038      	beq.n	8008f9e <_malloc_r+0xf6>
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	42a2      	cmp	r2, r4
 8008f30:	d12b      	bne.n	8008f8a <_malloc_r+0xe2>
 8008f32:	2200      	movs	r2, #0
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	e00f      	b.n	8008f58 <_malloc_r+0xb0>
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	1b52      	subs	r2, r2, r5
 8008f3c:	d41f      	bmi.n	8008f7e <_malloc_r+0xd6>
 8008f3e:	2a0b      	cmp	r2, #11
 8008f40:	d917      	bls.n	8008f72 <_malloc_r+0xca>
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	6025      	str	r5, [r4, #0]
 8008f48:	bf18      	it	ne
 8008f4a:	6059      	strne	r1, [r3, #4]
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	bf08      	it	eq
 8008f50:	f8c8 1000 	streq.w	r1, [r8]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f104 060b 	add.w	r6, r4, #11
 8008f5e:	f000 f829 	bl	8008fb4 <__malloc_unlock>
 8008f62:	f026 0607 	bic.w	r6, r6, #7
 8008f66:	1d23      	adds	r3, r4, #4
 8008f68:	1af2      	subs	r2, r6, r3
 8008f6a:	d0ae      	beq.n	8008eca <_malloc_r+0x22>
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	e7ab      	b.n	8008eca <_malloc_r+0x22>
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	6862      	ldr	r2, [r4, #4]
 8008f76:	d1dd      	bne.n	8008f34 <_malloc_r+0x8c>
 8008f78:	f8c8 2000 	str.w	r2, [r8]
 8008f7c:	e7ec      	b.n	8008f58 <_malloc_r+0xb0>
 8008f7e:	4623      	mov	r3, r4
 8008f80:	6864      	ldr	r4, [r4, #4]
 8008f82:	e7ac      	b.n	8008ede <_malloc_r+0x36>
 8008f84:	4634      	mov	r4, r6
 8008f86:	6876      	ldr	r6, [r6, #4]
 8008f88:	e7b4      	b.n	8008ef4 <_malloc_r+0x4c>
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	e7cc      	b.n	8008f28 <_malloc_r+0x80>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f000 f80e 	bl	8008fb4 <__malloc_unlock>
 8008f98:	e797      	b.n	8008eca <_malloc_r+0x22>
 8008f9a:	6025      	str	r5, [r4, #0]
 8008f9c:	e7dc      	b.n	8008f58 <_malloc_r+0xb0>
 8008f9e:	605b      	str	r3, [r3, #4]
 8008fa0:	deff      	udf	#255	; 0xff
 8008fa2:	bf00      	nop
 8008fa4:	20007dac 	.word	0x20007dac

08008fa8 <__malloc_lock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_lock+0x8>)
 8008faa:	f000 bf0c 	b.w	8009dc6 <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	20007ef4 	.word	0x20007ef4

08008fb4 <__malloc_unlock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__malloc_unlock+0x8>)
 8008fb6:	f000 bf07 	b.w	8009dc8 <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	20007ef4 	.word	0x20007ef4

08008fc0 <__cvt>:
 8008fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	ec55 4b10 	vmov	r4, r5, d0
 8008fc8:	2d00      	cmp	r5, #0
 8008fca:	460e      	mov	r6, r1
 8008fcc:	4619      	mov	r1, r3
 8008fce:	462b      	mov	r3, r5
 8008fd0:	bfbb      	ittet	lt
 8008fd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fd6:	461d      	movlt	r5, r3
 8008fd8:	2300      	movge	r3, #0
 8008fda:	232d      	movlt	r3, #45	; 0x2d
 8008fdc:	700b      	strb	r3, [r1, #0]
 8008fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fe4:	4691      	mov	r9, r2
 8008fe6:	f023 0820 	bic.w	r8, r3, #32
 8008fea:	bfbc      	itt	lt
 8008fec:	4622      	movlt	r2, r4
 8008fee:	4614      	movlt	r4, r2
 8008ff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ff4:	d005      	beq.n	8009002 <__cvt+0x42>
 8008ff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ffa:	d100      	bne.n	8008ffe <__cvt+0x3e>
 8008ffc:	3601      	adds	r6, #1
 8008ffe:	2102      	movs	r1, #2
 8009000:	e000      	b.n	8009004 <__cvt+0x44>
 8009002:	2103      	movs	r1, #3
 8009004:	ab03      	add	r3, sp, #12
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	ab02      	add	r3, sp, #8
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	ec45 4b10 	vmov	d0, r4, r5
 8009010:	4653      	mov	r3, sl
 8009012:	4632      	mov	r2, r6
 8009014:	f000 ff98 	bl	8009f48 <_dtoa_r>
 8009018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800901c:	4607      	mov	r7, r0
 800901e:	d102      	bne.n	8009026 <__cvt+0x66>
 8009020:	f019 0f01 	tst.w	r9, #1
 8009024:	d022      	beq.n	800906c <__cvt+0xac>
 8009026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800902a:	eb07 0906 	add.w	r9, r7, r6
 800902e:	d110      	bne.n	8009052 <__cvt+0x92>
 8009030:	783b      	ldrb	r3, [r7, #0]
 8009032:	2b30      	cmp	r3, #48	; 0x30
 8009034:	d10a      	bne.n	800904c <__cvt+0x8c>
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	4620      	mov	r0, r4
 800903c:	4629      	mov	r1, r5
 800903e:	f7f7 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8009042:	b918      	cbnz	r0, 800904c <__cvt+0x8c>
 8009044:	f1c6 0601 	rsb	r6, r6, #1
 8009048:	f8ca 6000 	str.w	r6, [sl]
 800904c:	f8da 3000 	ldr.w	r3, [sl]
 8009050:	4499      	add	r9, r3
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800905e:	b108      	cbz	r0, 8009064 <__cvt+0xa4>
 8009060:	f8cd 900c 	str.w	r9, [sp, #12]
 8009064:	2230      	movs	r2, #48	; 0x30
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	454b      	cmp	r3, r9
 800906a:	d307      	bcc.n	800907c <__cvt+0xbc>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009070:	1bdb      	subs	r3, r3, r7
 8009072:	4638      	mov	r0, r7
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	b004      	add	sp, #16
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907c:	1c59      	adds	r1, r3, #1
 800907e:	9103      	str	r1, [sp, #12]
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e7f0      	b.n	8009066 <__cvt+0xa6>

08009084 <__exponent>:
 8009084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009086:	4603      	mov	r3, r0
 8009088:	2900      	cmp	r1, #0
 800908a:	bfb8      	it	lt
 800908c:	4249      	neglt	r1, r1
 800908e:	f803 2b02 	strb.w	r2, [r3], #2
 8009092:	bfb4      	ite	lt
 8009094:	222d      	movlt	r2, #45	; 0x2d
 8009096:	222b      	movge	r2, #43	; 0x2b
 8009098:	2909      	cmp	r1, #9
 800909a:	7042      	strb	r2, [r0, #1]
 800909c:	dd2a      	ble.n	80090f4 <__exponent+0x70>
 800909e:	f10d 0207 	add.w	r2, sp, #7
 80090a2:	4617      	mov	r7, r2
 80090a4:	260a      	movs	r6, #10
 80090a6:	4694      	mov	ip, r2
 80090a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80090ac:	fb06 1415 	mls	r4, r6, r5, r1
 80090b0:	3430      	adds	r4, #48	; 0x30
 80090b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80090b6:	460c      	mov	r4, r1
 80090b8:	2c63      	cmp	r4, #99	; 0x63
 80090ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80090be:	4629      	mov	r1, r5
 80090c0:	dcf1      	bgt.n	80090a6 <__exponent+0x22>
 80090c2:	3130      	adds	r1, #48	; 0x30
 80090c4:	f1ac 0402 	sub.w	r4, ip, #2
 80090c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090cc:	1c41      	adds	r1, r0, #1
 80090ce:	4622      	mov	r2, r4
 80090d0:	42ba      	cmp	r2, r7
 80090d2:	d30a      	bcc.n	80090ea <__exponent+0x66>
 80090d4:	f10d 0209 	add.w	r2, sp, #9
 80090d8:	eba2 020c 	sub.w	r2, r2, ip
 80090dc:	42bc      	cmp	r4, r7
 80090de:	bf88      	it	hi
 80090e0:	2200      	movhi	r2, #0
 80090e2:	4413      	add	r3, r2
 80090e4:	1a18      	subs	r0, r3, r0
 80090e6:	b003      	add	sp, #12
 80090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80090f2:	e7ed      	b.n	80090d0 <__exponent+0x4c>
 80090f4:	2330      	movs	r3, #48	; 0x30
 80090f6:	3130      	adds	r1, #48	; 0x30
 80090f8:	7083      	strb	r3, [r0, #2]
 80090fa:	70c1      	strb	r1, [r0, #3]
 80090fc:	1d03      	adds	r3, r0, #4
 80090fe:	e7f1      	b.n	80090e4 <__exponent+0x60>

08009100 <_printf_float>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	ed2d 8b02 	vpush	{d8}
 8009108:	b08d      	sub	sp, #52	; 0x34
 800910a:	460c      	mov	r4, r1
 800910c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009110:	4616      	mov	r6, r2
 8009112:	461f      	mov	r7, r3
 8009114:	4605      	mov	r5, r0
 8009116:	f000 fdd1 	bl	8009cbc <_localeconv_r>
 800911a:	f8d0 a000 	ldr.w	sl, [r0]
 800911e:	4650      	mov	r0, sl
 8009120:	f7f7 f8a6 	bl	8000270 <strlen>
 8009124:	2300      	movs	r3, #0
 8009126:	930a      	str	r3, [sp, #40]	; 0x28
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	f8d8 3000 	ldr.w	r3, [r8]
 8009130:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009134:	3307      	adds	r3, #7
 8009136:	f023 0307 	bic.w	r3, r3, #7
 800913a:	f103 0208 	add.w	r2, r3, #8
 800913e:	f8c8 2000 	str.w	r2, [r8]
 8009142:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009150:	ee08 0a10 	vmov	s16, r0
 8009154:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800915c:	4b9e      	ldr	r3, [pc, #632]	; (80093d8 <_printf_float+0x2d8>)
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	f7f7 fce3 	bl	8000b2c <__aeabi_dcmpun>
 8009166:	bb88      	cbnz	r0, 80091cc <_printf_float+0xcc>
 8009168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800916c:	4b9a      	ldr	r3, [pc, #616]	; (80093d8 <_printf_float+0x2d8>)
 800916e:	f04f 32ff 	mov.w	r2, #4294967295
 8009172:	f7f7 fcbd 	bl	8000af0 <__aeabi_dcmple>
 8009176:	bb48      	cbnz	r0, 80091cc <_printf_float+0xcc>
 8009178:	2200      	movs	r2, #0
 800917a:	2300      	movs	r3, #0
 800917c:	4640      	mov	r0, r8
 800917e:	4649      	mov	r1, r9
 8009180:	f7f7 fcac 	bl	8000adc <__aeabi_dcmplt>
 8009184:	b110      	cbz	r0, 800918c <_printf_float+0x8c>
 8009186:	232d      	movs	r3, #45	; 0x2d
 8009188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918c:	4a93      	ldr	r2, [pc, #588]	; (80093dc <_printf_float+0x2dc>)
 800918e:	4b94      	ldr	r3, [pc, #592]	; (80093e0 <_printf_float+0x2e0>)
 8009190:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009194:	bf94      	ite	ls
 8009196:	4690      	movls	r8, r2
 8009198:	4698      	movhi	r8, r3
 800919a:	2303      	movs	r3, #3
 800919c:	6123      	str	r3, [r4, #16]
 800919e:	9b05      	ldr	r3, [sp, #20]
 80091a0:	f023 0304 	bic.w	r3, r3, #4
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	f04f 0900 	mov.w	r9, #0
 80091aa:	9700      	str	r7, [sp, #0]
 80091ac:	4633      	mov	r3, r6
 80091ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80091b0:	4621      	mov	r1, r4
 80091b2:	4628      	mov	r0, r5
 80091b4:	f000 f9da 	bl	800956c <_printf_common>
 80091b8:	3001      	adds	r0, #1
 80091ba:	f040 8090 	bne.w	80092de <_printf_float+0x1de>
 80091be:	f04f 30ff 	mov.w	r0, #4294967295
 80091c2:	b00d      	add	sp, #52	; 0x34
 80091c4:	ecbd 8b02 	vpop	{d8}
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 fcaa 	bl	8000b2c <__aeabi_dcmpun>
 80091d8:	b140      	cbz	r0, 80091ec <_printf_float+0xec>
 80091da:	464b      	mov	r3, r9
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfbc      	itt	lt
 80091e0:	232d      	movlt	r3, #45	; 0x2d
 80091e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091e6:	4a7f      	ldr	r2, [pc, #508]	; (80093e4 <_printf_float+0x2e4>)
 80091e8:	4b7f      	ldr	r3, [pc, #508]	; (80093e8 <_printf_float+0x2e8>)
 80091ea:	e7d1      	b.n	8009190 <_printf_float+0x90>
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091f2:	9206      	str	r2, [sp, #24]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	d13f      	bne.n	8009278 <_printf_float+0x178>
 80091f8:	2306      	movs	r3, #6
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	6861      	ldr	r1, [r4, #4]
 8009200:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009204:	2300      	movs	r3, #0
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	ab0a      	add	r3, sp, #40	; 0x28
 800920a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800920e:	ab09      	add	r3, sp, #36	; 0x24
 8009210:	ec49 8b10 	vmov	d0, r8, r9
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	6022      	str	r2, [r4, #0]
 8009218:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800921c:	4628      	mov	r0, r5
 800921e:	f7ff fecf 	bl	8008fc0 <__cvt>
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009226:	2b47      	cmp	r3, #71	; 0x47
 8009228:	4680      	mov	r8, r0
 800922a:	d108      	bne.n	800923e <_printf_float+0x13e>
 800922c:	1cc8      	adds	r0, r1, #3
 800922e:	db02      	blt.n	8009236 <_printf_float+0x136>
 8009230:	6863      	ldr	r3, [r4, #4]
 8009232:	4299      	cmp	r1, r3
 8009234:	dd41      	ble.n	80092ba <_printf_float+0x1ba>
 8009236:	f1ab 0302 	sub.w	r3, fp, #2
 800923a:	fa5f fb83 	uxtb.w	fp, r3
 800923e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009242:	d820      	bhi.n	8009286 <_printf_float+0x186>
 8009244:	3901      	subs	r1, #1
 8009246:	465a      	mov	r2, fp
 8009248:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800924c:	9109      	str	r1, [sp, #36]	; 0x24
 800924e:	f7ff ff19 	bl	8009084 <__exponent>
 8009252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009254:	1813      	adds	r3, r2, r0
 8009256:	2a01      	cmp	r2, #1
 8009258:	4681      	mov	r9, r0
 800925a:	6123      	str	r3, [r4, #16]
 800925c:	dc02      	bgt.n	8009264 <_printf_float+0x164>
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	07d2      	lsls	r2, r2, #31
 8009262:	d501      	bpl.n	8009268 <_printf_float+0x168>
 8009264:	3301      	adds	r3, #1
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800926c:	2b00      	cmp	r3, #0
 800926e:	d09c      	beq.n	80091aa <_printf_float+0xaa>
 8009270:	232d      	movs	r3, #45	; 0x2d
 8009272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009276:	e798      	b.n	80091aa <_printf_float+0xaa>
 8009278:	9a06      	ldr	r2, [sp, #24]
 800927a:	2a47      	cmp	r2, #71	; 0x47
 800927c:	d1be      	bne.n	80091fc <_printf_float+0xfc>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1bc      	bne.n	80091fc <_printf_float+0xfc>
 8009282:	2301      	movs	r3, #1
 8009284:	e7b9      	b.n	80091fa <_printf_float+0xfa>
 8009286:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800928a:	d118      	bne.n	80092be <_printf_float+0x1be>
 800928c:	2900      	cmp	r1, #0
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	dd0b      	ble.n	80092aa <_printf_float+0x1aa>
 8009292:	6121      	str	r1, [r4, #16]
 8009294:	b913      	cbnz	r3, 800929c <_printf_float+0x19c>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	07d0      	lsls	r0, r2, #31
 800929a:	d502      	bpl.n	80092a2 <_printf_float+0x1a2>
 800929c:	3301      	adds	r3, #1
 800929e:	440b      	add	r3, r1
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092a4:	f04f 0900 	mov.w	r9, #0
 80092a8:	e7de      	b.n	8009268 <_printf_float+0x168>
 80092aa:	b913      	cbnz	r3, 80092b2 <_printf_float+0x1b2>
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	07d2      	lsls	r2, r2, #31
 80092b0:	d501      	bpl.n	80092b6 <_printf_float+0x1b6>
 80092b2:	3302      	adds	r3, #2
 80092b4:	e7f4      	b.n	80092a0 <_printf_float+0x1a0>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e7f2      	b.n	80092a0 <_printf_float+0x1a0>
 80092ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c0:	4299      	cmp	r1, r3
 80092c2:	db05      	blt.n	80092d0 <_printf_float+0x1d0>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	6121      	str	r1, [r4, #16]
 80092c8:	07d8      	lsls	r0, r3, #31
 80092ca:	d5ea      	bpl.n	80092a2 <_printf_float+0x1a2>
 80092cc:	1c4b      	adds	r3, r1, #1
 80092ce:	e7e7      	b.n	80092a0 <_printf_float+0x1a0>
 80092d0:	2900      	cmp	r1, #0
 80092d2:	bfd4      	ite	le
 80092d4:	f1c1 0202 	rsble	r2, r1, #2
 80092d8:	2201      	movgt	r2, #1
 80092da:	4413      	add	r3, r2
 80092dc:	e7e0      	b.n	80092a0 <_printf_float+0x1a0>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	055a      	lsls	r2, r3, #21
 80092e2:	d407      	bmi.n	80092f4 <_printf_float+0x1f4>
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	4642      	mov	r2, r8
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	d12c      	bne.n	800934c <_printf_float+0x24c>
 80092f2:	e764      	b.n	80091be <_printf_float+0xbe>
 80092f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092f8:	f240 80e0 	bls.w	80094bc <_printf_float+0x3bc>
 80092fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009300:	2200      	movs	r2, #0
 8009302:	2300      	movs	r3, #0
 8009304:	f7f7 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009308:	2800      	cmp	r0, #0
 800930a:	d034      	beq.n	8009376 <_printf_float+0x276>
 800930c:	4a37      	ldr	r2, [pc, #220]	; (80093ec <_printf_float+0x2ec>)
 800930e:	2301      	movs	r3, #1
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af51 	beq.w	80091be <_printf_float+0xbe>
 800931c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009320:	429a      	cmp	r2, r3
 8009322:	db02      	blt.n	800932a <_printf_float+0x22a>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	07d8      	lsls	r0, r3, #31
 8009328:	d510      	bpl.n	800934c <_printf_float+0x24c>
 800932a:	ee18 3a10 	vmov	r3, s16
 800932e:	4652      	mov	r2, sl
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af41 	beq.w	80091be <_printf_float+0xbe>
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	f104 091a 	add.w	r9, r4, #26
 8009344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009346:	3b01      	subs	r3, #1
 8009348:	4543      	cmp	r3, r8
 800934a:	dc09      	bgt.n	8009360 <_printf_float+0x260>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	079b      	lsls	r3, r3, #30
 8009350:	f100 8107 	bmi.w	8009562 <_printf_float+0x462>
 8009354:	68e0      	ldr	r0, [r4, #12]
 8009356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009358:	4298      	cmp	r0, r3
 800935a:	bfb8      	it	lt
 800935c:	4618      	movlt	r0, r3
 800935e:	e730      	b.n	80091c2 <_printf_float+0xc2>
 8009360:	2301      	movs	r3, #1
 8009362:	464a      	mov	r2, r9
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f af27 	beq.w	80091be <_printf_float+0xbe>
 8009370:	f108 0801 	add.w	r8, r8, #1
 8009374:	e7e6      	b.n	8009344 <_printf_float+0x244>
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc39      	bgt.n	80093f0 <_printf_float+0x2f0>
 800937c:	4a1b      	ldr	r2, [pc, #108]	; (80093ec <_printf_float+0x2ec>)
 800937e:	2301      	movs	r3, #1
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af19 	beq.w	80091be <_printf_float+0xbe>
 800938c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009390:	4313      	orrs	r3, r2
 8009392:	d102      	bne.n	800939a <_printf_float+0x29a>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07d9      	lsls	r1, r3, #31
 8009398:	d5d8      	bpl.n	800934c <_printf_float+0x24c>
 800939a:	ee18 3a10 	vmov	r3, s16
 800939e:	4652      	mov	r2, sl
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af09 	beq.w	80091be <_printf_float+0xbe>
 80093ac:	f04f 0900 	mov.w	r9, #0
 80093b0:	f104 0a1a 	add.w	sl, r4, #26
 80093b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b6:	425b      	negs	r3, r3
 80093b8:	454b      	cmp	r3, r9
 80093ba:	dc01      	bgt.n	80093c0 <_printf_float+0x2c0>
 80093bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093be:	e792      	b.n	80092e6 <_printf_float+0x1e6>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4652      	mov	r2, sl
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	f43f aef7 	beq.w	80091be <_printf_float+0xbe>
 80093d0:	f109 0901 	add.w	r9, r9, #1
 80093d4:	e7ee      	b.n	80093b4 <_printf_float+0x2b4>
 80093d6:	bf00      	nop
 80093d8:	7fefffff 	.word	0x7fefffff
 80093dc:	0802070c 	.word	0x0802070c
 80093e0:	08020710 	.word	0x08020710
 80093e4:	08020714 	.word	0x08020714
 80093e8:	08020718 	.word	0x08020718
 80093ec:	0802071c 	.word	0x0802071c
 80093f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f4:	429a      	cmp	r2, r3
 80093f6:	bfa8      	it	ge
 80093f8:	461a      	movge	r2, r3
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	4691      	mov	r9, r2
 80093fe:	dc37      	bgt.n	8009470 <_printf_float+0x370>
 8009400:	f04f 0b00 	mov.w	fp, #0
 8009404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009408:	f104 021a 	add.w	r2, r4, #26
 800940c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800940e:	9305      	str	r3, [sp, #20]
 8009410:	eba3 0309 	sub.w	r3, r3, r9
 8009414:	455b      	cmp	r3, fp
 8009416:	dc33      	bgt.n	8009480 <_printf_float+0x380>
 8009418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800941c:	429a      	cmp	r2, r3
 800941e:	db3b      	blt.n	8009498 <_printf_float+0x398>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	07da      	lsls	r2, r3, #31
 8009424:	d438      	bmi.n	8009498 <_printf_float+0x398>
 8009426:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800942a:	eba2 0903 	sub.w	r9, r2, r3
 800942e:	9b05      	ldr	r3, [sp, #20]
 8009430:	1ad2      	subs	r2, r2, r3
 8009432:	4591      	cmp	r9, r2
 8009434:	bfa8      	it	ge
 8009436:	4691      	movge	r9, r2
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	dc35      	bgt.n	80094aa <_printf_float+0x3aa>
 800943e:	f04f 0800 	mov.w	r8, #0
 8009442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009446:	f104 0a1a 	add.w	sl, r4, #26
 800944a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	eba3 0309 	sub.w	r3, r3, r9
 8009454:	4543      	cmp	r3, r8
 8009456:	f77f af79 	ble.w	800934c <_printf_float+0x24c>
 800945a:	2301      	movs	r3, #1
 800945c:	4652      	mov	r2, sl
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f aeaa 	beq.w	80091be <_printf_float+0xbe>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	e7ec      	b.n	800944a <_printf_float+0x34a>
 8009470:	4613      	mov	r3, r2
 8009472:	4631      	mov	r1, r6
 8009474:	4642      	mov	r2, r8
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	d1c0      	bne.n	8009400 <_printf_float+0x300>
 800947e:	e69e      	b.n	80091be <_printf_float+0xbe>
 8009480:	2301      	movs	r3, #1
 8009482:	4631      	mov	r1, r6
 8009484:	4628      	mov	r0, r5
 8009486:	9205      	str	r2, [sp, #20]
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	f43f ae97 	beq.w	80091be <_printf_float+0xbe>
 8009490:	9a05      	ldr	r2, [sp, #20]
 8009492:	f10b 0b01 	add.w	fp, fp, #1
 8009496:	e7b9      	b.n	800940c <_printf_float+0x30c>
 8009498:	ee18 3a10 	vmov	r3, s16
 800949c:	4652      	mov	r2, sl
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	d1be      	bne.n	8009426 <_printf_float+0x326>
 80094a8:	e689      	b.n	80091be <_printf_float+0xbe>
 80094aa:	9a05      	ldr	r2, [sp, #20]
 80094ac:	464b      	mov	r3, r9
 80094ae:	4442      	add	r2, r8
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	d1c1      	bne.n	800943e <_printf_float+0x33e>
 80094ba:	e680      	b.n	80091be <_printf_float+0xbe>
 80094bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094be:	2a01      	cmp	r2, #1
 80094c0:	dc01      	bgt.n	80094c6 <_printf_float+0x3c6>
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d53a      	bpl.n	800953c <_printf_float+0x43c>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4642      	mov	r2, r8
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f ae74 	beq.w	80091be <_printf_float+0xbe>
 80094d6:	ee18 3a10 	vmov	r3, s16
 80094da:	4652      	mov	r2, sl
 80094dc:	4631      	mov	r1, r6
 80094de:	4628      	mov	r0, r5
 80094e0:	47b8      	blx	r7
 80094e2:	3001      	adds	r0, #1
 80094e4:	f43f ae6b 	beq.w	80091be <_printf_float+0xbe>
 80094e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094ec:	2200      	movs	r2, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80094f4:	f7f7 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f8:	b9d8      	cbnz	r0, 8009532 <_printf_float+0x432>
 80094fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80094fe:	f108 0201 	add.w	r2, r8, #1
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	d10e      	bne.n	800952a <_printf_float+0x42a>
 800950c:	e657      	b.n	80091be <_printf_float+0xbe>
 800950e:	2301      	movs	r3, #1
 8009510:	4652      	mov	r2, sl
 8009512:	4631      	mov	r1, r6
 8009514:	4628      	mov	r0, r5
 8009516:	47b8      	blx	r7
 8009518:	3001      	adds	r0, #1
 800951a:	f43f ae50 	beq.w	80091be <_printf_float+0xbe>
 800951e:	f108 0801 	add.w	r8, r8, #1
 8009522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009524:	3b01      	subs	r3, #1
 8009526:	4543      	cmp	r3, r8
 8009528:	dcf1      	bgt.n	800950e <_printf_float+0x40e>
 800952a:	464b      	mov	r3, r9
 800952c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009530:	e6da      	b.n	80092e8 <_printf_float+0x1e8>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	f104 0a1a 	add.w	sl, r4, #26
 800953a:	e7f2      	b.n	8009522 <_printf_float+0x422>
 800953c:	2301      	movs	r3, #1
 800953e:	4642      	mov	r2, r8
 8009540:	e7df      	b.n	8009502 <_printf_float+0x402>
 8009542:	2301      	movs	r3, #1
 8009544:	464a      	mov	r2, r9
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae36 	beq.w	80091be <_printf_float+0xbe>
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	4543      	cmp	r3, r8
 800955e:	dcf0      	bgt.n	8009542 <_printf_float+0x442>
 8009560:	e6f8      	b.n	8009354 <_printf_float+0x254>
 8009562:	f04f 0800 	mov.w	r8, #0
 8009566:	f104 0919 	add.w	r9, r4, #25
 800956a:	e7f4      	b.n	8009556 <_printf_float+0x456>

0800956c <_printf_common>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	4616      	mov	r6, r2
 8009572:	4699      	mov	r9, r3
 8009574:	688a      	ldr	r2, [r1, #8]
 8009576:	690b      	ldr	r3, [r1, #16]
 8009578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800957c:	4293      	cmp	r3, r2
 800957e:	bfb8      	it	lt
 8009580:	4613      	movlt	r3, r2
 8009582:	6033      	str	r3, [r6, #0]
 8009584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009588:	4607      	mov	r7, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b10a      	cbz	r2, 8009592 <_printf_common+0x26>
 800958e:	3301      	adds	r3, #1
 8009590:	6033      	str	r3, [r6, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	0699      	lsls	r1, r3, #26
 8009596:	bf42      	ittt	mi
 8009598:	6833      	ldrmi	r3, [r6, #0]
 800959a:	3302      	addmi	r3, #2
 800959c:	6033      	strmi	r3, [r6, #0]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	f015 0506 	ands.w	r5, r5, #6
 80095a4:	d106      	bne.n	80095b4 <_printf_common+0x48>
 80095a6:	f104 0a19 	add.w	sl, r4, #25
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	6832      	ldr	r2, [r6, #0]
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dc26      	bgt.n	8009602 <_printf_common+0x96>
 80095b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b8:	1e13      	subs	r3, r2, #0
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	bf18      	it	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	0692      	lsls	r2, r2, #26
 80095c2:	d42b      	bmi.n	800961c <_printf_common+0xb0>
 80095c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c8:	4649      	mov	r1, r9
 80095ca:	4638      	mov	r0, r7
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d01e      	beq.n	8009610 <_printf_common+0xa4>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	6922      	ldr	r2, [r4, #16]
 80095d6:	f003 0306 	and.w	r3, r3, #6
 80095da:	2b04      	cmp	r3, #4
 80095dc:	bf02      	ittt	eq
 80095de:	68e5      	ldreq	r5, [r4, #12]
 80095e0:	6833      	ldreq	r3, [r6, #0]
 80095e2:	1aed      	subeq	r5, r5, r3
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	bf0c      	ite	eq
 80095e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095ec:	2500      	movne	r5, #0
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bfc4      	itt	gt
 80095f2:	1a9b      	subgt	r3, r3, r2
 80095f4:	18ed      	addgt	r5, r5, r3
 80095f6:	2600      	movs	r6, #0
 80095f8:	341a      	adds	r4, #26
 80095fa:	42b5      	cmp	r5, r6
 80095fc:	d11a      	bne.n	8009634 <_printf_common+0xc8>
 80095fe:	2000      	movs	r0, #0
 8009600:	e008      	b.n	8009614 <_printf_common+0xa8>
 8009602:	2301      	movs	r3, #1
 8009604:	4652      	mov	r2, sl
 8009606:	4649      	mov	r1, r9
 8009608:	4638      	mov	r0, r7
 800960a:	47c0      	blx	r8
 800960c:	3001      	adds	r0, #1
 800960e:	d103      	bne.n	8009618 <_printf_common+0xac>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	3501      	adds	r5, #1
 800961a:	e7c6      	b.n	80095aa <_printf_common+0x3e>
 800961c:	18e1      	adds	r1, r4, r3
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	2030      	movs	r0, #48	; 0x30
 8009622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009626:	4422      	add	r2, r4
 8009628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800962c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009630:	3302      	adds	r3, #2
 8009632:	e7c7      	b.n	80095c4 <_printf_common+0x58>
 8009634:	2301      	movs	r3, #1
 8009636:	4622      	mov	r2, r4
 8009638:	4649      	mov	r1, r9
 800963a:	4638      	mov	r0, r7
 800963c:	47c0      	blx	r8
 800963e:	3001      	adds	r0, #1
 8009640:	d0e6      	beq.n	8009610 <_printf_common+0xa4>
 8009642:	3601      	adds	r6, #1
 8009644:	e7d9      	b.n	80095fa <_printf_common+0x8e>
	...

08009648 <_printf_i>:
 8009648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	7e0f      	ldrb	r7, [r1, #24]
 800964e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009650:	2f78      	cmp	r7, #120	; 0x78
 8009652:	4691      	mov	r9, r2
 8009654:	4680      	mov	r8, r0
 8009656:	460c      	mov	r4, r1
 8009658:	469a      	mov	sl, r3
 800965a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800965e:	d807      	bhi.n	8009670 <_printf_i+0x28>
 8009660:	2f62      	cmp	r7, #98	; 0x62
 8009662:	d80a      	bhi.n	800967a <_printf_i+0x32>
 8009664:	2f00      	cmp	r7, #0
 8009666:	f000 80d4 	beq.w	8009812 <_printf_i+0x1ca>
 800966a:	2f58      	cmp	r7, #88	; 0x58
 800966c:	f000 80c0 	beq.w	80097f0 <_printf_i+0x1a8>
 8009670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009678:	e03a      	b.n	80096f0 <_printf_i+0xa8>
 800967a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800967e:	2b15      	cmp	r3, #21
 8009680:	d8f6      	bhi.n	8009670 <_printf_i+0x28>
 8009682:	a101      	add	r1, pc, #4	; (adr r1, 8009688 <_printf_i+0x40>)
 8009684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096f5 	.word	0x080096f5
 8009690:	08009671 	.word	0x08009671
 8009694:	08009671 	.word	0x08009671
 8009698:	08009671 	.word	0x08009671
 800969c:	08009671 	.word	0x08009671
 80096a0:	080096f5 	.word	0x080096f5
 80096a4:	08009671 	.word	0x08009671
 80096a8:	08009671 	.word	0x08009671
 80096ac:	08009671 	.word	0x08009671
 80096b0:	08009671 	.word	0x08009671
 80096b4:	080097f9 	.word	0x080097f9
 80096b8:	08009721 	.word	0x08009721
 80096bc:	080097b3 	.word	0x080097b3
 80096c0:	08009671 	.word	0x08009671
 80096c4:	08009671 	.word	0x08009671
 80096c8:	0800981b 	.word	0x0800981b
 80096cc:	08009671 	.word	0x08009671
 80096d0:	08009721 	.word	0x08009721
 80096d4:	08009671 	.word	0x08009671
 80096d8:	08009671 	.word	0x08009671
 80096dc:	080097bb 	.word	0x080097bb
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	1d1a      	adds	r2, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	602a      	str	r2, [r5, #0]
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f0:	2301      	movs	r3, #1
 80096f2:	e09f      	b.n	8009834 <_printf_i+0x1ec>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	682b      	ldr	r3, [r5, #0]
 80096f8:	0607      	lsls	r7, r0, #24
 80096fa:	f103 0104 	add.w	r1, r3, #4
 80096fe:	6029      	str	r1, [r5, #0]
 8009700:	d501      	bpl.n	8009706 <_printf_i+0xbe>
 8009702:	681e      	ldr	r6, [r3, #0]
 8009704:	e003      	b.n	800970e <_printf_i+0xc6>
 8009706:	0646      	lsls	r6, r0, #25
 8009708:	d5fb      	bpl.n	8009702 <_printf_i+0xba>
 800970a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800970e:	2e00      	cmp	r6, #0
 8009710:	da03      	bge.n	800971a <_printf_i+0xd2>
 8009712:	232d      	movs	r3, #45	; 0x2d
 8009714:	4276      	negs	r6, r6
 8009716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800971a:	485a      	ldr	r0, [pc, #360]	; (8009884 <_printf_i+0x23c>)
 800971c:	230a      	movs	r3, #10
 800971e:	e012      	b.n	8009746 <_printf_i+0xfe>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	6820      	ldr	r0, [r4, #0]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	6029      	str	r1, [r5, #0]
 8009728:	0605      	lsls	r5, r0, #24
 800972a:	d501      	bpl.n	8009730 <_printf_i+0xe8>
 800972c:	681e      	ldr	r6, [r3, #0]
 800972e:	e002      	b.n	8009736 <_printf_i+0xee>
 8009730:	0641      	lsls	r1, r0, #25
 8009732:	d5fb      	bpl.n	800972c <_printf_i+0xe4>
 8009734:	881e      	ldrh	r6, [r3, #0]
 8009736:	4853      	ldr	r0, [pc, #332]	; (8009884 <_printf_i+0x23c>)
 8009738:	2f6f      	cmp	r7, #111	; 0x6f
 800973a:	bf0c      	ite	eq
 800973c:	2308      	moveq	r3, #8
 800973e:	230a      	movne	r3, #10
 8009740:	2100      	movs	r1, #0
 8009742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009746:	6865      	ldr	r5, [r4, #4]
 8009748:	60a5      	str	r5, [r4, #8]
 800974a:	2d00      	cmp	r5, #0
 800974c:	bfa2      	ittt	ge
 800974e:	6821      	ldrge	r1, [r4, #0]
 8009750:	f021 0104 	bicge.w	r1, r1, #4
 8009754:	6021      	strge	r1, [r4, #0]
 8009756:	b90e      	cbnz	r6, 800975c <_printf_i+0x114>
 8009758:	2d00      	cmp	r5, #0
 800975a:	d04b      	beq.n	80097f4 <_printf_i+0x1ac>
 800975c:	4615      	mov	r5, r2
 800975e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009762:	fb03 6711 	mls	r7, r3, r1, r6
 8009766:	5dc7      	ldrb	r7, [r0, r7]
 8009768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800976c:	4637      	mov	r7, r6
 800976e:	42bb      	cmp	r3, r7
 8009770:	460e      	mov	r6, r1
 8009772:	d9f4      	bls.n	800975e <_printf_i+0x116>
 8009774:	2b08      	cmp	r3, #8
 8009776:	d10b      	bne.n	8009790 <_printf_i+0x148>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	07de      	lsls	r6, r3, #31
 800977c:	d508      	bpl.n	8009790 <_printf_i+0x148>
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	6861      	ldr	r1, [r4, #4]
 8009782:	4299      	cmp	r1, r3
 8009784:	bfde      	ittt	le
 8009786:	2330      	movle	r3, #48	; 0x30
 8009788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800978c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009790:	1b52      	subs	r2, r2, r5
 8009792:	6122      	str	r2, [r4, #16]
 8009794:	f8cd a000 	str.w	sl, [sp]
 8009798:	464b      	mov	r3, r9
 800979a:	aa03      	add	r2, sp, #12
 800979c:	4621      	mov	r1, r4
 800979e:	4640      	mov	r0, r8
 80097a0:	f7ff fee4 	bl	800956c <_printf_common>
 80097a4:	3001      	adds	r0, #1
 80097a6:	d14a      	bne.n	800983e <_printf_i+0x1f6>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	b004      	add	sp, #16
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	f043 0320 	orr.w	r3, r3, #32
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	4833      	ldr	r0, [pc, #204]	; (8009888 <_printf_i+0x240>)
 80097bc:	2778      	movs	r7, #120	; 0x78
 80097be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	6829      	ldr	r1, [r5, #0]
 80097c6:	061f      	lsls	r7, r3, #24
 80097c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097cc:	d402      	bmi.n	80097d4 <_printf_i+0x18c>
 80097ce:	065f      	lsls	r7, r3, #25
 80097d0:	bf48      	it	mi
 80097d2:	b2b6      	uxthmi	r6, r6
 80097d4:	07df      	lsls	r7, r3, #31
 80097d6:	bf48      	it	mi
 80097d8:	f043 0320 	orrmi.w	r3, r3, #32
 80097dc:	6029      	str	r1, [r5, #0]
 80097de:	bf48      	it	mi
 80097e0:	6023      	strmi	r3, [r4, #0]
 80097e2:	b91e      	cbnz	r6, 80097ec <_printf_i+0x1a4>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	f023 0320 	bic.w	r3, r3, #32
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	2310      	movs	r3, #16
 80097ee:	e7a7      	b.n	8009740 <_printf_i+0xf8>
 80097f0:	4824      	ldr	r0, [pc, #144]	; (8009884 <_printf_i+0x23c>)
 80097f2:	e7e4      	b.n	80097be <_printf_i+0x176>
 80097f4:	4615      	mov	r5, r2
 80097f6:	e7bd      	b.n	8009774 <_printf_i+0x12c>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	6826      	ldr	r6, [r4, #0]
 80097fc:	6961      	ldr	r1, [r4, #20]
 80097fe:	1d18      	adds	r0, r3, #4
 8009800:	6028      	str	r0, [r5, #0]
 8009802:	0635      	lsls	r5, r6, #24
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	d501      	bpl.n	800980c <_printf_i+0x1c4>
 8009808:	6019      	str	r1, [r3, #0]
 800980a:	e002      	b.n	8009812 <_printf_i+0x1ca>
 800980c:	0670      	lsls	r0, r6, #25
 800980e:	d5fb      	bpl.n	8009808 <_printf_i+0x1c0>
 8009810:	8019      	strh	r1, [r3, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	4615      	mov	r5, r2
 8009818:	e7bc      	b.n	8009794 <_printf_i+0x14c>
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	602a      	str	r2, [r5, #0]
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	2100      	movs	r1, #0
 8009826:	4628      	mov	r0, r5
 8009828:	f7f6 fcd2 	bl	80001d0 <memchr>
 800982c:	b108      	cbz	r0, 8009832 <_printf_i+0x1ea>
 800982e:	1b40      	subs	r0, r0, r5
 8009830:	6060      	str	r0, [r4, #4]
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	2300      	movs	r3, #0
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983c:	e7aa      	b.n	8009794 <_printf_i+0x14c>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	462a      	mov	r2, r5
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d0ad      	beq.n	80097a8 <_printf_i+0x160>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	079b      	lsls	r3, r3, #30
 8009850:	d413      	bmi.n	800987a <_printf_i+0x232>
 8009852:	68e0      	ldr	r0, [r4, #12]
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	4298      	cmp	r0, r3
 8009858:	bfb8      	it	lt
 800985a:	4618      	movlt	r0, r3
 800985c:	e7a6      	b.n	80097ac <_printf_i+0x164>
 800985e:	2301      	movs	r3, #1
 8009860:	4632      	mov	r2, r6
 8009862:	4649      	mov	r1, r9
 8009864:	4640      	mov	r0, r8
 8009866:	47d0      	blx	sl
 8009868:	3001      	adds	r0, #1
 800986a:	d09d      	beq.n	80097a8 <_printf_i+0x160>
 800986c:	3501      	adds	r5, #1
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	9903      	ldr	r1, [sp, #12]
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	42ab      	cmp	r3, r5
 8009876:	dcf2      	bgt.n	800985e <_printf_i+0x216>
 8009878:	e7eb      	b.n	8009852 <_printf_i+0x20a>
 800987a:	2500      	movs	r5, #0
 800987c:	f104 0619 	add.w	r6, r4, #25
 8009880:	e7f5      	b.n	800986e <_printf_i+0x226>
 8009882:	bf00      	nop
 8009884:	0802071e 	.word	0x0802071e
 8009888:	0802072f 	.word	0x0802072f

0800988c <std>:
 800988c:	2300      	movs	r3, #0
 800988e:	b510      	push	{r4, lr}
 8009890:	4604      	mov	r4, r0
 8009892:	e9c0 3300 	strd	r3, r3, [r0]
 8009896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800989a:	6083      	str	r3, [r0, #8]
 800989c:	8181      	strh	r1, [r0, #12]
 800989e:	6643      	str	r3, [r0, #100]	; 0x64
 80098a0:	81c2      	strh	r2, [r0, #14]
 80098a2:	6183      	str	r3, [r0, #24]
 80098a4:	4619      	mov	r1, r3
 80098a6:	2208      	movs	r2, #8
 80098a8:	305c      	adds	r0, #92	; 0x5c
 80098aa:	f000 f9ff 	bl	8009cac <memset>
 80098ae:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <std+0x58>)
 80098b0:	6263      	str	r3, [r4, #36]	; 0x24
 80098b2:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <std+0x5c>)
 80098b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80098b6:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <std+0x60>)
 80098b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <std+0x64>)
 80098bc:	6323      	str	r3, [r4, #48]	; 0x30
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <std+0x68>)
 80098c0:	6224      	str	r4, [r4, #32]
 80098c2:	429c      	cmp	r4, r3
 80098c4:	d006      	beq.n	80098d4 <std+0x48>
 80098c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80098ca:	4294      	cmp	r4, r2
 80098cc:	d002      	beq.n	80098d4 <std+0x48>
 80098ce:	33d0      	adds	r3, #208	; 0xd0
 80098d0:	429c      	cmp	r4, r3
 80098d2:	d105      	bne.n	80098e0 <std+0x54>
 80098d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098dc:	f000 ba72 	b.w	8009dc4 <__retarget_lock_init_recursive>
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	bf00      	nop
 80098e4:	08009afd 	.word	0x08009afd
 80098e8:	08009b1f 	.word	0x08009b1f
 80098ec:	08009b57 	.word	0x08009b57
 80098f0:	08009b7b 	.word	0x08009b7b
 80098f4:	20007db4 	.word	0x20007db4

080098f8 <stdio_exit_handler>:
 80098f8:	4a02      	ldr	r2, [pc, #8]	; (8009904 <stdio_exit_handler+0xc>)
 80098fa:	4903      	ldr	r1, [pc, #12]	; (8009908 <stdio_exit_handler+0x10>)
 80098fc:	4803      	ldr	r0, [pc, #12]	; (800990c <stdio_exit_handler+0x14>)
 80098fe:	f000 b869 	b.w	80099d4 <_fwalk_sglue>
 8009902:	bf00      	nop
 8009904:	20000018 	.word	0x20000018
 8009908:	0800b661 	.word	0x0800b661
 800990c:	20000024 	.word	0x20000024

08009910 <cleanup_stdio>:
 8009910:	6841      	ldr	r1, [r0, #4]
 8009912:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <cleanup_stdio+0x34>)
 8009914:	4299      	cmp	r1, r3
 8009916:	b510      	push	{r4, lr}
 8009918:	4604      	mov	r4, r0
 800991a:	d001      	beq.n	8009920 <cleanup_stdio+0x10>
 800991c:	f001 fea0 	bl	800b660 <_fflush_r>
 8009920:	68a1      	ldr	r1, [r4, #8]
 8009922:	4b09      	ldr	r3, [pc, #36]	; (8009948 <cleanup_stdio+0x38>)
 8009924:	4299      	cmp	r1, r3
 8009926:	d002      	beq.n	800992e <cleanup_stdio+0x1e>
 8009928:	4620      	mov	r0, r4
 800992a:	f001 fe99 	bl	800b660 <_fflush_r>
 800992e:	68e1      	ldr	r1, [r4, #12]
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <cleanup_stdio+0x3c>)
 8009932:	4299      	cmp	r1, r3
 8009934:	d004      	beq.n	8009940 <cleanup_stdio+0x30>
 8009936:	4620      	mov	r0, r4
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993c:	f001 be90 	b.w	800b660 <_fflush_r>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	20007db4 	.word	0x20007db4
 8009948:	20007e1c 	.word	0x20007e1c
 800994c:	20007e84 	.word	0x20007e84

08009950 <global_stdio_init.part.0>:
 8009950:	b510      	push	{r4, lr}
 8009952:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <global_stdio_init.part.0+0x30>)
 8009954:	4c0b      	ldr	r4, [pc, #44]	; (8009984 <global_stdio_init.part.0+0x34>)
 8009956:	4a0c      	ldr	r2, [pc, #48]	; (8009988 <global_stdio_init.part.0+0x38>)
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	4620      	mov	r0, r4
 800995c:	2200      	movs	r2, #0
 800995e:	2104      	movs	r1, #4
 8009960:	f7ff ff94 	bl	800988c <std>
 8009964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009968:	2201      	movs	r2, #1
 800996a:	2109      	movs	r1, #9
 800996c:	f7ff ff8e 	bl	800988c <std>
 8009970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009974:	2202      	movs	r2, #2
 8009976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800997a:	2112      	movs	r1, #18
 800997c:	f7ff bf86 	b.w	800988c <std>
 8009980:	20007eec 	.word	0x20007eec
 8009984:	20007db4 	.word	0x20007db4
 8009988:	080098f9 	.word	0x080098f9

0800998c <__sfp_lock_acquire>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__sfp_lock_acquire+0x8>)
 800998e:	f000 ba1a 	b.w	8009dc6 <__retarget_lock_acquire_recursive>
 8009992:	bf00      	nop
 8009994:	20007ef5 	.word	0x20007ef5

08009998 <__sfp_lock_release>:
 8009998:	4801      	ldr	r0, [pc, #4]	; (80099a0 <__sfp_lock_release+0x8>)
 800999a:	f000 ba15 	b.w	8009dc8 <__retarget_lock_release_recursive>
 800999e:	bf00      	nop
 80099a0:	20007ef5 	.word	0x20007ef5

080099a4 <__sinit>:
 80099a4:	b510      	push	{r4, lr}
 80099a6:	4604      	mov	r4, r0
 80099a8:	f7ff fff0 	bl	800998c <__sfp_lock_acquire>
 80099ac:	6a23      	ldr	r3, [r4, #32]
 80099ae:	b11b      	cbz	r3, 80099b8 <__sinit+0x14>
 80099b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b4:	f7ff bff0 	b.w	8009998 <__sfp_lock_release>
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <__sinit+0x28>)
 80099ba:	6223      	str	r3, [r4, #32]
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <__sinit+0x2c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f5      	bne.n	80099b0 <__sinit+0xc>
 80099c4:	f7ff ffc4 	bl	8009950 <global_stdio_init.part.0>
 80099c8:	e7f2      	b.n	80099b0 <__sinit+0xc>
 80099ca:	bf00      	nop
 80099cc:	08009911 	.word	0x08009911
 80099d0:	20007eec 	.word	0x20007eec

080099d4 <_fwalk_sglue>:
 80099d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d8:	4607      	mov	r7, r0
 80099da:	4688      	mov	r8, r1
 80099dc:	4614      	mov	r4, r2
 80099de:	2600      	movs	r6, #0
 80099e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099e4:	f1b9 0901 	subs.w	r9, r9, #1
 80099e8:	d505      	bpl.n	80099f6 <_fwalk_sglue+0x22>
 80099ea:	6824      	ldr	r4, [r4, #0]
 80099ec:	2c00      	cmp	r4, #0
 80099ee:	d1f7      	bne.n	80099e0 <_fwalk_sglue+0xc>
 80099f0:	4630      	mov	r0, r6
 80099f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f6:	89ab      	ldrh	r3, [r5, #12]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d907      	bls.n	8009a0c <_fwalk_sglue+0x38>
 80099fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a00:	3301      	adds	r3, #1
 8009a02:	d003      	beq.n	8009a0c <_fwalk_sglue+0x38>
 8009a04:	4629      	mov	r1, r5
 8009a06:	4638      	mov	r0, r7
 8009a08:	47c0      	blx	r8
 8009a0a:	4306      	orrs	r6, r0
 8009a0c:	3568      	adds	r5, #104	; 0x68
 8009a0e:	e7e9      	b.n	80099e4 <_fwalk_sglue+0x10>

08009a10 <iprintf>:
 8009a10:	b40f      	push	{r0, r1, r2, r3}
 8009a12:	b507      	push	{r0, r1, r2, lr}
 8009a14:	4906      	ldr	r1, [pc, #24]	; (8009a30 <iprintf+0x20>)
 8009a16:	ab04      	add	r3, sp, #16
 8009a18:	6808      	ldr	r0, [r1, #0]
 8009a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1e:	6881      	ldr	r1, [r0, #8]
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	f001 fc7d 	bl	800b320 <_vfiprintf_r>
 8009a26:	b003      	add	sp, #12
 8009a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a2c:	b004      	add	sp, #16
 8009a2e:	4770      	bx	lr
 8009a30:	20000070 	.word	0x20000070

08009a34 <putchar>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <putchar+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	6882      	ldr	r2, [r0, #8]
 8009a3c:	f001 be9a 	b.w	800b774 <_putc_r>
 8009a40:	20000070 	.word	0x20000070

08009a44 <_puts_r>:
 8009a44:	6a03      	ldr	r3, [r0, #32]
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	6884      	ldr	r4, [r0, #8]
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	460e      	mov	r6, r1
 8009a4e:	b90b      	cbnz	r3, 8009a54 <_puts_r+0x10>
 8009a50:	f7ff ffa8 	bl	80099a4 <__sinit>
 8009a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a56:	07db      	lsls	r3, r3, #31
 8009a58:	d405      	bmi.n	8009a66 <_puts_r+0x22>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	0598      	lsls	r0, r3, #22
 8009a5e:	d402      	bmi.n	8009a66 <_puts_r+0x22>
 8009a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a62:	f000 f9b0 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	0719      	lsls	r1, r3, #28
 8009a6a:	d513      	bpl.n	8009a94 <_puts_r+0x50>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	b18b      	cbz	r3, 8009a94 <_puts_r+0x50>
 8009a70:	3e01      	subs	r6, #1
 8009a72:	68a3      	ldr	r3, [r4, #8]
 8009a74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	60a3      	str	r3, [r4, #8]
 8009a7c:	b9e9      	cbnz	r1, 8009aba <_puts_r+0x76>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da2e      	bge.n	8009ae0 <_puts_r+0x9c>
 8009a82:	4622      	mov	r2, r4
 8009a84:	210a      	movs	r1, #10
 8009a86:	4628      	mov	r0, r5
 8009a88:	f000 f87b 	bl	8009b82 <__swbuf_r>
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d007      	beq.n	8009aa0 <_puts_r+0x5c>
 8009a90:	250a      	movs	r5, #10
 8009a92:	e007      	b.n	8009aa4 <_puts_r+0x60>
 8009a94:	4621      	mov	r1, r4
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f8b0 	bl	8009bfc <__swsetup_r>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d0e7      	beq.n	8009a70 <_puts_r+0x2c>
 8009aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8009aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa6:	07da      	lsls	r2, r3, #31
 8009aa8:	d405      	bmi.n	8009ab6 <_puts_r+0x72>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d402      	bmi.n	8009ab6 <_puts_r+0x72>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f000 f989 	bl	8009dc8 <__retarget_lock_release_recursive>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da04      	bge.n	8009ac8 <_puts_r+0x84>
 8009abe:	69a2      	ldr	r2, [r4, #24]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	dc06      	bgt.n	8009ad2 <_puts_r+0x8e>
 8009ac4:	290a      	cmp	r1, #10
 8009ac6:	d004      	beq.n	8009ad2 <_puts_r+0x8e>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	6022      	str	r2, [r4, #0]
 8009ace:	7019      	strb	r1, [r3, #0]
 8009ad0:	e7cf      	b.n	8009a72 <_puts_r+0x2e>
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f000 f854 	bl	8009b82 <__swbuf_r>
 8009ada:	3001      	adds	r0, #1
 8009adc:	d1c9      	bne.n	8009a72 <_puts_r+0x2e>
 8009ade:	e7df      	b.n	8009aa0 <_puts_r+0x5c>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	250a      	movs	r5, #10
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	701d      	strb	r5, [r3, #0]
 8009aea:	e7db      	b.n	8009aa4 <_puts_r+0x60>

08009aec <puts>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <puts+0xc>)
 8009aee:	4601      	mov	r1, r0
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	f7ff bfa7 	b.w	8009a44 <_puts_r>
 8009af6:	bf00      	nop
 8009af8:	20000070 	.word	0x20000070

08009afc <__sread>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	460c      	mov	r4, r1
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	f000 f900 	bl	8009d08 <_read_r>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	bfab      	itete	ge
 8009b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b10:	181b      	addge	r3, r3, r0
 8009b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b16:	bfac      	ite	ge
 8009b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b1a:	81a3      	strhlt	r3, [r4, #12]
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <__swrite>:
 8009b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b22:	461f      	mov	r7, r3
 8009b24:	898b      	ldrh	r3, [r1, #12]
 8009b26:	05db      	lsls	r3, r3, #23
 8009b28:	4605      	mov	r5, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	d505      	bpl.n	8009b3c <__swrite+0x1e>
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	2302      	movs	r3, #2
 8009b36:	2200      	movs	r2, #0
 8009b38:	f000 f8d4 	bl	8009ce4 <_lseek_r>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	4632      	mov	r2, r6
 8009b4a:	463b      	mov	r3, r7
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b52:	f000 b8fb 	b.w	8009d4c <_write_r>

08009b56 <__sseek>:
 8009b56:	b510      	push	{r4, lr}
 8009b58:	460c      	mov	r4, r1
 8009b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5e:	f000 f8c1 	bl	8009ce4 <_lseek_r>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	bf15      	itete	ne
 8009b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b72:	81a3      	strheq	r3, [r4, #12]
 8009b74:	bf18      	it	ne
 8009b76:	81a3      	strhne	r3, [r4, #12]
 8009b78:	bd10      	pop	{r4, pc}

08009b7a <__sclose>:
 8009b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7e:	f000 b8a1 	b.w	8009cc4 <_close_r>

08009b82 <__swbuf_r>:
 8009b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b84:	460e      	mov	r6, r1
 8009b86:	4614      	mov	r4, r2
 8009b88:	4605      	mov	r5, r0
 8009b8a:	b118      	cbz	r0, 8009b94 <__swbuf_r+0x12>
 8009b8c:	6a03      	ldr	r3, [r0, #32]
 8009b8e:	b90b      	cbnz	r3, 8009b94 <__swbuf_r+0x12>
 8009b90:	f7ff ff08 	bl	80099a4 <__sinit>
 8009b94:	69a3      	ldr	r3, [r4, #24]
 8009b96:	60a3      	str	r3, [r4, #8]
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	071a      	lsls	r2, r3, #28
 8009b9c:	d525      	bpl.n	8009bea <__swbuf_r+0x68>
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	b31b      	cbz	r3, 8009bea <__swbuf_r+0x68>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	6922      	ldr	r2, [r4, #16]
 8009ba6:	1a98      	subs	r0, r3, r2
 8009ba8:	6963      	ldr	r3, [r4, #20]
 8009baa:	b2f6      	uxtb	r6, r6
 8009bac:	4283      	cmp	r3, r0
 8009bae:	4637      	mov	r7, r6
 8009bb0:	dc04      	bgt.n	8009bbc <__swbuf_r+0x3a>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f001 fd53 	bl	800b660 <_fflush_r>
 8009bba:	b9e0      	cbnz	r0, 8009bf6 <__swbuf_r+0x74>
 8009bbc:	68a3      	ldr	r3, [r4, #8]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	60a3      	str	r3, [r4, #8]
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	701e      	strb	r6, [r3, #0]
 8009bca:	6962      	ldr	r2, [r4, #20]
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d004      	beq.n	8009bdc <__swbuf_r+0x5a>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	07db      	lsls	r3, r3, #31
 8009bd6:	d506      	bpl.n	8009be6 <__swbuf_r+0x64>
 8009bd8:	2e0a      	cmp	r6, #10
 8009bda:	d104      	bne.n	8009be6 <__swbuf_r+0x64>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4628      	mov	r0, r5
 8009be0:	f001 fd3e 	bl	800b660 <_fflush_r>
 8009be4:	b938      	cbnz	r0, 8009bf6 <__swbuf_r+0x74>
 8009be6:	4638      	mov	r0, r7
 8009be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bea:	4621      	mov	r1, r4
 8009bec:	4628      	mov	r0, r5
 8009bee:	f000 f805 	bl	8009bfc <__swsetup_r>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0d5      	beq.n	8009ba2 <__swbuf_r+0x20>
 8009bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8009bfa:	e7f4      	b.n	8009be6 <__swbuf_r+0x64>

08009bfc <__swsetup_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4b2a      	ldr	r3, [pc, #168]	; (8009ca8 <__swsetup_r+0xac>)
 8009c00:	4605      	mov	r5, r0
 8009c02:	6818      	ldr	r0, [r3, #0]
 8009c04:	460c      	mov	r4, r1
 8009c06:	b118      	cbz	r0, 8009c10 <__swsetup_r+0x14>
 8009c08:	6a03      	ldr	r3, [r0, #32]
 8009c0a:	b90b      	cbnz	r3, 8009c10 <__swsetup_r+0x14>
 8009c0c:	f7ff feca 	bl	80099a4 <__sinit>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c16:	0718      	lsls	r0, r3, #28
 8009c18:	d422      	bmi.n	8009c60 <__swsetup_r+0x64>
 8009c1a:	06d9      	lsls	r1, r3, #27
 8009c1c:	d407      	bmi.n	8009c2e <__swsetup_r+0x32>
 8009c1e:	2309      	movs	r3, #9
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e034      	b.n	8009c98 <__swsetup_r+0x9c>
 8009c2e:	0758      	lsls	r0, r3, #29
 8009c30:	d512      	bpl.n	8009c58 <__swsetup_r+0x5c>
 8009c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c34:	b141      	cbz	r1, 8009c48 <__swsetup_r+0x4c>
 8009c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	d002      	beq.n	8009c44 <__swsetup_r+0x48>
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 ff74 	bl	800ab2c <_free_r>
 8009c44:	2300      	movs	r3, #0
 8009c46:	6363      	str	r3, [r4, #52]	; 0x34
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	2300      	movs	r3, #0
 8009c52:	6063      	str	r3, [r4, #4]
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f043 0308 	orr.w	r3, r3, #8
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	b94b      	cbnz	r3, 8009c78 <__swsetup_r+0x7c>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c6e:	d003      	beq.n	8009c78 <__swsetup_r+0x7c>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f001 fd42 	bl	800b6fc <__smakebuf_r>
 8009c78:	89a0      	ldrh	r0, [r4, #12]
 8009c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c7e:	f010 0301 	ands.w	r3, r0, #1
 8009c82:	d00a      	beq.n	8009c9a <__swsetup_r+0x9e>
 8009c84:	2300      	movs	r3, #0
 8009c86:	60a3      	str	r3, [r4, #8]
 8009c88:	6963      	ldr	r3, [r4, #20]
 8009c8a:	425b      	negs	r3, r3
 8009c8c:	61a3      	str	r3, [r4, #24]
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	b943      	cbnz	r3, 8009ca4 <__swsetup_r+0xa8>
 8009c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c96:	d1c4      	bne.n	8009c22 <__swsetup_r+0x26>
 8009c98:	bd38      	pop	{r3, r4, r5, pc}
 8009c9a:	0781      	lsls	r1, r0, #30
 8009c9c:	bf58      	it	pl
 8009c9e:	6963      	ldrpl	r3, [r4, #20]
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	e7f4      	b.n	8009c8e <__swsetup_r+0x92>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e7f7      	b.n	8009c98 <__swsetup_r+0x9c>
 8009ca8:	20000070 	.word	0x20000070

08009cac <memset>:
 8009cac:	4402      	add	r2, r0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d100      	bne.n	8009cb6 <memset+0xa>
 8009cb4:	4770      	bx	lr
 8009cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cba:	e7f9      	b.n	8009cb0 <memset+0x4>

08009cbc <_localeconv_r>:
 8009cbc:	4800      	ldr	r0, [pc, #0]	; (8009cc0 <_localeconv_r+0x4>)
 8009cbe:	4770      	bx	lr
 8009cc0:	20000164 	.word	0x20000164

08009cc4 <_close_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d06      	ldr	r5, [pc, #24]	; (8009ce0 <_close_r+0x1c>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	602b      	str	r3, [r5, #0]
 8009cd0:	f7f9 f81d 	bl	8002d0e <_close>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_close_r+0x1a>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_close_r+0x1a>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20007ef0 	.word	0x20007ef0

08009ce4 <_lseek_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_lseek_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f9 f832 	bl	8002d5c <_lseek>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_lseek_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_lseek_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20007ef0 	.word	0x20007ef0

08009d08 <_read_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	; (8009d28 <_read_r+0x20>)
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	4608      	mov	r0, r1
 8009d10:	4611      	mov	r1, r2
 8009d12:	2200      	movs	r2, #0
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	f7f8 ffdc 	bl	8002cd4 <_read>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_read_r+0x1e>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_read_r+0x1e>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20007ef0 	.word	0x20007ef0

08009d2c <_sbrk_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d06      	ldr	r5, [pc, #24]	; (8009d48 <_sbrk_r+0x1c>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7f9 f81e 	bl	8002d78 <_sbrk>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_sbrk_r+0x1a>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_sbrk_r+0x1a>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20007ef0 	.word	0x20007ef0

08009d4c <_write_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_write_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f8 fc5c 	bl	8002618 <_write>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_write_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_write_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20007ef0 	.word	0x20007ef0

08009d70 <__errno>:
 8009d70:	4b01      	ldr	r3, [pc, #4]	; (8009d78 <__errno+0x8>)
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20000070 	.word	0x20000070

08009d7c <__libc_init_array>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	4d0d      	ldr	r5, [pc, #52]	; (8009db4 <__libc_init_array+0x38>)
 8009d80:	4c0d      	ldr	r4, [pc, #52]	; (8009db8 <__libc_init_array+0x3c>)
 8009d82:	1b64      	subs	r4, r4, r5
 8009d84:	10a4      	asrs	r4, r4, #2
 8009d86:	2600      	movs	r6, #0
 8009d88:	42a6      	cmp	r6, r4
 8009d8a:	d109      	bne.n	8009da0 <__libc_init_array+0x24>
 8009d8c:	4d0b      	ldr	r5, [pc, #44]	; (8009dbc <__libc_init_array+0x40>)
 8009d8e:	4c0c      	ldr	r4, [pc, #48]	; (8009dc0 <__libc_init_array+0x44>)
 8009d90:	f003 f878 	bl	800ce84 <_init>
 8009d94:	1b64      	subs	r4, r4, r5
 8009d96:	10a4      	asrs	r4, r4, #2
 8009d98:	2600      	movs	r6, #0
 8009d9a:	42a6      	cmp	r6, r4
 8009d9c:	d105      	bne.n	8009daa <__libc_init_array+0x2e>
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da4:	4798      	blx	r3
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7ee      	b.n	8009d88 <__libc_init_array+0xc>
 8009daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dae:	4798      	blx	r3
 8009db0:	3601      	adds	r6, #1
 8009db2:	e7f2      	b.n	8009d9a <__libc_init_array+0x1e>
 8009db4:	08020ab8 	.word	0x08020ab8
 8009db8:	08020ab8 	.word	0x08020ab8
 8009dbc:	08020ab8 	.word	0x08020ab8
 8009dc0:	08020abc 	.word	0x08020abc

08009dc4 <__retarget_lock_init_recursive>:
 8009dc4:	4770      	bx	lr

08009dc6 <__retarget_lock_acquire_recursive>:
 8009dc6:	4770      	bx	lr

08009dc8 <__retarget_lock_release_recursive>:
 8009dc8:	4770      	bx	lr

08009dca <memcpy>:
 8009dca:	440a      	add	r2, r1
 8009dcc:	4291      	cmp	r1, r2
 8009dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dd2:	d100      	bne.n	8009dd6 <memcpy+0xc>
 8009dd4:	4770      	bx	lr
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009de0:	4291      	cmp	r1, r2
 8009de2:	d1f9      	bne.n	8009dd8 <memcpy+0xe>
 8009de4:	bd10      	pop	{r4, pc}
	...

08009de8 <frexpf>:
 8009de8:	ee10 3a10 	vmov	r3, s0
 8009dec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009df0:	2100      	movs	r1, #0
 8009df2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009df6:	6001      	str	r1, [r0, #0]
 8009df8:	da19      	bge.n	8009e2e <frexpf+0x46>
 8009dfa:	b1c2      	cbz	r2, 8009e2e <frexpf+0x46>
 8009dfc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009e00:	d10a      	bne.n	8009e18 <frexpf+0x30>
 8009e02:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009e30 <frexpf+0x48>
 8009e06:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009e0a:	f06f 0118 	mvn.w	r1, #24
 8009e0e:	ee17 3a90 	vmov	r3, s15
 8009e12:	6001      	str	r1, [r0, #0]
 8009e14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e18:	6801      	ldr	r1, [r0, #0]
 8009e1a:	15d2      	asrs	r2, r2, #23
 8009e1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e20:	3a7e      	subs	r2, #126	; 0x7e
 8009e22:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8009e26:	4411      	add	r1, r2
 8009e28:	ee00 3a10 	vmov	s0, r3
 8009e2c:	6001      	str	r1, [r0, #0]
 8009e2e:	4770      	bx	lr
 8009e30:	4c000000 	.word	0x4c000000

08009e34 <quorem>:
 8009e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e38:	6903      	ldr	r3, [r0, #16]
 8009e3a:	690c      	ldr	r4, [r1, #16]
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	4607      	mov	r7, r0
 8009e40:	db7e      	blt.n	8009f40 <quorem+0x10c>
 8009e42:	3c01      	subs	r4, #1
 8009e44:	f101 0814 	add.w	r8, r1, #20
 8009e48:	f100 0514 	add.w	r5, r0, #20
 8009e4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e66:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e6a:	d331      	bcc.n	8009ed0 <quorem+0x9c>
 8009e6c:	f04f 0e00 	mov.w	lr, #0
 8009e70:	4640      	mov	r0, r8
 8009e72:	46ac      	mov	ip, r5
 8009e74:	46f2      	mov	sl, lr
 8009e76:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e7a:	b293      	uxth	r3, r2
 8009e7c:	fb06 e303 	mla	r3, r6, r3, lr
 8009e80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e84:	0c1a      	lsrs	r2, r3, #16
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	ebaa 0303 	sub.w	r3, sl, r3
 8009e8c:	f8dc a000 	ldr.w	sl, [ip]
 8009e90:	fa13 f38a 	uxtah	r3, r3, sl
 8009e94:	fb06 220e 	mla	r2, r6, lr, r2
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ea0:	b292      	uxth	r2, r2
 8009ea2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ea6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eaa:	f8bd 3000 	ldrh.w	r3, [sp]
 8009eae:	4581      	cmp	r9, r0
 8009eb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb4:	f84c 3b04 	str.w	r3, [ip], #4
 8009eb8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ebc:	d2db      	bcs.n	8009e76 <quorem+0x42>
 8009ebe:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ec2:	b92b      	cbnz	r3, 8009ed0 <quorem+0x9c>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	3b04      	subs	r3, #4
 8009ec8:	429d      	cmp	r5, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	d32c      	bcc.n	8009f28 <quorem+0xf4>
 8009ece:	613c      	str	r4, [r7, #16]
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f001 f8fb 	bl	800b0cc <__mcmp>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	db22      	blt.n	8009f20 <quorem+0xec>
 8009eda:	3601      	adds	r6, #1
 8009edc:	4629      	mov	r1, r5
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ee4:	f8d1 c000 	ldr.w	ip, [r1]
 8009ee8:	b293      	uxth	r3, r2
 8009eea:	1ac3      	subs	r3, r0, r3
 8009eec:	0c12      	lsrs	r2, r2, #16
 8009eee:	fa13 f38c 	uxtah	r3, r3, ip
 8009ef2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ef6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f00:	45c1      	cmp	r9, r8
 8009f02:	f841 3b04 	str.w	r3, [r1], #4
 8009f06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f0a:	d2e9      	bcs.n	8009ee0 <quorem+0xac>
 8009f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f14:	b922      	cbnz	r2, 8009f20 <quorem+0xec>
 8009f16:	3b04      	subs	r3, #4
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	d30a      	bcc.n	8009f34 <quorem+0x100>
 8009f1e:	613c      	str	r4, [r7, #16]
 8009f20:	4630      	mov	r0, r6
 8009f22:	b003      	add	sp, #12
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	6812      	ldr	r2, [r2, #0]
 8009f2a:	3b04      	subs	r3, #4
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	d1ce      	bne.n	8009ece <quorem+0x9a>
 8009f30:	3c01      	subs	r4, #1
 8009f32:	e7c9      	b.n	8009ec8 <quorem+0x94>
 8009f34:	6812      	ldr	r2, [r2, #0]
 8009f36:	3b04      	subs	r3, #4
 8009f38:	2a00      	cmp	r2, #0
 8009f3a:	d1f0      	bne.n	8009f1e <quorem+0xea>
 8009f3c:	3c01      	subs	r4, #1
 8009f3e:	e7eb      	b.n	8009f18 <quorem+0xe4>
 8009f40:	2000      	movs	r0, #0
 8009f42:	e7ee      	b.n	8009f22 <quorem+0xee>
 8009f44:	0000      	movs	r0, r0
	...

08009f48 <_dtoa_r>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	ed2d 8b04 	vpush	{d8-d9}
 8009f50:	69c5      	ldr	r5, [r0, #28]
 8009f52:	b093      	sub	sp, #76	; 0x4c
 8009f54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f58:	ec57 6b10 	vmov	r6, r7, d0
 8009f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f60:	9107      	str	r1, [sp, #28]
 8009f62:	4604      	mov	r4, r0
 8009f64:	920a      	str	r2, [sp, #40]	; 0x28
 8009f66:	930d      	str	r3, [sp, #52]	; 0x34
 8009f68:	b975      	cbnz	r5, 8009f88 <_dtoa_r+0x40>
 8009f6a:	2010      	movs	r0, #16
 8009f6c:	f000 fe2a 	bl	800abc4 <malloc>
 8009f70:	4602      	mov	r2, r0
 8009f72:	61e0      	str	r0, [r4, #28]
 8009f74:	b920      	cbnz	r0, 8009f80 <_dtoa_r+0x38>
 8009f76:	4bae      	ldr	r3, [pc, #696]	; (800a230 <_dtoa_r+0x2e8>)
 8009f78:	21ef      	movs	r1, #239	; 0xef
 8009f7a:	48ae      	ldr	r0, [pc, #696]	; (800a234 <_dtoa_r+0x2ec>)
 8009f7c:	f001 fc50 	bl	800b820 <__assert_func>
 8009f80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f84:	6005      	str	r5, [r0, #0]
 8009f86:	60c5      	str	r5, [r0, #12]
 8009f88:	69e3      	ldr	r3, [r4, #28]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	b151      	cbz	r1, 8009fa4 <_dtoa_r+0x5c>
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	604a      	str	r2, [r1, #4]
 8009f92:	2301      	movs	r3, #1
 8009f94:	4093      	lsls	r3, r2
 8009f96:	608b      	str	r3, [r1, #8]
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fe5b 	bl	800ac54 <_Bfree>
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	1e3b      	subs	r3, r7, #0
 8009fa6:	bfbb      	ittet	lt
 8009fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fac:	9303      	strlt	r3, [sp, #12]
 8009fae:	2300      	movge	r3, #0
 8009fb0:	2201      	movlt	r2, #1
 8009fb2:	bfac      	ite	ge
 8009fb4:	f8c8 3000 	strge.w	r3, [r8]
 8009fb8:	f8c8 2000 	strlt.w	r2, [r8]
 8009fbc:	4b9e      	ldr	r3, [pc, #632]	; (800a238 <_dtoa_r+0x2f0>)
 8009fbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009fc2:	ea33 0308 	bics.w	r3, r3, r8
 8009fc6:	d11b      	bne.n	800a000 <_dtoa_r+0xb8>
 8009fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fca:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009fd4:	4333      	orrs	r3, r6
 8009fd6:	f000 8593 	beq.w	800ab00 <_dtoa_r+0xbb8>
 8009fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fdc:	b963      	cbnz	r3, 8009ff8 <_dtoa_r+0xb0>
 8009fde:	4b97      	ldr	r3, [pc, #604]	; (800a23c <_dtoa_r+0x2f4>)
 8009fe0:	e027      	b.n	800a032 <_dtoa_r+0xea>
 8009fe2:	4b97      	ldr	r3, [pc, #604]	; (800a240 <_dtoa_r+0x2f8>)
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	9800      	ldr	r0, [sp, #0]
 8009fee:	b013      	add	sp, #76	; 0x4c
 8009ff0:	ecbd 8b04 	vpop	{d8-d9}
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	4b90      	ldr	r3, [pc, #576]	; (800a23c <_dtoa_r+0x2f4>)
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	3303      	adds	r3, #3
 8009ffe:	e7f3      	b.n	8009fe8 <_dtoa_r+0xa0>
 800a000:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	ec51 0b17 	vmov	r0, r1, d7
 800a00a:	eeb0 8a47 	vmov.f32	s16, s14
 800a00e:	eef0 8a67 	vmov.f32	s17, s15
 800a012:	2300      	movs	r3, #0
 800a014:	f7f6 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800a018:	4681      	mov	r9, r0
 800a01a:	b160      	cbz	r0, 800a036 <_dtoa_r+0xee>
 800a01c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a01e:	2301      	movs	r3, #1
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 8568 	beq.w	800aafa <_dtoa_r+0xbb2>
 800a02a:	4b86      	ldr	r3, [pc, #536]	; (800a244 <_dtoa_r+0x2fc>)
 800a02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	3b01      	subs	r3, #1
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	e7da      	b.n	8009fec <_dtoa_r+0xa4>
 800a036:	aa10      	add	r2, sp, #64	; 0x40
 800a038:	a911      	add	r1, sp, #68	; 0x44
 800a03a:	4620      	mov	r0, r4
 800a03c:	eeb0 0a48 	vmov.f32	s0, s16
 800a040:	eef0 0a68 	vmov.f32	s1, s17
 800a044:	f001 f8e8 	bl	800b218 <__d2b>
 800a048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a04c:	4682      	mov	sl, r0
 800a04e:	2d00      	cmp	r5, #0
 800a050:	d07f      	beq.n	800a152 <_dtoa_r+0x20a>
 800a052:	ee18 3a90 	vmov	r3, s17
 800a056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a05a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a05e:	ec51 0b18 	vmov	r0, r1, d8
 800a062:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a06a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a06e:	4619      	mov	r1, r3
 800a070:	2200      	movs	r2, #0
 800a072:	4b75      	ldr	r3, [pc, #468]	; (800a248 <_dtoa_r+0x300>)
 800a074:	f7f6 f908 	bl	8000288 <__aeabi_dsub>
 800a078:	a367      	add	r3, pc, #412	; (adr r3, 800a218 <_dtoa_r+0x2d0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 fabb 	bl	80005f8 <__aeabi_dmul>
 800a082:	a367      	add	r3, pc, #412	; (adr r3, 800a220 <_dtoa_r+0x2d8>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 f900 	bl	800028c <__adddf3>
 800a08c:	4606      	mov	r6, r0
 800a08e:	4628      	mov	r0, r5
 800a090:	460f      	mov	r7, r1
 800a092:	f7f6 fa47 	bl	8000524 <__aeabi_i2d>
 800a096:	a364      	add	r3, pc, #400	; (adr r3, 800a228 <_dtoa_r+0x2e0>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 f8f0 	bl	800028c <__adddf3>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	f7f6 fd52 	bl	8000b58 <__aeabi_d2iz>
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4683      	mov	fp, r0
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 fd0d 	bl	8000adc <__aeabi_dcmplt>
 800a0c2:	b148      	cbz	r0, 800a0d8 <_dtoa_r+0x190>
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f7f6 fa2d 	bl	8000524 <__aeabi_i2d>
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	f7f6 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d2:	b908      	cbnz	r0, 800a0d8 <_dtoa_r+0x190>
 800a0d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0d8:	f1bb 0f16 	cmp.w	fp, #22
 800a0dc:	d857      	bhi.n	800a18e <_dtoa_r+0x246>
 800a0de:	4b5b      	ldr	r3, [pc, #364]	; (800a24c <_dtoa_r+0x304>)
 800a0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	ec51 0b18 	vmov	r0, r1, d8
 800a0ec:	f7f6 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d04e      	beq.n	800a192 <_dtoa_r+0x24a>
 800a0f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0fe:	1b5b      	subs	r3, r3, r5
 800a100:	1e5a      	subs	r2, r3, #1
 800a102:	bf45      	ittet	mi
 800a104:	f1c3 0301 	rsbmi	r3, r3, #1
 800a108:	9305      	strmi	r3, [sp, #20]
 800a10a:	2300      	movpl	r3, #0
 800a10c:	2300      	movmi	r3, #0
 800a10e:	9206      	str	r2, [sp, #24]
 800a110:	bf54      	ite	pl
 800a112:	9305      	strpl	r3, [sp, #20]
 800a114:	9306      	strmi	r3, [sp, #24]
 800a116:	f1bb 0f00 	cmp.w	fp, #0
 800a11a:	db3c      	blt.n	800a196 <_dtoa_r+0x24e>
 800a11c:	9b06      	ldr	r3, [sp, #24]
 800a11e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a122:	445b      	add	r3, fp
 800a124:	9306      	str	r3, [sp, #24]
 800a126:	2300      	movs	r3, #0
 800a128:	9308      	str	r3, [sp, #32]
 800a12a:	9b07      	ldr	r3, [sp, #28]
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	d868      	bhi.n	800a202 <_dtoa_r+0x2ba>
 800a130:	2b05      	cmp	r3, #5
 800a132:	bfc4      	itt	gt
 800a134:	3b04      	subgt	r3, #4
 800a136:	9307      	strgt	r3, [sp, #28]
 800a138:	9b07      	ldr	r3, [sp, #28]
 800a13a:	f1a3 0302 	sub.w	r3, r3, #2
 800a13e:	bfcc      	ite	gt
 800a140:	2500      	movgt	r5, #0
 800a142:	2501      	movle	r5, #1
 800a144:	2b03      	cmp	r3, #3
 800a146:	f200 8085 	bhi.w	800a254 <_dtoa_r+0x30c>
 800a14a:	e8df f003 	tbb	[pc, r3]
 800a14e:	3b2e      	.short	0x3b2e
 800a150:	5839      	.short	0x5839
 800a152:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a156:	441d      	add	r5, r3
 800a158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	bfc1      	itttt	gt
 800a160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a164:	fa08 f803 	lslgt.w	r8, r8, r3
 800a168:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a16c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a170:	bfd6      	itet	le
 800a172:	f1c3 0320 	rsble	r3, r3, #32
 800a176:	ea48 0003 	orrgt.w	r0, r8, r3
 800a17a:	fa06 f003 	lslle.w	r0, r6, r3
 800a17e:	f7f6 f9c1 	bl	8000504 <__aeabi_ui2d>
 800a182:	2201      	movs	r2, #1
 800a184:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a188:	3d01      	subs	r5, #1
 800a18a:	920e      	str	r2, [sp, #56]	; 0x38
 800a18c:	e76f      	b.n	800a06e <_dtoa_r+0x126>
 800a18e:	2301      	movs	r3, #1
 800a190:	e7b3      	b.n	800a0fa <_dtoa_r+0x1b2>
 800a192:	900c      	str	r0, [sp, #48]	; 0x30
 800a194:	e7b2      	b.n	800a0fc <_dtoa_r+0x1b4>
 800a196:	9b05      	ldr	r3, [sp, #20]
 800a198:	eba3 030b 	sub.w	r3, r3, fp
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	f1cb 0300 	rsb	r3, fp, #0
 800a1a2:	9308      	str	r3, [sp, #32]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1a8:	e7bf      	b.n	800a12a <_dtoa_r+0x1e2>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dc52      	bgt.n	800a25a <_dtoa_r+0x312>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	9301      	str	r3, [sp, #4]
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a1be:	e00b      	b.n	800a1d8 <_dtoa_r+0x290>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f3      	b.n	800a1ac <_dtoa_r+0x264>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	445b      	add	r3, fp
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	bfb8      	it	lt
 800a1d6:	2301      	movlt	r3, #1
 800a1d8:	69e0      	ldr	r0, [r4, #28]
 800a1da:	2100      	movs	r1, #0
 800a1dc:	2204      	movs	r2, #4
 800a1de:	f102 0614 	add.w	r6, r2, #20
 800a1e2:	429e      	cmp	r6, r3
 800a1e4:	d93d      	bls.n	800a262 <_dtoa_r+0x31a>
 800a1e6:	6041      	str	r1, [r0, #4]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fcf3 	bl	800abd4 <_Balloc>
 800a1ee:	9000      	str	r0, [sp, #0]
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d139      	bne.n	800a268 <_dtoa_r+0x320>
 800a1f4:	4b16      	ldr	r3, [pc, #88]	; (800a250 <_dtoa_r+0x308>)
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a1fc:	e6bd      	b.n	8009f7a <_dtoa_r+0x32>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e7e1      	b.n	800a1c6 <_dtoa_r+0x27e>
 800a202:	2501      	movs	r5, #1
 800a204:	2300      	movs	r3, #0
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	9509      	str	r5, [sp, #36]	; 0x24
 800a20a:	f04f 33ff 	mov.w	r3, #4294967295
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	2200      	movs	r2, #0
 800a214:	2312      	movs	r3, #18
 800a216:	e7d1      	b.n	800a1bc <_dtoa_r+0x274>
 800a218:	636f4361 	.word	0x636f4361
 800a21c:	3fd287a7 	.word	0x3fd287a7
 800a220:	8b60c8b3 	.word	0x8b60c8b3
 800a224:	3fc68a28 	.word	0x3fc68a28
 800a228:	509f79fb 	.word	0x509f79fb
 800a22c:	3fd34413 	.word	0x3fd34413
 800a230:	0802074d 	.word	0x0802074d
 800a234:	08020764 	.word	0x08020764
 800a238:	7ff00000 	.word	0x7ff00000
 800a23c:	08020749 	.word	0x08020749
 800a240:	08020740 	.word	0x08020740
 800a244:	0802071d 	.word	0x0802071d
 800a248:	3ff80000 	.word	0x3ff80000
 800a24c:	08020850 	.word	0x08020850
 800a250:	080207bc 	.word	0x080207bc
 800a254:	2301      	movs	r3, #1
 800a256:	9309      	str	r3, [sp, #36]	; 0x24
 800a258:	e7d7      	b.n	800a20a <_dtoa_r+0x2c2>
 800a25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	e7ba      	b.n	800a1d8 <_dtoa_r+0x290>
 800a262:	3101      	adds	r1, #1
 800a264:	0052      	lsls	r2, r2, #1
 800a266:	e7ba      	b.n	800a1de <_dtoa_r+0x296>
 800a268:	69e3      	ldr	r3, [r4, #28]
 800a26a:	9a00      	ldr	r2, [sp, #0]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	9b04      	ldr	r3, [sp, #16]
 800a270:	2b0e      	cmp	r3, #14
 800a272:	f200 80a8 	bhi.w	800a3c6 <_dtoa_r+0x47e>
 800a276:	2d00      	cmp	r5, #0
 800a278:	f000 80a5 	beq.w	800a3c6 <_dtoa_r+0x47e>
 800a27c:	f1bb 0f00 	cmp.w	fp, #0
 800a280:	dd38      	ble.n	800a2f4 <_dtoa_r+0x3ac>
 800a282:	4bc0      	ldr	r3, [pc, #768]	; (800a584 <_dtoa_r+0x63c>)
 800a284:	f00b 020f 	and.w	r2, fp, #15
 800a288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a28c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a290:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a294:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a298:	d019      	beq.n	800a2ce <_dtoa_r+0x386>
 800a29a:	4bbb      	ldr	r3, [pc, #748]	; (800a588 <_dtoa_r+0x640>)
 800a29c:	ec51 0b18 	vmov	r0, r1, d8
 800a2a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2a4:	f7f6 fad2 	bl	800084c <__aeabi_ddiv>
 800a2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ac:	f008 080f 	and.w	r8, r8, #15
 800a2b0:	2503      	movs	r5, #3
 800a2b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a588 <_dtoa_r+0x640>
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	d10a      	bne.n	800a2d2 <_dtoa_r+0x38a>
 800a2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	f7f6 fac2 	bl	800084c <__aeabi_ddiv>
 800a2c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2cc:	e02b      	b.n	800a326 <_dtoa_r+0x3de>
 800a2ce:	2502      	movs	r5, #2
 800a2d0:	e7ef      	b.n	800a2b2 <_dtoa_r+0x36a>
 800a2d2:	f018 0f01 	tst.w	r8, #1
 800a2d6:	d008      	beq.n	800a2ea <_dtoa_r+0x3a2>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2e0:	f7f6 f98a 	bl	80005f8 <__aeabi_dmul>
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460f      	mov	r7, r1
 800a2ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2ee:	f109 0908 	add.w	r9, r9, #8
 800a2f2:	e7e0      	b.n	800a2b6 <_dtoa_r+0x36e>
 800a2f4:	f000 809f 	beq.w	800a436 <_dtoa_r+0x4ee>
 800a2f8:	f1cb 0600 	rsb	r6, fp, #0
 800a2fc:	4ba1      	ldr	r3, [pc, #644]	; (800a584 <_dtoa_r+0x63c>)
 800a2fe:	4fa2      	ldr	r7, [pc, #648]	; (800a588 <_dtoa_r+0x640>)
 800a300:	f006 020f 	and.w	r2, r6, #15
 800a304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	ec51 0b18 	vmov	r0, r1, d8
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a318:	1136      	asrs	r6, r6, #4
 800a31a:	2300      	movs	r3, #0
 800a31c:	2502      	movs	r5, #2
 800a31e:	2e00      	cmp	r6, #0
 800a320:	d17e      	bne.n	800a420 <_dtoa_r+0x4d8>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1d0      	bne.n	800a2c8 <_dtoa_r+0x380>
 800a326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a328:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 8084 	beq.w	800a43a <_dtoa_r+0x4f2>
 800a332:	4b96      	ldr	r3, [pc, #600]	; (800a58c <_dtoa_r+0x644>)
 800a334:	2200      	movs	r2, #0
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f6 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d07b      	beq.n	800a43a <_dtoa_r+0x4f2>
 800a342:	9b04      	ldr	r3, [sp, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d078      	beq.n	800a43a <_dtoa_r+0x4f2>
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dd39      	ble.n	800a3c2 <_dtoa_r+0x47a>
 800a34e:	4b90      	ldr	r3, [pc, #576]	; (800a590 <_dtoa_r+0x648>)
 800a350:	2200      	movs	r2, #0
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f6 f94f 	bl	80005f8 <__aeabi_dmul>
 800a35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a35e:	9e01      	ldr	r6, [sp, #4]
 800a360:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a364:	3501      	adds	r5, #1
 800a366:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a36a:	4628      	mov	r0, r5
 800a36c:	f7f6 f8da 	bl	8000524 <__aeabi_i2d>
 800a370:	4642      	mov	r2, r8
 800a372:	464b      	mov	r3, r9
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	4b86      	ldr	r3, [pc, #536]	; (800a594 <_dtoa_r+0x64c>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	f7f5 ff86 	bl	800028c <__adddf3>
 800a380:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d158      	bne.n	800a440 <_dtoa_r+0x4f8>
 800a38e:	4b82      	ldr	r3, [pc, #520]	; (800a598 <_dtoa_r+0x650>)
 800a390:	2200      	movs	r2, #0
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	f7f5 ff77 	bl	8000288 <__aeabi_dsub>
 800a39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a39e:	4680      	mov	r8, r0
 800a3a0:	4689      	mov	r9, r1
 800a3a2:	f7f6 fbb9 	bl	8000b18 <__aeabi_dcmpgt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f040 8296 	bne.w	800a8d8 <_dtoa_r+0x990>
 800a3ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f6 fb90 	bl	8000adc <__aeabi_dcmplt>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	f040 8289 	bne.w	800a8d4 <_dtoa_r+0x98c>
 800a3c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a3c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f2c0 814e 	blt.w	800a66a <_dtoa_r+0x722>
 800a3ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a3d2:	f300 814a 	bgt.w	800a66a <_dtoa_r+0x722>
 800a3d6:	4b6b      	ldr	r3, [pc, #428]	; (800a584 <_dtoa_r+0x63c>)
 800a3d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f280 80dc 	bge.w	800a5a0 <_dtoa_r+0x658>
 800a3e8:	9b04      	ldr	r3, [sp, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f300 80d8 	bgt.w	800a5a0 <_dtoa_r+0x658>
 800a3f0:	f040 826f 	bne.w	800a8d2 <_dtoa_r+0x98a>
 800a3f4:	4b68      	ldr	r3, [pc, #416]	; (800a598 <_dtoa_r+0x650>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	f7f6 f8fc 	bl	80005f8 <__aeabi_dmul>
 800a400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a404:	f7f6 fb7e 	bl	8000b04 <__aeabi_dcmpge>
 800a408:	9e04      	ldr	r6, [sp, #16]
 800a40a:	4637      	mov	r7, r6
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f040 8245 	bne.w	800a89c <_dtoa_r+0x954>
 800a412:	9d00      	ldr	r5, [sp, #0]
 800a414:	2331      	movs	r3, #49	; 0x31
 800a416:	f805 3b01 	strb.w	r3, [r5], #1
 800a41a:	f10b 0b01 	add.w	fp, fp, #1
 800a41e:	e241      	b.n	800a8a4 <_dtoa_r+0x95c>
 800a420:	07f2      	lsls	r2, r6, #31
 800a422:	d505      	bpl.n	800a430 <_dtoa_r+0x4e8>
 800a424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	3501      	adds	r5, #1
 800a42e:	2301      	movs	r3, #1
 800a430:	1076      	asrs	r6, r6, #1
 800a432:	3708      	adds	r7, #8
 800a434:	e773      	b.n	800a31e <_dtoa_r+0x3d6>
 800a436:	2502      	movs	r5, #2
 800a438:	e775      	b.n	800a326 <_dtoa_r+0x3de>
 800a43a:	9e04      	ldr	r6, [sp, #16]
 800a43c:	465f      	mov	r7, fp
 800a43e:	e792      	b.n	800a366 <_dtoa_r+0x41e>
 800a440:	9900      	ldr	r1, [sp, #0]
 800a442:	4b50      	ldr	r3, [pc, #320]	; (800a584 <_dtoa_r+0x63c>)
 800a444:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a448:	4431      	add	r1, r6
 800a44a:	9102      	str	r1, [sp, #8]
 800a44c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a44e:	eeb0 9a47 	vmov.f32	s18, s14
 800a452:	eef0 9a67 	vmov.f32	s19, s15
 800a456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a45a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a45e:	2900      	cmp	r1, #0
 800a460:	d044      	beq.n	800a4ec <_dtoa_r+0x5a4>
 800a462:	494e      	ldr	r1, [pc, #312]	; (800a59c <_dtoa_r+0x654>)
 800a464:	2000      	movs	r0, #0
 800a466:	f7f6 f9f1 	bl	800084c <__aeabi_ddiv>
 800a46a:	ec53 2b19 	vmov	r2, r3, d9
 800a46e:	f7f5 ff0b 	bl	8000288 <__aeabi_dsub>
 800a472:	9d00      	ldr	r5, [sp, #0]
 800a474:	ec41 0b19 	vmov	d9, r0, r1
 800a478:	4649      	mov	r1, r9
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7f6 fb6c 	bl	8000b58 <__aeabi_d2iz>
 800a480:	4606      	mov	r6, r0
 800a482:	f7f6 f84f 	bl	8000524 <__aeabi_i2d>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4640      	mov	r0, r8
 800a48c:	4649      	mov	r1, r9
 800a48e:	f7f5 fefb 	bl	8000288 <__aeabi_dsub>
 800a492:	3630      	adds	r6, #48	; 0x30
 800a494:	f805 6b01 	strb.w	r6, [r5], #1
 800a498:	ec53 2b19 	vmov	r2, r3, d9
 800a49c:	4680      	mov	r8, r0
 800a49e:	4689      	mov	r9, r1
 800a4a0:	f7f6 fb1c 	bl	8000adc <__aeabi_dcmplt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d164      	bne.n	800a572 <_dtoa_r+0x62a>
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	4937      	ldr	r1, [pc, #220]	; (800a58c <_dtoa_r+0x644>)
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f7f5 feea 	bl	8000288 <__aeabi_dsub>
 800a4b4:	ec53 2b19 	vmov	r2, r3, d9
 800a4b8:	f7f6 fb10 	bl	8000adc <__aeabi_dcmplt>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	f040 80b6 	bne.w	800a62e <_dtoa_r+0x6e6>
 800a4c2:	9b02      	ldr	r3, [sp, #8]
 800a4c4:	429d      	cmp	r5, r3
 800a4c6:	f43f af7c 	beq.w	800a3c2 <_dtoa_r+0x47a>
 800a4ca:	4b31      	ldr	r3, [pc, #196]	; (800a590 <_dtoa_r+0x648>)
 800a4cc:	ec51 0b19 	vmov	r0, r1, d9
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	4b2e      	ldr	r3, [pc, #184]	; (800a590 <_dtoa_r+0x648>)
 800a4d8:	ec41 0b19 	vmov	d9, r0, r1
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 f889 	bl	80005f8 <__aeabi_dmul>
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	e7c5      	b.n	800a478 <_dtoa_r+0x530>
 800a4ec:	ec51 0b17 	vmov	r0, r1, d7
 800a4f0:	f7f6 f882 	bl	80005f8 <__aeabi_dmul>
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	9d00      	ldr	r5, [sp, #0]
 800a4f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4fa:	ec41 0b19 	vmov	d9, r0, r1
 800a4fe:	4649      	mov	r1, r9
 800a500:	4640      	mov	r0, r8
 800a502:	f7f6 fb29 	bl	8000b58 <__aeabi_d2iz>
 800a506:	4606      	mov	r6, r0
 800a508:	f7f6 f80c 	bl	8000524 <__aeabi_i2d>
 800a50c:	3630      	adds	r6, #48	; 0x30
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f5 feb7 	bl	8000288 <__aeabi_dsub>
 800a51a:	f805 6b01 	strb.w	r6, [r5], #1
 800a51e:	9b02      	ldr	r3, [sp, #8]
 800a520:	429d      	cmp	r5, r3
 800a522:	4680      	mov	r8, r0
 800a524:	4689      	mov	r9, r1
 800a526:	f04f 0200 	mov.w	r2, #0
 800a52a:	d124      	bne.n	800a576 <_dtoa_r+0x62e>
 800a52c:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <_dtoa_r+0x654>)
 800a52e:	ec51 0b19 	vmov	r0, r1, d9
 800a532:	f7f5 feab 	bl	800028c <__adddf3>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f6 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d173      	bne.n	800a62e <_dtoa_r+0x6e6>
 800a546:	ec53 2b19 	vmov	r2, r3, d9
 800a54a:	4914      	ldr	r1, [pc, #80]	; (800a59c <_dtoa_r+0x654>)
 800a54c:	2000      	movs	r0, #0
 800a54e:	f7f5 fe9b 	bl	8000288 <__aeabi_dsub>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4640      	mov	r0, r8
 800a558:	4649      	mov	r1, r9
 800a55a:	f7f6 fabf 	bl	8000adc <__aeabi_dcmplt>
 800a55e:	2800      	cmp	r0, #0
 800a560:	f43f af2f 	beq.w	800a3c2 <_dtoa_r+0x47a>
 800a564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a566:	1e6b      	subs	r3, r5, #1
 800a568:	930f      	str	r3, [sp, #60]	; 0x3c
 800a56a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a56e:	2b30      	cmp	r3, #48	; 0x30
 800a570:	d0f8      	beq.n	800a564 <_dtoa_r+0x61c>
 800a572:	46bb      	mov	fp, r7
 800a574:	e04a      	b.n	800a60c <_dtoa_r+0x6c4>
 800a576:	4b06      	ldr	r3, [pc, #24]	; (800a590 <_dtoa_r+0x648>)
 800a578:	f7f6 f83e 	bl	80005f8 <__aeabi_dmul>
 800a57c:	4680      	mov	r8, r0
 800a57e:	4689      	mov	r9, r1
 800a580:	e7bd      	b.n	800a4fe <_dtoa_r+0x5b6>
 800a582:	bf00      	nop
 800a584:	08020850 	.word	0x08020850
 800a588:	08020828 	.word	0x08020828
 800a58c:	3ff00000 	.word	0x3ff00000
 800a590:	40240000 	.word	0x40240000
 800a594:	401c0000 	.word	0x401c0000
 800a598:	40140000 	.word	0x40140000
 800a59c:	3fe00000 	.word	0x3fe00000
 800a5a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5a4:	9d00      	ldr	r5, [sp, #0]
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	f7f6 f94d 	bl	800084c <__aeabi_ddiv>
 800a5b2:	f7f6 fad1 	bl	8000b58 <__aeabi_d2iz>
 800a5b6:	9001      	str	r0, [sp, #4]
 800a5b8:	f7f5 ffb4 	bl	8000524 <__aeabi_i2d>
 800a5bc:	4642      	mov	r2, r8
 800a5be:	464b      	mov	r3, r9
 800a5c0:	f7f6 f81a 	bl	80005f8 <__aeabi_dmul>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f5 fe5c 	bl	8000288 <__aeabi_dsub>
 800a5d0:	9e01      	ldr	r6, [sp, #4]
 800a5d2:	9f04      	ldr	r7, [sp, #16]
 800a5d4:	3630      	adds	r6, #48	; 0x30
 800a5d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a5da:	9e00      	ldr	r6, [sp, #0]
 800a5dc:	1bae      	subs	r6, r5, r6
 800a5de:	42b7      	cmp	r7, r6
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	d134      	bne.n	800a650 <_dtoa_r+0x708>
 800a5e6:	f7f5 fe51 	bl	800028c <__adddf3>
 800a5ea:	4642      	mov	r2, r8
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	460f      	mov	r7, r1
 800a5f2:	f7f6 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f6:	b9c8      	cbnz	r0, 800a62c <_dtoa_r+0x6e4>
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	f7f6 fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 800a604:	b110      	cbz	r0, 800a60c <_dtoa_r+0x6c4>
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	07db      	lsls	r3, r3, #31
 800a60a:	d40f      	bmi.n	800a62c <_dtoa_r+0x6e4>
 800a60c:	4651      	mov	r1, sl
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fb20 	bl	800ac54 <_Bfree>
 800a614:	2300      	movs	r3, #0
 800a616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a618:	702b      	strb	r3, [r5, #0]
 800a61a:	f10b 0301 	add.w	r3, fp, #1
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a622:	2b00      	cmp	r3, #0
 800a624:	f43f ace2 	beq.w	8009fec <_dtoa_r+0xa4>
 800a628:	601d      	str	r5, [r3, #0]
 800a62a:	e4df      	b.n	8009fec <_dtoa_r+0xa4>
 800a62c:	465f      	mov	r7, fp
 800a62e:	462b      	mov	r3, r5
 800a630:	461d      	mov	r5, r3
 800a632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a636:	2a39      	cmp	r2, #57	; 0x39
 800a638:	d106      	bne.n	800a648 <_dtoa_r+0x700>
 800a63a:	9a00      	ldr	r2, [sp, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d1f7      	bne.n	800a630 <_dtoa_r+0x6e8>
 800a640:	9900      	ldr	r1, [sp, #0]
 800a642:	2230      	movs	r2, #48	; 0x30
 800a644:	3701      	adds	r7, #1
 800a646:	700a      	strb	r2, [r1, #0]
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	3201      	adds	r2, #1
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e790      	b.n	800a572 <_dtoa_r+0x62a>
 800a650:	4ba3      	ldr	r3, [pc, #652]	; (800a8e0 <_dtoa_r+0x998>)
 800a652:	2200      	movs	r2, #0
 800a654:	f7f5 ffd0 	bl	80005f8 <__aeabi_dmul>
 800a658:	2200      	movs	r2, #0
 800a65a:	2300      	movs	r3, #0
 800a65c:	4606      	mov	r6, r0
 800a65e:	460f      	mov	r7, r1
 800a660:	f7f6 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a664:	2800      	cmp	r0, #0
 800a666:	d09e      	beq.n	800a5a6 <_dtoa_r+0x65e>
 800a668:	e7d0      	b.n	800a60c <_dtoa_r+0x6c4>
 800a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	f000 80ca 	beq.w	800a806 <_dtoa_r+0x8be>
 800a672:	9a07      	ldr	r2, [sp, #28]
 800a674:	2a01      	cmp	r2, #1
 800a676:	f300 80ad 	bgt.w	800a7d4 <_dtoa_r+0x88c>
 800a67a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	f000 80a5 	beq.w	800a7cc <_dtoa_r+0x884>
 800a682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a686:	9e08      	ldr	r6, [sp, #32]
 800a688:	9d05      	ldr	r5, [sp, #20]
 800a68a:	9a05      	ldr	r2, [sp, #20]
 800a68c:	441a      	add	r2, r3
 800a68e:	9205      	str	r2, [sp, #20]
 800a690:	9a06      	ldr	r2, [sp, #24]
 800a692:	2101      	movs	r1, #1
 800a694:	441a      	add	r2, r3
 800a696:	4620      	mov	r0, r4
 800a698:	9206      	str	r2, [sp, #24]
 800a69a:	f000 fb91 	bl	800adc0 <__i2b>
 800a69e:	4607      	mov	r7, r0
 800a6a0:	b165      	cbz	r5, 800a6bc <_dtoa_r+0x774>
 800a6a2:	9b06      	ldr	r3, [sp, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd09      	ble.n	800a6bc <_dtoa_r+0x774>
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	9a05      	ldr	r2, [sp, #20]
 800a6ac:	bfa8      	it	ge
 800a6ae:	462b      	movge	r3, r5
 800a6b0:	1ad2      	subs	r2, r2, r3
 800a6b2:	9205      	str	r2, [sp, #20]
 800a6b4:	9a06      	ldr	r2, [sp, #24]
 800a6b6:	1aed      	subs	r5, r5, r3
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	9306      	str	r3, [sp, #24]
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	b1f3      	cbz	r3, 800a6fe <_dtoa_r+0x7b6>
 800a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 80a3 	beq.w	800a80e <_dtoa_r+0x8c6>
 800a6c8:	2e00      	cmp	r6, #0
 800a6ca:	dd10      	ble.n	800a6ee <_dtoa_r+0x7a6>
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fc35 	bl	800af40 <__pow5mult>
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4607      	mov	r7, r0
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fb85 	bl	800adec <__multiply>
 800a6e2:	4651      	mov	r1, sl
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fab4 	bl	800ac54 <_Bfree>
 800a6ec:	46c2      	mov	sl, r8
 800a6ee:	9b08      	ldr	r3, [sp, #32]
 800a6f0:	1b9a      	subs	r2, r3, r6
 800a6f2:	d004      	beq.n	800a6fe <_dtoa_r+0x7b6>
 800a6f4:	4651      	mov	r1, sl
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 fc22 	bl	800af40 <__pow5mult>
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	2101      	movs	r1, #1
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fb5d 	bl	800adc0 <__i2b>
 800a706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	4606      	mov	r6, r0
 800a70c:	f340 8081 	ble.w	800a812 <_dtoa_r+0x8ca>
 800a710:	461a      	mov	r2, r3
 800a712:	4601      	mov	r1, r0
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fc13 	bl	800af40 <__pow5mult>
 800a71a:	9b07      	ldr	r3, [sp, #28]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	4606      	mov	r6, r0
 800a720:	dd7a      	ble.n	800a818 <_dtoa_r+0x8d0>
 800a722:	f04f 0800 	mov.w	r8, #0
 800a726:	6933      	ldr	r3, [r6, #16]
 800a728:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a72c:	6918      	ldr	r0, [r3, #16]
 800a72e:	f000 faf9 	bl	800ad24 <__hi0bits>
 800a732:	f1c0 0020 	rsb	r0, r0, #32
 800a736:	9b06      	ldr	r3, [sp, #24]
 800a738:	4418      	add	r0, r3
 800a73a:	f010 001f 	ands.w	r0, r0, #31
 800a73e:	f000 8094 	beq.w	800a86a <_dtoa_r+0x922>
 800a742:	f1c0 0320 	rsb	r3, r0, #32
 800a746:	2b04      	cmp	r3, #4
 800a748:	f340 8085 	ble.w	800a856 <_dtoa_r+0x90e>
 800a74c:	9b05      	ldr	r3, [sp, #20]
 800a74e:	f1c0 001c 	rsb	r0, r0, #28
 800a752:	4403      	add	r3, r0
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	4403      	add	r3, r0
 800a75a:	4405      	add	r5, r0
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x828>
 800a764:	4651      	mov	r1, sl
 800a766:	461a      	mov	r2, r3
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fc43 	bl	800aff4 <__lshift>
 800a76e:	4682      	mov	sl, r0
 800a770:	9b06      	ldr	r3, [sp, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	dd05      	ble.n	800a782 <_dtoa_r+0x83a>
 800a776:	4631      	mov	r1, r6
 800a778:	461a      	mov	r2, r3
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fc3a 	bl	800aff4 <__lshift>
 800a780:	4606      	mov	r6, r0
 800a782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a784:	2b00      	cmp	r3, #0
 800a786:	d072      	beq.n	800a86e <_dtoa_r+0x926>
 800a788:	4631      	mov	r1, r6
 800a78a:	4650      	mov	r0, sl
 800a78c:	f000 fc9e 	bl	800b0cc <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	da6c      	bge.n	800a86e <_dtoa_r+0x926>
 800a794:	2300      	movs	r3, #0
 800a796:	4651      	mov	r1, sl
 800a798:	220a      	movs	r2, #10
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fa7c 	bl	800ac98 <__multadd>
 800a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7a6:	4682      	mov	sl, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 81b0 	beq.w	800ab0e <_dtoa_r+0xbc6>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	220a      	movs	r2, #10
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f000 fa6f 	bl	800ac98 <__multadd>
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	4607      	mov	r7, r0
 800a7c0:	f300 8096 	bgt.w	800a8f0 <_dtoa_r+0x9a8>
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	dc59      	bgt.n	800a87e <_dtoa_r+0x936>
 800a7ca:	e091      	b.n	800a8f0 <_dtoa_r+0x9a8>
 800a7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7d2:	e758      	b.n	800a686 <_dtoa_r+0x73e>
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	1e5e      	subs	r6, r3, #1
 800a7d8:	9b08      	ldr	r3, [sp, #32]
 800a7da:	42b3      	cmp	r3, r6
 800a7dc:	bfbf      	itttt	lt
 800a7de:	9b08      	ldrlt	r3, [sp, #32]
 800a7e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a7e2:	9608      	strlt	r6, [sp, #32]
 800a7e4:	1af3      	sublt	r3, r6, r3
 800a7e6:	bfb4      	ite	lt
 800a7e8:	18d2      	addlt	r2, r2, r3
 800a7ea:	1b9e      	subge	r6, r3, r6
 800a7ec:	9b04      	ldr	r3, [sp, #16]
 800a7ee:	bfbc      	itt	lt
 800a7f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a7f2:	2600      	movlt	r6, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb7      	itett	lt
 800a7f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a7fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a800:	1a9d      	sublt	r5, r3, r2
 800a802:	2300      	movlt	r3, #0
 800a804:	e741      	b.n	800a68a <_dtoa_r+0x742>
 800a806:	9e08      	ldr	r6, [sp, #32]
 800a808:	9d05      	ldr	r5, [sp, #20]
 800a80a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a80c:	e748      	b.n	800a6a0 <_dtoa_r+0x758>
 800a80e:	9a08      	ldr	r2, [sp, #32]
 800a810:	e770      	b.n	800a6f4 <_dtoa_r+0x7ac>
 800a812:	9b07      	ldr	r3, [sp, #28]
 800a814:	2b01      	cmp	r3, #1
 800a816:	dc19      	bgt.n	800a84c <_dtoa_r+0x904>
 800a818:	9b02      	ldr	r3, [sp, #8]
 800a81a:	b9bb      	cbnz	r3, 800a84c <_dtoa_r+0x904>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a822:	b99b      	cbnz	r3, 800a84c <_dtoa_r+0x904>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a82a:	0d1b      	lsrs	r3, r3, #20
 800a82c:	051b      	lsls	r3, r3, #20
 800a82e:	b183      	cbz	r3, 800a852 <_dtoa_r+0x90a>
 800a830:	9b05      	ldr	r3, [sp, #20]
 800a832:	3301      	adds	r3, #1
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	3301      	adds	r3, #1
 800a83a:	9306      	str	r3, [sp, #24]
 800a83c:	f04f 0801 	mov.w	r8, #1
 800a840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a842:	2b00      	cmp	r3, #0
 800a844:	f47f af6f 	bne.w	800a726 <_dtoa_r+0x7de>
 800a848:	2001      	movs	r0, #1
 800a84a:	e774      	b.n	800a736 <_dtoa_r+0x7ee>
 800a84c:	f04f 0800 	mov.w	r8, #0
 800a850:	e7f6      	b.n	800a840 <_dtoa_r+0x8f8>
 800a852:	4698      	mov	r8, r3
 800a854:	e7f4      	b.n	800a840 <_dtoa_r+0x8f8>
 800a856:	d082      	beq.n	800a75e <_dtoa_r+0x816>
 800a858:	9a05      	ldr	r2, [sp, #20]
 800a85a:	331c      	adds	r3, #28
 800a85c:	441a      	add	r2, r3
 800a85e:	9205      	str	r2, [sp, #20]
 800a860:	9a06      	ldr	r2, [sp, #24]
 800a862:	441a      	add	r2, r3
 800a864:	441d      	add	r5, r3
 800a866:	9206      	str	r2, [sp, #24]
 800a868:	e779      	b.n	800a75e <_dtoa_r+0x816>
 800a86a:	4603      	mov	r3, r0
 800a86c:	e7f4      	b.n	800a858 <_dtoa_r+0x910>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	dc37      	bgt.n	800a8e4 <_dtoa_r+0x99c>
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	2b02      	cmp	r3, #2
 800a878:	dd34      	ble.n	800a8e4 <_dtoa_r+0x99c>
 800a87a:	9b04      	ldr	r3, [sp, #16]
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	b963      	cbnz	r3, 800a89c <_dtoa_r+0x954>
 800a882:	4631      	mov	r1, r6
 800a884:	2205      	movs	r2, #5
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fa06 	bl	800ac98 <__multadd>
 800a88c:	4601      	mov	r1, r0
 800a88e:	4606      	mov	r6, r0
 800a890:	4650      	mov	r0, sl
 800a892:	f000 fc1b 	bl	800b0cc <__mcmp>
 800a896:	2800      	cmp	r0, #0
 800a898:	f73f adbb 	bgt.w	800a412 <_dtoa_r+0x4ca>
 800a89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89e:	9d00      	ldr	r5, [sp, #0]
 800a8a0:	ea6f 0b03 	mvn.w	fp, r3
 800a8a4:	f04f 0800 	mov.w	r8, #0
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 f9d2 	bl	800ac54 <_Bfree>
 800a8b0:	2f00      	cmp	r7, #0
 800a8b2:	f43f aeab 	beq.w	800a60c <_dtoa_r+0x6c4>
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	d005      	beq.n	800a8c8 <_dtoa_r+0x980>
 800a8bc:	45b8      	cmp	r8, r7
 800a8be:	d003      	beq.n	800a8c8 <_dtoa_r+0x980>
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 f9c6 	bl	800ac54 <_Bfree>
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 f9c2 	bl	800ac54 <_Bfree>
 800a8d0:	e69c      	b.n	800a60c <_dtoa_r+0x6c4>
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	4637      	mov	r7, r6
 800a8d6:	e7e1      	b.n	800a89c <_dtoa_r+0x954>
 800a8d8:	46bb      	mov	fp, r7
 800a8da:	4637      	mov	r7, r6
 800a8dc:	e599      	b.n	800a412 <_dtoa_r+0x4ca>
 800a8de:	bf00      	nop
 800a8e0:	40240000 	.word	0x40240000
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 80c8 	beq.w	800aa7c <_dtoa_r+0xb34>
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	dd05      	ble.n	800a900 <_dtoa_r+0x9b8>
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	462a      	mov	r2, r5
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fb7b 	bl	800aff4 <__lshift>
 800a8fe:	4607      	mov	r7, r0
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	d05b      	beq.n	800a9be <_dtoa_r+0xa76>
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 f963 	bl	800abd4 <_Balloc>
 800a90e:	4605      	mov	r5, r0
 800a910:	b928      	cbnz	r0, 800a91e <_dtoa_r+0x9d6>
 800a912:	4b83      	ldr	r3, [pc, #524]	; (800ab20 <_dtoa_r+0xbd8>)
 800a914:	4602      	mov	r2, r0
 800a916:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a91a:	f7ff bb2e 	b.w	8009f7a <_dtoa_r+0x32>
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	3202      	adds	r2, #2
 800a922:	0092      	lsls	r2, r2, #2
 800a924:	f107 010c 	add.w	r1, r7, #12
 800a928:	300c      	adds	r0, #12
 800a92a:	f7ff fa4e 	bl	8009dca <memcpy>
 800a92e:	2201      	movs	r2, #1
 800a930:	4629      	mov	r1, r5
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fb5e 	bl	800aff4 <__lshift>
 800a938:	9b00      	ldr	r3, [sp, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a942:	4413      	add	r3, r2
 800a944:	9308      	str	r3, [sp, #32]
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	46b8      	mov	r8, r7
 800a94e:	9306      	str	r3, [sp, #24]
 800a950:	4607      	mov	r7, r0
 800a952:	9b04      	ldr	r3, [sp, #16]
 800a954:	4631      	mov	r1, r6
 800a956:	3b01      	subs	r3, #1
 800a958:	4650      	mov	r0, sl
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	f7ff fa6a 	bl	8009e34 <quorem>
 800a960:	4641      	mov	r1, r8
 800a962:	9002      	str	r0, [sp, #8]
 800a964:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a968:	4650      	mov	r0, sl
 800a96a:	f000 fbaf 	bl	800b0cc <__mcmp>
 800a96e:	463a      	mov	r2, r7
 800a970:	9005      	str	r0, [sp, #20]
 800a972:	4631      	mov	r1, r6
 800a974:	4620      	mov	r0, r4
 800a976:	f000 fbc5 	bl	800b104 <__mdiff>
 800a97a:	68c2      	ldr	r2, [r0, #12]
 800a97c:	4605      	mov	r5, r0
 800a97e:	bb02      	cbnz	r2, 800a9c2 <_dtoa_r+0xa7a>
 800a980:	4601      	mov	r1, r0
 800a982:	4650      	mov	r0, sl
 800a984:	f000 fba2 	bl	800b0cc <__mcmp>
 800a988:	4602      	mov	r2, r0
 800a98a:	4629      	mov	r1, r5
 800a98c:	4620      	mov	r0, r4
 800a98e:	9209      	str	r2, [sp, #36]	; 0x24
 800a990:	f000 f960 	bl	800ac54 <_Bfree>
 800a994:	9b07      	ldr	r3, [sp, #28]
 800a996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a998:	9d04      	ldr	r5, [sp, #16]
 800a99a:	ea43 0102 	orr.w	r1, r3, r2
 800a99e:	9b06      	ldr	r3, [sp, #24]
 800a9a0:	4319      	orrs	r1, r3
 800a9a2:	d110      	bne.n	800a9c6 <_dtoa_r+0xa7e>
 800a9a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9a8:	d029      	beq.n	800a9fe <_dtoa_r+0xab6>
 800a9aa:	9b05      	ldr	r3, [sp, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd02      	ble.n	800a9b6 <_dtoa_r+0xa6e>
 800a9b0:	9b02      	ldr	r3, [sp, #8]
 800a9b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	f883 9000 	strb.w	r9, [r3]
 800a9bc:	e774      	b.n	800a8a8 <_dtoa_r+0x960>
 800a9be:	4638      	mov	r0, r7
 800a9c0:	e7ba      	b.n	800a938 <_dtoa_r+0x9f0>
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	e7e1      	b.n	800a98a <_dtoa_r+0xa42>
 800a9c6:	9b05      	ldr	r3, [sp, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	db04      	blt.n	800a9d6 <_dtoa_r+0xa8e>
 800a9cc:	9907      	ldr	r1, [sp, #28]
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	9906      	ldr	r1, [sp, #24]
 800a9d2:	430b      	orrs	r3, r1
 800a9d4:	d120      	bne.n	800aa18 <_dtoa_r+0xad0>
 800a9d6:	2a00      	cmp	r2, #0
 800a9d8:	dded      	ble.n	800a9b6 <_dtoa_r+0xa6e>
 800a9da:	4651      	mov	r1, sl
 800a9dc:	2201      	movs	r2, #1
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 fb08 	bl	800aff4 <__lshift>
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	f000 fb70 	bl	800b0cc <__mcmp>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	dc03      	bgt.n	800a9f8 <_dtoa_r+0xab0>
 800a9f0:	d1e1      	bne.n	800a9b6 <_dtoa_r+0xa6e>
 800a9f2:	f019 0f01 	tst.w	r9, #1
 800a9f6:	d0de      	beq.n	800a9b6 <_dtoa_r+0xa6e>
 800a9f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9fc:	d1d8      	bne.n	800a9b0 <_dtoa_r+0xa68>
 800a9fe:	9a01      	ldr	r2, [sp, #4]
 800aa00:	2339      	movs	r3, #57	; 0x39
 800aa02:	7013      	strb	r3, [r2, #0]
 800aa04:	462b      	mov	r3, r5
 800aa06:	461d      	mov	r5, r3
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa0e:	2a39      	cmp	r2, #57	; 0x39
 800aa10:	d06c      	beq.n	800aaec <_dtoa_r+0xba4>
 800aa12:	3201      	adds	r2, #1
 800aa14:	701a      	strb	r2, [r3, #0]
 800aa16:	e747      	b.n	800a8a8 <_dtoa_r+0x960>
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	dd07      	ble.n	800aa2c <_dtoa_r+0xae4>
 800aa1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa20:	d0ed      	beq.n	800a9fe <_dtoa_r+0xab6>
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	f109 0301 	add.w	r3, r9, #1
 800aa28:	7013      	strb	r3, [r2, #0]
 800aa2a:	e73d      	b.n	800a8a8 <_dtoa_r+0x960>
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	9a08      	ldr	r2, [sp, #32]
 800aa30:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d043      	beq.n	800aac0 <_dtoa_r+0xb78>
 800aa38:	4651      	mov	r1, sl
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	220a      	movs	r2, #10
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 f92a 	bl	800ac98 <__multadd>
 800aa44:	45b8      	cmp	r8, r7
 800aa46:	4682      	mov	sl, r0
 800aa48:	f04f 0300 	mov.w	r3, #0
 800aa4c:	f04f 020a 	mov.w	r2, #10
 800aa50:	4641      	mov	r1, r8
 800aa52:	4620      	mov	r0, r4
 800aa54:	d107      	bne.n	800aa66 <_dtoa_r+0xb1e>
 800aa56:	f000 f91f 	bl	800ac98 <__multadd>
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	3301      	adds	r3, #1
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	e775      	b.n	800a952 <_dtoa_r+0xa0a>
 800aa66:	f000 f917 	bl	800ac98 <__multadd>
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	2300      	movs	r3, #0
 800aa70:	220a      	movs	r2, #10
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 f910 	bl	800ac98 <__multadd>
 800aa78:	4607      	mov	r7, r0
 800aa7a:	e7f0      	b.n	800aa5e <_dtoa_r+0xb16>
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	9d00      	ldr	r5, [sp, #0]
 800aa82:	4631      	mov	r1, r6
 800aa84:	4650      	mov	r0, sl
 800aa86:	f7ff f9d5 	bl	8009e34 <quorem>
 800aa8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	f805 9b01 	strb.w	r9, [r5], #1
 800aa94:	1aea      	subs	r2, r5, r3
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	dd07      	ble.n	800aaac <_dtoa_r+0xb64>
 800aa9c:	4651      	mov	r1, sl
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 f8f8 	bl	800ac98 <__multadd>
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	e7ea      	b.n	800aa82 <_dtoa_r+0xb3a>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfc8      	it	gt
 800aab2:	461d      	movgt	r5, r3
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	bfd8      	it	le
 800aab8:	2501      	movle	r5, #1
 800aaba:	441d      	add	r5, r3
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	4651      	mov	r1, sl
 800aac2:	2201      	movs	r2, #1
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 fa95 	bl	800aff4 <__lshift>
 800aaca:	4631      	mov	r1, r6
 800aacc:	4682      	mov	sl, r0
 800aace:	f000 fafd 	bl	800b0cc <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	dc96      	bgt.n	800aa04 <_dtoa_r+0xabc>
 800aad6:	d102      	bne.n	800aade <_dtoa_r+0xb96>
 800aad8:	f019 0f01 	tst.w	r9, #1
 800aadc:	d192      	bne.n	800aa04 <_dtoa_r+0xabc>
 800aade:	462b      	mov	r3, r5
 800aae0:	461d      	mov	r5, r3
 800aae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aae6:	2a30      	cmp	r2, #48	; 0x30
 800aae8:	d0fa      	beq.n	800aae0 <_dtoa_r+0xb98>
 800aaea:	e6dd      	b.n	800a8a8 <_dtoa_r+0x960>
 800aaec:	9a00      	ldr	r2, [sp, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d189      	bne.n	800aa06 <_dtoa_r+0xabe>
 800aaf2:	f10b 0b01 	add.w	fp, fp, #1
 800aaf6:	2331      	movs	r3, #49	; 0x31
 800aaf8:	e796      	b.n	800aa28 <_dtoa_r+0xae0>
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <_dtoa_r+0xbdc>)
 800aafc:	f7ff ba99 	b.w	800a032 <_dtoa_r+0xea>
 800ab00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f47f aa6d 	bne.w	8009fe2 <_dtoa_r+0x9a>
 800ab08:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <_dtoa_r+0xbe0>)
 800ab0a:	f7ff ba92 	b.w	800a032 <_dtoa_r+0xea>
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dcb5      	bgt.n	800aa80 <_dtoa_r+0xb38>
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	f73f aeb1 	bgt.w	800a87e <_dtoa_r+0x936>
 800ab1c:	e7b0      	b.n	800aa80 <_dtoa_r+0xb38>
 800ab1e:	bf00      	nop
 800ab20:	080207bc 	.word	0x080207bc
 800ab24:	0802071c 	.word	0x0802071c
 800ab28:	08020740 	.word	0x08020740

0800ab2c <_free_r>:
 800ab2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	d044      	beq.n	800abbc <_free_r+0x90>
 800ab32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab36:	9001      	str	r0, [sp, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab3e:	bfb8      	it	lt
 800ab40:	18e4      	addlt	r4, r4, r3
 800ab42:	f7fe fa31 	bl	8008fa8 <__malloc_lock>
 800ab46:	4a1e      	ldr	r2, [pc, #120]	; (800abc0 <_free_r+0x94>)
 800ab48:	9801      	ldr	r0, [sp, #4]
 800ab4a:	6813      	ldr	r3, [r2, #0]
 800ab4c:	b933      	cbnz	r3, 800ab5c <_free_r+0x30>
 800ab4e:	6063      	str	r3, [r4, #4]
 800ab50:	6014      	str	r4, [r2, #0]
 800ab52:	b003      	add	sp, #12
 800ab54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab58:	f7fe ba2c 	b.w	8008fb4 <__malloc_unlock>
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d908      	bls.n	800ab72 <_free_r+0x46>
 800ab60:	6825      	ldr	r5, [r4, #0]
 800ab62:	1961      	adds	r1, r4, r5
 800ab64:	428b      	cmp	r3, r1
 800ab66:	bf01      	itttt	eq
 800ab68:	6819      	ldreq	r1, [r3, #0]
 800ab6a:	685b      	ldreq	r3, [r3, #4]
 800ab6c:	1949      	addeq	r1, r1, r5
 800ab6e:	6021      	streq	r1, [r4, #0]
 800ab70:	e7ed      	b.n	800ab4e <_free_r+0x22>
 800ab72:	461a      	mov	r2, r3
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	b10b      	cbz	r3, 800ab7c <_free_r+0x50>
 800ab78:	42a3      	cmp	r3, r4
 800ab7a:	d9fa      	bls.n	800ab72 <_free_r+0x46>
 800ab7c:	6811      	ldr	r1, [r2, #0]
 800ab7e:	1855      	adds	r5, r2, r1
 800ab80:	42a5      	cmp	r5, r4
 800ab82:	d10b      	bne.n	800ab9c <_free_r+0x70>
 800ab84:	6824      	ldr	r4, [r4, #0]
 800ab86:	4421      	add	r1, r4
 800ab88:	1854      	adds	r4, r2, r1
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	6011      	str	r1, [r2, #0]
 800ab8e:	d1e0      	bne.n	800ab52 <_free_r+0x26>
 800ab90:	681c      	ldr	r4, [r3, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	6053      	str	r3, [r2, #4]
 800ab96:	440c      	add	r4, r1
 800ab98:	6014      	str	r4, [r2, #0]
 800ab9a:	e7da      	b.n	800ab52 <_free_r+0x26>
 800ab9c:	d902      	bls.n	800aba4 <_free_r+0x78>
 800ab9e:	230c      	movs	r3, #12
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	e7d6      	b.n	800ab52 <_free_r+0x26>
 800aba4:	6825      	ldr	r5, [r4, #0]
 800aba6:	1961      	adds	r1, r4, r5
 800aba8:	428b      	cmp	r3, r1
 800abaa:	bf04      	itt	eq
 800abac:	6819      	ldreq	r1, [r3, #0]
 800abae:	685b      	ldreq	r3, [r3, #4]
 800abb0:	6063      	str	r3, [r4, #4]
 800abb2:	bf04      	itt	eq
 800abb4:	1949      	addeq	r1, r1, r5
 800abb6:	6021      	streq	r1, [r4, #0]
 800abb8:	6054      	str	r4, [r2, #4]
 800abba:	e7ca      	b.n	800ab52 <_free_r+0x26>
 800abbc:	b003      	add	sp, #12
 800abbe:	bd30      	pop	{r4, r5, pc}
 800abc0:	20007dac 	.word	0x20007dac

0800abc4 <malloc>:
 800abc4:	4b02      	ldr	r3, [pc, #8]	; (800abd0 <malloc+0xc>)
 800abc6:	4601      	mov	r1, r0
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	f7fe b96d 	b.w	8008ea8 <_malloc_r>
 800abce:	bf00      	nop
 800abd0:	20000070 	.word	0x20000070

0800abd4 <_Balloc>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	69c6      	ldr	r6, [r0, #28]
 800abd8:	4604      	mov	r4, r0
 800abda:	460d      	mov	r5, r1
 800abdc:	b976      	cbnz	r6, 800abfc <_Balloc+0x28>
 800abde:	2010      	movs	r0, #16
 800abe0:	f7ff fff0 	bl	800abc4 <malloc>
 800abe4:	4602      	mov	r2, r0
 800abe6:	61e0      	str	r0, [r4, #28]
 800abe8:	b920      	cbnz	r0, 800abf4 <_Balloc+0x20>
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <_Balloc+0x78>)
 800abec:	4818      	ldr	r0, [pc, #96]	; (800ac50 <_Balloc+0x7c>)
 800abee:	216b      	movs	r1, #107	; 0x6b
 800abf0:	f000 fe16 	bl	800b820 <__assert_func>
 800abf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abf8:	6006      	str	r6, [r0, #0]
 800abfa:	60c6      	str	r6, [r0, #12]
 800abfc:	69e6      	ldr	r6, [r4, #28]
 800abfe:	68f3      	ldr	r3, [r6, #12]
 800ac00:	b183      	cbz	r3, 800ac24 <_Balloc+0x50>
 800ac02:	69e3      	ldr	r3, [r4, #28]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac0a:	b9b8      	cbnz	r0, 800ac3c <_Balloc+0x68>
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac12:	1d72      	adds	r2, r6, #5
 800ac14:	0092      	lsls	r2, r2, #2
 800ac16:	4620      	mov	r0, r4
 800ac18:	f7fe f910 	bl	8008e3c <_calloc_r>
 800ac1c:	b160      	cbz	r0, 800ac38 <_Balloc+0x64>
 800ac1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac22:	e00e      	b.n	800ac42 <_Balloc+0x6e>
 800ac24:	2221      	movs	r2, #33	; 0x21
 800ac26:	2104      	movs	r1, #4
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7fe f907 	bl	8008e3c <_calloc_r>
 800ac2e:	69e3      	ldr	r3, [r4, #28]
 800ac30:	60f0      	str	r0, [r6, #12]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e4      	bne.n	800ac02 <_Balloc+0x2e>
 800ac38:	2000      	movs	r0, #0
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
 800ac3c:	6802      	ldr	r2, [r0, #0]
 800ac3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac42:	2300      	movs	r3, #0
 800ac44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac48:	e7f7      	b.n	800ac3a <_Balloc+0x66>
 800ac4a:	bf00      	nop
 800ac4c:	0802074d 	.word	0x0802074d
 800ac50:	080207cd 	.word	0x080207cd

0800ac54 <_Bfree>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	69c6      	ldr	r6, [r0, #28]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b976      	cbnz	r6, 800ac7c <_Bfree+0x28>
 800ac5e:	2010      	movs	r0, #16
 800ac60:	f7ff ffb0 	bl	800abc4 <malloc>
 800ac64:	4602      	mov	r2, r0
 800ac66:	61e8      	str	r0, [r5, #28]
 800ac68:	b920      	cbnz	r0, 800ac74 <_Bfree+0x20>
 800ac6a:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <_Bfree+0x3c>)
 800ac6c:	4809      	ldr	r0, [pc, #36]	; (800ac94 <_Bfree+0x40>)
 800ac6e:	218f      	movs	r1, #143	; 0x8f
 800ac70:	f000 fdd6 	bl	800b820 <__assert_func>
 800ac74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac78:	6006      	str	r6, [r0, #0]
 800ac7a:	60c6      	str	r6, [r0, #12]
 800ac7c:	b13c      	cbz	r4, 800ac8e <_Bfree+0x3a>
 800ac7e:	69eb      	ldr	r3, [r5, #28]
 800ac80:	6862      	ldr	r2, [r4, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac88:	6021      	str	r1, [r4, #0]
 800ac8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	0802074d 	.word	0x0802074d
 800ac94:	080207cd 	.word	0x080207cd

0800ac98 <__multadd>:
 800ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9c:	690d      	ldr	r5, [r1, #16]
 800ac9e:	4607      	mov	r7, r0
 800aca0:	460c      	mov	r4, r1
 800aca2:	461e      	mov	r6, r3
 800aca4:	f101 0c14 	add.w	ip, r1, #20
 800aca8:	2000      	movs	r0, #0
 800acaa:	f8dc 3000 	ldr.w	r3, [ip]
 800acae:	b299      	uxth	r1, r3
 800acb0:	fb02 6101 	mla	r1, r2, r1, r6
 800acb4:	0c1e      	lsrs	r6, r3, #16
 800acb6:	0c0b      	lsrs	r3, r1, #16
 800acb8:	fb02 3306 	mla	r3, r2, r6, r3
 800acbc:	b289      	uxth	r1, r1
 800acbe:	3001      	adds	r0, #1
 800acc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acc4:	4285      	cmp	r5, r0
 800acc6:	f84c 1b04 	str.w	r1, [ip], #4
 800acca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acce:	dcec      	bgt.n	800acaa <__multadd+0x12>
 800acd0:	b30e      	cbz	r6, 800ad16 <__multadd+0x7e>
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	42ab      	cmp	r3, r5
 800acd6:	dc19      	bgt.n	800ad0c <__multadd+0x74>
 800acd8:	6861      	ldr	r1, [r4, #4]
 800acda:	4638      	mov	r0, r7
 800acdc:	3101      	adds	r1, #1
 800acde:	f7ff ff79 	bl	800abd4 <_Balloc>
 800ace2:	4680      	mov	r8, r0
 800ace4:	b928      	cbnz	r0, 800acf2 <__multadd+0x5a>
 800ace6:	4602      	mov	r2, r0
 800ace8:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <__multadd+0x84>)
 800acea:	480d      	ldr	r0, [pc, #52]	; (800ad20 <__multadd+0x88>)
 800acec:	21ba      	movs	r1, #186	; 0xba
 800acee:	f000 fd97 	bl	800b820 <__assert_func>
 800acf2:	6922      	ldr	r2, [r4, #16]
 800acf4:	3202      	adds	r2, #2
 800acf6:	f104 010c 	add.w	r1, r4, #12
 800acfa:	0092      	lsls	r2, r2, #2
 800acfc:	300c      	adds	r0, #12
 800acfe:	f7ff f864 	bl	8009dca <memcpy>
 800ad02:	4621      	mov	r1, r4
 800ad04:	4638      	mov	r0, r7
 800ad06:	f7ff ffa5 	bl	800ac54 <_Bfree>
 800ad0a:	4644      	mov	r4, r8
 800ad0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad10:	3501      	adds	r5, #1
 800ad12:	615e      	str	r6, [r3, #20]
 800ad14:	6125      	str	r5, [r4, #16]
 800ad16:	4620      	mov	r0, r4
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	080207bc 	.word	0x080207bc
 800ad20:	080207cd 	.word	0x080207cd

0800ad24 <__hi0bits>:
 800ad24:	0c03      	lsrs	r3, r0, #16
 800ad26:	041b      	lsls	r3, r3, #16
 800ad28:	b9d3      	cbnz	r3, 800ad60 <__hi0bits+0x3c>
 800ad2a:	0400      	lsls	r0, r0, #16
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad32:	bf04      	itt	eq
 800ad34:	0200      	lsleq	r0, r0, #8
 800ad36:	3308      	addeq	r3, #8
 800ad38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad3c:	bf04      	itt	eq
 800ad3e:	0100      	lsleq	r0, r0, #4
 800ad40:	3304      	addeq	r3, #4
 800ad42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad46:	bf04      	itt	eq
 800ad48:	0080      	lsleq	r0, r0, #2
 800ad4a:	3302      	addeq	r3, #2
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	db05      	blt.n	800ad5c <__hi0bits+0x38>
 800ad50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad54:	f103 0301 	add.w	r3, r3, #1
 800ad58:	bf08      	it	eq
 800ad5a:	2320      	moveq	r3, #32
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	4770      	bx	lr
 800ad60:	2300      	movs	r3, #0
 800ad62:	e7e4      	b.n	800ad2e <__hi0bits+0xa>

0800ad64 <__lo0bits>:
 800ad64:	6803      	ldr	r3, [r0, #0]
 800ad66:	f013 0207 	ands.w	r2, r3, #7
 800ad6a:	d00c      	beq.n	800ad86 <__lo0bits+0x22>
 800ad6c:	07d9      	lsls	r1, r3, #31
 800ad6e:	d422      	bmi.n	800adb6 <__lo0bits+0x52>
 800ad70:	079a      	lsls	r2, r3, #30
 800ad72:	bf49      	itett	mi
 800ad74:	085b      	lsrmi	r3, r3, #1
 800ad76:	089b      	lsrpl	r3, r3, #2
 800ad78:	6003      	strmi	r3, [r0, #0]
 800ad7a:	2201      	movmi	r2, #1
 800ad7c:	bf5c      	itt	pl
 800ad7e:	6003      	strpl	r3, [r0, #0]
 800ad80:	2202      	movpl	r2, #2
 800ad82:	4610      	mov	r0, r2
 800ad84:	4770      	bx	lr
 800ad86:	b299      	uxth	r1, r3
 800ad88:	b909      	cbnz	r1, 800ad8e <__lo0bits+0x2a>
 800ad8a:	0c1b      	lsrs	r3, r3, #16
 800ad8c:	2210      	movs	r2, #16
 800ad8e:	b2d9      	uxtb	r1, r3
 800ad90:	b909      	cbnz	r1, 800ad96 <__lo0bits+0x32>
 800ad92:	3208      	adds	r2, #8
 800ad94:	0a1b      	lsrs	r3, r3, #8
 800ad96:	0719      	lsls	r1, r3, #28
 800ad98:	bf04      	itt	eq
 800ad9a:	091b      	lsreq	r3, r3, #4
 800ad9c:	3204      	addeq	r2, #4
 800ad9e:	0799      	lsls	r1, r3, #30
 800ada0:	bf04      	itt	eq
 800ada2:	089b      	lsreq	r3, r3, #2
 800ada4:	3202      	addeq	r2, #2
 800ada6:	07d9      	lsls	r1, r3, #31
 800ada8:	d403      	bmi.n	800adb2 <__lo0bits+0x4e>
 800adaa:	085b      	lsrs	r3, r3, #1
 800adac:	f102 0201 	add.w	r2, r2, #1
 800adb0:	d003      	beq.n	800adba <__lo0bits+0x56>
 800adb2:	6003      	str	r3, [r0, #0]
 800adb4:	e7e5      	b.n	800ad82 <__lo0bits+0x1e>
 800adb6:	2200      	movs	r2, #0
 800adb8:	e7e3      	b.n	800ad82 <__lo0bits+0x1e>
 800adba:	2220      	movs	r2, #32
 800adbc:	e7e1      	b.n	800ad82 <__lo0bits+0x1e>
	...

0800adc0 <__i2b>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	2101      	movs	r1, #1
 800adc6:	f7ff ff05 	bl	800abd4 <_Balloc>
 800adca:	4602      	mov	r2, r0
 800adcc:	b928      	cbnz	r0, 800adda <__i2b+0x1a>
 800adce:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <__i2b+0x24>)
 800add0:	4805      	ldr	r0, [pc, #20]	; (800ade8 <__i2b+0x28>)
 800add2:	f240 1145 	movw	r1, #325	; 0x145
 800add6:	f000 fd23 	bl	800b820 <__assert_func>
 800adda:	2301      	movs	r3, #1
 800addc:	6144      	str	r4, [r0, #20]
 800adde:	6103      	str	r3, [r0, #16]
 800ade0:	bd10      	pop	{r4, pc}
 800ade2:	bf00      	nop
 800ade4:	080207bc 	.word	0x080207bc
 800ade8:	080207cd 	.word	0x080207cd

0800adec <__multiply>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	4691      	mov	r9, r2
 800adf2:	690a      	ldr	r2, [r1, #16]
 800adf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	bfb8      	it	lt
 800adfc:	460b      	movlt	r3, r1
 800adfe:	460c      	mov	r4, r1
 800ae00:	bfbc      	itt	lt
 800ae02:	464c      	movlt	r4, r9
 800ae04:	4699      	movlt	r9, r3
 800ae06:	6927      	ldr	r7, [r4, #16]
 800ae08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae0c:	68a3      	ldr	r3, [r4, #8]
 800ae0e:	6861      	ldr	r1, [r4, #4]
 800ae10:	eb07 060a 	add.w	r6, r7, sl
 800ae14:	42b3      	cmp	r3, r6
 800ae16:	b085      	sub	sp, #20
 800ae18:	bfb8      	it	lt
 800ae1a:	3101      	addlt	r1, #1
 800ae1c:	f7ff feda 	bl	800abd4 <_Balloc>
 800ae20:	b930      	cbnz	r0, 800ae30 <__multiply+0x44>
 800ae22:	4602      	mov	r2, r0
 800ae24:	4b44      	ldr	r3, [pc, #272]	; (800af38 <__multiply+0x14c>)
 800ae26:	4845      	ldr	r0, [pc, #276]	; (800af3c <__multiply+0x150>)
 800ae28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae2c:	f000 fcf8 	bl	800b820 <__assert_func>
 800ae30:	f100 0514 	add.w	r5, r0, #20
 800ae34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae38:	462b      	mov	r3, r5
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	4543      	cmp	r3, r8
 800ae3e:	d321      	bcc.n	800ae84 <__multiply+0x98>
 800ae40:	f104 0314 	add.w	r3, r4, #20
 800ae44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae48:	f109 0314 	add.w	r3, r9, #20
 800ae4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae50:	9202      	str	r2, [sp, #8]
 800ae52:	1b3a      	subs	r2, r7, r4
 800ae54:	3a15      	subs	r2, #21
 800ae56:	f022 0203 	bic.w	r2, r2, #3
 800ae5a:	3204      	adds	r2, #4
 800ae5c:	f104 0115 	add.w	r1, r4, #21
 800ae60:	428f      	cmp	r7, r1
 800ae62:	bf38      	it	cc
 800ae64:	2204      	movcc	r2, #4
 800ae66:	9201      	str	r2, [sp, #4]
 800ae68:	9a02      	ldr	r2, [sp, #8]
 800ae6a:	9303      	str	r3, [sp, #12]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d80c      	bhi.n	800ae8a <__multiply+0x9e>
 800ae70:	2e00      	cmp	r6, #0
 800ae72:	dd03      	ble.n	800ae7c <__multiply+0x90>
 800ae74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d05b      	beq.n	800af34 <__multiply+0x148>
 800ae7c:	6106      	str	r6, [r0, #16]
 800ae7e:	b005      	add	sp, #20
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	f843 2b04 	str.w	r2, [r3], #4
 800ae88:	e7d8      	b.n	800ae3c <__multiply+0x50>
 800ae8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae8e:	f1ba 0f00 	cmp.w	sl, #0
 800ae92:	d024      	beq.n	800aede <__multiply+0xf2>
 800ae94:	f104 0e14 	add.w	lr, r4, #20
 800ae98:	46a9      	mov	r9, r5
 800ae9a:	f04f 0c00 	mov.w	ip, #0
 800ae9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aea2:	f8d9 1000 	ldr.w	r1, [r9]
 800aea6:	fa1f fb82 	uxth.w	fp, r2
 800aeaa:	b289      	uxth	r1, r1
 800aeac:	fb0a 110b 	mla	r1, sl, fp, r1
 800aeb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aeb4:	f8d9 2000 	ldr.w	r2, [r9]
 800aeb8:	4461      	add	r1, ip
 800aeba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aebe:	fb0a c20b 	mla	r2, sl, fp, ip
 800aec2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aec6:	b289      	uxth	r1, r1
 800aec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aecc:	4577      	cmp	r7, lr
 800aece:	f849 1b04 	str.w	r1, [r9], #4
 800aed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aed6:	d8e2      	bhi.n	800ae9e <__multiply+0xb2>
 800aed8:	9a01      	ldr	r2, [sp, #4]
 800aeda:	f845 c002 	str.w	ip, [r5, r2]
 800aede:	9a03      	ldr	r2, [sp, #12]
 800aee0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aee4:	3304      	adds	r3, #4
 800aee6:	f1b9 0f00 	cmp.w	r9, #0
 800aeea:	d021      	beq.n	800af30 <__multiply+0x144>
 800aeec:	6829      	ldr	r1, [r5, #0]
 800aeee:	f104 0c14 	add.w	ip, r4, #20
 800aef2:	46ae      	mov	lr, r5
 800aef4:	f04f 0a00 	mov.w	sl, #0
 800aef8:	f8bc b000 	ldrh.w	fp, [ip]
 800aefc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af00:	fb09 220b 	mla	r2, r9, fp, r2
 800af04:	4452      	add	r2, sl
 800af06:	b289      	uxth	r1, r1
 800af08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af0c:	f84e 1b04 	str.w	r1, [lr], #4
 800af10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af18:	f8be 1000 	ldrh.w	r1, [lr]
 800af1c:	fb09 110a 	mla	r1, r9, sl, r1
 800af20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af24:	4567      	cmp	r7, ip
 800af26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af2a:	d8e5      	bhi.n	800aef8 <__multiply+0x10c>
 800af2c:	9a01      	ldr	r2, [sp, #4]
 800af2e:	50a9      	str	r1, [r5, r2]
 800af30:	3504      	adds	r5, #4
 800af32:	e799      	b.n	800ae68 <__multiply+0x7c>
 800af34:	3e01      	subs	r6, #1
 800af36:	e79b      	b.n	800ae70 <__multiply+0x84>
 800af38:	080207bc 	.word	0x080207bc
 800af3c:	080207cd 	.word	0x080207cd

0800af40 <__pow5mult>:
 800af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af44:	4615      	mov	r5, r2
 800af46:	f012 0203 	ands.w	r2, r2, #3
 800af4a:	4606      	mov	r6, r0
 800af4c:	460f      	mov	r7, r1
 800af4e:	d007      	beq.n	800af60 <__pow5mult+0x20>
 800af50:	4c25      	ldr	r4, [pc, #148]	; (800afe8 <__pow5mult+0xa8>)
 800af52:	3a01      	subs	r2, #1
 800af54:	2300      	movs	r3, #0
 800af56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af5a:	f7ff fe9d 	bl	800ac98 <__multadd>
 800af5e:	4607      	mov	r7, r0
 800af60:	10ad      	asrs	r5, r5, #2
 800af62:	d03d      	beq.n	800afe0 <__pow5mult+0xa0>
 800af64:	69f4      	ldr	r4, [r6, #28]
 800af66:	b97c      	cbnz	r4, 800af88 <__pow5mult+0x48>
 800af68:	2010      	movs	r0, #16
 800af6a:	f7ff fe2b 	bl	800abc4 <malloc>
 800af6e:	4602      	mov	r2, r0
 800af70:	61f0      	str	r0, [r6, #28]
 800af72:	b928      	cbnz	r0, 800af80 <__pow5mult+0x40>
 800af74:	4b1d      	ldr	r3, [pc, #116]	; (800afec <__pow5mult+0xac>)
 800af76:	481e      	ldr	r0, [pc, #120]	; (800aff0 <__pow5mult+0xb0>)
 800af78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af7c:	f000 fc50 	bl	800b820 <__assert_func>
 800af80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af84:	6004      	str	r4, [r0, #0]
 800af86:	60c4      	str	r4, [r0, #12]
 800af88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af90:	b94c      	cbnz	r4, 800afa6 <__pow5mult+0x66>
 800af92:	f240 2171 	movw	r1, #625	; 0x271
 800af96:	4630      	mov	r0, r6
 800af98:	f7ff ff12 	bl	800adc0 <__i2b>
 800af9c:	2300      	movs	r3, #0
 800af9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800afa2:	4604      	mov	r4, r0
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	f04f 0900 	mov.w	r9, #0
 800afaa:	07eb      	lsls	r3, r5, #31
 800afac:	d50a      	bpl.n	800afc4 <__pow5mult+0x84>
 800afae:	4639      	mov	r1, r7
 800afb0:	4622      	mov	r2, r4
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7ff ff1a 	bl	800adec <__multiply>
 800afb8:	4639      	mov	r1, r7
 800afba:	4680      	mov	r8, r0
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7ff fe49 	bl	800ac54 <_Bfree>
 800afc2:	4647      	mov	r7, r8
 800afc4:	106d      	asrs	r5, r5, #1
 800afc6:	d00b      	beq.n	800afe0 <__pow5mult+0xa0>
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	b938      	cbnz	r0, 800afdc <__pow5mult+0x9c>
 800afcc:	4622      	mov	r2, r4
 800afce:	4621      	mov	r1, r4
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7ff ff0b 	bl	800adec <__multiply>
 800afd6:	6020      	str	r0, [r4, #0]
 800afd8:	f8c0 9000 	str.w	r9, [r0]
 800afdc:	4604      	mov	r4, r0
 800afde:	e7e4      	b.n	800afaa <__pow5mult+0x6a>
 800afe0:	4638      	mov	r0, r7
 800afe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe6:	bf00      	nop
 800afe8:	08020918 	.word	0x08020918
 800afec:	0802074d 	.word	0x0802074d
 800aff0:	080207cd 	.word	0x080207cd

0800aff4 <__lshift>:
 800aff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	460c      	mov	r4, r1
 800affa:	6849      	ldr	r1, [r1, #4]
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	4607      	mov	r7, r0
 800b006:	4691      	mov	r9, r2
 800b008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b00c:	f108 0601 	add.w	r6, r8, #1
 800b010:	42b3      	cmp	r3, r6
 800b012:	db0b      	blt.n	800b02c <__lshift+0x38>
 800b014:	4638      	mov	r0, r7
 800b016:	f7ff fddd 	bl	800abd4 <_Balloc>
 800b01a:	4605      	mov	r5, r0
 800b01c:	b948      	cbnz	r0, 800b032 <__lshift+0x3e>
 800b01e:	4602      	mov	r2, r0
 800b020:	4b28      	ldr	r3, [pc, #160]	; (800b0c4 <__lshift+0xd0>)
 800b022:	4829      	ldr	r0, [pc, #164]	; (800b0c8 <__lshift+0xd4>)
 800b024:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b028:	f000 fbfa 	bl	800b820 <__assert_func>
 800b02c:	3101      	adds	r1, #1
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	e7ee      	b.n	800b010 <__lshift+0x1c>
 800b032:	2300      	movs	r3, #0
 800b034:	f100 0114 	add.w	r1, r0, #20
 800b038:	f100 0210 	add.w	r2, r0, #16
 800b03c:	4618      	mov	r0, r3
 800b03e:	4553      	cmp	r3, sl
 800b040:	db33      	blt.n	800b0aa <__lshift+0xb6>
 800b042:	6920      	ldr	r0, [r4, #16]
 800b044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b048:	f104 0314 	add.w	r3, r4, #20
 800b04c:	f019 091f 	ands.w	r9, r9, #31
 800b050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b058:	d02b      	beq.n	800b0b2 <__lshift+0xbe>
 800b05a:	f1c9 0e20 	rsb	lr, r9, #32
 800b05e:	468a      	mov	sl, r1
 800b060:	2200      	movs	r2, #0
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	fa00 f009 	lsl.w	r0, r0, r9
 800b068:	4310      	orrs	r0, r2
 800b06a:	f84a 0b04 	str.w	r0, [sl], #4
 800b06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b072:	459c      	cmp	ip, r3
 800b074:	fa22 f20e 	lsr.w	r2, r2, lr
 800b078:	d8f3      	bhi.n	800b062 <__lshift+0x6e>
 800b07a:	ebac 0304 	sub.w	r3, ip, r4
 800b07e:	3b15      	subs	r3, #21
 800b080:	f023 0303 	bic.w	r3, r3, #3
 800b084:	3304      	adds	r3, #4
 800b086:	f104 0015 	add.w	r0, r4, #21
 800b08a:	4584      	cmp	ip, r0
 800b08c:	bf38      	it	cc
 800b08e:	2304      	movcc	r3, #4
 800b090:	50ca      	str	r2, [r1, r3]
 800b092:	b10a      	cbz	r2, 800b098 <__lshift+0xa4>
 800b094:	f108 0602 	add.w	r6, r8, #2
 800b098:	3e01      	subs	r6, #1
 800b09a:	4638      	mov	r0, r7
 800b09c:	612e      	str	r6, [r5, #16]
 800b09e:	4621      	mov	r1, r4
 800b0a0:	f7ff fdd8 	bl	800ac54 <_Bfree>
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	e7c5      	b.n	800b03e <__lshift+0x4a>
 800b0b2:	3904      	subs	r1, #4
 800b0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0bc:	459c      	cmp	ip, r3
 800b0be:	d8f9      	bhi.n	800b0b4 <__lshift+0xc0>
 800b0c0:	e7ea      	b.n	800b098 <__lshift+0xa4>
 800b0c2:	bf00      	nop
 800b0c4:	080207bc 	.word	0x080207bc
 800b0c8:	080207cd 	.word	0x080207cd

0800b0cc <__mcmp>:
 800b0cc:	b530      	push	{r4, r5, lr}
 800b0ce:	6902      	ldr	r2, [r0, #16]
 800b0d0:	690c      	ldr	r4, [r1, #16]
 800b0d2:	1b12      	subs	r2, r2, r4
 800b0d4:	d10e      	bne.n	800b0f4 <__mcmp+0x28>
 800b0d6:	f100 0314 	add.w	r3, r0, #20
 800b0da:	3114      	adds	r1, #20
 800b0dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0ec:	42a5      	cmp	r5, r4
 800b0ee:	d003      	beq.n	800b0f8 <__mcmp+0x2c>
 800b0f0:	d305      	bcc.n	800b0fe <__mcmp+0x32>
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	bd30      	pop	{r4, r5, pc}
 800b0f8:	4283      	cmp	r3, r0
 800b0fa:	d3f3      	bcc.n	800b0e4 <__mcmp+0x18>
 800b0fc:	e7fa      	b.n	800b0f4 <__mcmp+0x28>
 800b0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b102:	e7f7      	b.n	800b0f4 <__mcmp+0x28>

0800b104 <__mdiff>:
 800b104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	460c      	mov	r4, r1
 800b10a:	4606      	mov	r6, r0
 800b10c:	4611      	mov	r1, r2
 800b10e:	4620      	mov	r0, r4
 800b110:	4690      	mov	r8, r2
 800b112:	f7ff ffdb 	bl	800b0cc <__mcmp>
 800b116:	1e05      	subs	r5, r0, #0
 800b118:	d110      	bne.n	800b13c <__mdiff+0x38>
 800b11a:	4629      	mov	r1, r5
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff fd59 	bl	800abd4 <_Balloc>
 800b122:	b930      	cbnz	r0, 800b132 <__mdiff+0x2e>
 800b124:	4b3a      	ldr	r3, [pc, #232]	; (800b210 <__mdiff+0x10c>)
 800b126:	4602      	mov	r2, r0
 800b128:	f240 2137 	movw	r1, #567	; 0x237
 800b12c:	4839      	ldr	r0, [pc, #228]	; (800b214 <__mdiff+0x110>)
 800b12e:	f000 fb77 	bl	800b820 <__assert_func>
 800b132:	2301      	movs	r3, #1
 800b134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13c:	bfa4      	itt	ge
 800b13e:	4643      	movge	r3, r8
 800b140:	46a0      	movge	r8, r4
 800b142:	4630      	mov	r0, r6
 800b144:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b148:	bfa6      	itte	ge
 800b14a:	461c      	movge	r4, r3
 800b14c:	2500      	movge	r5, #0
 800b14e:	2501      	movlt	r5, #1
 800b150:	f7ff fd40 	bl	800abd4 <_Balloc>
 800b154:	b920      	cbnz	r0, 800b160 <__mdiff+0x5c>
 800b156:	4b2e      	ldr	r3, [pc, #184]	; (800b210 <__mdiff+0x10c>)
 800b158:	4602      	mov	r2, r0
 800b15a:	f240 2145 	movw	r1, #581	; 0x245
 800b15e:	e7e5      	b.n	800b12c <__mdiff+0x28>
 800b160:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b164:	6926      	ldr	r6, [r4, #16]
 800b166:	60c5      	str	r5, [r0, #12]
 800b168:	f104 0914 	add.w	r9, r4, #20
 800b16c:	f108 0514 	add.w	r5, r8, #20
 800b170:	f100 0e14 	add.w	lr, r0, #20
 800b174:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b178:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b17c:	f108 0210 	add.w	r2, r8, #16
 800b180:	46f2      	mov	sl, lr
 800b182:	2100      	movs	r1, #0
 800b184:	f859 3b04 	ldr.w	r3, [r9], #4
 800b188:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b18c:	fa11 f88b 	uxtah	r8, r1, fp
 800b190:	b299      	uxth	r1, r3
 800b192:	0c1b      	lsrs	r3, r3, #16
 800b194:	eba8 0801 	sub.w	r8, r8, r1
 800b198:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b19c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1a0:	fa1f f888 	uxth.w	r8, r8
 800b1a4:	1419      	asrs	r1, r3, #16
 800b1a6:	454e      	cmp	r6, r9
 800b1a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1ac:	f84a 3b04 	str.w	r3, [sl], #4
 800b1b0:	d8e8      	bhi.n	800b184 <__mdiff+0x80>
 800b1b2:	1b33      	subs	r3, r6, r4
 800b1b4:	3b15      	subs	r3, #21
 800b1b6:	f023 0303 	bic.w	r3, r3, #3
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	3415      	adds	r4, #21
 800b1be:	42a6      	cmp	r6, r4
 800b1c0:	bf38      	it	cc
 800b1c2:	2304      	movcc	r3, #4
 800b1c4:	441d      	add	r5, r3
 800b1c6:	4473      	add	r3, lr
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	462e      	mov	r6, r5
 800b1cc:	4566      	cmp	r6, ip
 800b1ce:	d30e      	bcc.n	800b1ee <__mdiff+0xea>
 800b1d0:	f10c 0203 	add.w	r2, ip, #3
 800b1d4:	1b52      	subs	r2, r2, r5
 800b1d6:	f022 0203 	bic.w	r2, r2, #3
 800b1da:	3d03      	subs	r5, #3
 800b1dc:	45ac      	cmp	ip, r5
 800b1de:	bf38      	it	cc
 800b1e0:	2200      	movcc	r2, #0
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1e8:	b17a      	cbz	r2, 800b20a <__mdiff+0x106>
 800b1ea:	6107      	str	r7, [r0, #16]
 800b1ec:	e7a4      	b.n	800b138 <__mdiff+0x34>
 800b1ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1f2:	fa11 f288 	uxtah	r2, r1, r8
 800b1f6:	1414      	asrs	r4, r2, #16
 800b1f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b202:	f84e 2b04 	str.w	r2, [lr], #4
 800b206:	1421      	asrs	r1, r4, #16
 800b208:	e7e0      	b.n	800b1cc <__mdiff+0xc8>
 800b20a:	3f01      	subs	r7, #1
 800b20c:	e7ea      	b.n	800b1e4 <__mdiff+0xe0>
 800b20e:	bf00      	nop
 800b210:	080207bc 	.word	0x080207bc
 800b214:	080207cd 	.word	0x080207cd

0800b218 <__d2b>:
 800b218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b21c:	460f      	mov	r7, r1
 800b21e:	2101      	movs	r1, #1
 800b220:	ec59 8b10 	vmov	r8, r9, d0
 800b224:	4616      	mov	r6, r2
 800b226:	f7ff fcd5 	bl	800abd4 <_Balloc>
 800b22a:	4604      	mov	r4, r0
 800b22c:	b930      	cbnz	r0, 800b23c <__d2b+0x24>
 800b22e:	4602      	mov	r2, r0
 800b230:	4b24      	ldr	r3, [pc, #144]	; (800b2c4 <__d2b+0xac>)
 800b232:	4825      	ldr	r0, [pc, #148]	; (800b2c8 <__d2b+0xb0>)
 800b234:	f240 310f 	movw	r1, #783	; 0x30f
 800b238:	f000 faf2 	bl	800b820 <__assert_func>
 800b23c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b244:	bb2d      	cbnz	r5, 800b292 <__d2b+0x7a>
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	f1b8 0300 	subs.w	r3, r8, #0
 800b24c:	d026      	beq.n	800b29c <__d2b+0x84>
 800b24e:	4668      	mov	r0, sp
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	f7ff fd87 	bl	800ad64 <__lo0bits>
 800b256:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b25a:	b1e8      	cbz	r0, 800b298 <__d2b+0x80>
 800b25c:	f1c0 0320 	rsb	r3, r0, #32
 800b260:	fa02 f303 	lsl.w	r3, r2, r3
 800b264:	430b      	orrs	r3, r1
 800b266:	40c2      	lsrs	r2, r0
 800b268:	6163      	str	r3, [r4, #20]
 800b26a:	9201      	str	r2, [sp, #4]
 800b26c:	9b01      	ldr	r3, [sp, #4]
 800b26e:	61a3      	str	r3, [r4, #24]
 800b270:	2b00      	cmp	r3, #0
 800b272:	bf14      	ite	ne
 800b274:	2202      	movne	r2, #2
 800b276:	2201      	moveq	r2, #1
 800b278:	6122      	str	r2, [r4, #16]
 800b27a:	b1bd      	cbz	r5, 800b2ac <__d2b+0x94>
 800b27c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b280:	4405      	add	r5, r0
 800b282:	603d      	str	r5, [r7, #0]
 800b284:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b288:	6030      	str	r0, [r6, #0]
 800b28a:	4620      	mov	r0, r4
 800b28c:	b003      	add	sp, #12
 800b28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b296:	e7d6      	b.n	800b246 <__d2b+0x2e>
 800b298:	6161      	str	r1, [r4, #20]
 800b29a:	e7e7      	b.n	800b26c <__d2b+0x54>
 800b29c:	a801      	add	r0, sp, #4
 800b29e:	f7ff fd61 	bl	800ad64 <__lo0bits>
 800b2a2:	9b01      	ldr	r3, [sp, #4]
 800b2a4:	6163      	str	r3, [r4, #20]
 800b2a6:	3020      	adds	r0, #32
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	e7e5      	b.n	800b278 <__d2b+0x60>
 800b2ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2b4:	6038      	str	r0, [r7, #0]
 800b2b6:	6918      	ldr	r0, [r3, #16]
 800b2b8:	f7ff fd34 	bl	800ad24 <__hi0bits>
 800b2bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2c0:	e7e2      	b.n	800b288 <__d2b+0x70>
 800b2c2:	bf00      	nop
 800b2c4:	080207bc 	.word	0x080207bc
 800b2c8:	080207cd 	.word	0x080207cd

0800b2cc <__sfputc_r>:
 800b2cc:	6893      	ldr	r3, [r2, #8]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	b410      	push	{r4}
 800b2d4:	6093      	str	r3, [r2, #8]
 800b2d6:	da08      	bge.n	800b2ea <__sfputc_r+0x1e>
 800b2d8:	6994      	ldr	r4, [r2, #24]
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	db01      	blt.n	800b2e2 <__sfputc_r+0x16>
 800b2de:	290a      	cmp	r1, #10
 800b2e0:	d103      	bne.n	800b2ea <__sfputc_r+0x1e>
 800b2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e6:	f7fe bc4c 	b.w	8009b82 <__swbuf_r>
 800b2ea:	6813      	ldr	r3, [r2, #0]
 800b2ec:	1c58      	adds	r0, r3, #1
 800b2ee:	6010      	str	r0, [r2, #0]
 800b2f0:	7019      	strb	r1, [r3, #0]
 800b2f2:	4608      	mov	r0, r1
 800b2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <__sfputs_r>:
 800b2fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	460f      	mov	r7, r1
 800b300:	4614      	mov	r4, r2
 800b302:	18d5      	adds	r5, r2, r3
 800b304:	42ac      	cmp	r4, r5
 800b306:	d101      	bne.n	800b30c <__sfputs_r+0x12>
 800b308:	2000      	movs	r0, #0
 800b30a:	e007      	b.n	800b31c <__sfputs_r+0x22>
 800b30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b310:	463a      	mov	r2, r7
 800b312:	4630      	mov	r0, r6
 800b314:	f7ff ffda 	bl	800b2cc <__sfputc_r>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d1f3      	bne.n	800b304 <__sfputs_r+0xa>
 800b31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b320 <_vfiprintf_r>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	460d      	mov	r5, r1
 800b326:	b09d      	sub	sp, #116	; 0x74
 800b328:	4614      	mov	r4, r2
 800b32a:	4698      	mov	r8, r3
 800b32c:	4606      	mov	r6, r0
 800b32e:	b118      	cbz	r0, 800b338 <_vfiprintf_r+0x18>
 800b330:	6a03      	ldr	r3, [r0, #32]
 800b332:	b90b      	cbnz	r3, 800b338 <_vfiprintf_r+0x18>
 800b334:	f7fe fb36 	bl	80099a4 <__sinit>
 800b338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b33a:	07d9      	lsls	r1, r3, #31
 800b33c:	d405      	bmi.n	800b34a <_vfiprintf_r+0x2a>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	059a      	lsls	r2, r3, #22
 800b342:	d402      	bmi.n	800b34a <_vfiprintf_r+0x2a>
 800b344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b346:	f7fe fd3e 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	071b      	lsls	r3, r3, #28
 800b34e:	d501      	bpl.n	800b354 <_vfiprintf_r+0x34>
 800b350:	692b      	ldr	r3, [r5, #16]
 800b352:	b99b      	cbnz	r3, 800b37c <_vfiprintf_r+0x5c>
 800b354:	4629      	mov	r1, r5
 800b356:	4630      	mov	r0, r6
 800b358:	f7fe fc50 	bl	8009bfc <__swsetup_r>
 800b35c:	b170      	cbz	r0, 800b37c <_vfiprintf_r+0x5c>
 800b35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b360:	07dc      	lsls	r4, r3, #31
 800b362:	d504      	bpl.n	800b36e <_vfiprintf_r+0x4e>
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	b01d      	add	sp, #116	; 0x74
 800b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	0598      	lsls	r0, r3, #22
 800b372:	d4f7      	bmi.n	800b364 <_vfiprintf_r+0x44>
 800b374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b376:	f7fe fd27 	bl	8009dc8 <__retarget_lock_release_recursive>
 800b37a:	e7f3      	b.n	800b364 <_vfiprintf_r+0x44>
 800b37c:	2300      	movs	r3, #0
 800b37e:	9309      	str	r3, [sp, #36]	; 0x24
 800b380:	2320      	movs	r3, #32
 800b382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b386:	f8cd 800c 	str.w	r8, [sp, #12]
 800b38a:	2330      	movs	r3, #48	; 0x30
 800b38c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b540 <_vfiprintf_r+0x220>
 800b390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b394:	f04f 0901 	mov.w	r9, #1
 800b398:	4623      	mov	r3, r4
 800b39a:	469a      	mov	sl, r3
 800b39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a0:	b10a      	cbz	r2, 800b3a6 <_vfiprintf_r+0x86>
 800b3a2:	2a25      	cmp	r2, #37	; 0x25
 800b3a4:	d1f9      	bne.n	800b39a <_vfiprintf_r+0x7a>
 800b3a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3aa:	d00b      	beq.n	800b3c4 <_vfiprintf_r+0xa4>
 800b3ac:	465b      	mov	r3, fp
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f7ff ffa1 	bl	800b2fa <__sfputs_r>
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	f000 80a9 	beq.w	800b510 <_vfiprintf_r+0x1f0>
 800b3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3c0:	445a      	add	r2, fp
 800b3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 80a1 	beq.w	800b510 <_vfiprintf_r+0x1f0>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3d8:	f10a 0a01 	add.w	sl, sl, #1
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	9307      	str	r3, [sp, #28]
 800b3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b3e6:	4654      	mov	r4, sl
 800b3e8:	2205      	movs	r2, #5
 800b3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ee:	4854      	ldr	r0, [pc, #336]	; (800b540 <_vfiprintf_r+0x220>)
 800b3f0:	f7f4 feee 	bl	80001d0 <memchr>
 800b3f4:	9a04      	ldr	r2, [sp, #16]
 800b3f6:	b9d8      	cbnz	r0, 800b430 <_vfiprintf_r+0x110>
 800b3f8:	06d1      	lsls	r1, r2, #27
 800b3fa:	bf44      	itt	mi
 800b3fc:	2320      	movmi	r3, #32
 800b3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b402:	0713      	lsls	r3, r2, #28
 800b404:	bf44      	itt	mi
 800b406:	232b      	movmi	r3, #43	; 0x2b
 800b408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b40c:	f89a 3000 	ldrb.w	r3, [sl]
 800b410:	2b2a      	cmp	r3, #42	; 0x2a
 800b412:	d015      	beq.n	800b440 <_vfiprintf_r+0x120>
 800b414:	9a07      	ldr	r2, [sp, #28]
 800b416:	4654      	mov	r4, sl
 800b418:	2000      	movs	r0, #0
 800b41a:	f04f 0c0a 	mov.w	ip, #10
 800b41e:	4621      	mov	r1, r4
 800b420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b424:	3b30      	subs	r3, #48	; 0x30
 800b426:	2b09      	cmp	r3, #9
 800b428:	d94d      	bls.n	800b4c6 <_vfiprintf_r+0x1a6>
 800b42a:	b1b0      	cbz	r0, 800b45a <_vfiprintf_r+0x13a>
 800b42c:	9207      	str	r2, [sp, #28]
 800b42e:	e014      	b.n	800b45a <_vfiprintf_r+0x13a>
 800b430:	eba0 0308 	sub.w	r3, r0, r8
 800b434:	fa09 f303 	lsl.w	r3, r9, r3
 800b438:	4313      	orrs	r3, r2
 800b43a:	9304      	str	r3, [sp, #16]
 800b43c:	46a2      	mov	sl, r4
 800b43e:	e7d2      	b.n	800b3e6 <_vfiprintf_r+0xc6>
 800b440:	9b03      	ldr	r3, [sp, #12]
 800b442:	1d19      	adds	r1, r3, #4
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	9103      	str	r1, [sp, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bfbb      	ittet	lt
 800b44c:	425b      	neglt	r3, r3
 800b44e:	f042 0202 	orrlt.w	r2, r2, #2
 800b452:	9307      	strge	r3, [sp, #28]
 800b454:	9307      	strlt	r3, [sp, #28]
 800b456:	bfb8      	it	lt
 800b458:	9204      	strlt	r2, [sp, #16]
 800b45a:	7823      	ldrb	r3, [r4, #0]
 800b45c:	2b2e      	cmp	r3, #46	; 0x2e
 800b45e:	d10c      	bne.n	800b47a <_vfiprintf_r+0x15a>
 800b460:	7863      	ldrb	r3, [r4, #1]
 800b462:	2b2a      	cmp	r3, #42	; 0x2a
 800b464:	d134      	bne.n	800b4d0 <_vfiprintf_r+0x1b0>
 800b466:	9b03      	ldr	r3, [sp, #12]
 800b468:	1d1a      	adds	r2, r3, #4
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	9203      	str	r2, [sp, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	bfb8      	it	lt
 800b472:	f04f 33ff 	movlt.w	r3, #4294967295
 800b476:	3402      	adds	r4, #2
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b550 <_vfiprintf_r+0x230>
 800b47e:	7821      	ldrb	r1, [r4, #0]
 800b480:	2203      	movs	r2, #3
 800b482:	4650      	mov	r0, sl
 800b484:	f7f4 fea4 	bl	80001d0 <memchr>
 800b488:	b138      	cbz	r0, 800b49a <_vfiprintf_r+0x17a>
 800b48a:	9b04      	ldr	r3, [sp, #16]
 800b48c:	eba0 000a 	sub.w	r0, r0, sl
 800b490:	2240      	movs	r2, #64	; 0x40
 800b492:	4082      	lsls	r2, r0
 800b494:	4313      	orrs	r3, r2
 800b496:	3401      	adds	r4, #1
 800b498:	9304      	str	r3, [sp, #16]
 800b49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b49e:	4829      	ldr	r0, [pc, #164]	; (800b544 <_vfiprintf_r+0x224>)
 800b4a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4a4:	2206      	movs	r2, #6
 800b4a6:	f7f4 fe93 	bl	80001d0 <memchr>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d03f      	beq.n	800b52e <_vfiprintf_r+0x20e>
 800b4ae:	4b26      	ldr	r3, [pc, #152]	; (800b548 <_vfiprintf_r+0x228>)
 800b4b0:	bb1b      	cbnz	r3, 800b4fa <_vfiprintf_r+0x1da>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	3307      	adds	r3, #7
 800b4b6:	f023 0307 	bic.w	r3, r3, #7
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	9303      	str	r3, [sp, #12]
 800b4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c0:	443b      	add	r3, r7
 800b4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c4:	e768      	b.n	800b398 <_vfiprintf_r+0x78>
 800b4c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	e7a6      	b.n	800b41e <_vfiprintf_r+0xfe>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	3401      	adds	r4, #1
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	f04f 0c0a 	mov.w	ip, #10
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4e2:	3a30      	subs	r2, #48	; 0x30
 800b4e4:	2a09      	cmp	r2, #9
 800b4e6:	d903      	bls.n	800b4f0 <_vfiprintf_r+0x1d0>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d0c6      	beq.n	800b47a <_vfiprintf_r+0x15a>
 800b4ec:	9105      	str	r1, [sp, #20]
 800b4ee:	e7c4      	b.n	800b47a <_vfiprintf_r+0x15a>
 800b4f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e7f0      	b.n	800b4dc <_vfiprintf_r+0x1bc>
 800b4fa:	ab03      	add	r3, sp, #12
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	462a      	mov	r2, r5
 800b500:	4b12      	ldr	r3, [pc, #72]	; (800b54c <_vfiprintf_r+0x22c>)
 800b502:	a904      	add	r1, sp, #16
 800b504:	4630      	mov	r0, r6
 800b506:	f7fd fdfb 	bl	8009100 <_printf_float>
 800b50a:	4607      	mov	r7, r0
 800b50c:	1c78      	adds	r0, r7, #1
 800b50e:	d1d6      	bne.n	800b4be <_vfiprintf_r+0x19e>
 800b510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b512:	07d9      	lsls	r1, r3, #31
 800b514:	d405      	bmi.n	800b522 <_vfiprintf_r+0x202>
 800b516:	89ab      	ldrh	r3, [r5, #12]
 800b518:	059a      	lsls	r2, r3, #22
 800b51a:	d402      	bmi.n	800b522 <_vfiprintf_r+0x202>
 800b51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b51e:	f7fe fc53 	bl	8009dc8 <__retarget_lock_release_recursive>
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	065b      	lsls	r3, r3, #25
 800b526:	f53f af1d 	bmi.w	800b364 <_vfiprintf_r+0x44>
 800b52a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b52c:	e71c      	b.n	800b368 <_vfiprintf_r+0x48>
 800b52e:	ab03      	add	r3, sp, #12
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	462a      	mov	r2, r5
 800b534:	4b05      	ldr	r3, [pc, #20]	; (800b54c <_vfiprintf_r+0x22c>)
 800b536:	a904      	add	r1, sp, #16
 800b538:	4630      	mov	r0, r6
 800b53a:	f7fe f885 	bl	8009648 <_printf_i>
 800b53e:	e7e4      	b.n	800b50a <_vfiprintf_r+0x1ea>
 800b540:	08020924 	.word	0x08020924
 800b544:	0802092e 	.word	0x0802092e
 800b548:	08009101 	.word	0x08009101
 800b54c:	0800b2fb 	.word	0x0800b2fb
 800b550:	0802092a 	.word	0x0802092a

0800b554 <__sflush_r>:
 800b554:	898a      	ldrh	r2, [r1, #12]
 800b556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55a:	4605      	mov	r5, r0
 800b55c:	0710      	lsls	r0, r2, #28
 800b55e:	460c      	mov	r4, r1
 800b560:	d458      	bmi.n	800b614 <__sflush_r+0xc0>
 800b562:	684b      	ldr	r3, [r1, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	dc05      	bgt.n	800b574 <__sflush_r+0x20>
 800b568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dc02      	bgt.n	800b574 <__sflush_r+0x20>
 800b56e:	2000      	movs	r0, #0
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b576:	2e00      	cmp	r6, #0
 800b578:	d0f9      	beq.n	800b56e <__sflush_r+0x1a>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b580:	682f      	ldr	r7, [r5, #0]
 800b582:	6a21      	ldr	r1, [r4, #32]
 800b584:	602b      	str	r3, [r5, #0]
 800b586:	d032      	beq.n	800b5ee <__sflush_r+0x9a>
 800b588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b58a:	89a3      	ldrh	r3, [r4, #12]
 800b58c:	075a      	lsls	r2, r3, #29
 800b58e:	d505      	bpl.n	800b59c <__sflush_r+0x48>
 800b590:	6863      	ldr	r3, [r4, #4]
 800b592:	1ac0      	subs	r0, r0, r3
 800b594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b596:	b10b      	cbz	r3, 800b59c <__sflush_r+0x48>
 800b598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b59a:	1ac0      	subs	r0, r0, r3
 800b59c:	2300      	movs	r3, #0
 800b59e:	4602      	mov	r2, r0
 800b5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5a2:	6a21      	ldr	r1, [r4, #32]
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b0      	blx	r6
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	d106      	bne.n	800b5bc <__sflush_r+0x68>
 800b5ae:	6829      	ldr	r1, [r5, #0]
 800b5b0:	291d      	cmp	r1, #29
 800b5b2:	d82b      	bhi.n	800b60c <__sflush_r+0xb8>
 800b5b4:	4a29      	ldr	r2, [pc, #164]	; (800b65c <__sflush_r+0x108>)
 800b5b6:	410a      	asrs	r2, r1
 800b5b8:	07d6      	lsls	r6, r2, #31
 800b5ba:	d427      	bmi.n	800b60c <__sflush_r+0xb8>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	6062      	str	r2, [r4, #4]
 800b5c0:	04d9      	lsls	r1, r3, #19
 800b5c2:	6922      	ldr	r2, [r4, #16]
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	d504      	bpl.n	800b5d2 <__sflush_r+0x7e>
 800b5c8:	1c42      	adds	r2, r0, #1
 800b5ca:	d101      	bne.n	800b5d0 <__sflush_r+0x7c>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b903      	cbnz	r3, 800b5d2 <__sflush_r+0x7e>
 800b5d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b5d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5d4:	602f      	str	r7, [r5, #0]
 800b5d6:	2900      	cmp	r1, #0
 800b5d8:	d0c9      	beq.n	800b56e <__sflush_r+0x1a>
 800b5da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	d002      	beq.n	800b5e8 <__sflush_r+0x94>
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f7ff faa2 	bl	800ab2c <_free_r>
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ec:	e7c0      	b.n	800b570 <__sflush_r+0x1c>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b0      	blx	r6
 800b5f4:	1c41      	adds	r1, r0, #1
 800b5f6:	d1c8      	bne.n	800b58a <__sflush_r+0x36>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c5      	beq.n	800b58a <__sflush_r+0x36>
 800b5fe:	2b1d      	cmp	r3, #29
 800b600:	d001      	beq.n	800b606 <__sflush_r+0xb2>
 800b602:	2b16      	cmp	r3, #22
 800b604:	d101      	bne.n	800b60a <__sflush_r+0xb6>
 800b606:	602f      	str	r7, [r5, #0]
 800b608:	e7b1      	b.n	800b56e <__sflush_r+0x1a>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	e7ad      	b.n	800b570 <__sflush_r+0x1c>
 800b614:	690f      	ldr	r7, [r1, #16]
 800b616:	2f00      	cmp	r7, #0
 800b618:	d0a9      	beq.n	800b56e <__sflush_r+0x1a>
 800b61a:	0793      	lsls	r3, r2, #30
 800b61c:	680e      	ldr	r6, [r1, #0]
 800b61e:	bf08      	it	eq
 800b620:	694b      	ldreq	r3, [r1, #20]
 800b622:	600f      	str	r7, [r1, #0]
 800b624:	bf18      	it	ne
 800b626:	2300      	movne	r3, #0
 800b628:	eba6 0807 	sub.w	r8, r6, r7
 800b62c:	608b      	str	r3, [r1, #8]
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	dd9c      	ble.n	800b56e <__sflush_r+0x1a>
 800b634:	6a21      	ldr	r1, [r4, #32]
 800b636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b638:	4643      	mov	r3, r8
 800b63a:	463a      	mov	r2, r7
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b0      	blx	r6
 800b640:	2800      	cmp	r0, #0
 800b642:	dc06      	bgt.n	800b652 <__sflush_r+0xfe>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e78e      	b.n	800b570 <__sflush_r+0x1c>
 800b652:	4407      	add	r7, r0
 800b654:	eba8 0800 	sub.w	r8, r8, r0
 800b658:	e7e9      	b.n	800b62e <__sflush_r+0xda>
 800b65a:	bf00      	nop
 800b65c:	dfbffffe 	.word	0xdfbffffe

0800b660 <_fflush_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	b913      	cbnz	r3, 800b670 <_fflush_r+0x10>
 800b66a:	2500      	movs	r5, #0
 800b66c:	4628      	mov	r0, r5
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	b118      	cbz	r0, 800b67a <_fflush_r+0x1a>
 800b672:	6a03      	ldr	r3, [r0, #32]
 800b674:	b90b      	cbnz	r3, 800b67a <_fflush_r+0x1a>
 800b676:	f7fe f995 	bl	80099a4 <__sinit>
 800b67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d0f3      	beq.n	800b66a <_fflush_r+0xa>
 800b682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b684:	07d0      	lsls	r0, r2, #31
 800b686:	d404      	bmi.n	800b692 <_fflush_r+0x32>
 800b688:	0599      	lsls	r1, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_fflush_r+0x32>
 800b68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b68e:	f7fe fb9a 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800b692:	4628      	mov	r0, r5
 800b694:	4621      	mov	r1, r4
 800b696:	f7ff ff5d 	bl	800b554 <__sflush_r>
 800b69a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b69c:	07da      	lsls	r2, r3, #31
 800b69e:	4605      	mov	r5, r0
 800b6a0:	d4e4      	bmi.n	800b66c <_fflush_r+0xc>
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	059b      	lsls	r3, r3, #22
 800b6a6:	d4e1      	bmi.n	800b66c <_fflush_r+0xc>
 800b6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6aa:	f7fe fb8d 	bl	8009dc8 <__retarget_lock_release_recursive>
 800b6ae:	e7dd      	b.n	800b66c <_fflush_r+0xc>

0800b6b0 <__swhatbuf_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	b096      	sub	sp, #88	; 0x58
 800b6bc:	4615      	mov	r5, r2
 800b6be:	461e      	mov	r6, r3
 800b6c0:	da0d      	bge.n	800b6de <__swhatbuf_r+0x2e>
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6c8:	f04f 0100 	mov.w	r1, #0
 800b6cc:	bf0c      	ite	eq
 800b6ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6d2:	2340      	movne	r3, #64	; 0x40
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	6031      	str	r1, [r6, #0]
 800b6d8:	602b      	str	r3, [r5, #0]
 800b6da:	b016      	add	sp, #88	; 0x58
 800b6dc:	bd70      	pop	{r4, r5, r6, pc}
 800b6de:	466a      	mov	r2, sp
 800b6e0:	f000 f87c 	bl	800b7dc <_fstat_r>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	dbec      	blt.n	800b6c2 <__swhatbuf_r+0x12>
 800b6e8:	9901      	ldr	r1, [sp, #4]
 800b6ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6f2:	4259      	negs	r1, r3
 800b6f4:	4159      	adcs	r1, r3
 800b6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fa:	e7eb      	b.n	800b6d4 <__swhatbuf_r+0x24>

0800b6fc <__smakebuf_r>:
 800b6fc:	898b      	ldrh	r3, [r1, #12]
 800b6fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b700:	079d      	lsls	r5, r3, #30
 800b702:	4606      	mov	r6, r0
 800b704:	460c      	mov	r4, r1
 800b706:	d507      	bpl.n	800b718 <__smakebuf_r+0x1c>
 800b708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	2301      	movs	r3, #1
 800b712:	6163      	str	r3, [r4, #20]
 800b714:	b002      	add	sp, #8
 800b716:	bd70      	pop	{r4, r5, r6, pc}
 800b718:	ab01      	add	r3, sp, #4
 800b71a:	466a      	mov	r2, sp
 800b71c:	f7ff ffc8 	bl	800b6b0 <__swhatbuf_r>
 800b720:	9900      	ldr	r1, [sp, #0]
 800b722:	4605      	mov	r5, r0
 800b724:	4630      	mov	r0, r6
 800b726:	f7fd fbbf 	bl	8008ea8 <_malloc_r>
 800b72a:	b948      	cbnz	r0, 800b740 <__smakebuf_r+0x44>
 800b72c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b730:	059a      	lsls	r2, r3, #22
 800b732:	d4ef      	bmi.n	800b714 <__smakebuf_r+0x18>
 800b734:	f023 0303 	bic.w	r3, r3, #3
 800b738:	f043 0302 	orr.w	r3, r3, #2
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	e7e3      	b.n	800b708 <__smakebuf_r+0xc>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	6020      	str	r0, [r4, #0]
 800b744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	9b00      	ldr	r3, [sp, #0]
 800b74c:	6163      	str	r3, [r4, #20]
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	6120      	str	r0, [r4, #16]
 800b752:	b15b      	cbz	r3, 800b76c <__smakebuf_r+0x70>
 800b754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b758:	4630      	mov	r0, r6
 800b75a:	f000 f851 	bl	800b800 <_isatty_r>
 800b75e:	b128      	cbz	r0, 800b76c <__smakebuf_r+0x70>
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f023 0303 	bic.w	r3, r3, #3
 800b766:	f043 0301 	orr.w	r3, r3, #1
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	431d      	orrs	r5, r3
 800b770:	81a5      	strh	r5, [r4, #12]
 800b772:	e7cf      	b.n	800b714 <__smakebuf_r+0x18>

0800b774 <_putc_r>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	460d      	mov	r5, r1
 800b778:	4614      	mov	r4, r2
 800b77a:	4606      	mov	r6, r0
 800b77c:	b118      	cbz	r0, 800b786 <_putc_r+0x12>
 800b77e:	6a03      	ldr	r3, [r0, #32]
 800b780:	b90b      	cbnz	r3, 800b786 <_putc_r+0x12>
 800b782:	f7fe f90f 	bl	80099a4 <__sinit>
 800b786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b788:	07d8      	lsls	r0, r3, #31
 800b78a:	d405      	bmi.n	800b798 <_putc_r+0x24>
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	0599      	lsls	r1, r3, #22
 800b790:	d402      	bmi.n	800b798 <_putc_r+0x24>
 800b792:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b794:	f7fe fb17 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800b798:	68a3      	ldr	r3, [r4, #8]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	60a3      	str	r3, [r4, #8]
 800b7a0:	da05      	bge.n	800b7ae <_putc_r+0x3a>
 800b7a2:	69a2      	ldr	r2, [r4, #24]
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	db12      	blt.n	800b7ce <_putc_r+0x5a>
 800b7a8:	b2eb      	uxtb	r3, r5
 800b7aa:	2b0a      	cmp	r3, #10
 800b7ac:	d00f      	beq.n	800b7ce <_putc_r+0x5a>
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	701d      	strb	r5, [r3, #0]
 800b7b6:	b2ed      	uxtb	r5, r5
 800b7b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7ba:	07da      	lsls	r2, r3, #31
 800b7bc:	d405      	bmi.n	800b7ca <_putc_r+0x56>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	059b      	lsls	r3, r3, #22
 800b7c2:	d402      	bmi.n	800b7ca <_putc_r+0x56>
 800b7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c6:	f7fe faff 	bl	8009dc8 <__retarget_lock_release_recursive>
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7fe f9d5 	bl	8009b82 <__swbuf_r>
 800b7d8:	4605      	mov	r5, r0
 800b7da:	e7ed      	b.n	800b7b8 <_putc_r+0x44>

0800b7dc <_fstat_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d07      	ldr	r5, [pc, #28]	; (800b7fc <_fstat_r+0x20>)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	f7f7 fa9c 	bl	8002d26 <_fstat>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	d102      	bne.n	800b7f8 <_fstat_r+0x1c>
 800b7f2:	682b      	ldr	r3, [r5, #0]
 800b7f4:	b103      	cbz	r3, 800b7f8 <_fstat_r+0x1c>
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	bd38      	pop	{r3, r4, r5, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20007ef0 	.word	0x20007ef0

0800b800 <_isatty_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d06      	ldr	r5, [pc, #24]	; (800b81c <_isatty_r+0x1c>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	f7f7 fa9b 	bl	8002d46 <_isatty>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_isatty_r+0x1a>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_isatty_r+0x1a>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20007ef0 	.word	0x20007ef0

0800b820 <__assert_func>:
 800b820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b822:	4614      	mov	r4, r2
 800b824:	461a      	mov	r2, r3
 800b826:	4b09      	ldr	r3, [pc, #36]	; (800b84c <__assert_func+0x2c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4605      	mov	r5, r0
 800b82c:	68d8      	ldr	r0, [r3, #12]
 800b82e:	b14c      	cbz	r4, 800b844 <__assert_func+0x24>
 800b830:	4b07      	ldr	r3, [pc, #28]	; (800b850 <__assert_func+0x30>)
 800b832:	9100      	str	r1, [sp, #0]
 800b834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b838:	4906      	ldr	r1, [pc, #24]	; (800b854 <__assert_func+0x34>)
 800b83a:	462b      	mov	r3, r5
 800b83c:	f000 f82e 	bl	800b89c <fiprintf>
 800b840:	f000 f83e 	bl	800b8c0 <abort>
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <__assert_func+0x38>)
 800b846:	461c      	mov	r4, r3
 800b848:	e7f3      	b.n	800b832 <__assert_func+0x12>
 800b84a:	bf00      	nop
 800b84c:	20000070 	.word	0x20000070
 800b850:	0802093f 	.word	0x0802093f
 800b854:	0802094c 	.word	0x0802094c
 800b858:	0802097a 	.word	0x0802097a

0800b85c <__ascii_mbtowc>:
 800b85c:	b082      	sub	sp, #8
 800b85e:	b901      	cbnz	r1, 800b862 <__ascii_mbtowc+0x6>
 800b860:	a901      	add	r1, sp, #4
 800b862:	b142      	cbz	r2, 800b876 <__ascii_mbtowc+0x1a>
 800b864:	b14b      	cbz	r3, 800b87a <__ascii_mbtowc+0x1e>
 800b866:	7813      	ldrb	r3, [r2, #0]
 800b868:	600b      	str	r3, [r1, #0]
 800b86a:	7812      	ldrb	r2, [r2, #0]
 800b86c:	1e10      	subs	r0, r2, #0
 800b86e:	bf18      	it	ne
 800b870:	2001      	movne	r0, #1
 800b872:	b002      	add	sp, #8
 800b874:	4770      	bx	lr
 800b876:	4610      	mov	r0, r2
 800b878:	e7fb      	b.n	800b872 <__ascii_mbtowc+0x16>
 800b87a:	f06f 0001 	mvn.w	r0, #1
 800b87e:	e7f8      	b.n	800b872 <__ascii_mbtowc+0x16>

0800b880 <__ascii_wctomb>:
 800b880:	b149      	cbz	r1, 800b896 <__ascii_wctomb+0x16>
 800b882:	2aff      	cmp	r2, #255	; 0xff
 800b884:	bf85      	ittet	hi
 800b886:	238a      	movhi	r3, #138	; 0x8a
 800b888:	6003      	strhi	r3, [r0, #0]
 800b88a:	700a      	strbls	r2, [r1, #0]
 800b88c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b890:	bf98      	it	ls
 800b892:	2001      	movls	r0, #1
 800b894:	4770      	bx	lr
 800b896:	4608      	mov	r0, r1
 800b898:	4770      	bx	lr
	...

0800b89c <fiprintf>:
 800b89c:	b40e      	push	{r1, r2, r3}
 800b89e:	b503      	push	{r0, r1, lr}
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	4805      	ldr	r0, [pc, #20]	; (800b8bc <fiprintf+0x20>)
 800b8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	f7ff fd37 	bl	800b320 <_vfiprintf_r>
 800b8b2:	b002      	add	sp, #8
 800b8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b8:	b003      	add	sp, #12
 800b8ba:	4770      	bx	lr
 800b8bc:	20000070 	.word	0x20000070

0800b8c0 <abort>:
 800b8c0:	b508      	push	{r3, lr}
 800b8c2:	2006      	movs	r0, #6
 800b8c4:	f000 f82c 	bl	800b920 <raise>
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	f7f7 f9f9 	bl	8002cc0 <_exit>

0800b8ce <_raise_r>:
 800b8ce:	291f      	cmp	r1, #31
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	d904      	bls.n	800b8e2 <_raise_r+0x14>
 800b8d8:	2316      	movs	r3, #22
 800b8da:	6003      	str	r3, [r0, #0]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	bd38      	pop	{r3, r4, r5, pc}
 800b8e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b8e4:	b112      	cbz	r2, 800b8ec <_raise_r+0x1e>
 800b8e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8ea:	b94b      	cbnz	r3, 800b900 <_raise_r+0x32>
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f831 	bl	800b954 <_getpid_r>
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8fc:	f000 b818 	b.w	800b930 <_kill_r>
 800b900:	2b01      	cmp	r3, #1
 800b902:	d00a      	beq.n	800b91a <_raise_r+0x4c>
 800b904:	1c59      	adds	r1, r3, #1
 800b906:	d103      	bne.n	800b910 <_raise_r+0x42>
 800b908:	2316      	movs	r3, #22
 800b90a:	6003      	str	r3, [r0, #0]
 800b90c:	2001      	movs	r0, #1
 800b90e:	e7e7      	b.n	800b8e0 <_raise_r+0x12>
 800b910:	2400      	movs	r4, #0
 800b912:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b916:	4628      	mov	r0, r5
 800b918:	4798      	blx	r3
 800b91a:	2000      	movs	r0, #0
 800b91c:	e7e0      	b.n	800b8e0 <_raise_r+0x12>
	...

0800b920 <raise>:
 800b920:	4b02      	ldr	r3, [pc, #8]	; (800b92c <raise+0xc>)
 800b922:	4601      	mov	r1, r0
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	f7ff bfd2 	b.w	800b8ce <_raise_r>
 800b92a:	bf00      	nop
 800b92c:	20000070 	.word	0x20000070

0800b930 <_kill_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d07      	ldr	r5, [pc, #28]	; (800b950 <_kill_r+0x20>)
 800b934:	2300      	movs	r3, #0
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	4611      	mov	r1, r2
 800b93c:	602b      	str	r3, [r5, #0]
 800b93e:	f7f7 f9af 	bl	8002ca0 <_kill>
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	d102      	bne.n	800b94c <_kill_r+0x1c>
 800b946:	682b      	ldr	r3, [r5, #0]
 800b948:	b103      	cbz	r3, 800b94c <_kill_r+0x1c>
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	bd38      	pop	{r3, r4, r5, pc}
 800b94e:	bf00      	nop
 800b950:	20007ef0 	.word	0x20007ef0

0800b954 <_getpid_r>:
 800b954:	f7f7 b99c 	b.w	8002c90 <_getpid>

0800b958 <log10>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	ed2d 8b02 	vpush	{d8}
 800b95e:	ec55 4b10 	vmov	r4, r5, d0
 800b962:	f000 fa65 	bl	800be30 <__ieee754_log10>
 800b966:	4622      	mov	r2, r4
 800b968:	462b      	mov	r3, r5
 800b96a:	4620      	mov	r0, r4
 800b96c:	4629      	mov	r1, r5
 800b96e:	eeb0 8a40 	vmov.f32	s16, s0
 800b972:	eef0 8a60 	vmov.f32	s17, s1
 800b976:	f7f5 f8d9 	bl	8000b2c <__aeabi_dcmpun>
 800b97a:	b998      	cbnz	r0, 800b9a4 <log10+0x4c>
 800b97c:	2200      	movs	r2, #0
 800b97e:	2300      	movs	r3, #0
 800b980:	4620      	mov	r0, r4
 800b982:	4629      	mov	r1, r5
 800b984:	f7f5 f8b4 	bl	8000af0 <__aeabi_dcmple>
 800b988:	b160      	cbz	r0, 800b9a4 <log10+0x4c>
 800b98a:	2200      	movs	r2, #0
 800b98c:	2300      	movs	r3, #0
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	f7f5 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 800b996:	b160      	cbz	r0, 800b9b2 <log10+0x5a>
 800b998:	f7fe f9ea 	bl	8009d70 <__errno>
 800b99c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b9c8 <log10+0x70>
 800b9a0:	2322      	movs	r3, #34	; 0x22
 800b9a2:	6003      	str	r3, [r0, #0]
 800b9a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b9a8:	eef0 0a68 	vmov.f32	s1, s17
 800b9ac:	ecbd 8b02 	vpop	{d8}
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	f7fe f9dd 	bl	8009d70 <__errno>
 800b9b6:	ecbd 8b02 	vpop	{d8}
 800b9ba:	2321      	movs	r3, #33	; 0x21
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c2:	4803      	ldr	r0, [pc, #12]	; (800b9d0 <log10+0x78>)
 800b9c4:	f000 b8cc 	b.w	800bb60 <nan>
 800b9c8:	00000000 	.word	0x00000000
 800b9cc:	fff00000 	.word	0xfff00000
 800b9d0:	0802097a 	.word	0x0802097a

0800b9d4 <pow>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	ed2d 8b02 	vpush	{d8}
 800b9da:	eeb0 8a40 	vmov.f32	s16, s0
 800b9de:	eef0 8a60 	vmov.f32	s17, s1
 800b9e2:	ec55 4b11 	vmov	r4, r5, d1
 800b9e6:	f000 faaf 	bl	800bf48 <__ieee754_pow>
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	462b      	mov	r3, r5
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	ec57 6b10 	vmov	r6, r7, d0
 800b9f6:	f7f5 f899 	bl	8000b2c <__aeabi_dcmpun>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d13b      	bne.n	800ba76 <pow+0xa2>
 800b9fe:	ec51 0b18 	vmov	r0, r1, d8
 800ba02:	2200      	movs	r2, #0
 800ba04:	2300      	movs	r3, #0
 800ba06:	f7f5 f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba0a:	b1b8      	cbz	r0, 800ba3c <pow+0x68>
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4620      	mov	r0, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f5 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d146      	bne.n	800baaa <pow+0xd6>
 800ba1c:	ec45 4b10 	vmov	d0, r4, r5
 800ba20:	f000 f892 	bl	800bb48 <finite>
 800ba24:	b338      	cbz	r0, 800ba76 <pow+0xa2>
 800ba26:	2200      	movs	r2, #0
 800ba28:	2300      	movs	r3, #0
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	f7f5 f855 	bl	8000adc <__aeabi_dcmplt>
 800ba32:	b300      	cbz	r0, 800ba76 <pow+0xa2>
 800ba34:	f7fe f99c 	bl	8009d70 <__errno>
 800ba38:	2322      	movs	r3, #34	; 0x22
 800ba3a:	e01b      	b.n	800ba74 <pow+0xa0>
 800ba3c:	ec47 6b10 	vmov	d0, r6, r7
 800ba40:	f000 f882 	bl	800bb48 <finite>
 800ba44:	b9e0      	cbnz	r0, 800ba80 <pow+0xac>
 800ba46:	eeb0 0a48 	vmov.f32	s0, s16
 800ba4a:	eef0 0a68 	vmov.f32	s1, s17
 800ba4e:	f000 f87b 	bl	800bb48 <finite>
 800ba52:	b1a8      	cbz	r0, 800ba80 <pow+0xac>
 800ba54:	ec45 4b10 	vmov	d0, r4, r5
 800ba58:	f000 f876 	bl	800bb48 <finite>
 800ba5c:	b180      	cbz	r0, 800ba80 <pow+0xac>
 800ba5e:	4632      	mov	r2, r6
 800ba60:	463b      	mov	r3, r7
 800ba62:	4630      	mov	r0, r6
 800ba64:	4639      	mov	r1, r7
 800ba66:	f7f5 f861 	bl	8000b2c <__aeabi_dcmpun>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d0e2      	beq.n	800ba34 <pow+0x60>
 800ba6e:	f7fe f97f 	bl	8009d70 <__errno>
 800ba72:	2321      	movs	r3, #33	; 0x21
 800ba74:	6003      	str	r3, [r0, #0]
 800ba76:	ecbd 8b02 	vpop	{d8}
 800ba7a:	ec47 6b10 	vmov	d0, r6, r7
 800ba7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba80:	2200      	movs	r2, #0
 800ba82:	2300      	movs	r3, #0
 800ba84:	4630      	mov	r0, r6
 800ba86:	4639      	mov	r1, r7
 800ba88:	f7f5 f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d0f2      	beq.n	800ba76 <pow+0xa2>
 800ba90:	eeb0 0a48 	vmov.f32	s0, s16
 800ba94:	eef0 0a68 	vmov.f32	s1, s17
 800ba98:	f000 f856 	bl	800bb48 <finite>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d0ea      	beq.n	800ba76 <pow+0xa2>
 800baa0:	ec45 4b10 	vmov	d0, r4, r5
 800baa4:	f000 f850 	bl	800bb48 <finite>
 800baa8:	e7c3      	b.n	800ba32 <pow+0x5e>
 800baaa:	4f01      	ldr	r7, [pc, #4]	; (800bab0 <pow+0xdc>)
 800baac:	2600      	movs	r6, #0
 800baae:	e7e2      	b.n	800ba76 <pow+0xa2>
 800bab0:	3ff00000 	.word	0x3ff00000

0800bab4 <sqrt>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	ed2d 8b02 	vpush	{d8}
 800baba:	ec55 4b10 	vmov	r4, r5, d0
 800babe:	f000 f857 	bl	800bb70 <__ieee754_sqrt>
 800bac2:	4622      	mov	r2, r4
 800bac4:	462b      	mov	r3, r5
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	eeb0 8a40 	vmov.f32	s16, s0
 800bace:	eef0 8a60 	vmov.f32	s17, s1
 800bad2:	f7f5 f82b 	bl	8000b2c <__aeabi_dcmpun>
 800bad6:	b990      	cbnz	r0, 800bafe <sqrt+0x4a>
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fffc 	bl	8000adc <__aeabi_dcmplt>
 800bae4:	b158      	cbz	r0, 800bafe <sqrt+0x4a>
 800bae6:	f7fe f943 	bl	8009d70 <__errno>
 800baea:	2321      	movs	r3, #33	; 0x21
 800baec:	6003      	str	r3, [r0, #0]
 800baee:	2200      	movs	r2, #0
 800baf0:	2300      	movs	r3, #0
 800baf2:	4610      	mov	r0, r2
 800baf4:	4619      	mov	r1, r3
 800baf6:	f7f4 fea9 	bl	800084c <__aeabi_ddiv>
 800bafa:	ec41 0b18 	vmov	d8, r0, r1
 800bafe:	eeb0 0a48 	vmov.f32	s0, s16
 800bb02:	eef0 0a68 	vmov.f32	s1, s17
 800bb06:	ecbd 8b02 	vpop	{d8}
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}

0800bb0c <sqrtf>:
 800bb0c:	b508      	push	{r3, lr}
 800bb0e:	ed2d 8b02 	vpush	{d8}
 800bb12:	eeb0 8a40 	vmov.f32	s16, s0
 800bb16:	f000 f905 	bl	800bd24 <__ieee754_sqrtf>
 800bb1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb22:	d60c      	bvs.n	800bb3e <sqrtf+0x32>
 800bb24:	eddf 8a07 	vldr	s17, [pc, #28]	; 800bb44 <sqrtf+0x38>
 800bb28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb30:	d505      	bpl.n	800bb3e <sqrtf+0x32>
 800bb32:	f7fe f91d 	bl	8009d70 <__errno>
 800bb36:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb3a:	2321      	movs	r3, #33	; 0x21
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	ecbd 8b02 	vpop	{d8}
 800bb42:	bd08      	pop	{r3, pc}
 800bb44:	00000000 	.word	0x00000000

0800bb48 <finite>:
 800bb48:	b082      	sub	sp, #8
 800bb4a:	ed8d 0b00 	vstr	d0, [sp]
 800bb4e:	9801      	ldr	r0, [sp, #4]
 800bb50:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bb54:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bb58:	0fc0      	lsrs	r0, r0, #31
 800bb5a:	b002      	add	sp, #8
 800bb5c:	4770      	bx	lr
	...

0800bb60 <nan>:
 800bb60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb68 <nan+0x8>
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	7ff80000 	.word	0x7ff80000

0800bb70 <__ieee754_sqrt>:
 800bb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	ec55 4b10 	vmov	r4, r5, d0
 800bb78:	4e67      	ldr	r6, [pc, #412]	; (800bd18 <__ieee754_sqrt+0x1a8>)
 800bb7a:	43ae      	bics	r6, r5
 800bb7c:	ee10 0a10 	vmov	r0, s0
 800bb80:	ee10 2a10 	vmov	r2, s0
 800bb84:	4629      	mov	r1, r5
 800bb86:	462b      	mov	r3, r5
 800bb88:	d10d      	bne.n	800bba6 <__ieee754_sqrt+0x36>
 800bb8a:	f7f4 fd35 	bl	80005f8 <__aeabi_dmul>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4620      	mov	r0, r4
 800bb94:	4629      	mov	r1, r5
 800bb96:	f7f4 fb79 	bl	800028c <__adddf3>
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	ec45 4b10 	vmov	d0, r4, r5
 800bba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	2d00      	cmp	r5, #0
 800bba8:	dc0b      	bgt.n	800bbc2 <__ieee754_sqrt+0x52>
 800bbaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbae:	4326      	orrs	r6, r4
 800bbb0:	d0f5      	beq.n	800bb9e <__ieee754_sqrt+0x2e>
 800bbb2:	b135      	cbz	r5, 800bbc2 <__ieee754_sqrt+0x52>
 800bbb4:	f7f4 fb68 	bl	8000288 <__aeabi_dsub>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	f7f4 fe46 	bl	800084c <__aeabi_ddiv>
 800bbc0:	e7eb      	b.n	800bb9a <__ieee754_sqrt+0x2a>
 800bbc2:	1509      	asrs	r1, r1, #20
 800bbc4:	f000 808d 	beq.w	800bce2 <__ieee754_sqrt+0x172>
 800bbc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbcc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bbd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbd4:	07c9      	lsls	r1, r1, #31
 800bbd6:	bf5c      	itt	pl
 800bbd8:	005b      	lslpl	r3, r3, #1
 800bbda:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bbde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbe2:	bf58      	it	pl
 800bbe4:	0052      	lslpl	r2, r2, #1
 800bbe6:	2500      	movs	r5, #0
 800bbe8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bbec:	1076      	asrs	r6, r6, #1
 800bbee:	0052      	lsls	r2, r2, #1
 800bbf0:	f04f 0e16 	mov.w	lr, #22
 800bbf4:	46ac      	mov	ip, r5
 800bbf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbfa:	eb0c 0001 	add.w	r0, ip, r1
 800bbfe:	4298      	cmp	r0, r3
 800bc00:	bfde      	ittt	le
 800bc02:	1a1b      	suble	r3, r3, r0
 800bc04:	eb00 0c01 	addle.w	ip, r0, r1
 800bc08:	186d      	addle	r5, r5, r1
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	f1be 0e01 	subs.w	lr, lr, #1
 800bc10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bc14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bc18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bc1c:	d1ed      	bne.n	800bbfa <__ieee754_sqrt+0x8a>
 800bc1e:	4674      	mov	r4, lr
 800bc20:	2720      	movs	r7, #32
 800bc22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bc26:	4563      	cmp	r3, ip
 800bc28:	eb01 000e 	add.w	r0, r1, lr
 800bc2c:	dc02      	bgt.n	800bc34 <__ieee754_sqrt+0xc4>
 800bc2e:	d113      	bne.n	800bc58 <__ieee754_sqrt+0xe8>
 800bc30:	4290      	cmp	r0, r2
 800bc32:	d811      	bhi.n	800bc58 <__ieee754_sqrt+0xe8>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	eb00 0e01 	add.w	lr, r0, r1
 800bc3a:	da57      	bge.n	800bcec <__ieee754_sqrt+0x17c>
 800bc3c:	f1be 0f00 	cmp.w	lr, #0
 800bc40:	db54      	blt.n	800bcec <__ieee754_sqrt+0x17c>
 800bc42:	f10c 0801 	add.w	r8, ip, #1
 800bc46:	eba3 030c 	sub.w	r3, r3, ip
 800bc4a:	4290      	cmp	r0, r2
 800bc4c:	bf88      	it	hi
 800bc4e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bc52:	1a12      	subs	r2, r2, r0
 800bc54:	440c      	add	r4, r1
 800bc56:	46c4      	mov	ip, r8
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	3f01      	subs	r7, #1
 800bc5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bc60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bc64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bc68:	d1dd      	bne.n	800bc26 <__ieee754_sqrt+0xb6>
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	d01b      	beq.n	800bca6 <__ieee754_sqrt+0x136>
 800bc6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bd1c <__ieee754_sqrt+0x1ac>
 800bc72:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bd20 <__ieee754_sqrt+0x1b0>
 800bc76:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc7a:	e9db 2300 	ldrd	r2, r3, [fp]
 800bc7e:	f7f4 fb03 	bl	8000288 <__aeabi_dsub>
 800bc82:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 ff2f 	bl	8000af0 <__aeabi_dcmple>
 800bc92:	b140      	cbz	r0, 800bca6 <__ieee754_sqrt+0x136>
 800bc94:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bc98:	e9da 0100 	ldrd	r0, r1, [sl]
 800bc9c:	e9db 2300 	ldrd	r2, r3, [fp]
 800bca0:	d126      	bne.n	800bcf0 <__ieee754_sqrt+0x180>
 800bca2:	3501      	adds	r5, #1
 800bca4:	463c      	mov	r4, r7
 800bca6:	106a      	asrs	r2, r5, #1
 800bca8:	0863      	lsrs	r3, r4, #1
 800bcaa:	07e9      	lsls	r1, r5, #31
 800bcac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bcb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bcb4:	bf48      	it	mi
 800bcb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bcba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bcbe:	461c      	mov	r4, r3
 800bcc0:	e76d      	b.n	800bb9e <__ieee754_sqrt+0x2e>
 800bcc2:	0ad3      	lsrs	r3, r2, #11
 800bcc4:	3815      	subs	r0, #21
 800bcc6:	0552      	lsls	r2, r2, #21
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0fa      	beq.n	800bcc2 <__ieee754_sqrt+0x152>
 800bccc:	02dc      	lsls	r4, r3, #11
 800bcce:	d50a      	bpl.n	800bce6 <__ieee754_sqrt+0x176>
 800bcd0:	f1c1 0420 	rsb	r4, r1, #32
 800bcd4:	fa22 f404 	lsr.w	r4, r2, r4
 800bcd8:	1e4d      	subs	r5, r1, #1
 800bcda:	408a      	lsls	r2, r1
 800bcdc:	4323      	orrs	r3, r4
 800bcde:	1b41      	subs	r1, r0, r5
 800bce0:	e772      	b.n	800bbc8 <__ieee754_sqrt+0x58>
 800bce2:	4608      	mov	r0, r1
 800bce4:	e7f0      	b.n	800bcc8 <__ieee754_sqrt+0x158>
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	3101      	adds	r1, #1
 800bcea:	e7ef      	b.n	800bccc <__ieee754_sqrt+0x15c>
 800bcec:	46e0      	mov	r8, ip
 800bcee:	e7aa      	b.n	800bc46 <__ieee754_sqrt+0xd6>
 800bcf0:	f7f4 facc 	bl	800028c <__adddf3>
 800bcf4:	e9da 8900 	ldrd	r8, r9, [sl]
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	4649      	mov	r1, r9
 800bd00:	f7f4 feec 	bl	8000adc <__aeabi_dcmplt>
 800bd04:	b120      	cbz	r0, 800bd10 <__ieee754_sqrt+0x1a0>
 800bd06:	1ca0      	adds	r0, r4, #2
 800bd08:	bf08      	it	eq
 800bd0a:	3501      	addeq	r5, #1
 800bd0c:	3402      	adds	r4, #2
 800bd0e:	e7ca      	b.n	800bca6 <__ieee754_sqrt+0x136>
 800bd10:	3401      	adds	r4, #1
 800bd12:	f024 0401 	bic.w	r4, r4, #1
 800bd16:	e7c6      	b.n	800bca6 <__ieee754_sqrt+0x136>
 800bd18:	7ff00000 	.word	0x7ff00000
 800bd1c:	200001e0 	.word	0x200001e0
 800bd20:	200001e8 	.word	0x200001e8

0800bd24 <__ieee754_sqrtf>:
 800bd24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bd28:	4770      	bx	lr
 800bd2a:	0000      	movs	r0, r0
 800bd2c:	0000      	movs	r0, r0
	...

0800bd30 <floor>:
 800bd30:	ec51 0b10 	vmov	r0, r1, d0
 800bd34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800bd40:	2e13      	cmp	r6, #19
 800bd42:	ee10 5a10 	vmov	r5, s0
 800bd46:	ee10 8a10 	vmov	r8, s0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	dc31      	bgt.n	800bdb2 <floor+0x82>
 800bd4e:	2e00      	cmp	r6, #0
 800bd50:	da14      	bge.n	800bd7c <floor+0x4c>
 800bd52:	a333      	add	r3, pc, #204	; (adr r3, 800be20 <floor+0xf0>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa98 	bl	800028c <__adddf3>
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f7f4 feda 	bl	8000b18 <__aeabi_dcmpgt>
 800bd64:	b138      	cbz	r0, 800bd76 <floor+0x46>
 800bd66:	2c00      	cmp	r4, #0
 800bd68:	da53      	bge.n	800be12 <floor+0xe2>
 800bd6a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bd6e:	4325      	orrs	r5, r4
 800bd70:	d052      	beq.n	800be18 <floor+0xe8>
 800bd72:	4c2d      	ldr	r4, [pc, #180]	; (800be28 <floor+0xf8>)
 800bd74:	2500      	movs	r5, #0
 800bd76:	4621      	mov	r1, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	e024      	b.n	800bdc6 <floor+0x96>
 800bd7c:	4f2b      	ldr	r7, [pc, #172]	; (800be2c <floor+0xfc>)
 800bd7e:	4137      	asrs	r7, r6
 800bd80:	ea01 0307 	and.w	r3, r1, r7
 800bd84:	4303      	orrs	r3, r0
 800bd86:	d01e      	beq.n	800bdc6 <floor+0x96>
 800bd88:	a325      	add	r3, pc, #148	; (adr r3, 800be20 <floor+0xf0>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 fa7d 	bl	800028c <__adddf3>
 800bd92:	2200      	movs	r2, #0
 800bd94:	2300      	movs	r3, #0
 800bd96:	f7f4 febf 	bl	8000b18 <__aeabi_dcmpgt>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d0eb      	beq.n	800bd76 <floor+0x46>
 800bd9e:	2c00      	cmp	r4, #0
 800bda0:	bfbe      	ittt	lt
 800bda2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bda6:	4133      	asrlt	r3, r6
 800bda8:	18e4      	addlt	r4, r4, r3
 800bdaa:	ea24 0407 	bic.w	r4, r4, r7
 800bdae:	2500      	movs	r5, #0
 800bdb0:	e7e1      	b.n	800bd76 <floor+0x46>
 800bdb2:	2e33      	cmp	r6, #51	; 0x33
 800bdb4:	dd0b      	ble.n	800bdce <floor+0x9e>
 800bdb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bdba:	d104      	bne.n	800bdc6 <floor+0x96>
 800bdbc:	ee10 2a10 	vmov	r2, s0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	f7f4 fa63 	bl	800028c <__adddf3>
 800bdc6:	ec41 0b10 	vmov	d0, r0, r1
 800bdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdce:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800bdd2:	f04f 37ff 	mov.w	r7, #4294967295
 800bdd6:	40df      	lsrs	r7, r3
 800bdd8:	4238      	tst	r0, r7
 800bdda:	d0f4      	beq.n	800bdc6 <floor+0x96>
 800bddc:	a310      	add	r3, pc, #64	; (adr r3, 800be20 <floor+0xf0>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f7f4 fa53 	bl	800028c <__adddf3>
 800bde6:	2200      	movs	r2, #0
 800bde8:	2300      	movs	r3, #0
 800bdea:	f7f4 fe95 	bl	8000b18 <__aeabi_dcmpgt>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d0c1      	beq.n	800bd76 <floor+0x46>
 800bdf2:	2c00      	cmp	r4, #0
 800bdf4:	da0a      	bge.n	800be0c <floor+0xdc>
 800bdf6:	2e14      	cmp	r6, #20
 800bdf8:	d101      	bne.n	800bdfe <floor+0xce>
 800bdfa:	3401      	adds	r4, #1
 800bdfc:	e006      	b.n	800be0c <floor+0xdc>
 800bdfe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be02:	2301      	movs	r3, #1
 800be04:	40b3      	lsls	r3, r6
 800be06:	441d      	add	r5, r3
 800be08:	45a8      	cmp	r8, r5
 800be0a:	d8f6      	bhi.n	800bdfa <floor+0xca>
 800be0c:	ea25 0507 	bic.w	r5, r5, r7
 800be10:	e7b1      	b.n	800bd76 <floor+0x46>
 800be12:	2500      	movs	r5, #0
 800be14:	462c      	mov	r4, r5
 800be16:	e7ae      	b.n	800bd76 <floor+0x46>
 800be18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be1c:	e7ab      	b.n	800bd76 <floor+0x46>
 800be1e:	bf00      	nop
 800be20:	8800759c 	.word	0x8800759c
 800be24:	7e37e43c 	.word	0x7e37e43c
 800be28:	bff00000 	.word	0xbff00000
 800be2c:	000fffff 	.word	0x000fffff

0800be30 <__ieee754_log10>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	ec55 4b10 	vmov	r4, r5, d0
 800be38:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800be3c:	462b      	mov	r3, r5
 800be3e:	da2f      	bge.n	800bea0 <__ieee754_log10+0x70>
 800be40:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800be44:	4322      	orrs	r2, r4
 800be46:	d109      	bne.n	800be5c <__ieee754_log10+0x2c>
 800be48:	493b      	ldr	r1, [pc, #236]	; (800bf38 <__ieee754_log10+0x108>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	2000      	movs	r0, #0
 800be50:	f7f4 fcfc 	bl	800084c <__aeabi_ddiv>
 800be54:	ec41 0b10 	vmov	d0, r0, r1
 800be58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	da09      	bge.n	800be74 <__ieee754_log10+0x44>
 800be60:	ee10 2a10 	vmov	r2, s0
 800be64:	ee10 0a10 	vmov	r0, s0
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fa0d 	bl	8000288 <__aeabi_dsub>
 800be6e:	2200      	movs	r2, #0
 800be70:	2300      	movs	r3, #0
 800be72:	e7ed      	b.n	800be50 <__ieee754_log10+0x20>
 800be74:	4b31      	ldr	r3, [pc, #196]	; (800bf3c <__ieee754_log10+0x10c>)
 800be76:	2200      	movs	r2, #0
 800be78:	4629      	mov	r1, r5
 800be7a:	ee10 0a10 	vmov	r0, s0
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800be86:	4604      	mov	r4, r0
 800be88:	460d      	mov	r5, r1
 800be8a:	460b      	mov	r3, r1
 800be8c:	492c      	ldr	r1, [pc, #176]	; (800bf40 <__ieee754_log10+0x110>)
 800be8e:	428b      	cmp	r3, r1
 800be90:	dd08      	ble.n	800bea4 <__ieee754_log10+0x74>
 800be92:	4622      	mov	r2, r4
 800be94:	462b      	mov	r3, r5
 800be96:	4620      	mov	r0, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	f7f4 f9f7 	bl	800028c <__adddf3>
 800be9e:	e7d9      	b.n	800be54 <__ieee754_log10+0x24>
 800bea0:	2200      	movs	r2, #0
 800bea2:	e7f3      	b.n	800be8c <__ieee754_log10+0x5c>
 800bea4:	1518      	asrs	r0, r3, #20
 800bea6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800beaa:	4410      	add	r0, r2
 800beac:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800beb0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800beb4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800beb8:	f7f4 fb34 	bl	8000524 <__aeabi_i2d>
 800bebc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800bec0:	3303      	adds	r3, #3
 800bec2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800bec6:	ec45 4b10 	vmov	d0, r4, r5
 800beca:	4606      	mov	r6, r0
 800becc:	460f      	mov	r7, r1
 800bece:	f000 fe1f 	bl	800cb10 <__ieee754_log>
 800bed2:	a313      	add	r3, pc, #76	; (adr r3, 800bf20 <__ieee754_log10+0xf0>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	ec59 8b10 	vmov	r8, r9, d0
 800bee0:	f7f4 fb8a 	bl	80005f8 <__aeabi_dmul>
 800bee4:	a310      	add	r3, pc, #64	; (adr r3, 800bf28 <__ieee754_log10+0xf8>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4604      	mov	r4, r0
 800beec:	460d      	mov	r5, r1
 800beee:	4640      	mov	r0, r8
 800bef0:	4649      	mov	r1, r9
 800bef2:	f7f4 fb81 	bl	80005f8 <__aeabi_dmul>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 f9c5 	bl	800028c <__adddf3>
 800bf02:	a30b      	add	r3, pc, #44	; (adr r3, 800bf30 <__ieee754_log10+0x100>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4639      	mov	r1, r7
 800bf10:	f7f4 fb72 	bl	80005f8 <__aeabi_dmul>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	e7bd      	b.n	800be9a <__ieee754_log10+0x6a>
 800bf1e:	bf00      	nop
 800bf20:	11f12b36 	.word	0x11f12b36
 800bf24:	3d59fef3 	.word	0x3d59fef3
 800bf28:	1526e50e 	.word	0x1526e50e
 800bf2c:	3fdbcb7b 	.word	0x3fdbcb7b
 800bf30:	509f6000 	.word	0x509f6000
 800bf34:	3fd34413 	.word	0x3fd34413
 800bf38:	c3500000 	.word	0xc3500000
 800bf3c:	43500000 	.word	0x43500000
 800bf40:	7fefffff 	.word	0x7fefffff
 800bf44:	00000000 	.word	0x00000000

0800bf48 <__ieee754_pow>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	ed2d 8b06 	vpush	{d8-d10}
 800bf50:	b089      	sub	sp, #36	; 0x24
 800bf52:	ed8d 1b00 	vstr	d1, [sp]
 800bf56:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bf5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bf5e:	ea58 0102 	orrs.w	r1, r8, r2
 800bf62:	ec57 6b10 	vmov	r6, r7, d0
 800bf66:	d115      	bne.n	800bf94 <__ieee754_pow+0x4c>
 800bf68:	19b3      	adds	r3, r6, r6
 800bf6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bf6e:	4152      	adcs	r2, r2
 800bf70:	4299      	cmp	r1, r3
 800bf72:	4b89      	ldr	r3, [pc, #548]	; (800c198 <__ieee754_pow+0x250>)
 800bf74:	4193      	sbcs	r3, r2
 800bf76:	f080 84d1 	bcs.w	800c91c <__ieee754_pow+0x9d4>
 800bf7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf7e:	4630      	mov	r0, r6
 800bf80:	4639      	mov	r1, r7
 800bf82:	f7f4 f983 	bl	800028c <__adddf3>
 800bf86:	ec41 0b10 	vmov	d0, r0, r1
 800bf8a:	b009      	add	sp, #36	; 0x24
 800bf8c:	ecbd 8b06 	vpop	{d8-d10}
 800bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf94:	4b81      	ldr	r3, [pc, #516]	; (800c19c <__ieee754_pow+0x254>)
 800bf96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bf9a:	429c      	cmp	r4, r3
 800bf9c:	ee10 aa10 	vmov	sl, s0
 800bfa0:	463d      	mov	r5, r7
 800bfa2:	dc06      	bgt.n	800bfb2 <__ieee754_pow+0x6a>
 800bfa4:	d101      	bne.n	800bfaa <__ieee754_pow+0x62>
 800bfa6:	2e00      	cmp	r6, #0
 800bfa8:	d1e7      	bne.n	800bf7a <__ieee754_pow+0x32>
 800bfaa:	4598      	cmp	r8, r3
 800bfac:	dc01      	bgt.n	800bfb2 <__ieee754_pow+0x6a>
 800bfae:	d10f      	bne.n	800bfd0 <__ieee754_pow+0x88>
 800bfb0:	b172      	cbz	r2, 800bfd0 <__ieee754_pow+0x88>
 800bfb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bfb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bfba:	ea55 050a 	orrs.w	r5, r5, sl
 800bfbe:	d1dc      	bne.n	800bf7a <__ieee754_pow+0x32>
 800bfc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfc4:	18db      	adds	r3, r3, r3
 800bfc6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bfca:	4152      	adcs	r2, r2
 800bfcc:	429d      	cmp	r5, r3
 800bfce:	e7d0      	b.n	800bf72 <__ieee754_pow+0x2a>
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	da3b      	bge.n	800c04c <__ieee754_pow+0x104>
 800bfd4:	4b72      	ldr	r3, [pc, #456]	; (800c1a0 <__ieee754_pow+0x258>)
 800bfd6:	4598      	cmp	r8, r3
 800bfd8:	dc51      	bgt.n	800c07e <__ieee754_pow+0x136>
 800bfda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bfde:	4598      	cmp	r8, r3
 800bfe0:	f340 84ab 	ble.w	800c93a <__ieee754_pow+0x9f2>
 800bfe4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bfe8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bfec:	2b14      	cmp	r3, #20
 800bfee:	dd0f      	ble.n	800c010 <__ieee754_pow+0xc8>
 800bff0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bff4:	fa22 f103 	lsr.w	r1, r2, r3
 800bff8:	fa01 f303 	lsl.w	r3, r1, r3
 800bffc:	4293      	cmp	r3, r2
 800bffe:	f040 849c 	bne.w	800c93a <__ieee754_pow+0x9f2>
 800c002:	f001 0101 	and.w	r1, r1, #1
 800c006:	f1c1 0302 	rsb	r3, r1, #2
 800c00a:	9304      	str	r3, [sp, #16]
 800c00c:	b182      	cbz	r2, 800c030 <__ieee754_pow+0xe8>
 800c00e:	e05f      	b.n	800c0d0 <__ieee754_pow+0x188>
 800c010:	2a00      	cmp	r2, #0
 800c012:	d15b      	bne.n	800c0cc <__ieee754_pow+0x184>
 800c014:	f1c3 0314 	rsb	r3, r3, #20
 800c018:	fa48 f103 	asr.w	r1, r8, r3
 800c01c:	fa01 f303 	lsl.w	r3, r1, r3
 800c020:	4543      	cmp	r3, r8
 800c022:	f040 8487 	bne.w	800c934 <__ieee754_pow+0x9ec>
 800c026:	f001 0101 	and.w	r1, r1, #1
 800c02a:	f1c1 0302 	rsb	r3, r1, #2
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	4b5c      	ldr	r3, [pc, #368]	; (800c1a4 <__ieee754_pow+0x25c>)
 800c032:	4598      	cmp	r8, r3
 800c034:	d132      	bne.n	800c09c <__ieee754_pow+0x154>
 800c036:	f1b9 0f00 	cmp.w	r9, #0
 800c03a:	f280 8477 	bge.w	800c92c <__ieee754_pow+0x9e4>
 800c03e:	4959      	ldr	r1, [pc, #356]	; (800c1a4 <__ieee754_pow+0x25c>)
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	2000      	movs	r0, #0
 800c046:	f7f4 fc01 	bl	800084c <__aeabi_ddiv>
 800c04a:	e79c      	b.n	800bf86 <__ieee754_pow+0x3e>
 800c04c:	2300      	movs	r3, #0
 800c04e:	9304      	str	r3, [sp, #16]
 800c050:	2a00      	cmp	r2, #0
 800c052:	d13d      	bne.n	800c0d0 <__ieee754_pow+0x188>
 800c054:	4b51      	ldr	r3, [pc, #324]	; (800c19c <__ieee754_pow+0x254>)
 800c056:	4598      	cmp	r8, r3
 800c058:	d1ea      	bne.n	800c030 <__ieee754_pow+0xe8>
 800c05a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c05e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c062:	ea53 030a 	orrs.w	r3, r3, sl
 800c066:	f000 8459 	beq.w	800c91c <__ieee754_pow+0x9d4>
 800c06a:	4b4f      	ldr	r3, [pc, #316]	; (800c1a8 <__ieee754_pow+0x260>)
 800c06c:	429c      	cmp	r4, r3
 800c06e:	dd08      	ble.n	800c082 <__ieee754_pow+0x13a>
 800c070:	f1b9 0f00 	cmp.w	r9, #0
 800c074:	f2c0 8456 	blt.w	800c924 <__ieee754_pow+0x9dc>
 800c078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c07c:	e783      	b.n	800bf86 <__ieee754_pow+0x3e>
 800c07e:	2302      	movs	r3, #2
 800c080:	e7e5      	b.n	800c04e <__ieee754_pow+0x106>
 800c082:	f1b9 0f00 	cmp.w	r9, #0
 800c086:	f04f 0000 	mov.w	r0, #0
 800c08a:	f04f 0100 	mov.w	r1, #0
 800c08e:	f6bf af7a 	bge.w	800bf86 <__ieee754_pow+0x3e>
 800c092:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c096:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c09a:	e774      	b.n	800bf86 <__ieee754_pow+0x3e>
 800c09c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c0a0:	d106      	bne.n	800c0b0 <__ieee754_pow+0x168>
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 faa5 	bl	80005f8 <__aeabi_dmul>
 800c0ae:	e76a      	b.n	800bf86 <__ieee754_pow+0x3e>
 800c0b0:	4b3e      	ldr	r3, [pc, #248]	; (800c1ac <__ieee754_pow+0x264>)
 800c0b2:	4599      	cmp	r9, r3
 800c0b4:	d10c      	bne.n	800c0d0 <__ieee754_pow+0x188>
 800c0b6:	2d00      	cmp	r5, #0
 800c0b8:	db0a      	blt.n	800c0d0 <__ieee754_pow+0x188>
 800c0ba:	ec47 6b10 	vmov	d0, r6, r7
 800c0be:	b009      	add	sp, #36	; 0x24
 800c0c0:	ecbd 8b06 	vpop	{d8-d10}
 800c0c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	f7ff bd52 	b.w	800bb70 <__ieee754_sqrt>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9304      	str	r3, [sp, #16]
 800c0d0:	ec47 6b10 	vmov	d0, r6, r7
 800c0d4:	f000 fc62 	bl	800c99c <fabs>
 800c0d8:	ec51 0b10 	vmov	r0, r1, d0
 800c0dc:	f1ba 0f00 	cmp.w	sl, #0
 800c0e0:	d129      	bne.n	800c136 <__ieee754_pow+0x1ee>
 800c0e2:	b124      	cbz	r4, 800c0ee <__ieee754_pow+0x1a6>
 800c0e4:	4b2f      	ldr	r3, [pc, #188]	; (800c1a4 <__ieee754_pow+0x25c>)
 800c0e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d123      	bne.n	800c136 <__ieee754_pow+0x1ee>
 800c0ee:	f1b9 0f00 	cmp.w	r9, #0
 800c0f2:	da05      	bge.n	800c100 <__ieee754_pow+0x1b8>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	492a      	ldr	r1, [pc, #168]	; (800c1a4 <__ieee754_pow+0x25c>)
 800c0fc:	f7f4 fba6 	bl	800084c <__aeabi_ddiv>
 800c100:	2d00      	cmp	r5, #0
 800c102:	f6bf af40 	bge.w	800bf86 <__ieee754_pow+0x3e>
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c10c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c110:	431c      	orrs	r4, r3
 800c112:	d108      	bne.n	800c126 <__ieee754_pow+0x1de>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4610      	mov	r0, r2
 800c11a:	4619      	mov	r1, r3
 800c11c:	f7f4 f8b4 	bl	8000288 <__aeabi_dsub>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	e78f      	b.n	800c046 <__ieee754_pow+0xfe>
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	f47f af2c 	bne.w	800bf86 <__ieee754_pow+0x3e>
 800c12e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c132:	4619      	mov	r1, r3
 800c134:	e727      	b.n	800bf86 <__ieee754_pow+0x3e>
 800c136:	0feb      	lsrs	r3, r5, #31
 800c138:	3b01      	subs	r3, #1
 800c13a:	9306      	str	r3, [sp, #24]
 800c13c:	9a06      	ldr	r2, [sp, #24]
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	4313      	orrs	r3, r2
 800c142:	d102      	bne.n	800c14a <__ieee754_pow+0x202>
 800c144:	4632      	mov	r2, r6
 800c146:	463b      	mov	r3, r7
 800c148:	e7e6      	b.n	800c118 <__ieee754_pow+0x1d0>
 800c14a:	4b19      	ldr	r3, [pc, #100]	; (800c1b0 <__ieee754_pow+0x268>)
 800c14c:	4598      	cmp	r8, r3
 800c14e:	f340 80fb 	ble.w	800c348 <__ieee754_pow+0x400>
 800c152:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c156:	4598      	cmp	r8, r3
 800c158:	4b13      	ldr	r3, [pc, #76]	; (800c1a8 <__ieee754_pow+0x260>)
 800c15a:	dd0c      	ble.n	800c176 <__ieee754_pow+0x22e>
 800c15c:	429c      	cmp	r4, r3
 800c15e:	dc0f      	bgt.n	800c180 <__ieee754_pow+0x238>
 800c160:	f1b9 0f00 	cmp.w	r9, #0
 800c164:	da0f      	bge.n	800c186 <__ieee754_pow+0x23e>
 800c166:	2000      	movs	r0, #0
 800c168:	b009      	add	sp, #36	; 0x24
 800c16a:	ecbd 8b06 	vpop	{d8-d10}
 800c16e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c172:	f000 bcc2 	b.w	800cafa <__math_oflow>
 800c176:	429c      	cmp	r4, r3
 800c178:	dbf2      	blt.n	800c160 <__ieee754_pow+0x218>
 800c17a:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <__ieee754_pow+0x25c>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	dd19      	ble.n	800c1b4 <__ieee754_pow+0x26c>
 800c180:	f1b9 0f00 	cmp.w	r9, #0
 800c184:	dcef      	bgt.n	800c166 <__ieee754_pow+0x21e>
 800c186:	2000      	movs	r0, #0
 800c188:	b009      	add	sp, #36	; 0x24
 800c18a:	ecbd 8b06 	vpop	{d8-d10}
 800c18e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c192:	f000 bca9 	b.w	800cae8 <__math_uflow>
 800c196:	bf00      	nop
 800c198:	fff00000 	.word	0xfff00000
 800c19c:	7ff00000 	.word	0x7ff00000
 800c1a0:	433fffff 	.word	0x433fffff
 800c1a4:	3ff00000 	.word	0x3ff00000
 800c1a8:	3fefffff 	.word	0x3fefffff
 800c1ac:	3fe00000 	.word	0x3fe00000
 800c1b0:	41e00000 	.word	0x41e00000
 800c1b4:	4b60      	ldr	r3, [pc, #384]	; (800c338 <__ieee754_pow+0x3f0>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f7f4 f866 	bl	8000288 <__aeabi_dsub>
 800c1bc:	a354      	add	r3, pc, #336	; (adr r3, 800c310 <__ieee754_pow+0x3c8>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	a353      	add	r3, pc, #332	; (adr r3, 800c318 <__ieee754_pow+0x3d0>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	460f      	mov	r7, r1
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	f7f4 fa0e 	bl	80005f8 <__aeabi_dmul>
 800c1dc:	4b57      	ldr	r3, [pc, #348]	; (800c33c <__ieee754_pow+0x3f4>)
 800c1de:	4682      	mov	sl, r0
 800c1e0:	468b      	mov	fp, r1
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f4 fa06 	bl	80005f8 <__aeabi_dmul>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	a14b      	add	r1, pc, #300	; (adr r1, 800c320 <__ieee754_pow+0x3d8>)
 800c1f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f6:	f7f4 f847 	bl	8000288 <__aeabi_dsub>
 800c1fa:	4622      	mov	r2, r4
 800c1fc:	462b      	mov	r3, r5
 800c1fe:	f7f4 f9fb 	bl	80005f8 <__aeabi_dmul>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	2000      	movs	r0, #0
 800c208:	494d      	ldr	r1, [pc, #308]	; (800c340 <__ieee754_pow+0x3f8>)
 800c20a:	f7f4 f83d 	bl	8000288 <__aeabi_dsub>
 800c20e:	4622      	mov	r2, r4
 800c210:	4680      	mov	r8, r0
 800c212:	4689      	mov	r9, r1
 800c214:	462b      	mov	r3, r5
 800c216:	4620      	mov	r0, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	f7f4 f9ed 	bl	80005f8 <__aeabi_dmul>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4640      	mov	r0, r8
 800c224:	4649      	mov	r1, r9
 800c226:	f7f4 f9e7 	bl	80005f8 <__aeabi_dmul>
 800c22a:	a33f      	add	r3, pc, #252	; (adr r3, 800c328 <__ieee754_pow+0x3e0>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f7f4 f9e2 	bl	80005f8 <__aeabi_dmul>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4650      	mov	r0, sl
 800c23a:	4659      	mov	r1, fp
 800c23c:	f7f4 f824 	bl	8000288 <__aeabi_dsub>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4680      	mov	r8, r0
 800c246:	4689      	mov	r9, r1
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 f81e 	bl	800028c <__adddf3>
 800c250:	2000      	movs	r0, #0
 800c252:	4632      	mov	r2, r6
 800c254:	463b      	mov	r3, r7
 800c256:	4604      	mov	r4, r0
 800c258:	460d      	mov	r5, r1
 800c25a:	f7f4 f815 	bl	8000288 <__aeabi_dsub>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 f80f 	bl	8000288 <__aeabi_dsub>
 800c26a:	9b04      	ldr	r3, [sp, #16]
 800c26c:	9a06      	ldr	r2, [sp, #24]
 800c26e:	3b01      	subs	r3, #1
 800c270:	4313      	orrs	r3, r2
 800c272:	4682      	mov	sl, r0
 800c274:	468b      	mov	fp, r1
 800c276:	f040 81e7 	bne.w	800c648 <__ieee754_pow+0x700>
 800c27a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c330 <__ieee754_pow+0x3e8>
 800c27e:	eeb0 8a47 	vmov.f32	s16, s14
 800c282:	eef0 8a67 	vmov.f32	s17, s15
 800c286:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c28a:	2600      	movs	r6, #0
 800c28c:	4632      	mov	r2, r6
 800c28e:	463b      	mov	r3, r7
 800c290:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c294:	f7f3 fff8 	bl	8000288 <__aeabi_dsub>
 800c298:	4622      	mov	r2, r4
 800c29a:	462b      	mov	r3, r5
 800c29c:	f7f4 f9ac 	bl	80005f8 <__aeabi_dmul>
 800c2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	4659      	mov	r1, fp
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	f7f3 ffe8 	bl	800028c <__adddf3>
 800c2bc:	4632      	mov	r2, r6
 800c2be:	463b      	mov	r3, r7
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f4 f996 	bl	80005f8 <__aeabi_dmul>
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	f7f3 ffd8 	bl	800028c <__adddf3>
 800c2dc:	4b19      	ldr	r3, [pc, #100]	; (800c344 <__ieee754_pow+0x3fc>)
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	ec45 4b19 	vmov	d9, r4, r5
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460f      	mov	r7, r1
 800c2e8:	468b      	mov	fp, r1
 800c2ea:	f340 82f0 	ble.w	800c8ce <__ieee754_pow+0x986>
 800c2ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c2f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c2f6:	4303      	orrs	r3, r0
 800c2f8:	f000 81e4 	beq.w	800c6c4 <__ieee754_pow+0x77c>
 800c2fc:	ec51 0b18 	vmov	r0, r1, d8
 800c300:	2200      	movs	r2, #0
 800c302:	2300      	movs	r3, #0
 800c304:	f7f4 fbea 	bl	8000adc <__aeabi_dcmplt>
 800c308:	3800      	subs	r0, #0
 800c30a:	bf18      	it	ne
 800c30c:	2001      	movne	r0, #1
 800c30e:	e72b      	b.n	800c168 <__ieee754_pow+0x220>
 800c310:	60000000 	.word	0x60000000
 800c314:	3ff71547 	.word	0x3ff71547
 800c318:	f85ddf44 	.word	0xf85ddf44
 800c31c:	3e54ae0b 	.word	0x3e54ae0b
 800c320:	55555555 	.word	0x55555555
 800c324:	3fd55555 	.word	0x3fd55555
 800c328:	652b82fe 	.word	0x652b82fe
 800c32c:	3ff71547 	.word	0x3ff71547
 800c330:	00000000 	.word	0x00000000
 800c334:	bff00000 	.word	0xbff00000
 800c338:	3ff00000 	.word	0x3ff00000
 800c33c:	3fd00000 	.word	0x3fd00000
 800c340:	3fe00000 	.word	0x3fe00000
 800c344:	408fffff 	.word	0x408fffff
 800c348:	4bd5      	ldr	r3, [pc, #852]	; (800c6a0 <__ieee754_pow+0x758>)
 800c34a:	402b      	ands	r3, r5
 800c34c:	2200      	movs	r2, #0
 800c34e:	b92b      	cbnz	r3, 800c35c <__ieee754_pow+0x414>
 800c350:	4bd4      	ldr	r3, [pc, #848]	; (800c6a4 <__ieee754_pow+0x75c>)
 800c352:	f7f4 f951 	bl	80005f8 <__aeabi_dmul>
 800c356:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c35a:	460c      	mov	r4, r1
 800c35c:	1523      	asrs	r3, r4, #20
 800c35e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c362:	4413      	add	r3, r2
 800c364:	9305      	str	r3, [sp, #20]
 800c366:	4bd0      	ldr	r3, [pc, #832]	; (800c6a8 <__ieee754_pow+0x760>)
 800c368:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c36c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c370:	429c      	cmp	r4, r3
 800c372:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c376:	dd08      	ble.n	800c38a <__ieee754_pow+0x442>
 800c378:	4bcc      	ldr	r3, [pc, #816]	; (800c6ac <__ieee754_pow+0x764>)
 800c37a:	429c      	cmp	r4, r3
 800c37c:	f340 8162 	ble.w	800c644 <__ieee754_pow+0x6fc>
 800c380:	9b05      	ldr	r3, [sp, #20]
 800c382:	3301      	adds	r3, #1
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c38a:	2400      	movs	r4, #0
 800c38c:	00e3      	lsls	r3, r4, #3
 800c38e:	9307      	str	r3, [sp, #28]
 800c390:	4bc7      	ldr	r3, [pc, #796]	; (800c6b0 <__ieee754_pow+0x768>)
 800c392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c396:	ed93 7b00 	vldr	d7, [r3]
 800c39a:	4629      	mov	r1, r5
 800c39c:	ec53 2b17 	vmov	r2, r3, d7
 800c3a0:	eeb0 9a47 	vmov.f32	s18, s14
 800c3a4:	eef0 9a67 	vmov.f32	s19, s15
 800c3a8:	4682      	mov	sl, r0
 800c3aa:	f7f3 ff6d 	bl	8000288 <__aeabi_dsub>
 800c3ae:	4652      	mov	r2, sl
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	460f      	mov	r7, r1
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	ec51 0b19 	vmov	r0, r1, d9
 800c3ba:	f7f3 ff67 	bl	800028c <__adddf3>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	49bb      	ldr	r1, [pc, #748]	; (800c6b4 <__ieee754_pow+0x76c>)
 800c3c6:	f7f4 fa41 	bl	800084c <__aeabi_ddiv>
 800c3ca:	ec41 0b1a 	vmov	d10, r0, r1
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f4 f90f 	bl	80005f8 <__aeabi_dmul>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3e0:	9302      	str	r3, [sp, #8]
 800c3e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c3e6:	46ab      	mov	fp, r5
 800c3e8:	106d      	asrs	r5, r5, #1
 800c3ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c3ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c3f2:	ec41 0b18 	vmov	d8, r0, r1
 800c3f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	4614      	mov	r4, r2
 800c402:	461d      	mov	r5, r3
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4630      	mov	r0, r6
 800c40e:	4639      	mov	r1, r7
 800c410:	f7f3 ff3a 	bl	8000288 <__aeabi_dsub>
 800c414:	ec53 2b19 	vmov	r2, r3, d9
 800c418:	4606      	mov	r6, r0
 800c41a:	460f      	mov	r7, r1
 800c41c:	4620      	mov	r0, r4
 800c41e:	4629      	mov	r1, r5
 800c420:	f7f3 ff32 	bl	8000288 <__aeabi_dsub>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	4650      	mov	r0, sl
 800c42a:	4659      	mov	r1, fp
 800c42c:	f7f3 ff2c 	bl	8000288 <__aeabi_dsub>
 800c430:	4642      	mov	r2, r8
 800c432:	464b      	mov	r3, r9
 800c434:	f7f4 f8e0 	bl	80005f8 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f7f3 ff22 	bl	8000288 <__aeabi_dsub>
 800c444:	ec53 2b1a 	vmov	r2, r3, d10
 800c448:	f7f4 f8d6 	bl	80005f8 <__aeabi_dmul>
 800c44c:	ec53 2b18 	vmov	r2, r3, d8
 800c450:	ec41 0b19 	vmov	d9, r0, r1
 800c454:	ec51 0b18 	vmov	r0, r1, d8
 800c458:	f7f4 f8ce 	bl	80005f8 <__aeabi_dmul>
 800c45c:	a37c      	add	r3, pc, #496	; (adr r3, 800c650 <__ieee754_pow+0x708>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	4604      	mov	r4, r0
 800c464:	460d      	mov	r5, r1
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	a37b      	add	r3, pc, #492	; (adr r3, 800c658 <__ieee754_pow+0x710>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f3 ff0c 	bl	800028c <__adddf3>
 800c474:	4622      	mov	r2, r4
 800c476:	462b      	mov	r3, r5
 800c478:	f7f4 f8be 	bl	80005f8 <__aeabi_dmul>
 800c47c:	a378      	add	r3, pc, #480	; (adr r3, 800c660 <__ieee754_pow+0x718>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 ff03 	bl	800028c <__adddf3>
 800c486:	4622      	mov	r2, r4
 800c488:	462b      	mov	r3, r5
 800c48a:	f7f4 f8b5 	bl	80005f8 <__aeabi_dmul>
 800c48e:	a376      	add	r3, pc, #472	; (adr r3, 800c668 <__ieee754_pow+0x720>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	f7f3 fefa 	bl	800028c <__adddf3>
 800c498:	4622      	mov	r2, r4
 800c49a:	462b      	mov	r3, r5
 800c49c:	f7f4 f8ac 	bl	80005f8 <__aeabi_dmul>
 800c4a0:	a373      	add	r3, pc, #460	; (adr r3, 800c670 <__ieee754_pow+0x728>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f7f3 fef1 	bl	800028c <__adddf3>
 800c4aa:	4622      	mov	r2, r4
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	f7f4 f8a3 	bl	80005f8 <__aeabi_dmul>
 800c4b2:	a371      	add	r3, pc, #452	; (adr r3, 800c678 <__ieee754_pow+0x730>)
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	f7f3 fee8 	bl	800028c <__adddf3>
 800c4bc:	4622      	mov	r2, r4
 800c4be:	4606      	mov	r6, r0
 800c4c0:	460f      	mov	r7, r1
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 f896 	bl	80005f8 <__aeabi_dmul>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	4639      	mov	r1, r7
 800c4d4:	f7f4 f890 	bl	80005f8 <__aeabi_dmul>
 800c4d8:	4642      	mov	r2, r8
 800c4da:	4604      	mov	r4, r0
 800c4dc:	460d      	mov	r5, r1
 800c4de:	464b      	mov	r3, r9
 800c4e0:	ec51 0b18 	vmov	r0, r1, d8
 800c4e4:	f7f3 fed2 	bl	800028c <__adddf3>
 800c4e8:	ec53 2b19 	vmov	r2, r3, d9
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4622      	mov	r2, r4
 800c4f2:	462b      	mov	r3, r5
 800c4f4:	f7f3 feca 	bl	800028c <__adddf3>
 800c4f8:	4642      	mov	r2, r8
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	468b      	mov	fp, r1
 800c4fe:	464b      	mov	r3, r9
 800c500:	4640      	mov	r0, r8
 800c502:	4649      	mov	r1, r9
 800c504:	f7f4 f878 	bl	80005f8 <__aeabi_dmul>
 800c508:	4b6b      	ldr	r3, [pc, #428]	; (800c6b8 <__ieee754_pow+0x770>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	4606      	mov	r6, r0
 800c50e:	460f      	mov	r7, r1
 800c510:	f7f3 febc 	bl	800028c <__adddf3>
 800c514:	4652      	mov	r2, sl
 800c516:	465b      	mov	r3, fp
 800c518:	f7f3 feb8 	bl	800028c <__adddf3>
 800c51c:	2000      	movs	r0, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	460d      	mov	r5, r1
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f4 f865 	bl	80005f8 <__aeabi_dmul>
 800c52e:	4b62      	ldr	r3, [pc, #392]	; (800c6b8 <__ieee754_pow+0x770>)
 800c530:	4680      	mov	r8, r0
 800c532:	4689      	mov	r9, r1
 800c534:	2200      	movs	r2, #0
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f3 fea5 	bl	8000288 <__aeabi_dsub>
 800c53e:	4632      	mov	r2, r6
 800c540:	463b      	mov	r3, r7
 800c542:	f7f3 fea1 	bl	8000288 <__aeabi_dsub>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4650      	mov	r0, sl
 800c54c:	4659      	mov	r1, fp
 800c54e:	f7f3 fe9b 	bl	8000288 <__aeabi_dsub>
 800c552:	ec53 2b18 	vmov	r2, r3, d8
 800c556:	f7f4 f84f 	bl	80005f8 <__aeabi_dmul>
 800c55a:	4622      	mov	r2, r4
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	462b      	mov	r3, r5
 800c562:	ec51 0b19 	vmov	r0, r1, d9
 800c566:	f7f4 f847 	bl	80005f8 <__aeabi_dmul>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4630      	mov	r0, r6
 800c570:	4639      	mov	r1, r7
 800c572:	f7f3 fe8b 	bl	800028c <__adddf3>
 800c576:	4606      	mov	r6, r0
 800c578:	460f      	mov	r7, r1
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4640      	mov	r0, r8
 800c580:	4649      	mov	r1, r9
 800c582:	f7f3 fe83 	bl	800028c <__adddf3>
 800c586:	a33e      	add	r3, pc, #248	; (adr r3, 800c680 <__ieee754_pow+0x738>)
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	2000      	movs	r0, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	460d      	mov	r5, r1
 800c592:	f7f4 f831 	bl	80005f8 <__aeabi_dmul>
 800c596:	4642      	mov	r2, r8
 800c598:	ec41 0b18 	vmov	d8, r0, r1
 800c59c:	464b      	mov	r3, r9
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7f3 fe71 	bl	8000288 <__aeabi_dsub>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f3 fe6b 	bl	8000288 <__aeabi_dsub>
 800c5b2:	a335      	add	r3, pc, #212	; (adr r3, 800c688 <__ieee754_pow+0x740>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f4 f81e 	bl	80005f8 <__aeabi_dmul>
 800c5bc:	a334      	add	r3, pc, #208	; (adr r3, 800c690 <__ieee754_pow+0x748>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	460f      	mov	r7, r1
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f4 f815 	bl	80005f8 <__aeabi_dmul>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	f7f3 fe59 	bl	800028c <__adddf3>
 800c5da:	9a07      	ldr	r2, [sp, #28]
 800c5dc:	4b37      	ldr	r3, [pc, #220]	; (800c6bc <__ieee754_pow+0x774>)
 800c5de:	4413      	add	r3, r2
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f7f3 fe52 	bl	800028c <__adddf3>
 800c5e8:	4682      	mov	sl, r0
 800c5ea:	9805      	ldr	r0, [sp, #20]
 800c5ec:	468b      	mov	fp, r1
 800c5ee:	f7f3 ff99 	bl	8000524 <__aeabi_i2d>
 800c5f2:	9a07      	ldr	r2, [sp, #28]
 800c5f4:	4b32      	ldr	r3, [pc, #200]	; (800c6c0 <__ieee754_pow+0x778>)
 800c5f6:	4413      	add	r3, r2
 800c5f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	460f      	mov	r7, r1
 800c600:	4652      	mov	r2, sl
 800c602:	465b      	mov	r3, fp
 800c604:	ec51 0b18 	vmov	r0, r1, d8
 800c608:	f7f3 fe40 	bl	800028c <__adddf3>
 800c60c:	4642      	mov	r2, r8
 800c60e:	464b      	mov	r3, r9
 800c610:	f7f3 fe3c 	bl	800028c <__adddf3>
 800c614:	4632      	mov	r2, r6
 800c616:	463b      	mov	r3, r7
 800c618:	f7f3 fe38 	bl	800028c <__adddf3>
 800c61c:	2000      	movs	r0, #0
 800c61e:	4632      	mov	r2, r6
 800c620:	463b      	mov	r3, r7
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	f7f3 fe2f 	bl	8000288 <__aeabi_dsub>
 800c62a:	4642      	mov	r2, r8
 800c62c:	464b      	mov	r3, r9
 800c62e:	f7f3 fe2b 	bl	8000288 <__aeabi_dsub>
 800c632:	ec53 2b18 	vmov	r2, r3, d8
 800c636:	f7f3 fe27 	bl	8000288 <__aeabi_dsub>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4650      	mov	r0, sl
 800c640:	4659      	mov	r1, fp
 800c642:	e610      	b.n	800c266 <__ieee754_pow+0x31e>
 800c644:	2401      	movs	r4, #1
 800c646:	e6a1      	b.n	800c38c <__ieee754_pow+0x444>
 800c648:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c698 <__ieee754_pow+0x750>
 800c64c:	e617      	b.n	800c27e <__ieee754_pow+0x336>
 800c64e:	bf00      	nop
 800c650:	4a454eef 	.word	0x4a454eef
 800c654:	3fca7e28 	.word	0x3fca7e28
 800c658:	93c9db65 	.word	0x93c9db65
 800c65c:	3fcd864a 	.word	0x3fcd864a
 800c660:	a91d4101 	.word	0xa91d4101
 800c664:	3fd17460 	.word	0x3fd17460
 800c668:	518f264d 	.word	0x518f264d
 800c66c:	3fd55555 	.word	0x3fd55555
 800c670:	db6fabff 	.word	0xdb6fabff
 800c674:	3fdb6db6 	.word	0x3fdb6db6
 800c678:	33333303 	.word	0x33333303
 800c67c:	3fe33333 	.word	0x3fe33333
 800c680:	e0000000 	.word	0xe0000000
 800c684:	3feec709 	.word	0x3feec709
 800c688:	dc3a03fd 	.word	0xdc3a03fd
 800c68c:	3feec709 	.word	0x3feec709
 800c690:	145b01f5 	.word	0x145b01f5
 800c694:	be3e2fe0 	.word	0xbe3e2fe0
 800c698:	00000000 	.word	0x00000000
 800c69c:	3ff00000 	.word	0x3ff00000
 800c6a0:	7ff00000 	.word	0x7ff00000
 800c6a4:	43400000 	.word	0x43400000
 800c6a8:	0003988e 	.word	0x0003988e
 800c6ac:	000bb679 	.word	0x000bb679
 800c6b0:	08020a80 	.word	0x08020a80
 800c6b4:	3ff00000 	.word	0x3ff00000
 800c6b8:	40080000 	.word	0x40080000
 800c6bc:	08020aa0 	.word	0x08020aa0
 800c6c0:	08020a90 	.word	0x08020a90
 800c6c4:	a3b3      	add	r3, pc, #716	; (adr r3, 800c994 <__ieee754_pow+0xa4c>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	f7f3 fddd 	bl	800028c <__adddf3>
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	ec41 0b1a 	vmov	d10, r0, r1
 800c6d8:	462b      	mov	r3, r5
 800c6da:	4630      	mov	r0, r6
 800c6dc:	4639      	mov	r1, r7
 800c6de:	f7f3 fdd3 	bl	8000288 <__aeabi_dsub>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	ec51 0b1a 	vmov	r0, r1, d10
 800c6ea:	f7f4 fa15 	bl	8000b18 <__aeabi_dcmpgt>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f47f ae04 	bne.w	800c2fc <__ieee754_pow+0x3b4>
 800c6f4:	4aa2      	ldr	r2, [pc, #648]	; (800c980 <__ieee754_pow+0xa38>)
 800c6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	f340 8107 	ble.w	800c90e <__ieee754_pow+0x9c6>
 800c700:	151b      	asrs	r3, r3, #20
 800c702:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c706:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c70a:	fa4a fa03 	asr.w	sl, sl, r3
 800c70e:	44da      	add	sl, fp
 800c710:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c714:	489b      	ldr	r0, [pc, #620]	; (800c984 <__ieee754_pow+0xa3c>)
 800c716:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c71a:	4108      	asrs	r0, r1
 800c71c:	ea00 030a 	and.w	r3, r0, sl
 800c720:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c724:	f1c1 0114 	rsb	r1, r1, #20
 800c728:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c72c:	fa4a fa01 	asr.w	sl, sl, r1
 800c730:	f1bb 0f00 	cmp.w	fp, #0
 800c734:	f04f 0200 	mov.w	r2, #0
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	bfb8      	it	lt
 800c73e:	f1ca 0a00 	rsblt	sl, sl, #0
 800c742:	f7f3 fda1 	bl	8000288 <__aeabi_dsub>
 800c746:	ec41 0b19 	vmov	d9, r0, r1
 800c74a:	4642      	mov	r2, r8
 800c74c:	464b      	mov	r3, r9
 800c74e:	ec51 0b19 	vmov	r0, r1, d9
 800c752:	f7f3 fd9b 	bl	800028c <__adddf3>
 800c756:	a37a      	add	r3, pc, #488	; (adr r3, 800c940 <__ieee754_pow+0x9f8>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	2000      	movs	r0, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	460d      	mov	r5, r1
 800c762:	f7f3 ff49 	bl	80005f8 <__aeabi_dmul>
 800c766:	ec53 2b19 	vmov	r2, r3, d9
 800c76a:	4606      	mov	r6, r0
 800c76c:	460f      	mov	r7, r1
 800c76e:	4620      	mov	r0, r4
 800c770:	4629      	mov	r1, r5
 800c772:	f7f3 fd89 	bl	8000288 <__aeabi_dsub>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4640      	mov	r0, r8
 800c77c:	4649      	mov	r1, r9
 800c77e:	f7f3 fd83 	bl	8000288 <__aeabi_dsub>
 800c782:	a371      	add	r3, pc, #452	; (adr r3, 800c948 <__ieee754_pow+0xa00>)
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	f7f3 ff36 	bl	80005f8 <__aeabi_dmul>
 800c78c:	a370      	add	r3, pc, #448	; (adr r3, 800c950 <__ieee754_pow+0xa08>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	4680      	mov	r8, r0
 800c794:	4689      	mov	r9, r1
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 ff2d 	bl	80005f8 <__aeabi_dmul>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	f7f3 fd71 	bl	800028c <__adddf3>
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	f7f3 fd69 	bl	800028c <__adddf3>
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	463b      	mov	r3, r7
 800c7be:	4680      	mov	r8, r0
 800c7c0:	4689      	mov	r9, r1
 800c7c2:	f7f3 fd61 	bl	8000288 <__aeabi_dsub>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	f7f3 fd5b 	bl	8000288 <__aeabi_dsub>
 800c7d2:	4642      	mov	r2, r8
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	464b      	mov	r3, r9
 800c7da:	4640      	mov	r0, r8
 800c7dc:	4649      	mov	r1, r9
 800c7de:	f7f3 ff0b 	bl	80005f8 <__aeabi_dmul>
 800c7e2:	a35d      	add	r3, pc, #372	; (adr r3, 800c958 <__ieee754_pow+0xa10>)
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	f7f3 ff04 	bl	80005f8 <__aeabi_dmul>
 800c7f0:	a35b      	add	r3, pc, #364	; (adr r3, 800c960 <__ieee754_pow+0xa18>)
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	f7f3 fd47 	bl	8000288 <__aeabi_dsub>
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	462b      	mov	r3, r5
 800c7fe:	f7f3 fefb 	bl	80005f8 <__aeabi_dmul>
 800c802:	a359      	add	r3, pc, #356	; (adr r3, 800c968 <__ieee754_pow+0xa20>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f7f3 fd40 	bl	800028c <__adddf3>
 800c80c:	4622      	mov	r2, r4
 800c80e:	462b      	mov	r3, r5
 800c810:	f7f3 fef2 	bl	80005f8 <__aeabi_dmul>
 800c814:	a356      	add	r3, pc, #344	; (adr r3, 800c970 <__ieee754_pow+0xa28>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f7f3 fd35 	bl	8000288 <__aeabi_dsub>
 800c81e:	4622      	mov	r2, r4
 800c820:	462b      	mov	r3, r5
 800c822:	f7f3 fee9 	bl	80005f8 <__aeabi_dmul>
 800c826:	a354      	add	r3, pc, #336	; (adr r3, 800c978 <__ieee754_pow+0xa30>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f3 fd2e 	bl	800028c <__adddf3>
 800c830:	4622      	mov	r2, r4
 800c832:	462b      	mov	r3, r5
 800c834:	f7f3 fee0 	bl	80005f8 <__aeabi_dmul>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4640      	mov	r0, r8
 800c83e:	4649      	mov	r1, r9
 800c840:	f7f3 fd22 	bl	8000288 <__aeabi_dsub>
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	4640      	mov	r0, r8
 800c84e:	4649      	mov	r1, r9
 800c850:	f7f3 fed2 	bl	80005f8 <__aeabi_dmul>
 800c854:	2200      	movs	r2, #0
 800c856:	ec41 0b19 	vmov	d9, r0, r1
 800c85a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f7f3 fd11 	bl	8000288 <__aeabi_dsub>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	ec51 0b19 	vmov	r0, r1, d9
 800c86e:	f7f3 ffed 	bl	800084c <__aeabi_ddiv>
 800c872:	4632      	mov	r2, r6
 800c874:	4604      	mov	r4, r0
 800c876:	460d      	mov	r5, r1
 800c878:	463b      	mov	r3, r7
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	4632      	mov	r2, r6
 800c884:	463b      	mov	r3, r7
 800c886:	f7f3 fd01 	bl	800028c <__adddf3>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4620      	mov	r0, r4
 800c890:	4629      	mov	r1, r5
 800c892:	f7f3 fcf9 	bl	8000288 <__aeabi_dsub>
 800c896:	4642      	mov	r2, r8
 800c898:	464b      	mov	r3, r9
 800c89a:	f7f3 fcf5 	bl	8000288 <__aeabi_dsub>
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	4939      	ldr	r1, [pc, #228]	; (800c988 <__ieee754_pow+0xa40>)
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f7f3 fcef 	bl	8000288 <__aeabi_dsub>
 800c8aa:	ec41 0b10 	vmov	d0, r0, r1
 800c8ae:	ee10 3a90 	vmov	r3, s1
 800c8b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c8b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8ba:	da2b      	bge.n	800c914 <__ieee754_pow+0x9cc>
 800c8bc:	4650      	mov	r0, sl
 800c8be:	f000 f877 	bl	800c9b0 <scalbn>
 800c8c2:	ec51 0b10 	vmov	r0, r1, d0
 800c8c6:	ec53 2b18 	vmov	r2, r3, d8
 800c8ca:	f7ff bbee 	b.w	800c0aa <__ieee754_pow+0x162>
 800c8ce:	4b2f      	ldr	r3, [pc, #188]	; (800c98c <__ieee754_pow+0xa44>)
 800c8d0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c8d4:	429e      	cmp	r6, r3
 800c8d6:	f77f af0d 	ble.w	800c6f4 <__ieee754_pow+0x7ac>
 800c8da:	4b2d      	ldr	r3, [pc, #180]	; (800c990 <__ieee754_pow+0xa48>)
 800c8dc:	440b      	add	r3, r1
 800c8de:	4303      	orrs	r3, r0
 800c8e0:	d009      	beq.n	800c8f6 <__ieee754_pow+0x9ae>
 800c8e2:	ec51 0b18 	vmov	r0, r1, d8
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f7f4 f8f7 	bl	8000adc <__aeabi_dcmplt>
 800c8ee:	3800      	subs	r0, #0
 800c8f0:	bf18      	it	ne
 800c8f2:	2001      	movne	r0, #1
 800c8f4:	e448      	b.n	800c188 <__ieee754_pow+0x240>
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	f7f3 fcc5 	bl	8000288 <__aeabi_dsub>
 800c8fe:	4642      	mov	r2, r8
 800c900:	464b      	mov	r3, r9
 800c902:	f7f4 f8ff 	bl	8000b04 <__aeabi_dcmpge>
 800c906:	2800      	cmp	r0, #0
 800c908:	f43f aef4 	beq.w	800c6f4 <__ieee754_pow+0x7ac>
 800c90c:	e7e9      	b.n	800c8e2 <__ieee754_pow+0x99a>
 800c90e:	f04f 0a00 	mov.w	sl, #0
 800c912:	e71a      	b.n	800c74a <__ieee754_pow+0x802>
 800c914:	ec51 0b10 	vmov	r0, r1, d0
 800c918:	4619      	mov	r1, r3
 800c91a:	e7d4      	b.n	800c8c6 <__ieee754_pow+0x97e>
 800c91c:	491a      	ldr	r1, [pc, #104]	; (800c988 <__ieee754_pow+0xa40>)
 800c91e:	2000      	movs	r0, #0
 800c920:	f7ff bb31 	b.w	800bf86 <__ieee754_pow+0x3e>
 800c924:	2000      	movs	r0, #0
 800c926:	2100      	movs	r1, #0
 800c928:	f7ff bb2d 	b.w	800bf86 <__ieee754_pow+0x3e>
 800c92c:	4630      	mov	r0, r6
 800c92e:	4639      	mov	r1, r7
 800c930:	f7ff bb29 	b.w	800bf86 <__ieee754_pow+0x3e>
 800c934:	9204      	str	r2, [sp, #16]
 800c936:	f7ff bb7b 	b.w	800c030 <__ieee754_pow+0xe8>
 800c93a:	2300      	movs	r3, #0
 800c93c:	f7ff bb65 	b.w	800c00a <__ieee754_pow+0xc2>
 800c940:	00000000 	.word	0x00000000
 800c944:	3fe62e43 	.word	0x3fe62e43
 800c948:	fefa39ef 	.word	0xfefa39ef
 800c94c:	3fe62e42 	.word	0x3fe62e42
 800c950:	0ca86c39 	.word	0x0ca86c39
 800c954:	be205c61 	.word	0xbe205c61
 800c958:	72bea4d0 	.word	0x72bea4d0
 800c95c:	3e663769 	.word	0x3e663769
 800c960:	c5d26bf1 	.word	0xc5d26bf1
 800c964:	3ebbbd41 	.word	0x3ebbbd41
 800c968:	af25de2c 	.word	0xaf25de2c
 800c96c:	3f11566a 	.word	0x3f11566a
 800c970:	16bebd93 	.word	0x16bebd93
 800c974:	3f66c16c 	.word	0x3f66c16c
 800c978:	5555553e 	.word	0x5555553e
 800c97c:	3fc55555 	.word	0x3fc55555
 800c980:	3fe00000 	.word	0x3fe00000
 800c984:	fff00000 	.word	0xfff00000
 800c988:	3ff00000 	.word	0x3ff00000
 800c98c:	4090cbff 	.word	0x4090cbff
 800c990:	3f6f3400 	.word	0x3f6f3400
 800c994:	652b82fe 	.word	0x652b82fe
 800c998:	3c971547 	.word	0x3c971547

0800c99c <fabs>:
 800c99c:	ec51 0b10 	vmov	r0, r1, d0
 800c9a0:	ee10 2a10 	vmov	r2, s0
 800c9a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9a8:	ec43 2b10 	vmov	d0, r2, r3
 800c9ac:	4770      	bx	lr
	...

0800c9b0 <scalbn>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	ec55 4b10 	vmov	r4, r5, d0
 800c9b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	462b      	mov	r3, r5
 800c9be:	b999      	cbnz	r1, 800c9e8 <scalbn+0x38>
 800c9c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c9c4:	4323      	orrs	r3, r4
 800c9c6:	d03f      	beq.n	800ca48 <scalbn+0x98>
 800c9c8:	4b35      	ldr	r3, [pc, #212]	; (800caa0 <scalbn+0xf0>)
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	ee10 0a10 	vmov	r0, s0
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f7f3 fe11 	bl	80005f8 <__aeabi_dmul>
 800c9d6:	4b33      	ldr	r3, [pc, #204]	; (800caa4 <scalbn+0xf4>)
 800c9d8:	429e      	cmp	r6, r3
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	da10      	bge.n	800ca02 <scalbn+0x52>
 800c9e0:	a327      	add	r3, pc, #156	; (adr r3, 800ca80 <scalbn+0xd0>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	e01f      	b.n	800ca28 <scalbn+0x78>
 800c9e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c9ec:	4291      	cmp	r1, r2
 800c9ee:	d10c      	bne.n	800ca0a <scalbn+0x5a>
 800c9f0:	ee10 2a10 	vmov	r2, s0
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	f7f3 fc48 	bl	800028c <__adddf3>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	e022      	b.n	800ca48 <scalbn+0x98>
 800ca02:	460b      	mov	r3, r1
 800ca04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ca08:	3936      	subs	r1, #54	; 0x36
 800ca0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ca0e:	4296      	cmp	r6, r2
 800ca10:	dd0d      	ble.n	800ca2e <scalbn+0x7e>
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	a11c      	add	r1, pc, #112	; (adr r1, 800ca88 <scalbn+0xd8>)
 800ca16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca1a:	da02      	bge.n	800ca22 <scalbn+0x72>
 800ca1c:	a11c      	add	r1, pc, #112	; (adr r1, 800ca90 <scalbn+0xe0>)
 800ca1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca22:	a319      	add	r3, pc, #100	; (adr r3, 800ca88 <scalbn+0xd8>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	e7e6      	b.n	800c9fc <scalbn+0x4c>
 800ca2e:	1872      	adds	r2, r6, r1
 800ca30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ca34:	428a      	cmp	r2, r1
 800ca36:	dcec      	bgt.n	800ca12 <scalbn+0x62>
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	dd08      	ble.n	800ca4e <scalbn+0x9e>
 800ca3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca48:	ec45 4b10 	vmov	d0, r4, r5
 800ca4c:	bd70      	pop	{r4, r5, r6, pc}
 800ca4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ca52:	da08      	bge.n	800ca66 <scalbn+0xb6>
 800ca54:	2d00      	cmp	r5, #0
 800ca56:	a10a      	add	r1, pc, #40	; (adr r1, 800ca80 <scalbn+0xd0>)
 800ca58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca5c:	dac0      	bge.n	800c9e0 <scalbn+0x30>
 800ca5e:	a10e      	add	r1, pc, #56	; (adr r1, 800ca98 <scalbn+0xe8>)
 800ca60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca64:	e7bc      	b.n	800c9e0 <scalbn+0x30>
 800ca66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca6a:	3236      	adds	r2, #54	; 0x36
 800ca6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca74:	4620      	mov	r0, r4
 800ca76:	4b0c      	ldr	r3, [pc, #48]	; (800caa8 <scalbn+0xf8>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	e7d5      	b.n	800ca28 <scalbn+0x78>
 800ca7c:	f3af 8000 	nop.w
 800ca80:	c2f8f359 	.word	0xc2f8f359
 800ca84:	01a56e1f 	.word	0x01a56e1f
 800ca88:	8800759c 	.word	0x8800759c
 800ca8c:	7e37e43c 	.word	0x7e37e43c
 800ca90:	8800759c 	.word	0x8800759c
 800ca94:	fe37e43c 	.word	0xfe37e43c
 800ca98:	c2f8f359 	.word	0xc2f8f359
 800ca9c:	81a56e1f 	.word	0x81a56e1f
 800caa0:	43500000 	.word	0x43500000
 800caa4:	ffff3cb0 	.word	0xffff3cb0
 800caa8:	3c900000 	.word	0x3c900000

0800caac <with_errno>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	4604      	mov	r4, r0
 800cab0:	460d      	mov	r5, r1
 800cab2:	4616      	mov	r6, r2
 800cab4:	f7fd f95c 	bl	8009d70 <__errno>
 800cab8:	4629      	mov	r1, r5
 800caba:	6006      	str	r6, [r0, #0]
 800cabc:	4620      	mov	r0, r4
 800cabe:	bd70      	pop	{r4, r5, r6, pc}

0800cac0 <xflow>:
 800cac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cac2:	4614      	mov	r4, r2
 800cac4:	461d      	mov	r5, r3
 800cac6:	b108      	cbz	r0, 800cacc <xflow+0xc>
 800cac8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cacc:	e9cd 2300 	strd	r2, r3, [sp]
 800cad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	f7f3 fd8e 	bl	80005f8 <__aeabi_dmul>
 800cadc:	2222      	movs	r2, #34	; 0x22
 800cade:	b003      	add	sp, #12
 800cae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cae4:	f7ff bfe2 	b.w	800caac <with_errno>

0800cae8 <__math_uflow>:
 800cae8:	b508      	push	{r3, lr}
 800caea:	2200      	movs	r2, #0
 800caec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caf0:	f7ff ffe6 	bl	800cac0 <xflow>
 800caf4:	ec41 0b10 	vmov	d0, r0, r1
 800caf8:	bd08      	pop	{r3, pc}

0800cafa <__math_oflow>:
 800cafa:	b508      	push	{r3, lr}
 800cafc:	2200      	movs	r2, #0
 800cafe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cb02:	f7ff ffdd 	bl	800cac0 <xflow>
 800cb06:	ec41 0b10 	vmov	d0, r0, r1
 800cb0a:	bd08      	pop	{r3, pc}
 800cb0c:	0000      	movs	r0, r0
	...

0800cb10 <__ieee754_log>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	ec51 0b10 	vmov	r0, r1, d0
 800cb18:	ed2d 8b04 	vpush	{d8-d9}
 800cb1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cb20:	b083      	sub	sp, #12
 800cb22:	460d      	mov	r5, r1
 800cb24:	da29      	bge.n	800cb7a <__ieee754_log+0x6a>
 800cb26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb2a:	4303      	orrs	r3, r0
 800cb2c:	ee10 2a10 	vmov	r2, s0
 800cb30:	d10c      	bne.n	800cb4c <__ieee754_log+0x3c>
 800cb32:	49cf      	ldr	r1, [pc, #828]	; (800ce70 <__ieee754_log+0x360>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	2300      	movs	r3, #0
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f7f3 fe87 	bl	800084c <__aeabi_ddiv>
 800cb3e:	ec41 0b10 	vmov	d0, r0, r1
 800cb42:	b003      	add	sp, #12
 800cb44:	ecbd 8b04 	vpop	{d8-d9}
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	da05      	bge.n	800cb5c <__ieee754_log+0x4c>
 800cb50:	460b      	mov	r3, r1
 800cb52:	f7f3 fb99 	bl	8000288 <__aeabi_dsub>
 800cb56:	2200      	movs	r2, #0
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e7ee      	b.n	800cb3a <__ieee754_log+0x2a>
 800cb5c:	4bc5      	ldr	r3, [pc, #788]	; (800ce74 <__ieee754_log+0x364>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f7f3 fd4a 	bl	80005f8 <__aeabi_dmul>
 800cb64:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cb68:	460d      	mov	r5, r1
 800cb6a:	4ac3      	ldr	r2, [pc, #780]	; (800ce78 <__ieee754_log+0x368>)
 800cb6c:	4295      	cmp	r5, r2
 800cb6e:	dd06      	ble.n	800cb7e <__ieee754_log+0x6e>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	f7f3 fb8a 	bl	800028c <__adddf3>
 800cb78:	e7e1      	b.n	800cb3e <__ieee754_log+0x2e>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e7f5      	b.n	800cb6a <__ieee754_log+0x5a>
 800cb7e:	152c      	asrs	r4, r5, #20
 800cb80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cb84:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cb88:	441c      	add	r4, r3
 800cb8a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cb8e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cb92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb96:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cb9a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cb9e:	ea42 0105 	orr.w	r1, r2, r5
 800cba2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cba6:	2200      	movs	r2, #0
 800cba8:	4bb4      	ldr	r3, [pc, #720]	; (800ce7c <__ieee754_log+0x36c>)
 800cbaa:	f7f3 fb6d 	bl	8000288 <__aeabi_dsub>
 800cbae:	1cab      	adds	r3, r5, #2
 800cbb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	4682      	mov	sl, r0
 800cbb8:	468b      	mov	fp, r1
 800cbba:	f04f 0200 	mov.w	r2, #0
 800cbbe:	dc53      	bgt.n	800cc68 <__ieee754_log+0x158>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f7f3 ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbc6:	b1d0      	cbz	r0, 800cbfe <__ieee754_log+0xee>
 800cbc8:	2c00      	cmp	r4, #0
 800cbca:	f000 8122 	beq.w	800ce12 <__ieee754_log+0x302>
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f7f3 fca8 	bl	8000524 <__aeabi_i2d>
 800cbd4:	a390      	add	r3, pc, #576	; (adr r3, 800ce18 <__ieee754_log+0x308>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	4606      	mov	r6, r0
 800cbdc:	460f      	mov	r7, r1
 800cbde:	f7f3 fd0b 	bl	80005f8 <__aeabi_dmul>
 800cbe2:	a38f      	add	r3, pc, #572	; (adr r3, 800ce20 <__ieee754_log+0x310>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	4604      	mov	r4, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	4630      	mov	r0, r6
 800cbee:	4639      	mov	r1, r7
 800cbf0:	f7f3 fd02 	bl	80005f8 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	e7ba      	b.n	800cb74 <__ieee754_log+0x64>
 800cbfe:	a38a      	add	r3, pc, #552	; (adr r3, 800ce28 <__ieee754_log+0x318>)
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	4650      	mov	r0, sl
 800cc06:	4659      	mov	r1, fp
 800cc08:	f7f3 fcf6 	bl	80005f8 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	2000      	movs	r0, #0
 800cc12:	499b      	ldr	r1, [pc, #620]	; (800ce80 <__ieee754_log+0x370>)
 800cc14:	f7f3 fb38 	bl	8000288 <__aeabi_dsub>
 800cc18:	4652      	mov	r2, sl
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	465b      	mov	r3, fp
 800cc20:	4650      	mov	r0, sl
 800cc22:	4659      	mov	r1, fp
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 fce2 	bl	80005f8 <__aeabi_dmul>
 800cc34:	4606      	mov	r6, r0
 800cc36:	460f      	mov	r7, r1
 800cc38:	b914      	cbnz	r4, 800cc40 <__ieee754_log+0x130>
 800cc3a:	4632      	mov	r2, r6
 800cc3c:	463b      	mov	r3, r7
 800cc3e:	e0a2      	b.n	800cd86 <__ieee754_log+0x276>
 800cc40:	4620      	mov	r0, r4
 800cc42:	f7f3 fc6f 	bl	8000524 <__aeabi_i2d>
 800cc46:	a374      	add	r3, pc, #464	; (adr r3, 800ce18 <__ieee754_log+0x308>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	4689      	mov	r9, r1
 800cc50:	f7f3 fcd2 	bl	80005f8 <__aeabi_dmul>
 800cc54:	a372      	add	r3, pc, #456	; (adr r3, 800ce20 <__ieee754_log+0x310>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	460d      	mov	r5, r1
 800cc5e:	4640      	mov	r0, r8
 800cc60:	4649      	mov	r1, r9
 800cc62:	f7f3 fcc9 	bl	80005f8 <__aeabi_dmul>
 800cc66:	e0a7      	b.n	800cdb8 <__ieee754_log+0x2a8>
 800cc68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc6c:	f7f3 fb0e 	bl	800028c <__adddf3>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4650      	mov	r0, sl
 800cc76:	4659      	mov	r1, fp
 800cc78:	f7f3 fde8 	bl	800084c <__aeabi_ddiv>
 800cc7c:	ec41 0b18 	vmov	d8, r0, r1
 800cc80:	4620      	mov	r0, r4
 800cc82:	f7f3 fc4f 	bl	8000524 <__aeabi_i2d>
 800cc86:	ec53 2b18 	vmov	r2, r3, d8
 800cc8a:	ec41 0b19 	vmov	d9, r0, r1
 800cc8e:	ec51 0b18 	vmov	r0, r1, d8
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cc9a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	4680      	mov	r8, r0
 800cca6:	4689      	mov	r9, r1
 800cca8:	f7f3 fca6 	bl	80005f8 <__aeabi_dmul>
 800ccac:	a360      	add	r3, pc, #384	; (adr r3, 800ce30 <__ieee754_log+0x320>)
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	a35f      	add	r3, pc, #380	; (adr r3, 800ce38 <__ieee754_log+0x328>)
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	f7f3 fae4 	bl	800028c <__adddf3>
 800ccc4:	4632      	mov	r2, r6
 800ccc6:	463b      	mov	r3, r7
 800ccc8:	f7f3 fc96 	bl	80005f8 <__aeabi_dmul>
 800cccc:	a35c      	add	r3, pc, #368	; (adr r3, 800ce40 <__ieee754_log+0x330>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	f7f3 fadb 	bl	800028c <__adddf3>
 800ccd6:	4632      	mov	r2, r6
 800ccd8:	463b      	mov	r3, r7
 800ccda:	f7f3 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ccde:	a35a      	add	r3, pc, #360	; (adr r3, 800ce48 <__ieee754_log+0x338>)
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	f7f3 fad2 	bl	800028c <__adddf3>
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	f7f3 fc84 	bl	80005f8 <__aeabi_dmul>
 800ccf0:	a357      	add	r3, pc, #348	; (adr r3, 800ce50 <__ieee754_log+0x340>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	4680      	mov	r8, r0
 800ccf8:	4689      	mov	r9, r1
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 fc7b 	bl	80005f8 <__aeabi_dmul>
 800cd02:	a355      	add	r3, pc, #340	; (adr r3, 800ce58 <__ieee754_log+0x348>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7f3 fac0 	bl	800028c <__adddf3>
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	463b      	mov	r3, r7
 800cd10:	f7f3 fc72 	bl	80005f8 <__aeabi_dmul>
 800cd14:	a352      	add	r3, pc, #328	; (adr r3, 800ce60 <__ieee754_log+0x350>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	f7f3 fab7 	bl	800028c <__adddf3>
 800cd1e:	4632      	mov	r2, r6
 800cd20:	463b      	mov	r3, r7
 800cd22:	f7f3 fc69 	bl	80005f8 <__aeabi_dmul>
 800cd26:	460b      	mov	r3, r1
 800cd28:	4602      	mov	r2, r0
 800cd2a:	4649      	mov	r1, r9
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	f7f3 faad 	bl	800028c <__adddf3>
 800cd32:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	3551      	adds	r5, #81	; 0x51
 800cd3a:	431d      	orrs	r5, r3
 800cd3c:	2d00      	cmp	r5, #0
 800cd3e:	4680      	mov	r8, r0
 800cd40:	4689      	mov	r9, r1
 800cd42:	dd48      	ble.n	800cdd6 <__ieee754_log+0x2c6>
 800cd44:	4b4e      	ldr	r3, [pc, #312]	; (800ce80 <__ieee754_log+0x370>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	4650      	mov	r0, sl
 800cd4a:	4659      	mov	r1, fp
 800cd4c:	f7f3 fc54 	bl	80005f8 <__aeabi_dmul>
 800cd50:	4652      	mov	r2, sl
 800cd52:	465b      	mov	r3, fp
 800cd54:	f7f3 fc50 	bl	80005f8 <__aeabi_dmul>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	460f      	mov	r7, r1
 800cd60:	4640      	mov	r0, r8
 800cd62:	4649      	mov	r1, r9
 800cd64:	f7f3 fa92 	bl	800028c <__adddf3>
 800cd68:	ec53 2b18 	vmov	r2, r3, d8
 800cd6c:	f7f3 fc44 	bl	80005f8 <__aeabi_dmul>
 800cd70:	4680      	mov	r8, r0
 800cd72:	4689      	mov	r9, r1
 800cd74:	b964      	cbnz	r4, 800cd90 <__ieee754_log+0x280>
 800cd76:	4602      	mov	r2, r0
 800cd78:	460b      	mov	r3, r1
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	f7f3 fa83 	bl	8000288 <__aeabi_dsub>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4650      	mov	r0, sl
 800cd88:	4659      	mov	r1, fp
 800cd8a:	f7f3 fa7d 	bl	8000288 <__aeabi_dsub>
 800cd8e:	e6d6      	b.n	800cb3e <__ieee754_log+0x2e>
 800cd90:	a321      	add	r3, pc, #132	; (adr r3, 800ce18 <__ieee754_log+0x308>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	ec51 0b19 	vmov	r0, r1, d9
 800cd9a:	f7f3 fc2d 	bl	80005f8 <__aeabi_dmul>
 800cd9e:	a320      	add	r3, pc, #128	; (adr r3, 800ce20 <__ieee754_log+0x310>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	4604      	mov	r4, r0
 800cda6:	460d      	mov	r5, r1
 800cda8:	ec51 0b19 	vmov	r0, r1, d9
 800cdac:	f7f3 fc24 	bl	80005f8 <__aeabi_dmul>
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	f7f3 fa6a 	bl	800028c <__adddf3>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	f7f3 fa62 	bl	8000288 <__aeabi_dsub>
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	465b      	mov	r3, fp
 800cdc8:	f7f3 fa5e 	bl	8000288 <__aeabi_dsub>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	e7d9      	b.n	800cd8a <__ieee754_log+0x27a>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4650      	mov	r0, sl
 800cddc:	4659      	mov	r1, fp
 800cdde:	f7f3 fa53 	bl	8000288 <__aeabi_dsub>
 800cde2:	ec53 2b18 	vmov	r2, r3, d8
 800cde6:	f7f3 fc07 	bl	80005f8 <__aeabi_dmul>
 800cdea:	4606      	mov	r6, r0
 800cdec:	460f      	mov	r7, r1
 800cdee:	2c00      	cmp	r4, #0
 800cdf0:	f43f af23 	beq.w	800cc3a <__ieee754_log+0x12a>
 800cdf4:	a308      	add	r3, pc, #32	; (adr r3, 800ce18 <__ieee754_log+0x308>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	ec51 0b19 	vmov	r0, r1, d9
 800cdfe:	f7f3 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ce02:	a307      	add	r3, pc, #28	; (adr r3, 800ce20 <__ieee754_log+0x310>)
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	4604      	mov	r4, r0
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	ec51 0b19 	vmov	r0, r1, d9
 800ce10:	e727      	b.n	800cc62 <__ieee754_log+0x152>
 800ce12:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ce68 <__ieee754_log+0x358>
 800ce16:	e694      	b.n	800cb42 <__ieee754_log+0x32>
 800ce18:	fee00000 	.word	0xfee00000
 800ce1c:	3fe62e42 	.word	0x3fe62e42
 800ce20:	35793c76 	.word	0x35793c76
 800ce24:	3dea39ef 	.word	0x3dea39ef
 800ce28:	55555555 	.word	0x55555555
 800ce2c:	3fd55555 	.word	0x3fd55555
 800ce30:	df3e5244 	.word	0xdf3e5244
 800ce34:	3fc2f112 	.word	0x3fc2f112
 800ce38:	96cb03de 	.word	0x96cb03de
 800ce3c:	3fc74664 	.word	0x3fc74664
 800ce40:	94229359 	.word	0x94229359
 800ce44:	3fd24924 	.word	0x3fd24924
 800ce48:	55555593 	.word	0x55555593
 800ce4c:	3fe55555 	.word	0x3fe55555
 800ce50:	d078c69f 	.word	0xd078c69f
 800ce54:	3fc39a09 	.word	0x3fc39a09
 800ce58:	1d8e78af 	.word	0x1d8e78af
 800ce5c:	3fcc71c5 	.word	0x3fcc71c5
 800ce60:	9997fa04 	.word	0x9997fa04
 800ce64:	3fd99999 	.word	0x3fd99999
	...
 800ce70:	c3500000 	.word	0xc3500000
 800ce74:	43500000 	.word	0x43500000
 800ce78:	7fefffff 	.word	0x7fefffff
 800ce7c:	3ff00000 	.word	0x3ff00000
 800ce80:	3fe00000 	.word	0x3fe00000

0800ce84 <_init>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr

0800ce90 <_fini>:
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce92:	bf00      	nop
 800ce94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce96:	bc08      	pop	{r3}
 800ce98:	469e      	mov	lr, r3
 800ce9a:	4770      	bx	lr
