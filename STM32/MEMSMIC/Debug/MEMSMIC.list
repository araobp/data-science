
MEMSMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c2c  08009828  08009828  00019828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d454  0801d454  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801d454  0801d454  0002d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d45c  0801d45c  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d45c  0801d45c  0002d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d460  0801d460  0002d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801d464  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f318  200001d8  0801d63c  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f4f0  0801d63c  0003f4f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be78  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba2  00000000  00000000  0004c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0004fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e6  00000000  00000000  00050b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273bf  00000000  00000000  00051576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001302d  00000000  00000000  00078935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee86f  00000000  00000000  0008b962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b14  00000000  00000000  0017a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004102  00000000  00000000  0017ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001d8  00000000  00000000  00182e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009810 	.word	0x08009810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009810 	.word	0x08009810

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea8:	ed2d 8b02 	vpush	{d8}
 8000eac:	b090      	sub	sp, #64	; 0x40
 8000eae:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fde0 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f992 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 fa96 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebc:	f000 fa76 	bl	80013ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 fa44 	bl	800134c <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8000ec4:	f000 f9dc 	bl	8001280 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nPush USER button to output single-shot FFT\r\n");
 8000ec8:	48ae      	ldr	r0, [pc, #696]	; (8001184 <main+0x2e0>)
 8000eca:	f006 fb65 	bl	8007598 <puts>
  HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f000 fe4c 	bl	8001b6c <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, buf, fs) != HAL_OK) {
 8000ed4:	4bac      	ldr	r3, [pc, #688]	; (8001188 <main+0x2e4>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ede:	ee17 2a90 	vmov	r2, s15
 8000ee2:	49aa      	ldr	r1, [pc, #680]	; (800118c <main+0x2e8>)
 8000ee4:	48aa      	ldr	r0, [pc, #680]	; (8001190 <main+0x2ec>)
 8000ee6:	f001 f957 	bl	8002198 <HAL_DFSDM_FilterRegularStart_DMA>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <main+0x50>
    Error_Handler();
 8000ef0:	f000 faf6 	bl	80014e0 <Error_Handler>
  }

  // FFT init
  fs = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 8000ef4:	4ba7      	ldr	r3, [pc, #668]	; (8001194 <main+0x2f0>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4ba7      	ldr	r3, [pc, #668]	; (8001198 <main+0x2f4>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8000f00:	4ba3      	ldr	r3, [pc, #652]	; (8001190 <main+0x2ec>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8000f08:	4ba1      	ldr	r3, [pc, #644]	; (8001190 <main+0x2ec>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
  fs = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f18:	4b9b      	ldr	r3, [pc, #620]	; (8001188 <main+0x2e4>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]

  // Hanning window
  const float tmp = 2.0f * M_PI / (float) NN;
 8000f1e:	4b9f      	ldr	r3, [pc, #636]	; (800119c <main+0x2f8>)
 8000f20:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < NN; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f26:	e01f      	b.n	8000f68 <main+0xc4>
    *(fft_win + i) = 0.5f - 0.5f * arm_cos_f32((float) i * tmp);
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3e:	f005 fa07 	bl	8006350 <arm_cos_f32>
 8000f42:	eef0 7a40 	vmov.f32	s15, s0
 8000f46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4a93      	ldr	r2, [pc, #588]	; (80011a0 <main+0x2fc>)
 8000f54:	4413      	add	r3, r2
 8000f56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < NN; i++)
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	3301      	adds	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f6e:	d3db      	bcc.n	8000f28 <main+0x84>

  for (uint32_t i = 0; i < NN / 2; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f74:	e016      	b.n	8000fa4 <main+0x100>
    *(fft_freq + i) = (float) i * (float) fs / (float) NN;
 8000f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f80:	4b81      	ldr	r3, [pc, #516]	; (8001188 <main+0x2e4>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4a85      	ldr	r2, [pc, #532]	; (80011a4 <main+0x300>)
 8000f90:	4413      	add	r3, r2
 8000f92:	eddf 6a85 	vldr	s13, [pc, #532]	; 80011a8 <main+0x304>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < NN / 2; i++)
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000faa:	d3e4      	bcc.n	8000f76 <main+0xd2>

  arm_rfft_fast_init_f32(&S, NN);
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	487e      	ldr	r0, [pc, #504]	; (80011ac <main+0x308>)
 8000fb2:	f004 fbe7 	bl	8005784 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // Wait
    while (flag)
 8000fb6:	bf00      	nop
 8000fb8:	4b7d      	ldr	r3, [pc, #500]	; (80011b0 <main+0x30c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1fb      	bne.n	8000fb8 <main+0x114>
    // Raw data output
    /*for (uint32_t i = 0; i < FFT_SampleNum; i++)
     printf("%d\r\n", FFT_inp_int32[i]);*/

    // Set input data
    for (uint32_t i = 0; i < NN; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc4:	e010      	b.n	8000fe8 <main+0x144>
      fft_in[i] = (float) fft_in_int32[i];
 8000fc6:	4a7b      	ldr	r2, [pc, #492]	; (80011b4 <main+0x310>)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd6:	4a78      	ldr	r2, [pc, #480]	; (80011b8 <main+0x314>)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < NN; i++)
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fee:	d3ea      	bcc.n	8000fc6 <main+0x122>

    // Windowing
    arm_mult_f32(fft_in, fft_win, fft_in, NN);
 8000ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff4:	4a70      	ldr	r2, [pc, #448]	; (80011b8 <main+0x314>)
 8000ff6:	496a      	ldr	r1, [pc, #424]	; (80011a0 <main+0x2fc>)
 8000ff8:	486f      	ldr	r0, [pc, #444]	; (80011b8 <main+0x314>)
 8000ffa:	f005 fa37 	bl	800646c <arm_mult_f32>

    // Execute FFT
    arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 8000ffe:	2300      	movs	r3, #0
 8001000:	4a6e      	ldr	r2, [pc, #440]	; (80011bc <main+0x318>)
 8001002:	496d      	ldr	r1, [pc, #436]	; (80011b8 <main+0x314>)
 8001004:	4869      	ldr	r0, [pc, #420]	; (80011ac <main+0x308>)
 8001006:	f004 fca1 	bl	800594c <arm_rfft_fast_f32>

    // calculate magnitude
    arm_cmplx_mag_f32(fft_out, fft_mag, NN / 2);
 800100a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100e:	496c      	ldr	r1, [pc, #432]	; (80011c0 <main+0x31c>)
 8001010:	486a      	ldr	r0, [pc, #424]	; (80011bc <main+0x318>)
 8001012:	f005 f879 	bl	8006108 <arm_cmplx_mag_f32>

    // Normalization (Unitary transformation) of magnitude
    arm_scale_f32(fft_mag, 1.0f / sqrtf((float) NN), fft_mag, NN / 2);
 8001016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101a:	4969      	ldr	r1, [pc, #420]	; (80011c0 <main+0x31c>)
 800101c:	ed9f 0a69 	vldr	s0, [pc, #420]	; 80011c4 <main+0x320>
 8001020:	4867      	ldr	r0, [pc, #412]	; (80011c0 <main+0x31c>)
 8001022:	f005 f9df 	bl	80063e4 <arm_scale_f32>

    // AC coupling
    for (uint32_t i = 0; i < NN / 2; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
 800102a:	e017      	b.n	800105c <main+0x1b8>
      if (*(fft_freq + i) < FFT_AC_COUPLING_HZ)
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4a5c      	ldr	r2, [pc, #368]	; (80011a4 <main+0x300>)
 8001032:	4413      	add	r3, r2
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80011c8 <main+0x324>
 800103c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	d400      	bmi.n	8001048 <main+0x1a4>
        fft_mag[i] = 1.0f;
      else
        break;
 8001046:	e00d      	b.n	8001064 <main+0x1c0>
        fft_mag[i] = 1.0f;
 8001048:	4a5d      	ldr	r2, [pc, #372]	; (80011c0 <main+0x31c>)
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001054:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NN / 2; i++) {
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	3301      	adds	r3, #1
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d3e3      	bcc.n	800102c <main+0x188>
    }

    float inv_dB_base_mag = 1.0f / 1.0f;
 8001064:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001068:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < NN / 2; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e01c      	b.n	80010aa <main+0x206>
      fft_db[i] = 10.0f * log10f(fft_mag[i] * inv_dB_base_mag);
 8001070:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <main+0x31c>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	ed93 7a00 	vldr	s14, [r3]
 800107c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	f008 fa22 	bl	80094d0 <log10f>
 800108c:	eef0 7a40 	vmov.f32	s15, s0
 8001090:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	4a4c      	ldr	r2, [pc, #304]	; (80011cc <main+0x328>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < NN / 2; i++)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b0:	d3de      	bcc.n	8001070 <main+0x1cc>

    // calc max mag
    float mag_max, frq_max;
    uint32_t maxIndex;
    arm_max_f32(fft_mag, NN / 2, &mag_max, &maxIndex);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	f107 0208 	add.w	r2, r7, #8
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	4840      	ldr	r0, [pc, #256]	; (80011c0 <main+0x31c>)
 80010be:	f004 fa2d 	bl	800551c <arm_max_f32>
    frq_max = *(fft_freq + maxIndex);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4a37      	ldr	r2, [pc, #220]	; (80011a4 <main+0x300>)
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]

    if (output_result) {
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <main+0x32c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d052      	beq.n	800117c <main+0x2d8>
      printf(
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <main+0x2e4>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	4604      	mov	r4, r0
 80010e8:	460d      	mov	r5, r1
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa2b 	bl	8000548 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9cd 2300 	strd	r2, r3, [sp]
 80010fa:	4622      	mov	r2, r4
 80010fc:	462b      	mov	r3, r5
 80010fe:	ee18 1a10 	vmov	r1, s16
 8001102:	4834      	ldr	r0, [pc, #208]	; (80011d4 <main+0x330>)
 8001104:	f006 f9e2 	bl	80074cc <iprintf>
          "\r\nSampleRate=%d, frq_max = %.1f, mag_max = %f\r\nFreq\tMag\tMag(dB)\r\n",
          (int) fs, frq_max, mag_max);
      for (uint32_t i = 0; i < NN / 2; i++) {
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	e029      	b.n	8001162 <main+0x2be>
        printf("%.1f\t%f\t%f\r\n", fft_freq[i], fft_mag[i], fft_db[i]);
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <main+0x300>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4680      	mov	r8, r0
 8001120:	4689      	mov	r9, r1
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <main+0x31c>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa0b 	bl	8000548 <__aeabi_f2d>
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <main+0x328>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800114e:	e9cd 4500 	strd	r4, r5, [sp]
 8001152:	4642      	mov	r2, r8
 8001154:	464b      	mov	r3, r9
 8001156:	4820      	ldr	r0, [pc, #128]	; (80011d8 <main+0x334>)
 8001158:	f006 f9b8 	bl	80074cc <iprintf>
      for (uint32_t i = 0; i < NN / 2; i++) {
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	3301      	adds	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d3d1      	bcc.n	800110e <main+0x26a>
      }
      output_result = false;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <main+0x32c>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2120      	movs	r1, #32
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f001 fd9e 	bl	8002cb8 <HAL_GPIO_WritePin>
    }

    // HAL_Delay(2000);

    flag = true;        // <- Continuous transformation
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <main+0x30c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
  while (1) {
 8001182:	e718      	b.n	8000fb6 <main+0x112>
 8001184:	08009828 	.word	0x08009828
 8001188:	20004368 	.word	0x20004368
 800118c:	20000350 	.word	0x20000350
 8001190:	200001f4 	.word	0x200001f4
 8001194:	20000004 	.word	0x20000004
 8001198:	20000248 	.word	0x20000248
 800119c:	3b490fdb 	.word	0x3b490fdb
 80011a0:	2000d36c 	.word	0x2000d36c
 80011a4:	2000c36c 	.word	0x2000c36c
 80011a8:	45000000 	.word	0x45000000
 80011ac:	20004350 	.word	0x20004350
 80011b0:	20000000 	.word	0x20000000
 80011b4:	2000436c 	.word	0x2000436c
 80011b8:	2000636c 	.word	0x2000636c
 80011bc:	2000836c 	.word	0x2000836c
 80011c0:	2000a36c 	.word	0x2000a36c
 80011c4:	3cb504f3 	.word	0x3cb504f3
 80011c8:	447a0000 	.word	0x447a0000
 80011cc:	2000b36c 	.word	0x2000b36c
 80011d0:	2000f36c 	.word	0x2000f36c
 80011d4:	08009858 	.word	0x08009858
 80011d8:	0800989c 	.word	0x0800989c

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	; 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	; 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 fab4 	bl	8007758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001202:	f001 fd7f 	bl	8002d04 <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800120c:	f000 f968 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001218:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121a:	2310      	movs	r3, #16
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800122a:	230a      	movs	r3, #10
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800122e:	2307      	movs	r3, #7
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fdb6 	bl	8002db0 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800124a:	f000 f949 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	2303      	movs	r3, #3
 8001254:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f97e 	bl	8003568 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001272:	f000 f935 	bl	80014e0 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3758      	adds	r7, #88	; 0x58
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 8001286:	4a2d      	ldr	r2, [pc, #180]	; (800133c <MX_DFSDM1_Init+0xbc>)
 8001288:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 8001292:	2201      	movs	r2, #1
 8001294:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 8001298:	2201      	movs	r2, #1
 800129a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 800129e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80012a2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80012b0:	4821      	ldr	r0, [pc, #132]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 80012b2:	f000 fe51 	bl	8001f58 <HAL_DFSDM_FilterInit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80012bc:	f000 f910 	bl	80014e0 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <MX_DFSDM1_Init+0xc4>)
 80012c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012d4:	2220      	movs	r2, #32
 80012d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012f2:	2204      	movs	r2, #4
 80012f4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 8001304:	2200      	movs	r2, #0
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 800130a:	2206      	movs	r2, #6
 800130c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_DFSDM1_Init+0xc0>)
 8001310:	f000 fd62 	bl	8001dd8 <HAL_DFSDM_ChannelInit>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800131a:	f000 f8e1 	bl	80014e0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800131e:	2201      	movs	r2, #1
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <MX_DFSDM1_Init+0xc8>)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_DFSDM1_Init+0xb8>)
 8001324:	f000 fef2 	bl	800210c <HAL_DFSDM_FilterConfigRegChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800132e:	f000 f8d7 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001f4 	.word	0x200001f4
 800133c:	40016100 	.word	0x40016100
 8001340:	20000248 	.word	0x20000248
 8001344:	40016060 	.word	0x40016060
 8001348:	00030008 	.word	0x00030008

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <MX_USART2_UART_Init+0x5c>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART2_UART_Init+0x58>)
 8001390:	f002 ffca 	bl	8004328 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800139a:	f000 f8a1 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002c8 	.word	0x200002c8
 80013a8:	40004400 	.word	0x40004400

080013ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_DMA_Init+0x38>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <MX_DMA_Init+0x38>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6493      	str	r3, [r2, #72]	; 0x48
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_DMA_Init+0x38>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	200e      	movs	r0, #14
 80013d0:	f000 fccb 	bl	8001d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013d4:	200e      	movs	r0, #14
 80013d6:	f000 fce4 	bl	8001da2 <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_GPIO_Init+0xc4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <MX_GPIO_Init+0xc4>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xc4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_GPIO_Init+0xc4>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f001 fc27 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xc8>)
 8001482:	f001 fa6f 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001486:	2320      	movs	r3, #32
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 fa60 	bl	8002964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000800 	.word	0x48000800

080014b4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *pbuf, int len) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, len, 1000);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <_write+0x28>)
 80014cc:	f002 ff7a 	bl	80043c4 <HAL_UART_Transmit>
  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200002c8 	.word	0x200002c8

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6613      	str	r3, [r2, #96]	; 0x60
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x44>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6593      	str	r3, [r2, #88]	; 0x58
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ac      	sub	sp, #176	; 0xb0
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2288      	movs	r2, #136	; 0x88
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f006 f8ff 	bl	8007758 <memset>
  if(DFSDM1_Init == 0)
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_DFSDM_FilterMspInit+0x138>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d14a      	bne.n	80015f8 <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001566:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fa1c 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800157e:	f7ff ffaf 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a39      	ldr	r2, [pc, #228]	; (8001670 <HAL_DFSDM_FilterMspInit+0x13c>)
 800158a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800158c:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_DFSDM_FilterMspInit+0x13c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10b      	bne.n	80015ac <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001594:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_DFSDM_FilterMspInit+0x140>)
 8001596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001598:	4a36      	ldr	r2, [pc, #216]	; (8001674 <HAL_DFSDM_FilterMspInit+0x140>)
 800159a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159e:	6613      	str	r3, [r2, #96]	; 0x60
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_DFSDM_FilterMspInit+0x140>)
 80015a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_DFSDM_FilterMspInit+0x140>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_DFSDM_FilterMspInit+0x140>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_DFSDM_FilterMspInit+0x140>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80015c4:	2384      	movs	r3, #132	; 0x84
 80015c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015dc:	2306      	movs	r3, #6
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e6:	4619      	mov	r1, r3
 80015e8:	4823      	ldr	r0, [pc, #140]	; (8001678 <HAL_DFSDM_FilterMspInit+0x144>)
 80015ea:	f001 f9bb 	bl	8002964 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_DFSDM_FilterMspInit+0x138>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DFSDM_FilterMspInit+0x138>)
 80015f6:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1f      	ldr	r2, [pc, #124]	; (800167c <HAL_DFSDM_FilterMspInit+0x148>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d130      	bne.n	8001664 <HAL_DFSDM_FilterMspInit+0x130>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_DFSDM_FilterMspInit+0x150>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 800162a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001632:	2220      	movs	r2, #32
 8001634:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800163c:	4810      	ldr	r0, [pc, #64]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 800163e:	f000 ff1b 	bl	8002478 <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_DFSDM_FilterMspInit+0x118>
    {
      Error_Handler();
 8001648:	f7ff ff4a 	bl	80014e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001664:	bf00      	nop
 8001666:	37b0      	adds	r7, #176	; 0xb0
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000f374 	.word	0x2000f374
 8001670:	2000f370 	.word	0x2000f370
 8001674:	40021000 	.word	0x40021000
 8001678:	48000800 	.word	0x48000800
 800167c:	40016100 	.word	0x40016100
 8001680:	20000280 	.word	0x20000280
 8001684:	40020044 	.word	0x40020044

08001688 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ac      	sub	sp, #176	; 0xb0
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2288      	movs	r2, #136	; 0x88
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 f855 	bl	8007758 <memset>
  if(DFSDM1_Init == 0)
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d14a      	bne.n	800174c <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80016b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 f972 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80016d2:	f7ff ff05 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80016de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10b      	bne.n	8001700 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80016ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80016ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f2:	6613      	str	r3, [r2, #96]	; 0x60
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80016f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_DFSDM_ChannelMspInit+0xd4>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8001718:	2384      	movs	r3, #132	; 0x84
 800171a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001730:	2306      	movs	r3, #6
 8001732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800173a:	4619      	mov	r1, r3
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800173e:	f001 f911 	bl	8002964 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a02      	ldr	r2, [pc, #8]	; (8001754 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800174a:	6013      	str	r3, [r2, #0]
  }

}
 800174c:	bf00      	nop
 800174e:	37b0      	adds	r7, #176	; 0xb0
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000f374 	.word	0x2000f374
 8001758:	2000f370 	.word	0x2000f370
 800175c:	40021000 	.word	0x40021000
 8001760:	48000800 	.word	0x48000800

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0ac      	sub	sp, #176	; 0xb0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2288      	movs	r2, #136	; 0x88
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f005 ffe7 	bl	8007758 <memset>
  if(huart->Instance==USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <HAL_UART_MspInit+0xc0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d143      	bne.n	800181c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001794:	2302      	movs	r3, #2
 8001796:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001798:	2300      	movs	r3, #0
 800179a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 f905 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017ac:	f7ff fe98 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_UART_MspInit+0xc4>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_UART_MspInit+0xc4>)
 80017b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ba:	6593      	str	r3, [r2, #88]	; 0x58
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_UART_MspInit+0xc4>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_UART_MspInit+0xc4>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_UART_MspInit+0xc4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_UART_MspInit+0xc4>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017e0:	230c      	movs	r3, #12
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f8:	2307      	movs	r3, #7
 80017fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f001 f8ac 	bl	8002964 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2026      	movs	r0, #38	; 0x26
 8001812:	f000 faaa 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001816:	2026      	movs	r0, #38	; 0x26
 8001818:	f000 fac3 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	37b0      	adds	r7, #176	; 0xb0
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004400 	.word	0x40004400
 8001828:	40021000 	.word	0x40021000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f958 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel4_IRQHandler+0x10>)
 8001886:	f000 ff8e 	bl	80027a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000280 	.word	0x20000280

08001894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <USART2_IRQHandler+0x10>)
 800189a:	f002 fe1d 	bl	80044d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002c8 	.word	0x200002c8

080018a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_kill>:

int _kill(int pid, int sig)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c2:	f005 ff9b 	bl	80077fc <__errno>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2216      	movs	r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
  return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_exit>:

void _exit (int status)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffe7 	bl	80018b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ea:	e7fe      	b.n	80018ea <_exit+0x12>

080018ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00a      	b.n	8001914 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018fe:	f3af 8000 	nop.w
 8001902:	4601      	mov	r1, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	b2ca      	uxtb	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf0      	blt.n	80018fe <_read+0x12>
  }

  return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f005 ff1c 	bl	80077fc <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	2000f378 	.word	0x2000f378
 80019f8:	2000f4f0 	.word	0x2000f4f0

080019fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a24:	f7ff ffea 	bl	80019fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	; (8001a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <LoopForever+0xe>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	; (8001a6c <LoopForever+0x16>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f005 fedb 	bl	8007808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a52:	f7ff fa27 	bl	8000ea4 <main>

08001a56 <LoopForever>:

LoopForever:
    b LoopForever
 8001a56:	e7fe      	b.n	8001a56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a64:	0801d464 	.word	0x0801d464
  ldr r2, =_sbss
 8001a68:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a6c:	2000f4f0 	.word	0x2000f4f0

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_Init+0x3c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_Init+0x3c>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f000 f962 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 f80f 	bl	8001ab4 <HAL_InitTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	e001      	b.n	8001aa6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa2:	f7ff fd23 	bl	80014ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_InitTick+0x6c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d023      	beq.n	8001b10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_InitTick+0x70>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_InitTick+0x6c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f96d 	bl	8001dbe <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10f      	bne.n	8001b0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d809      	bhi.n	8001b04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af0:	2200      	movs	r2, #0
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f000 f937 	bl	8001d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_InitTick+0x74>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e004      	b.n	8001b14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	e001      	b.n	8001b14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	20000004 	.word	0x20000004
 8001b28:	20000008 	.word	0x20000008

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	2000f37c 	.word	0x2000f37c

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000f37c 	.word	0x2000f37c

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff ffee 	bl	8001b54 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b92:	bf00      	nop
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000000c 	.word	0x2000000c

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0ac      	b.n	8001f44 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 faa0 	bl	8002334 <DFSDM_GetChannelFromInstance>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <HAL_DFSDM_ChannelInit+0x174>)
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e09f      	b.n	8001f44 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fc3f 	bl	8001688 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_DFSDM_ChannelInit+0x178>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <HAL_DFSDM_ChannelInit+0x178>)
 8001e12:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001e14:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <HAL_DFSDM_ChannelInit+0x178>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d125      	bne.n	8001e68 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e26:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4948      	ldr	r1, [pc, #288]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e3c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001e40:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001e4a:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	493f      	ldr	r1, [pc, #252]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e66:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001e76:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e86:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e8c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 020f 	bic.w	r2, r2, #15
 8001ea4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ecc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f002 0207 	and.w	r2, r2, #7
 8001ef8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f24:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f9fe 	bl	8002334 <DFSDM_GetChannelFromInstance>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4904      	ldr	r1, [pc, #16]	; (8001f4c <HAL_DFSDM_ChannelInit+0x174>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000f384 	.word	0x2000f384
 8001f50:	2000f380 	.word	0x2000f380
 8001f54:	40016000 	.word	0x40016000

08001f58 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0ca      	b.n	8002100 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a66      	ldr	r2, [pc, #408]	; (8002108 <HAL_DFSDM_FilterInit+0x1b0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d109      	bne.n	8001f88 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d003      	beq.n	8001f84 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0bb      	b.n	8002100 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fac7 	bl	8001534 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001fb4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7a1b      	ldrb	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d108      	bne.n	8001fd0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e007      	b.n	8001fe0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001fde:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7a5b      	ldrb	r3, [r3, #9]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d108      	bne.n	8001ffa <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e007      	b.n	800200a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002018:	f023 0308 	bic.w	r3, r3, #8
 800201c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d108      	bne.n	8002038 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7c1b      	ldrb	r3, [r3, #16]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d108      	bne.n	8002052 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0210 	orr.w	r2, r2, #16
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e007      	b.n	8002062 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0210 	bic.w	r2, r2, #16
 8002060:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7c5b      	ldrb	r3, [r3, #17]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e007      	b.n	800208c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0220 	bic.w	r2, r2, #32
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800209a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800209e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6959      	ldr	r1, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020b2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80020ba:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7c1a      	ldrb	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40016100 	.word	0x40016100

0800210c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02e      	beq.n	8002184 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800212c:	2bff      	cmp	r3, #255	; 0xff
 800212e:	d029      	beq.n	8002184 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e00a      	b.n	800217c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
 8002182:	e001      	b.n	8002188 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
 80021b8:	e064      	b.n	8002284 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021c8:	d002      	beq.n	80021d0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	e059      	b.n	8002284 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10e      	bne.n	80021f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d002      	beq.n	80021f6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
 80021f4:	e046      	b.n	8002284 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10b      	bne.n	8002216 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002202:	2b00      	cmp	r3, #0
 8002204:	d107      	bne.n	8002216 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800220c:	2b20      	cmp	r3, #32
 800220e:	d102      	bne.n	8002216 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
 8002214:	e036      	b.n	8002284 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d004      	beq.n	800222a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002226:	2b03      	cmp	r3, #3
 8002228:	d12a      	bne.n	8002280 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002240:	2b20      	cmp	r3, #32
 8002242:	d101      	bne.n	8002248 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002246:	e000      	b.n	800224a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002248:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	331c      	adds	r3, #28
 800225a:	4619      	mov	r1, r3
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f000 f9c2 	bl	80025e8 <HAL_DMA_Start_IT>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	22ff      	movs	r2, #255	; 0xff
 800226e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002276:	e005      	b.n	8002284 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f8a7 	bl	80023cc <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800227e:	e001      	b.n	8002284 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002284:	7dfb      	ldrb	r3, [r7, #23]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	080022f5 	.word	0x080022f5
 8002294:	08002311 	.word	0x08002311
 8002298:	080022d9 	.word	0x080022d9

0800229c <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ffe2 	bl	80022b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff ffca 	bl	800229c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2203      	movs	r2, #3
 8002322:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff ffcd 	bl	80022c4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e02b      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <DFSDM_GetChannelFromInstance+0x80>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d102      	bne.n	8002358 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e024      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <DFSDM_GetChannelFromInstance+0x84>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d102      	bne.n	8002366 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002360:	2302      	movs	r3, #2
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e01d      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <DFSDM_GetChannelFromInstance+0x88>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d102      	bne.n	8002374 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800236e:	2304      	movs	r3, #4
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e016      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d102      	bne.n	8002382 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800237c:	2305      	movs	r3, #5
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e00f      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <DFSDM_GetChannelFromInstance+0x90>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d102      	bne.n	8002390 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800238a:	2306      	movs	r3, #6
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e008      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <DFSDM_GetChannelFromInstance+0x94>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002398:	2307      	movs	r3, #7
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e001      	b.n	80023a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800239e:	2303      	movs	r3, #3
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40016000 	.word	0x40016000
 80023b4:	40016020 	.word	0x40016020
 80023b8:	40016040 	.word	0x40016040
 80023bc:	40016080 	.word	0x40016080
 80023c0:	400160a0 	.word	0x400160a0
 80023c4:	400160c0 	.word	0x400160c0
 80023c8:	400160e0 	.word	0x400160e0

080023cc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d108      	bne.n	80023ee <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e033      	b.n	8002456 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800240c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002424:	2b03      	cmp	r3, #3
 8002426:	d116      	bne.n	8002456 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0202 	orr.w	r2, r2, #2
 800243e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <DFSDM_RegConvStart+0x84>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	e000      	b.n	8002452 <DFSDM_RegConvStart+0x86>
 8002450:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <DFSDM_RegConvStart+0x98>
 8002460:	2202      	movs	r2, #2
 8002462:	e000      	b.n	8002466 <DFSDM_RegConvStart+0x9a>
 8002464:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e098      	b.n	80025bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_DMA_Init+0x150>)
 8002492:	429a      	cmp	r2, r3
 8002494:	d80f      	bhi.n	80024b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_DMA_Init+0x154>)
 800249e:	4413      	add	r3, r2
 80024a0:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <HAL_DMA_Init+0x158>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	009a      	lsls	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_DMA_Init+0x15c>)
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
 80024b4:	e00e      	b.n	80024d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_DMA_Init+0x160>)
 80024be:	4413      	add	r3, r2
 80024c0:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <HAL_DMA_Init+0x158>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	009a      	lsls	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a42      	ldr	r2, [pc, #264]	; (80025dc <HAL_DMA_Init+0x164>)
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800252e:	d039      	beq.n	80025a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <HAL_DMA_Init+0x15c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d11a      	bne.n	8002570 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_DMA_Init+0x168>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f003 031c 	and.w	r3, r3, #28
 8002546:	210f      	movs	r1, #15
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	4924      	ldr	r1, [pc, #144]	; (80025e0 <HAL_DMA_Init+0x168>)
 8002550:	4013      	ands	r3, r2
 8002552:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_DMA_Init+0x168>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f003 031c 	and.w	r3, r3, #28
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	491d      	ldr	r1, [pc, #116]	; (80025e0 <HAL_DMA_Init+0x168>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
 800256e:	e019      	b.n	80025a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_DMA_Init+0x16c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f003 031c 	and.w	r3, r3, #28
 800257c:	210f      	movs	r1, #15
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	4917      	ldr	r1, [pc, #92]	; (80025e4 <HAL_DMA_Init+0x16c>)
 8002586:	4013      	ands	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_DMA_Init+0x16c>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f003 031c 	and.w	r3, r3, #28
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	4911      	ldr	r1, [pc, #68]	; (80025e4 <HAL_DMA_Init+0x16c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40020407 	.word	0x40020407
 80025cc:	bffdfff8 	.word	0xbffdfff8
 80025d0:	cccccccd 	.word	0xcccccccd
 80025d4:	40020000 	.word	0x40020000
 80025d8:	bffdfbf8 	.word	0xbffdfbf8
 80025dc:	40020400 	.word	0x40020400
 80025e0:	400200a8 	.word	0x400200a8
 80025e4:	400204a8 	.word	0x400204a8

080025e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_DMA_Start_IT+0x20>
 8002604:	2302      	movs	r3, #2
 8002606:	e04b      	b.n	80026a0 <HAL_DMA_Start_IT+0xb8>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d13a      	bne.n	8002692 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f95f 	bl	8002904 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 020e 	orr.w	r2, r2, #14
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e00f      	b.n	8002680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 020a 	orr.w	r2, r2, #10
 800267e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e005      	b.n	800269e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d008      	beq.n	80026d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2204      	movs	r2, #4
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f003 021c 	and.w	r2, r3, #28
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d005      	beq.n	8002748 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2204      	movs	r2, #4
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e029      	b.n	800279c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020e 	bic.w	r2, r2, #14
 8002756:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f003 021c 	and.w	r2, r3, #28
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
    }
  }
  return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f003 031c 	and.w	r3, r3, #28
 80027c6:	2204      	movs	r2, #4
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d026      	beq.n	8002820 <HAL_DMA_IRQHandler+0x7a>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d021      	beq.n	8002820 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0204 	bic.w	r2, r2, #4
 80027f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f003 021c 	and.w	r2, r3, #28
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2104      	movs	r1, #4
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	2b00      	cmp	r3, #0
 8002814:	d071      	beq.n	80028fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800281e:	e06c      	b.n	80028fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f003 031c 	and.w	r3, r3, #28
 8002828:	2202      	movs	r2, #2
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d02e      	beq.n	8002892 <HAL_DMA_IRQHandler+0xec>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d029      	beq.n	8002892 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020a 	bic.w	r2, r2, #10
 800285a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f003 021c 	and.w	r2, r3, #28
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2102      	movs	r1, #2
 8002872:	fa01 f202 	lsl.w	r2, r1, r2
 8002876:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d038      	beq.n	80028fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002890:	e033      	b.n	80028fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 031c 	and.w	r3, r3, #28
 800289a:	2208      	movs	r2, #8
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d02a      	beq.n	80028fc <HAL_DMA_IRQHandler+0x156>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d025      	beq.n	80028fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 020e 	bic.w	r2, r2, #14
 80028be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f003 021c 	and.w	r2, r3, #28
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
}
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 021c 	and.w	r2, r3, #28
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b10      	cmp	r3, #16
 8002934:	d108      	bne.n	8002948 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002946:	e007      	b.n	8002958 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e17f      	b.n	8002c74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8171 	beq.w	8002c6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d005      	beq.n	80029a4 <HAL_GPIO_Init+0x40>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d130      	bne.n	8002a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029da:	2201      	movs	r2, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0201 	and.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d118      	bne.n	8002a44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	6939      	ldr	r1, [r7, #16]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80ac 	beq.w	8002c6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	4a5e      	ldr	r2, [pc, #376]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6613      	str	r3, [r2, #96]	; 0x60
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_GPIO_Init+0x334>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x242>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	; (8002c9c <HAL_GPIO_Init+0x338>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x23e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_GPIO_Init+0x33c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x23a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x340>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x236>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <HAL_GPIO_Init+0x344>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x232>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_GPIO_Init+0x348>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x22e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_GPIO_Init+0x34c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x22a>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e00c      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e00a      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bb8:	4937      	ldr	r1, [pc, #220]	; (8002c98 <HAL_GPIO_Init+0x334>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bea:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f ae78 	bne.w	8002974 <HAL_GPIO_Init+0x10>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	48000800 	.word	0x48000800
 8002ca4:	48000c00 	.word	0x48000c00
 8002ca8:	48001000 	.word	0x48001000
 8002cac:	48001400 	.word	0x48001400
 8002cb0:	48001800 	.word	0x48001800
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40007000 	.word	0x40007000

08002d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d12:	d130      	bne.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d14:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d20:	d038      	beq.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2232      	movs	r2, #50	; 0x32
 8002d38:	fb02 f303 	mul.w	r3, r2, r3
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	3301      	adds	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d48:	e002      	b.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d102      	bne.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f2      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d110      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e00f      	b.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d007      	beq.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d8c:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40007000 	.word	0x40007000
 8002da8:	20000004 	.word	0x20000004
 8002dac:	431bde83 	.word	0x431bde83

08002db0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e3ca      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc2:	4b97      	ldr	r3, [pc, #604]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dcc:	4b94      	ldr	r3, [pc, #592]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80e4 	beq.w	8002fac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_RCC_OscConfig+0x4a>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	f040 808b 	bne.w	8002f08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 8087 	bne.w	8002f08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dfa:	4b89      	ldr	r3, [pc, #548]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x62>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e3a2      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_RCC_OscConfig+0x7c>
 8002e22:	4b7f      	ldr	r3, [pc, #508]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2a:	e005      	b.n	8002e38 <HAL_RCC_OscConfig+0x88>
 8002e2c:	4b7c      	ldr	r3, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d223      	bcs.n	8002e84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fd55 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e383      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e50:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a72      	ldr	r2, [pc, #456]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	496d      	ldr	r1, [pc, #436]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	4968      	ldr	r1, [pc, #416]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
 8002e82:	e025      	b.n	8002ed0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e84:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4960      	ldr	r1, [pc, #384]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	495b      	ldr	r1, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fd15 	bl	80038f0 <RCC_SetFlashLatencyFromMSIRange>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e343      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ed0:	f000 fc4a 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b52      	ldr	r3, [pc, #328]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	4950      	ldr	r1, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_RCC_OscConfig+0x278>)
 8002eee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ef0:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fddd 	bl	8001ab4 <HAL_InitTick>
 8002efa:	4603      	mov	r3, r0
 8002efc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d052      	beq.n	8002faa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	e327      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d032      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f10:	4b43      	ldr	r3, [pc, #268]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a42      	ldr	r2, [pc, #264]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fe1a 	bl	8001b54 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f24:	f7fe fe16 	bl	8001b54 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e310      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a36      	ldr	r2, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4931      	ldr	r1, [pc, #196]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	492c      	ldr	r1, [pc, #176]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e01a      	b.n	8002fac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fde7 	bl	8001b54 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fde3 	bl	8001b54 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e2dd      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x1da>
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002faa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d074      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x21a>
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d10e      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d064      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2f0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d160      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e2ba      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x24a>
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e026      	b.n	8003048 <HAL_RCC_OscConfig+0x298>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003002:	d115      	bne.n	8003030 <HAL_RCC_OscConfig+0x280>
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a05      	ldr	r2, [pc, #20]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 800300a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a02      	ldr	r2, [pc, #8]	; (8003020 <HAL_RCC_OscConfig+0x270>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x298>
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	080098ac 	.word	0x080098ac
 8003028:	20000004 	.word	0x20000004
 800302c:	20000008 	.word	0x20000008
 8003030:	4ba0      	ldr	r3, [pc, #640]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a9f      	ldr	r2, [pc, #636]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b9d      	ldr	r3, [pc, #628]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a9c      	ldr	r2, [pc, #624]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fd80 	bl	8001b54 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe fd7c 	bl	8001b54 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e276      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306a:	4b92      	ldr	r3, [pc, #584]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x2a8>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe fd6c 	bl	8001b54 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe fd68 	bl	8001b54 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e262      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003092:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x2d0>
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d060      	beq.n	8003170 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_OscConfig+0x310>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d116      	bne.n	80030ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c0:	4b7c      	ldr	r3, [pc, #496]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_OscConfig+0x328>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e23f      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	4973      	ldr	r1, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ec:	e040      	b.n	8003170 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d023      	beq.n	800313e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f6:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6e      	ldr	r2, [pc, #440]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fd27 	bl	8001b54 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fd23 	bl	8001b54 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e21d      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b62      	ldr	r3, [pc, #392]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	495f      	ldr	r1, [pc, #380]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e018      	b.n	8003170 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe fd03 	bl	8001b54 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe fcff 	bl	8001b54 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1f9      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03c      	beq.n	80031f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01c      	beq.n	80031be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003184:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318a:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fe fcde 	bl	8001b54 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7fe fcda 	bl	8001b54 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1d4      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ae:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ef      	beq.n	800319c <HAL_RCC_OscConfig+0x3ec>
 80031bc:	e01b      	b.n	80031f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c4:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fcc1 	bl	8001b54 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe fcbd 	bl	8001b54 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1b7      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80031ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ef      	bne.n	80031d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80a6 	beq.w	8003350 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003208:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_RCC_OscConfig+0x508>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d118      	bne.n	800326e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_RCC_OscConfig+0x508>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_RCC_OscConfig+0x508>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003248:	f7fe fc84 	bl	8001b54 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fe fc80 	bl	8001b54 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e17a      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_RCC_OscConfig+0x508>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <HAL_RCC_OscConfig+0x4d8>
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003286:	e029      	b.n	80032dc <HAL_RCC_OscConfig+0x52c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d115      	bne.n	80032bc <HAL_RCC_OscConfig+0x50c>
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	4a03      	ldr	r2, [pc, #12]	; (80032b4 <HAL_RCC_OscConfig+0x504>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b0:	e014      	b.n	80032dc <HAL_RCC_OscConfig+0x52c>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
 80032bc:	4b9c      	ldr	r3, [pc, #624]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a9b      	ldr	r2, [pc, #620]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032cc:	4b98      	ldr	r3, [pc, #608]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a97      	ldr	r2, [pc, #604]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d016      	beq.n	8003312 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fc36 	bl	8001b54 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe fc32 	bl	8001b54 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e12a      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003302:	4b8b      	ldr	r3, [pc, #556]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ed      	beq.n	80032ec <HAL_RCC_OscConfig+0x53c>
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe fc1f 	bl	8001b54 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fc1b 	bl	8001b54 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e113      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003330:	4b7f      	ldr	r3, [pc, #508]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ed      	bne.n	800331a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b7a      	ldr	r3, [pc, #488]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	4a79      	ldr	r2, [pc, #484]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80fe 	beq.w	8003556 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	2b02      	cmp	r3, #2
 8003360:	f040 80d0 	bne.w	8003504 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003364:	4b72      	ldr	r3, [pc, #456]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	429a      	cmp	r2, r3
 8003376:	d130      	bne.n	80033da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	3b01      	subs	r3, #1
 8003384:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d127      	bne.n	80033da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d11f      	bne.n	80033da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a4:	2a07      	cmp	r2, #7
 80033a6:	bf14      	ite	ne
 80033a8:	2201      	movne	r2, #1
 80033aa:	2200      	moveq	r2, #0
 80033ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d113      	bne.n	80033da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d109      	bne.n	80033da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d06e      	beq.n	80034b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d069      	beq.n	80034b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0ad      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003408:	f7fe fba4 	bl	8001b54 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fba0 	bl	8001b54 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e09a      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003422:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	4b40      	ldr	r3, [pc, #256]	; (8003534 <HAL_RCC_OscConfig+0x784>)
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800343e:	3a01      	subs	r2, #1
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003448:	0212      	lsls	r2, r2, #8
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0552      	lsls	r2, r2, #21
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800345c:	0852      	lsrs	r2, r2, #1
 800345e:	3a01      	subs	r2, #1
 8003460:	0652      	lsls	r2, r2, #25
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003468:	0912      	lsrs	r2, r2, #4
 800346a:	0452      	lsls	r2, r2, #17
 800346c:	430a      	orrs	r2, r1
 800346e:	4930      	ldr	r1, [pc, #192]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003470:	4313      	orrs	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003474:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003480:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800348c:	f7fe fb62 	bl	8001b54 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fb5e 	bl	8001b54 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e058      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b2:	e050      	b.n	8003556 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e04f      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d148      	bne.n	8003556 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034dc:	f7fe fb3a 	bl	8001b54 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fb36 	bl	8001b54 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e030      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x734>
 8003502:	e028      	b.n	8003556 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d023      	beq.n	8003552 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_RCC_OscConfig+0x780>)
 8003510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fe fb1d 	bl	8001b54 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351c:	e00c      	b.n	8003538 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7fe fb19 	bl	8001b54 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d905      	bls.n	8003538 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e013      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
 8003530:	40021000 	.word	0x40021000
 8003534:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_OscConfig+0x7b0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ec      	bne.n	800351e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_OscConfig+0x7b0>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4905      	ldr	r1, [pc, #20]	; (8003560 <HAL_RCC_OscConfig+0x7b0>)
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x7b4>)
 800354c:	4013      	ands	r3, r2
 800354e:	60cb      	str	r3, [r1, #12]
 8003550:	e001      	b.n	8003556 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	feeefffc 	.word	0xfeeefffc

08003568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0e7      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d910      	bls.n	80035ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4970      	ldr	r1, [pc, #448]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0cf      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d908      	bls.n	80035da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4960      	ldr	r1, [pc, #384]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d04c      	beq.n	8003680 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	4b5a      	ldr	r3, [pc, #360]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d121      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0a6      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e09a      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08e      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e086      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b46      	ldr	r3, [pc, #280]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4943      	ldr	r1, [pc, #268]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fe fa80 	bl	8001b54 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fe fa7c 	bl	8001b54 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e06e      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003698:	429a      	cmp	r2, r3
 800369a:	d208      	bcs.n	80036ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	492b      	ldr	r1, [pc, #172]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d210      	bcs.n	80036de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 0207 	bic.w	r2, r3, #7
 80036c4:	4923      	ldr	r1, [pc, #140]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e036      	b.n	800374c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4918      	ldr	r1, [pc, #96]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4910      	ldr	r1, [pc, #64]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800371c:	f000 f824 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	490b      	ldr	r1, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x1f4>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1fc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe f9b7 	bl	8001ab4 <HAL_InitTick>
 8003746:	4603      	mov	r3, r0
 8003748:	72fb      	strb	r3, [r7, #11]

  return status;
 800374a:	7afb      	ldrb	r3, [r7, #11]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	080098ac 	.word	0x080098ac
 8003760:	20000004 	.word	0x20000004
 8003764:	20000008 	.word	0x20000008

08003768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003780:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x34>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d121      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d11e      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e005      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037c4:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_RCC_GetSysClockFreq+0x110>)
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e004      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037ec:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_RCC_GetSysClockFreq+0x114>)
 80037ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d134      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d003      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0xa6>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d003      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0xac>
 800380c:	e005      	b.n	800381a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800380e:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_RCC_GetSysClockFreq+0x110>)
 8003810:	617b      	str	r3, [r7, #20]
      break;
 8003812:	e005      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_GetSysClockFreq+0x114>)
 8003816:	617b      	str	r3, [r7, #20]
      break;
 8003818:	e002      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	617b      	str	r3, [r7, #20]
      break;
 800381e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	3301      	adds	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	fb03 f202 	mul.w	r2, r3, r2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RCC_GetSysClockFreq+0x108>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	0e5b      	lsrs	r3, r3, #25
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	3301      	adds	r3, #1
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003860:	69bb      	ldr	r3, [r7, #24]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	080098c4 	.word	0x080098c4
 8003878:	00f42400 	.word	0x00f42400
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000004 	.word	0x20000004

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800389c:	f7ff fff0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	080098bc 	.word	0x080098bc

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038c8:	f7ff ffda 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0adb      	lsrs	r3, r3, #11
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4904      	ldr	r1, [pc, #16]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	080098bc 	.word	0x080098bc

080038f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003908:	f7ff f9ee 	bl	8002ce8 <HAL_PWREx_GetVoltageRange>
 800390c:	6178      	str	r0, [r7, #20]
 800390e:	e014      	b.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003928:	f7ff f9de 	bl	8002ce8 <HAL_PWREx_GetVoltageRange>
 800392c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d10b      	bne.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d919      	bls.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2ba0      	cmp	r3, #160	; 0xa0
 800394c:	d902      	bls.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800394e:	2302      	movs	r3, #2
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e013      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e010      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d902      	bls.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003960:	2303      	movs	r3, #3
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e00a      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d102      	bne.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800396c:	2302      	movs	r3, #2
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e004      	b.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b70      	cmp	r3, #112	; 0x70
 8003976:	d101      	bne.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 0207 	bic.w	r2, r3, #7
 8003984:	4909      	ldr	r1, [pc, #36]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40022000 	.word	0x40022000

080039b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039b8:	2300      	movs	r3, #0
 80039ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039bc:	2300      	movs	r3, #0
 80039be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d041      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039d4:	d02a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039da:	d824      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e0:	d008      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e6:	d81e      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f0:	d010      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039f2:	e018      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f4:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4a85      	ldr	r2, [pc, #532]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a00:	e015      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fabb 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a12:	e00c      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3320      	adds	r3, #32
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fba6 	bl	800416c <RCCEx_PLLSAI2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a24:	e003      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	74fb      	strb	r3, [r7, #19]
      break;
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a34:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a42:	4973      	ldr	r1, [pc, #460]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a4a:	e001      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d041      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a64:	d02a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a6a:	d824      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a70:	d008      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a76:	d81e      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a82:	e018      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a84:	4b62      	ldr	r3, [pc, #392]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a90:	e015      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa73 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa2:	e00c      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3320      	adds	r3, #32
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fb5e 	bl	800416c <RCCEx_PLLSAI2_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aba:	e000      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ac4:	4b52      	ldr	r3, [pc, #328]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad2:	494f      	ldr	r1, [pc, #316]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ada:	e001      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a0 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6593      	str	r3, [r2, #88]	; 0x58
 8003b14:	4b3e      	ldr	r3, [pc, #248]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b24:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3a      	ldr	r2, [pc, #232]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b30:	f7fe f810 	bl	8001b54 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fe f80c 	bl	8001b54 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	74fb      	strb	r3, [r7, #19]
        break;
 8003b4a:	e005      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d15c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01f      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d019      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd ffcb 	bl	8001b54 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc0:	e00b      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd ffc7 	bl	8001b54 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d902      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bd8:	e006      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ec      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfe:	4904      	ldr	r1, [pc, #16]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c06:	e009      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
 8003c0c:	e006      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1c:	7c7b      	ldrb	r3, [r7, #17]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	4a9d      	ldr	r2, [pc, #628]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3a:	4b98      	ldr	r3, [pc, #608]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f023 0203 	bic.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	4994      	ldr	r1, [pc, #592]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 020c 	bic.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	498c      	ldr	r1, [pc, #560]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c7e:	4b87      	ldr	r3, [pc, #540]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4983      	ldr	r1, [pc, #524]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	497b      	ldr	r1, [pc, #492]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	4972      	ldr	r1, [pc, #456]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	496a      	ldr	r1, [pc, #424]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d06:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	4961      	ldr	r1, [pc, #388]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d28:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	4959      	ldr	r1, [pc, #356]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4a:	4b54      	ldr	r3, [pc, #336]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	4950      	ldr	r1, [pc, #320]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	4948      	ldr	r1, [pc, #288]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	493f      	ldr	r1, [pc, #252]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d028      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db0:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dce:	d106      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dda:	60d3      	str	r3, [r2, #12]
 8003ddc:	e011      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f8c8 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	491f      	ldr	r1, [pc, #124]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e38:	60d3      	str	r3, [r2, #12]
 8003e3a:	e011      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f899 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02b      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a02      	ldr	r2, [pc, #8]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e014      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f867 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	4928      	ldr	r1, [pc, #160]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eee:	d10d      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f844 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	74bb      	strb	r3, [r7, #18]
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3320      	adds	r3, #32
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f925 	bl	800416c <RCCEx_PLLSAI2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4a:	490d      	ldr	r1, [pc, #52]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6e:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000

08003f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f92:	4b75      	ldr	r3, [pc, #468]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f9e:	4b72      	ldr	r3, [pc, #456]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10d      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fb6:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d047      	beq.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e044      	b.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d018      	beq.n	800400a <RCCEx_PLLSAI1_Config+0x86>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d825      	bhi.n	8004028 <RCCEx_PLLSAI1_Config+0xa4>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d002      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x62>
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d009      	beq.n	8003ff8 <RCCEx_PLLSAI1_Config+0x74>
 8003fe4:	e020      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe6:	4b60      	ldr	r3, [pc, #384]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11d      	bne.n	800402e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e01a      	b.n	800402e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e013      	b.n	8004032 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400a:	4b57      	ldr	r3, [pc, #348]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004016:	4b54      	ldr	r3, [pc, #336]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004026:	e006      	b.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e004      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004036:	bf00      	nop
    }

    if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800403e:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	430b      	orrs	r3, r1
 8004054:	4944      	ldr	r1, [pc, #272]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d17d      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a40      	ldr	r2, [pc, #256]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd fd72 	bl	8001b54 <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004072:	e009      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004074:	f7fd fd6e 	bl	8001b54 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	73fb      	strb	r3, [r7, #15]
        break;
 8004086:	e005      	b.n	8004094 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004088:	4b37      	ldr	r3, [pc, #220]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ef      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d160      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d111      	bne.n	80040c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a0:	4b31      	ldr	r3, [pc, #196]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	0912      	lsrs	r2, r2, #4
 80040b8:	0452      	lsls	r2, r2, #17
 80040ba:	430a      	orrs	r2, r1
 80040bc:	492a      	ldr	r1, [pc, #168]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
 80040c2:	e027      	b.n	8004114 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d112      	bne.n	80040f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6892      	ldr	r2, [r2, #8]
 80040da:	0211      	lsls	r1, r2, #8
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6912      	ldr	r2, [r2, #16]
 80040e0:	0852      	lsrs	r2, r2, #1
 80040e2:	3a01      	subs	r2, #1
 80040e4:	0552      	lsls	r2, r2, #21
 80040e6:	430a      	orrs	r2, r1
 80040e8:	491f      	ldr	r1, [pc, #124]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	610b      	str	r3, [r1, #16]
 80040ee:	e011      	b.n	8004114 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	0211      	lsls	r1, r2, #8
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6952      	ldr	r2, [r2, #20]
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	430a      	orrs	r2, r1
 800410e:	4916      	ldr	r1, [pc, #88]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800411e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fd fd18 	bl	8001b54 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004128:	f7fd fd14 	bl	8001b54 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
          break;
 800413a:	e005      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000

0800416c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d018      	beq.n	80041b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0203 	and.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d10d      	bne.n	80041b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
       ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800419e:	4b61      	ldr	r3, [pc, #388]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
       ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d047      	beq.n	8004242 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e044      	b.n	8004242 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d018      	beq.n	80041f2 <RCCEx_PLLSAI2_Config+0x86>
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d825      	bhi.n	8004210 <RCCEx_PLLSAI2_Config+0xa4>
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <RCCEx_PLLSAI2_Config+0x62>
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d009      	beq.n	80041e0 <RCCEx_PLLSAI2_Config+0x74>
 80041cc:	e020      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ce:	4b55      	ldr	r3, [pc, #340]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e01a      	b.n	8004216 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d116      	bne.n	800421a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f0:	e013      	b.n	800421a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f2:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10f      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fe:	4b49      	ldr	r3, [pc, #292]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800420e:	e006      	b.n	800421e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e004      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800421e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004226:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	430b      	orrs	r3, r1
 800423c:	4939      	ldr	r1, [pc, #228]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d167      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a35      	ldr	r2, [pc, #212]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fd fc7e 	bl	8001b54 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800425a:	e009      	b.n	8004270 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800425c:	f7fd fc7a 	bl	8001b54 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	73fb      	strb	r3, [r7, #15]
        break;
 800426e:	e005      	b.n	800427c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ef      	bne.n	800425c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d14a      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004288:	4b26      	ldr	r3, [pc, #152]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	0912      	lsrs	r2, r2, #4
 80042a0:	0452      	lsls	r2, r2, #17
 80042a2:	430a      	orrs	r2, r1
 80042a4:	491f      	ldr	r1, [pc, #124]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	614b      	str	r3, [r1, #20]
 80042aa:	e011      	b.n	80042d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	0211      	lsls	r1, r2, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6912      	ldr	r2, [r2, #16]
 80042c2:	0852      	lsrs	r2, r2, #1
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0652      	lsls	r2, r2, #25
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4916      	ldr	r1, [pc, #88]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a13      	ldr	r2, [pc, #76]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd fc3a 	bl	8001b54 <HAL_GetTick>
 80042e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e2:	e009      	b.n	80042f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042e4:	f7fd fc36 	bl	8001b54 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
          break;
 80042f6:	e005      	b.n	8004304 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4904      	ldr	r1, [pc, #16]	; (8004324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e040      	b.n	80043bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd fa0a 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fe74 	bl	800505c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fbb9 	bl	8004aec <UART_SetConfig>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e01b      	b.n	80043bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fef3 	bl	80051a0 <UART_CheckIdleState>
 80043ba:	4603      	mov	r3, r0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d178      	bne.n	80044ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_UART_Transmit+0x24>
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e071      	b.n	80044d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2221      	movs	r2, #33	; 0x21
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fa:	f7fd fbab 	bl	8001b54 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004418:	d108      	bne.n	800442c <HAL_UART_Transmit+0x68>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e003      	b.n	8004434 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004434:	e030      	b.n	8004498 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 ff55 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e03c      	b.n	80044d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004468:	b292      	uxth	r2, r2
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	3302      	adds	r3, #2
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e008      	b.n	8004486 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b292      	uxth	r2, r2
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1c8      	bne.n	8004436 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 ff1e 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e005      	b.n	80044d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b0ba      	sub	sp, #232	; 0xe8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004502:	f640 030f 	movw	r3, #2063	; 0x80f
 8004506:	4013      	ands	r3, r2
 8004508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800450c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d115      	bne.n	8004540 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00f      	beq.n	8004540 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 82ae 	beq.w	8004a92 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
      }
      return;
 800453e:	e2a8      	b.n	8004a92 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8117 	beq.w	8004778 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800454a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004556:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800455a:	4b85      	ldr	r3, [pc, #532]	; (8004770 <HAL_UART_IRQHandler+0x298>)
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 810a 	beq.w	8004778 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d011      	beq.n	8004594 <HAL_UART_IRQHandler+0xbc>
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2201      	movs	r2, #1
 8004582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d011      	beq.n	80045c4 <HAL_UART_IRQHandler+0xec>
 80045a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2202      	movs	r2, #2
 80045b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ba:	f043 0204 	orr.w	r2, r3, #4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d011      	beq.n	80045f4 <HAL_UART_IRQHandler+0x11c>
 80045d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2204      	movs	r2, #4
 80045e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004610:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2208      	movs	r2, #8
 800461e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004626:	f043 0208 	orr.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <HAL_UART_IRQHandler+0x18a>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8214 	beq.w	8004a96 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800467a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d005      	beq.n	80046ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d04f      	beq.n	800475a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fe7f 	bl	80053be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d141      	bne.n	8004752 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3308      	adds	r3, #8
 80046d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1d9      	bne.n	80046ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_UART_IRQHandler+0x29c>)
 8004728:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fff8 	bl	8002724 <HAL_DMA_Abort_IT>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d017      	beq.n	800476a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004744:	4610      	mov	r0, r2
 8004746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00f      	b.n	800476a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9b8 	bl	8004ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e00b      	b.n	800476a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9b4 	bl	8004ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e007      	b.n	800476a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9b0 	bl	8004ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004768:	e195      	b.n	8004a96 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476a:	bf00      	nop
    return;
 800476c:	e193      	b.n	8004a96 <HAL_UART_IRQHandler+0x5be>
 800476e:	bf00      	nop
 8004770:	04000120 	.word	0x04000120
 8004774:	08005487 	.word	0x08005487

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 814e 	bne.w	8004a1e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8147 	beq.w	8004a1e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8140 	beq.w	8004a1e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2210      	movs	r2, #16
 80047a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	f040 80b8 	bne.w	8004926 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8167 	beq.w	8004a9a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d6:	429a      	cmp	r2, r3
 80047d8:	f080 815f 	bcs.w	8004a9a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 8086 	bne.w	8004904 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800480c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004826:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800482e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800483a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1da      	bne.n	80047f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004866:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800486a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800486e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e1      	bne.n	8004842 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e3      	bne.n	800487e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d4:	f023 0310 	bic.w	r3, r3, #16
 80048d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e4      	bne.n	80048c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fed2 	bl	80026a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004916:	b29b      	uxth	r3, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8d8 	bl	8004ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004924:	e0b9      	b.n	8004a9a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004932:	b29b      	uxth	r3, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80ab 	beq.w	8004a9e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80a6 	beq.w	8004a9e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800497a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e4      	bne.n	8004952 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	623b      	str	r3, [r7, #32]
   return(result);
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ac:	633a      	str	r2, [r7, #48]	; 0x30
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e3      	bne.n	8004988 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f023 0310 	bic.w	r3, r3, #16
 80049e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	617b      	str	r3, [r7, #20]
   return(result);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e4      	bne.n	80049d4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f85c 	bl	8004ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a1c:	e03f      	b.n	8004a9e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <HAL_UART_IRQHandler+0x570>
 8004a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fd60 	bl	8005506 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a46:	e02d      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00e      	beq.n	8004a72 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01c      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
    }
    return;
 8004a70:	e017      	b.n	8004aa2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d012      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fd11 	bl	80054b2 <UART_EndTransmit_IT>
    return;
 8004a90:	e008      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004a92:	bf00      	nop
 8004a94:	e006      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004a96:	bf00      	nop
 8004a98:	e004      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004aa2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004aa4:	37e8      	adds	r7, #232	; 0xe8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop

08004aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af0:	b08a      	sub	sp, #40	; 0x28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4ba4      	ldr	r3, [pc, #656]	; (8004dac <UART_SetConfig+0x2c0>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a99      	ldr	r2, [pc, #612]	; (8004db0 <UART_SetConfig+0x2c4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4313      	orrs	r3, r2
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a90      	ldr	r2, [pc, #576]	; (8004db4 <UART_SetConfig+0x2c8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d126      	bne.n	8004bc4 <UART_SetConfig+0xd8>
 8004b76:	4b90      	ldr	r3, [pc, #576]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d81b      	bhi.n	8004bbc <UART_SetConfig+0xd0>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0xa0>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004bad 	.word	0x08004bad
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e116      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e112      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e10e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e10a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e106      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <UART_SetConfig+0x2d0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d138      	bne.n	8004c40 <UART_SetConfig+0x154>
 8004bce:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b0c      	cmp	r3, #12
 8004bda:	d82d      	bhi.n	8004c38 <UART_SetConfig+0x14c>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0xf8>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004c39 	.word	0x08004c39
 8004bf0:	08004c39 	.word	0x08004c39
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c39 	.word	0x08004c39
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c31 	.word	0x08004c31
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e0d8      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e0d4      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e0d0      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e0cc      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e0c8      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5e      	ldr	r2, [pc, #376]	; (8004dc0 <UART_SetConfig+0x2d4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d125      	bne.n	8004c96 <UART_SetConfig+0x1aa>
 8004c4a:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c54:	2b30      	cmp	r3, #48	; 0x30
 8004c56:	d016      	beq.n	8004c86 <UART_SetConfig+0x19a>
 8004c58:	2b30      	cmp	r3, #48	; 0x30
 8004c5a:	d818      	bhi.n	8004c8e <UART_SetConfig+0x1a2>
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d00a      	beq.n	8004c76 <UART_SetConfig+0x18a>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d814      	bhi.n	8004c8e <UART_SetConfig+0x1a2>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <UART_SetConfig+0x182>
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d008      	beq.n	8004c7e <UART_SetConfig+0x192>
 8004c6c:	e00f      	b.n	8004c8e <UART_SetConfig+0x1a2>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c74:	e0ad      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c76:	2302      	movs	r3, #2
 8004c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7c:	e0a9      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c7e:	2304      	movs	r3, #4
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c84:	e0a5      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c86:	2308      	movs	r3, #8
 8004c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8c:	e0a1      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c8e:	2310      	movs	r3, #16
 8004c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c94:	e09d      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <UART_SetConfig+0x2d8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d125      	bne.n	8004cec <UART_SetConfig+0x200>
 8004ca0:	4b45      	ldr	r3, [pc, #276]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004caa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cac:	d016      	beq.n	8004cdc <UART_SetConfig+0x1f0>
 8004cae:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb0:	d818      	bhi.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d00a      	beq.n	8004ccc <UART_SetConfig+0x1e0>
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d814      	bhi.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <UART_SetConfig+0x1d8>
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d008      	beq.n	8004cd4 <UART_SetConfig+0x1e8>
 8004cc2:	e00f      	b.n	8004ce4 <UART_SetConfig+0x1f8>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e082      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e07e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e07a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e076      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e072      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a35      	ldr	r2, [pc, #212]	; (8004dc8 <UART_SetConfig+0x2dc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d12a      	bne.n	8004d4c <UART_SetConfig+0x260>
 8004cf6:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d04:	d01a      	beq.n	8004d3c <UART_SetConfig+0x250>
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0a:	d81b      	bhi.n	8004d44 <UART_SetConfig+0x258>
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d00c      	beq.n	8004d2c <UART_SetConfig+0x240>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d815      	bhi.n	8004d44 <UART_SetConfig+0x258>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <UART_SetConfig+0x238>
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d008      	beq.n	8004d34 <UART_SetConfig+0x248>
 8004d22:	e00f      	b.n	8004d44 <UART_SetConfig+0x258>
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e052      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e04e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d34:	2304      	movs	r3, #4
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3a:	e04a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d42:	e046      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d44:	2310      	movs	r3, #16
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e042      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <UART_SetConfig+0x2c4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d13a      	bne.n	8004dcc <UART_SetConfig+0x2e0>
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <UART_SetConfig+0x2cc>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d64:	d01a      	beq.n	8004d9c <UART_SetConfig+0x2b0>
 8004d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d6a:	d81b      	bhi.n	8004da4 <UART_SetConfig+0x2b8>
 8004d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d70:	d00c      	beq.n	8004d8c <UART_SetConfig+0x2a0>
 8004d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d76:	d815      	bhi.n	8004da4 <UART_SetConfig+0x2b8>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <UART_SetConfig+0x298>
 8004d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d80:	d008      	beq.n	8004d94 <UART_SetConfig+0x2a8>
 8004d82:	e00f      	b.n	8004da4 <UART_SetConfig+0x2b8>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e022      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e01e      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e01a      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e016      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e012      	b.n	8004dd2 <UART_SetConfig+0x2e6>
 8004dac:	efff69f3 	.word	0xefff69f3
 8004db0:	40008000 	.word	0x40008000
 8004db4:	40013800 	.word	0x40013800
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	40004800 	.word	0x40004800
 8004dc4:	40004c00 	.word	0x40004c00
 8004dc8:	40005000 	.word	0x40005000
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a9f      	ldr	r2, [pc, #636]	; (8005054 <UART_SetConfig+0x568>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d17a      	bne.n	8004ed2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d824      	bhi.n	8004e2e <UART_SetConfig+0x342>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0x300>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e1f 	.word	0x08004e1f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e2f 	.word	0x08004e2f
 8004e0c:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e10:	f7fe fd42 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8004e14:	61f8      	str	r0, [r7, #28]
        break;
 8004e16:	e010      	b.n	8004e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b8f      	ldr	r3, [pc, #572]	; (8005058 <UART_SetConfig+0x56c>)
 8004e1a:	61fb      	str	r3, [r7, #28]
        break;
 8004e1c:	e00d      	b.n	8004e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fe fca3 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8004e22:	61f8      	str	r0, [r7, #28]
        break;
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	61fb      	str	r3, [r7, #28]
        break;
 8004e2c:	e005      	b.n	8004e3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80fb 	beq.w	8005038 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d305      	bcc.n	8004e5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d903      	bls.n	8004e66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e64:	e0e8      	b.n	8005038 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	461c      	mov	r4, r3
 8004e6c:	4615      	mov	r5, r2
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	022b      	lsls	r3, r5, #8
 8004e78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e7c:	0222      	lsls	r2, r4, #8
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	6849      	ldr	r1, [r1, #4]
 8004e82:	0849      	lsrs	r1, r1, #1
 8004e84:	2000      	movs	r0, #0
 8004e86:	4688      	mov	r8, r1
 8004e88:	4681      	mov	r9, r0
 8004e8a:	eb12 0a08 	adds.w	sl, r2, r8
 8004e8e:	eb43 0b09 	adc.w	fp, r3, r9
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	4659      	mov	r1, fp
 8004ea4:	f7fb fe80 	bl	8000ba8 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb6:	d308      	bcc.n	8004eca <UART_SetConfig+0x3de>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebe:	d204      	bcs.n	8004eca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e0b6      	b.n	8005038 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ed0:	e0b2      	b.n	8005038 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d15e      	bne.n	8004f9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d828      	bhi.n	8004f36 <UART_SetConfig+0x44a>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x400>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f37 	.word	0x08004f37
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f2f 	.word	0x08004f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fe fcc2 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8004f14:	61f8      	str	r0, [r7, #28]
        break;
 8004f16:	e014      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fe fcd4 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b4d      	ldr	r3, [pc, #308]	; (8005058 <UART_SetConfig+0x56c>)
 8004f22:	61fb      	str	r3, [r7, #28]
        break;
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fe fc1f 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8004f2a:	61f8      	str	r0, [r7, #28]
        break;
 8004f2c:	e009      	b.n	8004f42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f32:	61fb      	str	r3, [r7, #28]
        break;
 8004f34:	e005      	b.n	8004f42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d077      	beq.n	8005038 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005a      	lsls	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	441a      	add	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b0f      	cmp	r3, #15
 8004f62:	d916      	bls.n	8004f92 <UART_SetConfig+0x4a6>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6a:	d212      	bcs.n	8004f92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f023 030f 	bic.w	r3, r3, #15
 8004f74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	8afb      	ldrh	r3, [r7, #22]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	8afa      	ldrh	r2, [r7, #22]
 8004f8e:	60da      	str	r2, [r3, #12]
 8004f90:	e052      	b.n	8005038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f98:	e04e      	b.n	8005038 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d827      	bhi.n	8004ff2 <UART_SetConfig+0x506>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x4bc>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	08004ff3 	.word	0x08004ff3
 8004fb8:	08004fe3 	.word	0x08004fe3
 8004fbc:	08004ff3 	.word	0x08004ff3
 8004fc0:	08004ff3 	.word	0x08004ff3
 8004fc4:	08004ff3 	.word	0x08004ff3
 8004fc8:	08004feb 	.word	0x08004feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f7fe fc64 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8004fd0:	61f8      	str	r0, [r7, #28]
        break;
 8004fd2:	e014      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd4:	f7fe fc76 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e010      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <UART_SetConfig+0x56c>)
 8004fde:	61fb      	str	r3, [r7, #28]
        break;
 8004fe0:	e00d      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe2:	f7fe fbc1 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8004fe6:	61f8      	str	r0, [r7, #28]
        break;
 8004fe8:	e009      	b.n	8004ffe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	61fb      	str	r3, [r7, #28]
        break;
 8004ff0:	e005      	b.n	8004ffe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	085a      	lsrs	r2, r3, #1
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	441a      	add	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d909      	bls.n	8005032 <UART_SetConfig+0x546>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d205      	bcs.n	8005032 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e002      	b.n	8005038 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005044:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005048:	4618      	mov	r0, r3
 800504a:	3728      	adds	r7, #40	; 0x28
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005052:	bf00      	nop
 8005054:	40008000 	.word	0x40008000
 8005058:	00f42400 	.word	0x00f42400

0800505c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01a      	beq.n	8005172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515a:	d10a      	bne.n	8005172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b098      	sub	sp, #96	; 0x60
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b0:	f7fc fcd0 	bl	8001b54 <HAL_GetTick>
 80051b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d12e      	bne.n	8005222 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f88c 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d021      	beq.n	8005222 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f2:	653b      	str	r3, [r7, #80]	; 0x50
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e062      	b.n	80052e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d149      	bne.n	80052c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f856 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d03c      	beq.n	80052c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	623b      	str	r3, [r7, #32]
   return(result);
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	633b      	str	r3, [r7, #48]	; 0x30
 800526a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e6      	bne.n	800524a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	60fb      	str	r3, [r7, #12]
   return(result);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800529c:	61fa      	str	r2, [r7, #28]
 800529e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	617b      	str	r3, [r7, #20]
   return(result);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e011      	b.n	80052e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3758      	adds	r7, #88	; 0x58
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005300:	e049      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d045      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530a:	f7fc fc23 	bl	8001b54 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	429a      	cmp	r2, r3
 8005318:	d302      	bcc.n	8005320 <UART_WaitOnFlagUntilTimeout+0x30>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e048      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d031      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d110      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2208      	movs	r2, #8
 8005346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f838 	bl	80053be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2208      	movs	r2, #8
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e029      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	d111      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800537a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f81e 	bl	80053be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d0a6      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053be:	b480      	push	{r7}
 80053c0:	b095      	sub	sp, #84	; 0x54
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	643b      	str	r3, [r7, #64]	; 0x40
 80053e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e6      	bne.n	80053c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3308      	adds	r3, #8
 80053fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	61fb      	str	r3, [r7, #28]
   return(result);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3308      	adds	r3, #8
 8005416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	2b01      	cmp	r3, #1
 8005432:	d118      	bne.n	8005466 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	60bb      	str	r3, [r7, #8]
   return(result);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f023 0310 	bic.w	r3, r3, #16
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6979      	ldr	r1, [r7, #20]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	613b      	str	r3, [r7, #16]
   return(result);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e6      	bne.n	8005434 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	669a      	str	r2, [r3, #104]	; 0x68
}
 800547a:	bf00      	nop
 800547c:	3754      	adds	r7, #84	; 0x54
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fb0b 	bl	8004ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b088      	sub	sp, #32
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	613b      	str	r3, [r7, #16]
   return(result);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fad7 	bl	8004aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054fe:	bf00      	nop
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <arm_max_f32>:
 800551c:	f101 3cff 	add.w	ip, r1, #4294967295
 8005520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005522:	4607      	mov	r7, r0
 8005524:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8005528:	ecf7 7a01 	vldmia	r7!, {s15}
 800552c:	d060      	beq.n	80055f0 <arm_max_f32+0xd4>
 800552e:	2400      	movs	r4, #0
 8005530:	3014      	adds	r0, #20
 8005532:	4625      	mov	r5, r4
 8005534:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8005538:	ed10 7a04 	vldr	s14, [r0, #-16]
 800553c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	bf48      	it	mi
 8005546:	eef0 7a47 	vmovmi.f32	s15, s14
 800554a:	ed10 7a03 	vldr	s14, [r0, #-12]
 800554e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005552:	bf48      	it	mi
 8005554:	1c65      	addmi	r5, r4, #1
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	bf48      	it	mi
 800555c:	eef0 7a47 	vmovmi.f32	s15, s14
 8005560:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005568:	bf48      	it	mi
 800556a:	1ca5      	addmi	r5, r4, #2
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	bf48      	it	mi
 8005572:	eef0 7a47 	vmovmi.f32	s15, s14
 8005576:	ed10 7a01 	vldr	s14, [r0, #-4]
 800557a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557e:	bf48      	it	mi
 8005580:	1ce5      	addmi	r5, r4, #3
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	f104 0404 	add.w	r4, r4, #4
 800558a:	bf44      	itt	mi
 800558c:	eef0 7a47 	vmovmi.f32	s15, s14
 8005590:	4625      	movmi	r5, r4
 8005592:	42a6      	cmp	r6, r4
 8005594:	f100 0010 	add.w	r0, r0, #16
 8005598:	d1ce      	bne.n	8005538 <arm_max_f32+0x1c>
 800559a:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800559e:	f01c 0003 	ands.w	r0, ip, #3
 80055a2:	d021      	beq.n	80055e8 <arm_max_f32+0xcc>
 80055a4:	ed97 7a00 	vldr	s14, [r7]
 80055a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	bfc4      	itt	gt
 80055b2:	eef0 7a47 	vmovgt.f32	s15, s14
 80055b6:	1a0d      	subgt	r5, r1, r0
 80055b8:	3801      	subs	r0, #1
 80055ba:	d015      	beq.n	80055e8 <arm_max_f32+0xcc>
 80055bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80055c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c8:	bf44      	itt	mi
 80055ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80055ce:	1a0d      	submi	r5, r1, r0
 80055d0:	2801      	cmp	r0, #1
 80055d2:	d009      	beq.n	80055e8 <arm_max_f32+0xcc>
 80055d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80055d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e0:	bfc4      	itt	gt
 80055e2:	eef0 7a47 	vmovgt.f32	s15, s14
 80055e6:	4665      	movgt	r5, ip
 80055e8:	edc2 7a00 	vstr	s15, [r2]
 80055ec:	601d      	str	r5, [r3, #0]
 80055ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f0:	4675      	mov	r5, lr
 80055f2:	e7d4      	b.n	800559e <arm_max_f32+0x82>

080055f4 <arm_rfft_32_fast_init_f32>:
 80055f4:	b178      	cbz	r0, 8005616 <arm_rfft_32_fast_init_f32+0x22>
 80055f6:	b430      	push	{r4, r5}
 80055f8:	4908      	ldr	r1, [pc, #32]	; (800561c <arm_rfft_32_fast_init_f32+0x28>)
 80055fa:	4a09      	ldr	r2, [pc, #36]	; (8005620 <arm_rfft_32_fast_init_f32+0x2c>)
 80055fc:	2310      	movs	r3, #16
 80055fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005602:	8003      	strh	r3, [r0, #0]
 8005604:	2520      	movs	r5, #32
 8005606:	2414      	movs	r4, #20
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <arm_rfft_32_fast_init_f32+0x30>)
 800560a:	8205      	strh	r5, [r0, #16]
 800560c:	8184      	strh	r4, [r0, #12]
 800560e:	6143      	str	r3, [r0, #20]
 8005610:	bc30      	pop	{r4, r5}
 8005612:	2000      	movs	r0, #0
 8005614:	4770      	bx	lr
 8005616:	f04f 30ff 	mov.w	r0, #4294967295
 800561a:	4770      	bx	lr
 800561c:	0800a8a4 	.word	0x0800a8a4
 8005620:	0800f9e0 	.word	0x0800f9e0
 8005624:	08018760 	.word	0x08018760

08005628 <arm_rfft_64_fast_init_f32>:
 8005628:	b178      	cbz	r0, 800564a <arm_rfft_64_fast_init_f32+0x22>
 800562a:	b430      	push	{r4, r5}
 800562c:	4908      	ldr	r1, [pc, #32]	; (8005650 <arm_rfft_64_fast_init_f32+0x28>)
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <arm_rfft_64_fast_init_f32+0x2c>)
 8005630:	2320      	movs	r3, #32
 8005632:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005636:	8003      	strh	r3, [r0, #0]
 8005638:	2540      	movs	r5, #64	; 0x40
 800563a:	2430      	movs	r4, #48	; 0x30
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <arm_rfft_64_fast_init_f32+0x30>)
 800563e:	8205      	strh	r5, [r0, #16]
 8005640:	8184      	strh	r4, [r0, #12]
 8005642:	6143      	str	r3, [r0, #20]
 8005644:	bc30      	pop	{r4, r5}
 8005646:	2000      	movs	r0, #0
 8005648:	4770      	bx	lr
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	4770      	bx	lr
 8005650:	0800c9fc 	.word	0x0800c9fc
 8005654:	08014260 	.word	0x08014260
 8005658:	0801cfe0 	.word	0x0801cfe0

0800565c <arm_rfft_256_fast_init_f32>:
 800565c:	b180      	cbz	r0, 8005680 <arm_rfft_256_fast_init_f32+0x24>
 800565e:	b430      	push	{r4, r5}
 8005660:	4909      	ldr	r1, [pc, #36]	; (8005688 <arm_rfft_256_fast_init_f32+0x2c>)
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <arm_rfft_256_fast_init_f32+0x30>)
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800566a:	8003      	strh	r3, [r0, #0]
 800566c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005670:	24d0      	movs	r4, #208	; 0xd0
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <arm_rfft_256_fast_init_f32+0x34>)
 8005674:	8205      	strh	r5, [r0, #16]
 8005676:	8184      	strh	r4, [r0, #12]
 8005678:	6143      	str	r3, [r0, #20]
 800567a:	bc30      	pop	{r4, r5}
 800567c:	2000      	movs	r0, #0
 800567e:	4770      	bx	lr
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	0800a704 	.word	0x0800a704
 800568c:	0800f5e0 	.word	0x0800f5e0
 8005690:	08018360 	.word	0x08018360

08005694 <arm_rfft_512_fast_init_f32>:
 8005694:	b190      	cbz	r0, 80056bc <arm_rfft_512_fast_init_f32+0x28>
 8005696:	b430      	push	{r4, r5}
 8005698:	490a      	ldr	r1, [pc, #40]	; (80056c4 <arm_rfft_512_fast_init_f32+0x30>)
 800569a:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <arm_rfft_512_fast_init_f32+0x34>)
 800569c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80056a4:	8003      	strh	r3, [r0, #0]
 80056a6:	f44f 7500 	mov.w	r5, #512	; 0x200
 80056aa:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80056ae:	4b07      	ldr	r3, [pc, #28]	; (80056cc <arm_rfft_512_fast_init_f32+0x38>)
 80056b0:	8205      	strh	r5, [r0, #16]
 80056b2:	8184      	strh	r4, [r0, #12]
 80056b4:	6143      	str	r3, [r0, #20]
 80056b6:	bc30      	pop	{r4, r5}
 80056b8:	2000      	movs	r0, #0
 80056ba:	4770      	bx	lr
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	0800c68c 	.word	0x0800c68c
 80056c8:	08013a60 	.word	0x08013a60
 80056cc:	0801c7e0 	.word	0x0801c7e0

080056d0 <arm_rfft_1024_fast_init_f32>:
 80056d0:	b190      	cbz	r0, 80056f8 <arm_rfft_1024_fast_init_f32+0x28>
 80056d2:	b430      	push	{r4, r5}
 80056d4:	490a      	ldr	r1, [pc, #40]	; (8005700 <arm_rfft_1024_fast_init_f32+0x30>)
 80056d6:	4a0b      	ldr	r2, [pc, #44]	; (8005704 <arm_rfft_1024_fast_init_f32+0x34>)
 80056d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056dc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80056e0:	8003      	strh	r3, [r0, #0]
 80056e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80056e6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <arm_rfft_1024_fast_init_f32+0x38>)
 80056ec:	8205      	strh	r5, [r0, #16]
 80056ee:	8184      	strh	r4, [r0, #12]
 80056f0:	6143      	str	r3, [r0, #20]
 80056f2:	bc30      	pop	{r4, r5}
 80056f4:	2000      	movs	r0, #0
 80056f6:	4770      	bx	lr
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	0800ca5c 	.word	0x0800ca5c
 8005704:	08014360 	.word	0x08014360
 8005708:	08015360 	.word	0x08015360

0800570c <arm_rfft_2048_fast_init_f32>:
 800570c:	b190      	cbz	r0, 8005734 <arm_rfft_2048_fast_init_f32+0x28>
 800570e:	b430      	push	{r4, r5}
 8005710:	490a      	ldr	r1, [pc, #40]	; (800573c <arm_rfft_2048_fast_init_f32+0x30>)
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <arm_rfft_2048_fast_init_f32+0x34>)
 8005714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005718:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800571c:	8003      	strh	r3, [r0, #0]
 800571e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005722:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005726:	4b07      	ldr	r3, [pc, #28]	; (8005744 <arm_rfft_2048_fast_init_f32+0x38>)
 8005728:	8205      	strh	r5, [r0, #16]
 800572a:	8184      	strh	r4, [r0, #12]
 800572c:	6143      	str	r3, [r0, #20]
 800572e:	bc30      	pop	{r4, r5}
 8005730:	2000      	movs	r0, #0
 8005732:	4770      	bx	lr
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	080098f4 	.word	0x080098f4
 8005740:	0800d5e0 	.word	0x0800d5e0
 8005744:	08016360 	.word	0x08016360

08005748 <arm_rfft_4096_fast_init_f32>:
 8005748:	b190      	cbz	r0, 8005770 <arm_rfft_4096_fast_init_f32+0x28>
 800574a:	b430      	push	{r4, r5}
 800574c:	490a      	ldr	r1, [pc, #40]	; (8005778 <arm_rfft_4096_fast_init_f32+0x30>)
 800574e:	4a0b      	ldr	r2, [pc, #44]	; (800577c <arm_rfft_4096_fast_init_f32+0x34>)
 8005750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005754:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005758:	8003      	strh	r3, [r0, #0]
 800575a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800575e:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <arm_rfft_4096_fast_init_f32+0x38>)
 8005764:	8205      	strh	r5, [r0, #16]
 8005766:	8184      	strh	r4, [r0, #12]
 8005768:	6143      	str	r3, [r0, #20]
 800576a:	bc30      	pop	{r4, r5}
 800576c:	2000      	movs	r0, #0
 800576e:	4770      	bx	lr
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	0800a8cc 	.word	0x0800a8cc
 800577c:	0800fa60 	.word	0x0800fa60
 8005780:	080187e0 	.word	0x080187e0

08005784 <arm_rfft_fast_init_f32>:
 8005784:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005788:	d01f      	beq.n	80057ca <arm_rfft_fast_init_f32+0x46>
 800578a:	d90b      	bls.n	80057a4 <arm_rfft_fast_init_f32+0x20>
 800578c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005790:	d019      	beq.n	80057c6 <arm_rfft_fast_init_f32+0x42>
 8005792:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005796:	d012      	beq.n	80057be <arm_rfft_fast_init_f32+0x3a>
 8005798:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800579c:	d00d      	beq.n	80057ba <arm_rfft_fast_init_f32+0x36>
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	4770      	bx	lr
 80057a4:	2940      	cmp	r1, #64	; 0x40
 80057a6:	d00c      	beq.n	80057c2 <arm_rfft_fast_init_f32+0x3e>
 80057a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80057ac:	d003      	beq.n	80057b6 <arm_rfft_fast_init_f32+0x32>
 80057ae:	2920      	cmp	r1, #32
 80057b0:	d1f5      	bne.n	800579e <arm_rfft_fast_init_f32+0x1a>
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <arm_rfft_fast_init_f32+0x4c>)
 80057b4:	4718      	bx	r3
 80057b6:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <arm_rfft_fast_init_f32+0x50>)
 80057b8:	4718      	bx	r3
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <arm_rfft_fast_init_f32+0x54>)
 80057bc:	4718      	bx	r3
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <arm_rfft_fast_init_f32+0x58>)
 80057c0:	4718      	bx	r3
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <arm_rfft_fast_init_f32+0x5c>)
 80057c4:	e7f6      	b.n	80057b4 <arm_rfft_fast_init_f32+0x30>
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <arm_rfft_fast_init_f32+0x60>)
 80057c8:	e7f4      	b.n	80057b4 <arm_rfft_fast_init_f32+0x30>
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <arm_rfft_fast_init_f32+0x64>)
 80057cc:	e7f2      	b.n	80057b4 <arm_rfft_fast_init_f32+0x30>
 80057ce:	bf00      	nop
 80057d0:	080055f5 	.word	0x080055f5
 80057d4:	0800565d 	.word	0x0800565d
 80057d8:	080056d1 	.word	0x080056d1
 80057dc:	08005749 	.word	0x08005749
 80057e0:	08005629 	.word	0x08005629
 80057e4:	0800570d 	.word	0x0800570d
 80057e8:	08005695 	.word	0x08005695

080057ec <stage_rfft_f32>:
 80057ec:	b410      	push	{r4}
 80057ee:	edd1 7a00 	vldr	s15, [r1]
 80057f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80057f6:	8804      	ldrh	r4, [r0, #0]
 80057f8:	6940      	ldr	r0, [r0, #20]
 80057fa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80057fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005802:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8005806:	ee77 6a87 	vadd.f32	s13, s15, s14
 800580a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800580e:	3c01      	subs	r4, #1
 8005810:	ee26 7a84 	vmul.f32	s14, s13, s8
 8005814:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005818:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800581c:	ed82 7a00 	vstr	s14, [r2]
 8005820:	edc2 7a01 	vstr	s15, [r2, #4]
 8005824:	3010      	adds	r0, #16
 8005826:	3210      	adds	r2, #16
 8005828:	3b08      	subs	r3, #8
 800582a:	3110      	adds	r1, #16
 800582c:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005830:	ed93 7a02 	vldr	s14, [r3, #8]
 8005834:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005838:	edd3 4a03 	vldr	s9, [r3, #12]
 800583c:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005840:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005844:	ee77 5a45 	vsub.f32	s11, s14, s10
 8005848:	ee37 7a05 	vadd.f32	s14, s14, s10
 800584c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005850:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005854:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005858:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800585c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8005860:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005864:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005868:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800586c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005870:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005874:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005878:	ee67 7a84 	vmul.f32	s15, s15, s8
 800587c:	3c01      	subs	r4, #1
 800587e:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005882:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005886:	f1a3 0308 	sub.w	r3, r3, #8
 800588a:	f101 0108 	add.w	r1, r1, #8
 800588e:	f100 0008 	add.w	r0, r0, #8
 8005892:	f102 0208 	add.w	r2, r2, #8
 8005896:	d1c9      	bne.n	800582c <stage_rfft_f32+0x40>
 8005898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <merge_rfft_f32>:
 80058a0:	b410      	push	{r4}
 80058a2:	edd1 7a00 	vldr	s15, [r1]
 80058a6:	edd1 6a01 	vldr	s13, [r1, #4]
 80058aa:	8804      	ldrh	r4, [r0, #0]
 80058ac:	6940      	ldr	r0, [r0, #20]
 80058ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80058b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058b6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80058ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80058be:	ee67 7a84 	vmul.f32	s15, s15, s8
 80058c2:	3c01      	subs	r4, #1
 80058c4:	ed82 7a00 	vstr	s14, [r2]
 80058c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80058cc:	b3dc      	cbz	r4, 8005946 <merge_rfft_f32+0xa6>
 80058ce:	00e3      	lsls	r3, r4, #3
 80058d0:	3b08      	subs	r3, #8
 80058d2:	440b      	add	r3, r1
 80058d4:	3010      	adds	r0, #16
 80058d6:	3210      	adds	r2, #16
 80058d8:	3110      	adds	r1, #16
 80058da:	ed11 5a02 	vldr	s10, [r1, #-8]
 80058de:	ed93 7a02 	vldr	s14, [r3, #8]
 80058e2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80058e6:	edd3 4a03 	vldr	s9, [r3, #12]
 80058ea:	ed51 7a01 	vldr	s15, [r1, #-4]
 80058ee:	ed10 6a01 	vldr	s12, [r0, #-4]
 80058f2:	ee75 5a47 	vsub.f32	s11, s10, s14
 80058f6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80058fa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80058fe:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005902:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005906:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800590a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800590e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005912:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005916:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800591a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800591e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005922:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005926:	ee67 7a84 	vmul.f32	s15, s15, s8
 800592a:	3c01      	subs	r4, #1
 800592c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005930:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005934:	f1a3 0308 	sub.w	r3, r3, #8
 8005938:	f101 0108 	add.w	r1, r1, #8
 800593c:	f100 0008 	add.w	r0, r0, #8
 8005940:	f102 0208 	add.w	r2, r2, #8
 8005944:	d1c9      	bne.n	80058da <merge_rfft_f32+0x3a>
 8005946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800594a:	4770      	bx	lr

0800594c <arm_rfft_fast_f32>:
 800594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	8a05      	ldrh	r5, [r0, #16]
 8005952:	086d      	lsrs	r5, r5, #1
 8005954:	8005      	strh	r5, [r0, #0]
 8005956:	4604      	mov	r4, r0
 8005958:	4616      	mov	r6, r2
 800595a:	461d      	mov	r5, r3
 800595c:	b14b      	cbz	r3, 8005972 <arm_rfft_fast_f32+0x26>
 800595e:	f7ff ff9f 	bl	80058a0 <merge_rfft_f32>
 8005962:	462a      	mov	r2, r5
 8005964:	4631      	mov	r1, r6
 8005966:	4620      	mov	r0, r4
 8005968:	2301      	movs	r3, #1
 800596a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	f000 bb33 	b.w	8005fd8 <arm_cfft_f32>
 8005972:	460f      	mov	r7, r1
 8005974:	461a      	mov	r2, r3
 8005976:	2301      	movs	r3, #1
 8005978:	f000 fb2e 	bl	8005fd8 <arm_cfft_f32>
 800597c:	4632      	mov	r2, r6
 800597e:	4639      	mov	r1, r7
 8005980:	4620      	mov	r0, r4
 8005982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	f7ff bf31 	b.w	80057ec <stage_rfft_f32>
 800598a:	bf00      	nop

0800598c <arm_cfft_radix8by2_f32>:
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	ed2d 8b08 	vpush	{d8-d11}
 8005994:	4607      	mov	r7, r0
 8005996:	4608      	mov	r0, r1
 8005998:	f8b7 c000 	ldrh.w	ip, [r7]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80059a2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80059a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80059aa:	f000 80b0 	beq.w	8005b0e <arm_cfft_radix8by2_f32+0x182>
 80059ae:	008c      	lsls	r4, r1, #2
 80059b0:	3410      	adds	r4, #16
 80059b2:	f100 0310 	add.w	r3, r0, #16
 80059b6:	1906      	adds	r6, r0, r4
 80059b8:	3210      	adds	r2, #16
 80059ba:	4444      	add	r4, r8
 80059bc:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80059c0:	f108 0510 	add.w	r5, r8, #16
 80059c4:	ed15 2a04 	vldr	s4, [r5, #-16]
 80059c8:	ed55 2a03 	vldr	s5, [r5, #-12]
 80059cc:	ed54 4a04 	vldr	s9, [r4, #-16]
 80059d0:	ed14 4a03 	vldr	s8, [r4, #-12]
 80059d4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80059d8:	ed54 5a01 	vldr	s11, [r4, #-4]
 80059dc:	ed53 3a04 	vldr	s7, [r3, #-16]
 80059e0:	ed15 0a02 	vldr	s0, [r5, #-8]
 80059e4:	ed55 0a01 	vldr	s1, [r5, #-4]
 80059e8:	ed56 6a04 	vldr	s13, [r6, #-16]
 80059ec:	ed16 3a03 	vldr	s6, [r6, #-12]
 80059f0:	ed13 7a03 	vldr	s14, [r3, #-12]
 80059f4:	ed13 5a02 	vldr	s10, [r3, #-8]
 80059f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80059fc:	ed16 1a02 	vldr	s2, [r6, #-8]
 8005a00:	ed56 1a01 	vldr	s3, [r6, #-4]
 8005a04:	ee73 ba82 	vadd.f32	s23, s7, s4
 8005a08:	ee37 ba22 	vadd.f32	s22, s14, s5
 8005a0c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8005a10:	ee33 9a04 	vadd.f32	s18, s6, s8
 8005a14:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8005a18:	ee75 aa00 	vadd.f32	s21, s10, s0
 8005a1c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8005a20:	ee71 8a06 	vadd.f32	s17, s2, s12
 8005a24:	ed43 ba04 	vstr	s23, [r3, #-16]
 8005a28:	ed03 ba03 	vstr	s22, [r3, #-12]
 8005a2c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8005a30:	ed03 aa01 	vstr	s20, [r3, #-4]
 8005a34:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005a38:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005a3c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005a40:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005a44:	ee37 7a62 	vsub.f32	s14, s14, s5
 8005a48:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005a4c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8005a50:	ed52 6a03 	vldr	s13, [r2, #-12]
 8005a54:	ed12 3a04 	vldr	s6, [r2, #-16]
 8005a58:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8005a5c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8005a60:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8005a64:	ee23 2a83 	vmul.f32	s4, s7, s6
 8005a68:	ee64 4a83 	vmul.f32	s9, s9, s6
 8005a6c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8005a70:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005a74:	ee64 6a26 	vmul.f32	s13, s8, s13
 8005a78:	ee24 4a03 	vmul.f32	s8, s8, s6
 8005a7c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8005a80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005a84:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8005a88:	ee32 3a08 	vadd.f32	s6, s4, s16
 8005a8c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8005a90:	ed05 3a04 	vstr	s6, [r5, #-16]
 8005a94:	ed04 4a04 	vstr	s8, [r4, #-16]
 8005a98:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005a9c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005aa0:	ee76 6a41 	vsub.f32	s13, s12, s2
 8005aa4:	ee35 5a40 	vsub.f32	s10, s10, s0
 8005aa8:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8005aac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005ab0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005ab4:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005ab8:	ee66 4a87 	vmul.f32	s9, s13, s14
 8005abc:	ee25 4a25 	vmul.f32	s8, s10, s11
 8005ac0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005ac4:	ee25 5a07 	vmul.f32	s10, s10, s14
 8005ac8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005acc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005ad0:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005ad4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005ad8:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005adc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8005ae0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ae4:	3310      	adds	r3, #16
 8005ae6:	4563      	cmp	r3, ip
 8005ae8:	ed45 5a02 	vstr	s11, [r5, #-8]
 8005aec:	f106 0610 	add.w	r6, r6, #16
 8005af0:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005af4:	f102 0210 	add.w	r2, r2, #16
 8005af8:	ed04 6a02 	vstr	s12, [r4, #-8]
 8005afc:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005b00:	f105 0510 	add.w	r5, r5, #16
 8005b04:	f104 0410 	add.w	r4, r4, #16
 8005b08:	f47f af5c 	bne.w	80059c4 <arm_cfft_radix8by2_f32+0x38>
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	b28c      	uxth	r4, r1
 8005b10:	4621      	mov	r1, r4
 8005b12:	2302      	movs	r3, #2
 8005b14:	f000 fd04 	bl	8006520 <arm_radix8_butterfly_f32>
 8005b18:	ecbd 8b08 	vpop	{d8-d11}
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4640      	mov	r0, r8
 8005b22:	2302      	movs	r3, #2
 8005b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b28:	f000 bcfa 	b.w	8006520 <arm_radix8_butterfly_f32>

08005b2c <arm_cfft_radix8by4_f32>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	ed2d 8b0a 	vpush	{d8-d12}
 8005b34:	b08d      	sub	sp, #52	; 0x34
 8005b36:	460d      	mov	r5, r1
 8005b38:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b3a:	8801      	ldrh	r1, [r0, #0]
 8005b3c:	6842      	ldr	r2, [r0, #4]
 8005b3e:	900a      	str	r0, [sp, #40]	; 0x28
 8005b40:	0849      	lsrs	r1, r1, #1
 8005b42:	008b      	lsls	r3, r1, #2
 8005b44:	18ee      	adds	r6, r5, r3
 8005b46:	18f0      	adds	r0, r6, r3
 8005b48:	edd0 5a00 	vldr	s11, [r0]
 8005b4c:	edd5 7a00 	vldr	s15, [r5]
 8005b50:	ed96 7a00 	vldr	s14, [r6]
 8005b54:	edd0 3a01 	vldr	s7, [r0, #4]
 8005b58:	ed96 4a01 	vldr	s8, [r6, #4]
 8005b5c:	ed95 5a01 	vldr	s10, [r5, #4]
 8005b60:	9008      	str	r0, [sp, #32]
 8005b62:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8005b66:	18c7      	adds	r7, r0, r3
 8005b68:	edd7 4a00 	vldr	s9, [r7]
 8005b6c:	ed97 3a01 	vldr	s6, [r7, #4]
 8005b70:	9701      	str	r7, [sp, #4]
 8005b72:	ee77 6a06 	vadd.f32	s13, s14, s12
 8005b76:	462c      	mov	r4, r5
 8005b78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005b7c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005b80:	ee16 ca90 	vmov	ip, s13
 8005b84:	f844 cb08 	str.w	ip, [r4], #8
 8005b88:	ee75 6a23 	vadd.f32	s13, s10, s7
 8005b8c:	edd6 5a01 	vldr	s11, [r6, #4]
 8005b90:	edd7 2a01 	vldr	s5, [r7, #4]
 8005b94:	9404      	str	r4, [sp, #16]
 8005b96:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005b9a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8005b9e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005ba2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8005ba6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005baa:	0849      	lsrs	r1, r1, #1
 8005bac:	f102 0e08 	add.w	lr, r2, #8
 8005bb0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005bb4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8005bba:	ee35 4a47 	vsub.f32	s8, s10, s14
 8005bbe:	f1a1 0902 	sub.w	r9, r1, #2
 8005bc2:	f8cd e00c 	str.w	lr, [sp, #12]
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	ee13 ea90 	vmov	lr, s7
 8005bcc:	ee36 6a64 	vsub.f32	s12, s12, s9
 8005bd0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	edc5 5a01 	vstr	s11, [r5, #4]
 8005bda:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005bde:	f841 eb08 	str.w	lr, [r1], #8
 8005be2:	ee34 5a24 	vadd.f32	s10, s8, s9
 8005be6:	ee16 ea10 	vmov	lr, s12
 8005bea:	ed86 5a01 	vstr	s10, [r6, #4]
 8005bee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005bf2:	f844 eb08 	str.w	lr, [r4], #8
 8005bf6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005bfa:	edc0 6a01 	vstr	s13, [r0, #4]
 8005bfe:	9405      	str	r4, [sp, #20]
 8005c00:	4604      	mov	r4, r0
 8005c02:	ee17 0a90 	vmov	r0, s15
 8005c06:	9106      	str	r1, [sp, #24]
 8005c08:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005c0c:	f102 0110 	add.w	r1, r2, #16
 8005c10:	46bc      	mov	ip, r7
 8005c12:	9100      	str	r1, [sp, #0]
 8005c14:	f847 0b08 	str.w	r0, [r7], #8
 8005c18:	f102 0118 	add.w	r1, r2, #24
 8005c1c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8005c20:	9102      	str	r1, [sp, #8]
 8005c22:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005c26:	9007      	str	r0, [sp, #28]
 8005c28:	f000 8134 	beq.w	8005e94 <arm_cfft_radix8by4_f32+0x368>
 8005c2c:	f102 0920 	add.w	r9, r2, #32
 8005c30:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8005c34:	9a01      	ldr	r2, [sp, #4]
 8005c36:	f8dd a000 	ldr.w	sl, [sp]
 8005c3a:	3b0c      	subs	r3, #12
 8005c3c:	4683      	mov	fp, r0
 8005c3e:	4463      	add	r3, ip
 8005c40:	f105 0e10 	add.w	lr, r5, #16
 8005c44:	f1a4 010c 	sub.w	r1, r4, #12
 8005c48:	f104 0510 	add.w	r5, r4, #16
 8005c4c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8005c50:	f1a2 040c 	sub.w	r4, r2, #12
 8005c54:	f106 0010 	add.w	r0, r6, #16
 8005c58:	3210      	adds	r2, #16
 8005c5a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8005c5e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005c62:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005c66:	ed52 1a02 	vldr	s3, [r2, #-8]
 8005c6a:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005c6e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8005c72:	ed12 1a01 	vldr	s2, [r2, #-4]
 8005c76:	ed10 8a01 	vldr	s16, [r0, #-4]
 8005c7a:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005c7e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8005c82:	ee37 7a84 	vadd.f32	s14, s15, s8
 8005c86:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005c8a:	ee37 7a21 	vadd.f32	s14, s14, s3
 8005c8e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005c92:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8005c96:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005c9a:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005c9e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005ca2:	ee78 aa25 	vadd.f32	s21, s16, s11
 8005ca6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005caa:	ee70 3a67 	vsub.f32	s7, s0, s15
 8005cae:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8005cb2:	ed94 7a02 	vldr	s14, [r4, #8]
 8005cb6:	ed9c 2a02 	vldr	s4, [ip, #8]
 8005cba:	ed91 ba02 	vldr	s22, [r1, #8]
 8005cbe:	edd3 9a02 	vldr	s19, [r3, #8]
 8005cc2:	edd4 2a01 	vldr	s5, [r4, #4]
 8005cc6:	ed9c 9a01 	vldr	s18, [ip, #4]
 8005cca:	ed93 5a01 	vldr	s10, [r3, #4]
 8005cce:	edd1 0a01 	vldr	s1, [r1, #4]
 8005cd2:	ee72 6a07 	vadd.f32	s13, s4, s14
 8005cd6:	ee32 2a47 	vsub.f32	s4, s4, s14
 8005cda:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8005cde:	ee79 4a22 	vadd.f32	s9, s18, s5
 8005ce2:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8005ce6:	ee79 2a62 	vsub.f32	s5, s18, s5
 8005cea:	ed8c 7a02 	vstr	s14, [ip, #8]
 8005cee:	ed91 7a01 	vldr	s14, [r1, #4]
 8005cf2:	edd3 8a01 	vldr	s17, [r3, #4]
 8005cf6:	ee34 7a87 	vadd.f32	s14, s9, s14
 8005cfa:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8005cfe:	ee37 7a28 	vadd.f32	s14, s14, s17
 8005d02:	ee32 9a60 	vsub.f32	s18, s4, s1
 8005d06:	ed8c 7a01 	vstr	s14, [ip, #4]
 8005d0a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8005d0e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8005d12:	ee73 8a22 	vadd.f32	s17, s6, s5
 8005d16:	ee39 9a05 	vadd.f32	s18, s18, s10
 8005d1a:	ee7a aac1 	vsub.f32	s21, s21, s2
 8005d1e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8005d22:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8005d26:	ee69 ba07 	vmul.f32	s23, s18, s14
 8005d2a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8005d2e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8005d32:	ee63 ca87 	vmul.f32	s25, s7, s14
 8005d36:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8005d3a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8005d3e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8005d42:	ee73 3aea 	vsub.f32	s7, s7, s21
 8005d46:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005d4a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8005d4e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8005d52:	ee34 4a67 	vsub.f32	s8, s8, s15
 8005d56:	ee76 6acb 	vsub.f32	s13, s13, s22
 8005d5a:	ee36 6a48 	vsub.f32	s12, s12, s16
 8005d5e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8005d62:	ed00 7a02 	vstr	s14, [r0, #-8]
 8005d66:	ed40 3a01 	vstr	s7, [r0, #-4]
 8005d6a:	edc1 8a01 	vstr	s17, [r1, #4]
 8005d6e:	ed81 aa02 	vstr	s20, [r1, #8]
 8005d72:	ed59 3a04 	vldr	s7, [r9, #-16]
 8005d76:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8005d7a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8005d7e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8005d82:	ee34 4a61 	vsub.f32	s8, s8, s3
 8005d86:	ee36 6a41 	vsub.f32	s12, s12, s2
 8005d8a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8005d8e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8005d92:	ee24 9a23 	vmul.f32	s18, s8, s7
 8005d96:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005d9a:	ee24 4a26 	vmul.f32	s8, s8, s13
 8005d9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005da2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005da6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8005daa:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005dae:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005db2:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8005db6:	ee79 3a29 	vadd.f32	s7, s18, s19
 8005dba:	ee75 6a60 	vsub.f32	s13, s10, s1
 8005dbe:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8005dc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005dc6:	ed45 3a02 	vstr	s7, [r5, #-8]
 8005dca:	ed05 6a01 	vstr	s12, [r5, #-4]
 8005dce:	ed84 7a01 	vstr	s14, [r4, #4]
 8005dd2:	ed84 4a02 	vstr	s8, [r4, #8]
 8005dd6:	ee35 6a81 	vadd.f32	s12, s11, s2
 8005dda:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8005dde:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8005de2:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8005de6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005dea:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8005dee:	ee67 2a26 	vmul.f32	s5, s14, s13
 8005df2:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8005df6:	ee26 5a25 	vmul.f32	s10, s12, s11
 8005dfa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005dfe:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005e02:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005e06:	ee63 6a26 	vmul.f32	s13, s6, s13
 8005e0a:	ee23 3a25 	vmul.f32	s6, s6, s11
 8005e0e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005e12:	ee75 5a24 	vadd.f32	s11, s10, s9
 8005e16:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8005e1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005e1e:	f1bb 0b01 	subs.w	fp, fp, #1
 8005e22:	ed42 5a02 	vstr	s11, [r2, #-8]
 8005e26:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005e2a:	f10e 0e08 	add.w	lr, lr, #8
 8005e2e:	ed83 3a02 	vstr	s6, [r3, #8]
 8005e32:	ed83 7a01 	vstr	s14, [r3, #4]
 8005e36:	f1ac 0c08 	sub.w	ip, ip, #8
 8005e3a:	f10a 0a08 	add.w	sl, sl, #8
 8005e3e:	f100 0008 	add.w	r0, r0, #8
 8005e42:	f1a1 0108 	sub.w	r1, r1, #8
 8005e46:	f109 0910 	add.w	r9, r9, #16
 8005e4a:	f105 0508 	add.w	r5, r5, #8
 8005e4e:	f1a4 0408 	sub.w	r4, r4, #8
 8005e52:	f108 0818 	add.w	r8, r8, #24
 8005e56:	f102 0208 	add.w	r2, r2, #8
 8005e5a:	f1a3 0308 	sub.w	r3, r3, #8
 8005e5e:	f47f aefc 	bne.w	8005c5a <arm_cfft_radix8by4_f32+0x12e>
 8005e62:	9907      	ldr	r1, [sp, #28]
 8005e64:	9800      	ldr	r0, [sp, #0]
 8005e66:	00cb      	lsls	r3, r1, #3
 8005e68:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005e6c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005e70:	9100      	str	r1, [sp, #0]
 8005e72:	9904      	ldr	r1, [sp, #16]
 8005e74:	4419      	add	r1, r3
 8005e76:	9104      	str	r1, [sp, #16]
 8005e78:	9903      	ldr	r1, [sp, #12]
 8005e7a:	4419      	add	r1, r3
 8005e7c:	9103      	str	r1, [sp, #12]
 8005e7e:	9906      	ldr	r1, [sp, #24]
 8005e80:	4419      	add	r1, r3
 8005e82:	9106      	str	r1, [sp, #24]
 8005e84:	9905      	ldr	r1, [sp, #20]
 8005e86:	441f      	add	r7, r3
 8005e88:	4419      	add	r1, r3
 8005e8a:	9b02      	ldr	r3, [sp, #8]
 8005e8c:	9105      	str	r1, [sp, #20]
 8005e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e92:	9302      	str	r3, [sp, #8]
 8005e94:	9904      	ldr	r1, [sp, #16]
 8005e96:	9805      	ldr	r0, [sp, #20]
 8005e98:	ed91 4a00 	vldr	s8, [r1]
 8005e9c:	edd0 6a00 	vldr	s13, [r0]
 8005ea0:	9b06      	ldr	r3, [sp, #24]
 8005ea2:	ed97 3a00 	vldr	s6, [r7]
 8005ea6:	edd3 7a00 	vldr	s15, [r3]
 8005eaa:	edd0 4a01 	vldr	s9, [r0, #4]
 8005eae:	edd1 3a01 	vldr	s7, [r1, #4]
 8005eb2:	ed97 2a01 	vldr	s4, [r7, #4]
 8005eb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8005eba:	9a03      	ldr	r2, [sp, #12]
 8005ebc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8005ec0:	ee34 6a26 	vadd.f32	s12, s8, s13
 8005ec4:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8005ec8:	ee37 5a86 	vadd.f32	s10, s15, s12
 8005ecc:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005ed0:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005ed4:	ee74 6a66 	vsub.f32	s13, s8, s13
 8005ed8:	ed81 5a00 	vstr	s10, [r1]
 8005edc:	ed93 5a01 	vldr	s10, [r3, #4]
 8005ee0:	edd7 4a01 	vldr	s9, [r7, #4]
 8005ee4:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005ee8:	ee37 4a26 	vadd.f32	s8, s14, s13
 8005eec:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005ef0:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8005ef4:	ed81 5a01 	vstr	s10, [r1, #4]
 8005ef8:	edd2 1a00 	vldr	s3, [r2]
 8005efc:	edd2 2a01 	vldr	s5, [r2, #4]
 8005f00:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005f04:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005f08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f0c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8005f10:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005f14:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005f18:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005f1c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005f20:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005f24:	edc3 2a00 	vstr	s5, [r3]
 8005f28:	ed83 5a01 	vstr	s10, [r3, #4]
 8005f2c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005f36:	ed93 4a01 	vldr	s8, [r3, #4]
 8005f3a:	ed93 5a00 	vldr	s10, [r3]
 8005f3e:	9b02      	ldr	r3, [sp, #8]
 8005f40:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005f44:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005f48:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f4c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005f50:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005f54:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005f58:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005f5c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005f60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f64:	ed80 6a01 	vstr	s12, [r0, #4]
 8005f68:	edc0 5a00 	vstr	s11, [r0]
 8005f6c:	edd3 5a01 	vldr	s11, [r3, #4]
 8005f70:	edd3 6a00 	vldr	s13, [r3]
 8005f74:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005f78:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8005f7c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8005f80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f84:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005f88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005f8c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f90:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005f94:	ed87 7a01 	vstr	s14, [r7, #4]
 8005f98:	edc7 7a00 	vstr	s15, [r7]
 8005f9c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	686a      	ldr	r2, [r5, #4]
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	f000 fabb 	bl	8006520 <arm_radix8_butterfly_f32>
 8005faa:	4630      	mov	r0, r6
 8005fac:	4621      	mov	r1, r4
 8005fae:	686a      	ldr	r2, [r5, #4]
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f000 fab5 	bl	8006520 <arm_radix8_butterfly_f32>
 8005fb6:	9808      	ldr	r0, [sp, #32]
 8005fb8:	686a      	ldr	r2, [r5, #4]
 8005fba:	4621      	mov	r1, r4
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f000 faaf 	bl	8006520 <arm_radix8_butterfly_f32>
 8005fc2:	686a      	ldr	r2, [r5, #4]
 8005fc4:	9801      	ldr	r0, [sp, #4]
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	2304      	movs	r3, #4
 8005fca:	b00d      	add	sp, #52	; 0x34
 8005fcc:	ecbd 8b0a 	vpop	{d8-d12}
 8005fd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	f000 baa4 	b.w	8006520 <arm_radix8_butterfly_f32>

08005fd8 <arm_cfft_f32>:
 8005fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	2a01      	cmp	r2, #1
 8005fde:	4606      	mov	r6, r0
 8005fe0:	4617      	mov	r7, r2
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	8805      	ldrh	r5, [r0, #0]
 8005fe8:	d056      	beq.n	8006098 <arm_cfft_f32+0xc0>
 8005fea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005fee:	d063      	beq.n	80060b8 <arm_cfft_f32+0xe0>
 8005ff0:	d916      	bls.n	8006020 <arm_cfft_f32+0x48>
 8005ff2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005ff6:	d01a      	beq.n	800602e <arm_cfft_f32+0x56>
 8005ff8:	d947      	bls.n	800608a <arm_cfft_f32+0xb2>
 8005ffa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005ffe:	d05b      	beq.n	80060b8 <arm_cfft_f32+0xe0>
 8006000:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006004:	d105      	bne.n	8006012 <arm_cfft_f32+0x3a>
 8006006:	2301      	movs	r3, #1
 8006008:	6872      	ldr	r2, [r6, #4]
 800600a:	4629      	mov	r1, r5
 800600c:	4620      	mov	r0, r4
 800600e:	f000 fa87 	bl	8006520 <arm_radix8_butterfly_f32>
 8006012:	f1b8 0f00 	cmp.w	r8, #0
 8006016:	d111      	bne.n	800603c <arm_cfft_f32+0x64>
 8006018:	2f01      	cmp	r7, #1
 800601a:	d016      	beq.n	800604a <arm_cfft_f32+0x72>
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	2d20      	cmp	r5, #32
 8006022:	d049      	beq.n	80060b8 <arm_cfft_f32+0xe0>
 8006024:	d935      	bls.n	8006092 <arm_cfft_f32+0xba>
 8006026:	2d40      	cmp	r5, #64	; 0x40
 8006028:	d0ed      	beq.n	8006006 <arm_cfft_f32+0x2e>
 800602a:	2d80      	cmp	r5, #128	; 0x80
 800602c:	d1f1      	bne.n	8006012 <arm_cfft_f32+0x3a>
 800602e:	4621      	mov	r1, r4
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fcab 	bl	800598c <arm_cfft_radix8by2_f32>
 8006036:	f1b8 0f00 	cmp.w	r8, #0
 800603a:	d0ed      	beq.n	8006018 <arm_cfft_f32+0x40>
 800603c:	68b2      	ldr	r2, [r6, #8]
 800603e:	89b1      	ldrh	r1, [r6, #12]
 8006040:	4620      	mov	r0, r4
 8006042:	f000 f841 	bl	80060c8 <arm_bitreversal_32>
 8006046:	2f01      	cmp	r7, #1
 8006048:	d1e8      	bne.n	800601c <arm_cfft_f32+0x44>
 800604a:	ee07 5a90 	vmov	s15, r5
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006056:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800605a:	2d00      	cmp	r5, #0
 800605c:	d0de      	beq.n	800601c <arm_cfft_f32+0x44>
 800605e:	f104 0108 	add.w	r1, r4, #8
 8006062:	2300      	movs	r3, #0
 8006064:	3301      	adds	r3, #1
 8006066:	429d      	cmp	r5, r3
 8006068:	f101 0108 	add.w	r1, r1, #8
 800606c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006070:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006074:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006078:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800607c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006080:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006084:	d1ee      	bne.n	8006064 <arm_cfft_f32+0x8c>
 8006086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800608e:	d0ba      	beq.n	8006006 <arm_cfft_f32+0x2e>
 8006090:	e7bf      	b.n	8006012 <arm_cfft_f32+0x3a>
 8006092:	2d10      	cmp	r5, #16
 8006094:	d0cb      	beq.n	800602e <arm_cfft_f32+0x56>
 8006096:	e7bc      	b.n	8006012 <arm_cfft_f32+0x3a>
 8006098:	b19d      	cbz	r5, 80060c2 <arm_cfft_f32+0xea>
 800609a:	f101 030c 	add.w	r3, r1, #12
 800609e:	2200      	movs	r2, #0
 80060a0:	ed53 7a02 	vldr	s15, [r3, #-8]
 80060a4:	3201      	adds	r2, #1
 80060a6:	eef1 7a67 	vneg.f32	s15, s15
 80060aa:	4295      	cmp	r5, r2
 80060ac:	ed43 7a02 	vstr	s15, [r3, #-8]
 80060b0:	f103 0308 	add.w	r3, r3, #8
 80060b4:	d1f4      	bne.n	80060a0 <arm_cfft_f32+0xc8>
 80060b6:	e798      	b.n	8005fea <arm_cfft_f32+0x12>
 80060b8:	4621      	mov	r1, r4
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff fd36 	bl	8005b2c <arm_cfft_radix8by4_f32>
 80060c0:	e7a7      	b.n	8006012 <arm_cfft_f32+0x3a>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0aa      	beq.n	800601c <arm_cfft_f32+0x44>
 80060c6:	e7b9      	b.n	800603c <arm_cfft_f32+0x64>

080060c8 <arm_bitreversal_32>:
 80060c8:	b1e9      	cbz	r1, 8006106 <arm_bitreversal_32+0x3e>
 80060ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060cc:	2500      	movs	r5, #0
 80060ce:	f102 0e02 	add.w	lr, r2, #2
 80060d2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80060d6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80060da:	08a4      	lsrs	r4, r4, #2
 80060dc:	089b      	lsrs	r3, r3, #2
 80060de:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80060e2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80060e6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80060ea:	00a6      	lsls	r6, r4, #2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80060f2:	3304      	adds	r3, #4
 80060f4:	1d34      	adds	r4, r6, #4
 80060f6:	3502      	adds	r5, #2
 80060f8:	58c6      	ldr	r6, [r0, r3]
 80060fa:	5907      	ldr	r7, [r0, r4]
 80060fc:	50c7      	str	r7, [r0, r3]
 80060fe:	428d      	cmp	r5, r1
 8006100:	5106      	str	r6, [r0, r4]
 8006102:	d3e6      	bcc.n	80060d2 <arm_bitreversal_32+0xa>
 8006104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006106:	4770      	bx	lr

08006108 <arm_cmplx_mag_f32>:
 8006108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	ed2d 8b02 	vpush	{d8}
 8006110:	0897      	lsrs	r7, r2, #2
 8006112:	b084      	sub	sp, #16
 8006114:	d077      	beq.n	8006206 <arm_cmplx_mag_f32+0xfe>
 8006116:	f04f 0800 	mov.w	r8, #0
 800611a:	f100 0420 	add.w	r4, r0, #32
 800611e:	f101 0510 	add.w	r5, r1, #16
 8006122:	463e      	mov	r6, r7
 8006124:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8006128:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800612c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006130:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006134:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006138:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006140:	f2c0 80c5 	blt.w	80062ce <arm_cmplx_mag_f32+0x1c6>
 8006144:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006150:	f100 80cb 	bmi.w	80062ea <arm_cmplx_mag_f32+0x1e2>
 8006154:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006158:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800615c:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006160:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006164:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006168:	ee30 0a27 	vadd.f32	s0, s0, s15
 800616c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	f2c0 80a8 	blt.w	80062c8 <arm_cmplx_mag_f32+0x1c0>
 8006178:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800617c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006180:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006184:	f100 80a8 	bmi.w	80062d8 <arm_cmplx_mag_f32+0x1d0>
 8006188:	ed05 8a03 	vstr	s16, [r5, #-12]
 800618c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006190:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006194:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006198:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800619c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a8:	f2c0 808b 	blt.w	80062c2 <arm_cmplx_mag_f32+0x1ba>
 80061ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80061b8:	f100 80a9 	bmi.w	800630e <arm_cmplx_mag_f32+0x206>
 80061bc:	ed05 8a02 	vstr	s16, [r5, #-8]
 80061c0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80061c4:	ed54 7a01 	vldr	s15, [r4, #-4]
 80061c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80061cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061dc:	db6e      	blt.n	80062bc <arm_cmplx_mag_f32+0x1b4>
 80061de:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80061ea:	f100 8087 	bmi.w	80062fc <arm_cmplx_mag_f32+0x1f4>
 80061ee:	ed05 8a01 	vstr	s16, [r5, #-4]
 80061f2:	3e01      	subs	r6, #1
 80061f4:	f104 0420 	add.w	r4, r4, #32
 80061f8:	f105 0510 	add.w	r5, r5, #16
 80061fc:	d192      	bne.n	8006124 <arm_cmplx_mag_f32+0x1c>
 80061fe:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006202:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006206:	f012 0203 	ands.w	r2, r2, #3
 800620a:	d052      	beq.n	80062b2 <arm_cmplx_mag_f32+0x1aa>
 800620c:	ed90 0a00 	vldr	s0, [r0]
 8006210:	edd0 7a01 	vldr	s15, [r0, #4]
 8006214:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006218:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800621c:	2300      	movs	r3, #0
 800621e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006222:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622a:	bfb8      	it	lt
 800622c:	600b      	strlt	r3, [r1, #0]
 800622e:	db08      	blt.n	8006242 <arm_cmplx_mag_f32+0x13a>
 8006230:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006238:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800623c:	d479      	bmi.n	8006332 <arm_cmplx_mag_f32+0x22a>
 800623e:	ed81 8a00 	vstr	s16, [r1]
 8006242:	3a01      	subs	r2, #1
 8006244:	d035      	beq.n	80062b2 <arm_cmplx_mag_f32+0x1aa>
 8006246:	ed90 0a02 	vldr	s0, [r0, #8]
 800624a:	edd0 7a03 	vldr	s15, [r0, #12]
 800624e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006252:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006256:	2300      	movs	r3, #0
 8006258:	ee37 0a80 	vadd.f32	s0, s15, s0
 800625c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006264:	bfb8      	it	lt
 8006266:	604b      	strlt	r3, [r1, #4]
 8006268:	db08      	blt.n	800627c <arm_cmplx_mag_f32+0x174>
 800626a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006272:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006276:	d453      	bmi.n	8006320 <arm_cmplx_mag_f32+0x218>
 8006278:	ed81 8a01 	vstr	s16, [r1, #4]
 800627c:	2a01      	cmp	r2, #1
 800627e:	d018      	beq.n	80062b2 <arm_cmplx_mag_f32+0x1aa>
 8006280:	ed90 0a04 	vldr	s0, [r0, #16]
 8006284:	edd0 7a05 	vldr	s15, [r0, #20]
 8006288:	ee20 0a00 	vmul.f32	s0, s0, s0
 800628c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006290:	2300      	movs	r3, #0
 8006292:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006296:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629e:	db19      	blt.n	80062d4 <arm_cmplx_mag_f32+0x1cc>
 80062a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80062ac:	d44a      	bmi.n	8006344 <arm_cmplx_mag_f32+0x23c>
 80062ae:	ed81 8a02 	vstr	s16, [r1, #8]
 80062b2:	b004      	add	sp, #16
 80062b4:	ecbd 8b02 	vpop	{d8}
 80062b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062bc:	f845 8c04 	str.w	r8, [r5, #-4]
 80062c0:	e797      	b.n	80061f2 <arm_cmplx_mag_f32+0xea>
 80062c2:	f845 8c08 	str.w	r8, [r5, #-8]
 80062c6:	e77b      	b.n	80061c0 <arm_cmplx_mag_f32+0xb8>
 80062c8:	f845 8c0c 	str.w	r8, [r5, #-12]
 80062cc:	e75e      	b.n	800618c <arm_cmplx_mag_f32+0x84>
 80062ce:	f845 8c10 	str.w	r8, [r5, #-16]
 80062d2:	e741      	b.n	8006158 <arm_cmplx_mag_f32+0x50>
 80062d4:	608b      	str	r3, [r1, #8]
 80062d6:	e7ec      	b.n	80062b2 <arm_cmplx_mag_f32+0x1aa>
 80062d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80062dc:	9001      	str	r0, [sp, #4]
 80062de:	f003 f925 	bl	800952c <sqrtf>
 80062e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80062e6:	9801      	ldr	r0, [sp, #4]
 80062e8:	e74e      	b.n	8006188 <arm_cmplx_mag_f32+0x80>
 80062ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80062ee:	9001      	str	r0, [sp, #4]
 80062f0:	f003 f91c 	bl	800952c <sqrtf>
 80062f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80062f8:	9801      	ldr	r0, [sp, #4]
 80062fa:	e72b      	b.n	8006154 <arm_cmplx_mag_f32+0x4c>
 80062fc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006300:	9001      	str	r0, [sp, #4]
 8006302:	f003 f913 	bl	800952c <sqrtf>
 8006306:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800630a:	9801      	ldr	r0, [sp, #4]
 800630c:	e76f      	b.n	80061ee <arm_cmplx_mag_f32+0xe6>
 800630e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006312:	9001      	str	r0, [sp, #4]
 8006314:	f003 f90a 	bl	800952c <sqrtf>
 8006318:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800631c:	9801      	ldr	r0, [sp, #4]
 800631e:	e74d      	b.n	80061bc <arm_cmplx_mag_f32+0xb4>
 8006320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006324:	9201      	str	r2, [sp, #4]
 8006326:	f003 f901 	bl	800952c <sqrtf>
 800632a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800632e:	9903      	ldr	r1, [sp, #12]
 8006330:	e7a2      	b.n	8006278 <arm_cmplx_mag_f32+0x170>
 8006332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006336:	9201      	str	r2, [sp, #4]
 8006338:	f003 f8f8 	bl	800952c <sqrtf>
 800633c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006340:	9903      	ldr	r1, [sp, #12]
 8006342:	e77c      	b.n	800623e <arm_cmplx_mag_f32+0x136>
 8006344:	9101      	str	r1, [sp, #4]
 8006346:	f003 f8f1 	bl	800952c <sqrtf>
 800634a:	9901      	ldr	r1, [sp, #4]
 800634c:	e7af      	b.n	80062ae <arm_cmplx_mag_f32+0x1a6>
 800634e:	bf00      	nop

08006350 <arm_cos_f32>:
 8006350:	eddf 7a21 	vldr	s15, [pc, #132]	; 80063d8 <arm_cos_f32+0x88>
 8006354:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006358:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800635c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006360:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006368:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800636c:	d504      	bpl.n	8006378 <arm_cos_f32+0x28>
 800636e:	ee17 3a90 	vmov	r3, s15
 8006372:	3b01      	subs	r3, #1
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80063dc <arm_cos_f32+0x8c>
 8006380:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006384:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006388:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800638c:	ee17 3a90 	vmov	r3, s15
 8006390:	b29b      	uxth	r3, r3
 8006392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006396:	d21a      	bcs.n	80063ce <arm_cos_f32+0x7e>
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a0:	1c59      	adds	r1, r3, #1
 80063a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063a6:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <arm_cos_f32+0x90>)
 80063a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80063ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80063b4:	ed93 7a00 	vldr	s14, [r3]
 80063b8:	edd2 6a00 	vldr	s13, [r2]
 80063bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80063c0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80063c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80063cc:	4770      	bx	lr
 80063ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80063d2:	2101      	movs	r1, #1
 80063d4:	2300      	movs	r3, #0
 80063d6:	e7e6      	b.n	80063a6 <arm_cos_f32+0x56>
 80063d8:	3e22f983 	.word	0x3e22f983
 80063dc:	44000000 	.word	0x44000000
 80063e0:	0800cddc 	.word	0x0800cddc

080063e4 <arm_scale_f32>:
 80063e4:	b470      	push	{r4, r5, r6}
 80063e6:	0896      	lsrs	r6, r2, #2
 80063e8:	d025      	beq.n	8006436 <arm_scale_f32+0x52>
 80063ea:	f100 0410 	add.w	r4, r0, #16
 80063ee:	f101 0310 	add.w	r3, r1, #16
 80063f2:	4635      	mov	r5, r6
 80063f4:	ed54 7a04 	vldr	s15, [r4, #-16]
 80063f8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80063fc:	3d01      	subs	r5, #1
 80063fe:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006402:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006406:	ee67 7a80 	vmul.f32	s15, s15, s0
 800640a:	f104 0410 	add.w	r4, r4, #16
 800640e:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006412:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8006416:	ee67 7a80 	vmul.f32	s15, s15, s0
 800641a:	f103 0310 	add.w	r3, r3, #16
 800641e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006422:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006426:	ee67 7a80 	vmul.f32	s15, s15, s0
 800642a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800642e:	d1e1      	bne.n	80063f4 <arm_scale_f32+0x10>
 8006430:	0136      	lsls	r6, r6, #4
 8006432:	4430      	add	r0, r6
 8006434:	4431      	add	r1, r6
 8006436:	f012 0203 	ands.w	r2, r2, #3
 800643a:	d015      	beq.n	8006468 <arm_scale_f32+0x84>
 800643c:	edd0 7a00 	vldr	s15, [r0]
 8006440:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006444:	3a01      	subs	r2, #1
 8006446:	edc1 7a00 	vstr	s15, [r1]
 800644a:	d00d      	beq.n	8006468 <arm_scale_f32+0x84>
 800644c:	edd0 7a01 	vldr	s15, [r0, #4]
 8006450:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006454:	2a01      	cmp	r2, #1
 8006456:	edc1 7a01 	vstr	s15, [r1, #4]
 800645a:	d005      	beq.n	8006468 <arm_scale_f32+0x84>
 800645c:	edd0 7a02 	vldr	s15, [r0, #8]
 8006460:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006464:	ed81 0a02 	vstr	s0, [r1, #8]
 8006468:	bc70      	pop	{r4, r5, r6}
 800646a:	4770      	bx	lr

0800646c <arm_mult_f32>:
 800646c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8006470:	b4f0      	push	{r4, r5, r6, r7}
 8006472:	d033      	beq.n	80064dc <arm_mult_f32+0x70>
 8006474:	f100 0610 	add.w	r6, r0, #16
 8006478:	f101 0510 	add.w	r5, r1, #16
 800647c:	f102 0410 	add.w	r4, r2, #16
 8006480:	4667      	mov	r7, ip
 8006482:	ed15 7a04 	vldr	s14, [r5, #-16]
 8006486:	ed56 7a04 	vldr	s15, [r6, #-16]
 800648a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800648e:	3f01      	subs	r7, #1
 8006490:	ed44 7a04 	vstr	s15, [r4, #-16]
 8006494:	ed15 7a03 	vldr	s14, [r5, #-12]
 8006498:	ed56 7a03 	vldr	s15, [r6, #-12]
 800649c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064a0:	f106 0610 	add.w	r6, r6, #16
 80064a4:	ed44 7a03 	vstr	s15, [r4, #-12]
 80064a8:	ed15 7a02 	vldr	s14, [r5, #-8]
 80064ac:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80064b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064b4:	f105 0510 	add.w	r5, r5, #16
 80064b8:	ed44 7a02 	vstr	s15, [r4, #-8]
 80064bc:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80064c0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80064c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064c8:	f104 0410 	add.w	r4, r4, #16
 80064cc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80064d0:	d1d7      	bne.n	8006482 <arm_mult_f32+0x16>
 80064d2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80064d6:	4420      	add	r0, r4
 80064d8:	4421      	add	r1, r4
 80064da:	4422      	add	r2, r4
 80064dc:	f013 0303 	ands.w	r3, r3, #3
 80064e0:	d01b      	beq.n	800651a <arm_mult_f32+0xae>
 80064e2:	edd1 7a00 	vldr	s15, [r1]
 80064e6:	ed90 7a00 	vldr	s14, [r0]
 80064ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064ee:	3b01      	subs	r3, #1
 80064f0:	edc2 7a00 	vstr	s15, [r2]
 80064f4:	d011      	beq.n	800651a <arm_mult_f32+0xae>
 80064f6:	edd0 7a01 	vldr	s15, [r0, #4]
 80064fa:	ed91 7a01 	vldr	s14, [r1, #4]
 80064fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006502:	2b01      	cmp	r3, #1
 8006504:	edc2 7a01 	vstr	s15, [r2, #4]
 8006508:	d007      	beq.n	800651a <arm_mult_f32+0xae>
 800650a:	edd0 7a02 	vldr	s15, [r0, #8]
 800650e:	ed91 7a02 	vldr	s14, [r1, #8]
 8006512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006516:	edc2 7a02 	vstr	s15, [r2, #8]
 800651a:	bcf0      	pop	{r4, r5, r6, r7}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop

08006520 <arm_radix8_butterfly_f32>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	ed2d 8b10 	vpush	{d8-d15}
 8006528:	b095      	sub	sp, #84	; 0x54
 800652a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800652e:	4603      	mov	r3, r0
 8006530:	3304      	adds	r3, #4
 8006532:	ed9f bab9 	vldr	s22, [pc, #740]	; 8006818 <arm_radix8_butterfly_f32+0x2f8>
 8006536:	9012      	str	r0, [sp, #72]	; 0x48
 8006538:	468b      	mov	fp, r1
 800653a:	9313      	str	r3, [sp, #76]	; 0x4c
 800653c:	4689      	mov	r9, r1
 800653e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006542:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006544:	960f      	str	r6, [sp, #60]	; 0x3c
 8006546:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800654a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800654e:	eb03 0508 	add.w	r5, r3, r8
 8006552:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006556:	eb05 040e 	add.w	r4, r5, lr
 800655a:	0137      	lsls	r7, r6, #4
 800655c:	eba6 030a 	sub.w	r3, r6, sl
 8006560:	eb04 000e 	add.w	r0, r4, lr
 8006564:	44b2      	add	sl, r6
 8006566:	1d3a      	adds	r2, r7, #4
 8006568:	9702      	str	r7, [sp, #8]
 800656a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800656e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006572:	ebae 0c06 	sub.w	ip, lr, r6
 8006576:	9703      	str	r7, [sp, #12]
 8006578:	eb03 0708 	add.w	r7, r3, r8
 800657c:	9701      	str	r7, [sp, #4]
 800657e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006582:	9706      	str	r7, [sp, #24]
 8006584:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006586:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800658a:	f10e 0104 	add.w	r1, lr, #4
 800658e:	4439      	add	r1, r7
 8006590:	443a      	add	r2, r7
 8006592:	0137      	lsls	r7, r6, #4
 8006594:	00f6      	lsls	r6, r6, #3
 8006596:	9704      	str	r7, [sp, #16]
 8006598:	9605      	str	r6, [sp, #20]
 800659a:	9f01      	ldr	r7, [sp, #4]
 800659c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800659e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80065a2:	f04f 0c00 	mov.w	ip, #0
 80065a6:	edd4 6a00 	vldr	s13, [r4]
 80065aa:	edd7 1a00 	vldr	s3, [r7]
 80065ae:	ed16 aa01 	vldr	s20, [r6, #-4]
 80065b2:	edd5 5a00 	vldr	s11, [r5]
 80065b6:	ed52 9a01 	vldr	s19, [r2, #-4]
 80065ba:	ed90 6a00 	vldr	s12, [r0]
 80065be:	ed51 7a01 	vldr	s15, [r1, #-4]
 80065c2:	ed93 3a00 	vldr	s6, [r3]
 80065c6:	ee39 0a86 	vadd.f32	s0, s19, s12
 80065ca:	ee33 2a21 	vadd.f32	s4, s6, s3
 80065ce:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80065d2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80065d6:	ee35 7a02 	vadd.f32	s14, s10, s4
 80065da:	ee34 4a80 	vadd.f32	s8, s9, s0
 80065de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065e2:	ee74 6a07 	vadd.f32	s13, s8, s14
 80065e6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80065ea:	ed46 6a01 	vstr	s13, [r6, #-4]
 80065ee:	ed85 4a00 	vstr	s8, [r5]
 80065f2:	edd1 6a00 	vldr	s13, [r1]
 80065f6:	ed94 9a01 	vldr	s18, [r4, #4]
 80065fa:	edd3 2a01 	vldr	s5, [r3, #4]
 80065fe:	edd7 8a01 	vldr	s17, [r7, #4]
 8006602:	edd6 0a00 	vldr	s1, [r6]
 8006606:	edd5 3a01 	vldr	s7, [r5, #4]
 800660a:	ed90 8a01 	vldr	s16, [r0, #4]
 800660e:	ed92 7a00 	vldr	s14, [r2]
 8006612:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006616:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800661a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800661e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006622:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006626:	ee77 7a83 	vadd.f32	s15, s15, s6
 800662a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800662e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006632:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006636:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800663a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800663e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006642:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006646:	ee37 7a48 	vsub.f32	s14, s14, s16
 800664a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800664e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006652:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006656:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800665a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800665e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006662:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006666:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800666a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800666e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006672:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006676:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800667a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800667e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006682:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006686:	ee73 1a84 	vadd.f32	s3, s7, s8
 800668a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800668e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006692:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006696:	ee32 8a00 	vadd.f32	s16, s4, s0
 800669a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800669e:	ee32 2a40 	vsub.f32	s4, s4, s0
 80066a2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80066a6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80066aa:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80066ae:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80066b2:	ee34 6a67 	vsub.f32	s12, s8, s15
 80066b6:	ee75 4a87 	vadd.f32	s9, s11, s14
 80066ba:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80066be:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80066c2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80066c6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80066ca:	44dc      	add	ip, fp
 80066cc:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80066d0:	45e1      	cmp	r9, ip
 80066d2:	ed86 8a00 	vstr	s16, [r6]
 80066d6:	ed85 2a01 	vstr	s4, [r5, #4]
 80066da:	4456      	add	r6, sl
 80066dc:	ed02 0a01 	vstr	s0, [r2, #-4]
 80066e0:	4455      	add	r5, sl
 80066e2:	edc0 6a00 	vstr	s13, [r0]
 80066e6:	ed82 1a00 	vstr	s2, [r2]
 80066ea:	ed80 5a01 	vstr	s10, [r0, #4]
 80066ee:	4452      	add	r2, sl
 80066f0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80066f4:	4450      	add	r0, sl
 80066f6:	edc7 2a00 	vstr	s5, [r7]
 80066fa:	edc4 4a00 	vstr	s9, [r4]
 80066fe:	ed83 7a00 	vstr	s14, [r3]
 8006702:	edc1 5a00 	vstr	s11, [r1]
 8006706:	edc7 3a01 	vstr	s7, [r7, #4]
 800670a:	4451      	add	r1, sl
 800670c:	ed84 6a01 	vstr	s12, [r4, #4]
 8006710:	4457      	add	r7, sl
 8006712:	edc3 7a01 	vstr	s15, [r3, #4]
 8006716:	4454      	add	r4, sl
 8006718:	4453      	add	r3, sl
 800671a:	f63f af44 	bhi.w	80065a6 <arm_radix8_butterfly_f32+0x86>
 800671e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006720:	2b07      	cmp	r3, #7
 8006722:	f240 81b7 	bls.w	8006a94 <arm_radix8_butterfly_f32+0x574>
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	9903      	ldr	r1, [sp, #12]
 800672a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800672c:	9e05      	ldr	r6, [sp, #20]
 800672e:	9a04      	ldr	r2, [sp, #16]
 8006730:	f103 0c08 	add.w	ip, r3, #8
 8006734:	9b02      	ldr	r3, [sp, #8]
 8006736:	3108      	adds	r1, #8
 8006738:	f108 0808 	add.w	r8, r8, #8
 800673c:	1841      	adds	r1, r0, r1
 800673e:	3608      	adds	r6, #8
 8006740:	330c      	adds	r3, #12
 8006742:	4604      	mov	r4, r0
 8006744:	4444      	add	r4, r8
 8006746:	18c3      	adds	r3, r0, r3
 8006748:	9109      	str	r1, [sp, #36]	; 0x24
 800674a:	1981      	adds	r1, r0, r6
 800674c:	f10e 0e08 	add.w	lr, lr, #8
 8006750:	3208      	adds	r2, #8
 8006752:	940b      	str	r4, [sp, #44]	; 0x2c
 8006754:	9107      	str	r1, [sp, #28]
 8006756:	4604      	mov	r4, r0
 8006758:	4601      	mov	r1, r0
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	f100 030c 	add.w	r3, r0, #12
 8006760:	4474      	add	r4, lr
 8006762:	f04f 0801 	mov.w	r8, #1
 8006766:	1882      	adds	r2, r0, r2
 8006768:	4461      	add	r1, ip
 800676a:	9305      	str	r3, [sp, #20]
 800676c:	464b      	mov	r3, r9
 800676e:	940a      	str	r4, [sp, #40]	; 0x28
 8006770:	46c1      	mov	r9, r8
 8006772:	9208      	str	r2, [sp, #32]
 8006774:	46d8      	mov	r8, fp
 8006776:	9106      	str	r1, [sp, #24]
 8006778:	f04f 0e00 	mov.w	lr, #0
 800677c:	469b      	mov	fp, r3
 800677e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006780:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006782:	449e      	add	lr, r3
 8006784:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006788:	441a      	add	r2, r3
 800678a:	920e      	str	r2, [sp, #56]	; 0x38
 800678c:	441a      	add	r2, r3
 800678e:	18d4      	adds	r4, r2, r3
 8006790:	18e5      	adds	r5, r4, r3
 8006792:	18ee      	adds	r6, r5, r3
 8006794:	18f7      	adds	r7, r6, r3
 8006796:	eb07 0c03 	add.w	ip, r7, r3
 800679a:	920d      	str	r2, [sp, #52]	; 0x34
 800679c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80067a0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80067a4:	910c      	str	r1, [sp, #48]	; 0x30
 80067a6:	4419      	add	r1, r3
 80067a8:	9103      	str	r1, [sp, #12]
 80067aa:	4419      	add	r1, r3
 80067ac:	18ca      	adds	r2, r1, r3
 80067ae:	9202      	str	r2, [sp, #8]
 80067b0:	441a      	add	r2, r3
 80067b2:	18d0      	adds	r0, r2, r3
 80067b4:	ed92 ea01 	vldr	s28, [r2, #4]
 80067b8:	9a02      	ldr	r2, [sp, #8]
 80067ba:	edd4 7a00 	vldr	s15, [r4]
 80067be:	edd2 da01 	vldr	s27, [r2, #4]
 80067c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c4:	ed91 da01 	vldr	s26, [r1, #4]
 80067c8:	ed92 ca01 	vldr	s24, [r2, #4]
 80067cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067ce:	9903      	ldr	r1, [sp, #12]
 80067d0:	edcd 7a03 	vstr	s15, [sp, #12]
 80067d4:	edd2 7a00 	vldr	s15, [r2]
 80067d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067da:	edcd 7a02 	vstr	s15, [sp, #8]
 80067de:	edd2 7a00 	vldr	s15, [r2]
 80067e2:	edd0 ea01 	vldr	s29, [r0, #4]
 80067e6:	edd1 ca01 	vldr	s25, [r1, #4]
 80067ea:	eddc ba00 	vldr	s23, [ip]
 80067ee:	edd7 aa00 	vldr	s21, [r7]
 80067f2:	ed96 aa00 	vldr	s20, [r6]
 80067f6:	edd5 9a00 	vldr	s19, [r5]
 80067fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80067fe:	4403      	add	r3, r0
 8006800:	ed93 fa01 	vldr	s30, [r3, #4]
 8006804:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006808:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800680c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006810:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006814:	46cc      	mov	ip, r9
 8006816:	e001      	b.n	800681c <arm_radix8_butterfly_f32+0x2fc>
 8006818:	3f3504f3 	.word	0x3f3504f3
 800681c:	ed91 6a00 	vldr	s12, [r1]
 8006820:	ed93 5a00 	vldr	s10, [r3]
 8006824:	edd0 fa00 	vldr	s31, [r0]
 8006828:	edd4 7a00 	vldr	s15, [r4]
 800682c:	ed95 7a00 	vldr	s14, [r5]
 8006830:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006834:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006838:	ed92 2a00 	vldr	s4, [r2]
 800683c:	ed96 0a00 	vldr	s0, [r6]
 8006840:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006844:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006848:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800684c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006850:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006854:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006858:	ee32 2a46 	vsub.f32	s4, s4, s12
 800685c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006864:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006868:	edd4 8a01 	vldr	s17, [r4, #4]
 800686c:	ed92 9a01 	vldr	s18, [r2, #4]
 8006870:	edd7 0a00 	vldr	s1, [r7]
 8006874:	edd1 2a01 	vldr	s5, [r1, #4]
 8006878:	ed95 7a01 	vldr	s14, [r5, #4]
 800687c:	ed93 6a01 	vldr	s12, [r3, #4]
 8006880:	edd0 5a01 	vldr	s11, [r0, #4]
 8006884:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006888:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800688c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006890:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006894:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006898:	ee38 7a87 	vadd.f32	s14, s17, s14
 800689c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80068a0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80068a4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80068a8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80068ac:	ee30 2a06 	vadd.f32	s4, s0, s12
 80068b0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80068b4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80068b8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80068bc:	ee32 1a08 	vadd.f32	s2, s4, s16
 80068c0:	ee72 fa87 	vadd.f32	s31, s5, s14
 80068c4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80068c8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80068cc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80068d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80068d4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80068d8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80068dc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80068e0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80068e4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80068e8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80068ec:	ee74 0a22 	vadd.f32	s1, s8, s5
 80068f0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80068f4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80068f8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80068fc:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006900:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006904:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006908:	ee33 9a49 	vsub.f32	s18, s6, s18
 800690c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006910:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006914:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006918:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800691c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006920:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006924:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006928:	ee35 8a03 	vadd.f32	s16, s10, s6
 800692c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006930:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006934:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006938:	ed9d 2a01 	vldr	s4, [sp, #4]
 800693c:	eddd 1a02 	vldr	s3, [sp, #8]
 8006940:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006944:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006948:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800694c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8006950:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006954:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8006958:	ee76 5a49 	vsub.f32	s11, s12, s18
 800695c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8006960:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006964:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8006968:	ee21 4a84 	vmul.f32	s8, s3, s8
 800696c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8006970:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006974:	ee22 2a08 	vmul.f32	s4, s4, s16
 8006978:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800697c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006980:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006984:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006988:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800698c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006990:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006994:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006998:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800699c:	ee72 1a21 	vadd.f32	s3, s4, s3
 80069a0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80069a4:	ee38 2a89 	vadd.f32	s4, s17, s18
 80069a8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80069ac:	ee38 8a04 	vadd.f32	s16, s16, s8
 80069b0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80069b4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80069b8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80069bc:	eddd 5a03 	vldr	s11, [sp, #12]
 80069c0:	edc6 fa00 	vstr	s31, [r6]
 80069c4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80069c8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80069cc:	ee30 0a45 	vsub.f32	s0, s0, s10
 80069d0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80069d4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80069d8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80069dc:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80069e0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80069e4:	ee25 6a86 	vmul.f32	s12, s11, s12
 80069e8:	ee74 4a89 	vadd.f32	s9, s9, s18
 80069ec:	ee34 3a43 	vsub.f32	s6, s8, s6
 80069f0:	ee78 8a85 	vadd.f32	s17, s17, s10
 80069f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80069f8:	44c4      	add	ip, r8
 80069fa:	45e3      	cmp	fp, ip
 80069fc:	edc3 3a00 	vstr	s7, [r3]
 8006a00:	edc3 6a01 	vstr	s13, [r3, #4]
 8006a04:	4456      	add	r6, sl
 8006a06:	ed07 1a01 	vstr	s2, [r7, #-4]
 8006a0a:	edc7 0a00 	vstr	s1, [r7]
 8006a0e:	4453      	add	r3, sl
 8006a10:	ed80 2a00 	vstr	s4, [r0]
 8006a14:	edc0 2a01 	vstr	s5, [r0, #4]
 8006a18:	4457      	add	r7, sl
 8006a1a:	edc2 1a00 	vstr	s3, [r2]
 8006a1e:	ed82 7a01 	vstr	s14, [r2, #4]
 8006a22:	4450      	add	r0, sl
 8006a24:	ed85 8a00 	vstr	s16, [r5]
 8006a28:	ed85 0a01 	vstr	s0, [r5, #4]
 8006a2c:	4452      	add	r2, sl
 8006a2e:	edc1 4a00 	vstr	s9, [r1]
 8006a32:	4455      	add	r5, sl
 8006a34:	ed81 3a01 	vstr	s6, [r1, #4]
 8006a38:	edc4 8a00 	vstr	s17, [r4]
 8006a3c:	ed84 6a01 	vstr	s12, [r4, #4]
 8006a40:	4451      	add	r1, sl
 8006a42:	4454      	add	r4, sl
 8006a44:	f63f aeea 	bhi.w	800681c <arm_radix8_butterfly_f32+0x2fc>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a50:	3308      	adds	r3, #8
 8006a52:	930a      	str	r3, [sp, #40]	; 0x28
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	3308      	adds	r3, #8
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	9b08      	ldr	r3, [sp, #32]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	9308      	str	r3, [sp, #32]
 8006a60:	9b07      	ldr	r3, [sp, #28]
 8006a62:	3308      	adds	r3, #8
 8006a64:	9307      	str	r3, [sp, #28]
 8006a66:	9b06      	ldr	r3, [sp, #24]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	9306      	str	r3, [sp, #24]
 8006a6c:	9b05      	ldr	r3, [sp, #20]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	9305      	str	r3, [sp, #20]
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	3308      	adds	r3, #8
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a7a:	f109 0901 	add.w	r9, r9, #1
 8006a7e:	454b      	cmp	r3, r9
 8006a80:	f47f ae7d 	bne.w	800677e <arm_radix8_butterfly_f32+0x25e>
 8006a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	46d9      	mov	r9, fp
 8006a8c:	9310      	str	r3, [sp, #64]	; 0x40
 8006a8e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006a92:	e554      	b.n	800653e <arm_radix8_butterfly_f32+0x1e>
 8006a94:	b015      	add	sp, #84	; 0x54
 8006a96:	ecbd 8b10 	vpop	{d8-d15}
 8006a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9e:	bf00      	nop

08006aa0 <__cvt>:
 8006aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	ec55 4b10 	vmov	r4, r5, d0
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	460e      	mov	r6, r1
 8006aac:	4619      	mov	r1, r3
 8006aae:	462b      	mov	r3, r5
 8006ab0:	bfbb      	ittet	lt
 8006ab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ab6:	461d      	movlt	r5, r3
 8006ab8:	2300      	movge	r3, #0
 8006aba:	232d      	movlt	r3, #45	; 0x2d
 8006abc:	700b      	strb	r3, [r1, #0]
 8006abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ac0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ac4:	4691      	mov	r9, r2
 8006ac6:	f023 0820 	bic.w	r8, r3, #32
 8006aca:	bfbc      	itt	lt
 8006acc:	4622      	movlt	r2, r4
 8006ace:	4614      	movlt	r4, r2
 8006ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ad4:	d005      	beq.n	8006ae2 <__cvt+0x42>
 8006ad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ada:	d100      	bne.n	8006ade <__cvt+0x3e>
 8006adc:	3601      	adds	r6, #1
 8006ade:	2102      	movs	r1, #2
 8006ae0:	e000      	b.n	8006ae4 <__cvt+0x44>
 8006ae2:	2103      	movs	r1, #3
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	ab02      	add	r3, sp, #8
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	ec45 4b10 	vmov	d0, r4, r5
 8006af0:	4653      	mov	r3, sl
 8006af2:	4632      	mov	r2, r6
 8006af4:	f000 ff38 	bl	8007968 <_dtoa_r>
 8006af8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006afc:	4607      	mov	r7, r0
 8006afe:	d102      	bne.n	8006b06 <__cvt+0x66>
 8006b00:	f019 0f01 	tst.w	r9, #1
 8006b04:	d022      	beq.n	8006b4c <__cvt+0xac>
 8006b06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b0a:	eb07 0906 	add.w	r9, r7, r6
 8006b0e:	d110      	bne.n	8006b32 <__cvt+0x92>
 8006b10:	783b      	ldrb	r3, [r7, #0]
 8006b12:	2b30      	cmp	r3, #48	; 0x30
 8006b14:	d10a      	bne.n	8006b2c <__cvt+0x8c>
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	f7f9 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b22:	b918      	cbnz	r0, 8006b2c <__cvt+0x8c>
 8006b24:	f1c6 0601 	rsb	r6, r6, #1
 8006b28:	f8ca 6000 	str.w	r6, [sl]
 8006b2c:	f8da 3000 	ldr.w	r3, [sl]
 8006b30:	4499      	add	r9, r3
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7f9 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b3e:	b108      	cbz	r0, 8006b44 <__cvt+0xa4>
 8006b40:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b44:	2230      	movs	r2, #48	; 0x30
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	454b      	cmp	r3, r9
 8006b4a:	d307      	bcc.n	8006b5c <__cvt+0xbc>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b50:	1bdb      	subs	r3, r3, r7
 8006b52:	4638      	mov	r0, r7
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	b004      	add	sp, #16
 8006b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5c:	1c59      	adds	r1, r3, #1
 8006b5e:	9103      	str	r1, [sp, #12]
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	e7f0      	b.n	8006b46 <__cvt+0xa6>

08006b64 <__exponent>:
 8006b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b66:	4603      	mov	r3, r0
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	bfb8      	it	lt
 8006b6c:	4249      	neglt	r1, r1
 8006b6e:	f803 2b02 	strb.w	r2, [r3], #2
 8006b72:	bfb4      	ite	lt
 8006b74:	222d      	movlt	r2, #45	; 0x2d
 8006b76:	222b      	movge	r2, #43	; 0x2b
 8006b78:	2909      	cmp	r1, #9
 8006b7a:	7042      	strb	r2, [r0, #1]
 8006b7c:	dd2a      	ble.n	8006bd4 <__exponent+0x70>
 8006b7e:	f10d 0207 	add.w	r2, sp, #7
 8006b82:	4617      	mov	r7, r2
 8006b84:	260a      	movs	r6, #10
 8006b86:	4694      	mov	ip, r2
 8006b88:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b8c:	fb06 1415 	mls	r4, r6, r5, r1
 8006b90:	3430      	adds	r4, #48	; 0x30
 8006b92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b96:	460c      	mov	r4, r1
 8006b98:	2c63      	cmp	r4, #99	; 0x63
 8006b9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	dcf1      	bgt.n	8006b86 <__exponent+0x22>
 8006ba2:	3130      	adds	r1, #48	; 0x30
 8006ba4:	f1ac 0402 	sub.w	r4, ip, #2
 8006ba8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006bac:	1c41      	adds	r1, r0, #1
 8006bae:	4622      	mov	r2, r4
 8006bb0:	42ba      	cmp	r2, r7
 8006bb2:	d30a      	bcc.n	8006bca <__exponent+0x66>
 8006bb4:	f10d 0209 	add.w	r2, sp, #9
 8006bb8:	eba2 020c 	sub.w	r2, r2, ip
 8006bbc:	42bc      	cmp	r4, r7
 8006bbe:	bf88      	it	hi
 8006bc0:	2200      	movhi	r2, #0
 8006bc2:	4413      	add	r3, r2
 8006bc4:	1a18      	subs	r0, r3, r0
 8006bc6:	b003      	add	sp, #12
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006bce:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006bd2:	e7ed      	b.n	8006bb0 <__exponent+0x4c>
 8006bd4:	2330      	movs	r3, #48	; 0x30
 8006bd6:	3130      	adds	r1, #48	; 0x30
 8006bd8:	7083      	strb	r3, [r0, #2]
 8006bda:	70c1      	strb	r1, [r0, #3]
 8006bdc:	1d03      	adds	r3, r0, #4
 8006bde:	e7f1      	b.n	8006bc4 <__exponent+0x60>

08006be0 <_printf_float>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	ed2d 8b02 	vpush	{d8}
 8006be8:	b08d      	sub	sp, #52	; 0x34
 8006bea:	460c      	mov	r4, r1
 8006bec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bf0:	4616      	mov	r6, r2
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	f000 fdb7 	bl	8007768 <_localeconv_r>
 8006bfa:	f8d0 a000 	ldr.w	sl, [r0]
 8006bfe:	4650      	mov	r0, sl
 8006c00:	f7f9 fb36 	bl	8000270 <strlen>
 8006c04:	2300      	movs	r3, #0
 8006c06:	930a      	str	r3, [sp, #40]	; 0x28
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c14:	3307      	adds	r3, #7
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	f103 0208 	add.w	r2, r3, #8
 8006c1e:	f8c8 2000 	str.w	r2, [r8]
 8006c22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c2a:	9307      	str	r3, [sp, #28]
 8006c2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c30:	ee08 0a10 	vmov	s16, r0
 8006c34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c3c:	4b9e      	ldr	r3, [pc, #632]	; (8006eb8 <_printf_float+0x2d8>)
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	f7f9 ff73 	bl	8000b2c <__aeabi_dcmpun>
 8006c46:	bb88      	cbnz	r0, 8006cac <_printf_float+0xcc>
 8006c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4c:	4b9a      	ldr	r3, [pc, #616]	; (8006eb8 <_printf_float+0x2d8>)
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c52:	f7f9 ff4d 	bl	8000af0 <__aeabi_dcmple>
 8006c56:	bb48      	cbnz	r0, 8006cac <_printf_float+0xcc>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8006c64:	b110      	cbz	r0, 8006c6c <_printf_float+0x8c>
 8006c66:	232d      	movs	r3, #45	; 0x2d
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	4a93      	ldr	r2, [pc, #588]	; (8006ebc <_printf_float+0x2dc>)
 8006c6e:	4b94      	ldr	r3, [pc, #592]	; (8006ec0 <_printf_float+0x2e0>)
 8006c70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c74:	bf94      	ite	ls
 8006c76:	4690      	movls	r8, r2
 8006c78:	4698      	movhi	r8, r3
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	f023 0304 	bic.w	r3, r3, #4
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	f04f 0900 	mov.w	r9, #0
 8006c8a:	9700      	str	r7, [sp, #0]
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f9da 	bl	800704c <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f040 8090 	bne.w	8006dbe <_printf_float+0x1de>
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	b00d      	add	sp, #52	; 0x34
 8006ca4:	ecbd 8b02 	vpop	{d8}
 8006ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 ff3a 	bl	8000b2c <__aeabi_dcmpun>
 8006cb8:	b140      	cbz	r0, 8006ccc <_printf_float+0xec>
 8006cba:	464b      	mov	r3, r9
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bfbc      	itt	lt
 8006cc0:	232d      	movlt	r3, #45	; 0x2d
 8006cc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cc6:	4a7f      	ldr	r2, [pc, #508]	; (8006ec4 <_printf_float+0x2e4>)
 8006cc8:	4b7f      	ldr	r3, [pc, #508]	; (8006ec8 <_printf_float+0x2e8>)
 8006cca:	e7d1      	b.n	8006c70 <_printf_float+0x90>
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cd2:	9206      	str	r2, [sp, #24]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	d13f      	bne.n	8006d58 <_printf_float+0x178>
 8006cd8:	2306      	movs	r3, #6
 8006cda:	6063      	str	r3, [r4, #4]
 8006cdc:	9b05      	ldr	r3, [sp, #20]
 8006cde:	6861      	ldr	r1, [r4, #4]
 8006ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	ab0a      	add	r3, sp, #40	; 0x28
 8006cea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cee:	ab09      	add	r3, sp, #36	; 0x24
 8006cf0:	ec49 8b10 	vmov	d0, r8, r9
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	6022      	str	r2, [r4, #0]
 8006cf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f7ff fecf 	bl	8006aa0 <__cvt>
 8006d02:	9b06      	ldr	r3, [sp, #24]
 8006d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d06:	2b47      	cmp	r3, #71	; 0x47
 8006d08:	4680      	mov	r8, r0
 8006d0a:	d108      	bne.n	8006d1e <_printf_float+0x13e>
 8006d0c:	1cc8      	adds	r0, r1, #3
 8006d0e:	db02      	blt.n	8006d16 <_printf_float+0x136>
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	4299      	cmp	r1, r3
 8006d14:	dd41      	ble.n	8006d9a <_printf_float+0x1ba>
 8006d16:	f1ab 0302 	sub.w	r3, fp, #2
 8006d1a:	fa5f fb83 	uxtb.w	fp, r3
 8006d1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d22:	d820      	bhi.n	8006d66 <_printf_float+0x186>
 8006d24:	3901      	subs	r1, #1
 8006d26:	465a      	mov	r2, fp
 8006d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d2e:	f7ff ff19 	bl	8006b64 <__exponent>
 8006d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d34:	1813      	adds	r3, r2, r0
 8006d36:	2a01      	cmp	r2, #1
 8006d38:	4681      	mov	r9, r0
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	dc02      	bgt.n	8006d44 <_printf_float+0x164>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	07d2      	lsls	r2, r2, #31
 8006d42:	d501      	bpl.n	8006d48 <_printf_float+0x168>
 8006d44:	3301      	adds	r3, #1
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d09c      	beq.n	8006c8a <_printf_float+0xaa>
 8006d50:	232d      	movs	r3, #45	; 0x2d
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d56:	e798      	b.n	8006c8a <_printf_float+0xaa>
 8006d58:	9a06      	ldr	r2, [sp, #24]
 8006d5a:	2a47      	cmp	r2, #71	; 0x47
 8006d5c:	d1be      	bne.n	8006cdc <_printf_float+0xfc>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1bc      	bne.n	8006cdc <_printf_float+0xfc>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e7b9      	b.n	8006cda <_printf_float+0xfa>
 8006d66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d6a:	d118      	bne.n	8006d9e <_printf_float+0x1be>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	6863      	ldr	r3, [r4, #4]
 8006d70:	dd0b      	ble.n	8006d8a <_printf_float+0x1aa>
 8006d72:	6121      	str	r1, [r4, #16]
 8006d74:	b913      	cbnz	r3, 8006d7c <_printf_float+0x19c>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	07d0      	lsls	r0, r2, #31
 8006d7a:	d502      	bpl.n	8006d82 <_printf_float+0x1a2>
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	440b      	add	r3, r1
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d84:	f04f 0900 	mov.w	r9, #0
 8006d88:	e7de      	b.n	8006d48 <_printf_float+0x168>
 8006d8a:	b913      	cbnz	r3, 8006d92 <_printf_float+0x1b2>
 8006d8c:	6822      	ldr	r2, [r4, #0]
 8006d8e:	07d2      	lsls	r2, r2, #31
 8006d90:	d501      	bpl.n	8006d96 <_printf_float+0x1b6>
 8006d92:	3302      	adds	r3, #2
 8006d94:	e7f4      	b.n	8006d80 <_printf_float+0x1a0>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7f2      	b.n	8006d80 <_printf_float+0x1a0>
 8006d9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da0:	4299      	cmp	r1, r3
 8006da2:	db05      	blt.n	8006db0 <_printf_float+0x1d0>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	6121      	str	r1, [r4, #16]
 8006da8:	07d8      	lsls	r0, r3, #31
 8006daa:	d5ea      	bpl.n	8006d82 <_printf_float+0x1a2>
 8006dac:	1c4b      	adds	r3, r1, #1
 8006dae:	e7e7      	b.n	8006d80 <_printf_float+0x1a0>
 8006db0:	2900      	cmp	r1, #0
 8006db2:	bfd4      	ite	le
 8006db4:	f1c1 0202 	rsble	r2, r1, #2
 8006db8:	2201      	movgt	r2, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	e7e0      	b.n	8006d80 <_printf_float+0x1a0>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	055a      	lsls	r2, r3, #21
 8006dc2:	d407      	bmi.n	8006dd4 <_printf_float+0x1f4>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d12c      	bne.n	8006e2c <_printf_float+0x24c>
 8006dd2:	e764      	b.n	8006c9e <_printf_float+0xbe>
 8006dd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dd8:	f240 80e0 	bls.w	8006f9c <_printf_float+0x3bc>
 8006ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006de0:	2200      	movs	r2, #0
 8006de2:	2300      	movs	r3, #0
 8006de4:	f7f9 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d034      	beq.n	8006e56 <_printf_float+0x276>
 8006dec:	4a37      	ldr	r2, [pc, #220]	; (8006ecc <_printf_float+0x2ec>)
 8006dee:	2301      	movs	r3, #1
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af51 	beq.w	8006c9e <_printf_float+0xbe>
 8006dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e00:	429a      	cmp	r2, r3
 8006e02:	db02      	blt.n	8006e0a <_printf_float+0x22a>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	07d8      	lsls	r0, r3, #31
 8006e08:	d510      	bpl.n	8006e2c <_printf_float+0x24c>
 8006e0a:	ee18 3a10 	vmov	r3, s16
 8006e0e:	4652      	mov	r2, sl
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	f43f af41 	beq.w	8006c9e <_printf_float+0xbe>
 8006e1c:	f04f 0800 	mov.w	r8, #0
 8006e20:	f104 091a 	add.w	r9, r4, #26
 8006e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	dc09      	bgt.n	8006e40 <_printf_float+0x260>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	079b      	lsls	r3, r3, #30
 8006e30:	f100 8107 	bmi.w	8007042 <_printf_float+0x462>
 8006e34:	68e0      	ldr	r0, [r4, #12]
 8006e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e38:	4298      	cmp	r0, r3
 8006e3a:	bfb8      	it	lt
 8006e3c:	4618      	movlt	r0, r3
 8006e3e:	e730      	b.n	8006ca2 <_printf_float+0xc2>
 8006e40:	2301      	movs	r3, #1
 8006e42:	464a      	mov	r2, r9
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af27 	beq.w	8006c9e <_printf_float+0xbe>
 8006e50:	f108 0801 	add.w	r8, r8, #1
 8006e54:	e7e6      	b.n	8006e24 <_printf_float+0x244>
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dc39      	bgt.n	8006ed0 <_printf_float+0x2f0>
 8006e5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <_printf_float+0x2ec>)
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	f43f af19 	beq.w	8006c9e <_printf_float+0xbe>
 8006e6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d102      	bne.n	8006e7a <_printf_float+0x29a>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	d5d8      	bpl.n	8006e2c <_printf_float+0x24c>
 8006e7a:	ee18 3a10 	vmov	r3, s16
 8006e7e:	4652      	mov	r2, sl
 8006e80:	4631      	mov	r1, r6
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	f43f af09 	beq.w	8006c9e <_printf_float+0xbe>
 8006e8c:	f04f 0900 	mov.w	r9, #0
 8006e90:	f104 0a1a 	add.w	sl, r4, #26
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	425b      	negs	r3, r3
 8006e98:	454b      	cmp	r3, r9
 8006e9a:	dc01      	bgt.n	8006ea0 <_printf_float+0x2c0>
 8006e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9e:	e792      	b.n	8006dc6 <_printf_float+0x1e6>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4652      	mov	r2, sl
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f aef7 	beq.w	8006c9e <_printf_float+0xbe>
 8006eb0:	f109 0901 	add.w	r9, r9, #1
 8006eb4:	e7ee      	b.n	8006e94 <_printf_float+0x2b4>
 8006eb6:	bf00      	nop
 8006eb8:	7fefffff 	.word	0x7fefffff
 8006ebc:	0801d0e0 	.word	0x0801d0e0
 8006ec0:	0801d0e4 	.word	0x0801d0e4
 8006ec4:	0801d0e8 	.word	0x0801d0e8
 8006ec8:	0801d0ec 	.word	0x0801d0ec
 8006ecc:	0801d0f0 	.word	0x0801d0f0
 8006ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	bfa8      	it	ge
 8006ed8:	461a      	movge	r2, r3
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	4691      	mov	r9, r2
 8006ede:	dc37      	bgt.n	8006f50 <_printf_float+0x370>
 8006ee0:	f04f 0b00 	mov.w	fp, #0
 8006ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee8:	f104 021a 	add.w	r2, r4, #26
 8006eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	eba3 0309 	sub.w	r3, r3, r9
 8006ef4:	455b      	cmp	r3, fp
 8006ef6:	dc33      	bgt.n	8006f60 <_printf_float+0x380>
 8006ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006efc:	429a      	cmp	r2, r3
 8006efe:	db3b      	blt.n	8006f78 <_printf_float+0x398>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07da      	lsls	r2, r3, #31
 8006f04:	d438      	bmi.n	8006f78 <_printf_float+0x398>
 8006f06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f0a:	eba2 0903 	sub.w	r9, r2, r3
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	1ad2      	subs	r2, r2, r3
 8006f12:	4591      	cmp	r9, r2
 8006f14:	bfa8      	it	ge
 8006f16:	4691      	movge	r9, r2
 8006f18:	f1b9 0f00 	cmp.w	r9, #0
 8006f1c:	dc35      	bgt.n	8006f8a <_printf_float+0x3aa>
 8006f1e:	f04f 0800 	mov.w	r8, #0
 8006f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f26:	f104 0a1a 	add.w	sl, r4, #26
 8006f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	eba3 0309 	sub.w	r3, r3, r9
 8006f34:	4543      	cmp	r3, r8
 8006f36:	f77f af79 	ble.w	8006e2c <_printf_float+0x24c>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f aeaa 	beq.w	8006c9e <_printf_float+0xbe>
 8006f4a:	f108 0801 	add.w	r8, r8, #1
 8006f4e:	e7ec      	b.n	8006f2a <_printf_float+0x34a>
 8006f50:	4613      	mov	r3, r2
 8006f52:	4631      	mov	r1, r6
 8006f54:	4642      	mov	r2, r8
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d1c0      	bne.n	8006ee0 <_printf_float+0x300>
 8006f5e:	e69e      	b.n	8006c9e <_printf_float+0xbe>
 8006f60:	2301      	movs	r3, #1
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	9205      	str	r2, [sp, #20]
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f ae97 	beq.w	8006c9e <_printf_float+0xbe>
 8006f70:	9a05      	ldr	r2, [sp, #20]
 8006f72:	f10b 0b01 	add.w	fp, fp, #1
 8006f76:	e7b9      	b.n	8006eec <_printf_float+0x30c>
 8006f78:	ee18 3a10 	vmov	r3, s16
 8006f7c:	4652      	mov	r2, sl
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	d1be      	bne.n	8006f06 <_printf_float+0x326>
 8006f88:	e689      	b.n	8006c9e <_printf_float+0xbe>
 8006f8a:	9a05      	ldr	r2, [sp, #20]
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	4442      	add	r2, r8
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	d1c1      	bne.n	8006f1e <_printf_float+0x33e>
 8006f9a:	e680      	b.n	8006c9e <_printf_float+0xbe>
 8006f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9e:	2a01      	cmp	r2, #1
 8006fa0:	dc01      	bgt.n	8006fa6 <_printf_float+0x3c6>
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d53a      	bpl.n	800701c <_printf_float+0x43c>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4642      	mov	r2, r8
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae74 	beq.w	8006c9e <_printf_float+0xbe>
 8006fb6:	ee18 3a10 	vmov	r3, s16
 8006fba:	4652      	mov	r2, sl
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f ae6b 	beq.w	8006c9e <_printf_float+0xbe>
 8006fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006fd4:	f7f9 fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd8:	b9d8      	cbnz	r0, 8007012 <_printf_float+0x432>
 8006fda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006fde:	f108 0201 	add.w	r2, r8, #1
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d10e      	bne.n	800700a <_printf_float+0x42a>
 8006fec:	e657      	b.n	8006c9e <_printf_float+0xbe>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4652      	mov	r2, sl
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f ae50 	beq.w	8006c9e <_printf_float+0xbe>
 8006ffe:	f108 0801 	add.w	r8, r8, #1
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	3b01      	subs	r3, #1
 8007006:	4543      	cmp	r3, r8
 8007008:	dcf1      	bgt.n	8006fee <_printf_float+0x40e>
 800700a:	464b      	mov	r3, r9
 800700c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007010:	e6da      	b.n	8006dc8 <_printf_float+0x1e8>
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	f104 0a1a 	add.w	sl, r4, #26
 800701a:	e7f2      	b.n	8007002 <_printf_float+0x422>
 800701c:	2301      	movs	r3, #1
 800701e:	4642      	mov	r2, r8
 8007020:	e7df      	b.n	8006fe2 <_printf_float+0x402>
 8007022:	2301      	movs	r3, #1
 8007024:	464a      	mov	r2, r9
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f ae36 	beq.w	8006c9e <_printf_float+0xbe>
 8007032:	f108 0801 	add.w	r8, r8, #1
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800703a:	1a5b      	subs	r3, r3, r1
 800703c:	4543      	cmp	r3, r8
 800703e:	dcf0      	bgt.n	8007022 <_printf_float+0x442>
 8007040:	e6f8      	b.n	8006e34 <_printf_float+0x254>
 8007042:	f04f 0800 	mov.w	r8, #0
 8007046:	f104 0919 	add.w	r9, r4, #25
 800704a:	e7f4      	b.n	8007036 <_printf_float+0x456>

0800704c <_printf_common>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	4616      	mov	r6, r2
 8007052:	4699      	mov	r9, r3
 8007054:	688a      	ldr	r2, [r1, #8]
 8007056:	690b      	ldr	r3, [r1, #16]
 8007058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800705c:	4293      	cmp	r3, r2
 800705e:	bfb8      	it	lt
 8007060:	4613      	movlt	r3, r2
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007068:	4607      	mov	r7, r0
 800706a:	460c      	mov	r4, r1
 800706c:	b10a      	cbz	r2, 8007072 <_printf_common+0x26>
 800706e:	3301      	adds	r3, #1
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	0699      	lsls	r1, r3, #26
 8007076:	bf42      	ittt	mi
 8007078:	6833      	ldrmi	r3, [r6, #0]
 800707a:	3302      	addmi	r3, #2
 800707c:	6033      	strmi	r3, [r6, #0]
 800707e:	6825      	ldr	r5, [r4, #0]
 8007080:	f015 0506 	ands.w	r5, r5, #6
 8007084:	d106      	bne.n	8007094 <_printf_common+0x48>
 8007086:	f104 0a19 	add.w	sl, r4, #25
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	6832      	ldr	r2, [r6, #0]
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	42ab      	cmp	r3, r5
 8007092:	dc26      	bgt.n	80070e2 <_printf_common+0x96>
 8007094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007098:	1e13      	subs	r3, r2, #0
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	bf18      	it	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	0692      	lsls	r2, r2, #26
 80070a2:	d42b      	bmi.n	80070fc <_printf_common+0xb0>
 80070a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070a8:	4649      	mov	r1, r9
 80070aa:	4638      	mov	r0, r7
 80070ac:	47c0      	blx	r8
 80070ae:	3001      	adds	r0, #1
 80070b0:	d01e      	beq.n	80070f0 <_printf_common+0xa4>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	6922      	ldr	r2, [r4, #16]
 80070b6:	f003 0306 	and.w	r3, r3, #6
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	bf02      	ittt	eq
 80070be:	68e5      	ldreq	r5, [r4, #12]
 80070c0:	6833      	ldreq	r3, [r6, #0]
 80070c2:	1aed      	subeq	r5, r5, r3
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	bf0c      	ite	eq
 80070c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070cc:	2500      	movne	r5, #0
 80070ce:	4293      	cmp	r3, r2
 80070d0:	bfc4      	itt	gt
 80070d2:	1a9b      	subgt	r3, r3, r2
 80070d4:	18ed      	addgt	r5, r5, r3
 80070d6:	2600      	movs	r6, #0
 80070d8:	341a      	adds	r4, #26
 80070da:	42b5      	cmp	r5, r6
 80070dc:	d11a      	bne.n	8007114 <_printf_common+0xc8>
 80070de:	2000      	movs	r0, #0
 80070e0:	e008      	b.n	80070f4 <_printf_common+0xa8>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4652      	mov	r2, sl
 80070e6:	4649      	mov	r1, r9
 80070e8:	4638      	mov	r0, r7
 80070ea:	47c0      	blx	r8
 80070ec:	3001      	adds	r0, #1
 80070ee:	d103      	bne.n	80070f8 <_printf_common+0xac>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f8:	3501      	adds	r5, #1
 80070fa:	e7c6      	b.n	800708a <_printf_common+0x3e>
 80070fc:	18e1      	adds	r1, r4, r3
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	2030      	movs	r0, #48	; 0x30
 8007102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007106:	4422      	add	r2, r4
 8007108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800710c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007110:	3302      	adds	r3, #2
 8007112:	e7c7      	b.n	80070a4 <_printf_common+0x58>
 8007114:	2301      	movs	r3, #1
 8007116:	4622      	mov	r2, r4
 8007118:	4649      	mov	r1, r9
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	3001      	adds	r0, #1
 8007120:	d0e6      	beq.n	80070f0 <_printf_common+0xa4>
 8007122:	3601      	adds	r6, #1
 8007124:	e7d9      	b.n	80070da <_printf_common+0x8e>
	...

08007128 <_printf_i>:
 8007128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	7e0f      	ldrb	r7, [r1, #24]
 800712e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007130:	2f78      	cmp	r7, #120	; 0x78
 8007132:	4691      	mov	r9, r2
 8007134:	4680      	mov	r8, r0
 8007136:	460c      	mov	r4, r1
 8007138:	469a      	mov	sl, r3
 800713a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800713e:	d807      	bhi.n	8007150 <_printf_i+0x28>
 8007140:	2f62      	cmp	r7, #98	; 0x62
 8007142:	d80a      	bhi.n	800715a <_printf_i+0x32>
 8007144:	2f00      	cmp	r7, #0
 8007146:	f000 80d4 	beq.w	80072f2 <_printf_i+0x1ca>
 800714a:	2f58      	cmp	r7, #88	; 0x58
 800714c:	f000 80c0 	beq.w	80072d0 <_printf_i+0x1a8>
 8007150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007158:	e03a      	b.n	80071d0 <_printf_i+0xa8>
 800715a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800715e:	2b15      	cmp	r3, #21
 8007160:	d8f6      	bhi.n	8007150 <_printf_i+0x28>
 8007162:	a101      	add	r1, pc, #4	; (adr r1, 8007168 <_printf_i+0x40>)
 8007164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007168:	080071c1 	.word	0x080071c1
 800716c:	080071d5 	.word	0x080071d5
 8007170:	08007151 	.word	0x08007151
 8007174:	08007151 	.word	0x08007151
 8007178:	08007151 	.word	0x08007151
 800717c:	08007151 	.word	0x08007151
 8007180:	080071d5 	.word	0x080071d5
 8007184:	08007151 	.word	0x08007151
 8007188:	08007151 	.word	0x08007151
 800718c:	08007151 	.word	0x08007151
 8007190:	08007151 	.word	0x08007151
 8007194:	080072d9 	.word	0x080072d9
 8007198:	08007201 	.word	0x08007201
 800719c:	08007293 	.word	0x08007293
 80071a0:	08007151 	.word	0x08007151
 80071a4:	08007151 	.word	0x08007151
 80071a8:	080072fb 	.word	0x080072fb
 80071ac:	08007151 	.word	0x08007151
 80071b0:	08007201 	.word	0x08007201
 80071b4:	08007151 	.word	0x08007151
 80071b8:	08007151 	.word	0x08007151
 80071bc:	0800729b 	.word	0x0800729b
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	1d1a      	adds	r2, r3, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	602a      	str	r2, [r5, #0]
 80071c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071d0:	2301      	movs	r3, #1
 80071d2:	e09f      	b.n	8007314 <_printf_i+0x1ec>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	0607      	lsls	r7, r0, #24
 80071da:	f103 0104 	add.w	r1, r3, #4
 80071de:	6029      	str	r1, [r5, #0]
 80071e0:	d501      	bpl.n	80071e6 <_printf_i+0xbe>
 80071e2:	681e      	ldr	r6, [r3, #0]
 80071e4:	e003      	b.n	80071ee <_printf_i+0xc6>
 80071e6:	0646      	lsls	r6, r0, #25
 80071e8:	d5fb      	bpl.n	80071e2 <_printf_i+0xba>
 80071ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	da03      	bge.n	80071fa <_printf_i+0xd2>
 80071f2:	232d      	movs	r3, #45	; 0x2d
 80071f4:	4276      	negs	r6, r6
 80071f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fa:	485a      	ldr	r0, [pc, #360]	; (8007364 <_printf_i+0x23c>)
 80071fc:	230a      	movs	r3, #10
 80071fe:	e012      	b.n	8007226 <_printf_i+0xfe>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	6820      	ldr	r0, [r4, #0]
 8007204:	1d19      	adds	r1, r3, #4
 8007206:	6029      	str	r1, [r5, #0]
 8007208:	0605      	lsls	r5, r0, #24
 800720a:	d501      	bpl.n	8007210 <_printf_i+0xe8>
 800720c:	681e      	ldr	r6, [r3, #0]
 800720e:	e002      	b.n	8007216 <_printf_i+0xee>
 8007210:	0641      	lsls	r1, r0, #25
 8007212:	d5fb      	bpl.n	800720c <_printf_i+0xe4>
 8007214:	881e      	ldrh	r6, [r3, #0]
 8007216:	4853      	ldr	r0, [pc, #332]	; (8007364 <_printf_i+0x23c>)
 8007218:	2f6f      	cmp	r7, #111	; 0x6f
 800721a:	bf0c      	ite	eq
 800721c:	2308      	moveq	r3, #8
 800721e:	230a      	movne	r3, #10
 8007220:	2100      	movs	r1, #0
 8007222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007226:	6865      	ldr	r5, [r4, #4]
 8007228:	60a5      	str	r5, [r4, #8]
 800722a:	2d00      	cmp	r5, #0
 800722c:	bfa2      	ittt	ge
 800722e:	6821      	ldrge	r1, [r4, #0]
 8007230:	f021 0104 	bicge.w	r1, r1, #4
 8007234:	6021      	strge	r1, [r4, #0]
 8007236:	b90e      	cbnz	r6, 800723c <_printf_i+0x114>
 8007238:	2d00      	cmp	r5, #0
 800723a:	d04b      	beq.n	80072d4 <_printf_i+0x1ac>
 800723c:	4615      	mov	r5, r2
 800723e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007242:	fb03 6711 	mls	r7, r3, r1, r6
 8007246:	5dc7      	ldrb	r7, [r0, r7]
 8007248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800724c:	4637      	mov	r7, r6
 800724e:	42bb      	cmp	r3, r7
 8007250:	460e      	mov	r6, r1
 8007252:	d9f4      	bls.n	800723e <_printf_i+0x116>
 8007254:	2b08      	cmp	r3, #8
 8007256:	d10b      	bne.n	8007270 <_printf_i+0x148>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	07de      	lsls	r6, r3, #31
 800725c:	d508      	bpl.n	8007270 <_printf_i+0x148>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	6861      	ldr	r1, [r4, #4]
 8007262:	4299      	cmp	r1, r3
 8007264:	bfde      	ittt	le
 8007266:	2330      	movle	r3, #48	; 0x30
 8007268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800726c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007270:	1b52      	subs	r2, r2, r5
 8007272:	6122      	str	r2, [r4, #16]
 8007274:	f8cd a000 	str.w	sl, [sp]
 8007278:	464b      	mov	r3, r9
 800727a:	aa03      	add	r2, sp, #12
 800727c:	4621      	mov	r1, r4
 800727e:	4640      	mov	r0, r8
 8007280:	f7ff fee4 	bl	800704c <_printf_common>
 8007284:	3001      	adds	r0, #1
 8007286:	d14a      	bne.n	800731e <_printf_i+0x1f6>
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	b004      	add	sp, #16
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f043 0320 	orr.w	r3, r3, #32
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	4833      	ldr	r0, [pc, #204]	; (8007368 <_printf_i+0x240>)
 800729c:	2778      	movs	r7, #120	; 0x78
 800729e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	6829      	ldr	r1, [r5, #0]
 80072a6:	061f      	lsls	r7, r3, #24
 80072a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072ac:	d402      	bmi.n	80072b4 <_printf_i+0x18c>
 80072ae:	065f      	lsls	r7, r3, #25
 80072b0:	bf48      	it	mi
 80072b2:	b2b6      	uxthmi	r6, r6
 80072b4:	07df      	lsls	r7, r3, #31
 80072b6:	bf48      	it	mi
 80072b8:	f043 0320 	orrmi.w	r3, r3, #32
 80072bc:	6029      	str	r1, [r5, #0]
 80072be:	bf48      	it	mi
 80072c0:	6023      	strmi	r3, [r4, #0]
 80072c2:	b91e      	cbnz	r6, 80072cc <_printf_i+0x1a4>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	f023 0320 	bic.w	r3, r3, #32
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	2310      	movs	r3, #16
 80072ce:	e7a7      	b.n	8007220 <_printf_i+0xf8>
 80072d0:	4824      	ldr	r0, [pc, #144]	; (8007364 <_printf_i+0x23c>)
 80072d2:	e7e4      	b.n	800729e <_printf_i+0x176>
 80072d4:	4615      	mov	r5, r2
 80072d6:	e7bd      	b.n	8007254 <_printf_i+0x12c>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	6826      	ldr	r6, [r4, #0]
 80072dc:	6961      	ldr	r1, [r4, #20]
 80072de:	1d18      	adds	r0, r3, #4
 80072e0:	6028      	str	r0, [r5, #0]
 80072e2:	0635      	lsls	r5, r6, #24
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	d501      	bpl.n	80072ec <_printf_i+0x1c4>
 80072e8:	6019      	str	r1, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <_printf_i+0x1ca>
 80072ec:	0670      	lsls	r0, r6, #25
 80072ee:	d5fb      	bpl.n	80072e8 <_printf_i+0x1c0>
 80072f0:	8019      	strh	r1, [r3, #0]
 80072f2:	2300      	movs	r3, #0
 80072f4:	6123      	str	r3, [r4, #16]
 80072f6:	4615      	mov	r5, r2
 80072f8:	e7bc      	b.n	8007274 <_printf_i+0x14c>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	602a      	str	r2, [r5, #0]
 8007300:	681d      	ldr	r5, [r3, #0]
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	2100      	movs	r1, #0
 8007306:	4628      	mov	r0, r5
 8007308:	f7f8 ff62 	bl	80001d0 <memchr>
 800730c:	b108      	cbz	r0, 8007312 <_printf_i+0x1ea>
 800730e:	1b40      	subs	r0, r0, r5
 8007310:	6060      	str	r0, [r4, #4]
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	2300      	movs	r3, #0
 8007318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800731c:	e7aa      	b.n	8007274 <_printf_i+0x14c>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	462a      	mov	r2, r5
 8007322:	4649      	mov	r1, r9
 8007324:	4640      	mov	r0, r8
 8007326:	47d0      	blx	sl
 8007328:	3001      	adds	r0, #1
 800732a:	d0ad      	beq.n	8007288 <_printf_i+0x160>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	079b      	lsls	r3, r3, #30
 8007330:	d413      	bmi.n	800735a <_printf_i+0x232>
 8007332:	68e0      	ldr	r0, [r4, #12]
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	4298      	cmp	r0, r3
 8007338:	bfb8      	it	lt
 800733a:	4618      	movlt	r0, r3
 800733c:	e7a6      	b.n	800728c <_printf_i+0x164>
 800733e:	2301      	movs	r3, #1
 8007340:	4632      	mov	r2, r6
 8007342:	4649      	mov	r1, r9
 8007344:	4640      	mov	r0, r8
 8007346:	47d0      	blx	sl
 8007348:	3001      	adds	r0, #1
 800734a:	d09d      	beq.n	8007288 <_printf_i+0x160>
 800734c:	3501      	adds	r5, #1
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	9903      	ldr	r1, [sp, #12]
 8007352:	1a5b      	subs	r3, r3, r1
 8007354:	42ab      	cmp	r3, r5
 8007356:	dcf2      	bgt.n	800733e <_printf_i+0x216>
 8007358:	e7eb      	b.n	8007332 <_printf_i+0x20a>
 800735a:	2500      	movs	r5, #0
 800735c:	f104 0619 	add.w	r6, r4, #25
 8007360:	e7f5      	b.n	800734e <_printf_i+0x226>
 8007362:	bf00      	nop
 8007364:	0801d0f2 	.word	0x0801d0f2
 8007368:	0801d103 	.word	0x0801d103

0800736c <std>:
 800736c:	2300      	movs	r3, #0
 800736e:	b510      	push	{r4, lr}
 8007370:	4604      	mov	r4, r0
 8007372:	e9c0 3300 	strd	r3, r3, [r0]
 8007376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800737a:	6083      	str	r3, [r0, #8]
 800737c:	8181      	strh	r1, [r0, #12]
 800737e:	6643      	str	r3, [r0, #100]	; 0x64
 8007380:	81c2      	strh	r2, [r0, #14]
 8007382:	6183      	str	r3, [r0, #24]
 8007384:	4619      	mov	r1, r3
 8007386:	2208      	movs	r2, #8
 8007388:	305c      	adds	r0, #92	; 0x5c
 800738a:	f000 f9e5 	bl	8007758 <memset>
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x38>)
 8007390:	6263      	str	r3, [r4, #36]	; 0x24
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <std+0x3c>)
 8007394:	62a3      	str	r3, [r4, #40]	; 0x28
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <std+0x40>)
 8007398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <std+0x44>)
 800739c:	6224      	str	r4, [r4, #32]
 800739e:	6323      	str	r3, [r4, #48]	; 0x30
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	bf00      	nop
 80073a4:	080075a9 	.word	0x080075a9
 80073a8:	080075cb 	.word	0x080075cb
 80073ac:	08007603 	.word	0x08007603
 80073b0:	08007627 	.word	0x08007627

080073b4 <stdio_exit_handler>:
 80073b4:	4a02      	ldr	r2, [pc, #8]	; (80073c0 <stdio_exit_handler+0xc>)
 80073b6:	4903      	ldr	r1, [pc, #12]	; (80073c4 <stdio_exit_handler+0x10>)
 80073b8:	4803      	ldr	r0, [pc, #12]	; (80073c8 <stdio_exit_handler+0x14>)
 80073ba:	f000 b869 	b.w	8007490 <_fwalk_sglue>
 80073be:	bf00      	nop
 80073c0:	20000010 	.word	0x20000010
 80073c4:	080091d9 	.word	0x080091d9
 80073c8:	2000001c 	.word	0x2000001c

080073cc <cleanup_stdio>:
 80073cc:	6841      	ldr	r1, [r0, #4]
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <cleanup_stdio+0x34>)
 80073d0:	4299      	cmp	r1, r3
 80073d2:	b510      	push	{r4, lr}
 80073d4:	4604      	mov	r4, r0
 80073d6:	d001      	beq.n	80073dc <cleanup_stdio+0x10>
 80073d8:	f001 fefe 	bl	80091d8 <_fflush_r>
 80073dc:	68a1      	ldr	r1, [r4, #8]
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <cleanup_stdio+0x38>)
 80073e0:	4299      	cmp	r1, r3
 80073e2:	d002      	beq.n	80073ea <cleanup_stdio+0x1e>
 80073e4:	4620      	mov	r0, r4
 80073e6:	f001 fef7 	bl	80091d8 <_fflush_r>
 80073ea:	68e1      	ldr	r1, [r4, #12]
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <cleanup_stdio+0x3c>)
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d004      	beq.n	80073fc <cleanup_stdio+0x30>
 80073f2:	4620      	mov	r0, r4
 80073f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f8:	f001 beee 	b.w	80091d8 <_fflush_r>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	bf00      	nop
 8007400:	2000f3a4 	.word	0x2000f3a4
 8007404:	2000f40c 	.word	0x2000f40c
 8007408:	2000f474 	.word	0x2000f474

0800740c <global_stdio_init.part.0>:
 800740c:	b510      	push	{r4, lr}
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <global_stdio_init.part.0+0x30>)
 8007410:	4c0b      	ldr	r4, [pc, #44]	; (8007440 <global_stdio_init.part.0+0x34>)
 8007412:	4a0c      	ldr	r2, [pc, #48]	; (8007444 <global_stdio_init.part.0+0x38>)
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	4620      	mov	r0, r4
 8007418:	2200      	movs	r2, #0
 800741a:	2104      	movs	r1, #4
 800741c:	f7ff ffa6 	bl	800736c <std>
 8007420:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007424:	2201      	movs	r2, #1
 8007426:	2109      	movs	r1, #9
 8007428:	f7ff ffa0 	bl	800736c <std>
 800742c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007430:	2202      	movs	r2, #2
 8007432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007436:	2112      	movs	r1, #18
 8007438:	f7ff bf98 	b.w	800736c <std>
 800743c:	2000f4dc 	.word	0x2000f4dc
 8007440:	2000f3a4 	.word	0x2000f3a4
 8007444:	080073b5 	.word	0x080073b5

08007448 <__sfp_lock_acquire>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__sfp_lock_acquire+0x8>)
 800744a:	f000 ba01 	b.w	8007850 <__retarget_lock_acquire_recursive>
 800744e:	bf00      	nop
 8007450:	2000f4e5 	.word	0x2000f4e5

08007454 <__sfp_lock_release>:
 8007454:	4801      	ldr	r0, [pc, #4]	; (800745c <__sfp_lock_release+0x8>)
 8007456:	f000 b9fc 	b.w	8007852 <__retarget_lock_release_recursive>
 800745a:	bf00      	nop
 800745c:	2000f4e5 	.word	0x2000f4e5

08007460 <__sinit>:
 8007460:	b510      	push	{r4, lr}
 8007462:	4604      	mov	r4, r0
 8007464:	f7ff fff0 	bl	8007448 <__sfp_lock_acquire>
 8007468:	6a23      	ldr	r3, [r4, #32]
 800746a:	b11b      	cbz	r3, 8007474 <__sinit+0x14>
 800746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007470:	f7ff bff0 	b.w	8007454 <__sfp_lock_release>
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <__sinit+0x28>)
 8007476:	6223      	str	r3, [r4, #32]
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <__sinit+0x2c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f5      	bne.n	800746c <__sinit+0xc>
 8007480:	f7ff ffc4 	bl	800740c <global_stdio_init.part.0>
 8007484:	e7f2      	b.n	800746c <__sinit+0xc>
 8007486:	bf00      	nop
 8007488:	080073cd 	.word	0x080073cd
 800748c:	2000f4dc 	.word	0x2000f4dc

08007490 <_fwalk_sglue>:
 8007490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007494:	4607      	mov	r7, r0
 8007496:	4688      	mov	r8, r1
 8007498:	4614      	mov	r4, r2
 800749a:	2600      	movs	r6, #0
 800749c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074a0:	f1b9 0901 	subs.w	r9, r9, #1
 80074a4:	d505      	bpl.n	80074b2 <_fwalk_sglue+0x22>
 80074a6:	6824      	ldr	r4, [r4, #0]
 80074a8:	2c00      	cmp	r4, #0
 80074aa:	d1f7      	bne.n	800749c <_fwalk_sglue+0xc>
 80074ac:	4630      	mov	r0, r6
 80074ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d907      	bls.n	80074c8 <_fwalk_sglue+0x38>
 80074b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074bc:	3301      	adds	r3, #1
 80074be:	d003      	beq.n	80074c8 <_fwalk_sglue+0x38>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c0      	blx	r8
 80074c6:	4306      	orrs	r6, r0
 80074c8:	3568      	adds	r5, #104	; 0x68
 80074ca:	e7e9      	b.n	80074a0 <_fwalk_sglue+0x10>

080074cc <iprintf>:
 80074cc:	b40f      	push	{r0, r1, r2, r3}
 80074ce:	b507      	push	{r0, r1, r2, lr}
 80074d0:	4906      	ldr	r1, [pc, #24]	; (80074ec <iprintf+0x20>)
 80074d2:	ab04      	add	r3, sp, #16
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074da:	6881      	ldr	r1, [r0, #8]
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	f001 fcdb 	bl	8008e98 <_vfiprintf_r>
 80074e2:	b003      	add	sp, #12
 80074e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e8:	b004      	add	sp, #16
 80074ea:	4770      	bx	lr
 80074ec:	20000068 	.word	0x20000068

080074f0 <_puts_r>:
 80074f0:	6a03      	ldr	r3, [r0, #32]
 80074f2:	b570      	push	{r4, r5, r6, lr}
 80074f4:	6884      	ldr	r4, [r0, #8]
 80074f6:	4605      	mov	r5, r0
 80074f8:	460e      	mov	r6, r1
 80074fa:	b90b      	cbnz	r3, 8007500 <_puts_r+0x10>
 80074fc:	f7ff ffb0 	bl	8007460 <__sinit>
 8007500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007502:	07db      	lsls	r3, r3, #31
 8007504:	d405      	bmi.n	8007512 <_puts_r+0x22>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	0598      	lsls	r0, r3, #22
 800750a:	d402      	bmi.n	8007512 <_puts_r+0x22>
 800750c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750e:	f000 f99f 	bl	8007850 <__retarget_lock_acquire_recursive>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	0719      	lsls	r1, r3, #28
 8007516:	d513      	bpl.n	8007540 <_puts_r+0x50>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	b18b      	cbz	r3, 8007540 <_puts_r+0x50>
 800751c:	3e01      	subs	r6, #1
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007524:	3b01      	subs	r3, #1
 8007526:	60a3      	str	r3, [r4, #8]
 8007528:	b9e9      	cbnz	r1, 8007566 <_puts_r+0x76>
 800752a:	2b00      	cmp	r3, #0
 800752c:	da2e      	bge.n	800758c <_puts_r+0x9c>
 800752e:	4622      	mov	r2, r4
 8007530:	210a      	movs	r1, #10
 8007532:	4628      	mov	r0, r5
 8007534:	f000 f87b 	bl	800762e <__swbuf_r>
 8007538:	3001      	adds	r0, #1
 800753a:	d007      	beq.n	800754c <_puts_r+0x5c>
 800753c:	250a      	movs	r5, #10
 800753e:	e007      	b.n	8007550 <_puts_r+0x60>
 8007540:	4621      	mov	r1, r4
 8007542:	4628      	mov	r0, r5
 8007544:	f000 f8b0 	bl	80076a8 <__swsetup_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	d0e7      	beq.n	800751c <_puts_r+0x2c>
 800754c:	f04f 35ff 	mov.w	r5, #4294967295
 8007550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007552:	07da      	lsls	r2, r3, #31
 8007554:	d405      	bmi.n	8007562 <_puts_r+0x72>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	059b      	lsls	r3, r3, #22
 800755a:	d402      	bmi.n	8007562 <_puts_r+0x72>
 800755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755e:	f000 f978 	bl	8007852 <__retarget_lock_release_recursive>
 8007562:	4628      	mov	r0, r5
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	2b00      	cmp	r3, #0
 8007568:	da04      	bge.n	8007574 <_puts_r+0x84>
 800756a:	69a2      	ldr	r2, [r4, #24]
 800756c:	429a      	cmp	r2, r3
 800756e:	dc06      	bgt.n	800757e <_puts_r+0x8e>
 8007570:	290a      	cmp	r1, #10
 8007572:	d004      	beq.n	800757e <_puts_r+0x8e>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	7019      	strb	r1, [r3, #0]
 800757c:	e7cf      	b.n	800751e <_puts_r+0x2e>
 800757e:	4622      	mov	r2, r4
 8007580:	4628      	mov	r0, r5
 8007582:	f000 f854 	bl	800762e <__swbuf_r>
 8007586:	3001      	adds	r0, #1
 8007588:	d1c9      	bne.n	800751e <_puts_r+0x2e>
 800758a:	e7df      	b.n	800754c <_puts_r+0x5c>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	250a      	movs	r5, #10
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	701d      	strb	r5, [r3, #0]
 8007596:	e7db      	b.n	8007550 <_puts_r+0x60>

08007598 <puts>:
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <puts+0xc>)
 800759a:	4601      	mov	r1, r0
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f7ff bfa7 	b.w	80074f0 <_puts_r>
 80075a2:	bf00      	nop
 80075a4:	20000068 	.word	0x20000068

080075a8 <__sread>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	460c      	mov	r4, r1
 80075ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b0:	f000 f900 	bl	80077b4 <_read_r>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	bfab      	itete	ge
 80075b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ba:	89a3      	ldrhlt	r3, [r4, #12]
 80075bc:	181b      	addge	r3, r3, r0
 80075be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075c2:	bfac      	ite	ge
 80075c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075c6:	81a3      	strhlt	r3, [r4, #12]
 80075c8:	bd10      	pop	{r4, pc}

080075ca <__swrite>:
 80075ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ce:	461f      	mov	r7, r3
 80075d0:	898b      	ldrh	r3, [r1, #12]
 80075d2:	05db      	lsls	r3, r3, #23
 80075d4:	4605      	mov	r5, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	4616      	mov	r6, r2
 80075da:	d505      	bpl.n	80075e8 <__swrite+0x1e>
 80075dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e0:	2302      	movs	r3, #2
 80075e2:	2200      	movs	r2, #0
 80075e4:	f000 f8d4 	bl	8007790 <_lseek_r>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	4632      	mov	r2, r6
 80075f6:	463b      	mov	r3, r7
 80075f8:	4628      	mov	r0, r5
 80075fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fe:	f000 b8eb 	b.w	80077d8 <_write_r>

08007602 <__sseek>:
 8007602:	b510      	push	{r4, lr}
 8007604:	460c      	mov	r4, r1
 8007606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760a:	f000 f8c1 	bl	8007790 <_lseek_r>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	bf15      	itete	ne
 8007614:	6560      	strne	r0, [r4, #84]	; 0x54
 8007616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800761a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800761e:	81a3      	strheq	r3, [r4, #12]
 8007620:	bf18      	it	ne
 8007622:	81a3      	strhne	r3, [r4, #12]
 8007624:	bd10      	pop	{r4, pc}

08007626 <__sclose>:
 8007626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800762a:	f000 b8a1 	b.w	8007770 <_close_r>

0800762e <__swbuf_r>:
 800762e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007630:	460e      	mov	r6, r1
 8007632:	4614      	mov	r4, r2
 8007634:	4605      	mov	r5, r0
 8007636:	b118      	cbz	r0, 8007640 <__swbuf_r+0x12>
 8007638:	6a03      	ldr	r3, [r0, #32]
 800763a:	b90b      	cbnz	r3, 8007640 <__swbuf_r+0x12>
 800763c:	f7ff ff10 	bl	8007460 <__sinit>
 8007640:	69a3      	ldr	r3, [r4, #24]
 8007642:	60a3      	str	r3, [r4, #8]
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	071a      	lsls	r2, r3, #28
 8007648:	d525      	bpl.n	8007696 <__swbuf_r+0x68>
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	b31b      	cbz	r3, 8007696 <__swbuf_r+0x68>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	6922      	ldr	r2, [r4, #16]
 8007652:	1a98      	subs	r0, r3, r2
 8007654:	6963      	ldr	r3, [r4, #20]
 8007656:	b2f6      	uxtb	r6, r6
 8007658:	4283      	cmp	r3, r0
 800765a:	4637      	mov	r7, r6
 800765c:	dc04      	bgt.n	8007668 <__swbuf_r+0x3a>
 800765e:	4621      	mov	r1, r4
 8007660:	4628      	mov	r0, r5
 8007662:	f001 fdb9 	bl	80091d8 <_fflush_r>
 8007666:	b9e0      	cbnz	r0, 80076a2 <__swbuf_r+0x74>
 8007668:	68a3      	ldr	r3, [r4, #8]
 800766a:	3b01      	subs	r3, #1
 800766c:	60a3      	str	r3, [r4, #8]
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	6022      	str	r2, [r4, #0]
 8007674:	701e      	strb	r6, [r3, #0]
 8007676:	6962      	ldr	r2, [r4, #20]
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	429a      	cmp	r2, r3
 800767c:	d004      	beq.n	8007688 <__swbuf_r+0x5a>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	07db      	lsls	r3, r3, #31
 8007682:	d506      	bpl.n	8007692 <__swbuf_r+0x64>
 8007684:	2e0a      	cmp	r6, #10
 8007686:	d104      	bne.n	8007692 <__swbuf_r+0x64>
 8007688:	4621      	mov	r1, r4
 800768a:	4628      	mov	r0, r5
 800768c:	f001 fda4 	bl	80091d8 <_fflush_r>
 8007690:	b938      	cbnz	r0, 80076a2 <__swbuf_r+0x74>
 8007692:	4638      	mov	r0, r7
 8007694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 f805 	bl	80076a8 <__swsetup_r>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d0d5      	beq.n	800764e <__swbuf_r+0x20>
 80076a2:	f04f 37ff 	mov.w	r7, #4294967295
 80076a6:	e7f4      	b.n	8007692 <__swbuf_r+0x64>

080076a8 <__swsetup_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4b2a      	ldr	r3, [pc, #168]	; (8007754 <__swsetup_r+0xac>)
 80076ac:	4605      	mov	r5, r0
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	460c      	mov	r4, r1
 80076b2:	b118      	cbz	r0, 80076bc <__swsetup_r+0x14>
 80076b4:	6a03      	ldr	r3, [r0, #32]
 80076b6:	b90b      	cbnz	r3, 80076bc <__swsetup_r+0x14>
 80076b8:	f7ff fed2 	bl	8007460 <__sinit>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076c2:	0718      	lsls	r0, r3, #28
 80076c4:	d422      	bmi.n	800770c <__swsetup_r+0x64>
 80076c6:	06d9      	lsls	r1, r3, #27
 80076c8:	d407      	bmi.n	80076da <__swsetup_r+0x32>
 80076ca:	2309      	movs	r3, #9
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	e034      	b.n	8007744 <__swsetup_r+0x9c>
 80076da:	0758      	lsls	r0, r3, #29
 80076dc:	d512      	bpl.n	8007704 <__swsetup_r+0x5c>
 80076de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076e0:	b141      	cbz	r1, 80076f4 <__swsetup_r+0x4c>
 80076e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076e6:	4299      	cmp	r1, r3
 80076e8:	d002      	beq.n	80076f0 <__swsetup_r+0x48>
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 ff2e 	bl	800854c <_free_r>
 80076f0:	2300      	movs	r3, #0
 80076f2:	6363      	str	r3, [r4, #52]	; 0x34
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	2300      	movs	r3, #0
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f043 0308 	orr.w	r3, r3, #8
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	b94b      	cbnz	r3, 8007724 <__swsetup_r+0x7c>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771a:	d003      	beq.n	8007724 <__swsetup_r+0x7c>
 800771c:	4621      	mov	r1, r4
 800771e:	4628      	mov	r0, r5
 8007720:	f001 fda8 	bl	8009274 <__smakebuf_r>
 8007724:	89a0      	ldrh	r0, [r4, #12]
 8007726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800772a:	f010 0301 	ands.w	r3, r0, #1
 800772e:	d00a      	beq.n	8007746 <__swsetup_r+0x9e>
 8007730:	2300      	movs	r3, #0
 8007732:	60a3      	str	r3, [r4, #8]
 8007734:	6963      	ldr	r3, [r4, #20]
 8007736:	425b      	negs	r3, r3
 8007738:	61a3      	str	r3, [r4, #24]
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	b943      	cbnz	r3, 8007750 <__swsetup_r+0xa8>
 800773e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007742:	d1c4      	bne.n	80076ce <__swsetup_r+0x26>
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	0781      	lsls	r1, r0, #30
 8007748:	bf58      	it	pl
 800774a:	6963      	ldrpl	r3, [r4, #20]
 800774c:	60a3      	str	r3, [r4, #8]
 800774e:	e7f4      	b.n	800773a <__swsetup_r+0x92>
 8007750:	2000      	movs	r0, #0
 8007752:	e7f7      	b.n	8007744 <__swsetup_r+0x9c>
 8007754:	20000068 	.word	0x20000068

08007758 <memset>:
 8007758:	4402      	add	r2, r0
 800775a:	4603      	mov	r3, r0
 800775c:	4293      	cmp	r3, r2
 800775e:	d100      	bne.n	8007762 <memset+0xa>
 8007760:	4770      	bx	lr
 8007762:	f803 1b01 	strb.w	r1, [r3], #1
 8007766:	e7f9      	b.n	800775c <memset+0x4>

08007768 <_localeconv_r>:
 8007768:	4800      	ldr	r0, [pc, #0]	; (800776c <_localeconv_r+0x4>)
 800776a:	4770      	bx	lr
 800776c:	2000015c 	.word	0x2000015c

08007770 <_close_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d06      	ldr	r5, [pc, #24]	; (800778c <_close_r+0x1c>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	f7fa f8d3 	bl	8001926 <_close>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d102      	bne.n	800778a <_close_r+0x1a>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b103      	cbz	r3, 800778a <_close_r+0x1a>
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	2000f4e0 	.word	0x2000f4e0

08007790 <_lseek_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d07      	ldr	r5, [pc, #28]	; (80077b0 <_lseek_r+0x20>)
 8007794:	4604      	mov	r4, r0
 8007796:	4608      	mov	r0, r1
 8007798:	4611      	mov	r1, r2
 800779a:	2200      	movs	r2, #0
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f7fa f8e8 	bl	8001974 <_lseek>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_lseek_r+0x1e>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_lseek_r+0x1e>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	2000f4e0 	.word	0x2000f4e0

080077b4 <_read_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	; (80077d4 <_read_r+0x20>)
 80077b8:	4604      	mov	r4, r0
 80077ba:	4608      	mov	r0, r1
 80077bc:	4611      	mov	r1, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f7fa f892 	bl	80018ec <_read>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_read_r+0x1e>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_read_r+0x1e>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	2000f4e0 	.word	0x2000f4e0

080077d8 <_write_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	; (80077f8 <_write_r+0x20>)
 80077dc:	4604      	mov	r4, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	602a      	str	r2, [r5, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7f9 fe64 	bl	80014b4 <_write>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_write_r+0x1e>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_write_r+0x1e>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	2000f4e0 	.word	0x2000f4e0

080077fc <__errno>:
 80077fc:	4b01      	ldr	r3, [pc, #4]	; (8007804 <__errno+0x8>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000068 	.word	0x20000068

08007808 <__libc_init_array>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4d0d      	ldr	r5, [pc, #52]	; (8007840 <__libc_init_array+0x38>)
 800780c:	4c0d      	ldr	r4, [pc, #52]	; (8007844 <__libc_init_array+0x3c>)
 800780e:	1b64      	subs	r4, r4, r5
 8007810:	10a4      	asrs	r4, r4, #2
 8007812:	2600      	movs	r6, #0
 8007814:	42a6      	cmp	r6, r4
 8007816:	d109      	bne.n	800782c <__libc_init_array+0x24>
 8007818:	4d0b      	ldr	r5, [pc, #44]	; (8007848 <__libc_init_array+0x40>)
 800781a:	4c0c      	ldr	r4, [pc, #48]	; (800784c <__libc_init_array+0x44>)
 800781c:	f001 fff8 	bl	8009810 <_init>
 8007820:	1b64      	subs	r4, r4, r5
 8007822:	10a4      	asrs	r4, r4, #2
 8007824:	2600      	movs	r6, #0
 8007826:	42a6      	cmp	r6, r4
 8007828:	d105      	bne.n	8007836 <__libc_init_array+0x2e>
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007830:	4798      	blx	r3
 8007832:	3601      	adds	r6, #1
 8007834:	e7ee      	b.n	8007814 <__libc_init_array+0xc>
 8007836:	f855 3b04 	ldr.w	r3, [r5], #4
 800783a:	4798      	blx	r3
 800783c:	3601      	adds	r6, #1
 800783e:	e7f2      	b.n	8007826 <__libc_init_array+0x1e>
 8007840:	0801d45c 	.word	0x0801d45c
 8007844:	0801d45c 	.word	0x0801d45c
 8007848:	0801d45c 	.word	0x0801d45c
 800784c:	0801d460 	.word	0x0801d460

08007850 <__retarget_lock_acquire_recursive>:
 8007850:	4770      	bx	lr

08007852 <__retarget_lock_release_recursive>:
 8007852:	4770      	bx	lr

08007854 <quorem>:
 8007854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	6903      	ldr	r3, [r0, #16]
 800785a:	690c      	ldr	r4, [r1, #16]
 800785c:	42a3      	cmp	r3, r4
 800785e:	4607      	mov	r7, r0
 8007860:	db7e      	blt.n	8007960 <quorem+0x10c>
 8007862:	3c01      	subs	r4, #1
 8007864:	f101 0814 	add.w	r8, r1, #20
 8007868:	f100 0514 	add.w	r5, r0, #20
 800786c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800787a:	3301      	adds	r3, #1
 800787c:	429a      	cmp	r2, r3
 800787e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007882:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007886:	fbb2 f6f3 	udiv	r6, r2, r3
 800788a:	d331      	bcc.n	80078f0 <quorem+0x9c>
 800788c:	f04f 0e00 	mov.w	lr, #0
 8007890:	4640      	mov	r0, r8
 8007892:	46ac      	mov	ip, r5
 8007894:	46f2      	mov	sl, lr
 8007896:	f850 2b04 	ldr.w	r2, [r0], #4
 800789a:	b293      	uxth	r3, r2
 800789c:	fb06 e303 	mla	r3, r6, r3, lr
 80078a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078a4:	0c1a      	lsrs	r2, r3, #16
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	ebaa 0303 	sub.w	r3, sl, r3
 80078ac:	f8dc a000 	ldr.w	sl, [ip]
 80078b0:	fa13 f38a 	uxtah	r3, r3, sl
 80078b4:	fb06 220e 	mla	r2, r6, lr, r2
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	9b00      	ldr	r3, [sp, #0]
 80078bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078c0:	b292      	uxth	r2, r2
 80078c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80078ce:	4581      	cmp	r9, r0
 80078d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078d4:	f84c 3b04 	str.w	r3, [ip], #4
 80078d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078dc:	d2db      	bcs.n	8007896 <quorem+0x42>
 80078de:	f855 300b 	ldr.w	r3, [r5, fp]
 80078e2:	b92b      	cbnz	r3, 80078f0 <quorem+0x9c>
 80078e4:	9b01      	ldr	r3, [sp, #4]
 80078e6:	3b04      	subs	r3, #4
 80078e8:	429d      	cmp	r5, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	d32c      	bcc.n	8007948 <quorem+0xf4>
 80078ee:	613c      	str	r4, [r7, #16]
 80078f0:	4638      	mov	r0, r7
 80078f2:	f001 f9a7 	bl	8008c44 <__mcmp>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	db22      	blt.n	8007940 <quorem+0xec>
 80078fa:	3601      	adds	r6, #1
 80078fc:	4629      	mov	r1, r5
 80078fe:	2000      	movs	r0, #0
 8007900:	f858 2b04 	ldr.w	r2, [r8], #4
 8007904:	f8d1 c000 	ldr.w	ip, [r1]
 8007908:	b293      	uxth	r3, r2
 800790a:	1ac3      	subs	r3, r0, r3
 800790c:	0c12      	lsrs	r2, r2, #16
 800790e:	fa13 f38c 	uxtah	r3, r3, ip
 8007912:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007916:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007920:	45c1      	cmp	r9, r8
 8007922:	f841 3b04 	str.w	r3, [r1], #4
 8007926:	ea4f 4022 	mov.w	r0, r2, asr #16
 800792a:	d2e9      	bcs.n	8007900 <quorem+0xac>
 800792c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007934:	b922      	cbnz	r2, 8007940 <quorem+0xec>
 8007936:	3b04      	subs	r3, #4
 8007938:	429d      	cmp	r5, r3
 800793a:	461a      	mov	r2, r3
 800793c:	d30a      	bcc.n	8007954 <quorem+0x100>
 800793e:	613c      	str	r4, [r7, #16]
 8007940:	4630      	mov	r0, r6
 8007942:	b003      	add	sp, #12
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	3b04      	subs	r3, #4
 800794c:	2a00      	cmp	r2, #0
 800794e:	d1ce      	bne.n	80078ee <quorem+0x9a>
 8007950:	3c01      	subs	r4, #1
 8007952:	e7c9      	b.n	80078e8 <quorem+0x94>
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	3b04      	subs	r3, #4
 8007958:	2a00      	cmp	r2, #0
 800795a:	d1f0      	bne.n	800793e <quorem+0xea>
 800795c:	3c01      	subs	r4, #1
 800795e:	e7eb      	b.n	8007938 <quorem+0xe4>
 8007960:	2000      	movs	r0, #0
 8007962:	e7ee      	b.n	8007942 <quorem+0xee>
 8007964:	0000      	movs	r0, r0
	...

08007968 <_dtoa_r>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	ed2d 8b04 	vpush	{d8-d9}
 8007970:	69c5      	ldr	r5, [r0, #28]
 8007972:	b093      	sub	sp, #76	; 0x4c
 8007974:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007978:	ec57 6b10 	vmov	r6, r7, d0
 800797c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007980:	9107      	str	r1, [sp, #28]
 8007982:	4604      	mov	r4, r0
 8007984:	920a      	str	r2, [sp, #40]	; 0x28
 8007986:	930d      	str	r3, [sp, #52]	; 0x34
 8007988:	b975      	cbnz	r5, 80079a8 <_dtoa_r+0x40>
 800798a:	2010      	movs	r0, #16
 800798c:	f000 fe2a 	bl	80085e4 <malloc>
 8007990:	4602      	mov	r2, r0
 8007992:	61e0      	str	r0, [r4, #28]
 8007994:	b920      	cbnz	r0, 80079a0 <_dtoa_r+0x38>
 8007996:	4bae      	ldr	r3, [pc, #696]	; (8007c50 <_dtoa_r+0x2e8>)
 8007998:	21ef      	movs	r1, #239	; 0xef
 800799a:	48ae      	ldr	r0, [pc, #696]	; (8007c54 <_dtoa_r+0x2ec>)
 800799c:	f001 fce6 	bl	800936c <__assert_func>
 80079a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079a4:	6005      	str	r5, [r0, #0]
 80079a6:	60c5      	str	r5, [r0, #12]
 80079a8:	69e3      	ldr	r3, [r4, #28]
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	b151      	cbz	r1, 80079c4 <_dtoa_r+0x5c>
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	604a      	str	r2, [r1, #4]
 80079b2:	2301      	movs	r3, #1
 80079b4:	4093      	lsls	r3, r2
 80079b6:	608b      	str	r3, [r1, #8]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 ff07 	bl	80087cc <_Bfree>
 80079be:	69e3      	ldr	r3, [r4, #28]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	1e3b      	subs	r3, r7, #0
 80079c6:	bfbb      	ittet	lt
 80079c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	9303      	strlt	r3, [sp, #12]
 80079ce:	2300      	movge	r3, #0
 80079d0:	2201      	movlt	r2, #1
 80079d2:	bfac      	ite	ge
 80079d4:	f8c8 3000 	strge.w	r3, [r8]
 80079d8:	f8c8 2000 	strlt.w	r2, [r8]
 80079dc:	4b9e      	ldr	r3, [pc, #632]	; (8007c58 <_dtoa_r+0x2f0>)
 80079de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079e2:	ea33 0308 	bics.w	r3, r3, r8
 80079e6:	d11b      	bne.n	8007a20 <_dtoa_r+0xb8>
 80079e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80079f4:	4333      	orrs	r3, r6
 80079f6:	f000 8593 	beq.w	8008520 <_dtoa_r+0xbb8>
 80079fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079fc:	b963      	cbnz	r3, 8007a18 <_dtoa_r+0xb0>
 80079fe:	4b97      	ldr	r3, [pc, #604]	; (8007c5c <_dtoa_r+0x2f4>)
 8007a00:	e027      	b.n	8007a52 <_dtoa_r+0xea>
 8007a02:	4b97      	ldr	r3, [pc, #604]	; (8007c60 <_dtoa_r+0x2f8>)
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	9800      	ldr	r0, [sp, #0]
 8007a0e:	b013      	add	sp, #76	; 0x4c
 8007a10:	ecbd 8b04 	vpop	{d8-d9}
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	4b90      	ldr	r3, [pc, #576]	; (8007c5c <_dtoa_r+0x2f4>)
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	3303      	adds	r3, #3
 8007a1e:	e7f3      	b.n	8007a08 <_dtoa_r+0xa0>
 8007a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a24:	2200      	movs	r2, #0
 8007a26:	ec51 0b17 	vmov	r0, r1, d7
 8007a2a:	eeb0 8a47 	vmov.f32	s16, s14
 8007a2e:	eef0 8a67 	vmov.f32	s17, s15
 8007a32:	2300      	movs	r3, #0
 8007a34:	f7f9 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a38:	4681      	mov	r9, r0
 8007a3a:	b160      	cbz	r0, 8007a56 <_dtoa_r+0xee>
 8007a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a3e:	2301      	movs	r3, #1
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8568 	beq.w	800851a <_dtoa_r+0xbb2>
 8007a4a:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <_dtoa_r+0x2fc>)
 8007a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	e7da      	b.n	8007a0c <_dtoa_r+0xa4>
 8007a56:	aa10      	add	r2, sp, #64	; 0x40
 8007a58:	a911      	add	r1, sp, #68	; 0x44
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8007a60:	eef0 0a68 	vmov.f32	s1, s17
 8007a64:	f001 f994 	bl	8008d90 <__d2b>
 8007a68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a6c:	4682      	mov	sl, r0
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	d07f      	beq.n	8007b72 <_dtoa_r+0x20a>
 8007a72:	ee18 3a90 	vmov	r3, s17
 8007a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007a7e:	ec51 0b18 	vmov	r0, r1, d8
 8007a82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a8e:	4619      	mov	r1, r3
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b75      	ldr	r3, [pc, #468]	; (8007c68 <_dtoa_r+0x300>)
 8007a94:	f7f8 fbf8 	bl	8000288 <__aeabi_dsub>
 8007a98:	a367      	add	r3, pc, #412	; (adr r3, 8007c38 <_dtoa_r+0x2d0>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	a367      	add	r3, pc, #412	; (adr r3, 8007c40 <_dtoa_r+0x2d8>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fbf0 	bl	800028c <__adddf3>
 8007aac:	4606      	mov	r6, r0
 8007aae:	4628      	mov	r0, r5
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	f7f8 fd37 	bl	8000524 <__aeabi_i2d>
 8007ab6:	a364      	add	r3, pc, #400	; (adr r3, 8007c48 <_dtoa_r+0x2e0>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	f7f8 fbe0 	bl	800028c <__adddf3>
 8007acc:	4606      	mov	r6, r0
 8007ace:	460f      	mov	r7, r1
 8007ad0:	f7f9 f842 	bl	8000b58 <__aeabi_d2iz>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4683      	mov	fp, r0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 fffd 	bl	8000adc <__aeabi_dcmplt>
 8007ae2:	b148      	cbz	r0, 8007af8 <_dtoa_r+0x190>
 8007ae4:	4658      	mov	r0, fp
 8007ae6:	f7f8 fd1d 	bl	8000524 <__aeabi_i2d>
 8007aea:	4632      	mov	r2, r6
 8007aec:	463b      	mov	r3, r7
 8007aee:	f7f8 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af2:	b908      	cbnz	r0, 8007af8 <_dtoa_r+0x190>
 8007af4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007af8:	f1bb 0f16 	cmp.w	fp, #22
 8007afc:	d857      	bhi.n	8007bae <_dtoa_r+0x246>
 8007afe:	4b5b      	ldr	r3, [pc, #364]	; (8007c6c <_dtoa_r+0x304>)
 8007b00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	ec51 0b18 	vmov	r0, r1, d8
 8007b0c:	f7f8 ffe6 	bl	8000adc <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d04e      	beq.n	8007bb2 <_dtoa_r+0x24a>
 8007b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b18:	2300      	movs	r3, #0
 8007b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b1e:	1b5b      	subs	r3, r3, r5
 8007b20:	1e5a      	subs	r2, r3, #1
 8007b22:	bf45      	ittet	mi
 8007b24:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b28:	9305      	strmi	r3, [sp, #20]
 8007b2a:	2300      	movpl	r3, #0
 8007b2c:	2300      	movmi	r3, #0
 8007b2e:	9206      	str	r2, [sp, #24]
 8007b30:	bf54      	ite	pl
 8007b32:	9305      	strpl	r3, [sp, #20]
 8007b34:	9306      	strmi	r3, [sp, #24]
 8007b36:	f1bb 0f00 	cmp.w	fp, #0
 8007b3a:	db3c      	blt.n	8007bb6 <_dtoa_r+0x24e>
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007b42:	445b      	add	r3, fp
 8007b44:	9306      	str	r3, [sp, #24]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	9b07      	ldr	r3, [sp, #28]
 8007b4c:	2b09      	cmp	r3, #9
 8007b4e:	d868      	bhi.n	8007c22 <_dtoa_r+0x2ba>
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	bfc4      	itt	gt
 8007b54:	3b04      	subgt	r3, #4
 8007b56:	9307      	strgt	r3, [sp, #28]
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b5e:	bfcc      	ite	gt
 8007b60:	2500      	movgt	r5, #0
 8007b62:	2501      	movle	r5, #1
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	f200 8085 	bhi.w	8007c74 <_dtoa_r+0x30c>
 8007b6a:	e8df f003 	tbb	[pc, r3]
 8007b6e:	3b2e      	.short	0x3b2e
 8007b70:	5839      	.short	0x5839
 8007b72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b76:	441d      	add	r5, r3
 8007b78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	bfc1      	itttt	gt
 8007b80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b84:	fa08 f803 	lslgt.w	r8, r8, r3
 8007b88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007b8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007b90:	bfd6      	itet	le
 8007b92:	f1c3 0320 	rsble	r3, r3, #32
 8007b96:	ea48 0003 	orrgt.w	r0, r8, r3
 8007b9a:	fa06 f003 	lslle.w	r0, r6, r3
 8007b9e:	f7f8 fcb1 	bl	8000504 <__aeabi_ui2d>
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ba8:	3d01      	subs	r5, #1
 8007baa:	920e      	str	r2, [sp, #56]	; 0x38
 8007bac:	e76f      	b.n	8007a8e <_dtoa_r+0x126>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e7b3      	b.n	8007b1a <_dtoa_r+0x1b2>
 8007bb2:	900c      	str	r0, [sp, #48]	; 0x30
 8007bb4:	e7b2      	b.n	8007b1c <_dtoa_r+0x1b4>
 8007bb6:	9b05      	ldr	r3, [sp, #20]
 8007bb8:	eba3 030b 	sub.w	r3, r3, fp
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	f1cb 0300 	rsb	r3, fp, #0
 8007bc2:	9308      	str	r3, [sp, #32]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc8:	e7bf      	b.n	8007b4a <_dtoa_r+0x1e2>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dc52      	bgt.n	8007c7a <_dtoa_r+0x312>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	9304      	str	r3, [sp, #16]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8007bde:	e00b      	b.n	8007bf8 <_dtoa_r+0x290>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e7f3      	b.n	8007bcc <_dtoa_r+0x264>
 8007be4:	2300      	movs	r3, #0
 8007be6:	9309      	str	r3, [sp, #36]	; 0x24
 8007be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bea:	445b      	add	r3, fp
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	bfb8      	it	lt
 8007bf6:	2301      	movlt	r3, #1
 8007bf8:	69e0      	ldr	r0, [r4, #28]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	f102 0614 	add.w	r6, r2, #20
 8007c02:	429e      	cmp	r6, r3
 8007c04:	d93d      	bls.n	8007c82 <_dtoa_r+0x31a>
 8007c06:	6041      	str	r1, [r0, #4]
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fd9f 	bl	800874c <_Balloc>
 8007c0e:	9000      	str	r0, [sp, #0]
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d139      	bne.n	8007c88 <_dtoa_r+0x320>
 8007c14:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <_dtoa_r+0x308>)
 8007c16:	4602      	mov	r2, r0
 8007c18:	f240 11af 	movw	r1, #431	; 0x1af
 8007c1c:	e6bd      	b.n	800799a <_dtoa_r+0x32>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7e1      	b.n	8007be6 <_dtoa_r+0x27e>
 8007c22:	2501      	movs	r5, #1
 8007c24:	2300      	movs	r3, #0
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	9509      	str	r5, [sp, #36]	; 0x24
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	2200      	movs	r2, #0
 8007c34:	2312      	movs	r3, #18
 8007c36:	e7d1      	b.n	8007bdc <_dtoa_r+0x274>
 8007c38:	636f4361 	.word	0x636f4361
 8007c3c:	3fd287a7 	.word	0x3fd287a7
 8007c40:	8b60c8b3 	.word	0x8b60c8b3
 8007c44:	3fc68a28 	.word	0x3fc68a28
 8007c48:	509f79fb 	.word	0x509f79fb
 8007c4c:	3fd34413 	.word	0x3fd34413
 8007c50:	0801d121 	.word	0x0801d121
 8007c54:	0801d138 	.word	0x0801d138
 8007c58:	7ff00000 	.word	0x7ff00000
 8007c5c:	0801d11d 	.word	0x0801d11d
 8007c60:	0801d114 	.word	0x0801d114
 8007c64:	0801d0f1 	.word	0x0801d0f1
 8007c68:	3ff80000 	.word	0x3ff80000
 8007c6c:	0801d228 	.word	0x0801d228
 8007c70:	0801d190 	.word	0x0801d190
 8007c74:	2301      	movs	r3, #1
 8007c76:	9309      	str	r3, [sp, #36]	; 0x24
 8007c78:	e7d7      	b.n	8007c2a <_dtoa_r+0x2c2>
 8007c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	e7ba      	b.n	8007bf8 <_dtoa_r+0x290>
 8007c82:	3101      	adds	r1, #1
 8007c84:	0052      	lsls	r2, r2, #1
 8007c86:	e7ba      	b.n	8007bfe <_dtoa_r+0x296>
 8007c88:	69e3      	ldr	r3, [r4, #28]
 8007c8a:	9a00      	ldr	r2, [sp, #0]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	2b0e      	cmp	r3, #14
 8007c92:	f200 80a8 	bhi.w	8007de6 <_dtoa_r+0x47e>
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	f000 80a5 	beq.w	8007de6 <_dtoa_r+0x47e>
 8007c9c:	f1bb 0f00 	cmp.w	fp, #0
 8007ca0:	dd38      	ble.n	8007d14 <_dtoa_r+0x3ac>
 8007ca2:	4bc0      	ldr	r3, [pc, #768]	; (8007fa4 <_dtoa_r+0x63c>)
 8007ca4:	f00b 020f 	and.w	r2, fp, #15
 8007ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007cb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007cb8:	d019      	beq.n	8007cee <_dtoa_r+0x386>
 8007cba:	4bbb      	ldr	r3, [pc, #748]	; (8007fa8 <_dtoa_r+0x640>)
 8007cbc:	ec51 0b18 	vmov	r0, r1, d8
 8007cc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cc4:	f7f8 fdc2 	bl	800084c <__aeabi_ddiv>
 8007cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ccc:	f008 080f 	and.w	r8, r8, #15
 8007cd0:	2503      	movs	r5, #3
 8007cd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007fa8 <_dtoa_r+0x640>
 8007cd6:	f1b8 0f00 	cmp.w	r8, #0
 8007cda:	d10a      	bne.n	8007cf2 <_dtoa_r+0x38a>
 8007cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	f7f8 fdb2 	bl	800084c <__aeabi_ddiv>
 8007ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cec:	e02b      	b.n	8007d46 <_dtoa_r+0x3de>
 8007cee:	2502      	movs	r5, #2
 8007cf0:	e7ef      	b.n	8007cd2 <_dtoa_r+0x36a>
 8007cf2:	f018 0f01 	tst.w	r8, #1
 8007cf6:	d008      	beq.n	8007d0a <_dtoa_r+0x3a2>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d00:	f7f8 fc7a 	bl	80005f8 <__aeabi_dmul>
 8007d04:	3501      	adds	r5, #1
 8007d06:	4606      	mov	r6, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d0e:	f109 0908 	add.w	r9, r9, #8
 8007d12:	e7e0      	b.n	8007cd6 <_dtoa_r+0x36e>
 8007d14:	f000 809f 	beq.w	8007e56 <_dtoa_r+0x4ee>
 8007d18:	f1cb 0600 	rsb	r6, fp, #0
 8007d1c:	4ba1      	ldr	r3, [pc, #644]	; (8007fa4 <_dtoa_r+0x63c>)
 8007d1e:	4fa2      	ldr	r7, [pc, #648]	; (8007fa8 <_dtoa_r+0x640>)
 8007d20:	f006 020f 	and.w	r2, r6, #15
 8007d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	ec51 0b18 	vmov	r0, r1, d8
 8007d30:	f7f8 fc62 	bl	80005f8 <__aeabi_dmul>
 8007d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d38:	1136      	asrs	r6, r6, #4
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2502      	movs	r5, #2
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d17e      	bne.n	8007e40 <_dtoa_r+0x4d8>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1d0      	bne.n	8007ce8 <_dtoa_r+0x380>
 8007d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8084 	beq.w	8007e5a <_dtoa_r+0x4f2>
 8007d52:	4b96      	ldr	r3, [pc, #600]	; (8007fac <_dtoa_r+0x644>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	f7f8 febf 	bl	8000adc <__aeabi_dcmplt>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d07b      	beq.n	8007e5a <_dtoa_r+0x4f2>
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d078      	beq.n	8007e5a <_dtoa_r+0x4f2>
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dd39      	ble.n	8007de2 <_dtoa_r+0x47a>
 8007d6e:	4b90      	ldr	r3, [pc, #576]	; (8007fb0 <_dtoa_r+0x648>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f7f8 fc3f 	bl	80005f8 <__aeabi_dmul>
 8007d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7e:	9e01      	ldr	r6, [sp, #4]
 8007d80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007d84:	3501      	adds	r5, #1
 8007d86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7f8 fbca 	bl	8000524 <__aeabi_i2d>
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	f7f8 fc30 	bl	80005f8 <__aeabi_dmul>
 8007d98:	4b86      	ldr	r3, [pc, #536]	; (8007fb4 <_dtoa_r+0x64c>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f7f8 fa76 	bl	800028c <__adddf3>
 8007da0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da8:	9303      	str	r3, [sp, #12]
 8007daa:	2e00      	cmp	r6, #0
 8007dac:	d158      	bne.n	8007e60 <_dtoa_r+0x4f8>
 8007dae:	4b82      	ldr	r3, [pc, #520]	; (8007fb8 <_dtoa_r+0x650>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	f7f8 fa67 	bl	8000288 <__aeabi_dsub>
 8007dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	4689      	mov	r9, r1
 8007dc2:	f7f8 fea9 	bl	8000b18 <__aeabi_dcmpgt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f040 8296 	bne.w	80082f8 <_dtoa_r+0x990>
 8007dcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	f7f8 fe80 	bl	8000adc <__aeabi_dcmplt>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f040 8289 	bne.w	80082f4 <_dtoa_r+0x98c>
 8007de2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f2c0 814e 	blt.w	800808a <_dtoa_r+0x722>
 8007dee:	f1bb 0f0e 	cmp.w	fp, #14
 8007df2:	f300 814a 	bgt.w	800808a <_dtoa_r+0x722>
 8007df6:	4b6b      	ldr	r3, [pc, #428]	; (8007fa4 <_dtoa_r+0x63c>)
 8007df8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f280 80dc 	bge.w	8007fc0 <_dtoa_r+0x658>
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f300 80d8 	bgt.w	8007fc0 <_dtoa_r+0x658>
 8007e10:	f040 826f 	bne.w	80082f2 <_dtoa_r+0x98a>
 8007e14:	4b68      	ldr	r3, [pc, #416]	; (8007fb8 <_dtoa_r+0x650>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	4640      	mov	r0, r8
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	f7f8 fbec 	bl	80005f8 <__aeabi_dmul>
 8007e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e24:	f7f8 fe6e 	bl	8000b04 <__aeabi_dcmpge>
 8007e28:	9e04      	ldr	r6, [sp, #16]
 8007e2a:	4637      	mov	r7, r6
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f040 8245 	bne.w	80082bc <_dtoa_r+0x954>
 8007e32:	9d00      	ldr	r5, [sp, #0]
 8007e34:	2331      	movs	r3, #49	; 0x31
 8007e36:	f805 3b01 	strb.w	r3, [r5], #1
 8007e3a:	f10b 0b01 	add.w	fp, fp, #1
 8007e3e:	e241      	b.n	80082c4 <_dtoa_r+0x95c>
 8007e40:	07f2      	lsls	r2, r6, #31
 8007e42:	d505      	bpl.n	8007e50 <_dtoa_r+0x4e8>
 8007e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	2301      	movs	r3, #1
 8007e50:	1076      	asrs	r6, r6, #1
 8007e52:	3708      	adds	r7, #8
 8007e54:	e773      	b.n	8007d3e <_dtoa_r+0x3d6>
 8007e56:	2502      	movs	r5, #2
 8007e58:	e775      	b.n	8007d46 <_dtoa_r+0x3de>
 8007e5a:	9e04      	ldr	r6, [sp, #16]
 8007e5c:	465f      	mov	r7, fp
 8007e5e:	e792      	b.n	8007d86 <_dtoa_r+0x41e>
 8007e60:	9900      	ldr	r1, [sp, #0]
 8007e62:	4b50      	ldr	r3, [pc, #320]	; (8007fa4 <_dtoa_r+0x63c>)
 8007e64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e68:	4431      	add	r1, r6
 8007e6a:	9102      	str	r1, [sp, #8]
 8007e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e6e:	eeb0 9a47 	vmov.f32	s18, s14
 8007e72:	eef0 9a67 	vmov.f32	s19, s15
 8007e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	d044      	beq.n	8007f0c <_dtoa_r+0x5a4>
 8007e82:	494e      	ldr	r1, [pc, #312]	; (8007fbc <_dtoa_r+0x654>)
 8007e84:	2000      	movs	r0, #0
 8007e86:	f7f8 fce1 	bl	800084c <__aeabi_ddiv>
 8007e8a:	ec53 2b19 	vmov	r2, r3, d9
 8007e8e:	f7f8 f9fb 	bl	8000288 <__aeabi_dsub>
 8007e92:	9d00      	ldr	r5, [sp, #0]
 8007e94:	ec41 0b19 	vmov	d9, r0, r1
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7f8 fe5c 	bl	8000b58 <__aeabi_d2iz>
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	f7f8 fb3f 	bl	8000524 <__aeabi_i2d>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 f9eb 	bl	8000288 <__aeabi_dsub>
 8007eb2:	3630      	adds	r6, #48	; 0x30
 8007eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8007eb8:	ec53 2b19 	vmov	r2, r3, d9
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4689      	mov	r9, r1
 8007ec0:	f7f8 fe0c 	bl	8000adc <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d164      	bne.n	8007f92 <_dtoa_r+0x62a>
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	4937      	ldr	r1, [pc, #220]	; (8007fac <_dtoa_r+0x644>)
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f7f8 f9da 	bl	8000288 <__aeabi_dsub>
 8007ed4:	ec53 2b19 	vmov	r2, r3, d9
 8007ed8:	f7f8 fe00 	bl	8000adc <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f040 80b6 	bne.w	800804e <_dtoa_r+0x6e6>
 8007ee2:	9b02      	ldr	r3, [sp, #8]
 8007ee4:	429d      	cmp	r5, r3
 8007ee6:	f43f af7c 	beq.w	8007de2 <_dtoa_r+0x47a>
 8007eea:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <_dtoa_r+0x648>)
 8007eec:	ec51 0b19 	vmov	r0, r1, d9
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f7f8 fb81 	bl	80005f8 <__aeabi_dmul>
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	; (8007fb0 <_dtoa_r+0x648>)
 8007ef8:	ec41 0b19 	vmov	d9, r0, r1
 8007efc:	2200      	movs	r2, #0
 8007efe:	4640      	mov	r0, r8
 8007f00:	4649      	mov	r1, r9
 8007f02:	f7f8 fb79 	bl	80005f8 <__aeabi_dmul>
 8007f06:	4680      	mov	r8, r0
 8007f08:	4689      	mov	r9, r1
 8007f0a:	e7c5      	b.n	8007e98 <_dtoa_r+0x530>
 8007f0c:	ec51 0b17 	vmov	r0, r1, d7
 8007f10:	f7f8 fb72 	bl	80005f8 <__aeabi_dmul>
 8007f14:	9b02      	ldr	r3, [sp, #8]
 8007f16:	9d00      	ldr	r5, [sp, #0]
 8007f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f1a:	ec41 0b19 	vmov	d9, r0, r1
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4640      	mov	r0, r8
 8007f22:	f7f8 fe19 	bl	8000b58 <__aeabi_d2iz>
 8007f26:	4606      	mov	r6, r0
 8007f28:	f7f8 fafc 	bl	8000524 <__aeabi_i2d>
 8007f2c:	3630      	adds	r6, #48	; 0x30
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f7f8 f9a7 	bl	8000288 <__aeabi_dsub>
 8007f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	429d      	cmp	r5, r3
 8007f42:	4680      	mov	r8, r0
 8007f44:	4689      	mov	r9, r1
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	d124      	bne.n	8007f96 <_dtoa_r+0x62e>
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	; (8007fbc <_dtoa_r+0x654>)
 8007f4e:	ec51 0b19 	vmov	r0, r1, d9
 8007f52:	f7f8 f99b 	bl	800028c <__adddf3>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	f7f8 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d173      	bne.n	800804e <_dtoa_r+0x6e6>
 8007f66:	ec53 2b19 	vmov	r2, r3, d9
 8007f6a:	4914      	ldr	r1, [pc, #80]	; (8007fbc <_dtoa_r+0x654>)
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f7f8 f98b 	bl	8000288 <__aeabi_dsub>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4640      	mov	r0, r8
 8007f78:	4649      	mov	r1, r9
 8007f7a:	f7f8 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f43f af2f 	beq.w	8007de2 <_dtoa_r+0x47a>
 8007f84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f86:	1e6b      	subs	r3, r5, #1
 8007f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f8e:	2b30      	cmp	r3, #48	; 0x30
 8007f90:	d0f8      	beq.n	8007f84 <_dtoa_r+0x61c>
 8007f92:	46bb      	mov	fp, r7
 8007f94:	e04a      	b.n	800802c <_dtoa_r+0x6c4>
 8007f96:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <_dtoa_r+0x648>)
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	4689      	mov	r9, r1
 8007fa0:	e7bd      	b.n	8007f1e <_dtoa_r+0x5b6>
 8007fa2:	bf00      	nop
 8007fa4:	0801d228 	.word	0x0801d228
 8007fa8:	0801d200 	.word	0x0801d200
 8007fac:	3ff00000 	.word	0x3ff00000
 8007fb0:	40240000 	.word	0x40240000
 8007fb4:	401c0000 	.word	0x401c0000
 8007fb8:	40140000 	.word	0x40140000
 8007fbc:	3fe00000 	.word	0x3fe00000
 8007fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fc4:	9d00      	ldr	r5, [sp, #0]
 8007fc6:	4642      	mov	r2, r8
 8007fc8:	464b      	mov	r3, r9
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fc3d 	bl	800084c <__aeabi_ddiv>
 8007fd2:	f7f8 fdc1 	bl	8000b58 <__aeabi_d2iz>
 8007fd6:	9001      	str	r0, [sp, #4]
 8007fd8:	f7f8 faa4 	bl	8000524 <__aeabi_i2d>
 8007fdc:	4642      	mov	r2, r8
 8007fde:	464b      	mov	r3, r9
 8007fe0:	f7f8 fb0a 	bl	80005f8 <__aeabi_dmul>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 f94c 	bl	8000288 <__aeabi_dsub>
 8007ff0:	9e01      	ldr	r6, [sp, #4]
 8007ff2:	9f04      	ldr	r7, [sp, #16]
 8007ff4:	3630      	adds	r6, #48	; 0x30
 8007ff6:	f805 6b01 	strb.w	r6, [r5], #1
 8007ffa:	9e00      	ldr	r6, [sp, #0]
 8007ffc:	1bae      	subs	r6, r5, r6
 8007ffe:	42b7      	cmp	r7, r6
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	d134      	bne.n	8008070 <_dtoa_r+0x708>
 8008006:	f7f8 f941 	bl	800028c <__adddf3>
 800800a:	4642      	mov	r2, r8
 800800c:	464b      	mov	r3, r9
 800800e:	4606      	mov	r6, r0
 8008010:	460f      	mov	r7, r1
 8008012:	f7f8 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 8008016:	b9c8      	cbnz	r0, 800804c <_dtoa_r+0x6e4>
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	4630      	mov	r0, r6
 800801e:	4639      	mov	r1, r7
 8008020:	f7f8 fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8008024:	b110      	cbz	r0, 800802c <_dtoa_r+0x6c4>
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	07db      	lsls	r3, r3, #31
 800802a:	d40f      	bmi.n	800804c <_dtoa_r+0x6e4>
 800802c:	4651      	mov	r1, sl
 800802e:	4620      	mov	r0, r4
 8008030:	f000 fbcc 	bl	80087cc <_Bfree>
 8008034:	2300      	movs	r3, #0
 8008036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008038:	702b      	strb	r3, [r5, #0]
 800803a:	f10b 0301 	add.w	r3, fp, #1
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008042:	2b00      	cmp	r3, #0
 8008044:	f43f ace2 	beq.w	8007a0c <_dtoa_r+0xa4>
 8008048:	601d      	str	r5, [r3, #0]
 800804a:	e4df      	b.n	8007a0c <_dtoa_r+0xa4>
 800804c:	465f      	mov	r7, fp
 800804e:	462b      	mov	r3, r5
 8008050:	461d      	mov	r5, r3
 8008052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008056:	2a39      	cmp	r2, #57	; 0x39
 8008058:	d106      	bne.n	8008068 <_dtoa_r+0x700>
 800805a:	9a00      	ldr	r2, [sp, #0]
 800805c:	429a      	cmp	r2, r3
 800805e:	d1f7      	bne.n	8008050 <_dtoa_r+0x6e8>
 8008060:	9900      	ldr	r1, [sp, #0]
 8008062:	2230      	movs	r2, #48	; 0x30
 8008064:	3701      	adds	r7, #1
 8008066:	700a      	strb	r2, [r1, #0]
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	3201      	adds	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	e790      	b.n	8007f92 <_dtoa_r+0x62a>
 8008070:	4ba3      	ldr	r3, [pc, #652]	; (8008300 <_dtoa_r+0x998>)
 8008072:	2200      	movs	r2, #0
 8008074:	f7f8 fac0 	bl	80005f8 <__aeabi_dmul>
 8008078:	2200      	movs	r2, #0
 800807a:	2300      	movs	r3, #0
 800807c:	4606      	mov	r6, r0
 800807e:	460f      	mov	r7, r1
 8008080:	f7f8 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008084:	2800      	cmp	r0, #0
 8008086:	d09e      	beq.n	8007fc6 <_dtoa_r+0x65e>
 8008088:	e7d0      	b.n	800802c <_dtoa_r+0x6c4>
 800808a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800808c:	2a00      	cmp	r2, #0
 800808e:	f000 80ca 	beq.w	8008226 <_dtoa_r+0x8be>
 8008092:	9a07      	ldr	r2, [sp, #28]
 8008094:	2a01      	cmp	r2, #1
 8008096:	f300 80ad 	bgt.w	80081f4 <_dtoa_r+0x88c>
 800809a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800809c:	2a00      	cmp	r2, #0
 800809e:	f000 80a5 	beq.w	80081ec <_dtoa_r+0x884>
 80080a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080a6:	9e08      	ldr	r6, [sp, #32]
 80080a8:	9d05      	ldr	r5, [sp, #20]
 80080aa:	9a05      	ldr	r2, [sp, #20]
 80080ac:	441a      	add	r2, r3
 80080ae:	9205      	str	r2, [sp, #20]
 80080b0:	9a06      	ldr	r2, [sp, #24]
 80080b2:	2101      	movs	r1, #1
 80080b4:	441a      	add	r2, r3
 80080b6:	4620      	mov	r0, r4
 80080b8:	9206      	str	r2, [sp, #24]
 80080ba:	f000 fc3d 	bl	8008938 <__i2b>
 80080be:	4607      	mov	r7, r0
 80080c0:	b165      	cbz	r5, 80080dc <_dtoa_r+0x774>
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd09      	ble.n	80080dc <_dtoa_r+0x774>
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	9a05      	ldr	r2, [sp, #20]
 80080cc:	bfa8      	it	ge
 80080ce:	462b      	movge	r3, r5
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	9205      	str	r2, [sp, #20]
 80080d4:	9a06      	ldr	r2, [sp, #24]
 80080d6:	1aed      	subs	r5, r5, r3
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	9306      	str	r3, [sp, #24]
 80080dc:	9b08      	ldr	r3, [sp, #32]
 80080de:	b1f3      	cbz	r3, 800811e <_dtoa_r+0x7b6>
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80a3 	beq.w	800822e <_dtoa_r+0x8c6>
 80080e8:	2e00      	cmp	r6, #0
 80080ea:	dd10      	ble.n	800810e <_dtoa_r+0x7a6>
 80080ec:	4639      	mov	r1, r7
 80080ee:	4632      	mov	r2, r6
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fce1 	bl	8008ab8 <__pow5mult>
 80080f6:	4652      	mov	r2, sl
 80080f8:	4601      	mov	r1, r0
 80080fa:	4607      	mov	r7, r0
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 fc31 	bl	8008964 <__multiply>
 8008102:	4651      	mov	r1, sl
 8008104:	4680      	mov	r8, r0
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fb60 	bl	80087cc <_Bfree>
 800810c:	46c2      	mov	sl, r8
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	1b9a      	subs	r2, r3, r6
 8008112:	d004      	beq.n	800811e <_dtoa_r+0x7b6>
 8008114:	4651      	mov	r1, sl
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fcce 	bl	8008ab8 <__pow5mult>
 800811c:	4682      	mov	sl, r0
 800811e:	2101      	movs	r1, #1
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fc09 	bl	8008938 <__i2b>
 8008126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008128:	2b00      	cmp	r3, #0
 800812a:	4606      	mov	r6, r0
 800812c:	f340 8081 	ble.w	8008232 <_dtoa_r+0x8ca>
 8008130:	461a      	mov	r2, r3
 8008132:	4601      	mov	r1, r0
 8008134:	4620      	mov	r0, r4
 8008136:	f000 fcbf 	bl	8008ab8 <__pow5mult>
 800813a:	9b07      	ldr	r3, [sp, #28]
 800813c:	2b01      	cmp	r3, #1
 800813e:	4606      	mov	r6, r0
 8008140:	dd7a      	ble.n	8008238 <_dtoa_r+0x8d0>
 8008142:	f04f 0800 	mov.w	r8, #0
 8008146:	6933      	ldr	r3, [r6, #16]
 8008148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800814c:	6918      	ldr	r0, [r3, #16]
 800814e:	f000 fba5 	bl	800889c <__hi0bits>
 8008152:	f1c0 0020 	rsb	r0, r0, #32
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	4418      	add	r0, r3
 800815a:	f010 001f 	ands.w	r0, r0, #31
 800815e:	f000 8094 	beq.w	800828a <_dtoa_r+0x922>
 8008162:	f1c0 0320 	rsb	r3, r0, #32
 8008166:	2b04      	cmp	r3, #4
 8008168:	f340 8085 	ble.w	8008276 <_dtoa_r+0x90e>
 800816c:	9b05      	ldr	r3, [sp, #20]
 800816e:	f1c0 001c 	rsb	r0, r0, #28
 8008172:	4403      	add	r3, r0
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	9b06      	ldr	r3, [sp, #24]
 8008178:	4403      	add	r3, r0
 800817a:	4405      	add	r5, r0
 800817c:	9306      	str	r3, [sp, #24]
 800817e:	9b05      	ldr	r3, [sp, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	dd05      	ble.n	8008190 <_dtoa_r+0x828>
 8008184:	4651      	mov	r1, sl
 8008186:	461a      	mov	r2, r3
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fcef 	bl	8008b6c <__lshift>
 800818e:	4682      	mov	sl, r0
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	dd05      	ble.n	80081a2 <_dtoa_r+0x83a>
 8008196:	4631      	mov	r1, r6
 8008198:	461a      	mov	r2, r3
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fce6 	bl	8008b6c <__lshift>
 80081a0:	4606      	mov	r6, r0
 80081a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d072      	beq.n	800828e <_dtoa_r+0x926>
 80081a8:	4631      	mov	r1, r6
 80081aa:	4650      	mov	r0, sl
 80081ac:	f000 fd4a 	bl	8008c44 <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	da6c      	bge.n	800828e <_dtoa_r+0x926>
 80081b4:	2300      	movs	r3, #0
 80081b6:	4651      	mov	r1, sl
 80081b8:	220a      	movs	r2, #10
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fb28 	bl	8008810 <__multadd>
 80081c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081c6:	4682      	mov	sl, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 81b0 	beq.w	800852e <_dtoa_r+0xbc6>
 80081ce:	2300      	movs	r3, #0
 80081d0:	4639      	mov	r1, r7
 80081d2:	220a      	movs	r2, #10
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fb1b 	bl	8008810 <__multadd>
 80081da:	9b01      	ldr	r3, [sp, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	4607      	mov	r7, r0
 80081e0:	f300 8096 	bgt.w	8008310 <_dtoa_r+0x9a8>
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	dc59      	bgt.n	800829e <_dtoa_r+0x936>
 80081ea:	e091      	b.n	8008310 <_dtoa_r+0x9a8>
 80081ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081f2:	e758      	b.n	80080a6 <_dtoa_r+0x73e>
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	1e5e      	subs	r6, r3, #1
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	42b3      	cmp	r3, r6
 80081fc:	bfbf      	itttt	lt
 80081fe:	9b08      	ldrlt	r3, [sp, #32]
 8008200:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008202:	9608      	strlt	r6, [sp, #32]
 8008204:	1af3      	sublt	r3, r6, r3
 8008206:	bfb4      	ite	lt
 8008208:	18d2      	addlt	r2, r2, r3
 800820a:	1b9e      	subge	r6, r3, r6
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	bfbc      	itt	lt
 8008210:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008212:	2600      	movlt	r6, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	bfb7      	itett	lt
 8008218:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800821c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008220:	1a9d      	sublt	r5, r3, r2
 8008222:	2300      	movlt	r3, #0
 8008224:	e741      	b.n	80080aa <_dtoa_r+0x742>
 8008226:	9e08      	ldr	r6, [sp, #32]
 8008228:	9d05      	ldr	r5, [sp, #20]
 800822a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800822c:	e748      	b.n	80080c0 <_dtoa_r+0x758>
 800822e:	9a08      	ldr	r2, [sp, #32]
 8008230:	e770      	b.n	8008114 <_dtoa_r+0x7ac>
 8008232:	9b07      	ldr	r3, [sp, #28]
 8008234:	2b01      	cmp	r3, #1
 8008236:	dc19      	bgt.n	800826c <_dtoa_r+0x904>
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	b9bb      	cbnz	r3, 800826c <_dtoa_r+0x904>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008242:	b99b      	cbnz	r3, 800826c <_dtoa_r+0x904>
 8008244:	9b03      	ldr	r3, [sp, #12]
 8008246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824a:	0d1b      	lsrs	r3, r3, #20
 800824c:	051b      	lsls	r3, r3, #20
 800824e:	b183      	cbz	r3, 8008272 <_dtoa_r+0x90a>
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	3301      	adds	r3, #1
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	3301      	adds	r3, #1
 800825a:	9306      	str	r3, [sp, #24]
 800825c:	f04f 0801 	mov.w	r8, #1
 8008260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	f47f af6f 	bne.w	8008146 <_dtoa_r+0x7de>
 8008268:	2001      	movs	r0, #1
 800826a:	e774      	b.n	8008156 <_dtoa_r+0x7ee>
 800826c:	f04f 0800 	mov.w	r8, #0
 8008270:	e7f6      	b.n	8008260 <_dtoa_r+0x8f8>
 8008272:	4698      	mov	r8, r3
 8008274:	e7f4      	b.n	8008260 <_dtoa_r+0x8f8>
 8008276:	d082      	beq.n	800817e <_dtoa_r+0x816>
 8008278:	9a05      	ldr	r2, [sp, #20]
 800827a:	331c      	adds	r3, #28
 800827c:	441a      	add	r2, r3
 800827e:	9205      	str	r2, [sp, #20]
 8008280:	9a06      	ldr	r2, [sp, #24]
 8008282:	441a      	add	r2, r3
 8008284:	441d      	add	r5, r3
 8008286:	9206      	str	r2, [sp, #24]
 8008288:	e779      	b.n	800817e <_dtoa_r+0x816>
 800828a:	4603      	mov	r3, r0
 800828c:	e7f4      	b.n	8008278 <_dtoa_r+0x910>
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc37      	bgt.n	8008304 <_dtoa_r+0x99c>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	2b02      	cmp	r3, #2
 8008298:	dd34      	ble.n	8008304 <_dtoa_r+0x99c>
 800829a:	9b04      	ldr	r3, [sp, #16]
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	b963      	cbnz	r3, 80082bc <_dtoa_r+0x954>
 80082a2:	4631      	mov	r1, r6
 80082a4:	2205      	movs	r2, #5
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 fab2 	bl	8008810 <__multadd>
 80082ac:	4601      	mov	r1, r0
 80082ae:	4606      	mov	r6, r0
 80082b0:	4650      	mov	r0, sl
 80082b2:	f000 fcc7 	bl	8008c44 <__mcmp>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f73f adbb 	bgt.w	8007e32 <_dtoa_r+0x4ca>
 80082bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082be:	9d00      	ldr	r5, [sp, #0]
 80082c0:	ea6f 0b03 	mvn.w	fp, r3
 80082c4:	f04f 0800 	mov.w	r8, #0
 80082c8:	4631      	mov	r1, r6
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fa7e 	bl	80087cc <_Bfree>
 80082d0:	2f00      	cmp	r7, #0
 80082d2:	f43f aeab 	beq.w	800802c <_dtoa_r+0x6c4>
 80082d6:	f1b8 0f00 	cmp.w	r8, #0
 80082da:	d005      	beq.n	80082e8 <_dtoa_r+0x980>
 80082dc:	45b8      	cmp	r8, r7
 80082de:	d003      	beq.n	80082e8 <_dtoa_r+0x980>
 80082e0:	4641      	mov	r1, r8
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fa72 	bl	80087cc <_Bfree>
 80082e8:	4639      	mov	r1, r7
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fa6e 	bl	80087cc <_Bfree>
 80082f0:	e69c      	b.n	800802c <_dtoa_r+0x6c4>
 80082f2:	2600      	movs	r6, #0
 80082f4:	4637      	mov	r7, r6
 80082f6:	e7e1      	b.n	80082bc <_dtoa_r+0x954>
 80082f8:	46bb      	mov	fp, r7
 80082fa:	4637      	mov	r7, r6
 80082fc:	e599      	b.n	8007e32 <_dtoa_r+0x4ca>
 80082fe:	bf00      	nop
 8008300:	40240000 	.word	0x40240000
 8008304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80c8 	beq.w	800849c <_dtoa_r+0xb34>
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	2d00      	cmp	r5, #0
 8008312:	dd05      	ble.n	8008320 <_dtoa_r+0x9b8>
 8008314:	4639      	mov	r1, r7
 8008316:	462a      	mov	r2, r5
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fc27 	bl	8008b6c <__lshift>
 800831e:	4607      	mov	r7, r0
 8008320:	f1b8 0f00 	cmp.w	r8, #0
 8008324:	d05b      	beq.n	80083de <_dtoa_r+0xa76>
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fa0f 	bl	800874c <_Balloc>
 800832e:	4605      	mov	r5, r0
 8008330:	b928      	cbnz	r0, 800833e <_dtoa_r+0x9d6>
 8008332:	4b83      	ldr	r3, [pc, #524]	; (8008540 <_dtoa_r+0xbd8>)
 8008334:	4602      	mov	r2, r0
 8008336:	f240 21ef 	movw	r1, #751	; 0x2ef
 800833a:	f7ff bb2e 	b.w	800799a <_dtoa_r+0x32>
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	3202      	adds	r2, #2
 8008342:	0092      	lsls	r2, r2, #2
 8008344:	f107 010c 	add.w	r1, r7, #12
 8008348:	300c      	adds	r0, #12
 800834a:	f001 f801 	bl	8009350 <memcpy>
 800834e:	2201      	movs	r2, #1
 8008350:	4629      	mov	r1, r5
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fc0a 	bl	8008b6c <__lshift>
 8008358:	9b00      	ldr	r3, [sp, #0]
 800835a:	3301      	adds	r3, #1
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008362:	4413      	add	r3, r2
 8008364:	9308      	str	r3, [sp, #32]
 8008366:	9b02      	ldr	r3, [sp, #8]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	46b8      	mov	r8, r7
 800836e:	9306      	str	r3, [sp, #24]
 8008370:	4607      	mov	r7, r0
 8008372:	9b04      	ldr	r3, [sp, #16]
 8008374:	4631      	mov	r1, r6
 8008376:	3b01      	subs	r3, #1
 8008378:	4650      	mov	r0, sl
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	f7ff fa6a 	bl	8007854 <quorem>
 8008380:	4641      	mov	r1, r8
 8008382:	9002      	str	r0, [sp, #8]
 8008384:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008388:	4650      	mov	r0, sl
 800838a:	f000 fc5b 	bl	8008c44 <__mcmp>
 800838e:	463a      	mov	r2, r7
 8008390:	9005      	str	r0, [sp, #20]
 8008392:	4631      	mov	r1, r6
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fc71 	bl	8008c7c <__mdiff>
 800839a:	68c2      	ldr	r2, [r0, #12]
 800839c:	4605      	mov	r5, r0
 800839e:	bb02      	cbnz	r2, 80083e2 <_dtoa_r+0xa7a>
 80083a0:	4601      	mov	r1, r0
 80083a2:	4650      	mov	r0, sl
 80083a4:	f000 fc4e 	bl	8008c44 <__mcmp>
 80083a8:	4602      	mov	r2, r0
 80083aa:	4629      	mov	r1, r5
 80083ac:	4620      	mov	r0, r4
 80083ae:	9209      	str	r2, [sp, #36]	; 0x24
 80083b0:	f000 fa0c 	bl	80087cc <_Bfree>
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083b8:	9d04      	ldr	r5, [sp, #16]
 80083ba:	ea43 0102 	orr.w	r1, r3, r2
 80083be:	9b06      	ldr	r3, [sp, #24]
 80083c0:	4319      	orrs	r1, r3
 80083c2:	d110      	bne.n	80083e6 <_dtoa_r+0xa7e>
 80083c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083c8:	d029      	beq.n	800841e <_dtoa_r+0xab6>
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dd02      	ble.n	80083d6 <_dtoa_r+0xa6e>
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	f883 9000 	strb.w	r9, [r3]
 80083dc:	e774      	b.n	80082c8 <_dtoa_r+0x960>
 80083de:	4638      	mov	r0, r7
 80083e0:	e7ba      	b.n	8008358 <_dtoa_r+0x9f0>
 80083e2:	2201      	movs	r2, #1
 80083e4:	e7e1      	b.n	80083aa <_dtoa_r+0xa42>
 80083e6:	9b05      	ldr	r3, [sp, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	db04      	blt.n	80083f6 <_dtoa_r+0xa8e>
 80083ec:	9907      	ldr	r1, [sp, #28]
 80083ee:	430b      	orrs	r3, r1
 80083f0:	9906      	ldr	r1, [sp, #24]
 80083f2:	430b      	orrs	r3, r1
 80083f4:	d120      	bne.n	8008438 <_dtoa_r+0xad0>
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	dded      	ble.n	80083d6 <_dtoa_r+0xa6e>
 80083fa:	4651      	mov	r1, sl
 80083fc:	2201      	movs	r2, #1
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 fbb4 	bl	8008b6c <__lshift>
 8008404:	4631      	mov	r1, r6
 8008406:	4682      	mov	sl, r0
 8008408:	f000 fc1c 	bl	8008c44 <__mcmp>
 800840c:	2800      	cmp	r0, #0
 800840e:	dc03      	bgt.n	8008418 <_dtoa_r+0xab0>
 8008410:	d1e1      	bne.n	80083d6 <_dtoa_r+0xa6e>
 8008412:	f019 0f01 	tst.w	r9, #1
 8008416:	d0de      	beq.n	80083d6 <_dtoa_r+0xa6e>
 8008418:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800841c:	d1d8      	bne.n	80083d0 <_dtoa_r+0xa68>
 800841e:	9a01      	ldr	r2, [sp, #4]
 8008420:	2339      	movs	r3, #57	; 0x39
 8008422:	7013      	strb	r3, [r2, #0]
 8008424:	462b      	mov	r3, r5
 8008426:	461d      	mov	r5, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800842e:	2a39      	cmp	r2, #57	; 0x39
 8008430:	d06c      	beq.n	800850c <_dtoa_r+0xba4>
 8008432:	3201      	adds	r2, #1
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	e747      	b.n	80082c8 <_dtoa_r+0x960>
 8008438:	2a00      	cmp	r2, #0
 800843a:	dd07      	ble.n	800844c <_dtoa_r+0xae4>
 800843c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008440:	d0ed      	beq.n	800841e <_dtoa_r+0xab6>
 8008442:	9a01      	ldr	r2, [sp, #4]
 8008444:	f109 0301 	add.w	r3, r9, #1
 8008448:	7013      	strb	r3, [r2, #0]
 800844a:	e73d      	b.n	80082c8 <_dtoa_r+0x960>
 800844c:	9b04      	ldr	r3, [sp, #16]
 800844e:	9a08      	ldr	r2, [sp, #32]
 8008450:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008454:	4293      	cmp	r3, r2
 8008456:	d043      	beq.n	80084e0 <_dtoa_r+0xb78>
 8008458:	4651      	mov	r1, sl
 800845a:	2300      	movs	r3, #0
 800845c:	220a      	movs	r2, #10
 800845e:	4620      	mov	r0, r4
 8008460:	f000 f9d6 	bl	8008810 <__multadd>
 8008464:	45b8      	cmp	r8, r7
 8008466:	4682      	mov	sl, r0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	f04f 020a 	mov.w	r2, #10
 8008470:	4641      	mov	r1, r8
 8008472:	4620      	mov	r0, r4
 8008474:	d107      	bne.n	8008486 <_dtoa_r+0xb1e>
 8008476:	f000 f9cb 	bl	8008810 <__multadd>
 800847a:	4680      	mov	r8, r0
 800847c:	4607      	mov	r7, r0
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	3301      	adds	r3, #1
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	e775      	b.n	8008372 <_dtoa_r+0xa0a>
 8008486:	f000 f9c3 	bl	8008810 <__multadd>
 800848a:	4639      	mov	r1, r7
 800848c:	4680      	mov	r8, r0
 800848e:	2300      	movs	r3, #0
 8008490:	220a      	movs	r2, #10
 8008492:	4620      	mov	r0, r4
 8008494:	f000 f9bc 	bl	8008810 <__multadd>
 8008498:	4607      	mov	r7, r0
 800849a:	e7f0      	b.n	800847e <_dtoa_r+0xb16>
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	9d00      	ldr	r5, [sp, #0]
 80084a2:	4631      	mov	r1, r6
 80084a4:	4650      	mov	r0, sl
 80084a6:	f7ff f9d5 	bl	8007854 <quorem>
 80084aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084ae:	9b00      	ldr	r3, [sp, #0]
 80084b0:	f805 9b01 	strb.w	r9, [r5], #1
 80084b4:	1aea      	subs	r2, r5, r3
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	4293      	cmp	r3, r2
 80084ba:	dd07      	ble.n	80084cc <_dtoa_r+0xb64>
 80084bc:	4651      	mov	r1, sl
 80084be:	2300      	movs	r3, #0
 80084c0:	220a      	movs	r2, #10
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f9a4 	bl	8008810 <__multadd>
 80084c8:	4682      	mov	sl, r0
 80084ca:	e7ea      	b.n	80084a2 <_dtoa_r+0xb3a>
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bfc8      	it	gt
 80084d2:	461d      	movgt	r5, r3
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	bfd8      	it	le
 80084d8:	2501      	movle	r5, #1
 80084da:	441d      	add	r5, r3
 80084dc:	f04f 0800 	mov.w	r8, #0
 80084e0:	4651      	mov	r1, sl
 80084e2:	2201      	movs	r2, #1
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fb41 	bl	8008b6c <__lshift>
 80084ea:	4631      	mov	r1, r6
 80084ec:	4682      	mov	sl, r0
 80084ee:	f000 fba9 	bl	8008c44 <__mcmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	dc96      	bgt.n	8008424 <_dtoa_r+0xabc>
 80084f6:	d102      	bne.n	80084fe <_dtoa_r+0xb96>
 80084f8:	f019 0f01 	tst.w	r9, #1
 80084fc:	d192      	bne.n	8008424 <_dtoa_r+0xabc>
 80084fe:	462b      	mov	r3, r5
 8008500:	461d      	mov	r5, r3
 8008502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008506:	2a30      	cmp	r2, #48	; 0x30
 8008508:	d0fa      	beq.n	8008500 <_dtoa_r+0xb98>
 800850a:	e6dd      	b.n	80082c8 <_dtoa_r+0x960>
 800850c:	9a00      	ldr	r2, [sp, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d189      	bne.n	8008426 <_dtoa_r+0xabe>
 8008512:	f10b 0b01 	add.w	fp, fp, #1
 8008516:	2331      	movs	r3, #49	; 0x31
 8008518:	e796      	b.n	8008448 <_dtoa_r+0xae0>
 800851a:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <_dtoa_r+0xbdc>)
 800851c:	f7ff ba99 	b.w	8007a52 <_dtoa_r+0xea>
 8008520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008522:	2b00      	cmp	r3, #0
 8008524:	f47f aa6d 	bne.w	8007a02 <_dtoa_r+0x9a>
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <_dtoa_r+0xbe0>)
 800852a:	f7ff ba92 	b.w	8007a52 <_dtoa_r+0xea>
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	dcb5      	bgt.n	80084a0 <_dtoa_r+0xb38>
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	2b02      	cmp	r3, #2
 8008538:	f73f aeb1 	bgt.w	800829e <_dtoa_r+0x936>
 800853c:	e7b0      	b.n	80084a0 <_dtoa_r+0xb38>
 800853e:	bf00      	nop
 8008540:	0801d190 	.word	0x0801d190
 8008544:	0801d0f0 	.word	0x0801d0f0
 8008548:	0801d114 	.word	0x0801d114

0800854c <_free_r>:
 800854c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800854e:	2900      	cmp	r1, #0
 8008550:	d044      	beq.n	80085dc <_free_r+0x90>
 8008552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008556:	9001      	str	r0, [sp, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f1a1 0404 	sub.w	r4, r1, #4
 800855e:	bfb8      	it	lt
 8008560:	18e4      	addlt	r4, r4, r3
 8008562:	f000 f8e7 	bl	8008734 <__malloc_lock>
 8008566:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <_free_r+0x94>)
 8008568:	9801      	ldr	r0, [sp, #4]
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	b933      	cbnz	r3, 800857c <_free_r+0x30>
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6014      	str	r4, [r2, #0]
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008578:	f000 b8e2 	b.w	8008740 <__malloc_unlock>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d908      	bls.n	8008592 <_free_r+0x46>
 8008580:	6825      	ldr	r5, [r4, #0]
 8008582:	1961      	adds	r1, r4, r5
 8008584:	428b      	cmp	r3, r1
 8008586:	bf01      	itttt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	1949      	addeq	r1, r1, r5
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	e7ed      	b.n	800856e <_free_r+0x22>
 8008592:	461a      	mov	r2, r3
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	b10b      	cbz	r3, 800859c <_free_r+0x50>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d9fa      	bls.n	8008592 <_free_r+0x46>
 800859c:	6811      	ldr	r1, [r2, #0]
 800859e:	1855      	adds	r5, r2, r1
 80085a0:	42a5      	cmp	r5, r4
 80085a2:	d10b      	bne.n	80085bc <_free_r+0x70>
 80085a4:	6824      	ldr	r4, [r4, #0]
 80085a6:	4421      	add	r1, r4
 80085a8:	1854      	adds	r4, r2, r1
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	d1e0      	bne.n	8008572 <_free_r+0x26>
 80085b0:	681c      	ldr	r4, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	6053      	str	r3, [r2, #4]
 80085b6:	440c      	add	r4, r1
 80085b8:	6014      	str	r4, [r2, #0]
 80085ba:	e7da      	b.n	8008572 <_free_r+0x26>
 80085bc:	d902      	bls.n	80085c4 <_free_r+0x78>
 80085be:	230c      	movs	r3, #12
 80085c0:	6003      	str	r3, [r0, #0]
 80085c2:	e7d6      	b.n	8008572 <_free_r+0x26>
 80085c4:	6825      	ldr	r5, [r4, #0]
 80085c6:	1961      	adds	r1, r4, r5
 80085c8:	428b      	cmp	r3, r1
 80085ca:	bf04      	itt	eq
 80085cc:	6819      	ldreq	r1, [r3, #0]
 80085ce:	685b      	ldreq	r3, [r3, #4]
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	bf04      	itt	eq
 80085d4:	1949      	addeq	r1, r1, r5
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	6054      	str	r4, [r2, #4]
 80085da:	e7ca      	b.n	8008572 <_free_r+0x26>
 80085dc:	b003      	add	sp, #12
 80085de:	bd30      	pop	{r4, r5, pc}
 80085e0:	2000f4e8 	.word	0x2000f4e8

080085e4 <malloc>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <malloc+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f000 b823 	b.w	8008634 <_malloc_r>
 80085ee:	bf00      	nop
 80085f0:	20000068 	.word	0x20000068

080085f4 <sbrk_aligned>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4e0e      	ldr	r6, [pc, #56]	; (8008630 <sbrk_aligned+0x3c>)
 80085f8:	460c      	mov	r4, r1
 80085fa:	6831      	ldr	r1, [r6, #0]
 80085fc:	4605      	mov	r5, r0
 80085fe:	b911      	cbnz	r1, 8008606 <sbrk_aligned+0x12>
 8008600:	f000 fe96 	bl	8009330 <_sbrk_r>
 8008604:	6030      	str	r0, [r6, #0]
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fe91 	bl	8009330 <_sbrk_r>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d00a      	beq.n	8008628 <sbrk_aligned+0x34>
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d007      	beq.n	800862c <sbrk_aligned+0x38>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4628      	mov	r0, r5
 8008620:	f000 fe86 	bl	8009330 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d101      	bne.n	800862c <sbrk_aligned+0x38>
 8008628:	f04f 34ff 	mov.w	r4, #4294967295
 800862c:	4620      	mov	r0, r4
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	2000f4ec 	.word	0x2000f4ec

08008634 <_malloc_r>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	1ccd      	adds	r5, r1, #3
 800863a:	f025 0503 	bic.w	r5, r5, #3
 800863e:	3508      	adds	r5, #8
 8008640:	2d0c      	cmp	r5, #12
 8008642:	bf38      	it	cc
 8008644:	250c      	movcc	r5, #12
 8008646:	2d00      	cmp	r5, #0
 8008648:	4607      	mov	r7, r0
 800864a:	db01      	blt.n	8008650 <_malloc_r+0x1c>
 800864c:	42a9      	cmp	r1, r5
 800864e:	d905      	bls.n	800865c <_malloc_r+0x28>
 8008650:	230c      	movs	r3, #12
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	2600      	movs	r6, #0
 8008656:	4630      	mov	r0, r6
 8008658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008730 <_malloc_r+0xfc>
 8008660:	f000 f868 	bl	8008734 <__malloc_lock>
 8008664:	f8d8 3000 	ldr.w	r3, [r8]
 8008668:	461c      	mov	r4, r3
 800866a:	bb5c      	cbnz	r4, 80086c4 <_malloc_r+0x90>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ffc0 	bl	80085f4 <sbrk_aligned>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	4604      	mov	r4, r0
 8008678:	d155      	bne.n	8008726 <_malloc_r+0xf2>
 800867a:	f8d8 4000 	ldr.w	r4, [r8]
 800867e:	4626      	mov	r6, r4
 8008680:	2e00      	cmp	r6, #0
 8008682:	d145      	bne.n	8008710 <_malloc_r+0xdc>
 8008684:	2c00      	cmp	r4, #0
 8008686:	d048      	beq.n	800871a <_malloc_r+0xe6>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	4631      	mov	r1, r6
 800868c:	4638      	mov	r0, r7
 800868e:	eb04 0903 	add.w	r9, r4, r3
 8008692:	f000 fe4d 	bl	8009330 <_sbrk_r>
 8008696:	4581      	cmp	r9, r0
 8008698:	d13f      	bne.n	800871a <_malloc_r+0xe6>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	1a6d      	subs	r5, r5, r1
 800869e:	4629      	mov	r1, r5
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ffa7 	bl	80085f4 <sbrk_aligned>
 80086a6:	3001      	adds	r0, #1
 80086a8:	d037      	beq.n	800871a <_malloc_r+0xe6>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	442b      	add	r3, r5
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	f8d8 3000 	ldr.w	r3, [r8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d038      	beq.n	800872a <_malloc_r+0xf6>
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	42a2      	cmp	r2, r4
 80086bc:	d12b      	bne.n	8008716 <_malloc_r+0xe2>
 80086be:	2200      	movs	r2, #0
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	e00f      	b.n	80086e4 <_malloc_r+0xb0>
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	1b52      	subs	r2, r2, r5
 80086c8:	d41f      	bmi.n	800870a <_malloc_r+0xd6>
 80086ca:	2a0b      	cmp	r2, #11
 80086cc:	d917      	bls.n	80086fe <_malloc_r+0xca>
 80086ce:	1961      	adds	r1, r4, r5
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	6025      	str	r5, [r4, #0]
 80086d4:	bf18      	it	ne
 80086d6:	6059      	strne	r1, [r3, #4]
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	bf08      	it	eq
 80086dc:	f8c8 1000 	streq.w	r1, [r8]
 80086e0:	5162      	str	r2, [r4, r5]
 80086e2:	604b      	str	r3, [r1, #4]
 80086e4:	4638      	mov	r0, r7
 80086e6:	f104 060b 	add.w	r6, r4, #11
 80086ea:	f000 f829 	bl	8008740 <__malloc_unlock>
 80086ee:	f026 0607 	bic.w	r6, r6, #7
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	1af2      	subs	r2, r6, r3
 80086f6:	d0ae      	beq.n	8008656 <_malloc_r+0x22>
 80086f8:	1b9b      	subs	r3, r3, r6
 80086fa:	50a3      	str	r3, [r4, r2]
 80086fc:	e7ab      	b.n	8008656 <_malloc_r+0x22>
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6862      	ldr	r2, [r4, #4]
 8008702:	d1dd      	bne.n	80086c0 <_malloc_r+0x8c>
 8008704:	f8c8 2000 	str.w	r2, [r8]
 8008708:	e7ec      	b.n	80086e4 <_malloc_r+0xb0>
 800870a:	4623      	mov	r3, r4
 800870c:	6864      	ldr	r4, [r4, #4]
 800870e:	e7ac      	b.n	800866a <_malloc_r+0x36>
 8008710:	4634      	mov	r4, r6
 8008712:	6876      	ldr	r6, [r6, #4]
 8008714:	e7b4      	b.n	8008680 <_malloc_r+0x4c>
 8008716:	4613      	mov	r3, r2
 8008718:	e7cc      	b.n	80086b4 <_malloc_r+0x80>
 800871a:	230c      	movs	r3, #12
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4638      	mov	r0, r7
 8008720:	f000 f80e 	bl	8008740 <__malloc_unlock>
 8008724:	e797      	b.n	8008656 <_malloc_r+0x22>
 8008726:	6025      	str	r5, [r4, #0]
 8008728:	e7dc      	b.n	80086e4 <_malloc_r+0xb0>
 800872a:	605b      	str	r3, [r3, #4]
 800872c:	deff      	udf	#255	; 0xff
 800872e:	bf00      	nop
 8008730:	2000f4e8 	.word	0x2000f4e8

08008734 <__malloc_lock>:
 8008734:	4801      	ldr	r0, [pc, #4]	; (800873c <__malloc_lock+0x8>)
 8008736:	f7ff b88b 	b.w	8007850 <__retarget_lock_acquire_recursive>
 800873a:	bf00      	nop
 800873c:	2000f4e4 	.word	0x2000f4e4

08008740 <__malloc_unlock>:
 8008740:	4801      	ldr	r0, [pc, #4]	; (8008748 <__malloc_unlock+0x8>)
 8008742:	f7ff b886 	b.w	8007852 <__retarget_lock_release_recursive>
 8008746:	bf00      	nop
 8008748:	2000f4e4 	.word	0x2000f4e4

0800874c <_Balloc>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	69c6      	ldr	r6, [r0, #28]
 8008750:	4604      	mov	r4, r0
 8008752:	460d      	mov	r5, r1
 8008754:	b976      	cbnz	r6, 8008774 <_Balloc+0x28>
 8008756:	2010      	movs	r0, #16
 8008758:	f7ff ff44 	bl	80085e4 <malloc>
 800875c:	4602      	mov	r2, r0
 800875e:	61e0      	str	r0, [r4, #28]
 8008760:	b920      	cbnz	r0, 800876c <_Balloc+0x20>
 8008762:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <_Balloc+0x78>)
 8008764:	4818      	ldr	r0, [pc, #96]	; (80087c8 <_Balloc+0x7c>)
 8008766:	216b      	movs	r1, #107	; 0x6b
 8008768:	f000 fe00 	bl	800936c <__assert_func>
 800876c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008770:	6006      	str	r6, [r0, #0]
 8008772:	60c6      	str	r6, [r0, #12]
 8008774:	69e6      	ldr	r6, [r4, #28]
 8008776:	68f3      	ldr	r3, [r6, #12]
 8008778:	b183      	cbz	r3, 800879c <_Balloc+0x50>
 800877a:	69e3      	ldr	r3, [r4, #28]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008782:	b9b8      	cbnz	r0, 80087b4 <_Balloc+0x68>
 8008784:	2101      	movs	r1, #1
 8008786:	fa01 f605 	lsl.w	r6, r1, r5
 800878a:	1d72      	adds	r2, r6, #5
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	4620      	mov	r0, r4
 8008790:	f000 fe0a 	bl	80093a8 <_calloc_r>
 8008794:	b160      	cbz	r0, 80087b0 <_Balloc+0x64>
 8008796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800879a:	e00e      	b.n	80087ba <_Balloc+0x6e>
 800879c:	2221      	movs	r2, #33	; 0x21
 800879e:	2104      	movs	r1, #4
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fe01 	bl	80093a8 <_calloc_r>
 80087a6:	69e3      	ldr	r3, [r4, #28]
 80087a8:	60f0      	str	r0, [r6, #12]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e4      	bne.n	800877a <_Balloc+0x2e>
 80087b0:	2000      	movs	r0, #0
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	6802      	ldr	r2, [r0, #0]
 80087b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087ba:	2300      	movs	r3, #0
 80087bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087c0:	e7f7      	b.n	80087b2 <_Balloc+0x66>
 80087c2:	bf00      	nop
 80087c4:	0801d121 	.word	0x0801d121
 80087c8:	0801d1a1 	.word	0x0801d1a1

080087cc <_Bfree>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	69c6      	ldr	r6, [r0, #28]
 80087d0:	4605      	mov	r5, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	b976      	cbnz	r6, 80087f4 <_Bfree+0x28>
 80087d6:	2010      	movs	r0, #16
 80087d8:	f7ff ff04 	bl	80085e4 <malloc>
 80087dc:	4602      	mov	r2, r0
 80087de:	61e8      	str	r0, [r5, #28]
 80087e0:	b920      	cbnz	r0, 80087ec <_Bfree+0x20>
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <_Bfree+0x3c>)
 80087e4:	4809      	ldr	r0, [pc, #36]	; (800880c <_Bfree+0x40>)
 80087e6:	218f      	movs	r1, #143	; 0x8f
 80087e8:	f000 fdc0 	bl	800936c <__assert_func>
 80087ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087f0:	6006      	str	r6, [r0, #0]
 80087f2:	60c6      	str	r6, [r0, #12]
 80087f4:	b13c      	cbz	r4, 8008806 <_Bfree+0x3a>
 80087f6:	69eb      	ldr	r3, [r5, #28]
 80087f8:	6862      	ldr	r2, [r4, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008800:	6021      	str	r1, [r4, #0]
 8008802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	0801d121 	.word	0x0801d121
 800880c:	0801d1a1 	.word	0x0801d1a1

08008810 <__multadd>:
 8008810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	690d      	ldr	r5, [r1, #16]
 8008816:	4607      	mov	r7, r0
 8008818:	460c      	mov	r4, r1
 800881a:	461e      	mov	r6, r3
 800881c:	f101 0c14 	add.w	ip, r1, #20
 8008820:	2000      	movs	r0, #0
 8008822:	f8dc 3000 	ldr.w	r3, [ip]
 8008826:	b299      	uxth	r1, r3
 8008828:	fb02 6101 	mla	r1, r2, r1, r6
 800882c:	0c1e      	lsrs	r6, r3, #16
 800882e:	0c0b      	lsrs	r3, r1, #16
 8008830:	fb02 3306 	mla	r3, r2, r6, r3
 8008834:	b289      	uxth	r1, r1
 8008836:	3001      	adds	r0, #1
 8008838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800883c:	4285      	cmp	r5, r0
 800883e:	f84c 1b04 	str.w	r1, [ip], #4
 8008842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008846:	dcec      	bgt.n	8008822 <__multadd+0x12>
 8008848:	b30e      	cbz	r6, 800888e <__multadd+0x7e>
 800884a:	68a3      	ldr	r3, [r4, #8]
 800884c:	42ab      	cmp	r3, r5
 800884e:	dc19      	bgt.n	8008884 <__multadd+0x74>
 8008850:	6861      	ldr	r1, [r4, #4]
 8008852:	4638      	mov	r0, r7
 8008854:	3101      	adds	r1, #1
 8008856:	f7ff ff79 	bl	800874c <_Balloc>
 800885a:	4680      	mov	r8, r0
 800885c:	b928      	cbnz	r0, 800886a <__multadd+0x5a>
 800885e:	4602      	mov	r2, r0
 8008860:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <__multadd+0x84>)
 8008862:	480d      	ldr	r0, [pc, #52]	; (8008898 <__multadd+0x88>)
 8008864:	21ba      	movs	r1, #186	; 0xba
 8008866:	f000 fd81 	bl	800936c <__assert_func>
 800886a:	6922      	ldr	r2, [r4, #16]
 800886c:	3202      	adds	r2, #2
 800886e:	f104 010c 	add.w	r1, r4, #12
 8008872:	0092      	lsls	r2, r2, #2
 8008874:	300c      	adds	r0, #12
 8008876:	f000 fd6b 	bl	8009350 <memcpy>
 800887a:	4621      	mov	r1, r4
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff ffa5 	bl	80087cc <_Bfree>
 8008882:	4644      	mov	r4, r8
 8008884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008888:	3501      	adds	r5, #1
 800888a:	615e      	str	r6, [r3, #20]
 800888c:	6125      	str	r5, [r4, #16]
 800888e:	4620      	mov	r0, r4
 8008890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008894:	0801d190 	.word	0x0801d190
 8008898:	0801d1a1 	.word	0x0801d1a1

0800889c <__hi0bits>:
 800889c:	0c03      	lsrs	r3, r0, #16
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	b9d3      	cbnz	r3, 80088d8 <__hi0bits+0x3c>
 80088a2:	0400      	lsls	r0, r0, #16
 80088a4:	2310      	movs	r3, #16
 80088a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088aa:	bf04      	itt	eq
 80088ac:	0200      	lsleq	r0, r0, #8
 80088ae:	3308      	addeq	r3, #8
 80088b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088b4:	bf04      	itt	eq
 80088b6:	0100      	lsleq	r0, r0, #4
 80088b8:	3304      	addeq	r3, #4
 80088ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088be:	bf04      	itt	eq
 80088c0:	0080      	lsleq	r0, r0, #2
 80088c2:	3302      	addeq	r3, #2
 80088c4:	2800      	cmp	r0, #0
 80088c6:	db05      	blt.n	80088d4 <__hi0bits+0x38>
 80088c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088cc:	f103 0301 	add.w	r3, r3, #1
 80088d0:	bf08      	it	eq
 80088d2:	2320      	moveq	r3, #32
 80088d4:	4618      	mov	r0, r3
 80088d6:	4770      	bx	lr
 80088d8:	2300      	movs	r3, #0
 80088da:	e7e4      	b.n	80088a6 <__hi0bits+0xa>

080088dc <__lo0bits>:
 80088dc:	6803      	ldr	r3, [r0, #0]
 80088de:	f013 0207 	ands.w	r2, r3, #7
 80088e2:	d00c      	beq.n	80088fe <__lo0bits+0x22>
 80088e4:	07d9      	lsls	r1, r3, #31
 80088e6:	d422      	bmi.n	800892e <__lo0bits+0x52>
 80088e8:	079a      	lsls	r2, r3, #30
 80088ea:	bf49      	itett	mi
 80088ec:	085b      	lsrmi	r3, r3, #1
 80088ee:	089b      	lsrpl	r3, r3, #2
 80088f0:	6003      	strmi	r3, [r0, #0]
 80088f2:	2201      	movmi	r2, #1
 80088f4:	bf5c      	itt	pl
 80088f6:	6003      	strpl	r3, [r0, #0]
 80088f8:	2202      	movpl	r2, #2
 80088fa:	4610      	mov	r0, r2
 80088fc:	4770      	bx	lr
 80088fe:	b299      	uxth	r1, r3
 8008900:	b909      	cbnz	r1, 8008906 <__lo0bits+0x2a>
 8008902:	0c1b      	lsrs	r3, r3, #16
 8008904:	2210      	movs	r2, #16
 8008906:	b2d9      	uxtb	r1, r3
 8008908:	b909      	cbnz	r1, 800890e <__lo0bits+0x32>
 800890a:	3208      	adds	r2, #8
 800890c:	0a1b      	lsrs	r3, r3, #8
 800890e:	0719      	lsls	r1, r3, #28
 8008910:	bf04      	itt	eq
 8008912:	091b      	lsreq	r3, r3, #4
 8008914:	3204      	addeq	r2, #4
 8008916:	0799      	lsls	r1, r3, #30
 8008918:	bf04      	itt	eq
 800891a:	089b      	lsreq	r3, r3, #2
 800891c:	3202      	addeq	r2, #2
 800891e:	07d9      	lsls	r1, r3, #31
 8008920:	d403      	bmi.n	800892a <__lo0bits+0x4e>
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	f102 0201 	add.w	r2, r2, #1
 8008928:	d003      	beq.n	8008932 <__lo0bits+0x56>
 800892a:	6003      	str	r3, [r0, #0]
 800892c:	e7e5      	b.n	80088fa <__lo0bits+0x1e>
 800892e:	2200      	movs	r2, #0
 8008930:	e7e3      	b.n	80088fa <__lo0bits+0x1e>
 8008932:	2220      	movs	r2, #32
 8008934:	e7e1      	b.n	80088fa <__lo0bits+0x1e>
	...

08008938 <__i2b>:
 8008938:	b510      	push	{r4, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	2101      	movs	r1, #1
 800893e:	f7ff ff05 	bl	800874c <_Balloc>
 8008942:	4602      	mov	r2, r0
 8008944:	b928      	cbnz	r0, 8008952 <__i2b+0x1a>
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <__i2b+0x24>)
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <__i2b+0x28>)
 800894a:	f240 1145 	movw	r1, #325	; 0x145
 800894e:	f000 fd0d 	bl	800936c <__assert_func>
 8008952:	2301      	movs	r3, #1
 8008954:	6144      	str	r4, [r0, #20]
 8008956:	6103      	str	r3, [r0, #16]
 8008958:	bd10      	pop	{r4, pc}
 800895a:	bf00      	nop
 800895c:	0801d190 	.word	0x0801d190
 8008960:	0801d1a1 	.word	0x0801d1a1

08008964 <__multiply>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	4691      	mov	r9, r2
 800896a:	690a      	ldr	r2, [r1, #16]
 800896c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008970:	429a      	cmp	r2, r3
 8008972:	bfb8      	it	lt
 8008974:	460b      	movlt	r3, r1
 8008976:	460c      	mov	r4, r1
 8008978:	bfbc      	itt	lt
 800897a:	464c      	movlt	r4, r9
 800897c:	4699      	movlt	r9, r3
 800897e:	6927      	ldr	r7, [r4, #16]
 8008980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	6861      	ldr	r1, [r4, #4]
 8008988:	eb07 060a 	add.w	r6, r7, sl
 800898c:	42b3      	cmp	r3, r6
 800898e:	b085      	sub	sp, #20
 8008990:	bfb8      	it	lt
 8008992:	3101      	addlt	r1, #1
 8008994:	f7ff feda 	bl	800874c <_Balloc>
 8008998:	b930      	cbnz	r0, 80089a8 <__multiply+0x44>
 800899a:	4602      	mov	r2, r0
 800899c:	4b44      	ldr	r3, [pc, #272]	; (8008ab0 <__multiply+0x14c>)
 800899e:	4845      	ldr	r0, [pc, #276]	; (8008ab4 <__multiply+0x150>)
 80089a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80089a4:	f000 fce2 	bl	800936c <__assert_func>
 80089a8:	f100 0514 	add.w	r5, r0, #20
 80089ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089b0:	462b      	mov	r3, r5
 80089b2:	2200      	movs	r2, #0
 80089b4:	4543      	cmp	r3, r8
 80089b6:	d321      	bcc.n	80089fc <__multiply+0x98>
 80089b8:	f104 0314 	add.w	r3, r4, #20
 80089bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089c0:	f109 0314 	add.w	r3, r9, #20
 80089c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089c8:	9202      	str	r2, [sp, #8]
 80089ca:	1b3a      	subs	r2, r7, r4
 80089cc:	3a15      	subs	r2, #21
 80089ce:	f022 0203 	bic.w	r2, r2, #3
 80089d2:	3204      	adds	r2, #4
 80089d4:	f104 0115 	add.w	r1, r4, #21
 80089d8:	428f      	cmp	r7, r1
 80089da:	bf38      	it	cc
 80089dc:	2204      	movcc	r2, #4
 80089de:	9201      	str	r2, [sp, #4]
 80089e0:	9a02      	ldr	r2, [sp, #8]
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d80c      	bhi.n	8008a02 <__multiply+0x9e>
 80089e8:	2e00      	cmp	r6, #0
 80089ea:	dd03      	ble.n	80089f4 <__multiply+0x90>
 80089ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d05b      	beq.n	8008aac <__multiply+0x148>
 80089f4:	6106      	str	r6, [r0, #16]
 80089f6:	b005      	add	sp, #20
 80089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fc:	f843 2b04 	str.w	r2, [r3], #4
 8008a00:	e7d8      	b.n	80089b4 <__multiply+0x50>
 8008a02:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a06:	f1ba 0f00 	cmp.w	sl, #0
 8008a0a:	d024      	beq.n	8008a56 <__multiply+0xf2>
 8008a0c:	f104 0e14 	add.w	lr, r4, #20
 8008a10:	46a9      	mov	r9, r5
 8008a12:	f04f 0c00 	mov.w	ip, #0
 8008a16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a1a:	f8d9 1000 	ldr.w	r1, [r9]
 8008a1e:	fa1f fb82 	uxth.w	fp, r2
 8008a22:	b289      	uxth	r1, r1
 8008a24:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a30:	4461      	add	r1, ip
 8008a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a36:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a3e:	b289      	uxth	r1, r1
 8008a40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a44:	4577      	cmp	r7, lr
 8008a46:	f849 1b04 	str.w	r1, [r9], #4
 8008a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a4e:	d8e2      	bhi.n	8008a16 <__multiply+0xb2>
 8008a50:	9a01      	ldr	r2, [sp, #4]
 8008a52:	f845 c002 	str.w	ip, [r5, r2]
 8008a56:	9a03      	ldr	r2, [sp, #12]
 8008a58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	f1b9 0f00 	cmp.w	r9, #0
 8008a62:	d021      	beq.n	8008aa8 <__multiply+0x144>
 8008a64:	6829      	ldr	r1, [r5, #0]
 8008a66:	f104 0c14 	add.w	ip, r4, #20
 8008a6a:	46ae      	mov	lr, r5
 8008a6c:	f04f 0a00 	mov.w	sl, #0
 8008a70:	f8bc b000 	ldrh.w	fp, [ip]
 8008a74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a78:	fb09 220b 	mla	r2, r9, fp, r2
 8008a7c:	4452      	add	r2, sl
 8008a7e:	b289      	uxth	r1, r1
 8008a80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a84:	f84e 1b04 	str.w	r1, [lr], #4
 8008a88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a90:	f8be 1000 	ldrh.w	r1, [lr]
 8008a94:	fb09 110a 	mla	r1, r9, sl, r1
 8008a98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a9c:	4567      	cmp	r7, ip
 8008a9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aa2:	d8e5      	bhi.n	8008a70 <__multiply+0x10c>
 8008aa4:	9a01      	ldr	r2, [sp, #4]
 8008aa6:	50a9      	str	r1, [r5, r2]
 8008aa8:	3504      	adds	r5, #4
 8008aaa:	e799      	b.n	80089e0 <__multiply+0x7c>
 8008aac:	3e01      	subs	r6, #1
 8008aae:	e79b      	b.n	80089e8 <__multiply+0x84>
 8008ab0:	0801d190 	.word	0x0801d190
 8008ab4:	0801d1a1 	.word	0x0801d1a1

08008ab8 <__pow5mult>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	4615      	mov	r5, r2
 8008abe:	f012 0203 	ands.w	r2, r2, #3
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	d007      	beq.n	8008ad8 <__pow5mult+0x20>
 8008ac8:	4c25      	ldr	r4, [pc, #148]	; (8008b60 <__pow5mult+0xa8>)
 8008aca:	3a01      	subs	r2, #1
 8008acc:	2300      	movs	r3, #0
 8008ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ad2:	f7ff fe9d 	bl	8008810 <__multadd>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	10ad      	asrs	r5, r5, #2
 8008ada:	d03d      	beq.n	8008b58 <__pow5mult+0xa0>
 8008adc:	69f4      	ldr	r4, [r6, #28]
 8008ade:	b97c      	cbnz	r4, 8008b00 <__pow5mult+0x48>
 8008ae0:	2010      	movs	r0, #16
 8008ae2:	f7ff fd7f 	bl	80085e4 <malloc>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	61f0      	str	r0, [r6, #28]
 8008aea:	b928      	cbnz	r0, 8008af8 <__pow5mult+0x40>
 8008aec:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <__pow5mult+0xac>)
 8008aee:	481e      	ldr	r0, [pc, #120]	; (8008b68 <__pow5mult+0xb0>)
 8008af0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008af4:	f000 fc3a 	bl	800936c <__assert_func>
 8008af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008afc:	6004      	str	r4, [r0, #0]
 8008afe:	60c4      	str	r4, [r0, #12]
 8008b00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b08:	b94c      	cbnz	r4, 8008b1e <__pow5mult+0x66>
 8008b0a:	f240 2171 	movw	r1, #625	; 0x271
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f7ff ff12 	bl	8008938 <__i2b>
 8008b14:	2300      	movs	r3, #0
 8008b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	f04f 0900 	mov.w	r9, #0
 8008b22:	07eb      	lsls	r3, r5, #31
 8008b24:	d50a      	bpl.n	8008b3c <__pow5mult+0x84>
 8008b26:	4639      	mov	r1, r7
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ff1a 	bl	8008964 <__multiply>
 8008b30:	4639      	mov	r1, r7
 8008b32:	4680      	mov	r8, r0
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7ff fe49 	bl	80087cc <_Bfree>
 8008b3a:	4647      	mov	r7, r8
 8008b3c:	106d      	asrs	r5, r5, #1
 8008b3e:	d00b      	beq.n	8008b58 <__pow5mult+0xa0>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	b938      	cbnz	r0, 8008b54 <__pow5mult+0x9c>
 8008b44:	4622      	mov	r2, r4
 8008b46:	4621      	mov	r1, r4
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff ff0b 	bl	8008964 <__multiply>
 8008b4e:	6020      	str	r0, [r4, #0]
 8008b50:	f8c0 9000 	str.w	r9, [r0]
 8008b54:	4604      	mov	r4, r0
 8008b56:	e7e4      	b.n	8008b22 <__pow5mult+0x6a>
 8008b58:	4638      	mov	r0, r7
 8008b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b5e:	bf00      	nop
 8008b60:	0801d2f0 	.word	0x0801d2f0
 8008b64:	0801d121 	.word	0x0801d121
 8008b68:	0801d1a1 	.word	0x0801d1a1

08008b6c <__lshift>:
 8008b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	460c      	mov	r4, r1
 8008b72:	6849      	ldr	r1, [r1, #4]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	4691      	mov	r9, r2
 8008b80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b84:	f108 0601 	add.w	r6, r8, #1
 8008b88:	42b3      	cmp	r3, r6
 8008b8a:	db0b      	blt.n	8008ba4 <__lshift+0x38>
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff fddd 	bl	800874c <_Balloc>
 8008b92:	4605      	mov	r5, r0
 8008b94:	b948      	cbnz	r0, 8008baa <__lshift+0x3e>
 8008b96:	4602      	mov	r2, r0
 8008b98:	4b28      	ldr	r3, [pc, #160]	; (8008c3c <__lshift+0xd0>)
 8008b9a:	4829      	ldr	r0, [pc, #164]	; (8008c40 <__lshift+0xd4>)
 8008b9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ba0:	f000 fbe4 	bl	800936c <__assert_func>
 8008ba4:	3101      	adds	r1, #1
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	e7ee      	b.n	8008b88 <__lshift+0x1c>
 8008baa:	2300      	movs	r3, #0
 8008bac:	f100 0114 	add.w	r1, r0, #20
 8008bb0:	f100 0210 	add.w	r2, r0, #16
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	4553      	cmp	r3, sl
 8008bb8:	db33      	blt.n	8008c22 <__lshift+0xb6>
 8008bba:	6920      	ldr	r0, [r4, #16]
 8008bbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bc0:	f104 0314 	add.w	r3, r4, #20
 8008bc4:	f019 091f 	ands.w	r9, r9, #31
 8008bc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bd0:	d02b      	beq.n	8008c2a <__lshift+0xbe>
 8008bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8008bd6:	468a      	mov	sl, r1
 8008bd8:	2200      	movs	r2, #0
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	fa00 f009 	lsl.w	r0, r0, r9
 8008be0:	4310      	orrs	r0, r2
 8008be2:	f84a 0b04 	str.w	r0, [sl], #4
 8008be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bea:	459c      	cmp	ip, r3
 8008bec:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bf0:	d8f3      	bhi.n	8008bda <__lshift+0x6e>
 8008bf2:	ebac 0304 	sub.w	r3, ip, r4
 8008bf6:	3b15      	subs	r3, #21
 8008bf8:	f023 0303 	bic.w	r3, r3, #3
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	f104 0015 	add.w	r0, r4, #21
 8008c02:	4584      	cmp	ip, r0
 8008c04:	bf38      	it	cc
 8008c06:	2304      	movcc	r3, #4
 8008c08:	50ca      	str	r2, [r1, r3]
 8008c0a:	b10a      	cbz	r2, 8008c10 <__lshift+0xa4>
 8008c0c:	f108 0602 	add.w	r6, r8, #2
 8008c10:	3e01      	subs	r6, #1
 8008c12:	4638      	mov	r0, r7
 8008c14:	612e      	str	r6, [r5, #16]
 8008c16:	4621      	mov	r1, r4
 8008c18:	f7ff fdd8 	bl	80087cc <_Bfree>
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c26:	3301      	adds	r3, #1
 8008c28:	e7c5      	b.n	8008bb6 <__lshift+0x4a>
 8008c2a:	3904      	subs	r1, #4
 8008c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c30:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c34:	459c      	cmp	ip, r3
 8008c36:	d8f9      	bhi.n	8008c2c <__lshift+0xc0>
 8008c38:	e7ea      	b.n	8008c10 <__lshift+0xa4>
 8008c3a:	bf00      	nop
 8008c3c:	0801d190 	.word	0x0801d190
 8008c40:	0801d1a1 	.word	0x0801d1a1

08008c44 <__mcmp>:
 8008c44:	b530      	push	{r4, r5, lr}
 8008c46:	6902      	ldr	r2, [r0, #16]
 8008c48:	690c      	ldr	r4, [r1, #16]
 8008c4a:	1b12      	subs	r2, r2, r4
 8008c4c:	d10e      	bne.n	8008c6c <__mcmp+0x28>
 8008c4e:	f100 0314 	add.w	r3, r0, #20
 8008c52:	3114      	adds	r1, #20
 8008c54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c64:	42a5      	cmp	r5, r4
 8008c66:	d003      	beq.n	8008c70 <__mcmp+0x2c>
 8008c68:	d305      	bcc.n	8008c76 <__mcmp+0x32>
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	bd30      	pop	{r4, r5, pc}
 8008c70:	4283      	cmp	r3, r0
 8008c72:	d3f3      	bcc.n	8008c5c <__mcmp+0x18>
 8008c74:	e7fa      	b.n	8008c6c <__mcmp+0x28>
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7a:	e7f7      	b.n	8008c6c <__mcmp+0x28>

08008c7c <__mdiff>:
 8008c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	4606      	mov	r6, r0
 8008c84:	4611      	mov	r1, r2
 8008c86:	4620      	mov	r0, r4
 8008c88:	4690      	mov	r8, r2
 8008c8a:	f7ff ffdb 	bl	8008c44 <__mcmp>
 8008c8e:	1e05      	subs	r5, r0, #0
 8008c90:	d110      	bne.n	8008cb4 <__mdiff+0x38>
 8008c92:	4629      	mov	r1, r5
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff fd59 	bl	800874c <_Balloc>
 8008c9a:	b930      	cbnz	r0, 8008caa <__mdiff+0x2e>
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	; (8008d88 <__mdiff+0x10c>)
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	f240 2137 	movw	r1, #567	; 0x237
 8008ca4:	4839      	ldr	r0, [pc, #228]	; (8008d8c <__mdiff+0x110>)
 8008ca6:	f000 fb61 	bl	800936c <__assert_func>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	bfa4      	itt	ge
 8008cb6:	4643      	movge	r3, r8
 8008cb8:	46a0      	movge	r8, r4
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cc0:	bfa6      	itte	ge
 8008cc2:	461c      	movge	r4, r3
 8008cc4:	2500      	movge	r5, #0
 8008cc6:	2501      	movlt	r5, #1
 8008cc8:	f7ff fd40 	bl	800874c <_Balloc>
 8008ccc:	b920      	cbnz	r0, 8008cd8 <__mdiff+0x5c>
 8008cce:	4b2e      	ldr	r3, [pc, #184]	; (8008d88 <__mdiff+0x10c>)
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	f240 2145 	movw	r1, #581	; 0x245
 8008cd6:	e7e5      	b.n	8008ca4 <__mdiff+0x28>
 8008cd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cdc:	6926      	ldr	r6, [r4, #16]
 8008cde:	60c5      	str	r5, [r0, #12]
 8008ce0:	f104 0914 	add.w	r9, r4, #20
 8008ce4:	f108 0514 	add.w	r5, r8, #20
 8008ce8:	f100 0e14 	add.w	lr, r0, #20
 8008cec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cf4:	f108 0210 	add.w	r2, r8, #16
 8008cf8:	46f2      	mov	sl, lr
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d04:	fa11 f88b 	uxtah	r8, r1, fp
 8008d08:	b299      	uxth	r1, r3
 8008d0a:	0c1b      	lsrs	r3, r3, #16
 8008d0c:	eba8 0801 	sub.w	r8, r8, r1
 8008d10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d18:	fa1f f888 	uxth.w	r8, r8
 8008d1c:	1419      	asrs	r1, r3, #16
 8008d1e:	454e      	cmp	r6, r9
 8008d20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d24:	f84a 3b04 	str.w	r3, [sl], #4
 8008d28:	d8e8      	bhi.n	8008cfc <__mdiff+0x80>
 8008d2a:	1b33      	subs	r3, r6, r4
 8008d2c:	3b15      	subs	r3, #21
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	3304      	adds	r3, #4
 8008d34:	3415      	adds	r4, #21
 8008d36:	42a6      	cmp	r6, r4
 8008d38:	bf38      	it	cc
 8008d3a:	2304      	movcc	r3, #4
 8008d3c:	441d      	add	r5, r3
 8008d3e:	4473      	add	r3, lr
 8008d40:	469e      	mov	lr, r3
 8008d42:	462e      	mov	r6, r5
 8008d44:	4566      	cmp	r6, ip
 8008d46:	d30e      	bcc.n	8008d66 <__mdiff+0xea>
 8008d48:	f10c 0203 	add.w	r2, ip, #3
 8008d4c:	1b52      	subs	r2, r2, r5
 8008d4e:	f022 0203 	bic.w	r2, r2, #3
 8008d52:	3d03      	subs	r5, #3
 8008d54:	45ac      	cmp	ip, r5
 8008d56:	bf38      	it	cc
 8008d58:	2200      	movcc	r2, #0
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d60:	b17a      	cbz	r2, 8008d82 <__mdiff+0x106>
 8008d62:	6107      	str	r7, [r0, #16]
 8008d64:	e7a4      	b.n	8008cb0 <__mdiff+0x34>
 8008d66:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d6a:	fa11 f288 	uxtah	r2, r1, r8
 8008d6e:	1414      	asrs	r4, r2, #16
 8008d70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d74:	b292      	uxth	r2, r2
 8008d76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d7a:	f84e 2b04 	str.w	r2, [lr], #4
 8008d7e:	1421      	asrs	r1, r4, #16
 8008d80:	e7e0      	b.n	8008d44 <__mdiff+0xc8>
 8008d82:	3f01      	subs	r7, #1
 8008d84:	e7ea      	b.n	8008d5c <__mdiff+0xe0>
 8008d86:	bf00      	nop
 8008d88:	0801d190 	.word	0x0801d190
 8008d8c:	0801d1a1 	.word	0x0801d1a1

08008d90 <__d2b>:
 8008d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	460f      	mov	r7, r1
 8008d96:	2101      	movs	r1, #1
 8008d98:	ec59 8b10 	vmov	r8, r9, d0
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	f7ff fcd5 	bl	800874c <_Balloc>
 8008da2:	4604      	mov	r4, r0
 8008da4:	b930      	cbnz	r0, 8008db4 <__d2b+0x24>
 8008da6:	4602      	mov	r2, r0
 8008da8:	4b24      	ldr	r3, [pc, #144]	; (8008e3c <__d2b+0xac>)
 8008daa:	4825      	ldr	r0, [pc, #148]	; (8008e40 <__d2b+0xb0>)
 8008dac:	f240 310f 	movw	r1, #783	; 0x30f
 8008db0:	f000 fadc 	bl	800936c <__assert_func>
 8008db4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dbc:	bb2d      	cbnz	r5, 8008e0a <__d2b+0x7a>
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	f1b8 0300 	subs.w	r3, r8, #0
 8008dc4:	d026      	beq.n	8008e14 <__d2b+0x84>
 8008dc6:	4668      	mov	r0, sp
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	f7ff fd87 	bl	80088dc <__lo0bits>
 8008dce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008dd2:	b1e8      	cbz	r0, 8008e10 <__d2b+0x80>
 8008dd4:	f1c0 0320 	rsb	r3, r0, #32
 8008dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	40c2      	lsrs	r2, r0
 8008de0:	6163      	str	r3, [r4, #20]
 8008de2:	9201      	str	r2, [sp, #4]
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	61a3      	str	r3, [r4, #24]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	bf14      	ite	ne
 8008dec:	2202      	movne	r2, #2
 8008dee:	2201      	moveq	r2, #1
 8008df0:	6122      	str	r2, [r4, #16]
 8008df2:	b1bd      	cbz	r5, 8008e24 <__d2b+0x94>
 8008df4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008df8:	4405      	add	r5, r0
 8008dfa:	603d      	str	r5, [r7, #0]
 8008dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e00:	6030      	str	r0, [r6, #0]
 8008e02:	4620      	mov	r0, r4
 8008e04:	b003      	add	sp, #12
 8008e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e0e:	e7d6      	b.n	8008dbe <__d2b+0x2e>
 8008e10:	6161      	str	r1, [r4, #20]
 8008e12:	e7e7      	b.n	8008de4 <__d2b+0x54>
 8008e14:	a801      	add	r0, sp, #4
 8008e16:	f7ff fd61 	bl	80088dc <__lo0bits>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	6163      	str	r3, [r4, #20]
 8008e1e:	3020      	adds	r0, #32
 8008e20:	2201      	movs	r2, #1
 8008e22:	e7e5      	b.n	8008df0 <__d2b+0x60>
 8008e24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e2c:	6038      	str	r0, [r7, #0]
 8008e2e:	6918      	ldr	r0, [r3, #16]
 8008e30:	f7ff fd34 	bl	800889c <__hi0bits>
 8008e34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e38:	e7e2      	b.n	8008e00 <__d2b+0x70>
 8008e3a:	bf00      	nop
 8008e3c:	0801d190 	.word	0x0801d190
 8008e40:	0801d1a1 	.word	0x0801d1a1

08008e44 <__sfputc_r>:
 8008e44:	6893      	ldr	r3, [r2, #8]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	b410      	push	{r4}
 8008e4c:	6093      	str	r3, [r2, #8]
 8008e4e:	da08      	bge.n	8008e62 <__sfputc_r+0x1e>
 8008e50:	6994      	ldr	r4, [r2, #24]
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	db01      	blt.n	8008e5a <__sfputc_r+0x16>
 8008e56:	290a      	cmp	r1, #10
 8008e58:	d103      	bne.n	8008e62 <__sfputc_r+0x1e>
 8008e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5e:	f7fe bbe6 	b.w	800762e <__swbuf_r>
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	1c58      	adds	r0, r3, #1
 8008e66:	6010      	str	r0, [r2, #0]
 8008e68:	7019      	strb	r1, [r3, #0]
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <__sfputs_r>:
 8008e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	18d5      	adds	r5, r2, r3
 8008e7c:	42ac      	cmp	r4, r5
 8008e7e:	d101      	bne.n	8008e84 <__sfputs_r+0x12>
 8008e80:	2000      	movs	r0, #0
 8008e82:	e007      	b.n	8008e94 <__sfputs_r+0x22>
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	463a      	mov	r2, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ffda 	bl	8008e44 <__sfputc_r>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d1f3      	bne.n	8008e7c <__sfputs_r+0xa>
 8008e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e98 <_vfiprintf_r>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	460d      	mov	r5, r1
 8008e9e:	b09d      	sub	sp, #116	; 0x74
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	4698      	mov	r8, r3
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	b118      	cbz	r0, 8008eb0 <_vfiprintf_r+0x18>
 8008ea8:	6a03      	ldr	r3, [r0, #32]
 8008eaa:	b90b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x18>
 8008eac:	f7fe fad8 	bl	8007460 <__sinit>
 8008eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb2:	07d9      	lsls	r1, r3, #31
 8008eb4:	d405      	bmi.n	8008ec2 <_vfiprintf_r+0x2a>
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	059a      	lsls	r2, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_vfiprintf_r+0x2a>
 8008ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ebe:	f7fe fcc7 	bl	8007850 <__retarget_lock_acquire_recursive>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	071b      	lsls	r3, r3, #28
 8008ec6:	d501      	bpl.n	8008ecc <_vfiprintf_r+0x34>
 8008ec8:	692b      	ldr	r3, [r5, #16]
 8008eca:	b99b      	cbnz	r3, 8008ef4 <_vfiprintf_r+0x5c>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7fe fbea 	bl	80076a8 <__swsetup_r>
 8008ed4:	b170      	cbz	r0, 8008ef4 <_vfiprintf_r+0x5c>
 8008ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed8:	07dc      	lsls	r4, r3, #31
 8008eda:	d504      	bpl.n	8008ee6 <_vfiprintf_r+0x4e>
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	b01d      	add	sp, #116	; 0x74
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	0598      	lsls	r0, r3, #22
 8008eea:	d4f7      	bmi.n	8008edc <_vfiprintf_r+0x44>
 8008eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eee:	f7fe fcb0 	bl	8007852 <__retarget_lock_release_recursive>
 8008ef2:	e7f3      	b.n	8008edc <_vfiprintf_r+0x44>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef8:	2320      	movs	r3, #32
 8008efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f02:	2330      	movs	r3, #48	; 0x30
 8008f04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090b8 <_vfiprintf_r+0x220>
 8008f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f0c:	f04f 0901 	mov.w	r9, #1
 8008f10:	4623      	mov	r3, r4
 8008f12:	469a      	mov	sl, r3
 8008f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f18:	b10a      	cbz	r2, 8008f1e <_vfiprintf_r+0x86>
 8008f1a:	2a25      	cmp	r2, #37	; 0x25
 8008f1c:	d1f9      	bne.n	8008f12 <_vfiprintf_r+0x7a>
 8008f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f22:	d00b      	beq.n	8008f3c <_vfiprintf_r+0xa4>
 8008f24:	465b      	mov	r3, fp
 8008f26:	4622      	mov	r2, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7ff ffa1 	bl	8008e72 <__sfputs_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	f000 80a9 	beq.w	8009088 <_vfiprintf_r+0x1f0>
 8008f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f38:	445a      	add	r2, fp
 8008f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80a1 	beq.w	8009088 <_vfiprintf_r+0x1f0>
 8008f46:	2300      	movs	r3, #0
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f50:	f10a 0a01 	add.w	sl, sl, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	9307      	str	r3, [sp, #28]
 8008f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f5e:	4654      	mov	r4, sl
 8008f60:	2205      	movs	r2, #5
 8008f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f66:	4854      	ldr	r0, [pc, #336]	; (80090b8 <_vfiprintf_r+0x220>)
 8008f68:	f7f7 f932 	bl	80001d0 <memchr>
 8008f6c:	9a04      	ldr	r2, [sp, #16]
 8008f6e:	b9d8      	cbnz	r0, 8008fa8 <_vfiprintf_r+0x110>
 8008f70:	06d1      	lsls	r1, r2, #27
 8008f72:	bf44      	itt	mi
 8008f74:	2320      	movmi	r3, #32
 8008f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7a:	0713      	lsls	r3, r2, #28
 8008f7c:	bf44      	itt	mi
 8008f7e:	232b      	movmi	r3, #43	; 0x2b
 8008f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f84:	f89a 3000 	ldrb.w	r3, [sl]
 8008f88:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8a:	d015      	beq.n	8008fb8 <_vfiprintf_r+0x120>
 8008f8c:	9a07      	ldr	r2, [sp, #28]
 8008f8e:	4654      	mov	r4, sl
 8008f90:	2000      	movs	r0, #0
 8008f92:	f04f 0c0a 	mov.w	ip, #10
 8008f96:	4621      	mov	r1, r4
 8008f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f9c:	3b30      	subs	r3, #48	; 0x30
 8008f9e:	2b09      	cmp	r3, #9
 8008fa0:	d94d      	bls.n	800903e <_vfiprintf_r+0x1a6>
 8008fa2:	b1b0      	cbz	r0, 8008fd2 <_vfiprintf_r+0x13a>
 8008fa4:	9207      	str	r2, [sp, #28]
 8008fa6:	e014      	b.n	8008fd2 <_vfiprintf_r+0x13a>
 8008fa8:	eba0 0308 	sub.w	r3, r0, r8
 8008fac:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	46a2      	mov	sl, r4
 8008fb6:	e7d2      	b.n	8008f5e <_vfiprintf_r+0xc6>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	9103      	str	r1, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bfbb      	ittet	lt
 8008fc4:	425b      	neglt	r3, r3
 8008fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008fca:	9307      	strge	r3, [sp, #28]
 8008fcc:	9307      	strlt	r3, [sp, #28]
 8008fce:	bfb8      	it	lt
 8008fd0:	9204      	strlt	r2, [sp, #16]
 8008fd2:	7823      	ldrb	r3, [r4, #0]
 8008fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd6:	d10c      	bne.n	8008ff2 <_vfiprintf_r+0x15a>
 8008fd8:	7863      	ldrb	r3, [r4, #1]
 8008fda:	2b2a      	cmp	r3, #42	; 0x2a
 8008fdc:	d134      	bne.n	8009048 <_vfiprintf_r+0x1b0>
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	1d1a      	adds	r2, r3, #4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	9203      	str	r2, [sp, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bfb8      	it	lt
 8008fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fee:	3402      	adds	r4, #2
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090c8 <_vfiprintf_r+0x230>
 8008ff6:	7821      	ldrb	r1, [r4, #0]
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	f7f7 f8e8 	bl	80001d0 <memchr>
 8009000:	b138      	cbz	r0, 8009012 <_vfiprintf_r+0x17a>
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	eba0 000a 	sub.w	r0, r0, sl
 8009008:	2240      	movs	r2, #64	; 0x40
 800900a:	4082      	lsls	r2, r0
 800900c:	4313      	orrs	r3, r2
 800900e:	3401      	adds	r4, #1
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009016:	4829      	ldr	r0, [pc, #164]	; (80090bc <_vfiprintf_r+0x224>)
 8009018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800901c:	2206      	movs	r2, #6
 800901e:	f7f7 f8d7 	bl	80001d0 <memchr>
 8009022:	2800      	cmp	r0, #0
 8009024:	d03f      	beq.n	80090a6 <_vfiprintf_r+0x20e>
 8009026:	4b26      	ldr	r3, [pc, #152]	; (80090c0 <_vfiprintf_r+0x228>)
 8009028:	bb1b      	cbnz	r3, 8009072 <_vfiprintf_r+0x1da>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	3307      	adds	r3, #7
 800902e:	f023 0307 	bic.w	r3, r3, #7
 8009032:	3308      	adds	r3, #8
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009038:	443b      	add	r3, r7
 800903a:	9309      	str	r3, [sp, #36]	; 0x24
 800903c:	e768      	b.n	8008f10 <_vfiprintf_r+0x78>
 800903e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009042:	460c      	mov	r4, r1
 8009044:	2001      	movs	r0, #1
 8009046:	e7a6      	b.n	8008f96 <_vfiprintf_r+0xfe>
 8009048:	2300      	movs	r3, #0
 800904a:	3401      	adds	r4, #1
 800904c:	9305      	str	r3, [sp, #20]
 800904e:	4619      	mov	r1, r3
 8009050:	f04f 0c0a 	mov.w	ip, #10
 8009054:	4620      	mov	r0, r4
 8009056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905a:	3a30      	subs	r2, #48	; 0x30
 800905c:	2a09      	cmp	r2, #9
 800905e:	d903      	bls.n	8009068 <_vfiprintf_r+0x1d0>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0c6      	beq.n	8008ff2 <_vfiprintf_r+0x15a>
 8009064:	9105      	str	r1, [sp, #20]
 8009066:	e7c4      	b.n	8008ff2 <_vfiprintf_r+0x15a>
 8009068:	fb0c 2101 	mla	r1, ip, r1, r2
 800906c:	4604      	mov	r4, r0
 800906e:	2301      	movs	r3, #1
 8009070:	e7f0      	b.n	8009054 <_vfiprintf_r+0x1bc>
 8009072:	ab03      	add	r3, sp, #12
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	462a      	mov	r2, r5
 8009078:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <_vfiprintf_r+0x22c>)
 800907a:	a904      	add	r1, sp, #16
 800907c:	4630      	mov	r0, r6
 800907e:	f7fd fdaf 	bl	8006be0 <_printf_float>
 8009082:	4607      	mov	r7, r0
 8009084:	1c78      	adds	r0, r7, #1
 8009086:	d1d6      	bne.n	8009036 <_vfiprintf_r+0x19e>
 8009088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908a:	07d9      	lsls	r1, r3, #31
 800908c:	d405      	bmi.n	800909a <_vfiprintf_r+0x202>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	059a      	lsls	r2, r3, #22
 8009092:	d402      	bmi.n	800909a <_vfiprintf_r+0x202>
 8009094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009096:	f7fe fbdc 	bl	8007852 <__retarget_lock_release_recursive>
 800909a:	89ab      	ldrh	r3, [r5, #12]
 800909c:	065b      	lsls	r3, r3, #25
 800909e:	f53f af1d 	bmi.w	8008edc <_vfiprintf_r+0x44>
 80090a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a4:	e71c      	b.n	8008ee0 <_vfiprintf_r+0x48>
 80090a6:	ab03      	add	r3, sp, #12
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	462a      	mov	r2, r5
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <_vfiprintf_r+0x22c>)
 80090ae:	a904      	add	r1, sp, #16
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7fe f839 	bl	8007128 <_printf_i>
 80090b6:	e7e4      	b.n	8009082 <_vfiprintf_r+0x1ea>
 80090b8:	0801d2fc 	.word	0x0801d2fc
 80090bc:	0801d306 	.word	0x0801d306
 80090c0:	08006be1 	.word	0x08006be1
 80090c4:	08008e73 	.word	0x08008e73
 80090c8:	0801d302 	.word	0x0801d302

080090cc <__sflush_r>:
 80090cc:	898a      	ldrh	r2, [r1, #12]
 80090ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	4605      	mov	r5, r0
 80090d4:	0710      	lsls	r0, r2, #28
 80090d6:	460c      	mov	r4, r1
 80090d8:	d458      	bmi.n	800918c <__sflush_r+0xc0>
 80090da:	684b      	ldr	r3, [r1, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dc05      	bgt.n	80090ec <__sflush_r+0x20>
 80090e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dc02      	bgt.n	80090ec <__sflush_r+0x20>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	d0f9      	beq.n	80090e6 <__sflush_r+0x1a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090f8:	682f      	ldr	r7, [r5, #0]
 80090fa:	6a21      	ldr	r1, [r4, #32]
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	d032      	beq.n	8009166 <__sflush_r+0x9a>
 8009100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	075a      	lsls	r2, r3, #29
 8009106:	d505      	bpl.n	8009114 <__sflush_r+0x48>
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	1ac0      	subs	r0, r0, r3
 800910c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800910e:	b10b      	cbz	r3, 8009114 <__sflush_r+0x48>
 8009110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009112:	1ac0      	subs	r0, r0, r3
 8009114:	2300      	movs	r3, #0
 8009116:	4602      	mov	r2, r0
 8009118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800911a:	6a21      	ldr	r1, [r4, #32]
 800911c:	4628      	mov	r0, r5
 800911e:	47b0      	blx	r6
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	d106      	bne.n	8009134 <__sflush_r+0x68>
 8009126:	6829      	ldr	r1, [r5, #0]
 8009128:	291d      	cmp	r1, #29
 800912a:	d82b      	bhi.n	8009184 <__sflush_r+0xb8>
 800912c:	4a29      	ldr	r2, [pc, #164]	; (80091d4 <__sflush_r+0x108>)
 800912e:	410a      	asrs	r2, r1
 8009130:	07d6      	lsls	r6, r2, #31
 8009132:	d427      	bmi.n	8009184 <__sflush_r+0xb8>
 8009134:	2200      	movs	r2, #0
 8009136:	6062      	str	r2, [r4, #4]
 8009138:	04d9      	lsls	r1, r3, #19
 800913a:	6922      	ldr	r2, [r4, #16]
 800913c:	6022      	str	r2, [r4, #0]
 800913e:	d504      	bpl.n	800914a <__sflush_r+0x7e>
 8009140:	1c42      	adds	r2, r0, #1
 8009142:	d101      	bne.n	8009148 <__sflush_r+0x7c>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b903      	cbnz	r3, 800914a <__sflush_r+0x7e>
 8009148:	6560      	str	r0, [r4, #84]	; 0x54
 800914a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914c:	602f      	str	r7, [r5, #0]
 800914e:	2900      	cmp	r1, #0
 8009150:	d0c9      	beq.n	80090e6 <__sflush_r+0x1a>
 8009152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009156:	4299      	cmp	r1, r3
 8009158:	d002      	beq.n	8009160 <__sflush_r+0x94>
 800915a:	4628      	mov	r0, r5
 800915c:	f7ff f9f6 	bl	800854c <_free_r>
 8009160:	2000      	movs	r0, #0
 8009162:	6360      	str	r0, [r4, #52]	; 0x34
 8009164:	e7c0      	b.n	80090e8 <__sflush_r+0x1c>
 8009166:	2301      	movs	r3, #1
 8009168:	4628      	mov	r0, r5
 800916a:	47b0      	blx	r6
 800916c:	1c41      	adds	r1, r0, #1
 800916e:	d1c8      	bne.n	8009102 <__sflush_r+0x36>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0c5      	beq.n	8009102 <__sflush_r+0x36>
 8009176:	2b1d      	cmp	r3, #29
 8009178:	d001      	beq.n	800917e <__sflush_r+0xb2>
 800917a:	2b16      	cmp	r3, #22
 800917c:	d101      	bne.n	8009182 <__sflush_r+0xb6>
 800917e:	602f      	str	r7, [r5, #0]
 8009180:	e7b1      	b.n	80090e6 <__sflush_r+0x1a>
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	e7ad      	b.n	80090e8 <__sflush_r+0x1c>
 800918c:	690f      	ldr	r7, [r1, #16]
 800918e:	2f00      	cmp	r7, #0
 8009190:	d0a9      	beq.n	80090e6 <__sflush_r+0x1a>
 8009192:	0793      	lsls	r3, r2, #30
 8009194:	680e      	ldr	r6, [r1, #0]
 8009196:	bf08      	it	eq
 8009198:	694b      	ldreq	r3, [r1, #20]
 800919a:	600f      	str	r7, [r1, #0]
 800919c:	bf18      	it	ne
 800919e:	2300      	movne	r3, #0
 80091a0:	eba6 0807 	sub.w	r8, r6, r7
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	f1b8 0f00 	cmp.w	r8, #0
 80091aa:	dd9c      	ble.n	80090e6 <__sflush_r+0x1a>
 80091ac:	6a21      	ldr	r1, [r4, #32]
 80091ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091b0:	4643      	mov	r3, r8
 80091b2:	463a      	mov	r2, r7
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b0      	blx	r6
 80091b8:	2800      	cmp	r0, #0
 80091ba:	dc06      	bgt.n	80091ca <__sflush_r+0xfe>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	e78e      	b.n	80090e8 <__sflush_r+0x1c>
 80091ca:	4407      	add	r7, r0
 80091cc:	eba8 0800 	sub.w	r8, r8, r0
 80091d0:	e7e9      	b.n	80091a6 <__sflush_r+0xda>
 80091d2:	bf00      	nop
 80091d4:	dfbffffe 	.word	0xdfbffffe

080091d8 <_fflush_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	4605      	mov	r5, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b913      	cbnz	r3, 80091e8 <_fflush_r+0x10>
 80091e2:	2500      	movs	r5, #0
 80091e4:	4628      	mov	r0, r5
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	b118      	cbz	r0, 80091f2 <_fflush_r+0x1a>
 80091ea:	6a03      	ldr	r3, [r0, #32]
 80091ec:	b90b      	cbnz	r3, 80091f2 <_fflush_r+0x1a>
 80091ee:	f7fe f937 	bl	8007460 <__sinit>
 80091f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f3      	beq.n	80091e2 <_fflush_r+0xa>
 80091fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091fc:	07d0      	lsls	r0, r2, #31
 80091fe:	d404      	bmi.n	800920a <_fflush_r+0x32>
 8009200:	0599      	lsls	r1, r3, #22
 8009202:	d402      	bmi.n	800920a <_fflush_r+0x32>
 8009204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009206:	f7fe fb23 	bl	8007850 <__retarget_lock_acquire_recursive>
 800920a:	4628      	mov	r0, r5
 800920c:	4621      	mov	r1, r4
 800920e:	f7ff ff5d 	bl	80090cc <__sflush_r>
 8009212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009214:	07da      	lsls	r2, r3, #31
 8009216:	4605      	mov	r5, r0
 8009218:	d4e4      	bmi.n	80091e4 <_fflush_r+0xc>
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	059b      	lsls	r3, r3, #22
 800921e:	d4e1      	bmi.n	80091e4 <_fflush_r+0xc>
 8009220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009222:	f7fe fb16 	bl	8007852 <__retarget_lock_release_recursive>
 8009226:	e7dd      	b.n	80091e4 <_fflush_r+0xc>

08009228 <__swhatbuf_r>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009230:	2900      	cmp	r1, #0
 8009232:	b096      	sub	sp, #88	; 0x58
 8009234:	4615      	mov	r5, r2
 8009236:	461e      	mov	r6, r3
 8009238:	da0d      	bge.n	8009256 <__swhatbuf_r+0x2e>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009240:	f04f 0100 	mov.w	r1, #0
 8009244:	bf0c      	ite	eq
 8009246:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800924a:	2340      	movne	r3, #64	; 0x40
 800924c:	2000      	movs	r0, #0
 800924e:	6031      	str	r1, [r6, #0]
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	b016      	add	sp, #88	; 0x58
 8009254:	bd70      	pop	{r4, r5, r6, pc}
 8009256:	466a      	mov	r2, sp
 8009258:	f000 f848 	bl	80092ec <_fstat_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	dbec      	blt.n	800923a <__swhatbuf_r+0x12>
 8009260:	9901      	ldr	r1, [sp, #4]
 8009262:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009266:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800926a:	4259      	negs	r1, r3
 800926c:	4159      	adcs	r1, r3
 800926e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009272:	e7eb      	b.n	800924c <__swhatbuf_r+0x24>

08009274 <__smakebuf_r>:
 8009274:	898b      	ldrh	r3, [r1, #12]
 8009276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009278:	079d      	lsls	r5, r3, #30
 800927a:	4606      	mov	r6, r0
 800927c:	460c      	mov	r4, r1
 800927e:	d507      	bpl.n	8009290 <__smakebuf_r+0x1c>
 8009280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	6123      	str	r3, [r4, #16]
 8009288:	2301      	movs	r3, #1
 800928a:	6163      	str	r3, [r4, #20]
 800928c:	b002      	add	sp, #8
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	ab01      	add	r3, sp, #4
 8009292:	466a      	mov	r2, sp
 8009294:	f7ff ffc8 	bl	8009228 <__swhatbuf_r>
 8009298:	9900      	ldr	r1, [sp, #0]
 800929a:	4605      	mov	r5, r0
 800929c:	4630      	mov	r0, r6
 800929e:	f7ff f9c9 	bl	8008634 <_malloc_r>
 80092a2:	b948      	cbnz	r0, 80092b8 <__smakebuf_r+0x44>
 80092a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a8:	059a      	lsls	r2, r3, #22
 80092aa:	d4ef      	bmi.n	800928c <__smakebuf_r+0x18>
 80092ac:	f023 0303 	bic.w	r3, r3, #3
 80092b0:	f043 0302 	orr.w	r3, r3, #2
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	e7e3      	b.n	8009280 <__smakebuf_r+0xc>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	9b00      	ldr	r3, [sp, #0]
 80092c4:	6163      	str	r3, [r4, #20]
 80092c6:	9b01      	ldr	r3, [sp, #4]
 80092c8:	6120      	str	r0, [r4, #16]
 80092ca:	b15b      	cbz	r3, 80092e4 <__smakebuf_r+0x70>
 80092cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f81d 	bl	8009310 <_isatty_r>
 80092d6:	b128      	cbz	r0, 80092e4 <__smakebuf_r+0x70>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	431d      	orrs	r5, r3
 80092e8:	81a5      	strh	r5, [r4, #12]
 80092ea:	e7cf      	b.n	800928c <__smakebuf_r+0x18>

080092ec <_fstat_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d07      	ldr	r5, [pc, #28]	; (800930c <_fstat_r+0x20>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	f7f8 fb20 	bl	800193e <_fstat>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d102      	bne.n	8009308 <_fstat_r+0x1c>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	b103      	cbz	r3, 8009308 <_fstat_r+0x1c>
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	bf00      	nop
 800930c:	2000f4e0 	.word	0x2000f4e0

08009310 <_isatty_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d06      	ldr	r5, [pc, #24]	; (800932c <_isatty_r+0x1c>)
 8009314:	2300      	movs	r3, #0
 8009316:	4604      	mov	r4, r0
 8009318:	4608      	mov	r0, r1
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	f7f8 fb1f 	bl	800195e <_isatty>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_isatty_r+0x1a>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b103      	cbz	r3, 800932a <_isatty_r+0x1a>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	2000f4e0 	.word	0x2000f4e0

08009330 <_sbrk_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	; (800934c <_sbrk_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f8 fb28 	bl	8001990 <_sbrk>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_sbrk_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_sbrk_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	2000f4e0 	.word	0x2000f4e0

08009350 <memcpy>:
 8009350:	440a      	add	r2, r1
 8009352:	4291      	cmp	r1, r2
 8009354:	f100 33ff 	add.w	r3, r0, #4294967295
 8009358:	d100      	bne.n	800935c <memcpy+0xc>
 800935a:	4770      	bx	lr
 800935c:	b510      	push	{r4, lr}
 800935e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009366:	4291      	cmp	r1, r2
 8009368:	d1f9      	bne.n	800935e <memcpy+0xe>
 800936a:	bd10      	pop	{r4, pc}

0800936c <__assert_func>:
 800936c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800936e:	4614      	mov	r4, r2
 8009370:	461a      	mov	r2, r3
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <__assert_func+0x2c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4605      	mov	r5, r0
 8009378:	68d8      	ldr	r0, [r3, #12]
 800937a:	b14c      	cbz	r4, 8009390 <__assert_func+0x24>
 800937c:	4b07      	ldr	r3, [pc, #28]	; (800939c <__assert_func+0x30>)
 800937e:	9100      	str	r1, [sp, #0]
 8009380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009384:	4906      	ldr	r1, [pc, #24]	; (80093a0 <__assert_func+0x34>)
 8009386:	462b      	mov	r3, r5
 8009388:	f000 f844 	bl	8009414 <fiprintf>
 800938c:	f000 f854 	bl	8009438 <abort>
 8009390:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <__assert_func+0x38>)
 8009392:	461c      	mov	r4, r3
 8009394:	e7f3      	b.n	800937e <__assert_func+0x12>
 8009396:	bf00      	nop
 8009398:	20000068 	.word	0x20000068
 800939c:	0801d317 	.word	0x0801d317
 80093a0:	0801d324 	.word	0x0801d324
 80093a4:	0801d352 	.word	0x0801d352

080093a8 <_calloc_r>:
 80093a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093aa:	fba1 2402 	umull	r2, r4, r1, r2
 80093ae:	b94c      	cbnz	r4, 80093c4 <_calloc_r+0x1c>
 80093b0:	4611      	mov	r1, r2
 80093b2:	9201      	str	r2, [sp, #4]
 80093b4:	f7ff f93e 	bl	8008634 <_malloc_r>
 80093b8:	9a01      	ldr	r2, [sp, #4]
 80093ba:	4605      	mov	r5, r0
 80093bc:	b930      	cbnz	r0, 80093cc <_calloc_r+0x24>
 80093be:	4628      	mov	r0, r5
 80093c0:	b003      	add	sp, #12
 80093c2:	bd30      	pop	{r4, r5, pc}
 80093c4:	220c      	movs	r2, #12
 80093c6:	6002      	str	r2, [r0, #0]
 80093c8:	2500      	movs	r5, #0
 80093ca:	e7f8      	b.n	80093be <_calloc_r+0x16>
 80093cc:	4621      	mov	r1, r4
 80093ce:	f7fe f9c3 	bl	8007758 <memset>
 80093d2:	e7f4      	b.n	80093be <_calloc_r+0x16>

080093d4 <__ascii_mbtowc>:
 80093d4:	b082      	sub	sp, #8
 80093d6:	b901      	cbnz	r1, 80093da <__ascii_mbtowc+0x6>
 80093d8:	a901      	add	r1, sp, #4
 80093da:	b142      	cbz	r2, 80093ee <__ascii_mbtowc+0x1a>
 80093dc:	b14b      	cbz	r3, 80093f2 <__ascii_mbtowc+0x1e>
 80093de:	7813      	ldrb	r3, [r2, #0]
 80093e0:	600b      	str	r3, [r1, #0]
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	1e10      	subs	r0, r2, #0
 80093e6:	bf18      	it	ne
 80093e8:	2001      	movne	r0, #1
 80093ea:	b002      	add	sp, #8
 80093ec:	4770      	bx	lr
 80093ee:	4610      	mov	r0, r2
 80093f0:	e7fb      	b.n	80093ea <__ascii_mbtowc+0x16>
 80093f2:	f06f 0001 	mvn.w	r0, #1
 80093f6:	e7f8      	b.n	80093ea <__ascii_mbtowc+0x16>

080093f8 <__ascii_wctomb>:
 80093f8:	b149      	cbz	r1, 800940e <__ascii_wctomb+0x16>
 80093fa:	2aff      	cmp	r2, #255	; 0xff
 80093fc:	bf85      	ittet	hi
 80093fe:	238a      	movhi	r3, #138	; 0x8a
 8009400:	6003      	strhi	r3, [r0, #0]
 8009402:	700a      	strbls	r2, [r1, #0]
 8009404:	f04f 30ff 	movhi.w	r0, #4294967295
 8009408:	bf98      	it	ls
 800940a:	2001      	movls	r0, #1
 800940c:	4770      	bx	lr
 800940e:	4608      	mov	r0, r1
 8009410:	4770      	bx	lr
	...

08009414 <fiprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	b503      	push	{r0, r1, lr}
 8009418:	4601      	mov	r1, r0
 800941a:	ab03      	add	r3, sp, #12
 800941c:	4805      	ldr	r0, [pc, #20]	; (8009434 <fiprintf+0x20>)
 800941e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009422:	6800      	ldr	r0, [r0, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f7ff fd37 	bl	8008e98 <_vfiprintf_r>
 800942a:	b002      	add	sp, #8
 800942c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009430:	b003      	add	sp, #12
 8009432:	4770      	bx	lr
 8009434:	20000068 	.word	0x20000068

08009438 <abort>:
 8009438:	b508      	push	{r3, lr}
 800943a:	2006      	movs	r0, #6
 800943c:	f000 f82c 	bl	8009498 <raise>
 8009440:	2001      	movs	r0, #1
 8009442:	f7f8 fa49 	bl	80018d8 <_exit>

08009446 <_raise_r>:
 8009446:	291f      	cmp	r1, #31
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	460d      	mov	r5, r1
 800944e:	d904      	bls.n	800945a <_raise_r+0x14>
 8009450:	2316      	movs	r3, #22
 8009452:	6003      	str	r3, [r0, #0]
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	bd38      	pop	{r3, r4, r5, pc}
 800945a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800945c:	b112      	cbz	r2, 8009464 <_raise_r+0x1e>
 800945e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009462:	b94b      	cbnz	r3, 8009478 <_raise_r+0x32>
 8009464:	4620      	mov	r0, r4
 8009466:	f000 f831 	bl	80094cc <_getpid_r>
 800946a:	462a      	mov	r2, r5
 800946c:	4601      	mov	r1, r0
 800946e:	4620      	mov	r0, r4
 8009470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009474:	f000 b818 	b.w	80094a8 <_kill_r>
 8009478:	2b01      	cmp	r3, #1
 800947a:	d00a      	beq.n	8009492 <_raise_r+0x4c>
 800947c:	1c59      	adds	r1, r3, #1
 800947e:	d103      	bne.n	8009488 <_raise_r+0x42>
 8009480:	2316      	movs	r3, #22
 8009482:	6003      	str	r3, [r0, #0]
 8009484:	2001      	movs	r0, #1
 8009486:	e7e7      	b.n	8009458 <_raise_r+0x12>
 8009488:	2400      	movs	r4, #0
 800948a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800948e:	4628      	mov	r0, r5
 8009490:	4798      	blx	r3
 8009492:	2000      	movs	r0, #0
 8009494:	e7e0      	b.n	8009458 <_raise_r+0x12>
	...

08009498 <raise>:
 8009498:	4b02      	ldr	r3, [pc, #8]	; (80094a4 <raise+0xc>)
 800949a:	4601      	mov	r1, r0
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	f7ff bfd2 	b.w	8009446 <_raise_r>
 80094a2:	bf00      	nop
 80094a4:	20000068 	.word	0x20000068

080094a8 <_kill_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d07      	ldr	r5, [pc, #28]	; (80094c8 <_kill_r+0x20>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f7f8 f9ff 	bl	80018b8 <_kill>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d102      	bne.n	80094c4 <_kill_r+0x1c>
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	b103      	cbz	r3, 80094c4 <_kill_r+0x1c>
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	2000f4e0 	.word	0x2000f4e0

080094cc <_getpid_r>:
 80094cc:	f7f8 b9ec 	b.w	80018a8 <_getpid>

080094d0 <log10f>:
 80094d0:	b508      	push	{r3, lr}
 80094d2:	ed2d 8b02 	vpush	{d8}
 80094d6:	eeb0 8a40 	vmov.f32	s16, s0
 80094da:	f000 f84f 	bl	800957c <__ieee754_log10f>
 80094de:	eeb4 8a48 	vcmp.f32	s16, s16
 80094e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e6:	d60f      	bvs.n	8009508 <log10f+0x38>
 80094e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80094ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f0:	d80a      	bhi.n	8009508 <log10f+0x38>
 80094f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80094f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fa:	d108      	bne.n	800950e <log10f+0x3e>
 80094fc:	f7fe f97e 	bl	80077fc <__errno>
 8009500:	2322      	movs	r3, #34	; 0x22
 8009502:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009524 <log10f+0x54>
 8009506:	6003      	str	r3, [r0, #0]
 8009508:	ecbd 8b02 	vpop	{d8}
 800950c:	bd08      	pop	{r3, pc}
 800950e:	f7fe f975 	bl	80077fc <__errno>
 8009512:	ecbd 8b02 	vpop	{d8}
 8009516:	2321      	movs	r3, #33	; 0x21
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800951e:	4802      	ldr	r0, [pc, #8]	; (8009528 <log10f+0x58>)
 8009520:	f000 b822 	b.w	8009568 <nanf>
 8009524:	ff800000 	.word	0xff800000
 8009528:	0801d352 	.word	0x0801d352

0800952c <sqrtf>:
 800952c:	b508      	push	{r3, lr}
 800952e:	ed2d 8b02 	vpush	{d8}
 8009532:	eeb0 8a40 	vmov.f32	s16, s0
 8009536:	f000 f81d 	bl	8009574 <__ieee754_sqrtf>
 800953a:	eeb4 8a48 	vcmp.f32	s16, s16
 800953e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009542:	d60c      	bvs.n	800955e <sqrtf+0x32>
 8009544:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009564 <sqrtf+0x38>
 8009548:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009550:	d505      	bpl.n	800955e <sqrtf+0x32>
 8009552:	f7fe f953 	bl	80077fc <__errno>
 8009556:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800955a:	2321      	movs	r3, #33	; 0x21
 800955c:	6003      	str	r3, [r0, #0]
 800955e:	ecbd 8b02 	vpop	{d8}
 8009562:	bd08      	pop	{r3, pc}
 8009564:	00000000 	.word	0x00000000

08009568 <nanf>:
 8009568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009570 <nanf+0x8>
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	7fc00000 	.word	0x7fc00000

08009574 <__ieee754_sqrtf>:
 8009574:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009578:	4770      	bx	lr
	...

0800957c <__ieee754_log10f>:
 800957c:	b508      	push	{r3, lr}
 800957e:	ee10 2a10 	vmov	r2, s0
 8009582:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009586:	ed2d 8b02 	vpush	{d8}
 800958a:	d108      	bne.n	800959e <__ieee754_log10f+0x22>
 800958c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009614 <__ieee754_log10f+0x98>
 8009590:	eddf 7a21 	vldr	s15, [pc, #132]	; 8009618 <__ieee754_log10f+0x9c>
 8009594:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009598:	ecbd 8b02 	vpop	{d8}
 800959c:	bd08      	pop	{r3, pc}
 800959e:	2a00      	cmp	r2, #0
 80095a0:	da02      	bge.n	80095a8 <__ieee754_log10f+0x2c>
 80095a2:	ee30 7a40 	vsub.f32	s14, s0, s0
 80095a6:	e7f3      	b.n	8009590 <__ieee754_log10f+0x14>
 80095a8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80095ac:	db02      	blt.n	80095b4 <__ieee754_log10f+0x38>
 80095ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80095b2:	e7f1      	b.n	8009598 <__ieee754_log10f+0x1c>
 80095b4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80095b8:	bfbf      	itttt	lt
 80095ba:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800961c <__ieee754_log10f+0xa0>
 80095be:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80095c2:	f06f 0118 	mvnlt.w	r1, #24
 80095c6:	ee17 2a90 	vmovlt	r2, s15
 80095ca:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80095ce:	bfa8      	it	ge
 80095d0:	2100      	movge	r1, #0
 80095d2:	3b7f      	subs	r3, #127	; 0x7f
 80095d4:	440b      	add	r3, r1
 80095d6:	0fd9      	lsrs	r1, r3, #31
 80095d8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80095e4:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80095e8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80095ec:	ee00 3a10 	vmov	s0, r3
 80095f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80095f4:	f000 f81a 	bl	800962c <__ieee754_logf>
 80095f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009620 <__ieee754_log10f+0xa4>
 80095fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009600:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009624 <__ieee754_log10f+0xa8>
 8009604:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009608:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009628 <__ieee754_log10f+0xac>
 800960c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009610:	e7c2      	b.n	8009598 <__ieee754_log10f+0x1c>
 8009612:	bf00      	nop
 8009614:	cc000000 	.word	0xcc000000
 8009618:	00000000 	.word	0x00000000
 800961c:	4c000000 	.word	0x4c000000
 8009620:	3ede5bd9 	.word	0x3ede5bd9
 8009624:	355427db 	.word	0x355427db
 8009628:	3e9a2080 	.word	0x3e9a2080

0800962c <__ieee754_logf>:
 800962c:	ee10 3a10 	vmov	r3, s0
 8009630:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009634:	d106      	bne.n	8009644 <__ieee754_logf+0x18>
 8009636:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80097d0 <__ieee754_logf+0x1a4>
 800963a:	eddf 7a66 	vldr	s15, [pc, #408]	; 80097d4 <__ieee754_logf+0x1a8>
 800963e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009642:	4770      	bx	lr
 8009644:	2b00      	cmp	r3, #0
 8009646:	da02      	bge.n	800964e <__ieee754_logf+0x22>
 8009648:	ee30 7a40 	vsub.f32	s14, s0, s0
 800964c:	e7f5      	b.n	800963a <__ieee754_logf+0xe>
 800964e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009652:	db02      	blt.n	800965a <__ieee754_logf+0x2e>
 8009654:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009658:	4770      	bx	lr
 800965a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800965e:	bfb8      	it	lt
 8009660:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 80097d8 <__ieee754_logf+0x1ac>
 8009664:	485d      	ldr	r0, [pc, #372]	; (80097dc <__ieee754_logf+0x1b0>)
 8009666:	bfbe      	ittt	lt
 8009668:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800966c:	f06f 0118 	mvnlt.w	r1, #24
 8009670:	ee17 3a90 	vmovlt	r3, s15
 8009674:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009678:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800967c:	4418      	add	r0, r3
 800967e:	bfa8      	it	ge
 8009680:	2100      	movge	r1, #0
 8009682:	3a7f      	subs	r2, #127	; 0x7f
 8009684:	440a      	add	r2, r1
 8009686:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800968a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800968e:	4319      	orrs	r1, r3
 8009690:	ee00 1a10 	vmov	s0, r1
 8009694:	4952      	ldr	r1, [pc, #328]	; (80097e0 <__ieee754_logf+0x1b4>)
 8009696:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800969a:	f103 000f 	add.w	r0, r3, #15
 800969e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096a2:	4001      	ands	r1, r0
 80096a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096a8:	bb89      	cbnz	r1, 800970e <__ieee754_logf+0xe2>
 80096aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	d10f      	bne.n	80096d4 <__ieee754_logf+0xa8>
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	f000 8087 	beq.w	80097c8 <__ieee754_logf+0x19c>
 80096ba:	ee07 2a90 	vmov	s15, r2
 80096be:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80097e4 <__ieee754_logf+0x1b8>
 80096c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80097e8 <__ieee754_logf+0x1bc>
 80096c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80096ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 80096d2:	4770      	bx	lr
 80096d4:	eddf 6a45 	vldr	s13, [pc, #276]	; 80097ec <__ieee754_logf+0x1c0>
 80096d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80096dc:	eee0 7a66 	vfms.f32	s15, s0, s13
 80096e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80096e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096e8:	b912      	cbnz	r2, 80096f0 <__ieee754_logf+0xc4>
 80096ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80096ee:	4770      	bx	lr
 80096f0:	ee07 2a90 	vmov	s15, r2
 80096f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80097e4 <__ieee754_logf+0x1b8>
 80096f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096fc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009700:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009704:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80097e8 <__ieee754_logf+0x1bc>
 8009708:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800970c:	4770      	bx	lr
 800970e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009712:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009716:	eddf 5a36 	vldr	s11, [pc, #216]	; 80097f0 <__ieee754_logf+0x1c4>
 800971a:	eddf 4a36 	vldr	s9, [pc, #216]	; 80097f4 <__ieee754_logf+0x1c8>
 800971e:	4936      	ldr	r1, [pc, #216]	; (80097f8 <__ieee754_logf+0x1cc>)
 8009720:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009724:	4419      	add	r1, r3
 8009726:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800972a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800972e:	430b      	orrs	r3, r1
 8009730:	2b00      	cmp	r3, #0
 8009732:	ee07 2a90 	vmov	s15, r2
 8009736:	ee26 5a06 	vmul.f32	s10, s12, s12
 800973a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800973e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009742:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80097fc <__ieee754_logf+0x1d0>
 8009746:	eee7 7a25 	vfma.f32	s15, s14, s11
 800974a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009800 <__ieee754_logf+0x1d4>
 800974e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009752:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009804 <__ieee754_logf+0x1d8>
 8009756:	eee7 7a24 	vfma.f32	s15, s14, s9
 800975a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8009808 <__ieee754_logf+0x1dc>
 800975e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009762:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800980c <__ieee754_logf+0x1e0>
 8009766:	eee4 7a87 	vfma.f32	s15, s9, s14
 800976a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800976e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009772:	dd1a      	ble.n	80097aa <__ieee754_logf+0x17e>
 8009774:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009778:	ee20 7a07 	vmul.f32	s14, s0, s14
 800977c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009784:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009788:	b912      	cbnz	r2, 8009790 <__ieee754_logf+0x164>
 800978a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800978e:	e7ac      	b.n	80096ea <__ieee754_logf+0xbe>
 8009790:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80097e4 <__ieee754_logf+0x1b8>
 8009794:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800979c:	ee37 0a40 	vsub.f32	s0, s14, s0
 80097a0:	eddf 7a11 	vldr	s15, [pc, #68]	; 80097e8 <__ieee754_logf+0x1bc>
 80097a4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80097a8:	4770      	bx	lr
 80097aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80097ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80097b2:	b912      	cbnz	r2, 80097ba <__ieee754_logf+0x18e>
 80097b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097b8:	4770      	bx	lr
 80097ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80097e4 <__ieee754_logf+0x1b8>
 80097be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80097c2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80097c6:	e7eb      	b.n	80097a0 <__ieee754_logf+0x174>
 80097c8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80097d4 <__ieee754_logf+0x1a8>
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	cc000000 	.word	0xcc000000
 80097d4:	00000000 	.word	0x00000000
 80097d8:	4c000000 	.word	0x4c000000
 80097dc:	004afb20 	.word	0x004afb20
 80097e0:	007ffff0 	.word	0x007ffff0
 80097e4:	3717f7d1 	.word	0x3717f7d1
 80097e8:	3f317180 	.word	0x3f317180
 80097ec:	3eaaaaab 	.word	0x3eaaaaab
 80097f0:	3e1cd04f 	.word	0x3e1cd04f
 80097f4:	3e178897 	.word	0x3e178897
 80097f8:	ffcf5c30 	.word	0xffcf5c30
 80097fc:	3e638e29 	.word	0x3e638e29
 8009800:	3ecccccd 	.word	0x3ecccccd
 8009804:	3e3a3325 	.word	0x3e3a3325
 8009808:	3e924925 	.word	0x3e924925
 800980c:	3f2aaaab 	.word	0x3f2aaaab

08009810 <_init>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr

0800981c <_fini>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr
