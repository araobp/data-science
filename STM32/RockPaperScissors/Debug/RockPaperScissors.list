
RockPaperScissors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002330  08009720  08009720  00019720  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba50  0800ba50  00020938  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba58  0800ba58  00020938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000938  20000000  0800ba60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000938  0800c398  00020938  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000f70  0800c398  00020f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020938  2**0
                  CONTENTS, READONLY
 12 .comment      00000108  00000000  00000000  00020968  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020017  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b36  00000000  00000000  00040a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00008f40  00000000  00000000  000455bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ea0  00000000  00000000  0004e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c2f  00000000  00000000  0004f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000298a3  00000000  00000000  0004ffcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c917  00000000  00000000  00079872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9a10  00000000  00000000  00096189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b08  00000000  00000000  0018fb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001936a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e03  00000000  00000000  00193716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  00194519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000938 	.word	0x20000938
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096f0 	.word	0x080096f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000093c 	.word	0x2000093c
 80001cc:	080096f0 	.word	0x080096f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <normalize>:
static ai_buffer *ai_input;
static ai_buffer *ai_output;
ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

// Standard normalization
void normalize(ai_float *in_data, ai_float *normalized_data, int len) {
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	ed2d 8b04 	vpush	{d8-d9}

  float mean = 0.0;
 8000f4c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001008 <normalize+0xc4>
void normalize(ai_float *in_data, ai_float *normalized_data, int len) {
 8000f50:	4615      	mov	r5, r2
 8000f52:	4689      	mov	r9, r1
 8000f54:	4680      	mov	r8, r0
  float std = 0.0;

  // Sum and mean
  for (int i = 0; i < len; i++) {
 8000f56:	4602      	mov	r2, r0
 8000f58:	2300      	movs	r3, #0
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	db24      	blt.n	8000fa8 <normalize+0x64>
    mean += in_data[i];
  }
  mean = mean / len;
 8000f5e:	ee07 5a10 	vmov	s14, r5
 8000f62:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
  float std = 0.0;
 8000f66:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8001008 <normalize+0xc4>
  mean = mean / len;
 8000f6a:	eec7 8a89 	vdiv.f32	s17, s15, s18

  // Standard deviation
  for (int i = 0; i < len; i++) {
 8000f6e:	4604      	mov	r4, r0
 8000f70:	f04f 0a00 	mov.w	sl, #0
 8000f74:	45aa      	cmp	sl, r5
 8000f76:	db1d      	blt.n	8000fb4 <normalize+0x70>
    std += pow(in_data[i] - mean, 2);
  }
  std = sqrt(std / len);
 8000f78:	eec8 7a09 	vdiv.f32	s15, s16, s18
 8000f7c:	ee17 0a90 	vmov	r0, s15
 8000f80:	f7ff fae2 	bl	8000548 <__aeabi_f2d>
 8000f84:	ec41 0b10 	vmov	d0, r0, r1
 8000f88:	f008 f93e 	bl	8009208 <sqrt>
 8000f8c:	ec51 0b10 	vmov	r0, r1, d0
 8000f90:	f7ff fe0a 	bl	8000ba8 <__aeabi_d2f>
 8000f94:	ee07 0a90 	vmov	s15, r0

  // Normalization
  for (int i = 0; i < len; i++) {
 8000f98:	4649      	mov	r1, r9
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	42ab      	cmp	r3, r5
 8000f9e:	db28      	blt.n	8000ff2 <normalize+0xae>
    normalized_data[i] = (in_data[i] - mean) / std;
  }
}
 8000fa0:	ecbd 8b04 	vpop	{d8-d9}
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mean += in_data[i];
 8000fa8:	ecb2 7a01 	vldmia	r2!, {s14}
  for (int i = 0; i < len; i++) {
 8000fac:	3301      	adds	r3, #1
    mean += in_data[i];
 8000fae:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i = 0; i < len; i++) {
 8000fb2:	e7d2      	b.n	8000f5a <normalize+0x16>
    std += pow(in_data[i] - mean, 2);
 8000fb4:	ecf4 7a01 	vldmia	r4!, {s15}
 8000fb8:	ee77 7ae8 	vsub.f32	s15, s15, s17
  for (int i = 0; i < len; i++) {
 8000fbc:	f10a 0a01 	add.w	sl, sl, #1
    std += pow(in_data[i] - mean, 2);
 8000fc0:	ee17 0a90 	vmov	r0, s15
 8000fc4:	f7ff fac0 	bl	8000548 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	f7ff fb14 	bl	80005f8 <__aeabi_dmul>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	ee18 0a10 	vmov	r0, s16
 8000fd6:	460f      	mov	r7, r1
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	4639      	mov	r1, r7
 8000fe4:	f7ff f952 	bl	800028c <__adddf3>
 8000fe8:	f7ff fdde 	bl	8000ba8 <__aeabi_d2f>
 8000fec:	ee08 0a10 	vmov	s16, r0
  for (int i = 0; i < len; i++) {
 8000ff0:	e7c0      	b.n	8000f74 <normalize+0x30>
    normalized_data[i] = (in_data[i] - mean) / std;
 8000ff2:	ecb8 7a01 	vldmia	r8!, {s14}
 8000ff6:	ee37 7a68 	vsub.f32	s14, s14, s17
  for (int i = 0; i < len; i++) {
 8000ffa:	3301      	adds	r3, #1
    normalized_data[i] = (in_data[i] - mean) / std;
 8000ffc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001000:	ece1 6a01 	vstmia	r1!, {s13}
  for (int i = 0; i < len; i++) {
 8001004:	e7ca      	b.n	8000f9c <normalize+0x58>
 8001006:	bf00      	nop
 8001008:	00000000 	.word	0x00000000

0800100c <rps_init>:

// Rock Paper Scissors initialization
void rps_init(void) {
 800100c:	b513      	push	{r0, r1, r4, lr}

  const ai_handle act_addr[] = { activations };
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <rps_init+0x5c>)

  printf("*** AI NETWORK INITALIZATION ***\n");
 8001010:	4816      	ldr	r0, [pc, #88]	; (800106c <rps_init+0x60>)
  const ai_handle act_addr[] = { activations };
 8001012:	9301      	str	r3, [sp, #4]
  printf("*** AI NETWORK INITALIZATION ***\n");
 8001014:	f006 f9f6 	bl	8007404 <puts>
  /* Create an instance of the model */
  ai_error err = ai_network_create_and_init(&network, act_addr, NULL);
 8001018:	a901      	add	r1, sp, #4
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <rps_init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	f003 f9b7 	bl	8004390 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8001022:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001026:	d01a      	beq.n	800105e <rps_init+0x52>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001028:	0a02      	lsrs	r2, r0, #8
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <rps_init+0x68>)
 800102c:	f006 f97c 	bl	8007328 <iprintf>
  } else {
    printf("ai_network_create success\n");
  }
  printf("\n");

  ai_input = ai_network_inputs_get(network, NULL);
 8001030:	4c0f      	ldr	r4, [pc, #60]	; (8001070 <rps_init+0x64>)
  printf("\n");
 8001032:	200a      	movs	r0, #10
 8001034:	f006 f98a 	bl	800734c <putchar>
  ai_input = ai_network_inputs_get(network, NULL);
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	2100      	movs	r1, #0
 800103c:	f003 f8f4 	bl	8004228 <ai_network_inputs_get>
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <rps_init+0x6c>)
  ai_output = ai_network_outputs_get(network, NULL);
 8001042:	2100      	movs	r1, #0
  ai_input = ai_network_inputs_get(network, NULL);
 8001044:	6018      	str	r0, [r3, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001046:	6820      	ldr	r0, [r4, #0]
 8001048:	f003 f8f8 	bl	800423c <ai_network_outputs_get>
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <rps_init+0x70>)

  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 800104e:	2208      	movs	r2, #8
  ai_output = ai_network_outputs_get(network, NULL);
 8001050:	6018      	str	r0, [r3, #0]
  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8001052:	4611      	mov	r1, r2
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <rps_init+0x74>)
 8001056:	f000 f96d 	bl	8001334 <dct2_2d_init_f32>
}
 800105a:	b002      	add	sp, #8
 800105c:	bd10      	pop	{r4, pc}
    printf("ai_network_create success\n");
 800105e:	4809      	ldr	r0, [pc, #36]	; (8001084 <rps_init+0x78>)
 8001060:	f006 f9d0 	bl	8007404 <puts>
 8001064:	e7e4      	b.n	8001030 <rps_init+0x24>
 8001066:	bf00      	nop
 8001068:	20000978 	.word	0x20000978
 800106c:	080097dc 	.word	0x080097dc
 8001070:	20000b50 	.word	0x20000b50
 8001074:	080097fd 	.word	0x080097fd
 8001078:	20000a48 	.word	0x20000a48
 800107c:	20000a4c 	.word	0x20000a4c
 8001080:	20000954 	.word	0x20000954
 8001084:	08009829 	.word	0x08009829

08001088 <rps_infer>:

// Run inference on the AI network
void rps_infer(ai_float *input_data, ai_float *output_data) {
 8001088:	b570      	push	{r4, r5, r6, lr}

  // DCT Type-II 2D for extracting feature
  dct2_2d_f32(&S, (float32_t*) input_data, (float32_t*) feature, 0);
 800108a:	2300      	movs	r3, #0
void rps_infer(ai_float *input_data, ai_float *output_data) {
 800108c:	4604      	mov	r4, r0
  dct2_2d_f32(&S, (float32_t*) input_data, (float32_t*) feature, 0);
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <rps_infer+0x60>)

  // Zigzag scan
  zigzag_scan_f32(&S, (float32_t*) feature, (float32_t*) input_data);

  // Normalize the feature data (DC is discarded)
  normalize(input_data + 1, normalized_data, AI_NETWORK_IN_1_SIZE);
 8001090:	4e16      	ldr	r6, [pc, #88]	; (80010ec <rps_infer+0x64>)
void rps_infer(ai_float *input_data, ai_float *output_data) {
 8001092:	460d      	mov	r5, r1
  dct2_2d_f32(&S, (float32_t*) input_data, (float32_t*) feature, 0);
 8001094:	4601      	mov	r1, r0
 8001096:	4816      	ldr	r0, [pc, #88]	; (80010f0 <rps_infer+0x68>)
 8001098:	f000 f98a 	bl	80013b0 <dct2_2d_f32>
  zigzag_scan_f32(&S, (float32_t*) feature, (float32_t*) input_data);
 800109c:	4622      	mov	r2, r4
 800109e:	4912      	ldr	r1, [pc, #72]	; (80010e8 <rps_infer+0x60>)
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <rps_infer+0x68>)
 80010a2:	f000 f9d7 	bl	8001454 <zigzag_scan_f32>
  normalize(input_data + 1, normalized_data, AI_NETWORK_IN_1_SIZE);
 80010a6:	1d20      	adds	r0, r4, #4
 80010a8:	2214      	movs	r2, #20
 80010aa:	4631      	mov	r1, r6
 80010ac:	f7ff ff4a 	bl	8000f44 <normalize>

  // Input parameters for running inference
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <rps_infer+0x6c>)
  ai_output[0].data = AI_HANDLE_PTR(output_data);

  // Run inference
  ai_i32 batch = ai_network_run(network, ai_input, ai_output);
 80010b2:	4c11      	ldr	r4, [pc, #68]	; (80010f8 <rps_infer+0x70>)
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
 80010b4:	6819      	ldr	r1, [r3, #0]
  ai_output[0].data = AI_HANDLE_PTR(output_data);
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <rps_infer+0x74>)
  ai_input[0].data = AI_HANDLE_PTR(normalized_data);
 80010b8:	604e      	str	r6, [r1, #4]
  ai_output[0].data = AI_HANDLE_PTR(output_data);
 80010ba:	681a      	ldr	r2, [r3, #0]
  ai_i32 batch = ai_network_run(network, ai_input, ai_output);
 80010bc:	6820      	ldr	r0, [r4, #0]
  ai_output[0].data = AI_HANDLE_PTR(output_data);
 80010be:	6055      	str	r5, [r2, #4]
  ai_i32 batch = ai_network_run(network, ai_input, ai_output);
 80010c0:	f003 f9ad 	bl	800441e <ai_network_run>
  if (batch != 1) {
 80010c4:	2801      	cmp	r0, #1
 80010c6:	d009      	beq.n	80010dc <rps_infer+0x54>
    ai_error err = ai_network_get_error(network);
 80010c8:	6820      	ldr	r0, [r4, #0]
 80010ca:	f003 f89c 	bl	8004206 <ai_network_get_error>
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
  } else {
    printf("AI ai_network_run success\n");
  }
}
 80010ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80010d2:	0a02      	lsrs	r2, r0, #8
 80010d4:	b2c1      	uxtb	r1, r0
 80010d6:	480a      	ldr	r0, [pc, #40]	; (8001100 <rps_infer+0x78>)
 80010d8:	f006 b926 	b.w	8007328 <iprintf>
}
 80010dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("AI ai_network_run success\n");
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <rps_infer+0x7c>)
 80010e2:	f006 b98f 	b.w	8007404 <puts>
 80010e6:	bf00      	nop
 80010e8:	20000a50 	.word	0x20000a50
 80010ec:	20000b54 	.word	0x20000b54
 80010f0:	20000954 	.word	0x20000954
 80010f4:	20000a48 	.word	0x20000a48
 80010f8:	20000b50 	.word	0x20000b50
 80010fc:	20000a4c 	.word	0x20000a4c
 8001100:	08009843 	.word	0x08009843
 8001104:	0800986f 	.word	0x0800986f

08001108 <amg8833_adaptor_init>:
#include <amg8833.h>

I2C_HandleTypeDef *phi2c_;

void amg8833_adaptor_init(I2C_HandleTypeDef *phi2c) {
  phi2c_ = phi2c;
 8001108:	4b01      	ldr	r3, [pc, #4]	; (8001110 <amg8833_adaptor_init+0x8>)
 800110a:	6018      	str	r0, [r3, #0]
}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000ba4 	.word	0x20000ba4

08001114 <amg8833_i2c_write>:

void amg8833_i2c_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t data) {
 8001114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buf[2];
  buf[0] = reg_addr;
  buf[1] = data;
  HAL_I2C_Master_Transmit(phi2c_, i2c_addr, buf, 2, 100);
 8001116:	2364      	movs	r3, #100	; 0x64
  buf[0] = reg_addr;
 8001118:	f88d 100c 	strb.w	r1, [sp, #12]
  HAL_I2C_Master_Transmit(phi2c_, i2c_addr, buf, 2, 100);
 800111c:	4601      	mov	r1, r0
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <amg8833_i2c_write+0x28>)
 8001120:	9300      	str	r3, [sp, #0]
  buf[1] = data;
 8001122:	f88d 200d 	strb.w	r2, [sp, #13]
  HAL_I2C_Master_Transmit(phi2c_, i2c_addr, buf, 2, 100);
 8001126:	2302      	movs	r3, #2
 8001128:	aa03      	add	r2, sp, #12
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	f001 fa50 	bl	80025d0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fe7b 	bl	8001e2c <HAL_Delay>
}
 8001136:	b005      	add	sp, #20
 8001138:	f85d fb04 	ldr.w	pc, [sp], #4
 800113c:	20000ba4 	.word	0x20000ba4

08001140 <amg8833_set_moving_average>:

void amg8833_set_moving_average(bool enable) {
 8001140:	b570      	push	{r4, r5, r6, lr}
  uint8_t reg_addr_sequence[5] = {AMG8833_1F_ADDR, AMG8833_1F_ADDR, AMG8833_1F_ADDR,
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <amg8833_set_moving_average+0x54>)
      AMG8833_AVE_ADDR, AMG8833_1F_ADDR};
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <amg8833_set_moving_average+0x58>)
  uint8_t disable_sequence[5] = {0x50, 0x45, 0x57, 0x00, 0x00};
 8001146:	4915      	ldr	r1, [pc, #84]	; (800119c <amg8833_set_moving_average+0x5c>)
void amg8833_set_moving_average(bool enable) {
 8001148:	b086      	sub	sp, #24
 800114a:	4604      	mov	r4, r0
  uint8_t reg_addr_sequence[5] = {AMG8833_1F_ADDR, AMG8833_1F_ADDR, AMG8833_1F_ADDR,
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	9000      	str	r0, [sp, #0]
 8001150:	791b      	ldrb	r3, [r3, #4]
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8001152:	6810      	ldr	r0, [r2, #0]
 8001154:	7912      	ldrb	r2, [r2, #4]
  uint8_t reg_addr_sequence[5] = {AMG8833_1F_ADDR, AMG8833_1F_ADDR, AMG8833_1F_ADDR,
 8001156:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 800115a:	f88d 200c 	strb.w	r2, [sp, #12]
 800115e:	ab02      	add	r3, sp, #8
  uint8_t disable_sequence[5] = {0x50, 0x45, 0x57, 0x00, 0x00};
 8001160:	aa04      	add	r2, sp, #16
  uint8_t *pSeq;

  if (enable) {
    pSeq = enable_sequence;
  } else {
    pSeq = disable_sequence;
 8001162:	2c00      	cmp	r4, #0
 8001164:	bf08      	it	eq
 8001166:	4613      	moveq	r3, r2
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8001168:	9002      	str	r0, [sp, #8]
  uint8_t disable_sequence[5] = {0x50, 0x45, 0x57, 0x00, 0x00};
 800116a:	6808      	ldr	r0, [r1, #0]
 800116c:	7909      	ldrb	r1, [r1, #4]
 800116e:	9004      	str	r0, [sp, #16]
 8001170:	f88d 1014 	strb.w	r1, [sp, #20]
  }

  for (int i = 0; i < sizeof(reg_addr_sequence); i++) {
 8001174:	466d      	mov	r5, sp
 8001176:	1e5e      	subs	r6, r3, #1
 8001178:	1d1c      	adds	r4, r3, #4
 800117a:	42a6      	cmp	r6, r4
 800117c:	d101      	bne.n	8001182 <amg8833_set_moving_average+0x42>
    amg8833_i2c_write(AMG8833_DEV_ADDR, reg_addr_sequence[i], *(pSeq+i));
  }
}
 800117e:	b006      	add	sp, #24
 8001180:	bd70      	pop	{r4, r5, r6, pc}
    amg8833_i2c_write(AMG8833_DEV_ADDR, reg_addr_sequence[i], *(pSeq+i));
 8001182:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001186:	f815 1b01 	ldrb.w	r1, [r5], #1
 800118a:	20d0      	movs	r0, #208	; 0xd0
 800118c:	f7ff ffc2 	bl	8001114 <amg8833_i2c_write>
  for (int i = 0; i < sizeof(reg_addr_sequence); i++) {
 8001190:	e7f3      	b.n	800117a <amg8833_set_moving_average+0x3a>
 8001192:	bf00      	nop
 8001194:	08009889 	.word	0x08009889
 8001198:	0800988f 	.word	0x0800988f
 800119c:	08009720 	.word	0x08009720

080011a0 <amg8833_read_registors>:

void amg8833_read_registors(uint8_t reg_addr, uint8_t *buffer, uint8_t length) {
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t buf[1];
  buf[0] = reg_addr;
  HAL_I2C_Master_Transmit(phi2c_, AMG8833_DEV_ADDR, buf, 1, 100);
 80011a2:	4e0b      	ldr	r6, [pc, #44]	; (80011d0 <amg8833_read_registors+0x30>)
void amg8833_read_registors(uint8_t reg_addr, uint8_t *buffer, uint8_t length) {
 80011a4:	b085      	sub	sp, #20
  HAL_I2C_Master_Transmit(phi2c_, AMG8833_DEV_ADDR, buf, 1, 100);
 80011a6:	2764      	movs	r7, #100	; 0x64
void amg8833_read_registors(uint8_t reg_addr, uint8_t *buffer, uint8_t length) {
 80011a8:	460c      	mov	r4, r1
 80011aa:	4615      	mov	r5, r2
  buf[0] = reg_addr;
 80011ac:	f88d 000c 	strb.w	r0, [sp, #12]
  HAL_I2C_Master_Transmit(phi2c_, AMG8833_DEV_ADDR, buf, 1, 100);
 80011b0:	aa03      	add	r2, sp, #12
 80011b2:	6830      	ldr	r0, [r6, #0]
 80011b4:	9700      	str	r7, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	f001 fa09 	bl	80025d0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(phi2c_, AMG8833_DEV_ADDR, buffer, length, 100);
 80011be:	6830      	ldr	r0, [r6, #0]
 80011c0:	9700      	str	r7, [sp, #0]
 80011c2:	462b      	mov	r3, r5
 80011c4:	4622      	mov	r2, r4
 80011c6:	21d0      	movs	r1, #208	; 0xd0
 80011c8:	f001 faae 	bl	8002728 <HAL_I2C_Master_Receive>
}
 80011cc:	b005      	add	sp, #20
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d0:	20000ba4 	.word	0x20000ba4
 80011d4:	00000000 	.word	0x00000000

080011d8 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011dc:	ed2d 8b04 	vpush	{d8-d9}
 80011e0:	460d      	mov	r5, r1
 80011e2:	b083      	sub	sp, #12
 80011e4:	4604      	mov	r4, r0
  float32_t *pDataW = NULL;
  float32_t *pDataW_I = NULL;
  float32_t *pDataX = NULL;
  S->width = width;

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 80011e6:	2300      	movs	r3, #0
  S->width = width;
 80011e8:	f820 1b04 	strh.w	r1, [r0], #4
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 80011ec:	2201      	movs	r2, #1

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80011ee:	fb05 f605 	mul.w	r6, r5, r5
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 80011f2:	f003 fa5b 	bl	80046ac <arm_mat_init_f32>
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80011f6:	2104      	movs	r1, #4
 80011f8:	4630      	mov	r0, r6
 80011fa:	f005 fa6f 	bl	80066dc <calloc>
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 80011fe:	462a      	mov	r2, r5
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8001200:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8001202:	4629      	mov	r1, r5
 8001204:	f104 000c 	add.w	r0, r4, #12
 8001208:	f003 fa50 	bl	80046ac <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 800120c:	2104      	movs	r1, #4
 800120e:	4630      	mov	r0, r6
 8001210:	f005 fa64 	bl	80066dc <calloc>
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8001214:	462a      	mov	r2, r5
  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8001216:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8001218:	4629      	mov	r1, r5
 800121a:	f104 0014 	add.w	r0, r4, #20
 800121e:	f003 fa45 	bl	80046ac <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8001222:	2104      	movs	r1, #4
 8001224:	4628      	mov	r0, r5
 8001226:	f005 fa59 	bl	80066dc <calloc>
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 800122a:	4629      	mov	r1, r5
  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 800122c:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 800122e:	2201      	movs	r2, #1
 8001230:	f104 001c 	add.w	r0, r4, #28
 8001234:	f003 fa3a 	bl	80046ac <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 8001238:	2500      	movs	r5, #0
 800123a:	8823      	ldrh	r3, [r4, #0]
 800123c:	42ab      	cmp	r3, r5
 800123e:	dd6a      	ble.n	8001316 <dct2_init_f32+0x13e>
 8001240:	006b      	lsls	r3, r5, #1
 8001242:	462f      	mov	r7, r5
 8001244:	9301      	str	r3, [sp, #4]
    for (int n = 0; n < S->width; n++) {
 8001246:	2600      	movs	r6, #0
 8001248:	e023      	b.n	8001292 <dct2_init_f32+0xba>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	fb05 620a 	mla	r2, r5, sl, r6
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001250:	4638      	mov	r0, r7
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001252:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001256:	f7ff f965 	bl	8000524 <__aeabi_i2d>
 800125a:	a334      	add	r3, pc, #208	; (adr r3, 800132c <dct2_init_f32+0x154>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9ca 	bl	80005f8 <__aeabi_dmul>
 8001264:	4680      	mov	r8, r0
 8001266:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800126a:	4689      	mov	r9, r1
 800126c:	f7ff f95a 	bl	8000524 <__aeabi_i2d>
 8001270:	460b      	mov	r3, r1
 8001272:	4602      	mov	r2, r0
 8001274:	4649      	mov	r1, r9
 8001276:	4640      	mov	r0, r8
 8001278:	f7ff fae8 	bl	800084c <__aeabi_ddiv>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 800127c:	f7ff fc94 	bl	8000ba8 <__aeabi_d2f>
 8001280:	ee00 0a10 	vmov	s0, r0
 8001284:	f003 fa16 	bl	80046b4 <arm_cos_f32>
 8001288:	9b01      	ldr	r3, [sp, #4]
 800128a:	ed8b 0a00 	vstr	s0, [fp]
    for (int n = 0; n < S->width; n++) {
 800128e:	3601      	adds	r6, #1
 8001290:	441f      	add	r7, r3
 8001292:	f8b4 a000 	ldrh.w	sl, [r4]
 8001296:	45b2      	cmp	sl, r6
 8001298:	dcd7      	bgt.n	800124a <dct2_init_f32+0x72>
  for (int k = 0; k < S->width; k++) {
 800129a:	3501      	adds	r5, #1
 800129c:	e7cd      	b.n	800123a <dct2_init_f32+0x62>
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 800129e:	2d00      	cmp	r5, #0
  }

  for (int n = 0; n < S->width; n++) {
    for (int k = 0; k < S->width; k++) {
      S->W_I.pData[n * S->width + k] = c_k(k)
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80012a0:	4638      	mov	r0, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80012a2:	bf14      	ite	ne
 80012a4:	eeb0 9a48 	vmovne.f32	s18, s16
 80012a8:	eeb0 9a68 	vmoveq.f32	s18, s17
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80012ac:	f7ff f93a 	bl	8000524 <__aeabi_i2d>
 80012b0:	a31e      	add	r3, pc, #120	; (adr r3, 800132c <dct2_init_f32+0x154>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f99f 	bl	80005f8 <__aeabi_dmul>
 80012ba:	4680      	mov	r8, r0
 80012bc:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80012c0:	4689      	mov	r9, r1
 80012c2:	f7ff f92f 	bl	8000524 <__aeabi_i2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4640      	mov	r0, r8
 80012cc:	4649      	mov	r1, r9
 80012ce:	f7ff fabd 	bl	800084c <__aeabi_ddiv>
 80012d2:	f7ff fc69 	bl	8000ba8 <__aeabi_d2f>
 80012d6:	ee00 0a10 	vmov	s0, r0
 80012da:	f003 f9eb 	bl	80046b4 <arm_cos_f32>
      S->W_I.pData[n * S->width + k] = c_k(k)
 80012de:	8822      	ldrh	r2, [r4, #0]
 80012e0:	69a3      	ldr	r3, [r4, #24]
 80012e2:	fb06 5202 	mla	r2, r6, r2, r5
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80012e6:	ee20 0a09 	vmul.f32	s0, s0, s18
      S->W_I.pData[n * S->width + k] = c_k(k)
 80012ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80012ee:	ed83 0a00 	vstr	s0, [r3]
    for (int k = 0; k < S->width; k++) {
 80012f2:	3501      	adds	r5, #1
 80012f4:	445f      	add	r7, fp
 80012f6:	f8b4 a000 	ldrh.w	sl, [r4]
 80012fa:	45aa      	cmp	sl, r5
 80012fc:	dccf      	bgt.n	800129e <dct2_init_f32+0xc6>
  for (int n = 0; n < S->width; n++) {
 80012fe:	3601      	adds	r6, #1
 8001300:	8823      	ldrh	r3, [r4, #0]
 8001302:	42b3      	cmp	r3, r6
 8001304:	dd0b      	ble.n	800131e <dct2_init_f32+0x146>
 8001306:	0073      	lsls	r3, r6, #1
 8001308:	2700      	movs	r7, #0
 800130a:	f103 0b01 	add.w	fp, r3, #1
    for (int k = 0; k < S->width; k++) {
 800130e:	463d      	mov	r5, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8001310:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001314:	e7ef      	b.n	80012f6 <dct2_init_f32+0x11e>
 8001316:	eddf 8a04 	vldr	s17, [pc, #16]	; 8001328 <dct2_init_f32+0x150>
  for (int n = 0; n < S->width; n++) {
 800131a:	2600      	movs	r6, #0
 800131c:	e7f0      	b.n	8001300 <dct2_init_f32+0x128>
    }
  }

}
 800131e:	b003      	add	sp, #12
 8001320:	ecbd 8b04 	vpop	{d8-d9}
 8001324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001328:	3f3504f3 	.word	0x3f3504f3
 800132c:	54442d18 	.word	0x54442d18
 8001330:	400921fb 	.word	0x400921fb

08001334 <dct2_2d_init_f32>:
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     height     DCT2 2D width.
 * @param[in]     width      DCT2 2D height.
 * @return        none.
 */
void dct2_2d_init_f32(dct2_instance_f32 *S, uint16_t height, uint16_t width) {
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
  dct2_init_f32(S, width);
 800133a:	4611      	mov	r1, r2
 800133c:	f7ff ff4c 	bl	80011d8 <dct2_init_f32>
  S->height = height;
 8001340:	8065      	strh	r5, [r4, #2]
}
 8001342:	bd38      	pop	{r3, r4, r5, pc}

08001344 <dct2_f32>:
 * @param[out]    *pDst      points to the output buffer.
 * @param[in]     idctFlag   DCT if flag is 0, IDCT if flag is 1.
 * @return        none.
 */
void dct2_f32(dct2_instance_f32 *S, float32_t *pSrc, float32_t *pDst,
    uint8_t idctFlag) {
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4615      	mov	r5, r2

  S->X.pData = pSrc;
 8001348:	6201      	str	r1, [r0, #32]
  S->Y.pData = pDst;
 800134a:	6082      	str	r2, [r0, #8]
    uint8_t idctFlag) {
 800134c:	4604      	mov	r4, r0

  if (idctFlag == 0) {
    arm_mat_mult_f32(&(S->W), &(S->X), &(S->Y));
 800134e:	f100 011c 	add.w	r1, r0, #28
 8001352:	1d02      	adds	r2, r0, #4
  if (idctFlag == 0) {
 8001354:	bb33      	cbnz	r3, 80013a4 <dct2_f32+0x60>
    arm_mat_mult_f32(&(S->W), &(S->X), &(S->Y));
 8001356:	300c      	adds	r0, #12
 8001358:	f003 f908 	bl	800456c <arm_mat_mult_f32>
    pDst[0] = pDst[0] * c_k(0);
 800135c:	edd5 7a00 	vldr	s15, [r5]
 8001360:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013ac <dct2_f32+0x68>
 8001364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001368:	edc5 7a00 	vstr	s15, [r5]
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
  } else {
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 800136c:	8824      	ldrh	r4, [r4, #0]
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff f8d8 	bl	8000524 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	2000      	movs	r0, #0
 800137a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800137e:	f7ff fa65 	bl	800084c <__aeabi_ddiv>
 8001382:	ec41 0b10 	vmov	d0, r0, r1
 8001386:	f007 ff3f 	bl	8009208 <sqrt>
 800138a:	ec51 0b10 	vmov	r0, r1, d0
 800138e:	f7ff fc0b 	bl	8000ba8 <__aeabi_d2f>
 8001392:	4622      	mov	r2, r4
 8001394:	ee00 0a10 	vmov	s0, r0
 8001398:	4629      	mov	r1, r5
 800139a:	4628      	mov	r0, r5
  }
}
 800139c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 80013a0:	f003 b9d2 	b.w	8004748 <arm_scale_f32>
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
 80013a4:	3014      	adds	r0, #20
 80013a6:	f003 f8e1 	bl	800456c <arm_mat_mult_f32>
 80013aa:	e7df      	b.n	800136c <dct2_f32+0x28>
 80013ac:	3f3504f3 	.word	0x3f3504f3

080013b0 <dct2_2d_f32>:
 * @param[out]    *pDst      points to the output buffer.
 * @param[in]     idctFlag   DCT if flag is 0, IDCT if flag is 1.
 * @return        none.
 */
void dct2_2d_f32(dct2_instance_f32 *S, float32_t *pSrc, float32_t *pDst,
    uint8_t idctFlag) {
 80013b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	4616      	mov	r6, r2
 80013ba:	461f      	mov	r7, r3

  arm_matrix_instance_f32 X;
  arm_matrix_instance_f32 Y;

  for (int j = 0; j < S->height; j++) {
 80013bc:	f04f 0800 	mov.w	r8, #0
 80013c0:	8861      	ldrh	r1, [r4, #2]
    dct2_f32(S, pSrc + (j * S->width), pDst + (j * S->width), idctFlag);
 80013c2:	8822      	ldrh	r2, [r4, #0]
  for (int j = 0; j < S->height; j++) {
 80013c4:	4541      	cmp	r1, r8
 80013c6:	dc2b      	bgt.n	8001420 <dct2_2d_f32+0x70>
  }
  arm_mat_init_f32(&X, S->height, S->width, pDst);
 80013c8:	4633      	mov	r3, r6
 80013ca:	4668      	mov	r0, sp
 80013cc:	f003 f96e 	bl	80046ac <arm_mat_init_f32>
  arm_mat_init_f32(&Y, S->width, S->height, pSrc);
 80013d0:	8862      	ldrh	r2, [r4, #2]
 80013d2:	8821      	ldrh	r1, [r4, #0]
 80013d4:	462b      	mov	r3, r5
 80013d6:	a802      	add	r0, sp, #8
 80013d8:	f003 f968 	bl	80046ac <arm_mat_init_f32>
  arm_mat_trans_f32(&X, &Y);
 80013dc:	a902      	add	r1, sp, #8
 80013de:	4668      	mov	r0, sp
 80013e0:	f003 f868 	bl	80044b4 <arm_mat_trans_f32>

  for (int j = 0; j < S->width; j++) {
 80013e4:	f04f 0800 	mov.w	r8, #0
 80013e8:	8821      	ldrh	r1, [r4, #0]
    dct2_f32(S, pSrc + (j * S->height), pDst + (j * S->height), idctFlag);
 80013ea:	8862      	ldrh	r2, [r4, #2]
  for (int j = 0; j < S->width; j++) {
 80013ec:	4541      	cmp	r1, r8
 80013ee:	dc24      	bgt.n	800143a <dct2_2d_f32+0x8a>
  }
  arm_mat_init_f32(&X, S->width, S->height, pDst);
 80013f0:	4633      	mov	r3, r6
 80013f2:	4668      	mov	r0, sp
 80013f4:	f003 f95a 	bl	80046ac <arm_mat_init_f32>
  arm_mat_init_f32(&Y, S->height, S->width, pSrc);
 80013f8:	8822      	ldrh	r2, [r4, #0]
 80013fa:	8861      	ldrh	r1, [r4, #2]
 80013fc:	462b      	mov	r3, r5
 80013fe:	a802      	add	r0, sp, #8
 8001400:	f003 f954 	bl	80046ac <arm_mat_init_f32>
  arm_mat_trans_f32(&X, &Y);
 8001404:	a902      	add	r1, sp, #8
 8001406:	4668      	mov	r0, sp
 8001408:	f003 f854 	bl	80044b4 <arm_mat_trans_f32>
  arm_copy_f32(pSrc, pDst, S->height * S->width);
 800140c:	8863      	ldrh	r3, [r4, #2]
 800140e:	8822      	ldrh	r2, [r4, #0]
 8001410:	4631      	mov	r1, r6
 8001412:	435a      	muls	r2, r3
 8001414:	4628      	mov	r0, r5
 8001416:	f003 f81d 	bl	8004454 <arm_copy_f32>
}
 800141a:	b004      	add	sp, #16
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dct2_f32(S, pSrc + (j * S->width), pDst + (j * S->width), idctFlag);
 8001420:	fb08 f102 	mul.w	r1, r8, r2
 8001424:	eb06 0281 	add.w	r2, r6, r1, lsl #2
 8001428:	463b      	mov	r3, r7
 800142a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff ff88 	bl	8001344 <dct2_f32>
  for (int j = 0; j < S->height; j++) {
 8001434:	f108 0801 	add.w	r8, r8, #1
 8001438:	e7c2      	b.n	80013c0 <dct2_2d_f32+0x10>
    dct2_f32(S, pSrc + (j * S->height), pDst + (j * S->height), idctFlag);
 800143a:	fb08 f102 	mul.w	r1, r8, r2
 800143e:	eb06 0281 	add.w	r2, r6, r1, lsl #2
 8001442:	463b      	mov	r3, r7
 8001444:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff ff7b 	bl	8001344 <dct2_f32>
  for (int j = 0; j < S->width; j++) {
 800144e:	f108 0801 	add.w	r8, r8, #1
 8001452:	e7c9      	b.n	80013e8 <dct2_2d_f32+0x38>

08001454 <zigzag_scan_f32>:
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     *pSrc      points to the input buffer.
 * @param[out]    *pDst      points to the output buffer.
 * @return        none.
 */
void zigzag_scan_f32(dct2_instance_f32 *S, float32_t *pSrc, float32_t *pDst) {
 8001454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = 0;
  zigzag_path path = ONE;

  do {

    pDst[n++] = pSrc[j * S->width + i];
 8001458:	f8b0 c000 	ldrh.w	ip, [r0]
      if (i == S->width - 1) {
        path = FIVE;
      }
      break;
    }
  } while (n < S->width * S->height);
 800145c:	8845      	ldrh	r5, [r0, #2]
  zigzag_path path = ONE;
 800145e:	2400      	movs	r4, #0
  } while (n < S->width * S->height);
 8001460:	fb05 f80c 	mul.w	r8, r5, ip
        if (i == S->width - 1) {
 8001464:	f10c 3eff 	add.w	lr, ip, #4294967295
  n = 0;
 8001468:	4627      	mov	r7, r4
  j = 0;
 800146a:	4620      	mov	r0, r4
  i = 0;
 800146c:	4623      	mov	r3, r4
      if (j == S->height - 1) {
 800146e:	3d01      	subs	r5, #1
    pDst[n++] = pSrc[j * S->width + i];
 8001470:	fb00 360c 	mla	r6, r0, ip, r3
 8001474:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8001478:	3701      	adds	r7, #1
 800147a:	6836      	ldr	r6, [r6, #0]
 800147c:	f842 6b04 	str.w	r6, [r2], #4
    switch (path) {
 8001480:	1e66      	subs	r6, r4, #1
 8001482:	2e06      	cmp	r6, #6
 8001484:	d805      	bhi.n	8001492 <zigzag_scan_f32+0x3e>
 8001486:	e8df f006 	tbb	[pc, r6]
 800148a:	180f      	.short	0x180f
 800148c:	1a2c291f 	.word	0x1a2c291f
 8001490:	32          	.byte	0x32
 8001491:	00          	.byte	0x00
      if (i == S->width - 1) {
 8001492:	459e      	cmp	lr, r3
 8001494:	d102      	bne.n	800149c <zigzag_scan_f32+0x48>
        j++;
 8001496:	3001      	adds	r0, #1
        path = EIGHT;
 8001498:	2407      	movs	r4, #7
 800149a:	e001      	b.n	80014a0 <zigzag_scan_f32+0x4c>
        i++;
 800149c:	3301      	adds	r3, #1
        path = TWO;
 800149e:	2401      	movs	r4, #1
  } while (n < S->width * S->height);
 80014a0:	45b8      	cmp	r8, r7
 80014a2:	dce5      	bgt.n	8001470 <zigzag_scan_f32+0x1c>
}
 80014a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (i == 0) {
 80014a8:	3b01      	subs	r3, #1
      j++;
 80014aa:	f100 0001 	add.w	r0, r0, #1
      if (i == 0) {
 80014ae:	d1f7      	bne.n	80014a0 <zigzag_scan_f32+0x4c>
          path = THREE;
 80014b0:	4285      	cmp	r5, r0
 80014b2:	bf0c      	ite	eq
 80014b4:	2406      	moveq	r4, #6
 80014b6:	2402      	movne	r4, #2
 80014b8:	e7f2      	b.n	80014a0 <zigzag_scan_f32+0x4c>
      if (j == S->height - 1) {
 80014ba:	4285      	cmp	r5, r0
 80014bc:	d101      	bne.n	80014c2 <zigzag_scan_f32+0x6e>
        i++;
 80014be:	3301      	adds	r3, #1
 80014c0:	e7ea      	b.n	8001498 <zigzag_scan_f32+0x44>
        j++;
 80014c2:	3001      	adds	r0, #1
        path = FOUR;
 80014c4:	2403      	movs	r4, #3
 80014c6:	e7eb      	b.n	80014a0 <zigzag_scan_f32+0x4c>
      if (j == 0) {
 80014c8:	3801      	subs	r0, #1
      i++;
 80014ca:	f103 0301 	add.w	r3, r3, #1
      if (j == 0) {
 80014ce:	d1e7      	bne.n	80014a0 <zigzag_scan_f32+0x4c>
        if (i == S->width - 1) {
 80014d0:	ebae 0603 	sub.w	r6, lr, r3
 80014d4:	4274      	negs	r4, r6
 80014d6:	4174      	adcs	r4, r6
 80014d8:	00a4      	lsls	r4, r4, #2
 80014da:	e7e1      	b.n	80014a0 <zigzag_scan_f32+0x4c>
      j++;
 80014dc:	3001      	adds	r0, #1
      path = SIX;
 80014de:	2405      	movs	r4, #5
      break;
 80014e0:	e7de      	b.n	80014a0 <zigzag_scan_f32+0x4c>
      j++;
 80014e2:	3001      	adds	r0, #1
      i--;
 80014e4:	3b01      	subs	r3, #1
        path = SEVEN;
 80014e6:	4285      	cmp	r5, r0
 80014e8:	bf08      	it	eq
 80014ea:	2406      	moveq	r4, #6
 80014ec:	e7d8      	b.n	80014a0 <zigzag_scan_f32+0x4c>
      i++;
 80014ee:	3301      	adds	r3, #1
      j--;
 80014f0:	3801      	subs	r0, #1
        path = FIVE;
 80014f2:	459e      	cmp	lr, r3
 80014f4:	bf08      	it	eq
 80014f6:	2404      	moveq	r4, #4
 80014f8:	e7d2      	b.n	80014a0 <zigzag_scan_f32+0x4c>
	...

080014fc <write_command>:

/*
 * AQM1602XA-RN-GBW
 * LCD write command
 */
void write_command(uint8_t command) {
 80014fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buf[2] = { 0x00, 0x00 };
 80014fe:	2300      	movs	r3, #0
 8001500:	f8ad 300c 	strh.w	r3, [sp, #12]
  buf[1] = command;
 8001504:	f88d 000d 	strb.w	r0, [sp, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <write_command+0x2c>)
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	aa03      	add	r2, sp, #12
 8001510:	2302      	movs	r3, #2
 8001512:	217c      	movs	r1, #124	; 0x7c
 8001514:	6800      	ldr	r0, [r0, #0]
 8001516:	f001 f85b 	bl	80025d0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800151a:	2001      	movs	r0, #1
 800151c:	f000 fc86 	bl	8001e2c <HAL_Delay>
}
 8001520:	b005      	add	sp, #20
 8001522:	f85d fb04 	ldr.w	pc, [sp], #4
 8001526:	bf00      	nop
 8001528:	20000ba8 	.word	0x20000ba8

0800152c <write_data>:

/*
 * AQM1602XA-RN-GBW
 * LCD write data
 */
void write_data(uint8_t data) {
 800152c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buf[2] = { 0x40, 0x00 };
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	f8ad 300c 	strh.w	r3, [sp, #12]
  buf[1] = data;
 8001534:	f88d 000d 	strb.w	r0, [sp, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 8001538:	2364      	movs	r3, #100	; 0x64
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <write_data+0x2c>)
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	aa03      	add	r2, sp, #12
 8001540:	2302      	movs	r3, #2
 8001542:	217c      	movs	r1, #124	; 0x7c
 8001544:	6800      	ldr	r0, [r0, #0]
 8001546:	f001 f843 	bl	80025d0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 fc6e 	bl	8001e2c <HAL_Delay>
}
 8001550:	b005      	add	sp, #20
 8001552:	f85d fb04 	ldr.w	pc, [sp], #4
 8001556:	bf00      	nop
 8001558:	20000ba8 	.word	0x20000ba8

0800155c <lcd_init>:

void lcd_init(I2C_HandleTypeDef *p_hi2c) {
 800155c:	b508      	push	{r3, lr}
  phi2c = p_hi2c;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <lcd_init+0x54>)
 8001560:	6018      	str	r0, [r3, #0]
  HAL_Delay(50);
 8001562:	2032      	movs	r0, #50	; 0x32
 8001564:	f000 fc62 	bl	8001e2c <HAL_Delay>
  write_command(0x38);
 8001568:	2038      	movs	r0, #56	; 0x38
 800156a:	f7ff ffc7 	bl	80014fc <write_command>
  write_command(0x39);
 800156e:	2039      	movs	r0, #57	; 0x39
 8001570:	f7ff ffc4 	bl	80014fc <write_command>
  write_command(0x14);
 8001574:	2014      	movs	r0, #20
 8001576:	f7ff ffc1 	bl	80014fc <write_command>
  write_command(0x73);  // Contrast: C3=0 C2=0 C1=1 C0=1
 800157a:	2073      	movs	r0, #115	; 0x73
 800157c:	f7ff ffbe 	bl	80014fc <write_command>
  write_command(0x52);  // Contrast: BON=0 C5=1 C4=0
 8001580:	2052      	movs	r0, #82	; 0x52
 8001582:	f7ff ffbb 	bl	80014fc <write_command>
  write_command(0x6c);
 8001586:	206c      	movs	r0, #108	; 0x6c
 8001588:	f7ff ffb8 	bl	80014fc <write_command>
  HAL_Delay(250);
 800158c:	20fa      	movs	r0, #250	; 0xfa
 800158e:	f000 fc4d 	bl	8001e2c <HAL_Delay>
  write_command(0x38);
 8001592:	2038      	movs	r0, #56	; 0x38
 8001594:	f7ff ffb2 	bl	80014fc <write_command>
  write_command(0x01);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff ffaf 	bl	80014fc <write_command>
  write_command(0x0c);
 800159e:	200c      	movs	r0, #12
 80015a0:	f7ff ffac 	bl	80014fc <write_command>
  HAL_Delay(50);
}
 80015a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(50);
 80015a8:	2032      	movs	r0, #50	; 0x32
 80015aa:	f000 bc3f 	b.w	8001e2c <HAL_Delay>
 80015ae:	bf00      	nop
 80015b0:	20000ba8 	.word	0x20000ba8

080015b4 <lcd_clear>:

void lcd_clear(void) {
  write_command(0x01);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff bfa1 	b.w	80014fc <write_command>

080015ba <lcd_newline>:
}

void lcd_newline(void) {
  write_command(0xc0);
 80015ba:	20c0      	movs	r0, #192	; 0xc0
 80015bc:	f7ff bf9e 	b.w	80014fc <write_command>

080015c0 <lcd_string>:

void lcd_move_right(void) {
  write_command(0x14);
}

void lcd_string(char *pbuf, uint8_t len) {
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4604      	mov	r4, r0
 80015c4:	1845      	adds	r5, r0, r1
  uint8_t i;
  for(i=0; i<len; i++) {
 80015c6:	42ac      	cmp	r4, r5
 80015c8:	d100      	bne.n	80015cc <lcd_string+0xc>
    write_data((uint8_t*)pbuf[i]);
  }
}
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
    write_data((uint8_t*)pbuf[i]);
 80015cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015d0:	f7ff ffac 	bl	800152c <write_data>
  for(i=0; i<len; i++) {
 80015d4:	e7f7      	b.n	80015c6 <lcd_string+0x6>

080015d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d6:	b500      	push	{lr}
 80015d8:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	2244      	movs	r2, #68	; 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	a805      	add	r0, sp, #20
 80015e0:	f005 fff0 	bl	80075c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	2214      	movs	r2, #20
 80015e6:	2100      	movs	r1, #0
 80015e8:	4668      	mov	r0, sp
 80015ea:	f005 ffeb 	bl	80075c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f2:	f001 f985 	bl	8002900 <HAL_PWREx_ControlVoltageScaling>
 80015f6:	b108      	cbz	r0, 80015fc <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80015fa:	e7fe      	b.n	80015fa <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fc:	2210      	movs	r2, #16
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001602:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001608:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 800160c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001610:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001612:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001614:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001618:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800161e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f001 fa34 	bl	8002a8c <HAL_RCC_OscConfig>
 8001624:	b108      	cbz	r0, 800162a <SystemClock_Config+0x54>
 8001626:	b672      	cpsid	i
  while (1) {
 8001628:	e7fe      	b.n	8001628 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800162a:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	220f      	movs	r2, #15
 8001630:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001632:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001634:	2104      	movs	r1, #4
 8001636:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800163c:	f001 fca6 	bl	8002f8c <HAL_RCC_ClockConfig>
 8001640:	b108      	cbz	r0, 8001646 <SystemClock_Config+0x70>
 8001642:	b672      	cpsid	i
  while (1) {
 8001644:	e7fe      	b.n	8001644 <SystemClock_Config+0x6e>
}
 8001646:	b017      	add	sp, #92	; 0x5c
 8001648:	f85d fb04 	ldr.w	pc, [sp], #4

0800164c <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <MX_USART2_UART_Init+0x34>)
{
 8001650:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001652:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001656:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800165e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166a:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	f002 fd1d 	bl	80040ac <HAL_UART_Init>
 8001672:	b108      	cbz	r0, 8001678 <MX_USART2_UART_Init+0x2c>
 8001674:	b672      	cpsid	i
  while (1) {
 8001676:	e7fe      	b.n	8001676 <MX_USART2_UART_Init+0x2a>
}
 8001678:	bd08      	pop	{r3, pc}
 800167a:	bf00      	nop
 800167c:	20000cfc 	.word	0x20000cfc
 8001680:	40004400 	.word	0x40004400

08001684 <main>:
{
 8001684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001688:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
  HAL_Init();
 800168c:	f000 fba6 	bl	8001ddc <HAL_Init>
  SystemClock_Config();
 8001690:	f7ff ffa1 	bl	80015d6 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	2214      	movs	r2, #20
 8001696:	2100      	movs	r1, #0
 8001698:	a850      	add	r0, sp, #320	; 0x140
 800169a:	f005 ff93 	bl	80075c4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <main+0x138>)
 80016a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a2:	f042 0204 	orr.w	r2, r2, #4
 80016a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80016a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016aa:	f002 0204 	and.w	r2, r2, #4
 80016ae:	9200      	str	r2, [sp, #0]
 80016b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80016cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ce:	f002 0201 	and.w	r2, r2, #1
 80016d2:	9202      	str	r2, [sp, #8]
 80016d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d8:	f042 0202 	orr.w	r2, r2, #2
 80016dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2120      	movs	r1, #32
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	f000 fd9b 	bl	800222c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fe:	4830      	ldr	r0, [pc, #192]	; (80017c0 <main+0x13c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	9452      	str	r4, [sp, #328]	; 0x148
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001702:	a950      	add	r1, sp, #320	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	e9cd 2350 	strd	r2, r3, [sp, #320]	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2701      	movs	r7, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f000 fcb1 	bl	8002070 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	a950      	add	r1, sp, #320	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	e9cd 3750 	strd	r3, r7, [sp, #320]	; 0x140
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	e9cd 4452 	strd	r4, r4, [sp, #328]	; 0x148
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800171e:	f000 fca7 	bl	8002070 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001722:	4828      	ldr	r0, [pc, #160]	; (80017c4 <main+0x140>)
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <main+0x144>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001726:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001728:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 800172c:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800172e:	6207      	str	r7, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001730:	f000 fbf6 	bl	8001f20 <HAL_CRC_Init>
 8001734:	b108      	cbz	r0, 800173a <main+0xb6>
 8001736:	b672      	cpsid	i
  while (1) {
 8001738:	e7fe      	b.n	8001738 <main+0xb4>
  hi2c1.Instance = I2C1;
 800173a:	4d24      	ldr	r5, [pc, #144]	; (80017cc <main+0x148>)
  hi2c1.Init.Timing = 0x10909CEC;
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <main+0x14c>)
 800173e:	4e25      	ldr	r6, [pc, #148]	; (80017d4 <main+0x150>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001740:	6228      	str	r0, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001742:	e9c5 0702 	strd	r0, r7, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	e9c5 0004 	strd	r0, r0, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174a:	e9c5 0006 	strd	r0, r0, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174e:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x10909CEC;
 8001750:	e9c5 3600 	strd	r3, r6, [r5]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001754:	f000 fee7 	bl	8002526 <HAL_I2C_Init>
 8001758:	4601      	mov	r1, r0
 800175a:	b108      	cbz	r0, 8001760 <main+0xdc>
 800175c:	b672      	cpsid	i
  while (1) {
 800175e:	e7fe      	b.n	800175e <main+0xda>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001760:	4628      	mov	r0, r5
 8001762:	f001 f879 	bl	8002858 <HAL_I2CEx_ConfigAnalogFilter>
 8001766:	4601      	mov	r1, r0
 8001768:	b108      	cbz	r0, 800176e <main+0xea>
 800176a:	b672      	cpsid	i
  while (1) {
 800176c:	e7fe      	b.n	800176c <main+0xe8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800176e:	4628      	mov	r0, r5
 8001770:	f001 f898 	bl	80028a4 <HAL_I2CEx_ConfigDigitalFilter>
 8001774:	b108      	cbz	r0, 800177a <main+0xf6>
 8001776:	b672      	cpsid	i
  while (1) {
 8001778:	e7fe      	b.n	8001778 <main+0xf4>
  hi2c3.Instance = I2C3;
 800177a:	4c17      	ldr	r4, [pc, #92]	; (80017d8 <main+0x154>)
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <main+0x158>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177e:	6220      	str	r0, [r4, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001780:	e9c4 0702 	strd	r0, r7, [r4, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8001784:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001788:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800178c:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x10909CEC;
 800178e:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001792:	f000 fec8 	bl	8002526 <HAL_I2C_Init>
 8001796:	4601      	mov	r1, r0
 8001798:	b108      	cbz	r0, 800179e <main+0x11a>
 800179a:	b672      	cpsid	i
  while (1) {
 800179c:	e7fe      	b.n	800179c <main+0x118>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179e:	4620      	mov	r0, r4
 80017a0:	f001 f85a 	bl	8002858 <HAL_I2CEx_ConfigAnalogFilter>
 80017a4:	4601      	mov	r1, r0
 80017a6:	b108      	cbz	r0, 80017ac <main+0x128>
 80017a8:	b672      	cpsid	i
  while (1) {
 80017aa:	e7fe      	b.n	80017aa <main+0x126>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017ac:	4620      	mov	r0, r4
 80017ae:	f001 f879 	bl	80028a4 <HAL_I2CEx_ConfigDigitalFilter>
 80017b2:	4606      	mov	r6, r0
 80017b4:	b1a0      	cbz	r0, 80017e0 <main+0x15c>
 80017b6:	b672      	cpsid	i
  while (1) {
 80017b8:	e7fe      	b.n	80017b8 <main+0x134>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800
 80017c4:	20000c30 	.word	0x20000c30
 80017c8:	40023000 	.word	0x40023000
 80017cc:	20000c54 	.word	0x20000c54
 80017d0:	40005400 	.word	0x40005400
 80017d4:	10909cec 	.word	0x10909cec
 80017d8:	20000ca8 	.word	0x20000ca8
 80017dc:	40005c00 	.word	0x40005c00
  MX_USART2_UART_Init();
 80017e0:	f7ff ff34 	bl	800164c <MX_USART2_UART_Init>
  rps_init();
 80017e4:	f7ff fc12 	bl	800100c <rps_init>
  amg8833_adaptor_init(&hi2c1);
 80017e8:	4628      	mov	r0, r5
 80017ea:	f7ff fc8d 	bl	8001108 <amg8833_adaptor_init>
  amg8833_set_moving_average(true);
 80017ee:	4638      	mov	r0, r7
 80017f0:	f7ff fca6 	bl	8001140 <amg8833_set_moving_average>
  lcd_init(&hi2c3);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff feb1 	bl	800155c <lcd_init>
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &cmd, 1);
 80017fa:	463a      	mov	r2, r7
 80017fc:	498f      	ldr	r1, [pc, #572]	; (8001a3c <main+0x3b8>)
 80017fe:	4890      	ldr	r0, [pc, #576]	; (8001a40 <main+0x3bc>)
    if (output_pixels) {
 8001800:	4f90      	ldr	r7, [pc, #576]	; (8001a44 <main+0x3c0>)
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &cmd, 1);
 8001802:	f002 fcdd 	bl	80041c0 <HAL_UART_Receive_IT>
    if (output_pixels) {
 8001806:	783b      	ldrb	r3, [r7, #0]
 8001808:	b163      	cbz	r3, 8001824 <main+0x1a0>
      amg8833_read_registors(AMG8833_T01L_ADDR, buffer,
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	4610      	mov	r0, r2
 800180e:	498e      	ldr	r1, [pc, #568]	; (8001a48 <main+0x3c4>)
 8001810:	f7ff fcc6 	bl	80011a0 <amg8833_read_registors>
      HAL_UART_Transmit(&huart2, buffer, AMG8833_PIXEL_DATA_LENGTH, 3000);
 8001814:	498c      	ldr	r1, [pc, #560]	; (8001a48 <main+0x3c4>)
 8001816:	488a      	ldr	r0, [pc, #552]	; (8001a40 <main+0x3bc>)
 8001818:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	f002 fb99 	bl	8003f54 <HAL_UART_Transmit>
      output_pixels = false;
 8001822:	703e      	strb	r6, [r7, #0]
    if (output_thermistor) {
 8001824:	4c89      	ldr	r4, [pc, #548]	; (8001a4c <main+0x3c8>)
 8001826:	7823      	ldrb	r3, [r4, #0]
 8001828:	b163      	cbz	r3, 8001844 <main+0x1c0>
      amg8833_read_registors(AMG8833_TTHL_ADDR, buffer, 2);
 800182a:	4987      	ldr	r1, [pc, #540]	; (8001a48 <main+0x3c4>)
 800182c:	2202      	movs	r2, #2
 800182e:	200e      	movs	r0, #14
 8001830:	f7ff fcb6 	bl	80011a0 <amg8833_read_registors>
      HAL_UART_Transmit(&huart2, buffer, 2, 3000);
 8001834:	4984      	ldr	r1, [pc, #528]	; (8001a48 <main+0x3c4>)
 8001836:	4882      	ldr	r0, [pc, #520]	; (8001a40 <main+0x3bc>)
 8001838:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800183c:	2202      	movs	r2, #2
 800183e:	f002 fb89 	bl	8003f54 <HAL_UART_Transmit>
      output_thermistor = false;
 8001842:	7026      	strb	r6, [r4, #0]
    ai_float in_data[WIDTH * HEIGHT] = { 0.0f };
 8001844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001848:	2100      	movs	r1, #0
 800184a:	a850      	add	r0, sp, #320	; 0x140
 800184c:	f005 feba 	bl	80075c4 <memset>
    uint8_t buffer[AMG8833_PIXEL_DATA_LENGTH] = { 0 };
 8001850:	227c      	movs	r2, #124	; 0x7c
 8001852:	2100      	movs	r1, #0
 8001854:	a831      	add	r0, sp, #196	; 0xc4
    ai_float out_data[AI_NETWORK_OUT_1_SIZE] = { 0.0 };
 8001856:	e9cd 6604 	strd	r6, r6, [sp, #16]
 800185a:	9606      	str	r6, [sp, #24]
    uint8_t buffer[AMG8833_PIXEL_DATA_LENGTH] = { 0 };
 800185c:	9630      	str	r6, [sp, #192]	; 0xc0
 800185e:	f005 feb1 	bl	80075c4 <memset>
    char start_msg[2][16] = { "/// ROCK - PAPER", "- SCISSORS  ///" };
 8001862:	4b7b      	ldr	r3, [pc, #492]	; (8001a50 <main+0x3cc>)
 8001864:	ac07      	add	r4, sp, #28
 8001866:	f103 0520 	add.w	r5, r3, #32
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	6859      	ldr	r1, [r3, #4]
 800186e:	4622      	mov	r2, r4
 8001870:	c203      	stmia	r2!, {r0, r1}
 8001872:	3308      	adds	r3, #8
 8001874:	42ab      	cmp	r3, r5
 8001876:	4614      	mov	r4, r2
 8001878:	d1f7      	bne.n	800186a <main+0x1e6>
    int game[3][3] = { { 0, 1, -1 }, { -1, 0, 1 }, { 1, -1, 0 } };
 800187a:	4d76      	ldr	r5, [pc, #472]	; (8001a54 <main+0x3d0>)
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 8001882:	4644      	mov	r4, r8
 8001884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188a:	4629      	mov	r1, r5
    char rock_paper_scissors[3][2][16] = { { "!!!!", "(  // ...PAPER" }, { ".ooo",
 800188c:	2260      	movs	r2, #96	; 0x60
 800188e:	eb0d 0002 	add.w	r0, sp, r2
    int game[3][3] = { { 0, 1, -1 }, { -1, 0, 1 }, { 1, -1, 0 } };
 8001892:	f851 3b04 	ldr.w	r3, [r1], #4
 8001896:	6023      	str	r3, [r4, #0]
    char rock_paper_scissors[3][2][16] = { { "!!!!", "(  // ...PAPER" }, { ".ooo",
 8001898:	f005 ff22 	bl	80076e0 <memcpy>
      lcd_clear();
 800189c:	f7ff fe8a 	bl	80015b4 <lcd_clear>
      lcd_string(start_msg[0], sizeof(start_msg[0]));
 80018a0:	2110      	movs	r1, #16
 80018a2:	a807      	add	r0, sp, #28
 80018a4:	f7ff fe8c 	bl	80015c0 <lcd_string>
      lcd_newline();
 80018a8:	f7ff fe87 	bl	80015ba <lcd_newline>
      lcd_string(start_msg[1], sizeof(start_msg[1]));
 80018ac:	2110      	movs	r1, #16
 80018ae:	a80b      	add	r0, sp, #44	; 0x2c
 80018b0:	f7ff fe86 	bl	80015c0 <lcd_string>
      HAL_Delay(2000);
 80018b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b8:	f000 fab8 	bl	8001e2c <HAL_Delay>
      lcd_clear();
 80018bc:	f7ff fe7a 	bl	80015b4 <lcd_clear>
      lcd_string(".", 1);
 80018c0:	2101      	movs	r1, #1
 80018c2:	4865      	ldr	r0, [pc, #404]	; (8001a58 <main+0x3d4>)
 80018c4:	f7ff fe7c 	bl	80015c0 <lcd_string>
      HAL_Delay(800);
 80018c8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018cc:	f000 faae 	bl	8001e2c <HAL_Delay>
      lcd_clear();
 80018d0:	f7ff fe70 	bl	80015b4 <lcd_clear>
      lcd_string("..", 2);
 80018d4:	2102      	movs	r1, #2
 80018d6:	4861      	ldr	r0, [pc, #388]	; (8001a5c <main+0x3d8>)
 80018d8:	f7ff fe72 	bl	80015c0 <lcd_string>
      HAL_Delay(800);
 80018dc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018e0:	f000 faa4 	bl	8001e2c <HAL_Delay>
      me = rand() % 3;
 80018e4:	f004 ffcc 	bl	8006880 <rand>
 80018e8:	2303      	movs	r3, #3
 80018ea:	fb90 f3f3 	sdiv	r3, r0, r3
 80018ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018f2:	1ac4      	subs	r4, r0, r3
      printf("\nme: %d\n", me);
 80018f4:	4621      	mov	r1, r4
 80018f6:	485a      	ldr	r0, [pc, #360]	; (8001a60 <main+0x3dc>)
 80018f8:	f005 fd16 	bl	8007328 <iprintf>
      printf("%s\n", rock_paper_scissors[me][0]);
 80018fc:	ab18      	add	r3, sp, #96	; 0x60
 80018fe:	eb03 1944 	add.w	r9, r3, r4, lsl #5
 8001902:	0165      	lsls	r5, r4, #5
 8001904:	4648      	mov	r0, r9
 8001906:	f005 fd7d 	bl	8007404 <puts>
      printf("%s\n", rock_paper_scissors[me][1]);
 800190a:	3510      	adds	r5, #16
 800190c:	ab18      	add	r3, sp, #96	; 0x60
 800190e:	441d      	add	r5, r3
 8001910:	4628      	mov	r0, r5
 8001912:	f005 fd77 	bl	8007404 <puts>
      lcd_clear();
 8001916:	f7ff fe4d 	bl	80015b4 <lcd_clear>
      lcd_string(rock_paper_scissors[me][0], sizeof(rock_paper_scissors[me][0]));
 800191a:	2110      	movs	r1, #16
 800191c:	4648      	mov	r0, r9
 800191e:	f7ff fe4f 	bl	80015c0 <lcd_string>
      lcd_newline();
 8001922:	f7ff fe4a 	bl	80015ba <lcd_newline>
      lcd_string(rock_paper_scissors[me][1], sizeof(rock_paper_scissors[me][1]));
 8001926:	2110      	movs	r1, #16
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff fe49 	bl	80015c0 <lcd_string>
      HAL_Delay(500);
 800192e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001932:	f000 fa7b 	bl	8001e2c <HAL_Delay>
      amg8833_read_registors(AMG8833_T01L_ADDR, buffer, AMG8833_PIXEL_DATA_LENGTH);
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	4610      	mov	r0, r2
 800193a:	a930      	add	r1, sp, #192	; 0xc0
 800193c:	f7ff fc30 	bl	80011a0 <amg8833_read_registors>
      for (int i = 0; i < WIDTH * HEIGHT; i++) {
 8001940:	aa30      	add	r2, sp, #192	; 0xc0
 8001942:	a850      	add	r0, sp, #320	; 0x140
 8001944:	2100      	movs	r1, #0
        in_data[i] = (ai_float) (buffer[i * 2 + 1] * 256 + buffer[i * 2]) * 0.25;
 8001946:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800194a:	7855      	ldrb	r5, [r2, #1]
 800194c:	f812 3b02 	ldrb.w	r3, [r2], #2
 8001950:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      for (int i = 0; i < WIDTH * HEIGHT; i++) {
 800195c:	3101      	adds	r1, #1
        in_data[i] = (ai_float) (buffer[i * 2 + 1] * 256 + buffer[i * 2]) * 0.25;
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
      for (int i = 0; i < WIDTH * HEIGHT; i++) {
 8001962:	2940      	cmp	r1, #64	; 0x40
        in_data[i] = (ai_float) (buffer[i * 2 + 1] * 256 + buffer[i * 2]) * 0.25;
 8001964:	ece0 7a01 	vstmia	r0!, {s15}
      for (int i = 0; i < WIDTH * HEIGHT; i++) {
 8001968:	d1ef      	bne.n	800194a <main+0x2c6>
      rps_infer(in_data, out_data);
 800196a:	a904      	add	r1, sp, #16
 800196c:	a850      	add	r0, sp, #320	; 0x140
 800196e:	f7ff fb8b 	bl	8001088 <rps_infer>
        if (out_data[you] <= out_data[i])
 8001972:	ed9d 7a05 	vldr	s14, [sp, #20]
 8001976:	eddd 7a04 	vldr	s15, [sp, #16]
      printf("\nME: %s\n", class_labels[me]);
 800197a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001a84 <main+0x400>
        if (out_data[you] <= out_data[i])
 800197e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	bfac      	ite	ge
 8001988:	2501      	movge	r5, #1
 800198a:	2500      	movlt	r5, #0
 800198c:	ab04      	add	r3, sp, #16
 800198e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	eddd 7a06 	vldr	s15, [sp, #24]
      for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 800199a:	eeb4 7a67 	vcmp.f32	s14, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      printf("\nME: %s\n", class_labels[me]);
 80019a2:	f04f 0a0c 	mov.w	sl, #12
      for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80019a6:	bf98      	it	ls
 80019a8:	2502      	movls	r5, #2
      printf("\nME: %s\n", class_labels[me]);
 80019aa:	fb0a 9b04 	mla	fp, sl, r4, r9
      HAL_Delay(1500);
 80019ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80019b2:	f000 fa3b 	bl	8001e2c <HAL_Delay>
      printf("YOU: %s\n", class_labels[you]);
 80019b6:	fb0a 9905 	mla	r9, sl, r5, r9
      lcd_clear();
 80019ba:	f7ff fdfb 	bl	80015b4 <lcd_clear>
      printf("\nME: %s\n", class_labels[me]);
 80019be:	4659      	mov	r1, fp
 80019c0:	4828      	ldr	r0, [pc, #160]	; (8001a64 <main+0x3e0>)
 80019c2:	f005 fcb1 	bl	8007328 <iprintf>
      printf("YOU: %s\n", class_labels[you]);
 80019c6:	4649      	mov	r1, r9
 80019c8:	4827      	ldr	r0, [pc, #156]	; (8001a68 <main+0x3e4>)
 80019ca:	f005 fcad 	bl	8007328 <iprintf>
      lcd_string("ME: ", 4);
 80019ce:	4827      	ldr	r0, [pc, #156]	; (8001a6c <main+0x3e8>)
 80019d0:	2104      	movs	r1, #4
 80019d2:	f7ff fdf5 	bl	80015c0 <lcd_string>
      lcd_string(class_labels[me], sizeof(class_labels[me]));
 80019d6:	4651      	mov	r1, sl
 80019d8:	4658      	mov	r0, fp
 80019da:	f7ff fdf1 	bl	80015c0 <lcd_string>
      switch (game[me][you]) {
 80019de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
      lcd_newline();
 80019e2:	f7ff fdea 	bl	80015ba <lcd_newline>
      lcd_string("YOU: ", 5);
 80019e6:	4822      	ldr	r0, [pc, #136]	; (8001a70 <main+0x3ec>)
 80019e8:	2105      	movs	r1, #5
 80019ea:	f7ff fde9 	bl	80015c0 <lcd_string>
      switch (game[me][you]) {
 80019ee:	442c      	add	r4, r5
      lcd_string(class_labels[you], sizeof(class_labels[you]));
 80019f0:	4651      	mov	r1, sl
 80019f2:	4648      	mov	r0, r9
 80019f4:	f7ff fde4 	bl	80015c0 <lcd_string>
      HAL_Delay(2000);
 80019f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019fc:	f000 fa16 	bl	8001e2c <HAL_Delay>
      lcd_clear();
 8001a00:	f7ff fdd8 	bl	80015b4 <lcd_clear>
      switch (game[me][you]) {
 8001a04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001a08:	b133      	cbz	r3, 8001a18 <main+0x394>
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d013      	beq.n	8001a36 <main+0x3b2>
 8001a0e:	3301      	adds	r3, #1
 8001a10:	d106      	bne.n	8001a20 <main+0x39c>
        lcd_string("*** YOU WIN! ***", 16);
 8001a12:	4818      	ldr	r0, [pc, #96]	; (8001a74 <main+0x3f0>)
 8001a14:	2110      	movs	r1, #16
 8001a16:	e001      	b.n	8001a1c <main+0x398>
        lcd_string("*** DRAW *******", 16);
 8001a18:	4817      	ldr	r0, [pc, #92]	; (8001a78 <main+0x3f4>)
 8001a1a:	2110      	movs	r1, #16
        lcd_string("*** YOU WIN! ***", 16);
 8001a1c:	f7ff fdd0 	bl	80015c0 <lcd_string>
      lcd_newline();
 8001a20:	f7ff fdcb 	bl	80015ba <lcd_newline>
      lcd_string("****************", 16);
 8001a24:	4815      	ldr	r0, [pc, #84]	; (8001a7c <main+0x3f8>)
 8001a26:	2110      	movs	r1, #16
 8001a28:	f7ff fdca 	bl	80015c0 <lcd_string>
      HAL_Delay(3000);
 8001a2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a30:	f000 f9fc 	bl	8001e2c <HAL_Delay>
  while (1) {
 8001a34:	e6e7      	b.n	8001806 <main+0x182>
        lcd_string("*** I WIN! *****", 16);
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <main+0x3fc>)
 8001a38:	2110      	movs	r1, #16
 8001a3a:	e7ef      	b.n	8001a1c <main+0x398>
 8001a3c:	20000c2c 	.word	0x20000c2c
 8001a40:	20000cfc 	.word	0x20000cfc
 8001a44:	20000d84 	.word	0x20000d84
 8001a48:	20000bac 	.word	0x20000bac
 8001a4c:	20000d85 	.word	0x20000d85
 8001a50:	08009728 	.word	0x08009728
 8001a54:	08009748 	.word	0x08009748
 8001a58:	08009895 	.word	0x08009895
 8001a5c:	08009894 	.word	0x08009894
 8001a60:	08009897 	.word	0x08009897
 8001a64:	080098a0 	.word	0x080098a0
 8001a68:	080098a9 	.word	0x080098a9
 8001a6c:	080098b2 	.word	0x080098b2
 8001a70:	080098b7 	.word	0x080098b7
 8001a74:	080098df 	.word	0x080098df
 8001a78:	080098bd 	.word	0x080098bd
 8001a7c:	080098f0 	.word	0x080098f0
 8001a80:	080098ce 	.word	0x080098ce
 8001a84:	20000000 	.word	0x20000000

08001a88 <_write>:
int _write(int file, char *ptr, int len) {
 8001a88:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, (uint16_t) len, 0xFFFFFFFF);
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 8001a8e:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, (uint16_t) len, 0xFFFFFFFF);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <_write+0x14>)
 8001a92:	b292      	uxth	r2, r2
 8001a94:	f002 fa5e 	bl	8003f54 <HAL_UART_Transmit>
}
 8001a98:	4620      	mov	r0, r4
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	20000cfc 	.word	0x20000cfc

08001aa0 <HAL_UART_RxCpltCallback>:
  switch (cmd) {
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_UART_RxCpltCallback+0x24>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d006      	beq.n	8001ab6 <HAL_UART_RxCpltCallback+0x16>
 8001aa8:	2b74      	cmp	r3, #116	; 0x74
 8001aaa:	d008      	beq.n	8001abe <HAL_UART_RxCpltCallback+0x1e>
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &cmd, 1);
 8001aac:	4905      	ldr	r1, [pc, #20]	; (8001ac4 <HAL_UART_RxCpltCallback+0x24>)
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <HAL_UART_RxCpltCallback+0x28>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f002 bb85 	b.w	80041c0 <HAL_UART_Receive_IT>
    output_pixels = true;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_UART_RxCpltCallback+0x2c>)
    output_thermistor = true;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    break;
 8001abc:	e7f6      	b.n	8001aac <HAL_UART_RxCpltCallback+0xc>
    output_thermistor = true;
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_UART_RxCpltCallback+0x30>)
 8001ac0:	e7fa      	b.n	8001ab8 <HAL_UART_RxCpltCallback+0x18>
 8001ac2:	bf00      	nop
 8001ac4:	20000c2c 	.word	0x20000c2c
 8001ac8:	20000cfc 	.word	0x20000cfc
 8001acc:	20000d84 	.word	0x20000d84
 8001ad0:	20000d85 	.word	0x20000d85

08001ad4 <Error_Handler>:
 8001ad4:	b672      	cpsid	i
  while (1) {
 8001ad6:	e7fe      	b.n	8001ad6 <Error_Handler+0x2>

08001ad8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_MspInit+0x2c>)
 8001ada:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	661a      	str	r2, [r3, #96]	; 0x60
 8001ae2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001ae4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	f002 0201 	and.w	r2, r2, #1
 8001aea:	9200      	str	r2, [sp, #0]
 8001aec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001af0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001af4:	659a      	str	r2, [r3, #88]	; 0x58
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b00:	b002      	add	sp, #8
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001b08:	6802      	ldr	r2, [r0, #0]
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_CRC_MspInit+0x24>)
 8001b0c:	429a      	cmp	r2, r3
{
 8001b0e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001b10:	d10a      	bne.n	8001b28 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b12:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b1c:	649a      	str	r2, [r3, #72]	; 0x48
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b28:	b002      	add	sp, #8
 8001b2a:	4770      	bx	lr
 8001b2c:	40023000 	.word	0x40023000

08001b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b30:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	2214      	movs	r2, #20
{
 8001b34:	b0ac      	sub	sp, #176	; 0xb0
 8001b36:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	2100      	movs	r1, #0
 8001b3a:	eb0d 0002 	add.w	r0, sp, r2
 8001b3e:	f005 fd41 	bl	80075c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b42:	2288      	movs	r2, #136	; 0x88
 8001b44:	2100      	movs	r1, #0
 8001b46:	a80a      	add	r0, sp, #40	; 0x28
 8001b48:	f005 fd3c 	bl	80075c4 <memset>
  if(hi2c->Instance==I2C1)
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <HAL_I2C_MspInit+0xd8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d12b      	bne.n	8001bac <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b54:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b56:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b58:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5a:	f001 fbe7 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	b108      	cbz	r0, 8001b64 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001b60:	f7ff ffb8 	bl	8001ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4c29      	ldr	r4, [pc, #164]	; (8001c0c <HAL_I2C_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	482a      	ldr	r0, [pc, #168]	; (8001c10 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001b70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b7e:	2312      	movs	r3, #18
 8001b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2100      	movs	r1, #0
 8001b86:	2303      	movs	r3, #3
 8001b88:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b90:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f000 fa6d 	bl	8002070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ba8:	b02c      	add	sp, #176	; 0xb0
 8001baa:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_I2C_MspInit+0xe4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d1fa      	bne.n	8001ba8 <HAL_I2C_MspInit+0x78>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001bb8:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bba:	f001 fbb7 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8001bbe:	b108      	cbz	r0, 8001bc4 <HAL_I2C_MspInit+0x94>
      Error_Handler();
 8001bc0:	f7ff ff88 	bl	8001ad4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	4c11      	ldr	r4, [pc, #68]	; (8001c0c <HAL_I2C_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	4814      	ldr	r0, [pc, #80]	; (8001c18 <HAL_I2C_MspInit+0xe8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001bd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bda:	2212      	movs	r2, #18
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e9cd 3205 	strd	r3, r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bea:	2304      	movs	r3, #4
 8001bec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f000 fa3f 	bl	8002070 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bf8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c00:	9304      	str	r3, [sp, #16]
 8001c02:	9b04      	ldr	r3, [sp, #16]
}
 8001c04:	e7d0      	b.n	8001ba8 <HAL_I2C_MspInit+0x78>
 8001c06:	bf00      	nop
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	40005c00 	.word	0x40005c00
 8001c18:	48000800 	.word	0x48000800

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b0ab      	sub	sp, #172	; 0xac
 8001c20:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	2214      	movs	r2, #20
 8001c24:	2100      	movs	r1, #0
 8001c26:	a803      	add	r0, sp, #12
 8001c28:	f005 fccc 	bl	80075c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c2c:	2288      	movs	r2, #136	; 0x88
 8001c2e:	2100      	movs	r1, #0
 8001c30:	a808      	add	r0, sp, #32
 8001c32:	f005 fcc7 	bl	80075c4 <memset>
  if(huart->Instance==USART2)
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d13d      	bne.n	8001cba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c3e:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c42:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f001 fb72 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8001c48:	b108      	cbz	r0, 8001c4e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001c4a:	f7ff ff43 	bl	8001ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_UART_MspInit+0xa8>)
 8001c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
 8001c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c5a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c5e:	9201      	str	r2, [sp, #4]
 8001c60:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	9302      	str	r3, [sp, #8]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2702      	movs	r7, #2
 8001c78:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7c:	2507      	movs	r5, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	a903      	add	r1, sp, #12
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f000 f9ef 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001c92:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f000 f9e3 	bl	8002070 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001caa:	2026      	movs	r0, #38	; 0x26
 8001cac:	4622      	mov	r2, r4
 8001cae:	4621      	mov	r1, r4
 8001cb0:	f000 f8e2 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb4:	2026      	movs	r0, #38	; 0x26
 8001cb6:	f000 f911 	bl	8001edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cba:	b02b      	add	sp, #172	; 0xac
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <NMI_Handler>

08001cca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler>

08001ccc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler>

08001cce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler>

08001cd0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler>

08001cd2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	4770      	bx	lr

08001cd4 <DebugMon_Handler>:
 8001cd4:	4770      	bx	lr

08001cd6 <PendSV_Handler>:
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 b896 	b.w	8001e08 <HAL_IncTick>

08001cdc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cdc:	4801      	ldr	r0, [pc, #4]	; (8001ce4 <USART2_IRQHandler+0x8>)
 8001cde:	f001 bd45 	b.w	800376c <HAL_UART_IRQHandler>
 8001ce2:	bf00      	nop
 8001ce4:	20000cfc 	.word	0x20000cfc

08001ce8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <_sbrk+0x30>)
 8001cea:	6811      	ldr	r1, [r2, #0]
{
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001cf0:	b909      	cbnz	r1, 8001cf6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <_sbrk+0x34>)
 8001cf4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	6810      	ldr	r0, [r2, #0]
 8001cf8:	4909      	ldr	r1, [pc, #36]	; (8001d20 <_sbrk+0x38>)
 8001cfa:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <_sbrk+0x3c>)
 8001cfc:	4403      	add	r3, r0
 8001cfe:	1b09      	subs	r1, r1, r4
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d906      	bls.n	8001d12 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d04:	f005 fcc0 	bl	8007688 <__errno>
 8001d08:	230c      	movs	r3, #12
 8001d0a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d10:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d12:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d14:	e7fc      	b.n	8001d10 <_sbrk+0x28>
 8001d16:	bf00      	nop
 8001d18:	20000d88 	.word	0x20000d88
 8001d1c:	20000f70 	.word	0x20000f70
 8001d20:	20018000 	.word	0x20018000
 8001d24:	00000800 	.word	0x00000800

08001d28 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <SystemInit+0x10>)
 8001d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d40:	f7ff fff2 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f005 fc93 	bl	8007694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7ff fc89 	bl	8001684 <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000938 	.word	0x20000938
  ldr r2, =_sidata
 8001d80:	0800ba60 	.word	0x0800ba60
  ldr r2, =_sbss
 8001d84:	20000938 	.word	0x20000938
  ldr r4, =_ebss
 8001d88:	20000f70 	.word	0x20000f70

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_InitTick+0x40>)
 8001d94:	781a      	ldrb	r2, [r3, #0]
{
 8001d96:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001d98:	b90a      	cbnz	r2, 8001d9e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d9a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_InitTick+0x44>)
 8001da8:	6810      	ldr	r0, [r2, #0]
 8001daa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dae:	f000 f8a3 	bl	8001ef8 <HAL_SYSTICK_Config>
 8001db2:	4604      	mov	r4, r0
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db8:	2d0f      	cmp	r5, #15
 8001dba:	d8ee      	bhi.n	8001d9a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 f858 	bl	8001e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_InitTick+0x48>)
 8001dca:	4620      	mov	r0, r4
 8001dcc:	601d      	str	r5, [r3, #0]
  return status;
 8001dce:	e7e5      	b.n	8001d9c <HAL_InitTick+0xc>
 8001dd0:	20000028 	.word	0x20000028
 8001dd4:	20000024 	.word	0x20000024
 8001dd8:	2000002c 	.word	0x2000002c

08001ddc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_Init+0x28>)
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001de4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	f000 f833 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffce 	bl	8001d90 <HAL_InitTick>
 8001df4:	4604      	mov	r4, r0
 8001df6:	b918      	cbnz	r0, 8001e00 <HAL_Init+0x24>
    HAL_MspInit();
 8001df8:	f7ff fe6e 	bl	8001ad8 <HAL_MspInit>
}
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001e00:	2401      	movs	r4, #1
 8001e02:	e7fb      	b.n	8001dfc <HAL_Init+0x20>
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x10>)
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_IncTick+0x14>)
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	440b      	add	r3, r1
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000d8c 	.word	0x20000d8c
 8001e1c:	20000028 	.word	0x20000028

08001e20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e20:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <HAL_GetTick+0x8>)
 8001e22:	6818      	ldr	r0, [r3, #0]
}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000d8c 	.word	0x20000d8c

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fff6 	bl	8001e20 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e34:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001e36:	bf1c      	itt	ne
 8001e38:	4b05      	ldrne	r3, [pc, #20]	; (8001e50 <HAL_Delay+0x24>)
 8001e3a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001e3e:	bf18      	it	ne
 8001e40:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	f7ff ffed 	bl	8001e20 <HAL_GetTick>
 8001e46:	1b43      	subs	r3, r0, r5
 8001e48:	42a3      	cmp	r3, r4
 8001e4a:	d3fa      	bcc.n	8001e42 <HAL_Delay+0x16>
  {
  }
}
 8001e4c:	bd38      	pop	{r3, r4, r5, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000028 	.word	0x20000028

08001e54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e56:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e64:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e70:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7a:	b530      	push	{r4, r5, lr}
 8001e7c:	68dc      	ldr	r4, [r3, #12]
 8001e7e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e82:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	bf28      	it	cs
 8001e8c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e94:	bf8c      	ite	hi
 8001e96:	3c03      	subhi	r4, #3
 8001e98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9a:	fa05 f303 	lsl.w	r3, r5, r3
 8001e9e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea2:	40a5      	lsls	r5, r4
 8001ea4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	bfac      	ite	ge
 8001eb2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	4a08      	ldrlt	r2, [pc, #32]	; (8001ed8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	bfb8      	it	lt
 8001ebe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	bfaa      	itet	ge
 8001ec6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ed0:	bd30      	pop	{r4, r5, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	e000ed14 	.word	0xe000ed14

08001edc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001edc:	2800      	cmp	r0, #0
 8001ede:	db07      	blt.n	8001ef0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_NVIC_EnableIRQ+0x18>)
 8001ee2:	0941      	lsrs	r1, r0, #5
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f000 001f 	and.w	r0, r0, #31
 8001eea:	4083      	lsls	r3, r0
 8001eec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	3801      	subs	r0, #1
 8001efa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001efe:	d20b      	bcs.n	8001f18 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	21f0      	movs	r1, #240	; 0xf0
 8001f0a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f10:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f12:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f14:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f18:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f20:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f22:	4604      	mov	r4, r0
 8001f24:	b908      	cbnz	r0, 8001f2a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001f26:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001f28:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f2a:	7f43      	ldrb	r3, [r0, #29]
 8001f2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f30:	b913      	cbnz	r3, 8001f38 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001f32:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001f34:	f7ff fde8 	bl	8001b08 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f3c:	7923      	ldrb	r3, [r4, #4]
 8001f3e:	b9e3      	cbnz	r3, 8001f7a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <HAL_CRC_Init+0x70>)
 8001f44:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	f022 0218 	bic.w	r2, r2, #24
 8001f4c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f4e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f50:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f52:	b9d2      	cbnz	r2, 8001f8a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f58:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	6961      	ldr	r1, [r4, #20]
 8001f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	69a1      	ldr	r1, [r4, #24]
 8001f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001f72:	2301      	movs	r3, #1
 8001f74:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7d6      	b.n	8001f28 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f7a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f000 f808 	bl	8001f94 <HAL_CRCEx_Polynomial_Set>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d0e2      	beq.n	8001f4e <HAL_CRC_Init+0x2e>
 8001f88:	e7cd      	b.n	8001f26 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f8a:	6922      	ldr	r2, [r4, #16]
 8001f8c:	e7e4      	b.n	8001f58 <HAL_CRC_Init+0x38>
 8001f8e:	bf00      	nop
 8001f90:	04c11db7 	.word	0x04c11db7

08001f94 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001f94:	07cb      	lsls	r3, r1, #31
{
 8001f96:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001f98:	d50c      	bpl.n	8001fb4 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f9a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	d31c      	bcc.n	8001fda <HAL_CRCEx_Polynomial_Set+0x46>
 8001fa0:	fa21 f403 	lsr.w	r4, r1, r3
 8001fa4:	07e4      	lsls	r4, r4, #31
 8001fa6:	d5f9      	bpl.n	8001f9c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8001fa8:	2a10      	cmp	r2, #16
 8001faa:	d012      	beq.n	8001fd2 <HAL_CRCEx_Polynomial_Set+0x3e>
 8001fac:	d804      	bhi.n	8001fb8 <HAL_CRCEx_Polynomial_Set+0x24>
 8001fae:	b13a      	cbz	r2, 8001fc0 <HAL_CRCEx_Polynomial_Set+0x2c>
 8001fb0:	2a08      	cmp	r2, #8
 8001fb2:	d010      	beq.n	8001fd6 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001fb6:	e00b      	b.n	8001fd0 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8001fb8:	2a18      	cmp	r2, #24
 8001fba:	d1fb      	bne.n	8001fb4 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8001fbc:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8001fbe:	d8f9      	bhi.n	8001fb4 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001fc0:	6800      	ldr	r0, [r0, #0]
 8001fc2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001fc4:	6883      	ldr	r3, [r0, #8]
 8001fc6:	f023 0318 	bic.w	r3, r3, #24
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	6083      	str	r3, [r0, #8]
 8001fce:	2000      	movs	r0, #0
}
 8001fd0:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8001fd2:	2b07      	cmp	r3, #7
 8001fd4:	e7f3      	b.n	8001fbe <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	e7f1      	b.n	8001fbe <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d1ea      	bne.n	8001fb4 <HAL_CRCEx_Polynomial_Set+0x20>
 8001fde:	e7ef      	b.n	8001fc0 <HAL_CRCEx_Polynomial_Set+0x2c>

08001fe0 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fe0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001fe4:	2a02      	cmp	r2, #2
{
 8001fe6:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fe8:	d006      	beq.n	8001ff8 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	2204      	movs	r2, #4
 8001fec:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8001ff6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff8:	6802      	ldr	r2, [r0, #0]
 8001ffa:	6811      	ldr	r1, [r2, #0]
 8001ffc:	f021 010e 	bic.w	r1, r1, #14
 8002000:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002002:	6811      	ldr	r1, [r2, #0]
 8002004:	f021 0101 	bic.w	r1, r1, #1
 8002008:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800200a:	e9d0 0210 	ldrd	r0, r2, [r0, #64]	; 0x40
 800200e:	2101      	movs	r1, #1
 8002010:	f002 021c 	and.w	r2, r2, #28
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	6042      	str	r2, [r0, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800201a:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    return status;
 800201e:	2000      	movs	r0, #0
 8002020:	e7e6      	b.n	8001ff0 <HAL_DMA_Abort+0x10>

08002022 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002022:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002024:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002028:	2a02      	cmp	r2, #2
 800202a:	d003      	beq.n	8002034 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202c:	2204      	movs	r2, #4
 800202e:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8002030:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002032:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002034:	6802      	ldr	r2, [r0, #0]
    if (hdma->XferAbortCallback != NULL)
 8002036:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002038:	6811      	ldr	r1, [r2, #0]
 800203a:	f021 010e 	bic.w	r1, r1, #14
 800203e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	f021 0101 	bic.w	r1, r1, #1
 8002046:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002048:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 800204c:	2101      	movs	r1, #1
 800204e:	f002 021c 	and.w	r2, r2, #28
 8002052:	fa01 f202 	lsl.w	r2, r1, r2
 8002056:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002058:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800205a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800205e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002062:	b113      	cbz	r3, 800206a <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8002064:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	4620      	mov	r0, r4
 8002068:	e7e3      	b.n	8002032 <HAL_DMA_Abort_IT+0x10>
 800206a:	4618      	mov	r0, r3
 800206c:	e7e1      	b.n	8002032 <HAL_DMA_Abort_IT+0x10>
	...

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002074:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002228 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002078:	4c69      	ldr	r4, [pc, #420]	; (8002220 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800207a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	680a      	ldr	r2, [r1, #0]
 800207e:	fa32 f503 	lsrs.w	r5, r2, r3
 8002082:	d102      	bne.n	800208a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002084:	b003      	add	sp, #12
 8002086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800208a:	f04f 0e01 	mov.w	lr, #1
 800208e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002092:	ea1e 0202 	ands.w	r2, lr, r2
 8002096:	f000 8090 	beq.w	80021ba <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209a:	684d      	ldr	r5, [r1, #4]
 800209c:	f005 0603 	and.w	r6, r5, #3
 80020a0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a4:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a8:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020aa:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ae:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020b0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b4:	f200 8083 	bhi.w	80021be <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 80020b8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ba:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020be:	68cf      	ldr	r7, [r1, #12]
 80020c0:	fa07 f708 	lsl.w	r7, r7, r8
 80020c4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80020c8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80020ca:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020cc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80020d4:	409f      	lsls	r7, r3
 80020d6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80020da:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80020dc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020de:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e2:	688f      	ldr	r7, [r1, #8]
 80020e4:	fa07 f708 	lsl.w	r7, r7, r8
 80020e8:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ec:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80020ee:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	d071      	beq.n	80021d6 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 80020f2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f4:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020f8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fc:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020fe:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002102:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002104:	d059      	beq.n	80021ba <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800210a:	f046 0601 	orr.w	r6, r6, #1
 800210e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8002112:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002116:	f023 0703 	bic.w	r7, r3, #3
 800211a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800211e:	f006 0601 	and.w	r6, r6, #1
 8002122:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002126:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002128:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800212e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002130:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002134:	f04f 0c0f 	mov.w	ip, #15
 8002138:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800213c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002140:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002144:	d05f      	beq.n	8002206 <HAL_GPIO_Init+0x196>
 8002146:	4e37      	ldr	r6, [pc, #220]	; (8002224 <HAL_GPIO_Init+0x1b4>)
 8002148:	42b0      	cmp	r0, r6
 800214a:	d05e      	beq.n	800220a <HAL_GPIO_Init+0x19a>
 800214c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002150:	42b0      	cmp	r0, r6
 8002152:	d05c      	beq.n	800220e <HAL_GPIO_Init+0x19e>
 8002154:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002158:	42b0      	cmp	r0, r6
 800215a:	d05a      	beq.n	8002212 <HAL_GPIO_Init+0x1a2>
 800215c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002160:	42b0      	cmp	r0, r6
 8002162:	d058      	beq.n	8002216 <HAL_GPIO_Init+0x1a6>
 8002164:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002168:	42b0      	cmp	r0, r6
 800216a:	d056      	beq.n	800221a <HAL_GPIO_Init+0x1aa>
 800216c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002170:	42b0      	cmp	r0, r6
 8002172:	bf0c      	ite	eq
 8002174:	2606      	moveq	r6, #6
 8002176:	2607      	movne	r6, #7
 8002178:	fa06 f60e 	lsl.w	r6, r6, lr
 800217c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002180:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8002182:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8002184:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002186:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800218a:	bf0c      	ite	eq
 800218c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800218e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002190:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8002192:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002194:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002198:	bf0c      	ite	eq
 800219a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800219c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800219e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 80021a0:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 80021a6:	bf0c      	ite	eq
 80021a8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80021aa:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 80021ac:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 80021ae:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b0:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 80021b2:	bf54      	ite	pl
 80021b4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80021b6:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 80021b8:	6026      	str	r6, [r4, #0]
    position++;
 80021ba:	3301      	adds	r3, #1
 80021bc:	e75e      	b.n	800207c <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021be:	2e03      	cmp	r6, #3
 80021c0:	d18c      	bne.n	80020dc <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 80021c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021c4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021c8:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 80021cc:	409f      	lsls	r7, r3
 80021ce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 80021d2:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	e78d      	b.n	80020f2 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 80021d6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80021da:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021de:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80021e2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80021ea:	f04f 0e0f 	mov.w	lr, #15
 80021ee:	fa0e fe0b 	lsl.w	lr, lr, fp
 80021f2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f6:	690f      	ldr	r7, [r1, #16]
 80021f8:	fa07 f70b 	lsl.w	r7, r7, fp
 80021fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002200:	f8ca 7020 	str.w	r7, [sl, #32]
 8002204:	e775      	b.n	80020f2 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002206:	2600      	movs	r6, #0
 8002208:	e7b6      	b.n	8002178 <HAL_GPIO_Init+0x108>
 800220a:	2601      	movs	r6, #1
 800220c:	e7b4      	b.n	8002178 <HAL_GPIO_Init+0x108>
 800220e:	2602      	movs	r6, #2
 8002210:	e7b2      	b.n	8002178 <HAL_GPIO_Init+0x108>
 8002212:	2603      	movs	r6, #3
 8002214:	e7b0      	b.n	8002178 <HAL_GPIO_Init+0x108>
 8002216:	2604      	movs	r6, #4
 8002218:	e7ae      	b.n	8002178 <HAL_GPIO_Init+0x108>
 800221a:	2605      	movs	r6, #5
 800221c:	e7ac      	b.n	8002178 <HAL_GPIO_Init+0x108>
 800221e:	bf00      	nop
 8002220:	40010400 	.word	0x40010400
 8002224:	48000400 	.word	0x48000400
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	b10a      	cbz	r2, 8002232 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222e:	6181      	str	r1, [r0, #24]
 8002230:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002232:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002234:	4770      	bx	lr

08002236 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800223c:	bf44      	itt	mi
 800223e:	2200      	movmi	r2, #0
 8002240:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002246:	bf5e      	ittt	pl
 8002248:	699a      	ldrpl	r2, [r3, #24]
 800224a:	f042 0201 	orrpl.w	r2, r2, #1
 800224e:	619a      	strpl	r2, [r3, #24]
  }
}
 8002250:	4770      	bx	lr
	...

08002254 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002254:	b530      	push	{r4, r5, lr}
 8002256:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002258:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800225a:	432b      	orrs	r3, r5
 800225c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <I2C_TransferConfig+0x28>)
 8002262:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002264:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002268:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800226a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800226e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002272:	ea20 0002 	bic.w	r0, r0, r2
 8002276:	4303      	orrs	r3, r0
 8002278:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800227a:	bd30      	pop	{r4, r5, pc}
 800227c:	03ff63ff 	.word	0x03ff63ff

08002280 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8002280:	6803      	ldr	r3, [r0, #0]
{
 8002282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8002286:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002288:	f014 0410 	ands.w	r4, r4, #16
{
 800228c:	4605      	mov	r5, r0
 800228e:	460f      	mov	r7, r1
 8002290:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002292:	d06f      	beq.n	8002374 <I2C_IsErrorOccurred+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002294:	2210      	movs	r2, #16
  uint32_t error_code = 0;
 8002296:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002298:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	46a0      	mov	r8, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	0690      	lsls	r0, r2, #26
 80022a2:	d461      	bmi.n	8002368 <I2C_IsErrorOccurred+0xe8>
 80022a4:	f1b8 0f00 	cmp.w	r8, #0
 80022a8:	d035      	beq.n	8002316 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80022aa:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80022ae:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80022b0:	682e      	ldr	r6, [r5, #0]
 80022b2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022b4:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022b6:	bf41      	itttt	mi
 80022b8:	f44f 7280 	movmi.w	r2, #256	; 0x100
 80022bc:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80022be:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 80022c2:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022c4:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022c6:	bf41      	itttt	mi
 80022c8:	f44f 6280 	movmi.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80022cc:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d0:	61f2      	strmi	r2, [r6, #28]
    status = HAL_ERROR;
 80022d2:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022d4:	059b      	lsls	r3, r3, #22
 80022d6:	d54f      	bpl.n	8002378 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80022dc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022e0:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7ff ffa7 	bl	8002236 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80022e8:	6873      	ldr	r3, [r6, #4]
 80022ea:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80022ee:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80022f2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80022fc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80022fe:	4323      	orrs	r3, r4
 8002300:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	2320      	movs	r3, #32
 8002304:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800230e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8002312:	2001      	movs	r0, #1
 8002314:	e032      	b.n	800237c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8002316:	1c7a      	adds	r2, r7, #1
 8002318:	d0c1      	beq.n	800229e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7ff fd81 	bl	8001e20 <HAL_GetTick>
 800231e:	1b80      	subs	r0, r0, r6
 8002320:	42b8      	cmp	r0, r7
 8002322:	d801      	bhi.n	8002328 <I2C_IsErrorOccurred+0xa8>
 8002324:	2f00      	cmp	r7, #0
 8002326:	d1b9      	bne.n	800229c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800232c:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002330:	6998      	ldr	r0, [r3, #24]
 8002332:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8002334:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002336:	d50a      	bpl.n	800234e <I2C_IsErrorOccurred+0xce>
 8002338:	0449      	lsls	r1, r1, #17
 800233a:	d408      	bmi.n	800234e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800233c:	2a20      	cmp	r2, #32
 800233e:	d006      	beq.n	800234e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002346:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002348:	f7ff fd6a 	bl	8001e20 <HAL_GetTick>
 800234c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234e:	682b      	ldr	r3, [r5, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	d4a2      	bmi.n	800229c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002356:	f7ff fd63 	bl	8001e20 <HAL_GetTick>
 800235a:	1b80      	subs	r0, r0, r6
 800235c:	2819      	cmp	r0, #25
 800235e:	d9f6      	bls.n	800234e <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8002362:	f04f 0801 	mov.w	r8, #1
 8002366:	e799      	b.n	800229c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8002368:	f1b8 0f00 	cmp.w	r8, #0
 800236c:	d19d      	bne.n	80022aa <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	2220      	movs	r2, #32
 8002370:	61da      	str	r2, [r3, #28]
 8002372:	e79a      	b.n	80022aa <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	4620      	mov	r0, r4
 8002376:	e79b      	b.n	80022b0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8002378:	2800      	cmp	r0, #0
 800237a:	d1b2      	bne.n	80022e2 <I2C_IsErrorOccurred+0x62>
}
 800237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002380 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4604      	mov	r4, r0
 8002384:	460d      	mov	r5, r1
 8002386:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	079b      	lsls	r3, r3, #30
 800238e:	d501      	bpl.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002390:	2000      	movs	r0, #0
}
 8002392:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002394:	4632      	mov	r2, r6
 8002396:	4629      	mov	r1, r5
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff ff71 	bl	8002280 <I2C_IsErrorOccurred>
 800239e:	b9c0      	cbnz	r0, 80023d2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80023a0:	1c6a      	adds	r2, r5, #1
 80023a2:	d0f1      	beq.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a4:	f7ff fd3c 	bl	8001e20 <HAL_GetTick>
 80023a8:	1b80      	subs	r0, r0, r6
 80023aa:	42a8      	cmp	r0, r5
 80023ac:	d801      	bhi.n	80023b2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80023ae:	2d00      	cmp	r5, #0
 80023b0:	d1ea      	bne.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f013 0302 	ands.w	r3, r3, #2
 80023ba:	d1e5      	bne.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80023be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	2220      	movs	r2, #32
 80023ca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80023d2:	2001      	movs	r0, #1
 80023d4:	e7dd      	b.n	8002392 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080023d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80023d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023da:	9f06      	ldr	r7, [sp, #24]
 80023dc:	4604      	mov	r4, r0
 80023de:	4688      	mov	r8, r1
 80023e0:	4616      	mov	r6, r2
 80023e2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	6993      	ldr	r3, [r2, #24]
 80023e8:	ea38 0303 	bics.w	r3, r8, r3
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	42b3      	cmp	r3, r6
 80023f4:	d001      	beq.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
 80023f8:	e01e      	b.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80023fa:	1c6b      	adds	r3, r5, #1
 80023fc:	d0f3      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7ff fd0f 	bl	8001e20 <HAL_GetTick>
 8002402:	1bc0      	subs	r0, r0, r7
 8002404:	42a8      	cmp	r0, r5
 8002406:	d801      	bhi.n	800240c <I2C_WaitOnFlagUntilTimeout+0x36>
 8002408:	2d00      	cmp	r5, #0
 800240a:	d1eb      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	ea38 0303 	bics.w	r3, r8, r3
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	42b3      	cmp	r3, r6
 800241c:	d1e2      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800241e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002420:	f043 0320 	orr.w	r3, r3, #32
 8002424:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002426:	2320      	movs	r3, #32
 8002428:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002432:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
}
 8002438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800243c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	069b      	lsls	r3, r3, #26
 800244a:	d501      	bpl.n	8002450 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800244c:	2000      	movs	r0, #0
}
 800244e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002450:	4632      	mov	r2, r6
 8002452:	4629      	mov	r1, r5
 8002454:	4620      	mov	r0, r4
 8002456:	f7ff ff13 	bl	8002280 <I2C_IsErrorOccurred>
 800245a:	b9b0      	cbnz	r0, 800248a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7ff fce0 	bl	8001e20 <HAL_GetTick>
 8002460:	1b80      	subs	r0, r0, r6
 8002462:	42a8      	cmp	r0, r5
 8002464:	d801      	bhi.n	800246a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002466:	2d00      	cmp	r5, #0
 8002468:	d1ec      	bne.n	8002444 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f013 0320 	ands.w	r3, r3, #32
 8002472:	d1e7      	bne.n	8002444 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002476:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002480:	2220      	movs	r2, #32
 8002482:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800248a:	2001      	movs	r0, #1
 800248c:	e7df      	b.n	800244e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800248e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800248e:	b570      	push	{r4, r5, r6, lr}
 8002490:	4604      	mov	r4, r0
 8002492:	460d      	mov	r5, r1
 8002494:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	075b      	lsls	r3, r3, #29
 800249c:	d40e      	bmi.n	80024bc <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	4632      	mov	r2, r6
 80024a0:	4629      	mov	r1, r5
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff feec 	bl	8002280 <I2C_IsErrorOccurred>
 80024a8:	bb38      	cbnz	r0, 80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	0691      	lsls	r1, r2, #26
 80024b0:	d525      	bpl.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	0752      	lsls	r2, r2, #29
 80024b6:	d503      	bpl.n	80024c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80024b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80024ba:	b10a      	cbz	r2, 80024c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80024bc:	2000      	movs	r0, #0
}
 80024be:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c6:	bf1c      	itt	ne
 80024c8:	2210      	movne	r2, #16
 80024ca:	61da      	strne	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024cc:	f04f 0120 	mov.w	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024d0:	bf18      	it	ne
 80024d2:	2204      	movne	r2, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d6:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80024de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80024e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80024f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
 80024fc:	e7df      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7ff fc8f 	bl	8001e20 <HAL_GetTick>
 8002502:	1b80      	subs	r0, r0, r6
 8002504:	42a8      	cmp	r0, r5
 8002506:	d801      	bhi.n	800250c <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 8002508:	2d00      	cmp	r5, #0
 800250a:	d1c4      	bne.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f013 0304 	ands.w	r3, r3, #4
 8002514:	d1bf      	bne.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002516:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800251e:	2220      	movs	r2, #32
 8002520:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8002524:	e7e7      	b.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>

08002526 <HAL_I2C_Init>:
{
 8002526:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002528:	4604      	mov	r4, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d04e      	beq.n	80025cc <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002532:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002536:	b91b      	cbnz	r3, 8002540 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002538:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800253c:	f7ff faf8 	bl	8001b30 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	2324      	movs	r3, #36	; 0x24
 8002542:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002550:	6862      	ldr	r2, [r4, #4]
 8002552:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002556:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002560:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002564:	2901      	cmp	r1, #1
 8002566:	d106      	bne.n	8002576 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256c:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002574:	e007      	b.n	8002586 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002576:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800257a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800257c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800257e:	d1f6      	bne.n	800256e <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002586:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800258e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002592:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800259c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80025a0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025a2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025a8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025aa:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ba:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025be:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80025ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e7fc      	b.n	80025ca <HAL_I2C_Init+0xa4>

080025d0 <HAL_I2C_Master_Transmit>:
{
 80025d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80025d4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80025da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025dc:	2b20      	cmp	r3, #32
{
 80025de:	4604      	mov	r4, r0
 80025e0:	460e      	mov	r6, r1
 80025e2:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e4:	f040 809b 	bne.w	800271e <HAL_I2C_Master_Transmit+0x14e>
    __HAL_LOCK(hi2c);
 80025e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f000 8096 	beq.w	800271e <HAL_I2C_Master_Transmit+0x14e>
 80025f2:	f04f 0a01 	mov.w	sl, #1
 80025f6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80025fa:	f7ff fc11 	bl	8001e20 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025fe:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002600:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	4652      	mov	r2, sl
 8002606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff fee3 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 8002610:	b118      	cbz	r0, 800261a <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
}
 8002614:	b002      	add	sp, #8
 8002616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800261a:	2321      	movs	r3, #33	; 0x21
 800261c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002620:	2310      	movs	r3, #16
 8002622:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002626:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002628:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800262e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002632:	b29b      	uxth	r3, r3
 8002634:	2bff      	cmp	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8002636:	bf98      	it	ls
 8002638:	8d62      	ldrhls	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800263a:	6360      	str	r0, [r4, #52]	; 0x34
      hi2c->XferSize = hi2c->XferCount;
 800263c:	bf95      	itete	ls
 800263e:	b292      	uxthls	r2, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002640:	22ff      	movhi	r2, #255	; 0xff
      xfermode = I2C_AUTOEND_MODE;
 8002642:	f04f 7300 	movls.w	r3, #33554432	; 0x2000000
      xfermode = I2C_RELOAD_MODE;
 8002646:	f04f 7380 	movhi.w	r3, #16777216	; 0x1000000
 800264a:	8522      	strh	r2, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 800264c:	b192      	cbz	r2, 8002674 <HAL_I2C_Master_Transmit+0xa4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800264e:	46c4      	mov	ip, r8
 8002650:	6821      	ldr	r1, [r4, #0]
 8002652:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8002656:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8002658:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800265a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800265e:	3901      	subs	r1, #1
 8002660:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8002662:	3a01      	subs	r2, #1
 8002664:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002666:	8561      	strh	r1, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002668:	492e      	ldr	r1, [pc, #184]	; (8002724 <HAL_I2C_Master_Transmit+0x154>)
      hi2c->XferSize--;
 800266a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800266c:	9100      	str	r1, [sp, #0]
 800266e:	3201      	adds	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	e001      	b.n	8002678 <HAL_I2C_Master_Transmit+0xa8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002674:	492b      	ldr	r1, [pc, #172]	; (8002724 <HAL_I2C_Master_Transmit+0x154>)
 8002676:	9100      	str	r1, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002678:	4631      	mov	r1, r6
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff fdea 	bl	8002254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002680:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	462a      	mov	r2, r5
 8002686:	4639      	mov	r1, r7
 8002688:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800268a:	b9bb      	cbnz	r3, 80026bc <HAL_I2C_Master_Transmit+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	f7ff fed6 	bl	800243c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	2800      	cmp	r0, #0
 8002692:	d1be      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	2120      	movs	r1, #32
 8002698:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80026a0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80026a4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80026b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80026ba:	e7ab      	b.n	8002614 <HAL_I2C_Master_Transmit+0x44>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	f7ff fe60 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d1a6      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80026cc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026ce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026dc:	3a01      	subs	r2, #1
 80026de:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80026e2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0cb      	beq.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d1c9      	bne.n	8002680 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ec:	9500      	str	r5, [sp, #0]
 80026ee:	463b      	mov	r3, r7
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff fe6f 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d18a      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2bff      	cmp	r3, #255	; 0xff
 8002702:	d905      	bls.n	8002710 <HAL_I2C_Master_Transmit+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002704:	22ff      	movs	r2, #255	; 0xff
 8002706:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002708:	9000      	str	r0, [sp, #0]
 800270a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270e:	e7b3      	b.n	8002678 <HAL_I2C_Master_Transmit+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8002710:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002712:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002714:	b292      	uxth	r2, r2
 8002716:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271c:	e7a8      	b.n	8002670 <HAL_I2C_Master_Transmit+0xa0>
    return HAL_BUSY;
 800271e:	2002      	movs	r0, #2
 8002720:	e778      	b.n	8002614 <HAL_I2C_Master_Transmit+0x44>
 8002722:	bf00      	nop
 8002724:	80002000 	.word	0x80002000

08002728 <HAL_I2C_Master_Receive>:
{
 8002728:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800272c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800272e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002732:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002734:	2b20      	cmp	r3, #32
{
 8002736:	4604      	mov	r4, r0
 8002738:	460e      	mov	r6, r1
 800273a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800273c:	f040 8087 	bne.w	800284e <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8002740:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002744:	2b01      	cmp	r3, #1
 8002746:	f000 8082 	beq.w	800284e <HAL_I2C_Master_Receive+0x126>
 800274a:	f04f 0a01 	mov.w	sl, #1
 800274e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002752:	f7ff fb65 	bl	8001e20 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002756:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002758:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800275a:	9000      	str	r0, [sp, #0]
 800275c:	4652      	mov	r2, sl
 800275e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fe37 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 8002768:	b118      	cbz	r0, 8002772 <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
}
 800276c:	b002      	add	sp, #8
 800276e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002772:	2322      	movs	r3, #34	; 0x22
 8002774:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002778:	2310      	movs	r3, #16
 800277a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002780:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002786:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800278a:	b29b      	uxth	r3, r3
 800278c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800278e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_I2C_Master_Receive+0x12c>)
 8002792:	d926      	bls.n	80027e2 <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002798:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800279a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279e:	4631      	mov	r1, r6
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fd57 	bl	8002254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	462a      	mov	r2, r5
 80027ac:	4639      	mov	r1, r7
 80027ae:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80027b0:	b9fb      	cbnz	r3, 80027f2 <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	f7ff fe43 	bl	800243c <I2C_WaitOnSTOPFlagUntilTimeout>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d1d7      	bne.n	800276a <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	2120      	movs	r1, #32
 80027be:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80027c6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80027ca:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80027d8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027dc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80027e0:	e7c4      	b.n	800276c <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80027e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80027e6:	b292      	uxth	r2, r2
 80027e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	e7d5      	b.n	800279e <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f2:	f7ff fe4c 	bl	800248e <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d1b7      	bne.n	800276a <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002800:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002802:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002804:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002806:	3301      	adds	r3, #1
 8002808:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800280a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800280c:	3b01      	subs	r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002812:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002814:	3a01      	subs	r2, #1
 8002816:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002818:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800281a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0c2      	beq.n	80027a6 <HAL_I2C_Master_Receive+0x7e>
 8002820:	2a00      	cmp	r2, #0
 8002822:	d1c0      	bne.n	80027a6 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002824:	9500      	str	r5, [sp, #0]
 8002826:	463b      	mov	r3, r7
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fdd3 	bl	80023d6 <I2C_WaitOnFlagUntilTimeout>
 8002830:	2800      	cmp	r0, #0
 8002832:	d19a      	bne.n	800276a <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002834:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d903      	bls.n	8002844 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002840:	9000      	str	r0, [sp, #0]
 8002842:	e7aa      	b.n	800279a <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8002844:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002846:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002848:	b292      	uxth	r2, r2
 800284a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800284c:	e7cd      	b.n	80027ea <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 800284e:	2002      	movs	r0, #2
 8002850:	e78c      	b.n	800276c <HAL_I2C_Master_Receive+0x44>
 8002852:	bf00      	nop
 8002854:	80002400 	.word	0x80002400

08002858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002858:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800285e:	2b20      	cmp	r3, #32
 8002860:	b2dc      	uxtb	r4, r3
 8002862:	d11d      	bne.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002864:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d019      	beq.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	2324      	movs	r3, #36	; 0x24
 800286e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002872:	6803      	ldr	r3, [r0, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4311      	orrs	r1, r2
 8002888:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002894:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002898:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800289c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800289e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80028a0:	2002      	movs	r0, #2
 80028a2:	e7fc      	b.n	800289e <HAL_I2CEx_ConfigAnalogFilter+0x46>

080028a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	b2dc      	uxtb	r4, r3
 80028ae:	d11c      	bne.n	80028ea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d018      	beq.n	80028ea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	2324      	movs	r3, #36	; 0x24
 80028ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028be:	6803      	ldr	r3, [r0, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028c8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028ca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028d2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028dc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028de:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80028e6:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028e8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80028ea:	2002      	movs	r0, #2
 80028ec:	e7fc      	b.n	80028e8 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080028f0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028f0:	4b02      	ldr	r3, [pc, #8]	; (80028fc <HAL_PWREx_GetVoltageRange+0xc>)
 80028f2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80028f4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002902:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002904:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800290c:	d11d      	bne.n	800294a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800290e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002912:	d101      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002914:	2000      	movs	r0, #0
 8002916:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002918:	6813      	ldr	r3, [r2, #0]
 800291a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2132      	movs	r1, #50	; 0x32
 800292a:	434b      	muls	r3, r1
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002934:	6951      	ldr	r1, [r2, #20]
 8002936:	0549      	lsls	r1, r1, #21
 8002938:	d500      	bpl.n	800293c <HAL_PWREx_ControlVoltageScaling+0x3c>
 800293a:	b923      	cbnz	r3, 8002946 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800293c:	6953      	ldr	r3, [r2, #20]
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	d5e8      	bpl.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8002942:	2003      	movs	r0, #3
}
 8002944:	4770      	bx	lr
        wait_loop_index--;
 8002946:	3b01      	subs	r3, #1
 8002948:	e7f4      	b.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800294e:	bf1f      	itttt	ne
 8002950:	6813      	ldrne	r3, [r2, #0]
 8002952:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8002956:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800295a:	6013      	strne	r3, [r2, #0]
 800295c:	e7da      	b.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x14>
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000
 8002964:	20000024 	.word	0x20000024
 8002968:	000f4240 	.word	0x000f4240

0800296c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800296c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800296e:	4d1e      	ldr	r5, [pc, #120]	; (80029e8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002970:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002972:	00da      	lsls	r2, r3, #3
{
 8002974:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002976:	d518      	bpl.n	80029aa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002978:	f7ff ffba 	bl	80028f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002980:	d123      	bne.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002982:	2c80      	cmp	r4, #128	; 0x80
 8002984:	d929      	bls.n	80029da <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002986:	2ca0      	cmp	r4, #160	; 0xa0
 8002988:	bf8c      	ite	hi
 800298a:	2402      	movhi	r4, #2
 800298c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800298e:	4917      	ldr	r1, [pc, #92]	; (80029ec <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002990:	680a      	ldr	r2, [r1, #0]
 8002992:	f022 0207 	bic.w	r2, r2, #7
 8002996:	4322      	orrs	r2, r4
 8002998:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800299a:	6808      	ldr	r0, [r1, #0]
 800299c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80029a0:	1b00      	subs	r0, r0, r4
 80029a2:	bf18      	it	ne
 80029a4:	2001      	movne	r0, #1
 80029a6:	b003      	add	sp, #12
 80029a8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	65ab      	str	r3, [r5, #88]	; 0x58
 80029b2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80029bc:	f7ff ff98 	bl	80028f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80029c0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c6:	65ab      	str	r3, [r5, #88]	; 0x58
 80029c8:	e7d8      	b.n	800297c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80029ca:	2c80      	cmp	r4, #128	; 0x80
 80029cc:	d807      	bhi.n	80029de <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80029ce:	d008      	beq.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80029d0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80029d4:	425c      	negs	r4, r3
 80029d6:	415c      	adcs	r4, r3
 80029d8:	e7d9      	b.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029da:	2400      	movs	r4, #0
 80029dc:	e7d7      	b.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80029de:	2403      	movs	r4, #3
 80029e0:	e7d5      	b.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80029e2:	2402      	movs	r4, #2
 80029e4:	e7d3      	b.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40022000 	.word	0x40022000

080029f0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x8c>)
 80029f2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f6:	f012 020c 	ands.w	r2, r2, #12
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x18>
 80029fc:	2a0c      	cmp	r2, #12
 80029fe:	d115      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a00:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a04:	2901      	cmp	r1, #1
 8002a06:	d118      	bne.n	8002a3a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a08:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002a0a:	481d      	ldr	r0, [pc, #116]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a0c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a0e:	bf55      	itete	pl
 8002a10:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a14:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a16:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a1a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002a1e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a22:	b34a      	cbz	r2, 8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a24:	2a0c      	cmp	r2, #12
 8002a26:	d009      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x4c>
 8002a28:	2000      	movs	r0, #0
  return sysclockfreq;
 8002a2a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a2c:	2a04      	cmp	r2, #4
 8002a2e:	d022      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a30:	2a08      	cmp	r2, #8
 8002a32:	4814      	ldr	r0, [pc, #80]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	bf18      	it	ne
 8002a36:	2000      	movne	r0, #0
 8002a38:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a3a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002a42:	2a02      	cmp	r2, #2
 8002a44:	d015      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x82>
 8002a46:	490f      	ldr	r1, [pc, #60]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a48:	2a03      	cmp	r2, #3
 8002a4a:	bf08      	it	eq
 8002a4c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a4e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002a56:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a58:	68d8      	ldr	r0, [r3, #12]
 8002a5a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a62:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a64:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a66:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a68:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002a6c:	fbb2 f0f0 	udiv	r0, r2, r0
 8002a70:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a74:	e7eb      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002a76:	4804      	ldr	r0, [pc, #16]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	0800991c 	.word	0x0800991c
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	00f42400 	.word	0x00f42400

08002a8c <HAL_RCC_OscConfig>:
{
 8002a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002a90:	4605      	mov	r5, r0
 8002a92:	b918      	cbnz	r0, 8002a9c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
}
 8002a96:	b003      	add	sp, #12
 8002a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9c:	4c92      	ldr	r4, [pc, #584]	; (8002ce8 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a9e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aaa:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aae:	d53d      	bpl.n	8002b2c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab0:	b11e      	cbz	r6, 8002aba <HAL_RCC_OscConfig+0x2e>
 8002ab2:	2e0c      	cmp	r6, #12
 8002ab4:	d166      	bne.n	8002b84 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ab6:	2f01      	cmp	r7, #1
 8002ab8:	d164      	bne.n	8002b84 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	0798      	lsls	r0, r3, #30
 8002abe:	d502      	bpl.n	8002ac6 <HAL_RCC_OscConfig+0x3a>
 8002ac0:	69ab      	ldr	r3, [r5, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0e6      	beq.n	8002a94 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	6a28      	ldr	r0, [r5, #32]
 8002aca:	0719      	lsls	r1, r3, #28
 8002acc:	bf56      	itet	pl
 8002ace:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002ad2:	6823      	ldrmi	r3, [r4, #0]
 8002ad4:	091b      	lsrpl	r3, r3, #4
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d93b      	bls.n	8002b56 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ade:	f7ff ff45 	bl	800296c <RCC_SetFlashLatencyFromMSIRange>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d1d6      	bne.n	8002a94 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	6a2a      	ldr	r2, [r5, #32]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	4313      	orrs	r3, r2
 8002af8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	69ea      	ldr	r2, [r5, #28]
 8002afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b06:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b08:	f7ff ff72 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	4a77      	ldr	r2, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x260>)
 8002b10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	40d8      	lsrs	r0, r3
 8002b1c:	4b74      	ldr	r3, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0x264>)
 8002b1e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002b20:	4b74      	ldr	r3, [pc, #464]	; (8002cf4 <HAL_RCC_OscConfig+0x268>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	f7ff f934 	bl	8001d90 <HAL_InitTick>
        if(status != HAL_OK)
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d1b4      	bne.n	8002a96 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	07d8      	lsls	r0, r3, #31
 8002b30:	d45f      	bmi.n	8002bf2 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	682b      	ldr	r3, [r5, #0]
 8002b34:	0799      	lsls	r1, r3, #30
 8002b36:	f100 809e 	bmi.w	8002c76 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	0718      	lsls	r0, r3, #28
 8002b3e:	f100 80db 	bmi.w	8002cf8 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	0759      	lsls	r1, r3, #29
 8002b46:	f100 8101 	bmi.w	8002d4c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 816a 	bne.w	8002e26 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002b52:	2000      	movs	r0, #0
 8002b54:	e79f      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b64:	4303      	orrs	r3, r0
 8002b66:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b68:	6863      	ldr	r3, [r4, #4]
 8002b6a:	69ea      	ldr	r2, [r5, #28]
 8002b6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b74:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b76:	2e00      	cmp	r6, #0
 8002b78:	d1c6      	bne.n	8002b08 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7a:	f7ff fef7 	bl	800296c <RCC_SetFlashLatencyFromMSIRange>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	d0c2      	beq.n	8002b08 <HAL_RCC_OscConfig+0x7c>
 8002b82:	e787      	b.n	8002a94 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b84:	69ab      	ldr	r3, [r5, #24]
 8002b86:	b31b      	cbz	r3, 8002bd0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b90:	f7ff f946 	bl	8001e20 <HAL_GetTick>
 8002b94:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	079a      	lsls	r2, r3, #30
 8002b9a:	d511      	bpl.n	8002bc0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6023      	str	r3, [r4, #0]
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	6a2a      	ldr	r2, [r5, #32]
 8002ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bac:	4313      	orrs	r3, r2
 8002bae:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb0:	6863      	ldr	r3, [r4, #4]
 8002bb2:	69ea      	ldr	r2, [r5, #28]
 8002bb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bbc:	6063      	str	r3, [r4, #4]
 8002bbe:	e7b5      	b.n	8002b2c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f92e 	bl	8001e20 <HAL_GetTick>
 8002bc4:	eba0 0008 	sub.w	r0, r0, r8
 8002bc8:	2802      	cmp	r0, #2
 8002bca:	d9e4      	bls.n	8002b96 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e762      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f922 	bl	8001e20 <HAL_GetTick>
 8002bdc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	079b      	lsls	r3, r3, #30
 8002be2:	d5a3      	bpl.n	8002b2c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be4:	f7ff f91c 	bl	8001e20 <HAL_GetTick>
 8002be8:	eba0 0008 	sub.w	r0, r0, r8
 8002bec:	2802      	cmp	r0, #2
 8002bee:	d9f6      	bls.n	8002bde <HAL_RCC_OscConfig+0x152>
 8002bf0:	e7ec      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bf2:	2e08      	cmp	r6, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_OscConfig+0x172>
 8002bf6:	2e0c      	cmp	r6, #12
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bfa:	2f03      	cmp	r7, #3
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	039a      	lsls	r2, r3, #14
 8002c02:	d596      	bpl.n	8002b32 <HAL_RCC_OscConfig+0xa6>
 8002c04:	686b      	ldr	r3, [r5, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d193      	bne.n	8002b32 <HAL_RCC_OscConfig+0xa6>
 8002c0a:	e743      	b.n	8002a94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	686b      	ldr	r3, [r5, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d110      	bne.n	8002c36 <HAL_RCC_OscConfig+0x1aa>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c1c:	f7ff f900 	bl	8001e20 <HAL_GetTick>
 8002c20:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	039b      	lsls	r3, r3, #14
 8002c26:	d484      	bmi.n	8002b32 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff f8fa 	bl	8001e20 <HAL_GetTick>
 8002c2c:	eba0 0008 	sub.w	r0, r0, r8
 8002c30:	2864      	cmp	r0, #100	; 0x64
 8002c32:	d9f6      	bls.n	8002c22 <HAL_RCC_OscConfig+0x196>
 8002c34:	e7ca      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3a:	d104      	bne.n	8002c46 <HAL_RCC_OscConfig+0x1ba>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	e7e6      	b.n	8002c14 <HAL_RCC_OscConfig+0x188>
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c4c:	6022      	str	r2, [r4, #0]
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c54:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002c5a:	f7ff f8e1 	bl	8001e20 <HAL_GetTick>
 8002c5e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	0398      	lsls	r0, r3, #14
 8002c64:	f57f af65 	bpl.w	8002b32 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f8da 	bl	8001e20 <HAL_GetTick>
 8002c6c:	eba0 0008 	sub.w	r0, r0, r8
 8002c70:	2864      	cmp	r0, #100	; 0x64
 8002c72:	d9f5      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1d4>
 8002c74:	e7aa      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c76:	2e04      	cmp	r6, #4
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1f6>
 8002c7a:	2e0c      	cmp	r6, #12
 8002c7c:	d110      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c7e:	2f02      	cmp	r7, #2
 8002c80:	d10e      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	0559      	lsls	r1, r3, #21
 8002c86:	d503      	bpl.n	8002c90 <HAL_RCC_OscConfig+0x204>
 8002c88:	68eb      	ldr	r3, [r5, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f43f af02 	beq.w	8002a94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	692a      	ldr	r2, [r5, #16]
 8002c94:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002c98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	e74c      	b.n	8002b3a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca0:	68eb      	ldr	r3, [r5, #12]
 8002ca2:	b17b      	cbz	r3, 8002cc4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cac:	f7ff f8b8 	bl	8001e20 <HAL_GetTick>
 8002cb0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	055a      	lsls	r2, r3, #21
 8002cb6:	d4eb      	bmi.n	8002c90 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7ff f8b2 	bl	8001e20 <HAL_GetTick>
 8002cbc:	1bc0      	subs	r0, r0, r7
 8002cbe:	2802      	cmp	r0, #2
 8002cc0:	d9f7      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x226>
 8002cc2:	e783      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ccc:	f7ff f8a8 	bl	8001e20 <HAL_GetTick>
 8002cd0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	055b      	lsls	r3, r3, #21
 8002cd6:	f57f af30 	bpl.w	8002b3a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7ff f8a1 	bl	8001e20 <HAL_GetTick>
 8002cde:	1bc0      	subs	r0, r0, r7
 8002ce0:	2802      	cmp	r0, #2
 8002ce2:	d9f6      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x246>
 8002ce4:	e772      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08009901 	.word	0x08009901
 8002cf0:	20000024 	.word	0x20000024
 8002cf4:	2000002c 	.word	0x2000002c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf8:	696b      	ldr	r3, [r5, #20]
 8002cfa:	b19b      	cbz	r3, 8002d24 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002cfc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d08:	f7ff f88a 	bl	8001e20 <HAL_GetTick>
 8002d0c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d12:	079a      	lsls	r2, r3, #30
 8002d14:	f53f af15 	bmi.w	8002b42 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7ff f882 	bl	8001e20 <HAL_GetTick>
 8002d1c:	1bc0      	subs	r0, r0, r7
 8002d1e:	2802      	cmp	r0, #2
 8002d20:	d9f5      	bls.n	8002d0e <HAL_RCC_OscConfig+0x282>
 8002d22:	e753      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002d24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d30:	f7ff f876 	bl	8001e20 <HAL_GetTick>
 8002d34:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d3a:	079b      	lsls	r3, r3, #30
 8002d3c:	f57f af01 	bpl.w	8002b42 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff f86e 	bl	8001e20 <HAL_GetTick>
 8002d44:	1bc0      	subs	r0, r0, r7
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d9f5      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2aa>
 8002d4a:	e73f      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d4e:	00df      	lsls	r7, r3, #3
 8002d50:	d429      	bmi.n	8002da6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d64:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d68:	4f85      	ldr	r7, [pc, #532]	; (8002f80 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	05d8      	lsls	r0, r3, #23
 8002d6e:	d51d      	bpl.n	8002dac <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	68ab      	ldr	r3, [r5, #8]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d12b      	bne.n	8002dce <HAL_RCC_OscConfig+0x342>
 8002d76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002d82:	f7ff f84d 	bl	8001e20 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d8a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d90:	079a      	lsls	r2, r3, #30
 8002d92:	d542      	bpl.n	8002e1a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002d94:	f1b8 0f00 	cmp.w	r8, #0
 8002d98:	f43f aed7 	beq.w	8002b4a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da2:	65a3      	str	r3, [r4, #88]	; 0x58
 8002da4:	e6d1      	b.n	8002b4a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	f04f 0800 	mov.w	r8, #0
 8002daa:	e7dd      	b.n	8002d68 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002db4:	f7ff f834 	bl	8001e20 <HAL_GetTick>
 8002db8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	05d9      	lsls	r1, r3, #23
 8002dbe:	d4d7      	bmi.n	8002d70 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7ff f82e 	bl	8001e20 <HAL_GetTick>
 8002dc4:	eba0 0009 	sub.w	r0, r0, r9
 8002dc8:	2802      	cmp	r0, #2
 8002dca:	d9f6      	bls.n	8002dba <HAL_RCC_OscConfig+0x32e>
 8002dcc:	e6fe      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x354>
 8002dd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002dde:	e7ca      	b.n	8002d76 <HAL_RCC_OscConfig+0x2ea>
 8002de0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002dec:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002df0:	f022 0204 	bic.w	r2, r2, #4
 8002df4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1c2      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002dfc:	f7ff f810 	bl	8001e20 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e04:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e0a:	079b      	lsls	r3, r3, #30
 8002e0c:	d5c2      	bpl.n	8002d94 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7ff f807 	bl	8001e20 <HAL_GetTick>
 8002e12:	1bc0      	subs	r0, r0, r7
 8002e14:	4548      	cmp	r0, r9
 8002e16:	d9f6      	bls.n	8002e06 <HAL_RCC_OscConfig+0x37a>
 8002e18:	e6d8      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7ff f801 	bl	8001e20 <HAL_GetTick>
 8002e1e:	1bc0      	subs	r0, r0, r7
 8002e20:	4548      	cmp	r0, r9
 8002e22:	d9b3      	bls.n	8002d8c <HAL_RCC_OscConfig+0x300>
 8002e24:	e6d2      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	f040 808f 	bne.w	8002f4a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002e2c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002e30:	f003 0103 	and.w	r1, r3, #3
 8002e34:	4291      	cmp	r1, r2
 8002e36:	d124      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e38:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002e3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e3e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e40:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e44:	d11d      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e46:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002e48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e4c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e50:	d117      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e52:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002e54:	3a07      	subs	r2, #7
 8002e56:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002e5a:	bf18      	it	ne
 8002e5c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e5e:	4291      	cmp	r1, r2
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e62:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002e64:	0852      	lsrs	r2, r2, #1
 8002e66:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002e6a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e6c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e72:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002e7a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002e80:	d04a      	beq.n	8002f18 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e82:	2e0c      	cmp	r6, #12
 8002e84:	f43f ae06 	beq.w	8002a94 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	015f      	lsls	r7, r3, #5
 8002e8c:	f53f ae02 	bmi.w	8002a94 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	00de      	lsls	r6, r3, #3
 8002e94:	f53f adfe 	bmi.w	8002a94 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002ea0:	f7fe ffbe 	bl	8001e20 <HAL_GetTick>
 8002ea4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	0198      	lsls	r0, r3, #6
 8002eaa:	d42f      	bmi.n	8002f0c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eac:	68e2      	ldr	r2, [r4, #12]
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ebc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002ec4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002ec6:	0912      	lsrs	r2, r2, #4
 8002ec8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002ecc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002ece:	0852      	lsrs	r2, r2, #1
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002ed6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ed8:	0852      	lsrs	r2, r2, #1
 8002eda:	3a01      	subs	r2, #1
 8002edc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002ee0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eea:	68e3      	ldr	r3, [r4, #12]
 8002eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002ef2:	f7fe ff95 	bl	8001e20 <HAL_GetTick>
 8002ef6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	0199      	lsls	r1, r3, #6
 8002efc:	f53f ae29 	bmi.w	8002b52 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe ff8e 	bl	8001e20 <HAL_GetTick>
 8002f04:	1b40      	subs	r0, r0, r5
 8002f06:	2802      	cmp	r0, #2
 8002f08:	d9f6      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x46c>
 8002f0a:	e65f      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe ff88 	bl	8001e20 <HAL_GetTick>
 8002f10:	1b80      	subs	r0, r0, r6
 8002f12:	2802      	cmp	r0, #2
 8002f14:	d9c7      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x41a>
 8002f16:	e659      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	f53f ae19 	bmi.w	8002b52 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f28:	68e3      	ldr	r3, [r4, #12]
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002f30:	f7fe ff76 	bl	8001e20 <HAL_GetTick>
 8002f34:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	f53f ae0a 	bmi.w	8002b52 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fe ff6f 	bl	8001e20 <HAL_GetTick>
 8002f42:	1b40      	subs	r0, r0, r5
 8002f44:	2802      	cmp	r0, #2
 8002f46:	d9f6      	bls.n	8002f36 <HAL_RCC_OscConfig+0x4aa>
 8002f48:	e640      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f4a:	2e0c      	cmp	r6, #12
 8002f4c:	f43f ada2 	beq.w	8002a94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f58:	f7fe ff62 	bl	8001e20 <HAL_GetTick>
 8002f5c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f66:	68e1      	ldr	r1, [r4, #12]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_RCC_OscConfig+0x4fc>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8002f6e:	4618      	mov	r0, r3
 8002f70:	e591      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe ff55 	bl	8001e20 <HAL_GetTick>
 8002f76:	1b40      	subs	r0, r0, r5
 8002f78:	2802      	cmp	r0, #2
 8002f7a:	d9f0      	bls.n	8002f5e <HAL_RCC_OscConfig+0x4d2>
 8002f7c:	e626      	b.n	8002bcc <HAL_RCC_OscConfig+0x140>
 8002f7e:	bf00      	nop
 8002f80:	40007000 	.word	0x40007000
 8002f84:	f99d808c 	.word	0xf99d808c
 8002f88:	feeefffc 	.word	0xfeeefffc

08002f8c <HAL_RCC_ClockConfig>:
{
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002f92:	4604      	mov	r4, r0
 8002f94:	b910      	cbnz	r0, 8002f9c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
}
 8002f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4a4b      	ldr	r2, [pc, #300]	; (80030cc <HAL_RCC_ClockConfig+0x140>)
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d32c      	bcc.n	8003002 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	6821      	ldr	r1, [r4, #0]
 8002faa:	0788      	lsls	r0, r1, #30
 8002fac:	d434      	bmi.n	8003018 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	07c9      	lsls	r1, r1, #31
 8002fb0:	d43f      	bmi.n	8003032 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb2:	6821      	ldr	r1, [r4, #0]
 8002fb4:	078a      	lsls	r2, r1, #30
 8002fb6:	d468      	bmi.n	800308a <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4a44      	ldr	r2, [pc, #272]	; (80030cc <HAL_RCC_ClockConfig+0x140>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	d86f      	bhi.n	80030a4 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	f011 0f04 	tst.w	r1, #4
 8002fc8:	4d41      	ldr	r5, [pc, #260]	; (80030d0 <HAL_RCC_ClockConfig+0x144>)
 8002fca:	d177      	bne.n	80030bc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	070b      	lsls	r3, r1, #28
 8002fce:	d506      	bpl.n	8002fde <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd0:	68ab      	ldr	r3, [r5, #8]
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fdc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fde:	f7ff fd07 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002fe2:	68ab      	ldr	r3, [r5, #8]
 8002fe4:	4a3b      	ldr	r2, [pc, #236]	; (80030d4 <HAL_RCC_ClockConfig+0x148>)
 8002fe6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	40d8      	lsrs	r0, r3
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_RCC_ClockConfig+0x14c>)
 8002ff8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_RCC_ClockConfig+0x150>)
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	f7fe bec7 	b.w	8001d90 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	f023 0307 	bic.w	r3, r3, #7
 8003008:	430b      	orrs	r3, r1
 800300a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	428b      	cmp	r3, r1
 8003014:	d1bf      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xa>
 8003016:	e7c7      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003018:	4a2d      	ldr	r2, [pc, #180]	; (80030d0 <HAL_RCC_ClockConfig+0x144>)
 800301a:	68a0      	ldr	r0, [r4, #8]
 800301c:	6893      	ldr	r3, [r2, #8]
 800301e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003022:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	bf81      	itttt	hi
 8003026:	6893      	ldrhi	r3, [r2, #8]
 8003028:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 800302c:	4303      	orrhi	r3, r0
 800302e:	6093      	strhi	r3, [r2, #8]
 8003030:	e7bd      	b.n	8002fae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	4e26      	ldr	r6, [pc, #152]	; (80030d0 <HAL_RCC_ClockConfig+0x144>)
 8003036:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003038:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303a:	d11a      	bne.n	8003072 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003040:	d0a9      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003042:	68b3      	ldr	r3, [r6, #8]
 8003044:	f023 0303 	bic.w	r3, r3, #3
 8003048:	4313      	orrs	r3, r2
 800304a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800304c:	f7fe fee8 	bl	8001e20 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003054:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	68b3      	ldr	r3, [r6, #8]
 8003058:	6862      	ldr	r2, [r4, #4]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003062:	d0a6      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fe fedc 	bl	8001e20 <HAL_GetTick>
 8003068:	1bc0      	subs	r0, r0, r7
 800306a:	4540      	cmp	r0, r8
 800306c:	d9f3      	bls.n	8003056 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800306e:	2003      	movs	r0, #3
 8003070:	e792      	b.n	8002f98 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003072:	2a02      	cmp	r2, #2
 8003074:	d102      	bne.n	800307c <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800307a:	e7e1      	b.n	8003040 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800307c:	b912      	cbnz	r2, 8003084 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800307e:	f013 0f02 	tst.w	r3, #2
 8003082:	e7dd      	b.n	8003040 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003084:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003088:	e7da      	b.n	8003040 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800308a:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_RCC_ClockConfig+0x144>)
 800308c:	68a0      	ldr	r0, [r4, #8]
 800308e:	6893      	ldr	r3, [r2, #8]
 8003090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003094:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003096:	bf3f      	itttt	cc
 8003098:	6893      	ldrcc	r3, [r2, #8]
 800309a:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800309e:	4303      	orrcc	r3, r0
 80030a0:	6093      	strcc	r3, [r2, #8]
 80030a2:	e789      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	f023 0307 	bic.w	r3, r3, #7
 80030aa:	432b      	orrs	r3, r5
 80030ac:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	42ab      	cmp	r3, r5
 80030b6:	f47f af6e 	bne.w	8002f96 <HAL_RCC_ClockConfig+0xa>
 80030ba:	e783      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	68ab      	ldr	r3, [r5, #8]
 80030be:	68e2      	ldr	r2, [r4, #12]
 80030c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60ab      	str	r3, [r5, #8]
 80030c8:	e780      	b.n	8002fcc <HAL_RCC_ClockConfig+0x40>
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08009901 	.word	0x08009901
 80030d8:	20000024 	.word	0x20000024
 80030dc:	2000002c 	.word	0x2000002c

080030e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80030e2:	4a06      	ldr	r2, [pc, #24]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ee:	6810      	ldr	r0, [r2, #0]
 80030f0:	f003 031f 	and.w	r3, r3, #31
}
 80030f4:	40d8      	lsrs	r0, r3
 80030f6:	4770      	bx	lr
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08009911 	.word	0x08009911
 8003100:	20000024 	.word	0x20000024

08003104 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003106:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003112:	6810      	ldr	r0, [r2, #0]
 8003114:	f003 031f 	and.w	r3, r3, #31
}
 8003118:	40d8      	lsrs	r0, r3
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000
 8003120:	08009911 	.word	0x08009911
 8003124:	20000024 	.word	0x20000024

08003128 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312a:	4c42      	ldr	r4, [pc, #264]	; (8003234 <RCCEx_PLLSAI1_Config+0x10c>)
 800312c:	68e2      	ldr	r2, [r4, #12]
 800312e:	0793      	lsls	r3, r2, #30
{
 8003130:	4605      	mov	r5, r0
 8003132:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003134:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003136:	d029      	beq.n	800318c <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003138:	68e2      	ldr	r2, [r4, #12]
 800313a:	f002 0203 	and.w	r2, r2, #3
 800313e:	4282      	cmp	r2, r0
 8003140:	d13c      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x94>
       ||
 8003142:	2a00      	cmp	r2, #0
 8003144:	d03a      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003146:	68e3      	ldr	r3, [r4, #12]
       ||
 8003148:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800314a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800314e:	3301      	adds	r3, #1
       ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d133      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800315a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315c:	f7fe fe60 	bl	8001e20 <HAL_GetTick>
 8003160:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	011a      	lsls	r2, r3, #4
 8003166:	d432      	bmi.n	80031ce <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003168:	68aa      	ldr	r2, [r5, #8]
 800316a:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 800316c:	2e00      	cmp	r6, #0
 800316e:	d035      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003170:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003172:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003174:	d14d      	bne.n	8003212 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003176:	6929      	ldr	r1, [r5, #16]
 8003178:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800317c:	0849      	lsrs	r1, r1, #1
 800317e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003182:	3901      	subs	r1, #1
 8003184:	4313      	orrs	r3, r2
 8003186:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800318a:	e031      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 800318c:	2802      	cmp	r0, #2
 800318e:	d011      	beq.n	80031b4 <RCCEx_PLLSAI1_Config+0x8c>
 8003190:	2803      	cmp	r0, #3
 8003192:	d015      	beq.n	80031c0 <RCCEx_PLLSAI1_Config+0x98>
 8003194:	2801      	cmp	r0, #1
 8003196:	d111      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	0797      	lsls	r7, r2, #30
 800319c:	d51d      	bpl.n	80031da <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800319e:	68e2      	ldr	r2, [r4, #12]
 80031a0:	6869      	ldr	r1, [r5, #4]
 80031a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80031a6:	3901      	subs	r1, #1
 80031a8:	ea42 0300 	orr.w	r3, r2, r0
 80031ac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80031b0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80031b2:	e7cf      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ba:	d1f0      	bne.n	800319e <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 80031bc:	2001      	movs	r0, #1
 80031be:	e00c      	b.n	80031da <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	0391      	lsls	r1, r2, #14
 80031c4:	d4eb      	bmi.n	800319e <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80031cc:	e7f5      	b.n	80031ba <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ce:	f7fe fe27 	bl	8001e20 <HAL_GetTick>
 80031d2:	1bc0      	subs	r0, r0, r7
 80031d4:	2802      	cmp	r0, #2
 80031d6:	d9c4      	bls.n	8003162 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 80031d8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80031da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	68e9      	ldr	r1, [r5, #12]
 80031e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	0909      	lsrs	r1, r1, #4
 80031ea:	4313      	orrs	r3, r2
 80031ec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f0:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80031fa:	f7fe fe11 	bl	8001e20 <HAL_GetTick>
 80031fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	d510      	bpl.n	8003228 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	69aa      	ldr	r2, [r5, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	6123      	str	r3, [r4, #16]
 800320e:	2000      	movs	r0, #0
  return status;
 8003210:	e7e3      	b.n	80031da <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003212:	6969      	ldr	r1, [r5, #20]
 8003214:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003218:	0849      	lsrs	r1, r1, #1
 800321a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800321e:	3901      	subs	r1, #1
 8003220:	4313      	orrs	r3, r2
 8003222:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003226:	e7e3      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003228:	f7fe fdfa 	bl	8001e20 <HAL_GetTick>
 800322c:	1b80      	subs	r0, r0, r6
 800322e:	2802      	cmp	r0, #2
 8003230:	d9e6      	bls.n	8003200 <RCCEx_PLLSAI1_Config+0xd8>
 8003232:	e7d1      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0xb0>
 8003234:	40021000 	.word	0x40021000

08003238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800323a:	4c3b      	ldr	r4, [pc, #236]	; (8003328 <RCCEx_PLLSAI2_Config+0xf0>)
 800323c:	68e2      	ldr	r2, [r4, #12]
 800323e:	0793      	lsls	r3, r2, #30
{
 8003240:	4605      	mov	r5, r0
 8003242:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003244:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003246:	d026      	beq.n	8003296 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003248:	68e2      	ldr	r2, [r4, #12]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	4282      	cmp	r2, r0
 8003250:	d139      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8003252:	2a00      	cmp	r2, #0
 8003254:	d037      	beq.n	80032c6 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003256:	68e3      	ldr	r3, [r4, #12]
       ||
 8003258:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800325a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800325e:	3301      	adds	r3, #1
       ||
 8003260:	4293      	cmp	r3, r2
 8003262:	d130      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fdd8 	bl	8001e20 <HAL_GetTick>
 8003270:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	d42f      	bmi.n	80032d8 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003278:	68a9      	ldr	r1, [r5, #8]
 800327a:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 800327c:	b39e      	cbz	r6, 80032e6 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800327e:	6963      	ldr	r3, [r4, #20]
 8003280:	692a      	ldr	r2, [r5, #16]
 8003282:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800328c:	3a01      	subs	r2, #1
 800328e:	430b      	orrs	r3, r1
 8003290:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003294:	e031      	b.n	80032fa <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8003296:	2802      	cmp	r0, #2
 8003298:	d011      	beq.n	80032be <RCCEx_PLLSAI2_Config+0x86>
 800329a:	2803      	cmp	r0, #3
 800329c:	d015      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x92>
 800329e:	2801      	cmp	r0, #1
 80032a0:	d111      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	0797      	lsls	r7, r2, #30
 80032a6:	d51d      	bpl.n	80032e4 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032a8:	68e2      	ldr	r2, [r4, #12]
 80032aa:	6869      	ldr	r1, [r5, #4]
 80032ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80032b0:	3901      	subs	r1, #1
 80032b2:	ea42 0300 	orr.w	r3, r2, r0
 80032b6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80032ba:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80032bc:	e7d2      	b.n	8003264 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032c4:	d1f0      	bne.n	80032a8 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
 80032c8:	e00c      	b.n	80032e4 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	0391      	lsls	r1, r2, #14
 80032ce:	d4eb      	bmi.n	80032a8 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80032d6:	e7f5      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032d8:	f7fe fda2 	bl	8001e20 <HAL_GetTick>
 80032dc:	1bc0      	subs	r0, r0, r7
 80032de:	2802      	cmp	r0, #2
 80032e0:	d9c7      	bls.n	8003272 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80032e2:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80032e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e6:	6963      	ldr	r3, [r4, #20]
 80032e8:	68ea      	ldr	r2, [r5, #12]
 80032ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f2:	0912      	lsrs	r2, r2, #4
 80032f4:	430b      	orrs	r3, r1
 80032f6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032fa:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003302:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003304:	f7fe fd8c 	bl	8001e20 <HAL_GetTick>
 8003308:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	d505      	bpl.n	800331c <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003310:	6963      	ldr	r3, [r4, #20]
 8003312:	696a      	ldr	r2, [r5, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	6163      	str	r3, [r4, #20]
 8003318:	2000      	movs	r0, #0
  return status;
 800331a:	e7e3      	b.n	80032e4 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800331c:	f7fe fd80 	bl	8001e20 <HAL_GetTick>
 8003320:	1b80      	subs	r0, r0, r6
 8003322:	2802      	cmp	r0, #2
 8003324:	d9f1      	bls.n	800330a <RCCEx_PLLSAI2_Config+0xd2>
 8003326:	e7dc      	b.n	80032e2 <RCCEx_PLLSAI2_Config+0xaa>
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_RCCEx_PeriphCLKConfig>:
{
 800332c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003330:	6806      	ldr	r6, [r0, #0]
 8003332:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8003336:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003338:	d009      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800333a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800333c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003340:	d022      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003342:	d813      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003344:	b331      	cbz	r1, 8003394 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003346:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800334a:	d02a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800334c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	04d8      	lsls	r0, r3, #19
 8003352:	d509      	bpl.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003354:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003356:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800335a:	d02c      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800335c:	d826      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x80>
 800335e:	b381      	cbz	r1, 80033c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003360:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003364:	d072      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003366:	2601      	movs	r6, #1
 8003368:	4635      	mov	r5, r6
 800336a:	e039      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800336c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003370:	d1ec      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003372:	4a3c      	ldr	r2, [pc, #240]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003374:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003376:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800337a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800337e:	430b      	orrs	r3, r1
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003384:	2600      	movs	r6, #0
 8003386:	e7e2      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003388:	4a36      	ldr	r2, [pc, #216]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800338a:	68d3      	ldr	r3, [r2, #12]
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8003392:	e7ee      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003394:	3004      	adds	r0, #4
 8003396:	f7ff fec7 	bl	8003128 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800339a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800339c:	2800      	cmp	r0, #0
 800339e:	d1d6      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22>
 80033a0:	e7e7      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033a2:	2100      	movs	r1, #0
 80033a4:	3020      	adds	r0, #32
 80033a6:	f7ff ff47 	bl	8003238 <RCCEx_PLLSAI2_Config>
 80033aa:	e7f6      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80033ac:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80033b0:	d1d9      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80033b2:	4635      	mov	r5, r6
 80033b4:	e009      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80033b8:	68d3      	ldr	r3, [r2, #12]
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033be:	60d3      	str	r3, [r2, #12]
      break;
 80033c0:	e7f7      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c2:	1d20      	adds	r0, r4, #4
 80033c4:	f7ff feb0 	bl	8003128 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80033ca:	2d00      	cmp	r5, #0
 80033cc:	d144      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ce:	4a25      	ldr	r2, [pc, #148]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80033d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80033d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80033da:	430b      	orrs	r3, r1
 80033dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	0399      	lsls	r1, r3, #14
 80033e4:	f140 815d 	bpl.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e8:	4f1e      	ldr	r7, [pc, #120]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80033ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ec:	00da      	lsls	r2, r3, #3
 80033ee:	d435      	bmi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80033f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003402:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003406:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8003468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800340a:	f8d9 3000 	ldr.w	r3, [r9]
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003416:	f7fe fd03 	bl	8001e20 <HAL_GetTick>
 800341a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341c:	f8d9 3000 	ldr.w	r3, [r9]
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	d523      	bpl.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8003424:	bb4d      	cbnz	r5, 800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800342e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003432:	f040 810e 	bne.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800343a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800343e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003448:	4635      	mov	r5, r6
 800344a:	e016      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800344c:	2100      	movs	r1, #0
 800344e:	f104 0020 	add.w	r0, r4, #32
 8003452:	f7ff fef1 	bl	8003238 <RCCEx_PLLSAI2_Config>
 8003456:	e7b7      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003458:	462e      	mov	r6, r5
 800345a:	e7c1      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800345c:	f04f 0800 	mov.w	r8, #0
 8003460:	e7d1      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fe fcd8 	bl	8001e20 <HAL_GetTick>
 8003470:	eba0 000a 	sub.w	r0, r0, sl
 8003474:	2802      	cmp	r0, #2
 8003476:	d9d1      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8003478:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800347a:	f1b8 0f00 	cmp.w	r8, #0
 800347e:	d003      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003486:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	07da      	lsls	r2, r3, #31
 800348c:	d508      	bpl.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348e:	499b      	ldr	r1, [pc, #620]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003490:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003492:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003496:	f022 0203 	bic.w	r2, r2, #3
 800349a:	4302      	orrs	r2, r0
 800349c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a0:	079f      	lsls	r7, r3, #30
 80034a2:	d508      	bpl.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a4:	4995      	ldr	r1, [pc, #596]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80034a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034ac:	f022 020c 	bic.w	r2, r2, #12
 80034b0:	4302      	orrs	r2, r0
 80034b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b6:	075e      	lsls	r6, r3, #29
 80034b8:	d508      	bpl.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ba:	4990      	ldr	r1, [pc, #576]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034c2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80034c6:	4302      	orrs	r2, r0
 80034c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034cc:	0718      	lsls	r0, r3, #28
 80034ce:	d508      	bpl.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034d0:	498a      	ldr	r1, [pc, #552]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034d2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80034d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80034dc:	4302      	orrs	r2, r0
 80034de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034e2:	06d9      	lsls	r1, r3, #27
 80034e4:	d508      	bpl.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e6:	4985      	ldr	r1, [pc, #532]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80034ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034f2:	4302      	orrs	r2, r0
 80034f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f8:	069a      	lsls	r2, r3, #26
 80034fa:	d508      	bpl.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034fc:	497f      	ldr	r1, [pc, #508]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003500:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003504:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003508:	4302      	orrs	r2, r0
 800350a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800350e:	059f      	lsls	r7, r3, #22
 8003510:	d508      	bpl.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003512:	497a      	ldr	r1, [pc, #488]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003514:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003516:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800351a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800351e:	4302      	orrs	r2, r0
 8003520:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003524:	055e      	lsls	r6, r3, #21
 8003526:	d508      	bpl.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003528:	4974      	ldr	r1, [pc, #464]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800352a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800352c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003530:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003534:	4302      	orrs	r2, r0
 8003536:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353a:	0658      	lsls	r0, r3, #25
 800353c:	d508      	bpl.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800353e:	496f      	ldr	r1, [pc, #444]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003540:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003542:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003546:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800354a:	4302      	orrs	r2, r0
 800354c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003550:	0619      	lsls	r1, r3, #24
 8003552:	d508      	bpl.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003554:	4969      	ldr	r1, [pc, #420]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003558:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800355c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003560:	4302      	orrs	r2, r0
 8003562:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003566:	05da      	lsls	r2, r3, #23
 8003568:	d508      	bpl.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356a:	4964      	ldr	r1, [pc, #400]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800356c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003572:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003576:	4302      	orrs	r2, r0
 8003578:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800357c:	049b      	lsls	r3, r3, #18
 800357e:	d510      	bpl.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003580:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003582:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003584:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003588:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800358c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800358e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003592:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003596:	f040 8086 	bne.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359a:	68d3      	ldr	r3, [r2, #12]
 800359c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	031f      	lsls	r7, r3, #12
 80035a6:	d50f      	bpl.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a8:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035aa:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80035ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035b0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80035b4:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035be:	d17e      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	68d3      	ldr	r3, [r2, #12]
 80035c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035c6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	035e      	lsls	r6, r3, #13
 80035cc:	d50f      	bpl.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ce:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035d0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80035d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80035da:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035e4:	d176      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e6:	68d3      	ldr	r3, [r2, #12]
 80035e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ec:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	0458      	lsls	r0, r3, #17
 80035f2:	d512      	bpl.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f4:	4941      	ldr	r1, [pc, #260]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035f6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80035f8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035fc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003600:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003602:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800360a:	d16e      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800360c:	2102      	movs	r1, #2
 800360e:	1d20      	adds	r0, r4, #4
 8003610:	f7ff fd8a 	bl	8003128 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003614:	2800      	cmp	r0, #0
 8003616:	bf18      	it	ne
 8003618:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800361a:	6822      	ldr	r2, [r4, #0]
 800361c:	0411      	lsls	r1, r2, #16
 800361e:	d508      	bpl.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003620:	4936      	ldr	r1, [pc, #216]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003622:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003624:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800362c:	4303      	orrs	r3, r0
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003632:	03d3      	lsls	r3, r2, #15
 8003634:	d509      	bpl.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003636:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003638:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800363c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003644:	430b      	orrs	r3, r1
 8003646:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800364a:	4628      	mov	r0, r5
 800364c:	b002      	add	sp, #8
 800364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003652:	429a      	cmp	r2, r3
 8003654:	f43f aeef 	beq.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003658:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800365c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800366c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003674:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800367a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800367e:	f57f aeda 	bpl.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8003682:	f7fe fbcd 	bl	8001e20 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800368a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003690:	0799      	lsls	r1, r3, #30
 8003692:	f53f aed0 	bmi.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fe fbc3 	bl	8001e20 <HAL_GetTick>
 800369a:	1b40      	subs	r0, r0, r5
 800369c:	4548      	cmp	r0, r9
 800369e:	d9f5      	bls.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036a0:	e6ea      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036a2:	4635      	mov	r5, r6
 80036a4:	e6f0      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036a6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80036aa:	f47f af7a 	bne.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ae:	2101      	movs	r1, #1
 80036b0:	1d20      	adds	r0, r4, #4
 80036b2:	f7ff fd39 	bl	8003128 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80036b6:	2800      	cmp	r0, #0
 80036b8:	bf18      	it	ne
 80036ba:	4605      	movne	r5, r0
 80036bc:	e771      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036be:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80036c2:	d181      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c4:	2101      	movs	r1, #1
 80036c6:	1d20      	adds	r0, r4, #4
 80036c8:	f7ff fd2e 	bl	8003128 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80036cc:	2800      	cmp	r0, #0
 80036ce:	bf18      	it	ne
 80036d0:	4605      	movne	r5, r0
 80036d2:	e779      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036d4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80036d8:	d189      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036da:	2101      	movs	r1, #1
 80036dc:	1d20      	adds	r0, r4, #4
 80036de:	f7ff fd23 	bl	8003128 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80036e2:	2800      	cmp	r0, #0
 80036e4:	bf18      	it	ne
 80036e6:	4605      	movne	r5, r0
 80036e8:	e781      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036ea:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80036ee:	d194      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036f0:	2102      	movs	r1, #2
 80036f2:	f104 0020 	add.w	r0, r4, #32
 80036f6:	f7ff fd9f 	bl	8003238 <RCCEx_PLLSAI2_Config>
 80036fa:	e78b      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80036fc:	40021000 	.word	0x40021000

08003700 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003700:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	e852 3f00 	ldrex	r3, [r2]
 8003706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800370e:	6802      	ldr	r2, [r0, #0]
 8003710:	2900      	cmp	r1, #0
 8003712:	d1f5      	bne.n	8003700 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	f102 0308 	add.w	r3, r2, #8
 8003718:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	f102 0c08 	add.w	ip, r2, #8
 8003724:	e84c 3100 	strex	r1, r3, [ip]
 8003728:	2900      	cmp	r1, #0
 800372a:	d1f3      	bne.n	8003714 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003736:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	e842 3100 	strex	r1, r3, [r2]
 800373e:	2900      	cmp	r1, #0
 8003740:	d1f7      	bne.n	8003732 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003742:	2320      	movs	r3, #32
 8003744:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003748:	2300      	movs	r3, #0
 800374a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800374c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800374e:	4770      	bx	lr

08003750 <HAL_UART_TxCpltCallback>:
 8003750:	4770      	bx	lr

08003752 <HAL_UART_ErrorCallback>:
 8003752:	4770      	bx	lr

08003754 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003754:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003756:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800375e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003762:	f7ff fff6 	bl	8003752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003766:	bd08      	pop	{r3, pc}

08003768 <HAL_UARTEx_RxEventCallback>:
}
 8003768:	4770      	bx	lr
	...

0800376c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800376c:	6803      	ldr	r3, [r0, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003770:	6819      	ldr	r1, [r3, #0]
{
 8003772:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8003774:	f640 060f 	movw	r6, #2063	; 0x80f
 8003778:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377a:	689d      	ldr	r5, [r3, #8]
{
 800377c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800377e:	d10b      	bne.n	8003798 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003780:	0696      	lsls	r6, r2, #26
 8003782:	f140 8088 	bpl.w	8003896 <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003786:	068e      	lsls	r6, r1, #26
 8003788:	f140 8085 	bpl.w	8003896 <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 800378c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800378e:	2b00      	cmp	r3, #0
 8003790:	d07b      	beq.n	800388a <HAL_UART_IRQHandler+0x11e>
}
 8003792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003796:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003798:	4e9a      	ldr	r6, [pc, #616]	; (8003a04 <HAL_UART_IRQHandler+0x298>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800379a:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800379e:	400e      	ands	r6, r1
 80037a0:	4306      	orrs	r6, r0
 80037a2:	d078      	beq.n	8003896 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037a4:	07d5      	lsls	r5, r2, #31
 80037a6:	d509      	bpl.n	80037bc <HAL_UART_IRQHandler+0x50>
 80037a8:	05ce      	lsls	r6, r1, #23
 80037aa:	d507      	bpl.n	80037bc <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037ac:	2501      	movs	r5, #1
 80037ae:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037b0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80037b4:	f045 0501 	orr.w	r5, r5, #1
 80037b8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037bc:	0795      	lsls	r5, r2, #30
 80037be:	d508      	bpl.n	80037d2 <HAL_UART_IRQHandler+0x66>
 80037c0:	b138      	cbz	r0, 80037d2 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037c2:	2502      	movs	r5, #2
 80037c4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c6:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80037ca:	f045 0504 	orr.w	r5, r5, #4
 80037ce:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037d2:	0756      	lsls	r6, r2, #29
 80037d4:	d508      	bpl.n	80037e8 <HAL_UART_IRQHandler+0x7c>
 80037d6:	b138      	cbz	r0, 80037e8 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037d8:	2504      	movs	r5, #4
 80037da:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037dc:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80037e0:	f045 0502 	orr.w	r5, r5, #2
 80037e4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037e8:	0715      	lsls	r5, r2, #28
 80037ea:	d50b      	bpl.n	8003804 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037ec:	f001 0520 	and.w	r5, r1, #32
 80037f0:	4305      	orrs	r5, r0
 80037f2:	d007      	beq.n	8003804 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f4:	2008      	movs	r0, #8
 80037f6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80037fc:	f040 0008 	orr.w	r0, r0, #8
 8003800:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003804:	0516      	lsls	r6, r2, #20
 8003806:	d50a      	bpl.n	800381e <HAL_UART_IRQHandler+0xb2>
 8003808:	014d      	lsls	r5, r1, #5
 800380a:	d508      	bpl.n	800381e <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800380c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003810:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003812:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003822:	2b00      	cmp	r3, #0
 8003824:	d031      	beq.n	800388a <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003826:	0690      	lsls	r0, r2, #26
 8003828:	d505      	bpl.n	8003836 <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800382a:	068a      	lsls	r2, r1, #26
 800382c:	d503      	bpl.n	8003836 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 800382e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003830:	b10b      	cbz	r3, 8003836 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8003832:	4620      	mov	r0, r4
 8003834:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003836:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8003838:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800383c:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800383e:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 800384a:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800384c:	d01e      	beq.n	800388c <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 800384e:	f7ff ff57 	bl	8003700 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003852:	68b3      	ldr	r3, [r6, #8]
 8003854:	065b      	lsls	r3, r3, #25
 8003856:	d515      	bpl.n	8003884 <HAL_UART_IRQHandler+0x118>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003858:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	f102 0308 	add.w	r3, r2, #8
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	3208      	adds	r2, #8
 8003868:	e842 3100 	strex	r1, r3, [r2]
 800386c:	2900      	cmp	r1, #0
 800386e:	d1f3      	bne.n	8003858 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8003870:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003872:	b138      	cbz	r0, 8003884 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_UART_IRQHandler+0x29c>)
 8003876:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003878:	f7fe fbd3 	bl	8002022 <HAL_DMA_Abort_IT>
 800387c:	b128      	cbz	r0, 800388a <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800387e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003880:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003882:	e786      	b.n	8003792 <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff ff64 	bl	8003752 <HAL_UART_ErrorCallback>
}
 800388a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800388c:	f7ff ff61 	bl	8003752 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8003894:	e7f9      	b.n	800388a <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003896:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003898:	2801      	cmp	r0, #1
 800389a:	f040 8087 	bne.w	80039ac <HAL_UART_IRQHandler+0x240>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800389e:	06d6      	lsls	r6, r2, #27
 80038a0:	f140 8084 	bpl.w	80039ac <HAL_UART_IRQHandler+0x240>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038a4:	06c8      	lsls	r0, r1, #27
 80038a6:	f140 8081 	bpl.w	80039ac <HAL_UART_IRQHandler+0x240>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038aa:	2210      	movs	r2, #16
 80038ac:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	0651      	lsls	r1, r2, #25
 80038b2:	d549      	bpl.n	8003948 <HAL_UART_IRQHandler+0x1dc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80038b6:	6811      	ldr	r1, [r2, #0]
 80038b8:	684a      	ldr	r2, [r1, #4]
 80038ba:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80038bc:	2a00      	cmp	r2, #0
 80038be:	d0e4      	beq.n	800388a <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c0:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 80038c4:	4290      	cmp	r0, r2
 80038c6:	d9e0      	bls.n	800388a <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 80038c8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038cc:	680a      	ldr	r2, [r1, #0]
 80038ce:	0692      	lsls	r2, r2, #26
 80038d0:	d42e      	bmi.n	8003930 <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	e843 2100 	strex	r1, r2, [r3]
 80038de:	2900      	cmp	r1, #0
 80038e0:	d1f7      	bne.n	80038d2 <HAL_UART_IRQHandler+0x166>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	f103 0208 	add.w	r2, r3, #8
 80038e6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	f103 0008 	add.w	r0, r3, #8
 80038f2:	e840 2100 	strex	r1, r2, [r0]
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d1f3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x176>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	f103 0208 	add.w	r2, r3, #8
 80038fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	f103 0008 	add.w	r0, r3, #8
 800390a:	e840 2100 	strex	r1, r2, [r0]
 800390e:	2900      	cmp	r1, #0
 8003910:	d1f3      	bne.n	80038fa <HAL_UART_IRQHandler+0x18e>
          huart->RxState = HAL_UART_STATE_READY;
 8003912:	2220      	movs	r2, #32
 8003914:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	e843 2100 	strex	r1, r2, [r3]
 8003926:	2900      	cmp	r1, #0
 8003928:	d1f7      	bne.n	800391a <HAL_UART_IRQHandler+0x1ae>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800392a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800392c:	f7fe fb58 	bl	8001fe0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003930:	2302      	movs	r3, #2
 8003932:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003934:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003938:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800393c:	1ac9      	subs	r1, r1, r3
 800393e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff ff11 	bl	8003768 <HAL_UARTEx_RxEventCallback>
 8003946:	e7a0      	b.n	800388a <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003948:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800394c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003950:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8003954:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003956:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003958:	2800      	cmp	r0, #0
 800395a:	d096      	beq.n	800388a <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800395c:	1a89      	subs	r1, r1, r2
 800395e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003960:	2900      	cmp	r1, #0
 8003962:	d092      	beq.n	800388a <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	e843 2000 	strex	r0, r2, [r3]
 8003970:	2800      	cmp	r0, #0
 8003972:	d1f7      	bne.n	8003964 <HAL_UART_IRQHandler+0x1f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	f103 0208 	add.w	r2, r3, #8
 8003978:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	f103 0508 	add.w	r5, r3, #8
 8003984:	e845 2000 	strex	r0, r2, [r5]
 8003988:	2800      	cmp	r0, #0
 800398a:	d1f3      	bne.n	8003974 <HAL_UART_IRQHandler+0x208>
        huart->RxState = HAL_UART_STATE_READY;
 800398c:	2220      	movs	r2, #32
 800398e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8003992:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	e843 2000 	strex	r0, r2, [r3]
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d1f7      	bne.n	8003996 <HAL_UART_IRQHandler+0x22a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a6:	2302      	movs	r3, #2
 80039a8:	6663      	str	r3, [r4, #100]	; 0x64
 80039aa:	e7c9      	b.n	8003940 <HAL_UART_IRQHandler+0x1d4>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039ac:	02d6      	lsls	r6, r2, #11
 80039ae:	d509      	bpl.n	80039c4 <HAL_UART_IRQHandler+0x258>
 80039b0:	0268      	lsls	r0, r5, #9
 80039b2:	d507      	bpl.n	80039c4 <HAL_UART_IRQHandler+0x258>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80039b8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80039c0:	f000 bc20 	b.w	8004204 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039c4:	0616      	lsls	r6, r2, #24
 80039c6:	d507      	bpl.n	80039d8 <HAL_UART_IRQHandler+0x26c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039c8:	060d      	lsls	r5, r1, #24
 80039ca:	d505      	bpl.n	80039d8 <HAL_UART_IRQHandler+0x26c>
    if (huart->TxISR != NULL)
 80039cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f43f af5b 	beq.w	800388a <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 80039d4:	4620      	mov	r0, r4
 80039d6:	e6dc      	b.n	8003792 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039d8:	0650      	lsls	r0, r2, #25
 80039da:	f57f af56 	bpl.w	800388a <HAL_UART_IRQHandler+0x11e>
 80039de:	064a      	lsls	r2, r1, #25
 80039e0:	f57f af53 	bpl.w	800388a <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	e843 2100 	strex	r1, r2, [r3]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d1f7      	bne.n	80039e4 <HAL_UART_IRQHandler+0x278>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	2320      	movs	r3, #32
 80039f6:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039f8:	66e1      	str	r1, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039fa:	4620      	mov	r0, r4
 80039fc:	f7ff fea8 	bl	8003750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a00:	e743      	b.n	800388a <HAL_UART_IRQHandler+0x11e>
 8003a02:	bf00      	nop
 8003a04:	04000120 	.word	0x04000120
 8003a08:	08003755 	.word	0x08003755

08003a0c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a0c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a10:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a12:	2922      	cmp	r1, #34	; 0x22
{
 8003a14:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8003a16:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a1a:	d155      	bne.n	8003ac8 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a1c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a1e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003a20:	400b      	ands	r3, r1
 8003a22:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8003a24:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a26:	3301      	adds	r3, #1
 8003a28:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003a2a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a36:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d142      	bne.n	8003ac6 <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	e852 3f00 	ldrex	r3, [r2]
 8003a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003a4e:	6803      	ldr	r3, [r0, #0]
 8003a50:	2900      	cmp	r1, #0
 8003a52:	d1f5      	bne.n	8003a40 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	f103 0208 	add.w	r2, r3, #8
 8003a58:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	f103 0c08 	add.w	ip, r3, #8
 8003a64:	e84c 2100 	strex	r1, r2, [ip]
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d1f3      	bne.n	8003a54 <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <UART_RxISR_8BIT+0xc8>)
      huart->RxISR = NULL;
 8003a74:	6681      	str	r1, [r0, #104]	; 0x68
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a76:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	6641      	str	r1, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a7a:	d105      	bne.n	8003a88 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003a7e:	2a01      	cmp	r2, #1
 8003a80:	d00e      	beq.n	8003aa0 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a82:	f7fe f80d 	bl	8001aa0 <HAL_UART_RxCpltCallback>
 8003a86:	e01e      	b.n	8003ac6 <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	0211      	lsls	r1, r2, #8
 8003a8c:	d5f6      	bpl.n	8003a7c <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a92:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	e843 2100 	strex	r1, r2, [r3]
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d1f7      	bne.n	8003a8e <UART_RxISR_8BIT+0x82>
 8003a9e:	e7ed      	b.n	8003a7c <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	e843 2100 	strex	r1, r2, [r3]
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d1f7      	bne.n	8003aa4 <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ab4:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aba:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003abc:	bf44      	itt	mi
 8003abe:	2210      	movmi	r2, #16
 8003ac0:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac2:	f7ff fe51 	bl	8003768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ac6:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ac8:	8b13      	ldrh	r3, [r2, #24]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	8313      	strh	r3, [r2, #24]
}
 8003ad2:	e7f8      	b.n	8003ac6 <UART_RxISR_8BIT+0xba>
 8003ad4:	40008000 	.word	0x40008000

08003ad8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8003adc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae0:	2a22      	cmp	r2, #34	; 0x22
{
 8003ae2:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ae4:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae6:	d152      	bne.n	8003b8e <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ae8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8003aea:	4011      	ands	r1, r2
 8003aec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003aee:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8003af2:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003af4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8003af8:	3a01      	subs	r2, #1
 8003afa:	b292      	uxth	r2, r2
 8003afc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b00:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8003b04:	b292      	uxth	r2, r2
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d140      	bne.n	8003b8c <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	e843 2100 	strex	r1, r2, [r3]
 8003b16:	2900      	cmp	r1, #0
 8003b18:	d1f7      	bne.n	8003b0a <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	f103 0208 	add.w	r2, r3, #8
 8003b1e:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f103 0c08 	add.w	ip, r3, #8
 8003b2a:	e84c 2100 	strex	r1, r2, [ip]
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	d1f3      	bne.n	8003b1a <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b32:	2220      	movs	r2, #32
 8003b34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <UART_RxISR_16BIT+0xc4>)
      huart->RxISR = NULL;
 8003b3a:	6681      	str	r1, [r0, #104]	; 0x68
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b3c:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3e:	6641      	str	r1, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b40:	d105      	bne.n	8003b4e <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b42:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003b44:	2a01      	cmp	r2, #1
 8003b46:	d00e      	beq.n	8003b66 <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b48:	f7fd ffaa 	bl	8001aa0 <HAL_UART_RxCpltCallback>
 8003b4c:	e01e      	b.n	8003b8c <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	0211      	lsls	r1, r2, #8
 8003b52:	d5f6      	bpl.n	8003b42 <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b58:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	e843 2100 	strex	r1, r2, [r3]
 8003b60:	2900      	cmp	r1, #0
 8003b62:	d1f7      	bne.n	8003b54 <UART_RxISR_16BIT+0x7c>
 8003b64:	e7ed      	b.n	8003b42 <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	2200      	movs	r2, #0
 8003b68:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	e843 2100 	strex	r1, r2, [r3]
 8003b76:	2900      	cmp	r1, #0
 8003b78:	d1f7      	bne.n	8003b6a <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b7a:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b80:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b82:	bf44      	itt	mi
 8003b84:	2210      	movmi	r2, #16
 8003b86:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b88:	f7ff fdee 	bl	8003768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b8c:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b8e:	8b1a      	ldrh	r2, [r3, #24]
 8003b90:	b292      	uxth	r2, r2
 8003b92:	f042 0208 	orr.w	r2, r2, #8
 8003b96:	831a      	strh	r2, [r3, #24]
}
 8003b98:	e7f8      	b.n	8003b8c <UART_RxISR_16BIT+0xb4>
 8003b9a:	bf00      	nop
 8003b9c:	40008000 	.word	0x40008000

08003ba0 <UART_SetConfig>:
{
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ba4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba6:	6921      	ldr	r1, [r4, #16]
 8003ba8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003baa:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bac:	69c0      	ldr	r0, [r0, #28]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	6961      	ldr	r1, [r4, #20]
 8003bb2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb4:	498f      	ldr	r1, [pc, #572]	; (8003df4 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb8:	4029      	ands	r1, r5
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68e1      	ldr	r1, [r4, #12]
 8003bc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bca:	4a8b      	ldr	r2, [pc, #556]	; (8003df8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bcc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bce:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003bd0:	bf1c      	itt	ne
 8003bd2:	6a22      	ldrne	r2, [r4, #32]
 8003bd4:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be0:	4a86      	ldr	r2, [pc, #536]	; (8003dfc <UART_SetConfig+0x25c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d117      	bne.n	8003c16 <UART_SetConfig+0x76>
 8003be6:	4b86      	ldr	r3, [pc, #536]	; (8003e00 <UART_SetConfig+0x260>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	f200 80cf 	bhi.w	8003d96 <UART_SetConfig+0x1f6>
 8003bf8:	4a82      	ldr	r2, [pc, #520]	; (8003e04 <UART_SetConfig+0x264>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c00:	f040 8099 	bne.w	8003d36 <UART_SetConfig+0x196>
    switch (clocksource)
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d822      	bhi.n	8003c4e <UART_SetConfig+0xae>
 8003c08:	e8df f003 	tbb	[pc, r3]
 8003c0c:	2193c8d9 	.word	0x2193c8d9
 8003c10:	212121ce 	.word	0x212121ce
 8003c14:	dd          	.byte	0xdd
 8003c15:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c16:	4a7c      	ldr	r2, [pc, #496]	; (8003e08 <UART_SetConfig+0x268>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d106      	bne.n	8003c2a <UART_SetConfig+0x8a>
 8003c1c:	4b78      	ldr	r3, [pc, #480]	; (8003e00 <UART_SetConfig+0x260>)
 8003c1e:	4a7b      	ldr	r2, [pc, #492]	; (8003e0c <UART_SetConfig+0x26c>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	e7e7      	b.n	8003bfa <UART_SetConfig+0x5a>
 8003c2a:	4a79      	ldr	r2, [pc, #484]	; (8003e10 <UART_SetConfig+0x270>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d119      	bne.n	8003c64 <UART_SetConfig+0xc4>
 8003c30:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <UART_SetConfig+0x260>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	f000 80b7 	beq.w	8003dae <UART_SetConfig+0x20e>
 8003c40:	d807      	bhi.n	8003c52 <UART_SetConfig+0xb2>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80b8 	beq.w	8003db8 <UART_SetConfig+0x218>
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	f000 80aa 	beq.w	8003da2 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c4e:	2001      	movs	r0, #1
 8003c50:	e04e      	b.n	8003cf0 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c52:	2b30      	cmp	r3, #48	; 0x30
 8003c54:	d1fb      	bne.n	8003c4e <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c5a:	f000 80b4 	beq.w	8003dc6 <UART_SetConfig+0x226>
 8003c5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c62:	e083      	b.n	8003d6c <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c64:	4a6b      	ldr	r2, [pc, #428]	; (8003e14 <UART_SetConfig+0x274>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10f      	bne.n	8003c8a <UART_SetConfig+0xea>
 8003c6a:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <UART_SetConfig+0x260>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	f000 809a 	beq.w	8003dae <UART_SetConfig+0x20e>
 8003c7a:	d804      	bhi.n	8003c86 <UART_SetConfig+0xe6>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 809b 	beq.w	8003db8 <UART_SetConfig+0x218>
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	e7e1      	b.n	8003c4a <UART_SetConfig+0xaa>
 8003c86:	2bc0      	cmp	r3, #192	; 0xc0
 8003c88:	e7e4      	b.n	8003c54 <UART_SetConfig+0xb4>
 8003c8a:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <UART_SetConfig+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d112      	bne.n	8003cb6 <UART_SetConfig+0x116>
 8003c90:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <UART_SetConfig+0x260>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9e:	f000 8086 	beq.w	8003dae <UART_SetConfig+0x20e>
 8003ca2:	d805      	bhi.n	8003cb0 <UART_SetConfig+0x110>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8087 	beq.w	8003db8 <UART_SetConfig+0x218>
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	e7cc      	b.n	8003c4a <UART_SetConfig+0xaa>
 8003cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb4:	e7ce      	b.n	8003c54 <UART_SetConfig+0xb4>
 8003cb6:	4a50      	ldr	r2, [pc, #320]	; (8003df8 <UART_SetConfig+0x258>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d1c8      	bne.n	8003c4e <UART_SetConfig+0xae>
 8003cbc:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <UART_SetConfig+0x260>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cca:	d015      	beq.n	8003cf8 <UART_SetConfig+0x158>
 8003ccc:	d806      	bhi.n	8003cdc <UART_SetConfig+0x13c>
 8003cce:	b15b      	cbz	r3, 8003ce8 <UART_SetConfig+0x148>
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d1bb      	bne.n	8003c4e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7fe fe8b 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
        break;
 8003cda:	e007      	b.n	8003cec <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ce0:	d1b5      	bne.n	8003c4e <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ce6:	e008      	b.n	8003cfa <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7ff f9fa 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003cec:	b928      	cbnz	r0, 8003cfa <UART_SetConfig+0x15a>
 8003cee:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003cf0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003cf2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003cf8:	4848      	ldr	r0, [pc, #288]	; (8003e1c <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cfa:	6862      	ldr	r2, [r4, #4]
 8003cfc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003d00:	4283      	cmp	r3, r0
 8003d02:	d8a4      	bhi.n	8003c4e <UART_SetConfig+0xae>
 8003d04:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003d08:	d8a1      	bhi.n	8003c4e <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d0a:	0851      	lsrs	r1, r2, #1
 8003d0c:	2500      	movs	r5, #0
 8003d0e:	468c      	mov	ip, r1
 8003d10:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003d14:	4629      	mov	r1, r5
 8003d16:	fbe0 c106 	umlal	ip, r1, r0, r6
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	4660      	mov	r0, ip
 8003d1e:	f7fc ff93 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d22:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <UART_SetConfig+0x280>)
 8003d24:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d890      	bhi.n	8003c4e <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	60d8      	str	r0, [r3, #12]
 8003d30:	e7dd      	b.n	8003cee <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8003d32:	483a      	ldr	r0, [pc, #232]	; (8003e1c <UART_SetConfig+0x27c>)
 8003d34:	e047      	b.n	8003dc6 <UART_SetConfig+0x226>
    switch (clocksource)
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d889      	bhi.n	8003c4e <UART_SetConfig+0xae>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x1a0>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d8b 	.word	0x08003d8b
 8003d48:	08003db5 	.word	0x08003db5
 8003d4c:	08003c4f 	.word	0x08003c4f
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003c4f 	.word	0x08003c4f
 8003d58:	08003c4f 	.word	0x08003c4f
 8003d5c:	08003c4f 	.word	0x08003c4f
 8003d60:	08003c5f 	.word	0x08003c5f
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d64:	f7ff f9bc 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d0c0      	beq.n	8003cee <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6c:	6862      	ldr	r2, [r4, #4]
 8003d6e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003d72:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d76:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003d7a:	f1a3 0110 	sub.w	r1, r3, #16
 8003d7e:	4291      	cmp	r1, r2
 8003d80:	f63f af65 	bhi.w	8003c4e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	60d3      	str	r3, [r2, #12]
 8003d88:	e7b1      	b.n	8003cee <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8a:	f7ff f9bb 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
        break;
 8003d8e:	e7eb      	b.n	8003d68 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d90:	f7fe fe2e 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
        break;
 8003d94:	e7e8      	b.n	8003d68 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003d9a:	d1f6      	bne.n	8003d8a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7ff f9b2 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
        break;
 8003da0:	e00f      	b.n	8003dc2 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003da6:	d1f3      	bne.n	8003d90 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003da8:	f7fe fe22 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
        break;
 8003dac:	e009      	b.n	8003dc2 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003db2:	d0be      	beq.n	8003d32 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4819      	ldr	r0, [pc, #100]	; (8003e1c <UART_SetConfig+0x27c>)
 8003db6:	e7d9      	b.n	8003d6c <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003dbc:	d1d2      	bne.n	8003d64 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbe:	f7ff f98f 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d093      	beq.n	8003cee <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	0853      	lsrs	r3, r2, #1
 8003dca:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003dce:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003dd6:	f1a3 0110 	sub.w	r1, r3, #16
 8003dda:	4291      	cmp	r1, r2
 8003ddc:	f63f af37 	bhi.w	8003c4e <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de0:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003de4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de6:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003de8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
 8003df0:	e77d      	b.n	8003cee <UART_SetConfig+0x14e>
 8003df2:	bf00      	nop
 8003df4:	efff69f3 	.word	0xefff69f3
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0800994c 	.word	0x0800994c
 8003e08:	40004400 	.word	0x40004400
 8003e0c:	0800994f 	.word	0x0800994f
 8003e10:	40004800 	.word	0x40004800
 8003e14:	40004c00 	.word	0x40004c00
 8003e18:	40005000 	.word	0x40005000
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	000ffcff 	.word	0x000ffcff

08003e24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003e26:	071a      	lsls	r2, r3, #28
{
 8003e28:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2a:	d506      	bpl.n	8003e3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2c:	6801      	ldr	r1, [r0, #0]
 8003e2e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003e30:	684a      	ldr	r2, [r1, #4]
 8003e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e36:	4322      	orrs	r2, r4
 8003e38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e3a:	07dc      	lsls	r4, r3, #31
 8003e3c:	d506      	bpl.n	8003e4c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e3e:	6801      	ldr	r1, [r0, #0]
 8003e40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003e42:	684a      	ldr	r2, [r1, #4]
 8003e44:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003e48:	4322      	orrs	r2, r4
 8003e4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4c:	0799      	lsls	r1, r3, #30
 8003e4e:	d506      	bpl.n	8003e5e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e50:	6801      	ldr	r1, [r0, #0]
 8003e52:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003e54:	684a      	ldr	r2, [r1, #4]
 8003e56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e5a:	4322      	orrs	r2, r4
 8003e5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e5e:	075a      	lsls	r2, r3, #29
 8003e60:	d506      	bpl.n	8003e70 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e62:	6801      	ldr	r1, [r0, #0]
 8003e64:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003e66:	684a      	ldr	r2, [r1, #4]
 8003e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e6c:	4322      	orrs	r2, r4
 8003e6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e70:	06dc      	lsls	r4, r3, #27
 8003e72:	d506      	bpl.n	8003e82 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e74:	6801      	ldr	r1, [r0, #0]
 8003e76:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003e78:	688a      	ldr	r2, [r1, #8]
 8003e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e7e:	4322      	orrs	r2, r4
 8003e80:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e82:	0699      	lsls	r1, r3, #26
 8003e84:	d506      	bpl.n	8003e94 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e86:	6801      	ldr	r1, [r0, #0]
 8003e88:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003e8a:	688a      	ldr	r2, [r1, #8]
 8003e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e90:	4322      	orrs	r2, r4
 8003e92:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e94:	065a      	lsls	r2, r3, #25
 8003e96:	d50f      	bpl.n	8003eb8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e98:	6801      	ldr	r1, [r0, #0]
 8003e9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e9c:	684a      	ldr	r2, [r1, #4]
 8003e9e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003ea2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ea4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eaa:	d105      	bne.n	8003eb8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eac:	684a      	ldr	r2, [r1, #4]
 8003eae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003eb0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003eb4:	4322      	orrs	r2, r4
 8003eb6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	d506      	bpl.n	8003eca <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ebc:	6802      	ldr	r2, [r0, #0]
 8003ebe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003ec0:	6853      	ldr	r3, [r2, #4]
 8003ec2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6053      	str	r3, [r2, #4]
}
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <UART_WaitOnFlagUntilTimeout>:
{
 8003ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460f      	mov	r7, r1
 8003ed8:	4616      	mov	r6, r2
 8003eda:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	69d3      	ldr	r3, [r2, #28]
 8003ee0:	ea37 0303 	bics.w	r3, r7, r3
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	42b3      	cmp	r3, r6
 8003eec:	d001      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003eee:	2000      	movs	r0, #0
 8003ef0:	e01e      	b.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003ef6:	d0f2      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef8:	f7fd ff92 	bl	8001e20 <HAL_GetTick>
 8003efc:	eba0 0008 	sub.w	r0, r0, r8
 8003f00:	4548      	cmp	r0, r9
 8003f02:	d825      	bhi.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x84>
 8003f04:	f1b9 0f00 	cmp.w	r9, #0
 8003f08:	d022      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f0a:	6820      	ldr	r0, [r4, #0]
 8003f0c:	6803      	ldr	r3, [r0, #0]
 8003f0e:	075a      	lsls	r2, r3, #29
 8003f10:	d5e4      	bpl.n	8003edc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f12:	69c5      	ldr	r5, [r0, #28]
 8003f14:	f015 0508 	ands.w	r5, r5, #8
 8003f18:	d00c      	beq.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f1a:	2508      	movs	r5, #8
 8003f1c:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff fbee 	bl	8003700 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003f24:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f26:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003f2a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 8003f2e:	2001      	movs	r0, #1
}
 8003f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f34:	69c3      	ldr	r3, [r0, #28]
 8003f36:	051b      	lsls	r3, r3, #20
 8003f38:	d5d0      	bpl.n	8003edc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f3e:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff fbdd 	bl	8003700 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f46:	2320      	movs	r3, #32
 8003f48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003f4c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 8003f50:	2003      	movs	r0, #3
 8003f52:	e7ed      	b.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x64>

08003f54 <HAL_UART_Transmit>:
{
 8003f54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003f58:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003f5c:	2b20      	cmp	r3, #32
{
 8003f5e:	4604      	mov	r4, r0
 8003f60:	460e      	mov	r6, r1
 8003f62:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003f64:	d144      	bne.n	8003ff0 <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8003f66:	2900      	cmp	r1, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_UART_Transmit+0xa0>
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	d042      	beq.n	8003ff4 <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f6e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	2500      	movs	r5, #0
 8003f72:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f76:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003f78:	f7fd ff52 	bl	8001e20 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8003f7e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f82:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003f86:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003f88:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	d103      	bne.n	8003f96 <HAL_UART_Transmit+0x42>
 8003f8e:	6922      	ldr	r2, [r4, #16]
 8003f90:	b90a      	cbnz	r2, 8003f96 <HAL_UART_Transmit+0x42>
 8003f92:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003f94:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8003f96:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f9a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	b94a      	cbnz	r2, 8003fb6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f7ff ff91 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8003faa:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8003fac:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fae:	b960      	cbnz	r0, 8003fca <HAL_UART_Transmit+0x76>
}
 8003fb0:	b004      	add	sp, #16
 8003fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	4620      	mov	r0, r4
 8003fbc:	9303      	str	r3, [sp, #12]
 8003fbe:	f7ff ff85 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	b118      	cbz	r0, 8003fce <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003fca:	2003      	movs	r0, #3
 8003fcc:	e7f0      	b.n	8003fb0 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fce:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003fd0:	b95e      	cbnz	r6, 8003fea <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fd2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fda:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8003fdc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8003fe8:	e7d5      	b.n	8003f96 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fea:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003fee:	e7f4      	b.n	8003fda <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	e7dd      	b.n	8003fb0 <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7db      	b.n	8003fb0 <HAL_UART_Transmit+0x5c>

08003ff8 <UART_CheckIdleState>:
{
 8003ff8:	b530      	push	{r4, r5, lr}
 8003ffa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	2500      	movs	r5, #0
{
 8003ffe:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004000:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004004:	f7fd ff0c 	bl	8001e20 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800400e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004010:	d51c      	bpl.n	800404c <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004012:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004016:	9200      	str	r2, [sp, #0]
 8004018:	9003      	str	r0, [sp, #12]
 800401a:	462a      	mov	r2, r5
 800401c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004020:	4620      	mov	r0, r4
 8004022:	f7ff ff53 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	b180      	cbz	r0, 800404c <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800402a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	e852 3f00 	ldrex	r3, [r2]
 8004030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	e842 3100 	strex	r1, r3, [r2]
 8004038:	2900      	cmp	r1, #0
 800403a:	d1f6      	bne.n	800402a <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 800403c:	2320      	movs	r3, #32
 800403e:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004040:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004042:	2300      	movs	r3, #0
 8004044:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8004048:	b005      	add	sp, #20
 800404a:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	0752      	lsls	r2, r2, #29
 8004052:	d523      	bpl.n	800409c <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004058:	9200      	str	r2, [sp, #0]
 800405a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800405e:	2200      	movs	r2, #0
 8004060:	4620      	mov	r0, r4
 8004062:	f7ff ff33 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8004066:	b1c8      	cbz	r0, 800409c <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004068:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	e852 3f00 	ldrex	r3, [r2]
 800406e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	2900      	cmp	r1, #0
 800407a:	d1f5      	bne.n	8004068 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	f102 0308 	add.w	r3, r2, #8
 8004080:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	f102 0008 	add.w	r0, r2, #8
 800408c:	e840 3100 	strex	r1, r3, [r0]
 8004090:	2900      	cmp	r1, #0
 8004092:	d1f3      	bne.n	800407c <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8004094:	2320      	movs	r3, #32
 8004096:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800409a:	e7d1      	b.n	8004040 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 800409c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a8:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 80040aa:	e7ca      	b.n	8004042 <UART_CheckIdleState+0x4a>

080040ac <HAL_UART_Init>:
{
 80040ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80040ae:	4604      	mov	r4, r0
 80040b0:	b340      	cbz	r0, 8004104 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80040b2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80040b4:	b91b      	cbnz	r3, 80040be <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80040b6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80040ba:	f7fd fdaf 	bl	8001c1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80040be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	2324      	movs	r3, #36	; 0x24
 80040c2:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80040c4:	6813      	ldr	r3, [r2, #0]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ce:	b113      	cbz	r3, 80040d6 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff fea7 	bl	8003e24 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fd62 	bl	8003ba0 <UART_SetConfig>
 80040dc:	2801      	cmp	r0, #1
 80040de:	d011      	beq.n	8004104 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80040f8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004100:	f7ff bf7a 	b.w	8003ff8 <UART_CheckIdleState>
}
 8004104:	2001      	movs	r0, #1
 8004106:	bd10      	pop	{r4, pc}

08004108 <UART_Start_Receive_IT>:
{
 8004108:	b510      	push	{r4, lr}
  huart->RxXferSize  = Size;
 800410a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800410e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  UART_MASK_COMPUTATION(huart);
 8004112:	6882      	ldr	r2, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8004114:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8004116:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8004118:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  huart->RxISR       = NULL;
 800411c:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 800411e:	d130      	bne.n	8004182 <UART_Start_Receive_IT+0x7a>
 8004120:	6903      	ldr	r3, [r0, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004128:	bf18      	it	ne
 800412a:	23ff      	movne	r3, #255	; 0xff
 800412c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004136:	2322      	movs	r3, #34	; 0x22
 8004138:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	f102 0308 	add.w	r3, r2, #8
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	3208      	adds	r2, #8
 800414c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004150:	6802      	ldr	r2, [r0, #0]
 8004152:	2900      	cmp	r1, #0
 8004154:	d1f2      	bne.n	800413c <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004156:	6883      	ldr	r3, [r0, #8]
 8004158:	6901      	ldr	r1, [r0, #16]
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d120      	bne.n	80041a2 <UART_Start_Receive_IT+0x9a>
    huart->RxISR = UART_RxISR_8BIT;
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <UART_Start_Receive_IT+0xb0>)
 8004162:	4c16      	ldr	r4, [pc, #88]	; (80041bc <UART_Start_Receive_IT+0xb4>)
 8004164:	2900      	cmp	r1, #0
 8004166:	bf18      	it	ne
 8004168:	4623      	movne	r3, r4
 800416a:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800416c:	b1d9      	cbz	r1, 80041a6 <UART_Start_Receive_IT+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004172:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	e842 3100 	strex	r1, r3, [r2]
 800417a:	2900      	cmp	r1, #0
 800417c:	d1f7      	bne.n	800416e <UART_Start_Receive_IT+0x66>
}
 800417e:	2000      	movs	r0, #0
 8004180:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8004182:	b92a      	cbnz	r2, 8004190 <UART_Start_Receive_IT+0x88>
 8004184:	6903      	ldr	r3, [r0, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	237f      	movne	r3, #127	; 0x7f
 800418c:	23ff      	moveq	r3, #255	; 0xff
 800418e:	e7cd      	b.n	800412c <UART_Start_Receive_IT+0x24>
 8004190:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004194:	d1ca      	bne.n	800412c <UART_Start_Receive_IT+0x24>
 8004196:	6903      	ldr	r3, [r0, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	237f      	moveq	r3, #127	; 0x7f
 800419e:	233f      	movne	r3, #63	; 0x3f
 80041a0:	e7c4      	b.n	800412c <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <UART_Start_Receive_IT+0xb4>)
 80041a4:	e7e1      	b.n	800416a <UART_Start_Receive_IT+0x62>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041aa:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	e842 3100 	strex	r1, r3, [r2]
 80041b2:	2900      	cmp	r1, #0
 80041b4:	d1f7      	bne.n	80041a6 <UART_Start_Receive_IT+0x9e>
 80041b6:	e7e2      	b.n	800417e <UART_Start_Receive_IT+0x76>
 80041b8:	08003ad9 	.word	0x08003ad9
 80041bc:	08003a0d 	.word	0x08003a0d

080041c0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80041c4:	2b20      	cmp	r3, #32
{
 80041c6:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c8:	d115      	bne.n	80041f6 <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 80041ca:	b1b9      	cbz	r1, 80041fc <HAL_UART_Receive_IT+0x3c>
 80041cc:	b1b2      	cbz	r2, 80041fc <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041d0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d2:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_UART_Receive_IT+0x40>)
 80041d6:	429c      	cmp	r4, r3
 80041d8:	d00a      	beq.n	80041f0 <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	d507      	bpl.n	80041f0 <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	e844 3500 	strex	r5, r3, [r4]
 80041ec:	2d00      	cmp	r5, #0
 80041ee:	d1f7      	bne.n	80041e0 <HAL_UART_Receive_IT+0x20>
}
 80041f0:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80041f2:	f7ff bf89 	b.w	8004108 <UART_Start_Receive_IT>
    return HAL_BUSY;
 80041f6:	2002      	movs	r0, #2
}
 80041f8:	bc30      	pop	{r4, r5}
 80041fa:	4770      	bx	lr
      return HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
 80041fe:	e7fb      	b.n	80041f8 <HAL_UART_Receive_IT+0x38>
 8004200:	40008000 	.word	0x40008000

08004204 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004204:	4770      	bx	lr

08004206 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004206:	f000 bbff 	b.w	8004a08 <ai_platform_network_get_error>
	...

0800420c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800420c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800420e:	2305      	movs	r3, #5
 8004210:	2200      	movs	r2, #0
 8004212:	e9cd 3200 	strd	r3, r2, [sp]
 8004216:	4a03      	ldr	r2, [pc, #12]	; (8004224 <ai_network_create+0x18>)
 8004218:	2301      	movs	r3, #1
 800421a:	f000 fe0f 	bl	8004e3c <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800421e:	b003      	add	sp, #12
 8004220:	f85d fb04 	ldr.w	pc, [sp], #4
 8004224:	2000068c 	.word	0x2000068c

08004228 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8004228:	b910      	cbnz	r0, 8004230 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800422a:	4802      	ldr	r0, [pc, #8]	; (8004234 <ai_network_inputs_get+0xc>)
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <ai_network_inputs_get+0x10>)
 800422e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004230:	f000 bc5e 	b.w	8004af0 <ai_platform_inputs_get>
 8004234:	2000068c 	.word	0x2000068c
 8004238:	a1c00100 	.word	0xa1c00100

0800423c <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800423c:	b910      	cbnz	r0, 8004244 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800423e:	4802      	ldr	r0, [pc, #8]	; (8004248 <ai_network_outputs_get+0xc>)
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <ai_network_outputs_get+0x10>)
 8004242:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004244:	f000 bd2a 	b.w	8004c9c <ai_platform_outputs_get>
 8004248:	2000068c 	.word	0x2000068c
 800424c:	a1c00100 	.word	0xa1c00100

08004250 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004254:	4607      	mov	r7, r0
 8004256:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004258:	f000 fec6 	bl	8004fe8 <ai_platform_network_init>
  if (!net_ctx) return false;
 800425c:	4604      	mov	r4, r0
 800425e:	2800      	cmp	r0, #0
 8004260:	d069      	beq.n	8004336 <ai_network_init+0xe6>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004262:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004388 <ai_network_init+0x138>
 8004266:	4632      	mov	r2, r6
 8004268:	2101      	movs	r1, #1
 800426a:	4640      	mov	r0, r8
 800426c:	f000 fb02 	bl	8004874 <ai_platform_get_weights_map>
 8004270:	4605      	mov	r5, r0
 8004272:	2800      	cmp	r0, #0
 8004274:	d061      	beq.n	800433a <ai_network_init+0xea>
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004276:	4a37      	ldr	r2, [pc, #220]	; (8004354 <ai_network_init+0x104>)
 8004278:	6813      	ldr	r3, [r2, #0]
 800427a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800427e:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004280:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004284:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004288:	4a33      	ldr	r2, [pc, #204]	; (8004358 <ai_network_init+0x108>)
 800428a:	6811      	ldr	r1, [r2, #0]
 800428c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004290:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 2080);
 8004292:	f503 6102 	add.w	r1, r3, #2080	; 0x820
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2080);
 8004296:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800429a:	4a30      	ldr	r2, [pc, #192]	; (800435c <ai_network_init+0x10c>)
 800429c:	6811      	ldr	r1, [r2, #0]
 800429e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80042a2:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2184);
 80042a4:	f603 0188 	addw	r1, r3, #2184	; 0x888
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2184);
 80042a8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80042ac:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <ai_network_init+0x110>)
 80042ae:	6811      	ldr	r1, [r2, #0]
 80042b0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80042b4:	6011      	str	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 4888);
 80042b6:	f503 5198 	add.w	r1, r3, #4864	; 0x1300
 80042ba:	3118      	adds	r1, #24
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4888);
 80042bc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80042c0:	4a28      	ldr	r2, [pc, #160]	; (8004364 <ai_network_init+0x114>)
 80042c2:	6811      	ldr	r1, [r2, #0]
 80042c4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80042c8:	6011      	str	r1, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 4992);
 80042ca:	f503 519c 	add.w	r1, r3, #4992	; 0x1380
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4992);
 80042ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80042d2:	4a25      	ldr	r2, [pc, #148]	; (8004368 <ai_network_init+0x118>)
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 5304);
 80042d4:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80042d8:	6811      	ldr	r1, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 5304);
 80042da:	3318      	adds	r3, #24
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5304);
 80042dc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80042e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80042e4:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80042e6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800438c <ai_network_init+0x13c>
 80042ea:	4632      	mov	r2, r6
 80042ec:	2101      	movs	r1, #1
 80042ee:	4640      	mov	r0, r8
 80042f0:	f000 fb14 	bl	800491c <ai_platform_get_activations_map>
 80042f4:	4606      	mov	r6, r0
 80042f6:	b330      	cbz	r0, 8004346 <ai_network_init+0xf6>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 104);
 80042f8:	f8d8 3000 	ldr.w	r3, [r8]
 80042fc:	491b      	ldr	r1, [pc, #108]	; (800436c <ai_network_init+0x11c>)
 80042fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 104);
 8004302:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004306:	491a      	ldr	r1, [pc, #104]	; (8004370 <ai_network_init+0x120>)
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004308:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800430c:	4919      	ldr	r1, [pc, #100]	; (8004374 <ai_network_init+0x124>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800430e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 104);
 8004312:	4919      	ldr	r1, [pc, #100]	; (8004378 <ai_network_init+0x128>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 104);
 8004314:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004318:	4918      	ldr	r1, [pc, #96]	; (800437c <ai_network_init+0x12c>)
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800431a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_2_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 104);
 800431e:	4918      	ldr	r1, [pc, #96]	; (8004380 <ai_network_init+0x130>)
    dense_2_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 104);
 8004320:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <ai_network_init+0x134>)
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004326:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800432a:	4638      	mov	r0, r7
 800432c:	f000 ff4a 	bl	80051c4 <ai_platform_network_post_init>
 8004330:	4030      	ands	r0, r6
 8004332:	4005      	ands	r5, r0
 8004334:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800433a:	2212      	movs	r2, #18
 800433c:	2130      	movs	r1, #48	; 0x30
 800433e:	4620      	mov	r0, r4
 8004340:	f000 fbd0 	bl	8004ae4 <ai_platform_network_set_error>
  return false;
 8004344:	e7cf      	b.n	80042e6 <ai_network_init+0x96>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004346:	2213      	movs	r2, #19
 8004348:	2130      	movs	r1, #48	; 0x30
 800434a:	4620      	mov	r0, r4
 800434c:	f000 fbca 	bl	8004ae4 <ai_platform_network_set_error>
  return false;
 8004350:	e7eb      	b.n	800432a <ai_network_init+0xda>
 8004352:	bf00      	nop
 8004354:	20000630 	.word	0x20000630
 8004358:	200005bc 	.word	0x200005bc
 800435c:	20000458 	.word	0x20000458
 8004360:	200003e4 	.word	0x200003e4
 8004364:	20000544 	.word	0x20000544
 8004368:	200004d0 	.word	0x200004d0
 800436c:	200006f4 	.word	0x200006f4
 8004370:	20000604 	.word	0x20000604
 8004374:	2000067c 	.word	0x2000067c
 8004378:	2000042c 	.word	0x2000042c
 800437c:	200004a4 	.word	0x200004a4
 8004380:	20000518 	.word	0x20000518
 8004384:	20000590 	.word	0x20000590
 8004388:	20000e20 	.word	0x20000e20
 800438c:	20000e1c 	.word	0x20000e1c

08004390 <ai_network_create_and_init>:
{
 8004390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004394:	4688      	mov	r8, r1
 8004396:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004398:	2100      	movs	r1, #0
{
 800439a:	4606      	mov	r6, r0
 800439c:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800439e:	f7ff ff35 	bl	800420c <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 80043a2:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80043a6:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80043a8:	d107      	bne.n	80043ba <ai_network_create_and_init+0x2a>
    if (ai_network_data_params_get(&params) != true) {
 80043aa:	4668      	mov	r0, sp
 80043ac:	f000 f83a 	bl	8004424 <ai_network_data_params_get>
 80043b0:	b938      	cbnz	r0, 80043c2 <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80043b2:	6830      	ldr	r0, [r6, #0]
 80043b4:	f000 fb28 	bl	8004a08 <ai_platform_network_get_error>
 80043b8:	4604      	mov	r4, r0
}
 80043ba:	4620      	mov	r0, r4
 80043bc:	b00f      	add	sp, #60	; 0x3c
 80043be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80043c2:	f1b8 0f00 	cmp.w	r8, #0
 80043c6:	d11a      	bne.n	80043fe <ai_network_create_and_init+0x6e>
    if (weights) {
 80043c8:	bb3f      	cbnz	r7, 800441a <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 80043ca:	6830      	ldr	r0, [r6, #0]
 80043cc:	4669      	mov	r1, sp
 80043ce:	f7ff ff3f 	bl	8004250 <ai_network_init>
 80043d2:	b928      	cbnz	r0, 80043e0 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 80043d4:	6830      	ldr	r0, [r6, #0]
 80043d6:	f000 fb17 	bl	8004a08 <ai_platform_network_get_error>
 80043da:	fa5f f980 	uxtb.w	r9, r0
 80043de:	4604      	mov	r4, r0
    return err;
 80043e0:	f369 0407 	bfi	r4, r9, #0, #8
 80043e4:	e7e9      	b.n	80043ba <ai_network_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80043e6:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 80043ea:	4629      	mov	r1, r5
 80043ec:	a803      	add	r0, sp, #12
 80043ee:	f000 fa2d 	bl	800484c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80043f2:	3501      	adds	r5, #1
 80043f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dcf4      	bgt.n	80043e6 <ai_network_create_and_init+0x56>
 80043fc:	e7e4      	b.n	80043c8 <ai_network_create_and_init+0x38>
 80043fe:	464d      	mov	r5, r9
 8004400:	e7f8      	b.n	80043f4 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004402:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8004406:	4629      	mov	r1, r5
 8004408:	a801      	add	r0, sp, #4
 800440a:	f000 fa1f 	bl	800484c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800440e:	3501      	adds	r5, #1
 8004410:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004414:	42ab      	cmp	r3, r5
 8004416:	dcf4      	bgt.n	8004402 <ai_network_create_and_init+0x72>
 8004418:	e7d7      	b.n	80043ca <ai_network_create_and_init+0x3a>
 800441a:	2500      	movs	r5, #0
 800441c:	e7f8      	b.n	8004410 <ai_network_create_and_init+0x80>

0800441e <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800441e:	f000 bf59 	b.w	80052d4 <ai_platform_network_process>
	...

08004424 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8004424:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8004426:	4603      	mov	r3, r0
{
 8004428:	b085      	sub	sp, #20
  if (!params) return false;
 800442a:	b170      	cbz	r0, 800444a <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800442c:	4c08      	ldr	r4, [pc, #32]	; (8004450 <ai_network_data_params_get+0x2c>)
 800442e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004432:	466a      	mov	r2, sp
 8004434:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004438:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800443c:	ad02      	add	r5, sp, #8
 800443e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004442:	4629      	mov	r1, r5
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fabd 	bl	80049c4 <ai_platform_bind_network_params>
}
 800444a:	b005      	add	sp, #20
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	bf00      	nop
 8004450:	080097cc 	.word	0x080097cc

08004454 <arm_copy_f32>:
 8004454:	b4f0      	push	{r4, r5, r6, r7}
 8004456:	0897      	lsrs	r7, r2, #2
 8004458:	d01d      	beq.n	8004496 <arm_copy_f32+0x42>
 800445a:	f100 0410 	add.w	r4, r0, #16
 800445e:	f101 0310 	add.w	r3, r1, #16
 8004462:	463d      	mov	r5, r7
 8004464:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8004468:	f843 6c10 	str.w	r6, [r3, #-16]
 800446c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8004470:	f843 6c0c 	str.w	r6, [r3, #-12]
 8004474:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004478:	f843 6c08 	str.w	r6, [r3, #-8]
 800447c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004480:	f843 6c04 	str.w	r6, [r3, #-4]
 8004484:	3d01      	subs	r5, #1
 8004486:	f104 0410 	add.w	r4, r4, #16
 800448a:	f103 0310 	add.w	r3, r3, #16
 800448e:	d1e9      	bne.n	8004464 <arm_copy_f32+0x10>
 8004490:	013f      	lsls	r7, r7, #4
 8004492:	4438      	add	r0, r7
 8004494:	4439      	add	r1, r7
 8004496:	f012 0203 	ands.w	r2, r2, #3
 800449a:	d009      	beq.n	80044b0 <arm_copy_f32+0x5c>
 800449c:	6803      	ldr	r3, [r0, #0]
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	3a01      	subs	r2, #1
 80044a2:	d005      	beq.n	80044b0 <arm_copy_f32+0x5c>
 80044a4:	6843      	ldr	r3, [r0, #4]
 80044a6:	604b      	str	r3, [r1, #4]
 80044a8:	2a01      	cmp	r2, #1
 80044aa:	bf1c      	itt	ne
 80044ac:	6883      	ldrne	r3, [r0, #8]
 80044ae:	608b      	strne	r3, [r1, #8]
 80044b0:	bcf0      	pop	{r4, r5, r6, r7}
 80044b2:	4770      	bx	lr

080044b4 <arm_mat_trans_f32>:
 80044b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b8:	8802      	ldrh	r2, [r0, #0]
 80044ba:	884b      	ldrh	r3, [r1, #2]
 80044bc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80044c0:	684f      	ldr	r7, [r1, #4]
 80044c2:	8840      	ldrh	r0, [r0, #2]
 80044c4:	4293      	cmp	r3, r2
 80044c6:	b083      	sub	sp, #12
 80044c8:	d14c      	bne.n	8004564 <arm_mat_trans_f32+0xb0>
 80044ca:	f8b1 e000 	ldrh.w	lr, [r1]
 80044ce:	4586      	cmp	lr, r0
 80044d0:	d148      	bne.n	8004564 <arm_mat_trans_f32+0xb0>
 80044d2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80044d6:	009c      	lsls	r4, r3, #2
 80044d8:	f00e 0e03 	and.w	lr, lr, #3
 80044dc:	fb08 f904 	mul.w	r9, r8, r4
 80044e0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80044e4:	011d      	lsls	r5, r3, #4
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80044ec:	eb07 0a04 	add.w	sl, r7, r4
 80044f0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80044f4:	9201      	str	r2, [sp, #4]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	463b      	mov	r3, r7
 80044fa:	f1b8 0f00 	cmp.w	r8, #0
 80044fe:	d01d      	beq.n	800453c <arm_mat_trans_f32+0x88>
 8004500:	9900      	ldr	r1, [sp, #0]
 8004502:	f10c 0210 	add.w	r2, ip, #16
 8004506:	4439      	add	r1, r7
 8004508:	4640      	mov	r0, r8
 800450a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800450e:	601e      	str	r6, [r3, #0]
 8004510:	ed52 7a03 	vldr	s15, [r2, #-12]
 8004514:	191e      	adds	r6, r3, r4
 8004516:	edc6 7a00 	vstr	s15, [r6]
 800451a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800451e:	600e      	str	r6, [r1, #0]
 8004520:	ed52 7a01 	vldr	s15, [r2, #-4]
 8004524:	190e      	adds	r6, r1, r4
 8004526:	3801      	subs	r0, #1
 8004528:	442b      	add	r3, r5
 800452a:	f102 0210 	add.w	r2, r2, #16
 800452e:	edc6 7a00 	vstr	s15, [r6]
 8004532:	4429      	add	r1, r5
 8004534:	d1e9      	bne.n	800450a <arm_mat_trans_f32+0x56>
 8004536:	44dc      	add	ip, fp
 8004538:	eb09 0307 	add.w	r3, r9, r7
 800453c:	f1be 0f00 	cmp.w	lr, #0
 8004540:	d009      	beq.n	8004556 <arm_mat_trans_f32+0xa2>
 8004542:	4672      	mov	r2, lr
 8004544:	4661      	mov	r1, ip
 8004546:	f851 0b04 	ldr.w	r0, [r1], #4
 800454a:	6018      	str	r0, [r3, #0]
 800454c:	3a01      	subs	r2, #1
 800454e:	4423      	add	r3, r4
 8004550:	d1f9      	bne.n	8004546 <arm_mat_trans_f32+0x92>
 8004552:	9b01      	ldr	r3, [sp, #4]
 8004554:	449c      	add	ip, r3
 8004556:	3704      	adds	r7, #4
 8004558:	4557      	cmp	r7, sl
 800455a:	d1cd      	bne.n	80044f8 <arm_mat_trans_f32+0x44>
 800455c:	2000      	movs	r0, #0
 800455e:	b003      	add	sp, #12
 8004560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004564:	f06f 0002 	mvn.w	r0, #2
 8004568:	e7f9      	b.n	800455e <arm_mat_trans_f32+0xaa>
 800456a:	bf00      	nop

0800456c <arm_mat_mult_f32>:
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	8845      	ldrh	r5, [r0, #2]
 8004572:	880b      	ldrh	r3, [r1, #0]
 8004574:	8806      	ldrh	r6, [r0, #0]
 8004576:	6847      	ldr	r7, [r0, #4]
 8004578:	6854      	ldr	r4, [r2, #4]
 800457a:	6848      	ldr	r0, [r1, #4]
 800457c:	b08b      	sub	sp, #44	; 0x2c
 800457e:	42ab      	cmp	r3, r5
 8004580:	9109      	str	r1, [sp, #36]	; 0x24
 8004582:	9604      	str	r6, [sp, #16]
 8004584:	8849      	ldrh	r1, [r1, #2]
 8004586:	f040 808a 	bne.w	800469e <arm_mat_mult_f32+0x132>
 800458a:	8815      	ldrh	r5, [r2, #0]
 800458c:	42b5      	cmp	r5, r6
 800458e:	f040 8086 	bne.w	800469e <arm_mat_mult_f32+0x132>
 8004592:	8852      	ldrh	r2, [r2, #2]
 8004594:	428a      	cmp	r2, r1
 8004596:	f040 8082 	bne.w	800469e <arm_mat_mult_f32+0x132>
 800459a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800459e:	1d01      	adds	r1, r0, #4
 80045a0:	0116      	lsls	r6, r2, #4
 80045a2:	9108      	str	r1, [sp, #32]
 80045a4:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 80045a8:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 80045ac:	9101      	str	r1, [sp, #4]
 80045ae:	fb06 f108 	mul.w	r1, r6, r8
 80045b2:	0095      	lsls	r5, r2, #2
 80045b4:	9103      	str	r1, [sp, #12]
 80045b6:	00d2      	lsls	r2, r2, #3
 80045b8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80045bc:	f003 0903 	and.w	r9, r3, #3
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	f107 0b10 	add.w	fp, r7, #16
 80045c6:	eb04 0a05 	add.w	sl, r4, r5
 80045ca:	9107      	str	r1, [sp, #28]
 80045cc:	9202      	str	r2, [sp, #8]
 80045ce:	9306      	str	r3, [sp, #24]
 80045d0:	f1ab 0310 	sub.w	r3, fp, #16
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	9b07      	ldr	r3, [sp, #28]
 80045d8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80045dc:	eb03 0c0a 	add.w	ip, r3, sl
 80045e0:	eddf 7a31 	vldr	s15, [pc, #196]	; 80046a8 <arm_mat_mult_f32+0x13c>
 80045e4:	f1b8 0f00 	cmp.w	r8, #0
 80045e8:	d053      	beq.n	8004692 <arm_mat_mult_f32+0x126>
 80045ea:	9b02      	ldr	r3, [sp, #8]
 80045ec:	4644      	mov	r4, r8
 80045ee:	18c1      	adds	r1, r0, r3
 80045f0:	4602      	mov	r2, r0
 80045f2:	465b      	mov	r3, fp
 80045f4:	ed92 6a00 	vldr	s12, [r2]
 80045f8:	ed13 7a04 	vldr	s14, [r3, #-16]
 80045fc:	ed53 4a03 	vldr	s9, [r3, #-12]
 8004600:	ed53 6a02 	vldr	s13, [r3, #-8]
 8004604:	ed91 5a00 	vldr	s10, [r1]
 8004608:	ed53 5a01 	vldr	s11, [r3, #-4]
 800460c:	1957      	adds	r7, r2, r5
 800460e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004612:	ed97 6a00 	vldr	s12, [r7]
 8004616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800461a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800461e:	194f      	adds	r7, r1, r5
 8004620:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004624:	ee26 7a85 	vmul.f32	s14, s13, s10
 8004628:	edd7 7a00 	vldr	s15, [r7]
 800462c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004630:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004634:	3c01      	subs	r4, #1
 8004636:	4432      	add	r2, r6
 8004638:	4431      	add	r1, r6
 800463a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800463e:	f103 0310 	add.w	r3, r3, #16
 8004642:	d1d7      	bne.n	80045f4 <arm_mat_mult_f32+0x88>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	9a01      	ldr	r2, [sp, #4]
 8004648:	4418      	add	r0, r3
 800464a:	f1b9 0f00 	cmp.w	r9, #0
 800464e:	d00b      	beq.n	8004668 <arm_mat_mult_f32+0xfc>
 8004650:	464b      	mov	r3, r9
 8004652:	edd0 6a00 	vldr	s13, [r0]
 8004656:	ecb2 7a01 	vldmia	r2!, {s14}
 800465a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800465e:	3b01      	subs	r3, #1
 8004660:	4428      	add	r0, r5
 8004662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004666:	d1f4      	bne.n	8004652 <arm_mat_mult_f32+0xe6>
 8004668:	ecec 7a01 	vstmia	ip!, {s15}
 800466c:	45d4      	cmp	ip, sl
 800466e:	4670      	mov	r0, lr
 8004670:	f10e 0e04 	add.w	lr, lr, #4
 8004674:	d1b4      	bne.n	80045e0 <arm_mat_mult_f32+0x74>
 8004676:	9a01      	ldr	r2, [sp, #4]
 8004678:	9b06      	ldr	r3, [sp, #24]
 800467a:	4611      	mov	r1, r2
 800467c:	4419      	add	r1, r3
 800467e:	449b      	add	fp, r3
 8004680:	9b04      	ldr	r3, [sp, #16]
 8004682:	9101      	str	r1, [sp, #4]
 8004684:	3b01      	subs	r3, #1
 8004686:	44aa      	add	sl, r5
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	d004      	beq.n	8004696 <arm_mat_mult_f32+0x12a>
 800468c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468e:	6858      	ldr	r0, [r3, #4]
 8004690:	e79e      	b.n	80045d0 <arm_mat_mult_f32+0x64>
 8004692:	9a05      	ldr	r2, [sp, #20]
 8004694:	e7d9      	b.n	800464a <arm_mat_mult_f32+0xde>
 8004696:	4618      	mov	r0, r3
 8004698:	b00b      	add	sp, #44	; 0x2c
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469e:	f06f 0002 	mvn.w	r0, #2
 80046a2:	b00b      	add	sp, #44	; 0x2c
 80046a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a8:	00000000 	.word	0x00000000

080046ac <arm_mat_init_f32>:
 80046ac:	8001      	strh	r1, [r0, #0]
 80046ae:	8042      	strh	r2, [r0, #2]
 80046b0:	6043      	str	r3, [r0, #4]
 80046b2:	4770      	bx	lr

080046b4 <arm_cos_f32>:
 80046b4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800473c <arm_cos_f32+0x88>
 80046b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80046bc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80046c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80046d0:	d504      	bpl.n	80046dc <arm_cos_f32+0x28>
 80046d2:	ee17 3a90 	vmov	r3, s15
 80046d6:	3b01      	subs	r3, #1
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004740 <arm_cos_f32+0x8c>
 80046e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80046e8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80046ec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80046f0:	ee17 3a90 	vmov	r3, s15
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fa:	d21a      	bcs.n	8004732 <arm_cos_f32+0x7e>
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	ee30 0a67 	vsub.f32	s0, s0, s15
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <arm_cos_f32+0x90>)
 800470c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004710:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004714:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004718:	ed93 7a00 	vldr	s14, [r3]
 800471c:	edd2 6a00 	vldr	s13, [r2]
 8004720:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004724:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800472c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004730:	4770      	bx	lr
 8004732:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004736:	2101      	movs	r1, #1
 8004738:	2300      	movs	r3, #0
 800473a:	e7e6      	b.n	800470a <arm_cos_f32+0x56>
 800473c:	3e22f983 	.word	0x3e22f983
 8004740:	44000000 	.word	0x44000000
 8004744:	0800ae68 	.word	0x0800ae68

08004748 <arm_scale_f32>:
 8004748:	b470      	push	{r4, r5, r6}
 800474a:	0896      	lsrs	r6, r2, #2
 800474c:	d025      	beq.n	800479a <arm_scale_f32+0x52>
 800474e:	f100 0410 	add.w	r4, r0, #16
 8004752:	f101 0310 	add.w	r3, r1, #16
 8004756:	4635      	mov	r5, r6
 8004758:	ed54 7a04 	vldr	s15, [r4, #-16]
 800475c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004760:	3d01      	subs	r5, #1
 8004762:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004766:	ed54 7a03 	vldr	s15, [r4, #-12]
 800476a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800476e:	f104 0410 	add.w	r4, r4, #16
 8004772:	ed43 7a03 	vstr	s15, [r3, #-12]
 8004776:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800477a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800477e:	f103 0310 	add.w	r3, r3, #16
 8004782:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8004786:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800478a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800478e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8004792:	d1e1      	bne.n	8004758 <arm_scale_f32+0x10>
 8004794:	0136      	lsls	r6, r6, #4
 8004796:	4430      	add	r0, r6
 8004798:	4431      	add	r1, r6
 800479a:	f012 0203 	ands.w	r2, r2, #3
 800479e:	d015      	beq.n	80047cc <arm_scale_f32+0x84>
 80047a0:	edd0 7a00 	vldr	s15, [r0]
 80047a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80047a8:	3a01      	subs	r2, #1
 80047aa:	edc1 7a00 	vstr	s15, [r1]
 80047ae:	d00d      	beq.n	80047cc <arm_scale_f32+0x84>
 80047b0:	edd0 7a01 	vldr	s15, [r0, #4]
 80047b4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80047b8:	2a01      	cmp	r2, #1
 80047ba:	edc1 7a01 	vstr	s15, [r1, #4]
 80047be:	d005      	beq.n	80047cc <arm_scale_f32+0x84>
 80047c0:	edd0 7a02 	vldr	s15, [r0, #8]
 80047c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80047c8:	ed81 0a02 	vstr	s0, [r1, #8]
 80047cc:	bc70      	pop	{r4, r5, r6}
 80047ce:	4770      	bx	lr

080047d0 <ai_buffer_get_size>:
 80047d0:	b378      	cbz	r0, 8004832 <ai_buffer_get_size+0x62>
 80047d2:	b410      	push	{r4}
 80047d4:	6803      	ldr	r3, [r0, #0]
 80047d6:	4a17      	ldr	r2, [pc, #92]	; (8004834 <ai_buffer_get_size+0x64>)
 80047d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80047dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01e      	beq.n	8004822 <ai_buffer_get_size+0x52>
 80047e4:	6984      	ldr	r4, [r0, #24]
 80047e6:	6862      	ldr	r2, [r4, #4]
 80047e8:	7d03      	ldrb	r3, [r0, #20]
 80047ea:	6941      	ldr	r1, [r0, #20]
 80047ec:	f1a3 0301 	sub.w	r3, r3, #1
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80047fa:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80047fe:	da0b      	bge.n	8004818 <ai_buffer_get_size+0x48>
 8004800:	2b01      	cmp	r3, #1
 8004802:	d102      	bne.n	800480a <ai_buffer_get_size+0x3a>
 8004804:	2802      	cmp	r0, #2
 8004806:	d007      	beq.n	8004818 <ai_buffer_get_size+0x48>
 8004808:	2302      	movs	r3, #2
 800480a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800480e:	3301      	adds	r3, #1
 8004810:	4298      	cmp	r0, r3
 8004812:	fb01 f202 	mul.w	r2, r1, r2
 8004816:	d1f3      	bne.n	8004800 <ai_buffer_get_size+0x30>
 8004818:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800481c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	2900      	cmp	r1, #0
 8004824:	d0de      	beq.n	80047e4 <ai_buffer_get_size+0x14>
 8004826:	6984      	ldr	r4, [r0, #24]
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	331f      	adds	r3, #31
 800482c:	f023 021f 	bic.w	r2, r3, #31
 8004830:	e7da      	b.n	80047e8 <ai_buffer_get_size+0x18>
 8004832:	4770      	bx	lr
 8004834:	000400c0 	.word	0x000400c0

08004838 <ai_buffer_array_sane>:
 8004838:	b138      	cbz	r0, 800484a <ai_buffer_array_sane+0x12>
 800483a:	6843      	ldr	r3, [r0, #4]
 800483c:	b123      	cbz	r3, 8004848 <ai_buffer_array_sane+0x10>
 800483e:	8840      	ldrh	r0, [r0, #2]
 8004840:	3800      	subs	r0, #0
 8004842:	bf18      	it	ne
 8004844:	2001      	movne	r0, #1
 8004846:	4770      	bx	lr
 8004848:	4618      	mov	r0, r3
 800484a:	4770      	bx	lr

0800484c <ai_buffer_array_item_set_address>:
 800484c:	b150      	cbz	r0, 8004864 <ai_buffer_array_item_set_address+0x18>
 800484e:	6843      	ldr	r3, [r0, #4]
 8004850:	b14b      	cbz	r3, 8004866 <ai_buffer_array_item_set_address+0x1a>
 8004852:	8840      	ldrh	r0, [r0, #2]
 8004854:	b900      	cbnz	r0, 8004858 <ai_buffer_array_item_set_address+0xc>
 8004856:	4770      	bx	lr
 8004858:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800485c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004860:	2001      	movs	r0, #1
 8004862:	604a      	str	r2, [r1, #4]
 8004864:	4770      	bx	lr
 8004866:	4618      	mov	r0, r3
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <_ai_platform_acquire_crc>:
 800486c:	2001      	movs	r0, #1
 800486e:	4770      	bx	lr

08004870 <_ai_platform_release_crc>:
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop

08004874 <ai_platform_get_weights_map>:
 8004874:	2a00      	cmp	r2, #0
 8004876:	d037      	beq.n	80048e8 <ai_platform_get_weights_map+0x74>
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	b1a0      	cbz	r0, 80048a8 <ai_platform_get_weights_map+0x34>
 800487e:	460f      	mov	r7, r1
 8004880:	b191      	cbz	r1, 80048a8 <ai_platform_get_weights_map+0x34>
 8004882:	4b25      	ldr	r3, [pc, #148]	; (8004918 <ai_platform_get_weights_map+0xa4>)
 8004884:	6810      	ldr	r0, [r2, #0]
 8004886:	4298      	cmp	r0, r3
 8004888:	4615      	mov	r5, r2
 800488a:	d00f      	beq.n	80048ac <ai_platform_get_weights_map+0x38>
 800488c:	6855      	ldr	r5, [r2, #4]
 800488e:	b15d      	cbz	r5, 80048a8 <ai_platform_get_weights_map+0x34>
 8004890:	682e      	ldr	r6, [r5, #0]
 8004892:	429e      	cmp	r6, r3
 8004894:	d02a      	beq.n	80048ec <ai_platform_get_weights_map+0x78>
 8004896:	f1a1 0001 	sub.w	r0, r1, #1
 800489a:	6025      	str	r5, [r4, #0]
 800489c:	fab0 f080 	clz	r0, r0
 80048a0:	0940      	lsrs	r0, r0, #5
 80048a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a4:	42a7      	cmp	r7, r4
 80048a6:	d034      	beq.n	8004912 <ai_platform_get_weights_map+0x9e>
 80048a8:	2000      	movs	r0, #0
 80048aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ac:	1d10      	adds	r0, r2, #4
 80048ae:	f7ff ffc3 	bl	8004838 <ai_buffer_array_sane>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0f8      	beq.n	80048a8 <ai_platform_get_weights_map+0x34>
 80048b6:	88eb      	ldrh	r3, [r5, #6]
 80048b8:	429f      	cmp	r7, r3
 80048ba:	d1f5      	bne.n	80048a8 <ai_platform_get_weights_map+0x34>
 80048bc:	f04f 0e00 	mov.w	lr, #0
 80048c0:	1f23      	subs	r3, r4, #4
 80048c2:	4670      	mov	r0, lr
 80048c4:	68aa      	ldr	r2, [r5, #8]
 80048c6:	eb02 0c0e 	add.w	ip, r2, lr
 80048ca:	f10e 0e1c 	add.w	lr, lr, #28
 80048ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80048d2:	b124      	cbz	r4, 80048de <ai_platform_get_weights_map+0x6a>
 80048d4:	3001      	adds	r0, #1
 80048d6:	4287      	cmp	r7, r0
 80048d8:	f843 4f04 	str.w	r4, [r3, #4]!
 80048dc:	d1f2      	bne.n	80048c4 <ai_platform_get_weights_map+0x50>
 80048de:	1a38      	subs	r0, r7, r0
 80048e0:	fab0 f080 	clz	r0, r0
 80048e4:	0940      	lsrs	r0, r0, #5
 80048e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e8:	2000      	movs	r0, #0
 80048ea:	4770      	bx	lr
 80048ec:	1f23      	subs	r3, r4, #4
 80048ee:	4628      	mov	r0, r5
 80048f0:	2400      	movs	r4, #0
 80048f2:	e000      	b.n	80048f6 <ai_platform_get_weights_map+0x82>
 80048f4:	4614      	mov	r4, r2
 80048f6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80048fa:	42b2      	cmp	r2, r6
 80048fc:	d0d2      	beq.n	80048a4 <ai_platform_get_weights_map+0x30>
 80048fe:	f843 2f04 	str.w	r2, [r3, #4]!
 8004902:	1c62      	adds	r2, r4, #1
 8004904:	4297      	cmp	r7, r2
 8004906:	d1f5      	bne.n	80048f4 <ai_platform_get_weights_map+0x80>
 8004908:	3402      	adds	r4, #2
 800490a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800490e:	42b3      	cmp	r3, r6
 8004910:	d1ca      	bne.n	80048a8 <ai_platform_get_weights_map+0x34>
 8004912:	2001      	movs	r0, #1
 8004914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004916:	bf00      	nop
 8004918:	a1facade 	.word	0xa1facade

0800491c <ai_platform_get_activations_map>:
 800491c:	2a00      	cmp	r2, #0
 800491e:	d038      	beq.n	8004992 <ai_platform_get_activations_map+0x76>
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	4604      	mov	r4, r0
 8004924:	b1a0      	cbz	r0, 8004950 <ai_platform_get_activations_map+0x34>
 8004926:	460f      	mov	r7, r1
 8004928:	b191      	cbz	r1, 8004950 <ai_platform_get_activations_map+0x34>
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <ai_platform_get_activations_map+0xa4>)
 800492c:	6810      	ldr	r0, [r2, #0]
 800492e:	4298      	cmp	r0, r3
 8004930:	4615      	mov	r5, r2
 8004932:	d00f      	beq.n	8004954 <ai_platform_get_activations_map+0x38>
 8004934:	6a15      	ldr	r5, [r2, #32]
 8004936:	b15d      	cbz	r5, 8004950 <ai_platform_get_activations_map+0x34>
 8004938:	682e      	ldr	r6, [r5, #0]
 800493a:	429e      	cmp	r6, r3
 800493c:	d02b      	beq.n	8004996 <ai_platform_get_activations_map+0x7a>
 800493e:	f1a1 0001 	sub.w	r0, r1, #1
 8004942:	6025      	str	r5, [r4, #0]
 8004944:	fab0 f080 	clz	r0, r0
 8004948:	0940      	lsrs	r0, r0, #5
 800494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800494c:	42a7      	cmp	r7, r4
 800494e:	d035      	beq.n	80049bc <ai_platform_get_activations_map+0xa0>
 8004950:	2000      	movs	r0, #0
 8004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004954:	f102 000c 	add.w	r0, r2, #12
 8004958:	f7ff ff6e 	bl	8004838 <ai_buffer_array_sane>
 800495c:	2800      	cmp	r0, #0
 800495e:	d0f7      	beq.n	8004950 <ai_platform_get_activations_map+0x34>
 8004960:	89eb      	ldrh	r3, [r5, #14]
 8004962:	429f      	cmp	r7, r3
 8004964:	d1f4      	bne.n	8004950 <ai_platform_get_activations_map+0x34>
 8004966:	f04f 0e00 	mov.w	lr, #0
 800496a:	1f23      	subs	r3, r4, #4
 800496c:	4670      	mov	r0, lr
 800496e:	692a      	ldr	r2, [r5, #16]
 8004970:	eb02 0c0e 	add.w	ip, r2, lr
 8004974:	f10e 0e1c 	add.w	lr, lr, #28
 8004978:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800497c:	b124      	cbz	r4, 8004988 <ai_platform_get_activations_map+0x6c>
 800497e:	3001      	adds	r0, #1
 8004980:	4287      	cmp	r7, r0
 8004982:	f843 4f04 	str.w	r4, [r3, #4]!
 8004986:	d1f2      	bne.n	800496e <ai_platform_get_activations_map+0x52>
 8004988:	1a38      	subs	r0, r7, r0
 800498a:	fab0 f080 	clz	r0, r0
 800498e:	0940      	lsrs	r0, r0, #5
 8004990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004992:	2000      	movs	r0, #0
 8004994:	4770      	bx	lr
 8004996:	1f23      	subs	r3, r4, #4
 8004998:	4628      	mov	r0, r5
 800499a:	2400      	movs	r4, #0
 800499c:	e000      	b.n	80049a0 <ai_platform_get_activations_map+0x84>
 800499e:	4614      	mov	r4, r2
 80049a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80049a4:	42b2      	cmp	r2, r6
 80049a6:	d0d1      	beq.n	800494c <ai_platform_get_activations_map+0x30>
 80049a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80049ac:	1c62      	adds	r2, r4, #1
 80049ae:	4297      	cmp	r7, r2
 80049b0:	d1f5      	bne.n	800499e <ai_platform_get_activations_map+0x82>
 80049b2:	3402      	adds	r4, #2
 80049b4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80049b8:	42b3      	cmp	r3, r6
 80049ba:	d1c9      	bne.n	8004950 <ai_platform_get_activations_map+0x34>
 80049bc:	2001      	movs	r0, #1
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c0:	a1facade 	.word	0xa1facade

080049c4 <ai_platform_bind_network_params>:
 80049c4:	b1a0      	cbz	r0, 80049f0 <ai_platform_bind_network_params+0x2c>
 80049c6:	b1b1      	cbz	r1, 80049f6 <ai_platform_bind_network_params+0x32>
 80049c8:	b1c2      	cbz	r2, 80049fc <ai_platform_bind_network_params+0x38>
 80049ca:	b410      	push	{r4}
 80049cc:	4603      	mov	r3, r0
 80049ce:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <ai_platform_bind_network_params+0x40>)
 80049d0:	f843 4b04 	str.w	r4, [r3], #4
 80049d4:	f100 0c0c 	add.w	ip, r0, #12
 80049d8:	c903      	ldmia	r1, {r0, r1}
 80049da:	e883 0003 	stmia.w	r3, {r0, r1}
 80049de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80049e6:	2301      	movs	r3, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	4603      	mov	r3, r0
 80049f2:	4618      	mov	r0, r3
 80049f4:	4770      	bx	lr
 80049f6:	460b      	mov	r3, r1
 80049f8:	4618      	mov	r0, r3
 80049fa:	4770      	bx	lr
 80049fc:	4613      	mov	r3, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	a1facade 	.word	0xa1facade

08004a08 <ai_platform_network_get_error>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	b1f0      	cbz	r0, 8004a4a <ai_platform_network_get_error+0x42>
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <ai_platform_network_get_error+0xc4>)
 8004a0e:	6802      	ldr	r2, [r0, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	4604      	mov	r4, r0
 8004a14:	d119      	bne.n	8004a4a <ai_platform_network_get_error+0x42>
 8004a16:	f7ff ff29 	bl	800486c <_ai_platform_acquire_crc>
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <ai_platform_network_get_error+0xc8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d03c      	beq.n	8004aa2 <ai_platform_network_get_error+0x9a>
 8004a28:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <ai_platform_network_get_error+0xcc>)
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1fb      	bne.n	8004a30 <ai_platform_network_get_error+0x28>
 8004a38:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <ai_platform_network_get_error+0xd0>)
 8004a3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a3e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <ai_platform_network_get_error+0xd4>)
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d038      	beq.n	8004aba <ai_platform_network_get_error+0xb2>
 8004a48:	e7fe      	b.n	8004a48 <ai_platform_network_get_error+0x40>
 8004a4a:	f7ff ff0f 	bl	800486c <_ai_platform_acquire_crc>
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <ai_platform_network_get_error+0xc8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5a:	d010      	beq.n	8004a7e <ai_platform_network_get_error+0x76>
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <ai_platform_network_get_error+0xcc>)
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1fb      	bne.n	8004a64 <ai_platform_network_get_error+0x5c>
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <ai_platform_network_get_error+0xd0>)
 8004a6e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <ai_platform_network_get_error+0xd4>)
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d00d      	beq.n	8004a98 <ai_platform_network_get_error+0x90>
 8004a7c:	e7fe      	b.n	8004a7c <ai_platform_network_get_error+0x74>
 8004a7e:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <ai_platform_network_get_error+0xd8>)
 8004a80:	2301      	movs	r3, #1
 8004a82:	6093      	str	r3, [r2, #8]
 8004a84:	6893      	ldr	r3, [r2, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1fc      	bne.n	8004a84 <ai_platform_network_get_error+0x7c>
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <ai_platform_network_get_error+0xd0>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <ai_platform_network_get_error+0xd4>)
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d000      	beq.n	8004a98 <ai_platform_network_get_error+0x90>
 8004a96:	e7fe      	b.n	8004a96 <ai_platform_network_get_error+0x8e>
 8004a98:	f7ff feea 	bl	8004870 <_ai_platform_release_crc>
 8004a9c:	f241 0010 	movw	r0, #4112	; 0x1010
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <ai_platform_network_get_error+0xd8>)
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	6893      	ldr	r3, [r2, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1fc      	bne.n	8004aa8 <ai_platform_network_get_error+0xa0>
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <ai_platform_network_get_error+0xd0>)
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <ai_platform_network_get_error+0xd4>)
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d107      	bne.n	8004aca <ai_platform_network_get_error+0xc2>
 8004aba:	f7ff fed9 	bl	8004870 <_ai_platform_release_crc>
 8004abe:	f104 0010 	add.w	r0, r4, #16
 8004ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac6:	f000 be8b 	b.w	80057e0 <core_get_error>
 8004aca:	e7fe      	b.n	8004aca <ai_platform_network_get_error+0xc2>
 8004acc:	a1c00100 	.word	0xa1c00100
 8004ad0:	e0042000 	.word	0xe0042000
 8004ad4:	58024000 	.word	0x58024000
 8004ad8:	f407a5c2 	.word	0xf407a5c2
 8004adc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ae0:	40023000 	.word	0x40023000

08004ae4 <ai_platform_network_set_error>:
 8004ae4:	b110      	cbz	r0, 8004aec <ai_platform_network_set_error+0x8>
 8004ae6:	3010      	adds	r0, #16
 8004ae8:	f000 be80 	b.w	80057ec <core_set_error>
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <ai_platform_inputs_get>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	b085      	sub	sp, #20
 8004af6:	9102      	str	r1, [sp, #8]
 8004af8:	b1f0      	cbz	r0, 8004b38 <ai_platform_inputs_get+0x48>
 8004afa:	4b62      	ldr	r3, [pc, #392]	; (8004c84 <ai_platform_inputs_get+0x194>)
 8004afc:	6802      	ldr	r2, [r0, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	4607      	mov	r7, r0
 8004b02:	d119      	bne.n	8004b38 <ai_platform_inputs_get+0x48>
 8004b04:	f7ff feb2 	bl	800486c <_ai_platform_acquire_crc>
 8004b08:	4b5f      	ldr	r3, [pc, #380]	; (8004c88 <ai_platform_inputs_get+0x198>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d03d      	beq.n	8004b92 <ai_platform_inputs_get+0xa2>
 8004b16:	4a5d      	ldr	r2, [pc, #372]	; (8004c8c <ai_platform_inputs_get+0x19c>)
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1fb      	bne.n	8004b1e <ai_platform_inputs_get+0x2e>
 8004b26:	4b5a      	ldr	r3, [pc, #360]	; (8004c90 <ai_platform_inputs_get+0x1a0>)
 8004b28:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b30:	4b58      	ldr	r3, [pc, #352]	; (8004c94 <ai_platform_inputs_get+0x1a4>)
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d039      	beq.n	8004baa <ai_platform_inputs_get+0xba>
 8004b36:	e7fe      	b.n	8004b36 <ai_platform_inputs_get+0x46>
 8004b38:	f7ff fe98 	bl	800486c <_ai_platform_acquire_crc>
 8004b3c:	4b52      	ldr	r3, [pc, #328]	; (8004c88 <ai_platform_inputs_get+0x198>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b48:	d010      	beq.n	8004b6c <ai_platform_inputs_get+0x7c>
 8004b4a:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <ai_platform_inputs_get+0x19c>)
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1fb      	bne.n	8004b52 <ai_platform_inputs_get+0x62>
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	; (8004c90 <ai_platform_inputs_get+0x1a0>)
 8004b5c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <ai_platform_inputs_get+0x1a4>)
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d00d      	beq.n	8004b86 <ai_platform_inputs_get+0x96>
 8004b6a:	e7fe      	b.n	8004b6a <ai_platform_inputs_get+0x7a>
 8004b6c:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <ai_platform_inputs_get+0x1a8>)
 8004b6e:	2301      	movs	r3, #1
 8004b70:	6093      	str	r3, [r2, #8]
 8004b72:	6893      	ldr	r3, [r2, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1fc      	bne.n	8004b72 <ai_platform_inputs_get+0x82>
 8004b78:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <ai_platform_inputs_get+0x1a0>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <ai_platform_inputs_get+0x1a4>)
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d000      	beq.n	8004b86 <ai_platform_inputs_get+0x96>
 8004b84:	e7fe      	b.n	8004b84 <ai_platform_inputs_get+0x94>
 8004b86:	f7ff fe73 	bl	8004870 <_ai_platform_release_crc>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	b005      	add	sp, #20
 8004b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b92:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <ai_platform_inputs_get+0x1a8>)
 8004b94:	2301      	movs	r3, #1
 8004b96:	6093      	str	r3, [r2, #8]
 8004b98:	6893      	ldr	r3, [r2, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1fc      	bne.n	8004b98 <ai_platform_inputs_get+0xa8>
 8004b9e:	4b3c      	ldr	r3, [pc, #240]	; (8004c90 <ai_platform_inputs_get+0x1a0>)
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <ai_platform_inputs_get+0x1a4>)
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d155      	bne.n	8004c56 <ai_platform_inputs_get+0x166>
 8004baa:	f7ff fe61 	bl	8004870 <_ai_platform_release_crc>
 8004bae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d051      	beq.n	8004c58 <ai_platform_inputs_get+0x168>
 8004bb4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004bb8:	f1ba 0f00 	cmp.w	sl, #0
 8004bbc:	d04c      	beq.n	8004c58 <ai_platform_inputs_get+0x168>
 8004bbe:	f04f 0b00 	mov.w	fp, #0
 8004bc2:	465d      	mov	r5, fp
 8004bc4:	9703      	str	r7, [sp, #12]
 8004bc6:	e016      	b.n	8004bf6 <ai_platform_inputs_get+0x106>
 8004bc8:	9901      	ldr	r1, [sp, #4]
 8004bca:	2301      	movs	r3, #1
 8004bcc:	507b      	str	r3, [r7, r1]
 8004bce:	69b1      	ldr	r1, [r6, #24]
 8004bd0:	6849      	ldr	r1, [r1, #4]
 8004bd2:	6121      	str	r1, [r4, #16]
 8004bd4:	f04f 0301 	mov.w	r3, #1
 8004bd8:	7523      	strb	r3, [r4, #20]
 8004bda:	e9c4 c200 	strd	ip, r2, [r4]
 8004bde:	6962      	ldr	r2, [r4, #20]
 8004be0:	60a0      	str	r0, [r4, #8]
 8004be2:	2300      	movs	r3, #0
 8004be4:	f369 221f 	bfi	r2, r9, #8, #24
 8004be8:	f8c4 8018 	str.w	r8, [r4, #24]
 8004bec:	60e3      	str	r3, [r4, #12]
 8004bee:	3501      	adds	r5, #1
 8004bf0:	f10b 0b1c 	add.w	fp, fp, #28
 8004bf4:	6162      	str	r2, [r4, #20]
 8004bf6:	f8ba 3000 	ldrh.w	r3, [sl]
 8004bfa:	42ab      	cmp	r3, r5
 8004bfc:	b2aa      	uxth	r2, r5
 8004bfe:	d93a      	bls.n	8004c76 <ai_platform_inputs_get+0x186>
 8004c00:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004c04:	00e9      	lsls	r1, r5, #3
 8004c06:	9101      	str	r1, [sp, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d034      	beq.n	8004c76 <ai_platform_inputs_get+0x186>
 8004c0c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004c10:	2e00      	cmp	r6, #0
 8004c12:	d030      	beq.n	8004c76 <ai_platform_inputs_get+0x186>
 8004c14:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004c18:	69b2      	ldr	r2, [r6, #24]
 8004c1a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004c1e:	6810      	ldr	r0, [r2, #0]
 8004c20:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004c24:	68b3      	ldr	r3, [r6, #8]
 8004c26:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004c2a:	f001 fc93 	bl	8006554 <ai_array_to_buffer_fmt>
 8004c2e:	69b1      	ldr	r1, [r6, #24]
 8004c30:	4684      	mov	ip, r0
 8004c32:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004c36:	688a      	ldr	r2, [r1, #8]
 8004c38:	445c      	add	r4, fp
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d0c8      	beq.n	8004bd0 <ai_platform_inputs_get+0xe0>
 8004c3e:	2100      	movs	r1, #0
 8004c40:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004c44:	6831      	ldr	r1, [r6, #0]
 8004c46:	6041      	str	r1, [r0, #4]
 8004c48:	b111      	cbz	r1, 8004c50 <ai_platform_inputs_get+0x160>
 8004c4a:	8849      	ldrh	r1, [r1, #2]
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d1bb      	bne.n	8004bc8 <ai_platform_inputs_get+0xd8>
 8004c50:	69b1      	ldr	r1, [r6, #24]
 8004c52:	2000      	movs	r0, #0
 8004c54:	e7bc      	b.n	8004bd0 <ai_platform_inputs_get+0xe0>
 8004c56:	e7fe      	b.n	8004c56 <ai_platform_inputs_get+0x166>
 8004c58:	2218      	movs	r2, #24
 8004c5a:	2111      	movs	r1, #17
 8004c5c:	f107 0010 	add.w	r0, r7, #16
 8004c60:	f000 fdc4 	bl	80057ec <core_set_error>
 8004c64:	2200      	movs	r2, #0
 8004c66:	4610      	mov	r0, r2
 8004c68:	9b02      	ldr	r3, [sp, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d08e      	beq.n	8004b8c <ai_platform_inputs_get+0x9c>
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	b005      	add	sp, #20
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c76:	9f03      	ldr	r7, [sp, #12]
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d0ed      	beq.n	8004c58 <ai_platform_inputs_get+0x168>
 8004c7c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004c80:	6858      	ldr	r0, [r3, #4]
 8004c82:	e7f1      	b.n	8004c68 <ai_platform_inputs_get+0x178>
 8004c84:	a1c00100 	.word	0xa1c00100
 8004c88:	e0042000 	.word	0xe0042000
 8004c8c:	58024000 	.word	0x58024000
 8004c90:	f407a5c2 	.word	0xf407a5c2
 8004c94:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c98:	40023000 	.word	0x40023000

08004c9c <ai_platform_outputs_get>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	9102      	str	r1, [sp, #8]
 8004ca4:	b1f0      	cbz	r0, 8004ce4 <ai_platform_outputs_get+0x48>
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <ai_platform_outputs_get+0x188>)
 8004ca8:	6802      	ldr	r2, [r0, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	4607      	mov	r7, r0
 8004cae:	d119      	bne.n	8004ce4 <ai_platform_outputs_get+0x48>
 8004cb0:	f7ff fddc 	bl	800486c <_ai_platform_acquire_crc>
 8004cb4:	4b5c      	ldr	r3, [pc, #368]	; (8004e28 <ai_platform_outputs_get+0x18c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d03d      	beq.n	8004d3e <ai_platform_outputs_get+0xa2>
 8004cc2:	4a5a      	ldr	r2, [pc, #360]	; (8004e2c <ai_platform_outputs_get+0x190>)
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004cca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1fb      	bne.n	8004cca <ai_platform_outputs_get+0x2e>
 8004cd2:	4b57      	ldr	r3, [pc, #348]	; (8004e30 <ai_platform_outputs_get+0x194>)
 8004cd4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004cd8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004cdc:	4b55      	ldr	r3, [pc, #340]	; (8004e34 <ai_platform_outputs_get+0x198>)
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d039      	beq.n	8004d56 <ai_platform_outputs_get+0xba>
 8004ce2:	e7fe      	b.n	8004ce2 <ai_platform_outputs_get+0x46>
 8004ce4:	f7ff fdc2 	bl	800486c <_ai_platform_acquire_crc>
 8004ce8:	4b4f      	ldr	r3, [pc, #316]	; (8004e28 <ai_platform_outputs_get+0x18c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d010      	beq.n	8004d18 <ai_platform_outputs_get+0x7c>
 8004cf6:	4a4d      	ldr	r2, [pc, #308]	; (8004e2c <ai_platform_outputs_get+0x190>)
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004cfe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1fb      	bne.n	8004cfe <ai_platform_outputs_get+0x62>
 8004d06:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <ai_platform_outputs_get+0x194>)
 8004d08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d10:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <ai_platform_outputs_get+0x198>)
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d00d      	beq.n	8004d32 <ai_platform_outputs_get+0x96>
 8004d16:	e7fe      	b.n	8004d16 <ai_platform_outputs_get+0x7a>
 8004d18:	4a47      	ldr	r2, [pc, #284]	; (8004e38 <ai_platform_outputs_get+0x19c>)
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	6893      	ldr	r3, [r2, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1fc      	bne.n	8004d1e <ai_platform_outputs_get+0x82>
 8004d24:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <ai_platform_outputs_get+0x194>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <ai_platform_outputs_get+0x198>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d000      	beq.n	8004d32 <ai_platform_outputs_get+0x96>
 8004d30:	e7fe      	b.n	8004d30 <ai_platform_outputs_get+0x94>
 8004d32:	f7ff fd9d 	bl	8004870 <_ai_platform_release_crc>
 8004d36:	2000      	movs	r0, #0
 8004d38:	b005      	add	sp, #20
 8004d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3e:	4a3e      	ldr	r2, [pc, #248]	; (8004e38 <ai_platform_outputs_get+0x19c>)
 8004d40:	2301      	movs	r3, #1
 8004d42:	6093      	str	r3, [r2, #8]
 8004d44:	6893      	ldr	r3, [r2, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1fc      	bne.n	8004d44 <ai_platform_outputs_get+0xa8>
 8004d4a:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <ai_platform_outputs_get+0x194>)
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <ai_platform_outputs_get+0x198>)
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d150      	bne.n	8004df8 <ai_platform_outputs_get+0x15c>
 8004d56:	f7ff fd8b 	bl	8004870 <_ai_platform_release_crc>
 8004d5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d958      	bls.n	8004e12 <ai_platform_outputs_get+0x176>
 8004d60:	f04f 0b00 	mov.w	fp, #0
 8004d64:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004d68:	9703      	str	r7, [sp, #12]
 8004d6a:	465d      	mov	r5, fp
 8004d6c:	e016      	b.n	8004d9c <ai_platform_outputs_get+0x100>
 8004d6e:	9901      	ldr	r1, [sp, #4]
 8004d70:	2301      	movs	r3, #1
 8004d72:	507b      	str	r3, [r7, r1]
 8004d74:	69b1      	ldr	r1, [r6, #24]
 8004d76:	6849      	ldr	r1, [r1, #4]
 8004d78:	6121      	str	r1, [r4, #16]
 8004d7a:	f04f 0301 	mov.w	r3, #1
 8004d7e:	7523      	strb	r3, [r4, #20]
 8004d80:	e9c4 c200 	strd	ip, r2, [r4]
 8004d84:	6962      	ldr	r2, [r4, #20]
 8004d86:	60a0      	str	r0, [r4, #8]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f369 221f 	bfi	r2, r9, #8, #24
 8004d8e:	f8c4 8018 	str.w	r8, [r4, #24]
 8004d92:	60e3      	str	r3, [r4, #12]
 8004d94:	3501      	adds	r5, #1
 8004d96:	f10b 0b1c 	add.w	fp, fp, #28
 8004d9a:	6162      	str	r2, [r4, #20]
 8004d9c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	b2aa      	uxth	r2, r5
 8004da4:	d929      	bls.n	8004dfa <ai_platform_outputs_get+0x15e>
 8004da6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004daa:	00e9      	lsls	r1, r5, #3
 8004dac:	9101      	str	r1, [sp, #4]
 8004dae:	b323      	cbz	r3, 8004dfa <ai_platform_outputs_get+0x15e>
 8004db0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004db4:	b30e      	cbz	r6, 8004dfa <ai_platform_outputs_get+0x15e>
 8004db6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004dba:	69b2      	ldr	r2, [r6, #24]
 8004dbc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004dc0:	6810      	ldr	r0, [r2, #0]
 8004dc2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004dc6:	68b3      	ldr	r3, [r6, #8]
 8004dc8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004dcc:	f001 fbc2 	bl	8006554 <ai_array_to_buffer_fmt>
 8004dd0:	69b1      	ldr	r1, [r6, #24]
 8004dd2:	4684      	mov	ip, r0
 8004dd4:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004dd8:	688a      	ldr	r2, [r1, #8]
 8004dda:	445c      	add	r4, fp
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d0ca      	beq.n	8004d76 <ai_platform_outputs_get+0xda>
 8004de0:	2100      	movs	r1, #0
 8004de2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004de6:	6831      	ldr	r1, [r6, #0]
 8004de8:	6041      	str	r1, [r0, #4]
 8004dea:	b111      	cbz	r1, 8004df2 <ai_platform_outputs_get+0x156>
 8004dec:	8849      	ldrh	r1, [r1, #2]
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d1bd      	bne.n	8004d6e <ai_platform_outputs_get+0xd2>
 8004df2:	69b1      	ldr	r1, [r6, #24]
 8004df4:	2000      	movs	r0, #0
 8004df6:	e7be      	b.n	8004d76 <ai_platform_outputs_get+0xda>
 8004df8:	e7fe      	b.n	8004df8 <ai_platform_outputs_get+0x15c>
 8004dfa:	9f03      	ldr	r7, [sp, #12]
 8004dfc:	b14a      	cbz	r2, 8004e12 <ai_platform_outputs_get+0x176>
 8004dfe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004e02:	6858      	ldr	r0, [r3, #4]
 8004e04:	9b02      	ldr	r3, [sp, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d096      	beq.n	8004d38 <ai_platform_outputs_get+0x9c>
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	b005      	add	sp, #20
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	2218      	movs	r2, #24
 8004e14:	2111      	movs	r1, #17
 8004e16:	f107 0010 	add.w	r0, r7, #16
 8004e1a:	f000 fce7 	bl	80057ec <core_set_error>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4610      	mov	r0, r2
 8004e22:	e7ef      	b.n	8004e04 <ai_platform_outputs_get+0x168>
 8004e24:	a1c00100 	.word	0xa1c00100
 8004e28:	e0042000 	.word	0xe0042000
 8004e2c:	58024000 	.word	0x58024000
 8004e30:	f407a5c2 	.word	0xf407a5c2
 8004e34:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e38:	40023000 	.word	0x40023000

08004e3c <ai_platform_network_create>:
 8004e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e40:	b083      	sub	sp, #12
 8004e42:	4606      	mov	r6, r0
 8004e44:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004e48:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004e4c:	4615      	mov	r5, r2
 8004e4e:	461f      	mov	r7, r3
 8004e50:	f7ff fd0c 	bl	800486c <_ai_platform_acquire_crc>
 8004e54:	b188      	cbz	r0, 8004e7a <ai_platform_network_create+0x3e>
 8004e56:	4a5d      	ldr	r2, [pc, #372]	; (8004fcc <ai_platform_network_create+0x190>)
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004e5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004e62:	4603      	mov	r3, r0
 8004e64:	d00e      	beq.n	8004e84 <ai_platform_network_create+0x48>
 8004e66:	4a5a      	ldr	r2, [pc, #360]	; (8004fd0 <ai_platform_network_create+0x194>)
 8004e68:	2118      	movs	r1, #24
 8004e6a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004e6e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004e72:	2918      	cmp	r1, #24
 8004e74:	d018      	beq.n	8004ea8 <ai_platform_network_create+0x6c>
 8004e76:	f7ff fcfb 	bl	8004870 <_ai_platform_release_crc>
 8004e7a:	f244 1033 	movw	r0, #16691	; 0x4133
 8004e7e:	b003      	add	sp, #12
 8004e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e84:	4a53      	ldr	r2, [pc, #332]	; (8004fd4 <ai_platform_network_create+0x198>)
 8004e86:	2101      	movs	r1, #1
 8004e88:	6091      	str	r1, [r2, #8]
 8004e8a:	2114      	movs	r1, #20
 8004e8c:	e001      	b.n	8004e92 <ai_platform_network_create+0x56>
 8004e8e:	3901      	subs	r1, #1
 8004e90:	d002      	beq.n	8004e98 <ai_platform_network_create+0x5c>
 8004e92:	6894      	ldr	r4, [r2, #8]
 8004e94:	2c00      	cmp	r4, #0
 8004e96:	d1fa      	bne.n	8004e8e <ai_platform_network_create+0x52>
 8004e98:	4a4e      	ldr	r2, [pc, #312]	; (8004fd4 <ai_platform_network_create+0x198>)
 8004e9a:	6891      	ldr	r1, [r2, #8]
 8004e9c:	b911      	cbnz	r1, 8004ea4 <ai_platform_network_create+0x68>
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	3201      	adds	r2, #1
 8004ea2:	d008      	beq.n	8004eb6 <ai_platform_network_create+0x7a>
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	e7e6      	b.n	8004e76 <ai_platform_network_create+0x3a>
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004eae:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004eb2:	2900      	cmp	r1, #0
 8004eb4:	d1fb      	bne.n	8004eae <ai_platform_network_create+0x72>
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fcda 	bl	8004870 <_ai_platform_release_crc>
 8004ebc:	f7ff fcd6 	bl	800486c <_ai_platform_acquire_crc>
 8004ec0:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <ai_platform_network_create+0x190>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ecc:	d010      	beq.n	8004ef0 <ai_platform_network_create+0xb4>
 8004ece:	4b40      	ldr	r3, [pc, #256]	; (8004fd0 <ai_platform_network_create+0x194>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004ed6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8004eda:	2900      	cmp	r1, #0
 8004edc:	d1fb      	bne.n	8004ed6 <ai_platform_network_create+0x9a>
 8004ede:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <ai_platform_network_create+0x19c>)
 8004ee0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004ee4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004ee8:	4b3c      	ldr	r3, [pc, #240]	; (8004fdc <ai_platform_network_create+0x1a0>)
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d00c      	beq.n	8004f08 <ai_platform_network_create+0xcc>
 8004eee:	e7fe      	b.n	8004eee <ai_platform_network_create+0xb2>
 8004ef0:	4a38      	ldr	r2, [pc, #224]	; (8004fd4 <ai_platform_network_create+0x198>)
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	6093      	str	r3, [r2, #8]
 8004ef6:	6893      	ldr	r3, [r2, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1fc      	bne.n	8004ef6 <ai_platform_network_create+0xba>
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <ai_platform_network_create+0x19c>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <ai_platform_network_create+0x1a0>)
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d122      	bne.n	8004f4e <ai_platform_network_create+0x112>
 8004f08:	f7ff fcb2 	bl	8004870 <_ai_platform_release_crc>
 8004f0c:	b38e      	cbz	r6, 8004f72 <ai_platform_network_create+0x136>
 8004f0e:	4b34      	ldr	r3, [pc, #208]	; (8004fe0 <ai_platform_network_create+0x1a4>)
 8004f10:	602b      	str	r3, [r5, #0]
 8004f12:	6035      	str	r5, [r6, #0]
 8004f14:	f000 fc62 	bl	80057dc <core_init>
 8004f18:	b1d0      	cbz	r0, 8004f50 <ai_platform_network_create+0x114>
 8004f1a:	f7ff fca7 	bl	800486c <_ai_platform_acquire_crc>
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <ai_platform_network_create+0x190>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d025      	beq.n	8004f78 <ai_platform_network_create+0x13c>
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <ai_platform_network_create+0x194>)
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1fb      	bne.n	8004f34 <ai_platform_network_create+0xf8>
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <ai_platform_network_create+0x19c>)
 8004f3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f46:	4b25      	ldr	r3, [pc, #148]	; (8004fdc <ai_platform_network_create+0x1a0>)
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d022      	beq.n	8004f92 <ai_platform_network_create+0x156>
 8004f4c:	e7fe      	b.n	8004f4c <ai_platform_network_create+0x110>
 8004f4e:	e7fe      	b.n	8004f4e <ai_platform_network_create+0x112>
 8004f50:	2430      	movs	r4, #48	; 0x30
 8004f52:	2300      	movs	r3, #0
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	2610      	movs	r6, #16
 8004f58:	464a      	mov	r2, r9
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f001 fb9f 	bl	80066a0 <ai_version_get>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2000      	movs	r0, #0
 8004f66:	f364 0007 	bfi	r0, r4, #0, #8
 8004f6a:	64ab      	str	r3, [r5, #72]	; 0x48
 8004f6c:	f366 201f 	bfi	r0, r6, #8, #24
 8004f70:	e785      	b.n	8004e7e <ai_platform_network_create+0x42>
 8004f72:	f241 0010 	movw	r0, #4112	; 0x1010
 8004f76:	e782      	b.n	8004e7e <ai_platform_network_create+0x42>
 8004f78:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <ai_platform_network_create+0x198>)
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	6893      	ldr	r3, [r2, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1fc      	bne.n	8004f7e <ai_platform_network_create+0x142>
 8004f84:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <ai_platform_network_create+0x19c>)
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <ai_platform_network_create+0x1a0>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d000      	beq.n	8004f92 <ai_platform_network_create+0x156>
 8004f90:	e7fe      	b.n	8004f90 <ai_platform_network_create+0x154>
 8004f92:	f7ff fc6d 	bl	8004870 <_ai_platform_release_crc>
 8004f96:	2200      	movs	r2, #0
 8004f98:	4641      	mov	r1, r8
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f001 fb80 	bl	80066a0 <ai_version_get>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	2105      	movs	r1, #5
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f001 fb7a 	bl	80066a0 <ai_version_get>
 8004fac:	4284      	cmp	r4, r0
 8004fae:	d001      	beq.n	8004fb4 <ai_platform_network_create+0x178>
 8004fb0:	2401      	movs	r4, #1
 8004fb2:	e7ce      	b.n	8004f52 <ai_platform_network_create+0x116>
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <ai_platform_network_create+0x1a8>)
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	a801      	add	r0, sp, #4
 8004fba:	f000 fc23 	bl	8005804 <ai_check_custom_types>
 8004fbe:	b110      	cbz	r0, 8004fc6 <ai_platform_network_create+0x18a>
 8004fc0:	2600      	movs	r6, #0
 8004fc2:	4634      	mov	r4, r6
 8004fc4:	e7c8      	b.n	8004f58 <ai_platform_network_create+0x11c>
 8004fc6:	2402      	movs	r4, #2
 8004fc8:	e7c3      	b.n	8004f52 <ai_platform_network_create+0x116>
 8004fca:	bf00      	nop
 8004fcc:	e0042000 	.word	0xe0042000
 8004fd0:	58024000 	.word	0x58024000
 8004fd4:	40023000 	.word	0x40023000
 8004fd8:	f407a5c2 	.word	0xf407a5c2
 8004fdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004fe0:	a1c00100 	.word	0xa1c00100
 8004fe4:	84048403 	.word	0x84048403

08004fe8 <ai_platform_network_init>:
 8004fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fec:	b1f8      	cbz	r0, 800502e <ai_platform_network_init+0x46>
 8004fee:	4b6e      	ldr	r3, [pc, #440]	; (80051a8 <ai_platform_network_init+0x1c0>)
 8004ff0:	6802      	ldr	r2, [r0, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	d11a      	bne.n	800502e <ai_platform_network_init+0x46>
 8004ff8:	460e      	mov	r6, r1
 8004ffa:	f7ff fc37 	bl	800486c <_ai_platform_acquire_crc>
 8004ffe:	4b6b      	ldr	r3, [pc, #428]	; (80051ac <ai_platform_network_init+0x1c4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d03d      	beq.n	8005088 <ai_platform_network_init+0xa0>
 800500c:	4a68      	ldr	r2, [pc, #416]	; (80051b0 <ai_platform_network_init+0x1c8>)
 800500e:	2301      	movs	r3, #1
 8005010:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005014:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1fb      	bne.n	8005014 <ai_platform_network_init+0x2c>
 800501c:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <ai_platform_network_init+0x1cc>)
 800501e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005022:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005026:	4b64      	ldr	r3, [pc, #400]	; (80051b8 <ai_platform_network_init+0x1d0>)
 8005028:	429a      	cmp	r2, r3
 800502a:	d039      	beq.n	80050a0 <ai_platform_network_init+0xb8>
 800502c:	e7fe      	b.n	800502c <ai_platform_network_init+0x44>
 800502e:	f7ff fc1d 	bl	800486c <_ai_platform_acquire_crc>
 8005032:	4b5e      	ldr	r3, [pc, #376]	; (80051ac <ai_platform_network_init+0x1c4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503e:	d010      	beq.n	8005062 <ai_platform_network_init+0x7a>
 8005040:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <ai_platform_network_init+0x1c8>)
 8005042:	2301      	movs	r3, #1
 8005044:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005048:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1fb      	bne.n	8005048 <ai_platform_network_init+0x60>
 8005050:	4b58      	ldr	r3, [pc, #352]	; (80051b4 <ai_platform_network_init+0x1cc>)
 8005052:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005056:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800505a:	4b57      	ldr	r3, [pc, #348]	; (80051b8 <ai_platform_network_init+0x1d0>)
 800505c:	429a      	cmp	r2, r3
 800505e:	d00d      	beq.n	800507c <ai_platform_network_init+0x94>
 8005060:	e7fe      	b.n	8005060 <ai_platform_network_init+0x78>
 8005062:	4a56      	ldr	r2, [pc, #344]	; (80051bc <ai_platform_network_init+0x1d4>)
 8005064:	2301      	movs	r3, #1
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	6893      	ldr	r3, [r2, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1fc      	bne.n	8005068 <ai_platform_network_init+0x80>
 800506e:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <ai_platform_network_init+0x1cc>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <ai_platform_network_init+0x1d0>)
 8005076:	429a      	cmp	r2, r3
 8005078:	d000      	beq.n	800507c <ai_platform_network_init+0x94>
 800507a:	e7fe      	b.n	800507a <ai_platform_network_init+0x92>
 800507c:	f7ff fbf8 	bl	8004870 <_ai_platform_release_crc>
 8005080:	2600      	movs	r6, #0
 8005082:	4630      	mov	r0, r6
 8005084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005088:	4a4c      	ldr	r2, [pc, #304]	; (80051bc <ai_platform_network_init+0x1d4>)
 800508a:	2301      	movs	r3, #1
 800508c:	6093      	str	r3, [r2, #8]
 800508e:	6893      	ldr	r3, [r2, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1fc      	bne.n	800508e <ai_platform_network_init+0xa6>
 8005094:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <ai_platform_network_init+0x1cc>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <ai_platform_network_init+0x1d0>)
 800509c:	429a      	cmp	r2, r3
 800509e:	d11c      	bne.n	80050da <ai_platform_network_init+0xf2>
 80050a0:	f7ff fbe6 	bl	8004870 <_ai_platform_release_crc>
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	d06f      	beq.n	8005188 <ai_platform_network_init+0x1a0>
 80050a8:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <ai_platform_network_init+0x1d8>)
 80050aa:	6832      	ldr	r2, [r6, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d115      	bne.n	80050dc <ai_platform_network_init+0xf4>
 80050b0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80050b4:	6933      	ldr	r3, [r6, #16]
 80050b6:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80050ba:	89f7      	ldrh	r7, [r6, #14]
 80050bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80050be:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80050c2:	2303      	movs	r3, #3
 80050c4:	84e7      	strh	r7, [r4, #38]	; 0x26
 80050c6:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80050ca:	60e3      	str	r3, [r4, #12]
 80050cc:	4620      	mov	r0, r4
 80050ce:	4626      	mov	r6, r4
 80050d0:	f000 fbc2 	bl	8005858 <ai_layers_init_all>
 80050d4:	4630      	mov	r0, r6
 80050d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050da:	e7fe      	b.n	80050da <ai_platform_network_init+0xf2>
 80050dc:	2101      	movs	r1, #1
 80050de:	4630      	mov	r0, r6
 80050e0:	4635      	mov	r5, r6
 80050e2:	6876      	ldr	r6, [r6, #4]
 80050e4:	f7ff fb74 	bl	80047d0 <ai_buffer_get_size>
 80050e8:	f105 081c 	add.w	r8, r5, #28
 80050ec:	4681      	mov	r9, r0
 80050ee:	2101      	movs	r1, #1
 80050f0:	4640      	mov	r0, r8
 80050f2:	6a2f      	ldr	r7, [r5, #32]
 80050f4:	f7ff fb6c 	bl	80047d0 <ai_buffer_get_size>
 80050f8:	f1b9 0f00 	cmp.w	r9, #0
 80050fc:	d025      	beq.n	800514a <ai_platform_network_init+0x162>
 80050fe:	2201      	movs	r2, #1
 8005100:	4696      	mov	lr, r2
 8005102:	bb30      	cbnz	r0, 8005152 <ai_platform_network_init+0x16a>
 8005104:	4680      	mov	r8, r0
 8005106:	4607      	mov	r7, r0
 8005108:	b376      	cbz	r6, 8005168 <ai_platform_network_init+0x180>
 800510a:	8be3      	ldrh	r3, [r4, #30]
 800510c:	4573      	cmp	r3, lr
 800510e:	d323      	bcc.n	8005158 <ai_platform_network_init+0x170>
 8005110:	b142      	cbz	r2, 8005124 <ai_platform_network_init+0x13c>
 8005112:	46ac      	mov	ip, r5
 8005114:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005118:	6a25      	ldr	r5, [r4, #32]
 800511a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800511c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005120:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005124:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005126:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800512a:	2600      	movs	r6, #0
 800512c:	42bb      	cmp	r3, r7
 800512e:	83a6      	strh	r6, [r4, #28]
 8005130:	d323      	bcc.n	800517a <ai_platform_network_init+0x192>
 8005132:	b37f      	cbz	r7, 8005194 <ai_platform_network_init+0x1ac>
 8005134:	46c4      	mov	ip, r8
 8005136:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800513a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800513c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800513e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005142:	46b6      	mov	lr, r6
 8005144:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005148:	e7bb      	b.n	80050c2 <ai_platform_network_init+0xda>
 800514a:	464a      	mov	r2, r9
 800514c:	46ce      	mov	lr, r9
 800514e:	464d      	mov	r5, r9
 8005150:	e7d7      	b.n	8005102 <ai_platform_network_init+0x11a>
 8005152:	b30f      	cbz	r7, 8005198 <ai_platform_network_init+0x1b0>
 8005154:	2701      	movs	r7, #1
 8005156:	e7d7      	b.n	8005108 <ai_platform_network_init+0x120>
 8005158:	2212      	movs	r2, #18
 800515a:	2116      	movs	r1, #22
 800515c:	f104 0010 	add.w	r0, r4, #16
 8005160:	f000 fb44 	bl	80057ec <core_set_error>
 8005164:	2600      	movs	r6, #0
 8005166:	e78c      	b.n	8005082 <ai_platform_network_init+0x9a>
 8005168:	f1b9 0f00 	cmp.w	r9, #0
 800516c:	d0cd      	beq.n	800510a <ai_platform_network_init+0x122>
 800516e:	2110      	movs	r1, #16
 8005170:	2212      	movs	r2, #18
 8005172:	1860      	adds	r0, r4, r1
 8005174:	f000 fb3a 	bl	80057ec <core_set_error>
 8005178:	e783      	b.n	8005082 <ai_platform_network_init+0x9a>
 800517a:	2213      	movs	r2, #19
 800517c:	2116      	movs	r1, #22
 800517e:	f104 0010 	add.w	r0, r4, #16
 8005182:	f000 fb33 	bl	80057ec <core_set_error>
 8005186:	e77c      	b.n	8005082 <ai_platform_network_init+0x9a>
 8005188:	2110      	movs	r1, #16
 800518a:	2211      	movs	r2, #17
 800518c:	1860      	adds	r0, r4, r1
 800518e:	f000 fb2d 	bl	80057ec <core_set_error>
 8005192:	e776      	b.n	8005082 <ai_platform_network_init+0x9a>
 8005194:	46be      	mov	lr, r7
 8005196:	e794      	b.n	80050c2 <ai_platform_network_init+0xda>
 8005198:	2110      	movs	r1, #16
 800519a:	2213      	movs	r2, #19
 800519c:	1860      	adds	r0, r4, r1
 800519e:	f000 fb25 	bl	80057ec <core_set_error>
 80051a2:	463e      	mov	r6, r7
 80051a4:	e76d      	b.n	8005082 <ai_platform_network_init+0x9a>
 80051a6:	bf00      	nop
 80051a8:	a1c00100 	.word	0xa1c00100
 80051ac:	e0042000 	.word	0xe0042000
 80051b0:	58024000 	.word	0x58024000
 80051b4:	f407a5c2 	.word	0xf407a5c2
 80051b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80051bc:	40023000 	.word	0x40023000
 80051c0:	a1facade 	.word	0xa1facade

080051c4 <ai_platform_network_post_init>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	b1f0      	cbz	r0, 8005206 <ai_platform_network_post_init+0x42>
 80051c8:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <ai_platform_network_post_init+0xf8>)
 80051ca:	6802      	ldr	r2, [r0, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	4604      	mov	r4, r0
 80051d0:	d119      	bne.n	8005206 <ai_platform_network_post_init+0x42>
 80051d2:	f7ff fb4b 	bl	800486c <_ai_platform_acquire_crc>
 80051d6:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <ai_platform_network_post_init+0xfc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d03b      	beq.n	800525c <ai_platform_network_post_init+0x98>
 80051e4:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <ai_platform_network_post_init+0x100>)
 80051e6:	2301      	movs	r3, #1
 80051e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80051ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1fb      	bne.n	80051ec <ai_platform_network_post_init+0x28>
 80051f4:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <ai_platform_network_post_init+0x104>)
 80051f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80051fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <ai_platform_network_post_init+0x108>)
 8005200:	429a      	cmp	r2, r3
 8005202:	d037      	beq.n	8005274 <ai_platform_network_post_init+0xb0>
 8005204:	e7fe      	b.n	8005204 <ai_platform_network_post_init+0x40>
 8005206:	f7ff fb31 	bl	800486c <_ai_platform_acquire_crc>
 800520a:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <ai_platform_network_post_init+0xfc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005216:	d010      	beq.n	800523a <ai_platform_network_post_init+0x76>
 8005218:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <ai_platform_network_post_init+0x100>)
 800521a:	2301      	movs	r3, #1
 800521c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005220:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1fb      	bne.n	8005220 <ai_platform_network_post_init+0x5c>
 8005228:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <ai_platform_network_post_init+0x104>)
 800522a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800522e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005232:	4b26      	ldr	r3, [pc, #152]	; (80052cc <ai_platform_network_post_init+0x108>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d00d      	beq.n	8005254 <ai_platform_network_post_init+0x90>
 8005238:	e7fe      	b.n	8005238 <ai_platform_network_post_init+0x74>
 800523a:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <ai_platform_network_post_init+0x10c>)
 800523c:	2301      	movs	r3, #1
 800523e:	6093      	str	r3, [r2, #8]
 8005240:	6893      	ldr	r3, [r2, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1fc      	bne.n	8005240 <ai_platform_network_post_init+0x7c>
 8005246:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <ai_platform_network_post_init+0x104>)
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <ai_platform_network_post_init+0x108>)
 800524e:	429a      	cmp	r2, r3
 8005250:	d000      	beq.n	8005254 <ai_platform_network_post_init+0x90>
 8005252:	e7fe      	b.n	8005252 <ai_platform_network_post_init+0x8e>
 8005254:	f7ff fb0c 	bl	8004870 <_ai_platform_release_crc>
 8005258:	2000      	movs	r0, #0
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <ai_platform_network_post_init+0x10c>)
 800525e:	2301      	movs	r3, #1
 8005260:	6093      	str	r3, [r2, #8]
 8005262:	6893      	ldr	r3, [r2, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1fc      	bne.n	8005262 <ai_platform_network_post_init+0x9e>
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <ai_platform_network_post_init+0x104>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <ai_platform_network_post_init+0x108>)
 8005270:	429a      	cmp	r2, r3
 8005272:	d11a      	bne.n	80052aa <ai_platform_network_post_init+0xe6>
 8005274:	f7ff fafc 	bl	8004870 <_ai_platform_release_crc>
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	f013 0502 	ands.w	r5, r3, #2
 800527e:	d015      	beq.n	80052ac <ai_platform_network_post_init+0xe8>
 8005280:	4620      	mov	r0, r4
 8005282:	f000 faf7 	bl	8005874 <ai_layers_post_init_all>
 8005286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005288:	b16b      	cbz	r3, 80052a6 <ai_platform_network_post_init+0xe2>
 800528a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800528c:	e007      	b.n	800529e <ai_platform_network_post_init+0xda>
 800528e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8005292:	4798      	blx	r3
 8005294:	692b      	ldr	r3, [r5, #16]
 8005296:	42ab      	cmp	r3, r5
 8005298:	d005      	beq.n	80052a6 <ai_platform_network_post_init+0xe2>
 800529a:	b123      	cbz	r3, 80052a6 <ai_platform_network_post_init+0xe2>
 800529c:	461d      	mov	r5, r3
 800529e:	4629      	mov	r1, r5
 80052a0:	2000      	movs	r0, #0
 80052a2:	2d00      	cmp	r5, #0
 80052a4:	d1f3      	bne.n	800528e <ai_platform_network_post_init+0xca>
 80052a6:	2001      	movs	r0, #1
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	e7fe      	b.n	80052aa <ai_platform_network_post_init+0xe6>
 80052ac:	2210      	movs	r2, #16
 80052ae:	2111      	movs	r1, #17
 80052b0:	18a0      	adds	r0, r4, r2
 80052b2:	f000 fa9b 	bl	80057ec <core_set_error>
 80052b6:	4628      	mov	r0, r5
 80052b8:	bd38      	pop	{r3, r4, r5, pc}
 80052ba:	bf00      	nop
 80052bc:	a1c00100 	.word	0xa1c00100
 80052c0:	e0042000 	.word	0xe0042000
 80052c4:	58024000 	.word	0x58024000
 80052c8:	f407a5c2 	.word	0xf407a5c2
 80052cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80052d0:	40023000 	.word	0x40023000

080052d4 <ai_platform_network_process>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	460e      	mov	r6, r1
 80052da:	b085      	sub	sp, #20
 80052dc:	4693      	mov	fp, r2
 80052de:	4605      	mov	r5, r0
 80052e0:	b120      	cbz	r0, 80052ec <ai_platform_network_process+0x18>
 80052e2:	4bb8      	ldr	r3, [pc, #736]	; (80055c4 <ai_platform_network_process+0x2f0>)
 80052e4:	6802      	ldr	r2, [r0, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	bf18      	it	ne
 80052ea:	2500      	movne	r5, #0
 80052ec:	f7ff fabe 	bl	800486c <_ai_platform_acquire_crc>
 80052f0:	4bb5      	ldr	r3, [pc, #724]	; (80055c8 <ai_platform_network_process+0x2f4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fc:	d010      	beq.n	8005320 <ai_platform_network_process+0x4c>
 80052fe:	4ab3      	ldr	r2, [pc, #716]	; (80055cc <ai_platform_network_process+0x2f8>)
 8005300:	2301      	movs	r3, #1
 8005302:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005306:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1fb      	bne.n	8005306 <ai_platform_network_process+0x32>
 800530e:	4bb0      	ldr	r3, [pc, #704]	; (80055d0 <ai_platform_network_process+0x2fc>)
 8005310:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005314:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005318:	4bae      	ldr	r3, [pc, #696]	; (80055d4 <ai_platform_network_process+0x300>)
 800531a:	429a      	cmp	r2, r3
 800531c:	d00d      	beq.n	800533a <ai_platform_network_process+0x66>
 800531e:	e7fe      	b.n	800531e <ai_platform_network_process+0x4a>
 8005320:	4aad      	ldr	r2, [pc, #692]	; (80055d8 <ai_platform_network_process+0x304>)
 8005322:	2301      	movs	r3, #1
 8005324:	6093      	str	r3, [r2, #8]
 8005326:	6893      	ldr	r3, [r2, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1fc      	bne.n	8005326 <ai_platform_network_process+0x52>
 800532c:	4ba8      	ldr	r3, [pc, #672]	; (80055d0 <ai_platform_network_process+0x2fc>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	4ba8      	ldr	r3, [pc, #672]	; (80055d4 <ai_platform_network_process+0x300>)
 8005334:	429a      	cmp	r2, r3
 8005336:	f040 812c 	bne.w	8005592 <ai_platform_network_process+0x2be>
 800533a:	f7ff fa99 	bl	8004870 <_ai_platform_release_crc>
 800533e:	2d00      	cmp	r5, #0
 8005340:	f000 8154 	beq.w	80055ec <ai_platform_network_process+0x318>
 8005344:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8124 	beq.w	8005594 <ai_platform_network_process+0x2c0>
 800534c:	68eb      	ldr	r3, [r5, #12]
 800534e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2700      	movs	r7, #0
 8005358:	2b03      	cmp	r3, #3
 800535a:	616f      	str	r7, [r5, #20]
 800535c:	f040 813e 	bne.w	80055dc <ai_platform_network_process+0x308>
 8005360:	2e00      	cmp	r6, #0
 8005362:	f000 811d 	beq.w	80055a0 <ai_platform_network_process+0x2cc>
 8005366:	f1ba 0f00 	cmp.w	sl, #0
 800536a:	f000 8119 	beq.w	80055a0 <ai_platform_network_process+0x2cc>
 800536e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8114 	beq.w	80055a0 <ai_platform_network_process+0x2cc>
 8005378:	69b3      	ldr	r3, [r6, #24]
 800537a:	f8cd b00c 	str.w	fp, [sp, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8005384:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d072      	beq.n	8005472 <ai_platform_network_process+0x19e>
 800538c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005390:	2c00      	cmp	r4, #0
 8005392:	d06e      	beq.n	8005472 <ai_platform_network_process+0x19e>
 8005394:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005398:	f8d3 9000 	ldr.w	r9, [r3]
 800539c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80053a0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80053a4:	f000 81de 	beq.w	8005764 <ai_platform_network_process+0x490>
 80053a8:	69a3      	ldr	r3, [r4, #24]
 80053aa:	2101      	movs	r1, #1
 80053ac:	4630      	mov	r0, r6
 80053ae:	685d      	ldr	r5, [r3, #4]
 80053b0:	f7ff fa0e 	bl	80047d0 <ai_buffer_get_size>
 80053b4:	4285      	cmp	r5, r0
 80053b6:	f0c0 811b 	bcc.w	80055f0 <ai_platform_network_process+0x31c>
 80053ba:	68e0      	ldr	r0, [r4, #12]
 80053bc:	69b1      	ldr	r1, [r6, #24]
 80053be:	68c2      	ldr	r2, [r0, #12]
 80053c0:	68cb      	ldr	r3, [r1, #12]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	f040 8114 	bne.w	80055f0 <ai_platform_network_process+0x31c>
 80053c8:	6882      	ldr	r2, [r0, #8]
 80053ca:	688b      	ldr	r3, [r1, #8]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	f040 810f 	bne.w	80055f0 <ai_platform_network_process+0x31c>
 80053d2:	6842      	ldr	r2, [r0, #4]
 80053d4:	684b      	ldr	r3, [r1, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	f040 810a 	bne.w	80055f0 <ai_platform_network_process+0x31c>
 80053dc:	69a3      	ldr	r3, [r4, #24]
 80053de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053e2:	f001 f94b 	bl	800667c <ai_array_get_data_byte_size>
 80053e6:	4605      	mov	r5, r0
 80053e8:	4620      	mov	r0, r4
 80053ea:	f001 f95f 	bl	80066ac <get_tensor_byte_size>
 80053ee:	4285      	cmp	r5, r0
 80053f0:	f0c0 80fe 	bcc.w	80055f0 <ai_platform_network_process+0x31c>
 80053f4:	69a3      	ldr	r3, [r4, #24]
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	f001 f8ac 	bl	8006554 <ai_array_to_buffer_fmt>
 80053fc:	6833      	ldr	r3, [r6, #0]
 80053fe:	4058      	eors	r0, r3
 8005400:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005404:	f040 81b9 	bne.w	800577a <ai_platform_network_process+0x4a6>
 8005408:	6873      	ldr	r3, [r6, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 81ac 	beq.w	8005768 <ai_platform_network_process+0x494>
 8005410:	69b3      	ldr	r3, [r6, #24]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 819c 	beq.w	8005752 <ai_platform_network_process+0x47e>
 800541a:	9a01      	ldr	r2, [sp, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	bf38      	it	cc
 8005420:	461a      	movcc	r2, r3
 8005422:	4620      	mov	r0, r4
 8005424:	9201      	str	r2, [sp, #4]
 8005426:	f001 f941 	bl	80066ac <get_tensor_byte_size>
 800542a:	f8c8 0008 	str.w	r0, [r8, #8]
 800542e:	69b3      	ldr	r3, [r6, #24]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	fb00 f303 	mul.w	r3, r0, r3
 8005436:	f8c8 300c 	str.w	r3, [r8, #12]
 800543a:	6871      	ldr	r1, [r6, #4]
 800543c:	f8c8 1004 	str.w	r1, [r8, #4]
 8005440:	440b      	add	r3, r1
 8005442:	f849 300b 	str.w	r3, [r9, fp]
 8005446:	69a0      	ldr	r0, [r4, #24]
 8005448:	6803      	ldr	r3, [r0, #0]
 800544a:	009a      	lsls	r2, r3, #2
 800544c:	f107 0701 	add.w	r7, r7, #1
 8005450:	f106 061c 	add.w	r6, r6, #28
 8005454:	f100 80af 	bmi.w	80055b6 <ai_platform_network_process+0x2e2>
 8005458:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	4419      	add	r1, r3
 8005460:	6081      	str	r1, [r0, #8]
 8005462:	69a3      	ldr	r3, [r4, #24]
 8005464:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	f8ba 3000 	ldrh.w	r3, [sl]
 800546e:	42bb      	cmp	r3, r7
 8005470:	d888      	bhi.n	8005384 <ai_platform_network_process+0xb0>
 8005472:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8005476:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8005478:	f1bb 0f00 	cmp.w	fp, #0
 800547c:	f000 8186 	beq.w	800578c <ai_platform_network_process+0x4b8>
 8005480:	2a01      	cmp	r2, #1
 8005482:	f240 815e 	bls.w	8005742 <ai_platform_network_process+0x46e>
 8005486:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800548a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8157 	beq.w	8005742 <ai_platform_network_process+0x46e>
 8005494:	465e      	mov	r6, fp
 8005496:	2700      	movs	r7, #0
 8005498:	462c      	mov	r4, r5
 800549a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80b4 	beq.w	800560c <ai_platform_network_process+0x338>
 80054a4:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	f000 80af 	beq.w	800560c <ai_platform_network_process+0x338>
 80054ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80054b2:	f8d3 8000 	ldr.w	r8, [r3]
 80054b6:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80054ba:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80054be:	f000 8171 	beq.w	80057a4 <ai_platform_network_process+0x4d0>
 80054c2:	69ab      	ldr	r3, [r5, #24]
 80054c4:	2101      	movs	r1, #1
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	9302      	str	r3, [sp, #8]
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff f980 	bl	80047d0 <ai_buffer_get_size>
 80054d0:	9b02      	ldr	r3, [sp, #8]
 80054d2:	4283      	cmp	r3, r0
 80054d4:	f0c0 8134 	bcc.w	8005740 <ai_platform_network_process+0x46c>
 80054d8:	68e8      	ldr	r0, [r5, #12]
 80054da:	69b1      	ldr	r1, [r6, #24]
 80054dc:	68c2      	ldr	r2, [r0, #12]
 80054de:	68cb      	ldr	r3, [r1, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	f040 812d 	bne.w	8005740 <ai_platform_network_process+0x46c>
 80054e6:	6882      	ldr	r2, [r0, #8]
 80054e8:	688b      	ldr	r3, [r1, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f040 8128 	bne.w	8005740 <ai_platform_network_process+0x46c>
 80054f0:	6842      	ldr	r2, [r0, #4]
 80054f2:	684b      	ldr	r3, [r1, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f040 8123 	bne.w	8005740 <ai_platform_network_process+0x46c>
 80054fa:	69ab      	ldr	r3, [r5, #24]
 80054fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005500:	f001 f8bc 	bl	800667c <ai_array_get_data_byte_size>
 8005504:	9002      	str	r0, [sp, #8]
 8005506:	4628      	mov	r0, r5
 8005508:	f001 f8d0 	bl	80066ac <get_tensor_byte_size>
 800550c:	9b02      	ldr	r3, [sp, #8]
 800550e:	4283      	cmp	r3, r0
 8005510:	f0c0 8116 	bcc.w	8005740 <ai_platform_network_process+0x46c>
 8005514:	69ab      	ldr	r3, [r5, #24]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	f001 f81c 	bl	8006554 <ai_array_to_buffer_fmt>
 800551c:	6833      	ldr	r3, [r6, #0]
 800551e:	4058      	eors	r0, r3
 8005520:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005524:	f040 8136 	bne.w	8005794 <ai_platform_network_process+0x4c0>
 8005528:	6873      	ldr	r3, [r6, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 814d 	beq.w	80057ca <ai_platform_network_process+0x4f6>
 8005530:	69b3      	ldr	r3, [r6, #24]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 813f 	beq.w	80057b8 <ai_platform_network_process+0x4e4>
 800553a:	9a01      	ldr	r2, [sp, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	bf38      	it	cc
 8005540:	461a      	movcc	r2, r3
 8005542:	4628      	mov	r0, r5
 8005544:	9201      	str	r2, [sp, #4]
 8005546:	f001 f8b1 	bl	80066ac <get_tensor_byte_size>
 800554a:	f8ca 0008 	str.w	r0, [sl, #8]
 800554e:	69b3      	ldr	r3, [r6, #24]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	fb00 f303 	mul.w	r3, r0, r3
 8005556:	f8ca 300c 	str.w	r3, [sl, #12]
 800555a:	6871      	ldr	r1, [r6, #4]
 800555c:	f8ca 1004 	str.w	r1, [sl, #4]
 8005560:	440b      	add	r3, r1
 8005562:	f848 300b 	str.w	r3, [r8, fp]
 8005566:	69a8      	ldr	r0, [r5, #24]
 8005568:	6803      	ldr	r3, [r0, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	f107 0701 	add.w	r7, r7, #1
 8005570:	f106 061c 	add.w	r6, r6, #28
 8005574:	d445      	bmi.n	8005602 <ai_platform_network_process+0x32e>
 8005576:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	4419      	add	r1, r3
 800557e:	6081      	str	r1, [r0, #8]
 8005580:	69ab      	ldr	r3, [r5, #24]
 8005582:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005586:	60da      	str	r2, [r3, #12]
 8005588:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800558c:	429f      	cmp	r7, r3
 800558e:	d384      	bcc.n	800549a <ai_platform_network_process+0x1c6>
 8005590:	e03c      	b.n	800560c <ai_platform_network_process+0x338>
 8005592:	e7fe      	b.n	8005592 <ai_platform_network_process+0x2be>
 8005594:	68ea      	ldr	r2, [r5, #12]
 8005596:	616b      	str	r3, [r5, #20]
 8005598:	f002 0203 	and.w	r2, r2, #3
 800559c:	2a03      	cmp	r2, #3
 800559e:	d11d      	bne.n	80055dc <ai_platform_network_process+0x308>
 80055a0:	2217      	movs	r2, #23
 80055a2:	2112      	movs	r1, #18
 80055a4:	f105 0010 	add.w	r0, r5, #16
 80055a8:	f000 f920 	bl	80057ec <core_set_error>
 80055ac:	2400      	movs	r4, #0
 80055ae:	4620      	mov	r0, r4
 80055b0:	b005      	add	sp, #20
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80055ba:	429f      	cmp	r7, r3
 80055bc:	f4ff aee2 	bcc.w	8005384 <ai_platform_network_process+0xb0>
 80055c0:	e757      	b.n	8005472 <ai_platform_network_process+0x19e>
 80055c2:	bf00      	nop
 80055c4:	a1c00100 	.word	0xa1c00100
 80055c8:	e0042000 	.word	0xe0042000
 80055cc:	58024000 	.word	0x58024000
 80055d0:	f407a5c2 	.word	0xf407a5c2
 80055d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80055d8:	40023000 	.word	0x40023000
 80055dc:	2230      	movs	r2, #48	; 0x30
 80055de:	2111      	movs	r1, #17
 80055e0:	f105 0010 	add.w	r0, r5, #16
 80055e4:	f000 f902 	bl	80057ec <core_set_error>
 80055e8:	2400      	movs	r4, #0
 80055ea:	e7e0      	b.n	80055ae <ai_platform_network_process+0x2da>
 80055ec:	462c      	mov	r4, r5
 80055ee:	e7de      	b.n	80055ae <ai_platform_network_process+0x2da>
 80055f0:	9d02      	ldr	r5, [sp, #8]
 80055f2:	2218      	movs	r2, #24
 80055f4:	2112      	movs	r1, #18
 80055f6:	f105 0010 	add.w	r0, r5, #16
 80055fa:	f000 f8f7 	bl	80057ec <core_set_error>
 80055fe:	2400      	movs	r4, #0
 8005600:	e7d5      	b.n	80055ae <ai_platform_network_process+0x2da>
 8005602:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005606:	429f      	cmp	r7, r3
 8005608:	f4ff af47 	bcc.w	800549a <ai_platform_network_process+0x1c6>
 800560c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005610:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005612:	82a3      	strh	r3, [r4, #20]
 8005614:	4625      	mov	r5, r4
 8005616:	2a00      	cmp	r2, #0
 8005618:	f040 808c 	bne.w	8005734 <ai_platform_network_process+0x460>
 800561c:	4616      	mov	r6, r2
 800561e:	4617      	mov	r7, r2
 8005620:	8aec      	ldrh	r4, [r5, #22]
 8005622:	429c      	cmp	r4, r3
 8005624:	bf38      	it	cc
 8005626:	46ab      	movcc	fp, r5
 8005628:	d2c1      	bcs.n	80055ae <ai_platform_network_process+0x2da>
 800562a:	2e00      	cmp	r6, #0
 800562c:	d030      	beq.n	8005690 <ai_platform_network_process+0x3bc>
 800562e:	f04f 0800 	mov.w	r8, #0
 8005632:	e014      	b.n	800565e <ai_platform_network_process+0x38a>
 8005634:	6882      	ldr	r2, [r0, #8]
 8005636:	68c5      	ldr	r5, [r0, #12]
 8005638:	6863      	ldr	r3, [r4, #4]
 800563a:	1b52      	subs	r2, r2, r5
 800563c:	4413      	add	r3, r2
 800563e:	6083      	str	r3, [r0, #8]
 8005640:	698b      	ldr	r3, [r1, #24]
 8005642:	6862      	ldr	r2, [r4, #4]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800564a:	f859 200a 	ldr.w	r2, [r9, sl]
 800564e:	440b      	add	r3, r1
 8005650:	4293      	cmp	r3, r2
 8005652:	bf24      	itt	cs
 8005654:	68e3      	ldrcs	r3, [r4, #12]
 8005656:	1ad3      	subcs	r3, r2, r3
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	f108 0801 	add.w	r8, r8, #1
 800565e:	8833      	ldrh	r3, [r6, #0]
 8005660:	4543      	cmp	r3, r8
 8005662:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005666:	d913      	bls.n	8005690 <ai_platform_network_process+0x3bc>
 8005668:	6873      	ldr	r3, [r6, #4]
 800566a:	b18b      	cbz	r3, 8005690 <ai_platform_network_process+0x3bc>
 800566c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005670:	b171      	cbz	r1, 8005690 <ai_platform_network_process+0x3bc>
 8005672:	6988      	ldr	r0, [r1, #24]
 8005674:	68b2      	ldr	r2, [r6, #8]
 8005676:	6803      	ldr	r3, [r0, #0]
 8005678:	f8d2 9000 	ldr.w	r9, [r2]
 800567c:	009d      	lsls	r5, r3, #2
 800567e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005682:	d5d7      	bpl.n	8005634 <ai_platform_network_process+0x360>
 8005684:	6881      	ldr	r1, [r0, #8]
 8005686:	68a2      	ldr	r2, [r4, #8]
 8005688:	6860      	ldr	r0, [r4, #4]
 800568a:	f000 fedd 	bl	8006448 <st_int8_copy>
 800568e:	e7da      	b.n	8005646 <ai_platform_network_process+0x372>
 8005690:	4658      	mov	r0, fp
 8005692:	f000 f903 	bl	800589c <ai_layers_forward_all>
 8005696:	2f00      	cmp	r7, #0
 8005698:	d03d      	beq.n	8005716 <ai_platform_network_process+0x442>
 800569a:	2400      	movs	r4, #0
 800569c:	e016      	b.n	80056cc <ai_platform_network_process+0x3f8>
 800569e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80056a2:	f859 100a 	ldr.w	r1, [r9, sl]
 80056a6:	4413      	add	r3, r2
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf24      	itt	cs
 80056ac:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80056b0:	1acb      	subcs	r3, r1, r3
 80056b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80056b6:	6981      	ldr	r1, [r0, #24]
 80056b8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80056bc:	1b52      	subs	r2, r2, r5
 80056be:	4413      	add	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
 80056c2:	6983      	ldr	r3, [r0, #24]
 80056c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	3401      	adds	r4, #1
 80056cc:	883b      	ldrh	r3, [r7, #0]
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	d921      	bls.n	8005716 <ai_platform_network_process+0x442>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	b1fb      	cbz	r3, 8005716 <ai_platform_network_process+0x442>
 80056d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80056da:	b1e0      	cbz	r0, 8005716 <ai_platform_network_process+0x442>
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	6983      	ldr	r3, [r0, #24]
 80056e0:	f8d2 9000 	ldr.w	r9, [r2]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	0092      	lsls	r2, r2, #2
 80056e8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80056ec:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80056f0:	d5d5      	bpl.n	800569e <ai_platform_network_process+0x3ca>
 80056f2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80056f6:	6898      	ldr	r0, [r3, #8]
 80056f8:	f000 fea6 	bl	8006448 <st_int8_copy>
 80056fc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005700:	f859 200a 	ldr.w	r2, [r9, sl]
 8005704:	440b      	add	r3, r1
 8005706:	4293      	cmp	r3, r2
 8005708:	bf24      	itt	cs
 800570a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800570e:	1ad3      	subcs	r3, r2, r3
 8005710:	f8c8 3004 	str.w	r3, [r8, #4]
 8005714:	e7d9      	b.n	80056ca <ai_platform_network_process+0x3f6>
 8005716:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800571a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800571e:	3401      	adds	r4, #1
 8005720:	b2a4      	uxth	r4, r4
 8005722:	42a3      	cmp	r3, r4
 8005724:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005728:	f63f af7f 	bhi.w	800562a <ai_platform_network_process+0x356>
 800572c:	4620      	mov	r0, r4
 800572e:	b005      	add	sp, #20
 8005730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005734:	2a01      	cmp	r2, #1
 8005736:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005738:	d03c      	beq.n	80057b4 <ai_platform_network_process+0x4e0>
 800573a:	f106 070c 	add.w	r7, r6, #12
 800573e:	e76f      	b.n	8005620 <ai_platform_network_process+0x34c>
 8005740:	4625      	mov	r5, r4
 8005742:	2218      	movs	r2, #24
 8005744:	2113      	movs	r1, #19
 8005746:	f105 0010 	add.w	r0, r5, #16
 800574a:	f000 f84f 	bl	80057ec <core_set_error>
 800574e:	2400      	movs	r4, #0
 8005750:	e72d      	b.n	80055ae <ai_platform_network_process+0x2da>
 8005752:	9d02      	ldr	r5, [sp, #8]
 8005754:	4604      	mov	r4, r0
 8005756:	2221      	movs	r2, #33	; 0x21
 8005758:	2112      	movs	r1, #18
 800575a:	f105 0010 	add.w	r0, r5, #16
 800575e:	f000 f845 	bl	80057ec <core_set_error>
 8005762:	e724      	b.n	80055ae <ai_platform_network_process+0x2da>
 8005764:	9d02      	ldr	r5, [sp, #8]
 8005766:	e71b      	b.n	80055a0 <ai_platform_network_process+0x2cc>
 8005768:	9d02      	ldr	r5, [sp, #8]
 800576a:	4604      	mov	r4, r0
 800576c:	2217      	movs	r2, #23
 800576e:	2112      	movs	r1, #18
 8005770:	f105 0010 	add.w	r0, r5, #16
 8005774:	f000 f83a 	bl	80057ec <core_set_error>
 8005778:	e719      	b.n	80055ae <ai_platform_network_process+0x2da>
 800577a:	9d02      	ldr	r5, [sp, #8]
 800577c:	2219      	movs	r2, #25
 800577e:	2112      	movs	r1, #18
 8005780:	f105 0010 	add.w	r0, r5, #16
 8005784:	f000 f832 	bl	80057ec <core_set_error>
 8005788:	2400      	movs	r4, #0
 800578a:	e710      	b.n	80055ae <ai_platform_network_process+0x2da>
 800578c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005790:	82ab      	strh	r3, [r5, #20]
 8005792:	e740      	b.n	8005616 <ai_platform_network_process+0x342>
 8005794:	f104 0010 	add.w	r0, r4, #16
 8005798:	2219      	movs	r2, #25
 800579a:	2113      	movs	r1, #19
 800579c:	f000 f826 	bl	80057ec <core_set_error>
 80057a0:	2400      	movs	r4, #0
 80057a2:	e704      	b.n	80055ae <ai_platform_network_process+0x2da>
 80057a4:	f104 0010 	add.w	r0, r4, #16
 80057a8:	2217      	movs	r2, #23
 80057aa:	2113      	movs	r1, #19
 80057ac:	f000 f81e 	bl	80057ec <core_set_error>
 80057b0:	4654      	mov	r4, sl
 80057b2:	e6fc      	b.n	80055ae <ai_platform_network_process+0x2da>
 80057b4:	2700      	movs	r7, #0
 80057b6:	e733      	b.n	8005620 <ai_platform_network_process+0x34c>
 80057b8:	4625      	mov	r5, r4
 80057ba:	2221      	movs	r2, #33	; 0x21
 80057bc:	4604      	mov	r4, r0
 80057be:	2113      	movs	r1, #19
 80057c0:	f105 0010 	add.w	r0, r5, #16
 80057c4:	f000 f812 	bl	80057ec <core_set_error>
 80057c8:	e6f1      	b.n	80055ae <ai_platform_network_process+0x2da>
 80057ca:	4625      	mov	r5, r4
 80057cc:	2217      	movs	r2, #23
 80057ce:	4604      	mov	r4, r0
 80057d0:	2113      	movs	r1, #19
 80057d2:	f105 0010 	add.w	r0, r5, #16
 80057d6:	f000 f809 	bl	80057ec <core_set_error>
 80057da:	e6e8      	b.n	80055ae <ai_platform_network_process+0x2da>

080057dc <core_init>:
 80057dc:	2001      	movs	r0, #1
 80057de:	4770      	bx	lr

080057e0 <core_get_error>:
 80057e0:	4603      	mov	r3, r0
 80057e2:	2200      	movs	r2, #0
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <core_set_error>:
 80057ec:	4603      	mov	r3, r0
 80057ee:	7800      	ldrb	r0, [r0, #0]
 80057f0:	b108      	cbz	r0, 80057f6 <core_set_error+0xa>
 80057f2:	2000      	movs	r0, #0
 80057f4:	4770      	bx	lr
 80057f6:	7019      	strb	r1, [r3, #0]
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	f362 211f 	bfi	r1, r2, #8, #24
 80057fe:	2001      	movs	r0, #1
 8005800:	6019      	str	r1, [r3, #0]
 8005802:	4770      	bx	lr

08005804 <ai_check_custom_types>:
 8005804:	b082      	sub	sp, #8
 8005806:	4b13      	ldr	r3, [pc, #76]	; (8005854 <ai_check_custom_types+0x50>)
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	b118      	cbz	r0, 8005814 <ai_check_custom_types+0x10>
 800580c:	7803      	ldrb	r3, [r0, #0]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d002      	beq.n	8005818 <ai_check_custom_types+0x14>
 8005812:	2000      	movs	r0, #0
 8005814:	b002      	add	sp, #8
 8005816:	4770      	bx	lr
 8005818:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <ai_check_custom_types+0x26>
 8005820:	2001      	movs	r0, #1
 8005822:	f080 0001 	eor.w	r0, r0, #1
 8005826:	b002      	add	sp, #8
 8005828:	4770      	bx	lr
 800582a:	7842      	ldrb	r2, [r0, #1]
 800582c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005830:	429a      	cmp	r2, r3
 8005832:	f100 0001 	add.w	r0, r0, #1
 8005836:	d1f3      	bne.n	8005820 <ai_check_custom_types+0x1c>
 8005838:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800583c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005840:	429a      	cmp	r2, r3
 8005842:	d1ed      	bne.n	8005820 <ai_check_custom_types+0x1c>
 8005844:	7842      	ldrb	r2, [r0, #1]
 8005846:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	d1e8      	bne.n	8005820 <ai_check_custom_types+0x1c>
 800584e:	2000      	movs	r0, #0
 8005850:	e7e7      	b.n	8005822 <ai_check_custom_types+0x1e>
 8005852:	bf00      	nop
 8005854:	84048403 	.word	0x84048403

08005858 <ai_layers_init_all>:
 8005858:	4601      	mov	r1, r0
 800585a:	2000      	movs	r0, #0
 800585c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800585e:	b143      	cbz	r3, 8005872 <ai_layers_init_all+0x1a>
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	60d9      	str	r1, [r3, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	f100 0001 	add.w	r0, r0, #1
 800586a:	d002      	beq.n	8005872 <ai_layers_init_all+0x1a>
 800586c:	b10a      	cbz	r2, 8005872 <ai_layers_init_all+0x1a>
 800586e:	4613      	mov	r3, r2
 8005870:	e7f5      	b.n	800585e <ai_layers_init_all+0x6>
 8005872:	4770      	bx	lr

08005874 <ai_layers_post_init_all>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005878:	2500      	movs	r5, #0
 800587a:	b16c      	cbz	r4, 8005898 <ai_layers_post_init_all+0x24>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	07db      	lsls	r3, r3, #31
 8005880:	d504      	bpl.n	800588c <ai_layers_post_init_all+0x18>
 8005882:	6a23      	ldr	r3, [r4, #32]
 8005884:	4620      	mov	r0, r4
 8005886:	b10b      	cbz	r3, 800588c <ai_layers_post_init_all+0x18>
 8005888:	4798      	blx	r3
 800588a:	3501      	adds	r5, #1
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	42a3      	cmp	r3, r4
 8005890:	d002      	beq.n	8005898 <ai_layers_post_init_all+0x24>
 8005892:	b10b      	cbz	r3, 8005898 <ai_layers_post_init_all+0x24>
 8005894:	461c      	mov	r4, r3
 8005896:	e7f0      	b.n	800587a <ai_layers_post_init_all+0x6>
 8005898:	4628      	mov	r0, r5
 800589a:	bd38      	pop	{r3, r4, r5, pc}

0800589c <ai_layers_forward_all>:
 800589c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80058a4:	4604      	mov	r4, r0
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	d02b      	beq.n	8005904 <ai_layers_forward_all+0x68>
 80058ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80058ae:	6381      	str	r1, [r0, #56]	; 0x38
 80058b0:	b321      	cbz	r1, 80058fc <ai_layers_forward_all+0x60>
 80058b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80058b4:	2001      	movs	r0, #1
 80058b6:	47c0      	blx	r8
 80058b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80058ba:	b1fe      	cbz	r6, 80058fc <ai_layers_forward_all+0x60>
 80058bc:	2700      	movs	r7, #0
 80058be:	4631      	mov	r1, r6
 80058c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058c2:	2002      	movs	r0, #2
 80058c4:	47c0      	blx	r8
 80058c6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80058c8:	4628      	mov	r0, r5
 80058ca:	696b      	ldr	r3, [r5, #20]
 80058cc:	4798      	blx	r3
 80058ce:	692e      	ldr	r6, [r5, #16]
 80058d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058d4:	42b5      	cmp	r5, r6
 80058d6:	f04f 0003 	mov.w	r0, #3
 80058da:	d007      	beq.n	80058ec <ai_layers_forward_all+0x50>
 80058dc:	47c0      	blx	r8
 80058de:	3701      	adds	r7, #1
 80058e0:	63a6      	str	r6, [r4, #56]	; 0x38
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	d1eb      	bne.n	80058be <ai_layers_forward_all+0x22>
 80058e6:	4638      	mov	r0, r7
 80058e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ec:	2003      	movs	r0, #3
 80058ee:	47c0      	blx	r8
 80058f0:	2300      	movs	r3, #0
 80058f2:	3701      	adds	r7, #1
 80058f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80058f6:	4638      	mov	r0, r7
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fc:	2700      	movs	r7, #0
 80058fe:	4638      	mov	r0, r7
 8005900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005904:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005906:	6385      	str	r5, [r0, #56]	; 0x38
 8005908:	2d00      	cmp	r5, #0
 800590a:	d0f7      	beq.n	80058fc <ai_layers_forward_all+0x60>
 800590c:	4647      	mov	r7, r8
 800590e:	696b      	ldr	r3, [r5, #20]
 8005910:	4628      	mov	r0, r5
 8005912:	4798      	blx	r3
 8005914:	462b      	mov	r3, r5
 8005916:	692d      	ldr	r5, [r5, #16]
 8005918:	429d      	cmp	r5, r3
 800591a:	d004      	beq.n	8005926 <ai_layers_forward_all+0x8a>
 800591c:	63a5      	str	r5, [r4, #56]	; 0x38
 800591e:	3701      	adds	r7, #1
 8005920:	2d00      	cmp	r5, #0
 8005922:	d1f4      	bne.n	800590e <ai_layers_forward_all+0x72>
 8005924:	e7df      	b.n	80058e6 <ai_layers_forward_all+0x4a>
 8005926:	2300      	movs	r3, #0
 8005928:	63a3      	str	r3, [r4, #56]	; 0x38
 800592a:	3701      	adds	r7, #1
 800592c:	e7db      	b.n	80058e6 <ai_layers_forward_all+0x4a>
 800592e:	bf00      	nop

08005930 <forward_dense>:
 8005930:	6983      	ldr	r3, [r0, #24]
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	2a00      	cmp	r2, #0
 8005936:	f000 8181 	beq.w	8005c3c <forward_dense+0x30c>
 800593a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593e:	ed2d 8b02 	vpush	{d8}
 8005942:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005946:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800594a:	b095      	sub	sp, #84	; 0x54
 800594c:	b105      	cbz	r5, 8005950 <forward_dense+0x20>
 800594e:	682d      	ldr	r5, [r5, #0]
 8005950:	2a01      	cmp	r2, #1
 8005952:	f000 828f 	beq.w	8005e74 <forward_dense+0x544>
 8005956:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800595a:	b106      	cbz	r6, 800595e <forward_dense+0x2e>
 800595c:	6836      	ldr	r6, [r6, #0]
 800595e:	2a02      	cmp	r2, #2
 8005960:	f000 816e 	beq.w	8005c40 <forward_dense+0x310>
 8005964:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005968:	930b      	str	r3, [sp, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8274 	beq.w	8005e58 <forward_dense+0x528>
 8005970:	4619      	mov	r1, r3
 8005972:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8005976:	6809      	ldr	r1, [r1, #0]
 8005978:	910d      	str	r1, [sp, #52]	; 0x34
 800597a:	2b01      	cmp	r3, #1
 800597c:	f240 826e 	bls.w	8005e5c <forward_dense+0x52c>
 8005980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	930b      	str	r3, [sp, #44]	; 0x2c
 8005986:	460b      	mov	r3, r1
 8005988:	68e8      	ldr	r0, [r5, #12]
 800598a:	68f7      	ldr	r7, [r6, #12]
 800598c:	6840      	ldr	r0, [r0, #4]
 800598e:	6999      	ldr	r1, [r3, #24]
 8005990:	9013      	str	r0, [sp, #76]	; 0x4c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	680b      	ldr	r3, [r1, #0]
 8005996:	9012      	str	r0, [sp, #72]	; 0x48
 8005998:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800599c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80059a0:	fb00 f404 	mul.w	r4, r0, r4
 80059a4:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80059a8:	fa4e f000 	asr.w	r0, lr, r0
 80059ac:	2a03      	cmp	r2, #3
 80059ae:	9010      	str	r0, [sp, #64]	; 0x40
 80059b0:	f000 825d 	beq.w	8005e6e <forward_dense+0x53e>
 80059b4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80059b8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80059bc:	2a00      	cmp	r2, #0
 80059be:	f000 8246 	beq.w	8005e4e <forward_dense+0x51e>
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	f000 8242 	beq.w	8005e4e <forward_dense+0x51e>
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80059d0:	f000 822c 	beq.w	8005e2c <forward_dense+0x4fc>
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	f000 8229 	beq.w	8005e2c <forward_dense+0x4fc>
 80059da:	f04f 0b00 	mov.w	fp, #0
 80059de:	69b2      	ldr	r2, [r6, #24]
 80059e0:	69ab      	ldr	r3, [r5, #24]
 80059e2:	6891      	ldr	r1, [r2, #8]
 80059e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	6952      	ldr	r2, [r2, #20]
 80059ea:	9106      	str	r1, [sp, #24]
 80059ec:	fb07 f404 	mul.w	r4, r7, r4
 80059f0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80059f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059f6:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80059fa:	4281      	cmp	r1, r0
 80059fc:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8005a00:	900e      	str	r0, [sp, #56]	; 0x38
 8005a02:	940c      	str	r4, [sp, #48]	; 0x30
 8005a04:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005a08:	f080 8113 	bcs.w	8005c32 <forward_dense+0x302>
 8005a0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a0e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8005c5c <forward_dense+0x32c>
 8005a12:	f021 0201 	bic.w	r2, r1, #1
 8005a16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005a1a:	9204      	str	r2, [sp, #16]
 8005a1c:	f001 0201 	and.w	r2, r1, #1
 8005a20:	08c8      	lsrs	r0, r1, #3
 8005a22:	9208      	str	r2, [sp, #32]
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	f001 0a07 	and.w	sl, r1, #7
 8005a2a:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a2c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8005a30:	3320      	adds	r3, #32
 8005a32:	465c      	mov	r4, fp
 8005a34:	9007      	str	r0, [sp, #28]
 8005a36:	46cb      	mov	fp, r9
 8005a38:	9205      	str	r2, [sp, #20]
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	46c1      	mov	r9, r8
 8005a3e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8005a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	9b02      	ldr	r3, [sp, #8]
 8005a4a:	3b20      	subs	r3, #32
 8005a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a50:	b10b      	cbz	r3, 8005a56 <forward_dense+0x126>
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	f000 81da 	beq.w	8005e10 <forward_dense+0x4e0>
 8005a5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005a5e:	2904      	cmp	r1, #4
 8005a60:	9906      	ldr	r1, [sp, #24]
 8005a62:	f000 80fd 	beq.w	8005c60 <forward_dense+0x330>
 8005a66:	4549      	cmp	r1, r9
 8005a68:	f080 80d2 	bcs.w	8005c10 <forward_dense+0x2e0>
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	9907      	ldr	r1, [sp, #28]
 8005a70:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005a74:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005a78:	1c4e      	adds	r6, r1, #1
 8005a7a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005a7e:	4694      	mov	ip, r2
 8005a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a82:	468e      	mov	lr, r1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80de 	beq.w	8005c46 <forward_dense+0x316>
 8005a8a:	ecf3 2a01 	vldmia	r3!, {s5}
 8005a8e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005c5c <forward_dense+0x32c>
 8005a92:	f1be 0f00 	cmp.w	lr, #0
 8005a96:	f000 80de 	beq.w	8005c56 <forward_dense+0x326>
 8005a9a:	f10c 0108 	add.w	r1, ip, #8
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8005aa4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8005aa8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8005aac:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8005ab0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8005ab4:	ed10 5a04 	vldr	s10, [r0, #-16]
 8005ab8:	ed50 5a03 	vldr	s11, [r0, #-12]
 8005abc:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005ac0:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005ac4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ac8:	edd5 7a00 	vldr	s15, [r5]
 8005acc:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8005ad0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ad4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005ad8:	ed95 3a00 	vldr	s6, [r5]
 8005adc:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8005ae0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005ae4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ae8:	3108      	adds	r1, #8
 8005aea:	edd5 3a00 	vldr	s7, [r5]
 8005aee:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005af2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005af6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005afa:	3020      	adds	r0, #32
 8005afc:	ed95 4a00 	vldr	s8, [r5]
 8005b00:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005b04:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005b08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b0c:	edd5 4a00 	vldr	s9, [r5]
 8005b10:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005b14:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005b18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b1c:	ed95 5a00 	vldr	s10, [r5]
 8005b20:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005b24:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005b28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b2c:	edd5 5a00 	vldr	s11, [r5]
 8005b30:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005b34:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005b38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b3c:	428e      	cmp	r6, r1
 8005b3e:	ed95 6a00 	vldr	s12, [r5]
 8005b42:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b4a:	d1a9      	bne.n	8005aa0 <forward_dense+0x170>
 8005b4c:	f1a6 0108 	sub.w	r1, r6, #8
 8005b50:	4650      	mov	r0, sl
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	d04a      	beq.n	8005bec <forward_dense+0x2bc>
 8005b56:	780d      	ldrb	r5, [r1, #0]
 8005b58:	edd0 6a00 	vldr	s13, [r0]
 8005b5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b60:	edd5 7a00 	vldr	s15, [r5]
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b6a:	d03f      	beq.n	8005bec <forward_dense+0x2bc>
 8005b6c:	784d      	ldrb	r5, [r1, #1]
 8005b6e:	edd0 6a01 	vldr	s13, [r0, #4]
 8005b72:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b76:	edd5 7a00 	vldr	s15, [r5]
 8005b7a:	2a02      	cmp	r2, #2
 8005b7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b80:	d034      	beq.n	8005bec <forward_dense+0x2bc>
 8005b82:	788d      	ldrb	r5, [r1, #2]
 8005b84:	edd0 6a02 	vldr	s13, [r0, #8]
 8005b88:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b8c:	edd5 7a00 	vldr	s15, [r5]
 8005b90:	2a03      	cmp	r2, #3
 8005b92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b96:	d029      	beq.n	8005bec <forward_dense+0x2bc>
 8005b98:	78cd      	ldrb	r5, [r1, #3]
 8005b9a:	edd0 6a03 	vldr	s13, [r0, #12]
 8005b9e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ba2:	edd5 7a00 	vldr	s15, [r5]
 8005ba6:	2a04      	cmp	r2, #4
 8005ba8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bac:	d01e      	beq.n	8005bec <forward_dense+0x2bc>
 8005bae:	790d      	ldrb	r5, [r1, #4]
 8005bb0:	edd0 6a04 	vldr	s13, [r0, #16]
 8005bb4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005bb8:	edd5 7a00 	vldr	s15, [r5]
 8005bbc:	2a05      	cmp	r2, #5
 8005bbe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bc2:	d013      	beq.n	8005bec <forward_dense+0x2bc>
 8005bc4:	794d      	ldrb	r5, [r1, #5]
 8005bc6:	edd0 6a05 	vldr	s13, [r0, #20]
 8005bca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005bce:	edd5 7a00 	vldr	s15, [r5]
 8005bd2:	2a06      	cmp	r2, #6
 8005bd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bd8:	d008      	beq.n	8005bec <forward_dense+0x2bc>
 8005bda:	7989      	ldrb	r1, [r1, #6]
 8005bdc:	edd0 7a06 	vldr	s15, [r0, #24]
 8005be0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005be4:	edd1 6a00 	vldr	s13, [r1]
 8005be8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bec:	44dc      	add	ip, fp
 8005bee:	445e      	add	r6, fp
 8005bf0:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005bf4:	eca7 7a01 	vstmia	r7!, {s14}
 8005bf8:	454f      	cmp	r7, r9
 8005bfa:	f4ff af43 	bcc.w	8005a84 <forward_dense+0x154>
 8005bfe:	9a06      	ldr	r2, [sp, #24]
 8005c00:	eba9 0302 	sub.w	r3, r9, r2
 8005c04:	3b01      	subs	r3, #1
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	18d3      	adds	r3, r2, r3
 8005c0e:	9306      	str	r3, [sp, #24]
 8005c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c12:	9a05      	ldr	r2, [sp, #20]
 8005c14:	4499      	add	r9, r3
 8005c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c18:	441a      	add	r2, r3
 8005c1a:	9205      	str	r2, [sp, #20]
 8005c1c:	9a02      	ldr	r2, [sp, #8]
 8005c1e:	441a      	add	r2, r3
 8005c20:	9202      	str	r2, [sp, #8]
 8005c22:	9a04      	ldr	r2, [sp, #16]
 8005c24:	441a      	add	r2, r3
 8005c26:	9204      	str	r2, [sp, #16]
 8005c28:	9b06      	ldr	r3, [sp, #24]
 8005c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	f4ff af08 	bcc.w	8005a42 <forward_dense+0x112>
 8005c32:	b015      	add	sp, #84	; 0x54
 8005c34:	ecbd 8b02 	vpop	{d8}
 8005c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3c:	6853      	ldr	r3, [r2, #4]
 8005c3e:	deff      	udf	#255	; 0xff
 8005c40:	2300      	movs	r3, #0
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	deff      	udf	#255	; 0xff
 8005c46:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005c5c <forward_dense+0x32c>
 8005c4a:	eef0 2a48 	vmov.f32	s5, s16
 8005c4e:	f1be 0f00 	cmp.w	lr, #0
 8005c52:	f47f af22 	bne.w	8005a9a <forward_dense+0x16a>
 8005c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c58:	4661      	mov	r1, ip
 8005c5a:	e77a      	b.n	8005b52 <forward_dense+0x222>
 8005c5c:	00000000 	.word	0x00000000
 8005c60:	4549      	cmp	r1, r9
 8005c62:	d2d5      	bcs.n	8005c10 <forward_dense+0x2e0>
 8005c64:	9807      	ldr	r0, [sp, #28]
 8005c66:	9103      	str	r1, [sp, #12]
 8005c68:	9904      	ldr	r1, [sp, #16]
 8005c6a:	f100 0c01 	add.w	ip, r0, #1
 8005c6e:	3901      	subs	r1, #1
 8005c70:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005c74:	9109      	str	r1, [sp, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80b2 	beq.w	8005de0 <forward_dense+0x4b0>
 8005c7c:	9907      	ldr	r1, [sp, #28]
 8005c7e:	ecf3 2a01 	vldmia	r3!, {s5}
 8005c82:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8005c5c <forward_dense+0x32c>
 8005c86:	2900      	cmp	r1, #0
 8005c88:	f000 80b2 	beq.w	8005df0 <forward_dense+0x4c0>
 8005c8c:	9902      	ldr	r1, [sp, #8]
 8005c8e:	1d10      	adds	r0, r2, #4
 8005c90:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8005c94:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8005c98:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8005c9c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8005ca0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8005ca4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8005ca8:	ed11 5a04 	vldr	s10, [r1, #-16]
 8005cac:	ed51 5a03 	vldr	s11, [r1, #-12]
 8005cb0:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005cb4:	ed51 6a01 	vldr	s13, [r1, #-4]
 8005cb8:	f006 070f 	and.w	r7, r6, #15
 8005cbc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005cc0:	edd7 7a00 	vldr	s15, [r7]
 8005cc4:	0936      	lsrs	r6, r6, #4
 8005cc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005cca:	ed96 3a00 	vldr	s6, [r6]
 8005cce:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005cd2:	092e      	lsrs	r6, r5, #4
 8005cd4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005cd8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005cdc:	f005 050f 	and.w	r5, r5, #15
 8005ce0:	edd6 3a00 	vldr	s7, [r6]
 8005ce4:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005ce8:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005cec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005cf0:	0937      	lsrs	r7, r6, #4
 8005cf2:	ed95 4a00 	vldr	s8, [r5]
 8005cf6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8005cfa:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005cfe:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005d02:	f006 060f 	and.w	r6, r6, #15
 8005d06:	edd7 4a00 	vldr	s9, [r7]
 8005d0a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005d0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005d12:	3004      	adds	r0, #4
 8005d14:	ed96 5a00 	vldr	s10, [r6]
 8005d18:	092e      	lsrs	r6, r5, #4
 8005d1a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d1e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005d22:	f005 050f 	and.w	r5, r5, #15
 8005d26:	edd6 5a00 	vldr	s11, [r6]
 8005d2a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005d2e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005d32:	4584      	cmp	ip, r0
 8005d34:	ed95 6a00 	vldr	s12, [r5]
 8005d38:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d3c:	f101 0120 	add.w	r1, r1, #32
 8005d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d44:	d1a4      	bne.n	8005c90 <forward_dense+0x360>
 8005d46:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005d4a:	f1ac 0804 	sub.w	r8, ip, #4
 8005d4e:	9904      	ldr	r1, [sp, #16]
 8005d50:	458e      	cmp	lr, r1
 8005d52:	d22a      	bcs.n	8005daa <forward_dense+0x47a>
 8005d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d56:	eba1 070e 	sub.w	r7, r1, lr
 8005d5a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8005d5e:	f10e 0008 	add.w	r0, lr, #8
 8005d62:	f108 36ff 	add.w	r6, r8, #4294967295
 8005d66:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8005d6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d6e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005d72:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005d76:	f001 050f 	and.w	r5, r1, #15
 8005d7a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005d7e:	edd5 7a00 	vldr	s15, [r5]
 8005d82:	0909      	lsrs	r1, r1, #4
 8005d84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005d88:	ed91 6a00 	vldr	s12, [r1]
 8005d8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005d90:	42b7      	cmp	r7, r6
 8005d92:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d96:	f100 0008 	add.w	r0, r0, #8
 8005d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d9e:	d1e4      	bne.n	8005d6a <forward_dense+0x43a>
 8005da0:	f10a 0a01 	add.w	sl, sl, #1
 8005da4:	44d0      	add	r8, sl
 8005da6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8005daa:	9908      	ldr	r1, [sp, #32]
 8005dac:	b321      	cbz	r1, 8005df8 <forward_dense+0x4c8>
 8005dae:	f898 1000 	ldrb.w	r1, [r8]
 8005db2:	edde 7a00 	vldr	s15, [lr]
 8005db6:	0909      	lsrs	r1, r1, #4
 8005db8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005dbc:	edd1 6a00 	vldr	s13, [r1]
 8005dc0:	9903      	ldr	r1, [sp, #12]
 8005dc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005dc6:	445a      	add	r2, fp
 8005dc8:	44dc      	add	ip, fp
 8005dca:	ee72 2a87 	vadd.f32	s5, s5, s14
 8005dce:	ece1 2a01 	vstmia	r1!, {s5}
 8005dd2:	4589      	cmp	r9, r1
 8005dd4:	9103      	str	r1, [sp, #12]
 8005dd6:	f67f af12 	bls.w	8005bfe <forward_dense+0x2ce>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f47f af4e 	bne.w	8005c7c <forward_dense+0x34c>
 8005de0:	9907      	ldr	r1, [sp, #28]
 8005de2:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8005c5c <forward_dense+0x32c>
 8005de6:	eef0 2a48 	vmov.f32	s5, s16
 8005dea:	2900      	cmp	r1, #0
 8005dec:	f47f af4e 	bne.w	8005c8c <forward_dense+0x35c>
 8005df0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005df4:	4690      	mov	r8, r2
 8005df6:	e7aa      	b.n	8005d4e <forward_dense+0x41e>
 8005df8:	9903      	ldr	r1, [sp, #12]
 8005dfa:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005dfe:	445a      	add	r2, fp
 8005e00:	eca1 7a01 	vstmia	r1!, {s14}
 8005e04:	4549      	cmp	r1, r9
 8005e06:	9103      	str	r1, [sp, #12]
 8005e08:	44dc      	add	ip, fp
 8005e0a:	f4ff af34 	bcc.w	8005c76 <forward_dense+0x346>
 8005e0e:	e6f6      	b.n	8005bfe <forward_dense+0x2ce>
 8005e10:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005e12:	9d06      	ldr	r5, [sp, #24]
 8005e14:	9101      	str	r1, [sp, #4]
 8005e16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005e18:	9100      	str	r1, [sp, #0]
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e1e:	f000 f9ef 	bl	8006200 <forward_lite_dense_if32of32wf32>
 8005e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e24:	462b      	mov	r3, r5
 8005e26:	4413      	add	r3, r2
 8005e28:	9306      	str	r3, [sp, #24]
 8005e2a:	e6f1      	b.n	8005c10 <forward_dense+0x2e0>
 8005e2c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005e30:	f1b9 0f00 	cmp.w	r9, #0
 8005e34:	d016      	beq.n	8005e64 <forward_dense+0x534>
 8005e36:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005e3a:	f000 fbf7 	bl	800662c <ai_array_get_byte_size>
 8005e3e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005e42:	4602      	mov	r2, r0
 8005e44:	4659      	mov	r1, fp
 8005e46:	4640      	mov	r0, r8
 8005e48:	f000 fafe 	bl	8006448 <st_int8_copy>
 8005e4c:	e5c7      	b.n	80059de <forward_dense+0xae>
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00a      	beq.n	8005e68 <forward_dense+0x538>
 8005e52:	f04f 0900 	mov.w	r9, #0
 8005e56:	e5bd      	b.n	80059d4 <forward_dense+0xa4>
 8005e58:	930d      	str	r3, [sp, #52]	; 0x34
 8005e5a:	e595      	b.n	8005988 <forward_dense+0x58>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e60:	460b      	mov	r3, r1
 8005e62:	e591      	b.n	8005988 <forward_dense+0x58>
 8005e64:	46c3      	mov	fp, r8
 8005e66:	e5ba      	b.n	80059de <forward_dense+0xae>
 8005e68:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005e6c:	e5b7      	b.n	80059de <forward_dense+0xae>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	deff      	udf	#255	; 0xff
 8005e74:	2300      	movs	r3, #0
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	deff      	udf	#255	; 0xff
 8005e7a:	bf00      	nop

08005e7c <forward_relu>:
 8005e7c:	6982      	ldr	r2, [r0, #24]
 8005e7e:	8813      	ldrh	r3, [r2, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05b      	beq.n	8005f3c <forward_relu+0xc0>
 8005e84:	6851      	ldr	r1, [r2, #4]
 8005e86:	684a      	ldr	r2, [r1, #4]
 8005e88:	b102      	cbz	r2, 8005e8c <forward_relu+0x10>
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f000 8123 	beq.w	80060d8 <forward_relu+0x25c>
 8005e92:	b470      	push	{r4, r5, r6}
 8005e94:	6909      	ldr	r1, [r1, #16]
 8005e96:	b101      	cbz	r1, 8005e9a <forward_relu+0x1e>
 8005e98:	6809      	ldr	r1, [r1, #0]
 8005e9a:	69c6      	ldr	r6, [r0, #28]
 8005e9c:	2e00      	cmp	r6, #0
 8005e9e:	f000 8097 	beq.w	8005fd0 <forward_relu+0x154>
 8005ea2:	6873      	ldr	r3, [r6, #4]
 8005ea4:	6988      	ldr	r0, [r1, #24]
 8005ea6:	6991      	ldr	r1, [r2, #24]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f000 80c1 	beq.w	8006030 <forward_relu+0x1b4>
 8005eae:	6893      	ldr	r3, [r2, #8]
 8005eb0:	6880      	ldr	r0, [r0, #8]
 8005eb2:	688c      	ldr	r4, [r1, #8]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	f000 80f2 	beq.w	800609e <forward_relu+0x222>
 8005eba:	68d5      	ldr	r5, [r2, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005ec2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ec6:	42ab      	cmp	r3, r5
 8005ec8:	fb01 f202 	mul.w	r2, r1, r2
 8005ecc:	d1f9      	bne.n	8005ec2 <forward_relu+0x46>
 8005ece:	68b3      	ldr	r3, [r6, #8]
 8005ed0:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ed4:	edd3 6a00 	vldr	s13, [r3]
 8005ed8:	ed93 6a01 	vldr	s12, [r3, #4]
 8005edc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005ee0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005eee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005ef2:	d425      	bmi.n	8005f40 <forward_relu+0xc4>
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d81f      	bhi.n	8005f38 <forward_relu+0xbc>
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	1d01      	adds	r1, r0, #4
 8005efc:	e00d      	b.n	8005f1a <forward_relu+0x9e>
 8005efe:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f06:	db03      	blt.n	8005f10 <forward_relu+0x94>
 8005f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005f10:	3b08      	subs	r3, #8
 8005f12:	429c      	cmp	r4, r3
 8005f14:	ed61 7a01 	vstmdb	r1!, {s15}
 8005f18:	d80e      	bhi.n	8005f38 <forward_relu+0xbc>
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	d9e9      	bls.n	8005efe <forward_relu+0x82>
 8005f2a:	3b08      	subs	r3, #8
 8005f2c:	eef0 7a47 	vmov.f32	s15, s14
 8005f30:	429c      	cmp	r4, r3
 8005f32:	ed61 7a01 	vstmdb	r1!, {s15}
 8005f36:	d9f0      	bls.n	8005f1a <forward_relu+0x9e>
 8005f38:	bc70      	pop	{r4, r5, r6}
 8005f3a:	4770      	bx	lr
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	deff      	udf	#255	; 0xff
 8005f40:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f48:	d11f      	bne.n	8005f8a <forward_relu+0x10e>
 8005f4a:	429c      	cmp	r4, r3
 8005f4c:	d8f4      	bhi.n	8005f38 <forward_relu+0xbc>
 8005f4e:	1b1c      	subs	r4, r3, r4
 8005f50:	f024 0403 	bic.w	r4, r4, #3
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	2500      	movs	r5, #0
 8005f58:	1b1b      	subs	r3, r3, r4
 8005f5a:	1d01      	adds	r1, r0, #4
 8005f5c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005f60:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f68:	dc0a      	bgt.n	8005f80 <forward_relu+0x104>
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005f70:	d0e2      	beq.n	8005f38 <forward_relu+0xbc>
 8005f72:	ed72 7a01 	vldmdb	r2!, {s15}
 8005f76:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7e:	ddf4      	ble.n	8005f6a <forward_relu+0xee>
 8005f80:	429a      	cmp	r2, r3
 8005f82:	ed61 7a01 	vstmdb	r1!, {s15}
 8005f86:	d1e9      	bne.n	8005f5c <forward_relu+0xe0>
 8005f88:	e7d6      	b.n	8005f38 <forward_relu+0xbc>
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	d8d4      	bhi.n	8005f38 <forward_relu+0xbc>
 8005f8e:	1b1c      	subs	r4, r3, r4
 8005f90:	f024 0403 	bic.w	r4, r4, #3
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	1d01      	adds	r1, r0, #4
 8005f98:	1b1b      	subs	r3, r3, r4
 8005f9a:	ed72 7a01 	vldmdb	r2!, {s15}
 8005f9e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa6:	db0e      	blt.n	8005fc6 <forward_relu+0x14a>
 8005fa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fac:	4293      	cmp	r3, r2
 8005fae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005fb2:	ed61 7a01 	vstmdb	r1!, {s15}
 8005fb6:	d0bf      	beq.n	8005f38 <forward_relu+0xbc>
 8005fb8:	ed72 7a01 	vldmdb	r2!, {s15}
 8005fbc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc4:	daf0      	bge.n	8005fa8 <forward_relu+0x12c>
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	ed61 7a01 	vstmdb	r1!, {s15}
 8005fcc:	d1e5      	bne.n	8005f9a <forward_relu+0x11e>
 8005fce:	e7b3      	b.n	8005f38 <forward_relu+0xbc>
 8005fd0:	6893      	ldr	r3, [r2, #8]
 8005fd2:	6989      	ldr	r1, [r1, #24]
 8005fd4:	6990      	ldr	r0, [r2, #24]
 8005fd6:	6889      	ldr	r1, [r1, #8]
 8005fd8:	6884      	ldr	r4, [r0, #8]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	d075      	beq.n	80060ca <forward_relu+0x24e>
 8005fde:	68d5      	ldr	r5, [r2, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005fe6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005fea:	429d      	cmp	r5, r3
 8005fec:	fb00 f202 	mul.w	r2, r0, r2
 8005ff0:	d1f9      	bne.n	8005fe6 <forward_relu+0x16a>
 8005ff2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005ffc:	4294      	cmp	r4, r2
 8005ffe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006002:	d899      	bhi.n	8005f38 <forward_relu+0xbc>
 8006004:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80060e0 <forward_relu+0x264>
 8006008:	3204      	adds	r2, #4
 800600a:	3104      	adds	r1, #4
 800600c:	4613      	mov	r3, r2
 800600e:	ed72 7a01 	vldmdb	r2!, {s15}
 8006012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601a:	f1a3 0308 	sub.w	r3, r3, #8
 800601e:	bfb8      	it	lt
 8006020:	eef0 7a47 	vmovlt.f32	s15, s14
 8006024:	429c      	cmp	r4, r3
 8006026:	ed61 7a01 	vstmdb	r1!, {s15}
 800602a:	d9ef      	bls.n	800600c <forward_relu+0x190>
 800602c:	bc70      	pop	{r4, r5, r6}
 800602e:	4770      	bx	lr
 8006030:	688c      	ldr	r4, [r1, #8]
 8006032:	6891      	ldr	r1, [r2, #8]
 8006034:	6880      	ldr	r0, [r0, #8]
 8006036:	0a09      	lsrs	r1, r1, #8
 8006038:	d049      	beq.n	80060ce <forward_relu+0x252>
 800603a:	68d5      	ldr	r5, [r2, #12]
 800603c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8006040:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006044:	42aa      	cmp	r2, r5
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	d1f9      	bne.n	8006040 <forward_relu+0x1c4>
 800604c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006050:	3a01      	subs	r2, #1
 8006052:	68b1      	ldr	r1, [r6, #8]
 8006054:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006058:	429c      	cmp	r4, r3
 800605a:	ed91 7a00 	vldr	s14, [r1]
 800605e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006062:	f63f af69 	bhi.w	8005f38 <forward_relu+0xbc>
 8006066:	2500      	movs	r5, #0
 8006068:	3304      	adds	r3, #4
 800606a:	1d02      	adds	r2, r0, #4
 800606c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006078:	f1a3 0104 	sub.w	r1, r3, #4
 800607c:	f1a3 0308 	sub.w	r3, r3, #8
 8006080:	d406      	bmi.n	8006090 <forward_relu+0x214>
 8006082:	429c      	cmp	r4, r3
 8006084:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006088:	f63f af56 	bhi.w	8005f38 <forward_relu+0xbc>
 800608c:	460b      	mov	r3, r1
 800608e:	e7ed      	b.n	800606c <forward_relu+0x1f0>
 8006090:	429c      	cmp	r4, r3
 8006092:	ed62 7a01 	vstmdb	r2!, {s15}
 8006096:	f63f af4f 	bhi.w	8005f38 <forward_relu+0xbc>
 800609a:	460b      	mov	r3, r1
 800609c:	e7e6      	b.n	800606c <forward_relu+0x1f0>
 800609e:	68b3      	ldr	r3, [r6, #8]
 80060a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80060a4:	edd3 6a00 	vldr	s13, [r3]
 80060a8:	ed93 6a01 	vldr	s12, [r3, #4]
 80060ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80060b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b4:	d401      	bmi.n	80060ba <forward_relu+0x23e>
 80060b6:	4623      	mov	r3, r4
 80060b8:	e71e      	b.n	8005ef8 <forward_relu+0x7c>
 80060ba:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80060be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c2:	4623      	mov	r3, r4
 80060c4:	f47f af63 	bne.w	8005f8e <forward_relu+0x112>
 80060c8:	e741      	b.n	8005f4e <forward_relu+0xd2>
 80060ca:	4622      	mov	r2, r4
 80060cc:	e79a      	b.n	8006004 <forward_relu+0x188>
 80060ce:	68b2      	ldr	r2, [r6, #8]
 80060d0:	4623      	mov	r3, r4
 80060d2:	ed92 7a00 	vldr	s14, [r2]
 80060d6:	e7c6      	b.n	8006066 <forward_relu+0x1ea>
 80060d8:	2300      	movs	r3, #0
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	deff      	udf	#255	; 0xff
 80060de:	bf00      	nop
 80060e0:	00000000 	.word	0x00000000

080060e4 <forward_sm>:
 80060e4:	6982      	ldr	r2, [r0, #24]
 80060e6:	8813      	ldrh	r3, [r2, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d07c      	beq.n	80061e6 <forward_sm+0x102>
 80060ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	ed2d 8b04 	vpush	{d8-d9}
 80060f4:	6852      	ldr	r2, [r2, #4]
 80060f6:	6854      	ldr	r4, [r2, #4]
 80060f8:	b085      	sub	sp, #20
 80060fa:	b104      	cbz	r4, 80060fe <forward_sm+0x1a>
 80060fc:	6824      	ldr	r4, [r4, #0]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d076      	beq.n	80061f0 <forward_sm+0x10c>
 8006102:	6913      	ldr	r3, [r2, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d076      	beq.n	80061f6 <forward_sm+0x112>
 8006108:	681e      	ldr	r6, [r3, #0]
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	68e0      	ldr	r0, [r4, #12]
 800610e:	68f2      	ldr	r2, [r6, #12]
 8006110:	6845      	ldr	r5, [r0, #4]
 8006112:	6857      	ldr	r7, [r2, #4]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	d068      	beq.n	80061ea <forward_sm+0x106>
 8006118:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800611c:	2201      	movs	r2, #1
 800611e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006122:	4298      	cmp	r0, r3
 8006124:	fb01 f202 	mul.w	r2, r1, r2
 8006128:	d1f9      	bne.n	800611e <forward_sm+0x3a>
 800612a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800612e:	69a2      	ldr	r2, [r4, #24]
 8006130:	69b3      	ldr	r3, [r6, #24]
 8006132:	6892      	ldr	r2, [r2, #8]
 8006134:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8006138:	eb02 0309 	add.w	r3, r2, r9
 800613c:	429a      	cmp	r2, r3
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	d24c      	bcs.n	80061dc <forward_sm+0xf8>
 8006142:	00bb      	lsls	r3, r7, #2
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800614a:	00ab      	lsls	r3, r5, #2
 800614c:	2d01      	cmp	r5, #1
 800614e:	ed92 8a00 	vldr	s16, [r2]
 8006152:	9302      	str	r3, [sp, #8]
 8006154:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8006158:	463e      	mov	r6, r7
 800615a:	d93c      	bls.n	80061d6 <forward_sm+0xf2>
 800615c:	1d13      	adds	r3, r2, #4
 800615e:	ecf3 7a01 	vldmia	r3!, {s15}
 8006162:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616a:	bfb8      	it	lt
 800616c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8006170:	429e      	cmp	r6, r3
 8006172:	d1f4      	bne.n	800615e <forward_sm+0x7a>
 8006174:	eddf 8a21 	vldr	s17, [pc, #132]	; 80061fc <forward_sm+0x118>
 8006178:	4692      	mov	sl, r2
 800617a:	46c3      	mov	fp, r8
 800617c:	46c1      	mov	r9, r8
 800617e:	2400      	movs	r4, #0
 8006180:	ecba 0a01 	vldmia	sl!, {s0}
 8006184:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006188:	f003 f86a 	bl	8009260 <expf>
 800618c:	3401      	adds	r4, #1
 800618e:	42a5      	cmp	r5, r4
 8006190:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006194:	eca9 0a01 	vstmia	r9!, {s0}
 8006198:	d8f2      	bhi.n	8006180 <forward_sm+0x9c>
 800619a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a2:	d00b      	beq.n	80061bc <forward_sm+0xd8>
 80061a4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80061a8:	2300      	movs	r3, #0
 80061aa:	3301      	adds	r3, #1
 80061ac:	429d      	cmp	r5, r3
 80061ae:	eddb 7a00 	vldr	s15, [fp]
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	eceb 7a01 	vstmia	fp!, {s15}
 80061ba:	d8f6      	bhi.n	80061aa <forward_sm+0xc6>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	9901      	ldr	r1, [sp, #4]
 80061c0:	4498      	add	r8, r3
 80061c2:	9b02      	ldr	r3, [sp, #8]
 80061c4:	42b9      	cmp	r1, r7
 80061c6:	463a      	mov	r2, r7
 80061c8:	441e      	add	r6, r3
 80061ca:	d907      	bls.n	80061dc <forward_sm+0xf8>
 80061cc:	2d01      	cmp	r5, #1
 80061ce:	ed92 8a00 	vldr	s16, [r2]
 80061d2:	441f      	add	r7, r3
 80061d4:	d8c2      	bhi.n	800615c <forward_sm+0x78>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	d0f0      	beq.n	80061bc <forward_sm+0xd8>
 80061da:	e7cb      	b.n	8006174 <forward_sm+0x90>
 80061dc:	b005      	add	sp, #20
 80061de:	ecbd 8b04 	vpop	{d8-d9}
 80061e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	deff      	udf	#255	; 0xff
 80061ea:	f04f 0904 	mov.w	r9, #4
 80061ee:	e79e      	b.n	800612e <forward_sm+0x4a>
 80061f0:	2300      	movs	r3, #0
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	deff      	udf	#255	; 0xff
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	deff      	udf	#255	; 0xff
 80061fa:	bf00      	nop
 80061fc:	00000000 	.word	0x00000000

08006200 <forward_lite_dense_if32of32wf32>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8006208:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800620c:	4287      	cmp	r7, r0
 800620e:	f240 8106 	bls.w	800641e <forward_lite_dense_if32of32wf32+0x21e>
 8006212:	f1a6 0810 	sub.w	r8, r6, #16
 8006216:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8006222:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006226:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800622a:	4605      	mov	r5, r0
 800622c:	f006 0a0f 	and.w	sl, r6, #15
 8006230:	2e0f      	cmp	r6, #15
 8006232:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006444 <forward_lite_dense_if32of32wf32+0x244>
 8006236:	f240 8101 	bls.w	800643c <forward_lite_dense_if32of32wf32+0x23c>
 800623a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800623e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8006242:	46b6      	mov	lr, r6
 8006244:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8006248:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800624c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8006250:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8006254:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8006258:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800625c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8006260:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8006264:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8006268:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800626c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8006270:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8006274:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006278:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800627c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8006280:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006284:	f1ae 0e10 	sub.w	lr, lr, #16
 8006288:	f1be 0f0f 	cmp.w	lr, #15
 800628c:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8006290:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8006294:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006298:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800629c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80062a0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80062a4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80062a8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80062ac:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80062b0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80062b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062b8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80062bc:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80062c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062c4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80062c8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80062cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80062d0:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80062d4:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80062d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80062dc:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80062e0:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80062e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062e8:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80062ec:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80062f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062f4:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80062f8:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80062fc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006300:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006304:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006308:	eee4 7a24 	vfma.f32	s15, s8, s9
 800630c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006310:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006318:	d894      	bhi.n	8006244 <forward_lite_dense_if32of32wf32+0x44>
 800631a:	eb02 0e0b 	add.w	lr, r2, fp
 800631e:	4654      	mov	r4, sl
 8006320:	46c4      	mov	ip, r8
 8006322:	2c00      	cmp	r4, #0
 8006324:	d075      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006326:	eddc 6a00 	vldr	s13, [ip]
 800632a:	edde 7a00 	vldr	s15, [lr]
 800632e:	2c01      	cmp	r4, #1
 8006330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006334:	d06d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006336:	eddc 6a01 	vldr	s13, [ip, #4]
 800633a:	edde 7a01 	vldr	s15, [lr, #4]
 800633e:	2c02      	cmp	r4, #2
 8006340:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006344:	d065      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006346:	eddc 6a02 	vldr	s13, [ip, #8]
 800634a:	edde 7a02 	vldr	s15, [lr, #8]
 800634e:	2c03      	cmp	r4, #3
 8006350:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006354:	d05d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006356:	eddc 6a03 	vldr	s13, [ip, #12]
 800635a:	edde 7a03 	vldr	s15, [lr, #12]
 800635e:	2c04      	cmp	r4, #4
 8006360:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006364:	d055      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006366:	eddc 6a04 	vldr	s13, [ip, #16]
 800636a:	edde 7a04 	vldr	s15, [lr, #16]
 800636e:	2c05      	cmp	r4, #5
 8006370:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006374:	d04d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006376:	eddc 6a05 	vldr	s13, [ip, #20]
 800637a:	edde 7a05 	vldr	s15, [lr, #20]
 800637e:	2c06      	cmp	r4, #6
 8006380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006384:	d045      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006386:	eddc 6a06 	vldr	s13, [ip, #24]
 800638a:	edde 7a06 	vldr	s15, [lr, #24]
 800638e:	2c07      	cmp	r4, #7
 8006390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006394:	d03d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006396:	eddc 6a07 	vldr	s13, [ip, #28]
 800639a:	edde 7a07 	vldr	s15, [lr, #28]
 800639e:	2c08      	cmp	r4, #8
 80063a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063a4:	d035      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 80063a6:	eddc 6a08 	vldr	s13, [ip, #32]
 80063aa:	edde 7a08 	vldr	s15, [lr, #32]
 80063ae:	2c09      	cmp	r4, #9
 80063b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063b4:	d02d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 80063b6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80063ba:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80063be:	2c0a      	cmp	r4, #10
 80063c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063c4:	d025      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 80063c6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80063ca:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80063ce:	2c0b      	cmp	r4, #11
 80063d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063d4:	d01d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 80063d6:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80063da:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80063de:	2c0c      	cmp	r4, #12
 80063e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063e4:	d015      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 80063e6:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80063ea:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80063ee:	3c0d      	subs	r4, #13
 80063f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063f4:	d00d      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 80063f6:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80063fa:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80063fe:	2c01      	cmp	r4, #1
 8006400:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006404:	d005      	beq.n	8006412 <forward_lite_dense_if32of32wf32+0x212>
 8006406:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800640a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800640e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006412:	444a      	add	r2, r9
 8006414:	eca5 7a01 	vstmia	r5!, {s14}
 8006418:	42af      	cmp	r7, r5
 800641a:	f63f af09 	bhi.w	8006230 <forward_lite_dense_if32of32wf32+0x30>
 800641e:	b15b      	cbz	r3, 8006438 <forward_lite_dense_if32of32wf32+0x238>
 8006420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006422:	b14a      	cbz	r2, 8006438 <forward_lite_dense_if32of32wf32+0x238>
 8006424:	edd0 7a00 	vldr	s15, [r0]
 8006428:	ecb3 7a01 	vldmia	r3!, {s14}
 800642c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006430:	ece0 7a01 	vstmia	r0!, {s15}
 8006434:	4287      	cmp	r7, r0
 8006436:	d1f5      	bne.n	8006424 <forward_lite_dense_if32of32wf32+0x224>
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	4634      	mov	r4, r6
 800643e:	4696      	mov	lr, r2
 8006440:	468c      	mov	ip, r1
 8006442:	e76e      	b.n	8006322 <forward_lite_dense_if32of32wf32+0x122>
 8006444:	00000000 	.word	0x00000000

08006448 <st_int8_copy>:
 8006448:	4288      	cmp	r0, r1
 800644a:	d057      	beq.n	80064fc <st_int8_copy+0xb4>
 800644c:	2a00      	cmp	r2, #0
 800644e:	d055      	beq.n	80064fc <st_int8_copy+0xb4>
 8006450:	4288      	cmp	r0, r1
 8006452:	d354      	bcc.n	80064fe <st_int8_copy+0xb6>
 8006454:	078b      	lsls	r3, r1, #30
 8006456:	d102      	bne.n	800645e <st_int8_copy+0x16>
 8006458:	e009      	b.n	800646e <st_int8_copy+0x26>
 800645a:	2a00      	cmp	r2, #0
 800645c:	d05c      	beq.n	8006518 <st_int8_copy+0xd0>
 800645e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006462:	f801 3b01 	strb.w	r3, [r1], #1
 8006466:	078b      	lsls	r3, r1, #30
 8006468:	f102 32ff 	add.w	r2, r2, #4294967295
 800646c:	d1f5      	bne.n	800645a <st_int8_copy+0x12>
 800646e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006472:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8006476:	d069      	beq.n	800654c <st_int8_copy+0x104>
 8006478:	ea41 0300 	orr.w	r3, r1, r0
 800647c:	075b      	lsls	r3, r3, #29
 800647e:	d14c      	bne.n	800651a <st_int8_copy+0xd2>
 8006480:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006484:	2b01      	cmp	r3, #1
 8006486:	d948      	bls.n	800651a <st_int8_copy+0xd2>
 8006488:	f100 0310 	add.w	r3, r0, #16
 800648c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006490:	f101 0c10 	add.w	ip, r1, #16
 8006494:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8006498:	ed13 6b04 	vldr	d6, [r3, #-16]
 800649c:	ed13 7b02 	vldr	d7, [r3, #-8]
 80064a0:	3310      	adds	r3, #16
 80064a2:	4573      	cmp	r3, lr
 80064a4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80064a8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80064ac:	f10c 0c10 	add.w	ip, ip, #16
 80064b0:	d1f2      	bne.n	8006498 <st_int8_copy+0x50>
 80064b2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80064b6:	4421      	add	r1, r4
 80064b8:	4420      	add	r0, r4
 80064ba:	f002 0203 	and.w	r2, r2, #3
 80064be:	b16b      	cbz	r3, 80064dc <st_int8_copy+0x94>
 80064c0:	6804      	ldr	r4, [r0, #0]
 80064c2:	600c      	str	r4, [r1, #0]
 80064c4:	1e5c      	subs	r4, r3, #1
 80064c6:	d005      	beq.n	80064d4 <st_int8_copy+0x8c>
 80064c8:	6845      	ldr	r5, [r0, #4]
 80064ca:	604d      	str	r5, [r1, #4]
 80064cc:	2c01      	cmp	r4, #1
 80064ce:	bf1c      	itt	ne
 80064d0:	6884      	ldrne	r4, [r0, #8]
 80064d2:	608c      	strne	r4, [r1, #8]
 80064d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80064d8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80064dc:	b162      	cbz	r2, 80064f8 <st_int8_copy+0xb0>
 80064de:	f990 3000 	ldrsb.w	r3, [r0]
 80064e2:	700b      	strb	r3, [r1, #0]
 80064e4:	3a01      	subs	r2, #1
 80064e6:	d007      	beq.n	80064f8 <st_int8_copy+0xb0>
 80064e8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80064ec:	704b      	strb	r3, [r1, #1]
 80064ee:	2a01      	cmp	r2, #1
 80064f0:	bf1c      	itt	ne
 80064f2:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80064f6:	708b      	strbne	r3, [r1, #2]
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	4770      	bx	lr
 80064fe:	1883      	adds	r3, r0, r2
 8006500:	428b      	cmp	r3, r1
 8006502:	d9a7      	bls.n	8006454 <st_int8_copy+0xc>
 8006504:	4283      	cmp	r3, r0
 8006506:	440a      	add	r2, r1
 8006508:	d9f8      	bls.n	80064fc <st_int8_copy+0xb4>
 800650a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800650e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006512:	4283      	cmp	r3, r0
 8006514:	d1f9      	bne.n	800650a <st_int8_copy+0xc2>
 8006516:	4770      	bx	lr
 8006518:	4770      	bx	lr
 800651a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800651e:	460b      	mov	r3, r1
 8006520:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006524:	4684      	mov	ip, r0
 8006526:	f8dc 7000 	ldr.w	r7, [ip]
 800652a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800652e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006532:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8006536:	f8c3 800c 	str.w	r8, [r3, #12]
 800653a:	601f      	str	r7, [r3, #0]
 800653c:	605e      	str	r6, [r3, #4]
 800653e:	609d      	str	r5, [r3, #8]
 8006540:	3310      	adds	r3, #16
 8006542:	459e      	cmp	lr, r3
 8006544:	f10c 0c10 	add.w	ip, ip, #16
 8006548:	d1ed      	bne.n	8006526 <st_int8_copy+0xde>
 800654a:	e7b2      	b.n	80064b2 <st_int8_copy+0x6a>
 800654c:	0893      	lsrs	r3, r2, #2
 800654e:	f002 0203 	and.w	r2, r2, #3
 8006552:	e7b4      	b.n	80064be <st_int8_copy+0x76>

08006554 <ai_array_to_buffer_fmt>:
 8006554:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006558:	2b02      	cmp	r3, #2
 800655a:	d050      	beq.n	80065fe <ai_array_to_buffer_fmt+0xaa>
 800655c:	4b2a      	ldr	r3, [pc, #168]	; (8006608 <ai_array_to_buffer_fmt+0xb4>)
 800655e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8006562:	429a      	cmp	r2, r3
 8006564:	d00b      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 8006566:	dc1c      	bgt.n	80065a2 <ai_array_to_buffer_fmt+0x4e>
 8006568:	4b28      	ldr	r3, [pc, #160]	; (800660c <ai_array_to_buffer_fmt+0xb8>)
 800656a:	429a      	cmp	r2, r3
 800656c:	d007      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 800656e:	dd0b      	ble.n	8006588 <ai_array_to_buffer_fmt+0x34>
 8006570:	4b27      	ldr	r3, [pc, #156]	; (8006610 <ai_array_to_buffer_fmt+0xbc>)
 8006572:	429a      	cmp	r2, r3
 8006574:	d003      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 8006576:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800657a:	429a      	cmp	r2, r3
 800657c:	d131      	bne.n	80065e2 <ai_array_to_buffer_fmt+0x8e>
 800657e:	4613      	mov	r3, r2
 8006580:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006584:	4318      	orrs	r0, r3
 8006586:	4770      	bx	lr
 8006588:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800658c:	429a      	cmp	r2, r3
 800658e:	d0f6      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 8006590:	dd2c      	ble.n	80065ec <ai_array_to_buffer_fmt+0x98>
 8006592:	4b20      	ldr	r3, [pc, #128]	; (8006614 <ai_array_to_buffer_fmt+0xc0>)
 8006594:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006598:	429a      	cmp	r2, r3
 800659a:	bf18      	it	ne
 800659c:	2340      	movne	r3, #64	; 0x40
 800659e:	4318      	orrs	r0, r3
 80065a0:	4770      	bx	lr
 80065a2:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <ai_array_to_buffer_fmt+0xc4>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d0ea      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 80065a8:	dd0e      	ble.n	80065c8 <ai_array_to_buffer_fmt+0x74>
 80065aa:	4b1c      	ldr	r3, [pc, #112]	; (800661c <ai_array_to_buffer_fmt+0xc8>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d0e6      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 80065b0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d0e2      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <ai_array_to_buffer_fmt+0xcc>)
 80065ba:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80065be:	429a      	cmp	r2, r3
 80065c0:	bf18      	it	ne
 80065c2:	2340      	movne	r3, #64	; 0x40
 80065c4:	4318      	orrs	r0, r3
 80065c6:	4770      	bx	lr
 80065c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d0d6      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 80065d0:	3307      	adds	r3, #7
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d0d3      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 80065d6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf18      	it	ne
 80065de:	2340      	movne	r3, #64	; 0x40
 80065e0:	e7ce      	b.n	8006580 <ai_array_to_buffer_fmt+0x2c>
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <ai_array_to_buffer_fmt+0xd0>)
 80065e4:	429a      	cmp	r2, r3
 80065e6:	bf18      	it	ne
 80065e8:	2340      	movne	r3, #64	; 0x40
 80065ea:	e7c9      	b.n	8006580 <ai_array_to_buffer_fmt+0x2c>
 80065ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d0c4      	beq.n	800657e <ai_array_to_buffer_fmt+0x2a>
 80065f4:	3380      	adds	r3, #128	; 0x80
 80065f6:	429a      	cmp	r2, r3
 80065f8:	bf18      	it	ne
 80065fa:	2340      	movne	r3, #64	; 0x40
 80065fc:	e7c0      	b.n	8006580 <ai_array_to_buffer_fmt+0x2c>
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <ai_array_to_buffer_fmt+0xd4>)
 8006600:	4003      	ands	r3, r0
 8006602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006606:	e7bb      	b.n	8006580 <ai_array_to_buffer_fmt+0x2c>
 8006608:	00840040 	.word	0x00840040
 800660c:	00040840 	.word	0x00040840
 8006610:	00041040 	.word	0x00041040
 8006614:	00040447 	.word	0x00040447
 8006618:	00840840 	.word	0x00840840
 800661c:	00841040 	.word	0x00841040
 8006620:	0084084f 	.word	0x0084084f
 8006624:	0004084f 	.word	0x0004084f
 8006628:	00803fff 	.word	0x00803fff

0800662c <ai_array_get_byte_size>:
 800662c:	b319      	cbz	r1, 8006676 <ai_array_get_byte_size+0x4a>
 800662e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006632:	fb03 f101 	mul.w	r1, r3, r1
 8006636:	3107      	adds	r1, #7
 8006638:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800663c:	f021 0307 	bic.w	r3, r1, #7
 8006640:	2a04      	cmp	r2, #4
 8006642:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8006646:	fa23 f101 	lsr.w	r1, r3, r1
 800664a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800664e:	d00b      	beq.n	8006668 <ai_array_get_byte_size+0x3c>
 8006650:	2a08      	cmp	r2, #8
 8006652:	d002      	beq.n	800665a <ai_array_get_byte_size+0x2e>
 8006654:	3107      	adds	r1, #7
 8006656:	08c8      	lsrs	r0, r1, #3
 8006658:	4770      	bx	lr
 800665a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800665e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8006662:	3107      	adds	r1, #7
 8006664:	08c8      	lsrs	r0, r1, #3
 8006666:	4770      	bx	lr
 8006668:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800666c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8006670:	3107      	adds	r1, #7
 8006672:	08c8      	lsrs	r0, r1, #3
 8006674:	4770      	bx	lr
 8006676:	4608      	mov	r0, r1
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop

0800667c <ai_array_get_data_byte_size>:
 800667c:	b169      	cbz	r1, 800669a <ai_array_get_data_byte_size+0x1e>
 800667e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8006682:	fb02 f101 	mul.w	r1, r2, r1
 8006686:	1dcb      	adds	r3, r1, #7
 8006688:	f023 0307 	bic.w	r3, r3, #7
 800668c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006690:	fa23 f000 	lsr.w	r0, r3, r0
 8006694:	3007      	adds	r0, #7
 8006696:	08c0      	lsrs	r0, r0, #3
 8006698:	4770      	bx	lr
 800669a:	4608      	mov	r0, r1
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop

080066a0 <ai_version_get>:
 80066a0:	0212      	lsls	r2, r2, #8
 80066a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066a6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80066aa:	4770      	bx	lr

080066ac <get_tensor_byte_size>:
 80066ac:	b410      	push	{r4}
 80066ae:	6983      	ldr	r3, [r0, #24]
 80066b0:	68c4      	ldr	r4, [r0, #12]
 80066b2:	6941      	ldr	r1, [r0, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68e0      	ldr	r0, [r4, #12]
 80066b8:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <get_tensor_byte_size+0x2c>)
 80066ba:	68c9      	ldr	r1, [r1, #12]
 80066bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80066c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80066c8:	fb01 f000 	mul.w	r0, r1, r0
 80066cc:	4293      	cmp	r3, r2
 80066ce:	bf04      	itt	eq
 80066d0:	3007      	addeq	r0, #7
 80066d2:	08c0      	lsreq	r0, r0, #3
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	000400c0 	.word	0x000400c0

080066dc <calloc>:
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <calloc+0xc>)
 80066de:	460a      	mov	r2, r1
 80066e0:	4601      	mov	r1, r0
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	f000 b802 	b.w	80066ec <_calloc_r>
 80066e8:	200007b4 	.word	0x200007b4

080066ec <_calloc_r>:
 80066ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ee:	fba1 2402 	umull	r2, r4, r1, r2
 80066f2:	b94c      	cbnz	r4, 8006708 <_calloc_r+0x1c>
 80066f4:	4611      	mov	r1, r2
 80066f6:	9201      	str	r2, [sp, #4]
 80066f8:	f000 f836 	bl	8006768 <_malloc_r>
 80066fc:	9a01      	ldr	r2, [sp, #4]
 80066fe:	4605      	mov	r5, r0
 8006700:	b930      	cbnz	r0, 8006710 <_calloc_r+0x24>
 8006702:	4628      	mov	r0, r5
 8006704:	b003      	add	sp, #12
 8006706:	bd30      	pop	{r4, r5, pc}
 8006708:	220c      	movs	r2, #12
 800670a:	6002      	str	r2, [r0, #0]
 800670c:	2500      	movs	r5, #0
 800670e:	e7f8      	b.n	8006702 <_calloc_r+0x16>
 8006710:	4621      	mov	r1, r4
 8006712:	f000 ff57 	bl	80075c4 <memset>
 8006716:	e7f4      	b.n	8006702 <_calloc_r+0x16>

08006718 <malloc>:
 8006718:	4b02      	ldr	r3, [pc, #8]	; (8006724 <malloc+0xc>)
 800671a:	4601      	mov	r1, r0
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	f000 b823 	b.w	8006768 <_malloc_r>
 8006722:	bf00      	nop
 8006724:	200007b4 	.word	0x200007b4

08006728 <sbrk_aligned>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4e0e      	ldr	r6, [pc, #56]	; (8006764 <sbrk_aligned+0x3c>)
 800672c:	460c      	mov	r4, r1
 800672e:	6831      	ldr	r1, [r6, #0]
 8006730:	4605      	mov	r5, r0
 8006732:	b911      	cbnz	r1, 800673a <sbrk_aligned+0x12>
 8006734:	f000 ff86 	bl	8007644 <_sbrk_r>
 8006738:	6030      	str	r0, [r6, #0]
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f000 ff81 	bl	8007644 <_sbrk_r>
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	d00a      	beq.n	800675c <sbrk_aligned+0x34>
 8006746:	1cc4      	adds	r4, r0, #3
 8006748:	f024 0403 	bic.w	r4, r4, #3
 800674c:	42a0      	cmp	r0, r4
 800674e:	d007      	beq.n	8006760 <sbrk_aligned+0x38>
 8006750:	1a21      	subs	r1, r4, r0
 8006752:	4628      	mov	r0, r5
 8006754:	f000 ff76 	bl	8007644 <_sbrk_r>
 8006758:	3001      	adds	r0, #1
 800675a:	d101      	bne.n	8006760 <sbrk_aligned+0x38>
 800675c:	f04f 34ff 	mov.w	r4, #4294967295
 8006760:	4620      	mov	r0, r4
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	20000e28 	.word	0x20000e28

08006768 <_malloc_r>:
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800676c:	1ccd      	adds	r5, r1, #3
 800676e:	f025 0503 	bic.w	r5, r5, #3
 8006772:	3508      	adds	r5, #8
 8006774:	2d0c      	cmp	r5, #12
 8006776:	bf38      	it	cc
 8006778:	250c      	movcc	r5, #12
 800677a:	2d00      	cmp	r5, #0
 800677c:	4607      	mov	r7, r0
 800677e:	db01      	blt.n	8006784 <_malloc_r+0x1c>
 8006780:	42a9      	cmp	r1, r5
 8006782:	d905      	bls.n	8006790 <_malloc_r+0x28>
 8006784:	230c      	movs	r3, #12
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	2600      	movs	r6, #0
 800678a:	4630      	mov	r0, r6
 800678c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006790:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006864 <_malloc_r+0xfc>
 8006794:	f000 f868 	bl	8006868 <__malloc_lock>
 8006798:	f8d8 3000 	ldr.w	r3, [r8]
 800679c:	461c      	mov	r4, r3
 800679e:	bb5c      	cbnz	r4, 80067f8 <_malloc_r+0x90>
 80067a0:	4629      	mov	r1, r5
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff ffc0 	bl	8006728 <sbrk_aligned>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	4604      	mov	r4, r0
 80067ac:	d155      	bne.n	800685a <_malloc_r+0xf2>
 80067ae:	f8d8 4000 	ldr.w	r4, [r8]
 80067b2:	4626      	mov	r6, r4
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	d145      	bne.n	8006844 <_malloc_r+0xdc>
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	d048      	beq.n	800684e <_malloc_r+0xe6>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	4631      	mov	r1, r6
 80067c0:	4638      	mov	r0, r7
 80067c2:	eb04 0903 	add.w	r9, r4, r3
 80067c6:	f000 ff3d 	bl	8007644 <_sbrk_r>
 80067ca:	4581      	cmp	r9, r0
 80067cc:	d13f      	bne.n	800684e <_malloc_r+0xe6>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	1a6d      	subs	r5, r5, r1
 80067d2:	4629      	mov	r1, r5
 80067d4:	4638      	mov	r0, r7
 80067d6:	f7ff ffa7 	bl	8006728 <sbrk_aligned>
 80067da:	3001      	adds	r0, #1
 80067dc:	d037      	beq.n	800684e <_malloc_r+0xe6>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	442b      	add	r3, r5
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	f8d8 3000 	ldr.w	r3, [r8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d038      	beq.n	800685e <_malloc_r+0xf6>
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	42a2      	cmp	r2, r4
 80067f0:	d12b      	bne.n	800684a <_malloc_r+0xe2>
 80067f2:	2200      	movs	r2, #0
 80067f4:	605a      	str	r2, [r3, #4]
 80067f6:	e00f      	b.n	8006818 <_malloc_r+0xb0>
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	1b52      	subs	r2, r2, r5
 80067fc:	d41f      	bmi.n	800683e <_malloc_r+0xd6>
 80067fe:	2a0b      	cmp	r2, #11
 8006800:	d917      	bls.n	8006832 <_malloc_r+0xca>
 8006802:	1961      	adds	r1, r4, r5
 8006804:	42a3      	cmp	r3, r4
 8006806:	6025      	str	r5, [r4, #0]
 8006808:	bf18      	it	ne
 800680a:	6059      	strne	r1, [r3, #4]
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	bf08      	it	eq
 8006810:	f8c8 1000 	streq.w	r1, [r8]
 8006814:	5162      	str	r2, [r4, r5]
 8006816:	604b      	str	r3, [r1, #4]
 8006818:	4638      	mov	r0, r7
 800681a:	f104 060b 	add.w	r6, r4, #11
 800681e:	f000 f829 	bl	8006874 <__malloc_unlock>
 8006822:	f026 0607 	bic.w	r6, r6, #7
 8006826:	1d23      	adds	r3, r4, #4
 8006828:	1af2      	subs	r2, r6, r3
 800682a:	d0ae      	beq.n	800678a <_malloc_r+0x22>
 800682c:	1b9b      	subs	r3, r3, r6
 800682e:	50a3      	str	r3, [r4, r2]
 8006830:	e7ab      	b.n	800678a <_malloc_r+0x22>
 8006832:	42a3      	cmp	r3, r4
 8006834:	6862      	ldr	r2, [r4, #4]
 8006836:	d1dd      	bne.n	80067f4 <_malloc_r+0x8c>
 8006838:	f8c8 2000 	str.w	r2, [r8]
 800683c:	e7ec      	b.n	8006818 <_malloc_r+0xb0>
 800683e:	4623      	mov	r3, r4
 8006840:	6864      	ldr	r4, [r4, #4]
 8006842:	e7ac      	b.n	800679e <_malloc_r+0x36>
 8006844:	4634      	mov	r4, r6
 8006846:	6876      	ldr	r6, [r6, #4]
 8006848:	e7b4      	b.n	80067b4 <_malloc_r+0x4c>
 800684a:	4613      	mov	r3, r2
 800684c:	e7cc      	b.n	80067e8 <_malloc_r+0x80>
 800684e:	230c      	movs	r3, #12
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4638      	mov	r0, r7
 8006854:	f000 f80e 	bl	8006874 <__malloc_unlock>
 8006858:	e797      	b.n	800678a <_malloc_r+0x22>
 800685a:	6025      	str	r5, [r4, #0]
 800685c:	e7dc      	b.n	8006818 <_malloc_r+0xb0>
 800685e:	605b      	str	r3, [r3, #4]
 8006860:	deff      	udf	#255	; 0xff
 8006862:	bf00      	nop
 8006864:	20000e24 	.word	0x20000e24

08006868 <__malloc_lock>:
 8006868:	4801      	ldr	r0, [pc, #4]	; (8006870 <__malloc_lock+0x8>)
 800686a:	f000 bf37 	b.w	80076dc <__retarget_lock_acquire_recursive>
 800686e:	bf00      	nop
 8006870:	20000f6c 	.word	0x20000f6c

08006874 <__malloc_unlock>:
 8006874:	4801      	ldr	r0, [pc, #4]	; (800687c <__malloc_unlock+0x8>)
 8006876:	f000 bf32 	b.w	80076de <__retarget_lock_release_recursive>
 800687a:	bf00      	nop
 800687c:	20000f6c 	.word	0x20000f6c

08006880 <rand>:
 8006880:	4b16      	ldr	r3, [pc, #88]	; (80068dc <rand+0x5c>)
 8006882:	b510      	push	{r4, lr}
 8006884:	681c      	ldr	r4, [r3, #0]
 8006886:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006888:	b9b3      	cbnz	r3, 80068b8 <rand+0x38>
 800688a:	2018      	movs	r0, #24
 800688c:	f7ff ff44 	bl	8006718 <malloc>
 8006890:	4602      	mov	r2, r0
 8006892:	6320      	str	r0, [r4, #48]	; 0x30
 8006894:	b920      	cbnz	r0, 80068a0 <rand+0x20>
 8006896:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <rand+0x60>)
 8006898:	4812      	ldr	r0, [pc, #72]	; (80068e4 <rand+0x64>)
 800689a:	2152      	movs	r1, #82	; 0x52
 800689c:	f000 ff2e 	bl	80076fc <__assert_func>
 80068a0:	4911      	ldr	r1, [pc, #68]	; (80068e8 <rand+0x68>)
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <rand+0x6c>)
 80068a4:	e9c0 1300 	strd	r1, r3, [r0]
 80068a8:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <rand+0x70>)
 80068aa:	6083      	str	r3, [r0, #8]
 80068ac:	230b      	movs	r3, #11
 80068ae:	8183      	strh	r3, [r0, #12]
 80068b0:	2100      	movs	r1, #0
 80068b2:	2001      	movs	r0, #1
 80068b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80068b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068ba:	480e      	ldr	r0, [pc, #56]	; (80068f4 <rand+0x74>)
 80068bc:	690b      	ldr	r3, [r1, #16]
 80068be:	694c      	ldr	r4, [r1, #20]
 80068c0:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <rand+0x78>)
 80068c2:	4358      	muls	r0, r3
 80068c4:	fb02 0004 	mla	r0, r2, r4, r0
 80068c8:	fba3 3202 	umull	r3, r2, r3, r2
 80068cc:	3301      	adds	r3, #1
 80068ce:	eb40 0002 	adc.w	r0, r0, r2
 80068d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80068d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80068da:	bd10      	pop	{r4, pc}
 80068dc:	200007b4 	.word	0x200007b4
 80068e0:	0800b66c 	.word	0x0800b66c
 80068e4:	0800b683 	.word	0x0800b683
 80068e8:	abcd330e 	.word	0xabcd330e
 80068ec:	e66d1234 	.word	0xe66d1234
 80068f0:	0005deec 	.word	0x0005deec
 80068f4:	5851f42d 	.word	0x5851f42d
 80068f8:	4c957f2d 	.word	0x4c957f2d

080068fc <__cvt>:
 80068fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006900:	ec55 4b10 	vmov	r4, r5, d0
 8006904:	2d00      	cmp	r5, #0
 8006906:	460e      	mov	r6, r1
 8006908:	4619      	mov	r1, r3
 800690a:	462b      	mov	r3, r5
 800690c:	bfbb      	ittet	lt
 800690e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006912:	461d      	movlt	r5, r3
 8006914:	2300      	movge	r3, #0
 8006916:	232d      	movlt	r3, #45	; 0x2d
 8006918:	700b      	strb	r3, [r1, #0]
 800691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800691c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006920:	4691      	mov	r9, r2
 8006922:	f023 0820 	bic.w	r8, r3, #32
 8006926:	bfbc      	itt	lt
 8006928:	4622      	movlt	r2, r4
 800692a:	4614      	movlt	r4, r2
 800692c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006930:	d005      	beq.n	800693e <__cvt+0x42>
 8006932:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006936:	d100      	bne.n	800693a <__cvt+0x3e>
 8006938:	3601      	adds	r6, #1
 800693a:	2102      	movs	r1, #2
 800693c:	e000      	b.n	8006940 <__cvt+0x44>
 800693e:	2103      	movs	r1, #3
 8006940:	ab03      	add	r3, sp, #12
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	ab02      	add	r3, sp, #8
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	ec45 4b10 	vmov	d0, r4, r5
 800694c:	4653      	mov	r3, sl
 800694e:	4632      	mov	r2, r6
 8006950:	f000 ff7a 	bl	8007848 <_dtoa_r>
 8006954:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006958:	4607      	mov	r7, r0
 800695a:	d102      	bne.n	8006962 <__cvt+0x66>
 800695c:	f019 0f01 	tst.w	r9, #1
 8006960:	d022      	beq.n	80069a8 <__cvt+0xac>
 8006962:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006966:	eb07 0906 	add.w	r9, r7, r6
 800696a:	d110      	bne.n	800698e <__cvt+0x92>
 800696c:	783b      	ldrb	r3, [r7, #0]
 800696e:	2b30      	cmp	r3, #48	; 0x30
 8006970:	d10a      	bne.n	8006988 <__cvt+0x8c>
 8006972:	2200      	movs	r2, #0
 8006974:	2300      	movs	r3, #0
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f7fa f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800697e:	b918      	cbnz	r0, 8006988 <__cvt+0x8c>
 8006980:	f1c6 0601 	rsb	r6, r6, #1
 8006984:	f8ca 6000 	str.w	r6, [sl]
 8006988:	f8da 3000 	ldr.w	r3, [sl]
 800698c:	4499      	add	r9, r3
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f7fa f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800699a:	b108      	cbz	r0, 80069a0 <__cvt+0xa4>
 800699c:	f8cd 900c 	str.w	r9, [sp, #12]
 80069a0:	2230      	movs	r2, #48	; 0x30
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	454b      	cmp	r3, r9
 80069a6:	d307      	bcc.n	80069b8 <__cvt+0xbc>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069ac:	1bdb      	subs	r3, r3, r7
 80069ae:	4638      	mov	r0, r7
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	b004      	add	sp, #16
 80069b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b8:	1c59      	adds	r1, r3, #1
 80069ba:	9103      	str	r1, [sp, #12]
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e7f0      	b.n	80069a2 <__cvt+0xa6>

080069c0 <__exponent>:
 80069c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c2:	4603      	mov	r3, r0
 80069c4:	2900      	cmp	r1, #0
 80069c6:	bfb8      	it	lt
 80069c8:	4249      	neglt	r1, r1
 80069ca:	f803 2b02 	strb.w	r2, [r3], #2
 80069ce:	bfb4      	ite	lt
 80069d0:	222d      	movlt	r2, #45	; 0x2d
 80069d2:	222b      	movge	r2, #43	; 0x2b
 80069d4:	2909      	cmp	r1, #9
 80069d6:	7042      	strb	r2, [r0, #1]
 80069d8:	dd2a      	ble.n	8006a30 <__exponent+0x70>
 80069da:	f10d 0207 	add.w	r2, sp, #7
 80069de:	4617      	mov	r7, r2
 80069e0:	260a      	movs	r6, #10
 80069e2:	4694      	mov	ip, r2
 80069e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80069e8:	fb06 1415 	mls	r4, r6, r5, r1
 80069ec:	3430      	adds	r4, #48	; 0x30
 80069ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80069f2:	460c      	mov	r4, r1
 80069f4:	2c63      	cmp	r4, #99	; 0x63
 80069f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80069fa:	4629      	mov	r1, r5
 80069fc:	dcf1      	bgt.n	80069e2 <__exponent+0x22>
 80069fe:	3130      	adds	r1, #48	; 0x30
 8006a00:	f1ac 0402 	sub.w	r4, ip, #2
 8006a04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a08:	1c41      	adds	r1, r0, #1
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	42ba      	cmp	r2, r7
 8006a0e:	d30a      	bcc.n	8006a26 <__exponent+0x66>
 8006a10:	f10d 0209 	add.w	r2, sp, #9
 8006a14:	eba2 020c 	sub.w	r2, r2, ip
 8006a18:	42bc      	cmp	r4, r7
 8006a1a:	bf88      	it	hi
 8006a1c:	2200      	movhi	r2, #0
 8006a1e:	4413      	add	r3, r2
 8006a20:	1a18      	subs	r0, r3, r0
 8006a22:	b003      	add	sp, #12
 8006a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a2e:	e7ed      	b.n	8006a0c <__exponent+0x4c>
 8006a30:	2330      	movs	r3, #48	; 0x30
 8006a32:	3130      	adds	r1, #48	; 0x30
 8006a34:	7083      	strb	r3, [r0, #2]
 8006a36:	70c1      	strb	r1, [r0, #3]
 8006a38:	1d03      	adds	r3, r0, #4
 8006a3a:	e7f1      	b.n	8006a20 <__exponent+0x60>

08006a3c <_printf_float>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	ed2d 8b02 	vpush	{d8}
 8006a44:	b08d      	sub	sp, #52	; 0x34
 8006a46:	460c      	mov	r4, r1
 8006a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	461f      	mov	r7, r3
 8006a50:	4605      	mov	r5, r0
 8006a52:	f000 fdbf 	bl	80075d4 <_localeconv_r>
 8006a56:	f8d0 a000 	ldr.w	sl, [r0]
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	f7f9 fc08 	bl	8000270 <strlen>
 8006a60:	2300      	movs	r3, #0
 8006a62:	930a      	str	r3, [sp, #40]	; 0x28
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	f8d8 3000 	ldr.w	r3, [r8]
 8006a6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a70:	3307      	adds	r3, #7
 8006a72:	f023 0307 	bic.w	r3, r3, #7
 8006a76:	f103 0208 	add.w	r2, r3, #8
 8006a7a:	f8c8 2000 	str.w	r2, [r8]
 8006a7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a8c:	ee08 0a10 	vmov	s16, r0
 8006a90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a98:	4b9e      	ldr	r3, [pc, #632]	; (8006d14 <_printf_float+0x2d8>)
 8006a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9e:	f7fa f845 	bl	8000b2c <__aeabi_dcmpun>
 8006aa2:	bb88      	cbnz	r0, 8006b08 <_printf_float+0xcc>
 8006aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa8:	4b9a      	ldr	r3, [pc, #616]	; (8006d14 <_printf_float+0x2d8>)
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006aae:	f7fa f81f 	bl	8000af0 <__aeabi_dcmple>
 8006ab2:	bb48      	cbnz	r0, 8006b08 <_printf_float+0xcc>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7fa f80e 	bl	8000adc <__aeabi_dcmplt>
 8006ac0:	b110      	cbz	r0, 8006ac8 <_printf_float+0x8c>
 8006ac2:	232d      	movs	r3, #45	; 0x2d
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac8:	4a93      	ldr	r2, [pc, #588]	; (8006d18 <_printf_float+0x2dc>)
 8006aca:	4b94      	ldr	r3, [pc, #592]	; (8006d1c <_printf_float+0x2e0>)
 8006acc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ad0:	bf94      	ite	ls
 8006ad2:	4690      	movls	r8, r2
 8006ad4:	4698      	movhi	r8, r3
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	9b05      	ldr	r3, [sp, #20]
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	f04f 0900 	mov.w	r9, #0
 8006ae6:	9700      	str	r7, [sp, #0]
 8006ae8:	4633      	mov	r3, r6
 8006aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8006aec:	4621      	mov	r1, r4
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 f9da 	bl	8006ea8 <_printf_common>
 8006af4:	3001      	adds	r0, #1
 8006af6:	f040 8090 	bne.w	8006c1a <_printf_float+0x1de>
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295
 8006afe:	b00d      	add	sp, #52	; 0x34
 8006b00:	ecbd 8b02 	vpop	{d8}
 8006b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7fa f80c 	bl	8000b2c <__aeabi_dcmpun>
 8006b14:	b140      	cbz	r0, 8006b28 <_printf_float+0xec>
 8006b16:	464b      	mov	r3, r9
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfbc      	itt	lt
 8006b1c:	232d      	movlt	r3, #45	; 0x2d
 8006b1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b22:	4a7f      	ldr	r2, [pc, #508]	; (8006d20 <_printf_float+0x2e4>)
 8006b24:	4b7f      	ldr	r3, [pc, #508]	; (8006d24 <_printf_float+0x2e8>)
 8006b26:	e7d1      	b.n	8006acc <_printf_float+0x90>
 8006b28:	6863      	ldr	r3, [r4, #4]
 8006b2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b2e:	9206      	str	r2, [sp, #24]
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	d13f      	bne.n	8006bb4 <_printf_float+0x178>
 8006b34:	2306      	movs	r3, #6
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	9b05      	ldr	r3, [sp, #20]
 8006b3a:	6861      	ldr	r1, [r4, #4]
 8006b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b40:	2300      	movs	r3, #0
 8006b42:	9303      	str	r3, [sp, #12]
 8006b44:	ab0a      	add	r3, sp, #40	; 0x28
 8006b46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b4a:	ab09      	add	r3, sp, #36	; 0x24
 8006b4c:	ec49 8b10 	vmov	d0, r8, r9
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	6022      	str	r2, [r4, #0]
 8006b54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f7ff fecf 	bl	80068fc <__cvt>
 8006b5e:	9b06      	ldr	r3, [sp, #24]
 8006b60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b62:	2b47      	cmp	r3, #71	; 0x47
 8006b64:	4680      	mov	r8, r0
 8006b66:	d108      	bne.n	8006b7a <_printf_float+0x13e>
 8006b68:	1cc8      	adds	r0, r1, #3
 8006b6a:	db02      	blt.n	8006b72 <_printf_float+0x136>
 8006b6c:	6863      	ldr	r3, [r4, #4]
 8006b6e:	4299      	cmp	r1, r3
 8006b70:	dd41      	ble.n	8006bf6 <_printf_float+0x1ba>
 8006b72:	f1ab 0302 	sub.w	r3, fp, #2
 8006b76:	fa5f fb83 	uxtb.w	fp, r3
 8006b7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b7e:	d820      	bhi.n	8006bc2 <_printf_float+0x186>
 8006b80:	3901      	subs	r1, #1
 8006b82:	465a      	mov	r2, fp
 8006b84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b88:	9109      	str	r1, [sp, #36]	; 0x24
 8006b8a:	f7ff ff19 	bl	80069c0 <__exponent>
 8006b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b90:	1813      	adds	r3, r2, r0
 8006b92:	2a01      	cmp	r2, #1
 8006b94:	4681      	mov	r9, r0
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	dc02      	bgt.n	8006ba0 <_printf_float+0x164>
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	07d2      	lsls	r2, r2, #31
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_float+0x168>
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d09c      	beq.n	8006ae6 <_printf_float+0xaa>
 8006bac:	232d      	movs	r3, #45	; 0x2d
 8006bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb2:	e798      	b.n	8006ae6 <_printf_float+0xaa>
 8006bb4:	9a06      	ldr	r2, [sp, #24]
 8006bb6:	2a47      	cmp	r2, #71	; 0x47
 8006bb8:	d1be      	bne.n	8006b38 <_printf_float+0xfc>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1bc      	bne.n	8006b38 <_printf_float+0xfc>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e7b9      	b.n	8006b36 <_printf_float+0xfa>
 8006bc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bc6:	d118      	bne.n	8006bfa <_printf_float+0x1be>
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	dd0b      	ble.n	8006be6 <_printf_float+0x1aa>
 8006bce:	6121      	str	r1, [r4, #16]
 8006bd0:	b913      	cbnz	r3, 8006bd8 <_printf_float+0x19c>
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	07d0      	lsls	r0, r2, #31
 8006bd6:	d502      	bpl.n	8006bde <_printf_float+0x1a2>
 8006bd8:	3301      	adds	r3, #1
 8006bda:	440b      	add	r3, r1
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	65a1      	str	r1, [r4, #88]	; 0x58
 8006be0:	f04f 0900 	mov.w	r9, #0
 8006be4:	e7de      	b.n	8006ba4 <_printf_float+0x168>
 8006be6:	b913      	cbnz	r3, 8006bee <_printf_float+0x1b2>
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	07d2      	lsls	r2, r2, #31
 8006bec:	d501      	bpl.n	8006bf2 <_printf_float+0x1b6>
 8006bee:	3302      	adds	r3, #2
 8006bf0:	e7f4      	b.n	8006bdc <_printf_float+0x1a0>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e7f2      	b.n	8006bdc <_printf_float+0x1a0>
 8006bf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	db05      	blt.n	8006c0c <_printf_float+0x1d0>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	6121      	str	r1, [r4, #16]
 8006c04:	07d8      	lsls	r0, r3, #31
 8006c06:	d5ea      	bpl.n	8006bde <_printf_float+0x1a2>
 8006c08:	1c4b      	adds	r3, r1, #1
 8006c0a:	e7e7      	b.n	8006bdc <_printf_float+0x1a0>
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	bfd4      	ite	le
 8006c10:	f1c1 0202 	rsble	r2, r1, #2
 8006c14:	2201      	movgt	r2, #1
 8006c16:	4413      	add	r3, r2
 8006c18:	e7e0      	b.n	8006bdc <_printf_float+0x1a0>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	055a      	lsls	r2, r3, #21
 8006c1e:	d407      	bmi.n	8006c30 <_printf_float+0x1f4>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	4642      	mov	r2, r8
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d12c      	bne.n	8006c88 <_printf_float+0x24c>
 8006c2e:	e764      	b.n	8006afa <_printf_float+0xbe>
 8006c30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c34:	f240 80e0 	bls.w	8006df8 <_printf_float+0x3bc>
 8006c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f7f9 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d034      	beq.n	8006cb2 <_printf_float+0x276>
 8006c48:	4a37      	ldr	r2, [pc, #220]	; (8006d28 <_printf_float+0x2ec>)
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f af51 	beq.w	8006afa <_printf_float+0xbe>
 8006c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	db02      	blt.n	8006c66 <_printf_float+0x22a>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07d8      	lsls	r0, r3, #31
 8006c64:	d510      	bpl.n	8006c88 <_printf_float+0x24c>
 8006c66:	ee18 3a10 	vmov	r3, s16
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	f43f af41 	beq.w	8006afa <_printf_float+0xbe>
 8006c78:	f04f 0800 	mov.w	r8, #0
 8006c7c:	f104 091a 	add.w	r9, r4, #26
 8006c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c82:	3b01      	subs	r3, #1
 8006c84:	4543      	cmp	r3, r8
 8006c86:	dc09      	bgt.n	8006c9c <_printf_float+0x260>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	079b      	lsls	r3, r3, #30
 8006c8c:	f100 8107 	bmi.w	8006e9e <_printf_float+0x462>
 8006c90:	68e0      	ldr	r0, [r4, #12]
 8006c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c94:	4298      	cmp	r0, r3
 8006c96:	bfb8      	it	lt
 8006c98:	4618      	movlt	r0, r3
 8006c9a:	e730      	b.n	8006afe <_printf_float+0xc2>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	464a      	mov	r2, r9
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	47b8      	blx	r7
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	f43f af27 	beq.w	8006afa <_printf_float+0xbe>
 8006cac:	f108 0801 	add.w	r8, r8, #1
 8006cb0:	e7e6      	b.n	8006c80 <_printf_float+0x244>
 8006cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc39      	bgt.n	8006d2c <_printf_float+0x2f0>
 8006cb8:	4a1b      	ldr	r2, [pc, #108]	; (8006d28 <_printf_float+0x2ec>)
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f43f af19 	beq.w	8006afa <_printf_float+0xbe>
 8006cc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d102      	bne.n	8006cd6 <_printf_float+0x29a>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	07d9      	lsls	r1, r3, #31
 8006cd4:	d5d8      	bpl.n	8006c88 <_printf_float+0x24c>
 8006cd6:	ee18 3a10 	vmov	r3, s16
 8006cda:	4652      	mov	r2, sl
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f af09 	beq.w	8006afa <_printf_float+0xbe>
 8006ce8:	f04f 0900 	mov.w	r9, #0
 8006cec:	f104 0a1a 	add.w	sl, r4, #26
 8006cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf2:	425b      	negs	r3, r3
 8006cf4:	454b      	cmp	r3, r9
 8006cf6:	dc01      	bgt.n	8006cfc <_printf_float+0x2c0>
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfa:	e792      	b.n	8006c22 <_printf_float+0x1e6>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f aef7 	beq.w	8006afa <_printf_float+0xbe>
 8006d0c:	f109 0901 	add.w	r9, r9, #1
 8006d10:	e7ee      	b.n	8006cf0 <_printf_float+0x2b4>
 8006d12:	bf00      	nop
 8006d14:	7fefffff 	.word	0x7fefffff
 8006d18:	0800b6db 	.word	0x0800b6db
 8006d1c:	0800b6df 	.word	0x0800b6df
 8006d20:	0800b6e3 	.word	0x0800b6e3
 8006d24:	0800b6e7 	.word	0x0800b6e7
 8006d28:	0800b6eb 	.word	0x0800b6eb
 8006d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d30:	429a      	cmp	r2, r3
 8006d32:	bfa8      	it	ge
 8006d34:	461a      	movge	r2, r3
 8006d36:	2a00      	cmp	r2, #0
 8006d38:	4691      	mov	r9, r2
 8006d3a:	dc37      	bgt.n	8006dac <_printf_float+0x370>
 8006d3c:	f04f 0b00 	mov.w	fp, #0
 8006d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d44:	f104 021a 	add.w	r2, r4, #26
 8006d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d4a:	9305      	str	r3, [sp, #20]
 8006d4c:	eba3 0309 	sub.w	r3, r3, r9
 8006d50:	455b      	cmp	r3, fp
 8006d52:	dc33      	bgt.n	8006dbc <_printf_float+0x380>
 8006d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	db3b      	blt.n	8006dd4 <_printf_float+0x398>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	07da      	lsls	r2, r3, #31
 8006d60:	d438      	bmi.n	8006dd4 <_printf_float+0x398>
 8006d62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d66:	eba2 0903 	sub.w	r9, r2, r3
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	1ad2      	subs	r2, r2, r3
 8006d6e:	4591      	cmp	r9, r2
 8006d70:	bfa8      	it	ge
 8006d72:	4691      	movge	r9, r2
 8006d74:	f1b9 0f00 	cmp.w	r9, #0
 8006d78:	dc35      	bgt.n	8006de6 <_printf_float+0x3aa>
 8006d7a:	f04f 0800 	mov.w	r8, #0
 8006d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d82:	f104 0a1a 	add.w	sl, r4, #26
 8006d86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	eba3 0309 	sub.w	r3, r3, r9
 8006d90:	4543      	cmp	r3, r8
 8006d92:	f77f af79 	ble.w	8006c88 <_printf_float+0x24c>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	f43f aeaa 	beq.w	8006afa <_printf_float+0xbe>
 8006da6:	f108 0801 	add.w	r8, r8, #1
 8006daa:	e7ec      	b.n	8006d86 <_printf_float+0x34a>
 8006dac:	4613      	mov	r3, r2
 8006dae:	4631      	mov	r1, r6
 8006db0:	4642      	mov	r2, r8
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	d1c0      	bne.n	8006d3c <_printf_float+0x300>
 8006dba:	e69e      	b.n	8006afa <_printf_float+0xbe>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	9205      	str	r2, [sp, #20]
 8006dc4:	47b8      	blx	r7
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f43f ae97 	beq.w	8006afa <_printf_float+0xbe>
 8006dcc:	9a05      	ldr	r2, [sp, #20]
 8006dce:	f10b 0b01 	add.w	fp, fp, #1
 8006dd2:	e7b9      	b.n	8006d48 <_printf_float+0x30c>
 8006dd4:	ee18 3a10 	vmov	r3, s16
 8006dd8:	4652      	mov	r2, sl
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	d1be      	bne.n	8006d62 <_printf_float+0x326>
 8006de4:	e689      	b.n	8006afa <_printf_float+0xbe>
 8006de6:	9a05      	ldr	r2, [sp, #20]
 8006de8:	464b      	mov	r3, r9
 8006dea:	4442      	add	r2, r8
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	d1c1      	bne.n	8006d7a <_printf_float+0x33e>
 8006df6:	e680      	b.n	8006afa <_printf_float+0xbe>
 8006df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dfa:	2a01      	cmp	r2, #1
 8006dfc:	dc01      	bgt.n	8006e02 <_printf_float+0x3c6>
 8006dfe:	07db      	lsls	r3, r3, #31
 8006e00:	d53a      	bpl.n	8006e78 <_printf_float+0x43c>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4642      	mov	r2, r8
 8006e06:	4631      	mov	r1, r6
 8006e08:	4628      	mov	r0, r5
 8006e0a:	47b8      	blx	r7
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	f43f ae74 	beq.w	8006afa <_printf_float+0xbe>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f ae6b 	beq.w	8006afa <_printf_float+0xbe>
 8006e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006e30:	f7f9 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e34:	b9d8      	cbnz	r0, 8006e6e <_printf_float+0x432>
 8006e36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006e3a:	f108 0201 	add.w	r2, r8, #1
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	d10e      	bne.n	8006e66 <_printf_float+0x42a>
 8006e48:	e657      	b.n	8006afa <_printf_float+0xbe>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4652      	mov	r2, sl
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f ae50 	beq.w	8006afa <_printf_float+0xbe>
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e60:	3b01      	subs	r3, #1
 8006e62:	4543      	cmp	r3, r8
 8006e64:	dcf1      	bgt.n	8006e4a <_printf_float+0x40e>
 8006e66:	464b      	mov	r3, r9
 8006e68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e6c:	e6da      	b.n	8006c24 <_printf_float+0x1e8>
 8006e6e:	f04f 0800 	mov.w	r8, #0
 8006e72:	f104 0a1a 	add.w	sl, r4, #26
 8006e76:	e7f2      	b.n	8006e5e <_printf_float+0x422>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	e7df      	b.n	8006e3e <_printf_float+0x402>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	464a      	mov	r2, r9
 8006e82:	4631      	mov	r1, r6
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f43f ae36 	beq.w	8006afa <_printf_float+0xbe>
 8006e8e:	f108 0801 	add.w	r8, r8, #1
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e96:	1a5b      	subs	r3, r3, r1
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	dcf0      	bgt.n	8006e7e <_printf_float+0x442>
 8006e9c:	e6f8      	b.n	8006c90 <_printf_float+0x254>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	f104 0919 	add.w	r9, r4, #25
 8006ea6:	e7f4      	b.n	8006e92 <_printf_float+0x456>

08006ea8 <_printf_common>:
 8006ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eac:	4616      	mov	r6, r2
 8006eae:	4699      	mov	r9, r3
 8006eb0:	688a      	ldr	r2, [r1, #8]
 8006eb2:	690b      	ldr	r3, [r1, #16]
 8006eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	bfb8      	it	lt
 8006ebc:	4613      	movlt	r3, r2
 8006ebe:	6033      	str	r3, [r6, #0]
 8006ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	b10a      	cbz	r2, 8006ece <_printf_common+0x26>
 8006eca:	3301      	adds	r3, #1
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	0699      	lsls	r1, r3, #26
 8006ed2:	bf42      	ittt	mi
 8006ed4:	6833      	ldrmi	r3, [r6, #0]
 8006ed6:	3302      	addmi	r3, #2
 8006ed8:	6033      	strmi	r3, [r6, #0]
 8006eda:	6825      	ldr	r5, [r4, #0]
 8006edc:	f015 0506 	ands.w	r5, r5, #6
 8006ee0:	d106      	bne.n	8006ef0 <_printf_common+0x48>
 8006ee2:	f104 0a19 	add.w	sl, r4, #25
 8006ee6:	68e3      	ldr	r3, [r4, #12]
 8006ee8:	6832      	ldr	r2, [r6, #0]
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	42ab      	cmp	r3, r5
 8006eee:	dc26      	bgt.n	8006f3e <_printf_common+0x96>
 8006ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ef4:	1e13      	subs	r3, r2, #0
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	bf18      	it	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	0692      	lsls	r2, r2, #26
 8006efe:	d42b      	bmi.n	8006f58 <_printf_common+0xb0>
 8006f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f04:	4649      	mov	r1, r9
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c0      	blx	r8
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d01e      	beq.n	8006f4c <_printf_common+0xa4>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	6922      	ldr	r2, [r4, #16]
 8006f12:	f003 0306 	and.w	r3, r3, #6
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	bf02      	ittt	eq
 8006f1a:	68e5      	ldreq	r5, [r4, #12]
 8006f1c:	6833      	ldreq	r3, [r6, #0]
 8006f1e:	1aed      	subeq	r5, r5, r3
 8006f20:	68a3      	ldr	r3, [r4, #8]
 8006f22:	bf0c      	ite	eq
 8006f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f28:	2500      	movne	r5, #0
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	bfc4      	itt	gt
 8006f2e:	1a9b      	subgt	r3, r3, r2
 8006f30:	18ed      	addgt	r5, r5, r3
 8006f32:	2600      	movs	r6, #0
 8006f34:	341a      	adds	r4, #26
 8006f36:	42b5      	cmp	r5, r6
 8006f38:	d11a      	bne.n	8006f70 <_printf_common+0xc8>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e008      	b.n	8006f50 <_printf_common+0xa8>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4652      	mov	r2, sl
 8006f42:	4649      	mov	r1, r9
 8006f44:	4638      	mov	r0, r7
 8006f46:	47c0      	blx	r8
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d103      	bne.n	8006f54 <_printf_common+0xac>
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f54:	3501      	adds	r5, #1
 8006f56:	e7c6      	b.n	8006ee6 <_printf_common+0x3e>
 8006f58:	18e1      	adds	r1, r4, r3
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	2030      	movs	r0, #48	; 0x30
 8006f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f62:	4422      	add	r2, r4
 8006f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	e7c7      	b.n	8006f00 <_printf_common+0x58>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4622      	mov	r2, r4
 8006f74:	4649      	mov	r1, r9
 8006f76:	4638      	mov	r0, r7
 8006f78:	47c0      	blx	r8
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d0e6      	beq.n	8006f4c <_printf_common+0xa4>
 8006f7e:	3601      	adds	r6, #1
 8006f80:	e7d9      	b.n	8006f36 <_printf_common+0x8e>
	...

08006f84 <_printf_i>:
 8006f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	7e0f      	ldrb	r7, [r1, #24]
 8006f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f8c:	2f78      	cmp	r7, #120	; 0x78
 8006f8e:	4691      	mov	r9, r2
 8006f90:	4680      	mov	r8, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	469a      	mov	sl, r3
 8006f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f9a:	d807      	bhi.n	8006fac <_printf_i+0x28>
 8006f9c:	2f62      	cmp	r7, #98	; 0x62
 8006f9e:	d80a      	bhi.n	8006fb6 <_printf_i+0x32>
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	f000 80d4 	beq.w	800714e <_printf_i+0x1ca>
 8006fa6:	2f58      	cmp	r7, #88	; 0x58
 8006fa8:	f000 80c0 	beq.w	800712c <_printf_i+0x1a8>
 8006fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fb4:	e03a      	b.n	800702c <_printf_i+0xa8>
 8006fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fba:	2b15      	cmp	r3, #21
 8006fbc:	d8f6      	bhi.n	8006fac <_printf_i+0x28>
 8006fbe:	a101      	add	r1, pc, #4	; (adr r1, 8006fc4 <_printf_i+0x40>)
 8006fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fc4:	0800701d 	.word	0x0800701d
 8006fc8:	08007031 	.word	0x08007031
 8006fcc:	08006fad 	.word	0x08006fad
 8006fd0:	08006fad 	.word	0x08006fad
 8006fd4:	08006fad 	.word	0x08006fad
 8006fd8:	08006fad 	.word	0x08006fad
 8006fdc:	08007031 	.word	0x08007031
 8006fe0:	08006fad 	.word	0x08006fad
 8006fe4:	08006fad 	.word	0x08006fad
 8006fe8:	08006fad 	.word	0x08006fad
 8006fec:	08006fad 	.word	0x08006fad
 8006ff0:	08007135 	.word	0x08007135
 8006ff4:	0800705d 	.word	0x0800705d
 8006ff8:	080070ef 	.word	0x080070ef
 8006ffc:	08006fad 	.word	0x08006fad
 8007000:	08006fad 	.word	0x08006fad
 8007004:	08007157 	.word	0x08007157
 8007008:	08006fad 	.word	0x08006fad
 800700c:	0800705d 	.word	0x0800705d
 8007010:	08006fad 	.word	0x08006fad
 8007014:	08006fad 	.word	0x08006fad
 8007018:	080070f7 	.word	0x080070f7
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	1d1a      	adds	r2, r3, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	602a      	str	r2, [r5, #0]
 8007024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800702c:	2301      	movs	r3, #1
 800702e:	e09f      	b.n	8007170 <_printf_i+0x1ec>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	0607      	lsls	r7, r0, #24
 8007036:	f103 0104 	add.w	r1, r3, #4
 800703a:	6029      	str	r1, [r5, #0]
 800703c:	d501      	bpl.n	8007042 <_printf_i+0xbe>
 800703e:	681e      	ldr	r6, [r3, #0]
 8007040:	e003      	b.n	800704a <_printf_i+0xc6>
 8007042:	0646      	lsls	r6, r0, #25
 8007044:	d5fb      	bpl.n	800703e <_printf_i+0xba>
 8007046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800704a:	2e00      	cmp	r6, #0
 800704c:	da03      	bge.n	8007056 <_printf_i+0xd2>
 800704e:	232d      	movs	r3, #45	; 0x2d
 8007050:	4276      	negs	r6, r6
 8007052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007056:	485a      	ldr	r0, [pc, #360]	; (80071c0 <_printf_i+0x23c>)
 8007058:	230a      	movs	r3, #10
 800705a:	e012      	b.n	8007082 <_printf_i+0xfe>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	6820      	ldr	r0, [r4, #0]
 8007060:	1d19      	adds	r1, r3, #4
 8007062:	6029      	str	r1, [r5, #0]
 8007064:	0605      	lsls	r5, r0, #24
 8007066:	d501      	bpl.n	800706c <_printf_i+0xe8>
 8007068:	681e      	ldr	r6, [r3, #0]
 800706a:	e002      	b.n	8007072 <_printf_i+0xee>
 800706c:	0641      	lsls	r1, r0, #25
 800706e:	d5fb      	bpl.n	8007068 <_printf_i+0xe4>
 8007070:	881e      	ldrh	r6, [r3, #0]
 8007072:	4853      	ldr	r0, [pc, #332]	; (80071c0 <_printf_i+0x23c>)
 8007074:	2f6f      	cmp	r7, #111	; 0x6f
 8007076:	bf0c      	ite	eq
 8007078:	2308      	moveq	r3, #8
 800707a:	230a      	movne	r3, #10
 800707c:	2100      	movs	r1, #0
 800707e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007082:	6865      	ldr	r5, [r4, #4]
 8007084:	60a5      	str	r5, [r4, #8]
 8007086:	2d00      	cmp	r5, #0
 8007088:	bfa2      	ittt	ge
 800708a:	6821      	ldrge	r1, [r4, #0]
 800708c:	f021 0104 	bicge.w	r1, r1, #4
 8007090:	6021      	strge	r1, [r4, #0]
 8007092:	b90e      	cbnz	r6, 8007098 <_printf_i+0x114>
 8007094:	2d00      	cmp	r5, #0
 8007096:	d04b      	beq.n	8007130 <_printf_i+0x1ac>
 8007098:	4615      	mov	r5, r2
 800709a:	fbb6 f1f3 	udiv	r1, r6, r3
 800709e:	fb03 6711 	mls	r7, r3, r1, r6
 80070a2:	5dc7      	ldrb	r7, [r0, r7]
 80070a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070a8:	4637      	mov	r7, r6
 80070aa:	42bb      	cmp	r3, r7
 80070ac:	460e      	mov	r6, r1
 80070ae:	d9f4      	bls.n	800709a <_printf_i+0x116>
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d10b      	bne.n	80070cc <_printf_i+0x148>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	07de      	lsls	r6, r3, #31
 80070b8:	d508      	bpl.n	80070cc <_printf_i+0x148>
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	6861      	ldr	r1, [r4, #4]
 80070be:	4299      	cmp	r1, r3
 80070c0:	bfde      	ittt	le
 80070c2:	2330      	movle	r3, #48	; 0x30
 80070c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070cc:	1b52      	subs	r2, r2, r5
 80070ce:	6122      	str	r2, [r4, #16]
 80070d0:	f8cd a000 	str.w	sl, [sp]
 80070d4:	464b      	mov	r3, r9
 80070d6:	aa03      	add	r2, sp, #12
 80070d8:	4621      	mov	r1, r4
 80070da:	4640      	mov	r0, r8
 80070dc:	f7ff fee4 	bl	8006ea8 <_printf_common>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d14a      	bne.n	800717a <_printf_i+0x1f6>
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	b004      	add	sp, #16
 80070ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f043 0320 	orr.w	r3, r3, #32
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	4833      	ldr	r0, [pc, #204]	; (80071c4 <_printf_i+0x240>)
 80070f8:	2778      	movs	r7, #120	; 0x78
 80070fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	6829      	ldr	r1, [r5, #0]
 8007102:	061f      	lsls	r7, r3, #24
 8007104:	f851 6b04 	ldr.w	r6, [r1], #4
 8007108:	d402      	bmi.n	8007110 <_printf_i+0x18c>
 800710a:	065f      	lsls	r7, r3, #25
 800710c:	bf48      	it	mi
 800710e:	b2b6      	uxthmi	r6, r6
 8007110:	07df      	lsls	r7, r3, #31
 8007112:	bf48      	it	mi
 8007114:	f043 0320 	orrmi.w	r3, r3, #32
 8007118:	6029      	str	r1, [r5, #0]
 800711a:	bf48      	it	mi
 800711c:	6023      	strmi	r3, [r4, #0]
 800711e:	b91e      	cbnz	r6, 8007128 <_printf_i+0x1a4>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	f023 0320 	bic.w	r3, r3, #32
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	2310      	movs	r3, #16
 800712a:	e7a7      	b.n	800707c <_printf_i+0xf8>
 800712c:	4824      	ldr	r0, [pc, #144]	; (80071c0 <_printf_i+0x23c>)
 800712e:	e7e4      	b.n	80070fa <_printf_i+0x176>
 8007130:	4615      	mov	r5, r2
 8007132:	e7bd      	b.n	80070b0 <_printf_i+0x12c>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	6826      	ldr	r6, [r4, #0]
 8007138:	6961      	ldr	r1, [r4, #20]
 800713a:	1d18      	adds	r0, r3, #4
 800713c:	6028      	str	r0, [r5, #0]
 800713e:	0635      	lsls	r5, r6, #24
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	d501      	bpl.n	8007148 <_printf_i+0x1c4>
 8007144:	6019      	str	r1, [r3, #0]
 8007146:	e002      	b.n	800714e <_printf_i+0x1ca>
 8007148:	0670      	lsls	r0, r6, #25
 800714a:	d5fb      	bpl.n	8007144 <_printf_i+0x1c0>
 800714c:	8019      	strh	r1, [r3, #0]
 800714e:	2300      	movs	r3, #0
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	4615      	mov	r5, r2
 8007154:	e7bc      	b.n	80070d0 <_printf_i+0x14c>
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	602a      	str	r2, [r5, #0]
 800715c:	681d      	ldr	r5, [r3, #0]
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	2100      	movs	r1, #0
 8007162:	4628      	mov	r0, r5
 8007164:	f7f9 f834 	bl	80001d0 <memchr>
 8007168:	b108      	cbz	r0, 800716e <_printf_i+0x1ea>
 800716a:	1b40      	subs	r0, r0, r5
 800716c:	6060      	str	r0, [r4, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	2300      	movs	r3, #0
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007178:	e7aa      	b.n	80070d0 <_printf_i+0x14c>
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	462a      	mov	r2, r5
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	47d0      	blx	sl
 8007184:	3001      	adds	r0, #1
 8007186:	d0ad      	beq.n	80070e4 <_printf_i+0x160>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	079b      	lsls	r3, r3, #30
 800718c:	d413      	bmi.n	80071b6 <_printf_i+0x232>
 800718e:	68e0      	ldr	r0, [r4, #12]
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	4298      	cmp	r0, r3
 8007194:	bfb8      	it	lt
 8007196:	4618      	movlt	r0, r3
 8007198:	e7a6      	b.n	80070e8 <_printf_i+0x164>
 800719a:	2301      	movs	r3, #1
 800719c:	4632      	mov	r2, r6
 800719e:	4649      	mov	r1, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	47d0      	blx	sl
 80071a4:	3001      	adds	r0, #1
 80071a6:	d09d      	beq.n	80070e4 <_printf_i+0x160>
 80071a8:	3501      	adds	r5, #1
 80071aa:	68e3      	ldr	r3, [r4, #12]
 80071ac:	9903      	ldr	r1, [sp, #12]
 80071ae:	1a5b      	subs	r3, r3, r1
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	dcf2      	bgt.n	800719a <_printf_i+0x216>
 80071b4:	e7eb      	b.n	800718e <_printf_i+0x20a>
 80071b6:	2500      	movs	r5, #0
 80071b8:	f104 0619 	add.w	r6, r4, #25
 80071bc:	e7f5      	b.n	80071aa <_printf_i+0x226>
 80071be:	bf00      	nop
 80071c0:	0800b6ed 	.word	0x0800b6ed
 80071c4:	0800b6fe 	.word	0x0800b6fe

080071c8 <std>:
 80071c8:	2300      	movs	r3, #0
 80071ca:	b510      	push	{r4, lr}
 80071cc:	4604      	mov	r4, r0
 80071ce:	e9c0 3300 	strd	r3, r3, [r0]
 80071d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071d6:	6083      	str	r3, [r0, #8]
 80071d8:	8181      	strh	r1, [r0, #12]
 80071da:	6643      	str	r3, [r0, #100]	; 0x64
 80071dc:	81c2      	strh	r2, [r0, #14]
 80071de:	6183      	str	r3, [r0, #24]
 80071e0:	4619      	mov	r1, r3
 80071e2:	2208      	movs	r2, #8
 80071e4:	305c      	adds	r0, #92	; 0x5c
 80071e6:	f000 f9ed 	bl	80075c4 <memset>
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <std+0x38>)
 80071ec:	6263      	str	r3, [r4, #36]	; 0x24
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <std+0x3c>)
 80071f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <std+0x40>)
 80071f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071f6:	4b05      	ldr	r3, [pc, #20]	; (800720c <std+0x44>)
 80071f8:	6224      	str	r4, [r4, #32]
 80071fa:	6323      	str	r3, [r4, #48]	; 0x30
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	08007415 	.word	0x08007415
 8007204:	08007437 	.word	0x08007437
 8007208:	0800746f 	.word	0x0800746f
 800720c:	08007493 	.word	0x08007493

08007210 <stdio_exit_handler>:
 8007210:	4a02      	ldr	r2, [pc, #8]	; (800721c <stdio_exit_handler+0xc>)
 8007212:	4903      	ldr	r1, [pc, #12]	; (8007220 <stdio_exit_handler+0x10>)
 8007214:	4803      	ldr	r0, [pc, #12]	; (8007224 <stdio_exit_handler+0x14>)
 8007216:	f000 b869 	b.w	80072ec <_fwalk_sglue>
 800721a:	bf00      	nop
 800721c:	2000075c 	.word	0x2000075c
 8007220:	08008f51 	.word	0x08008f51
 8007224:	20000768 	.word	0x20000768

08007228 <cleanup_stdio>:
 8007228:	6841      	ldr	r1, [r0, #4]
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <cleanup_stdio+0x34>)
 800722c:	4299      	cmp	r1, r3
 800722e:	b510      	push	{r4, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	d001      	beq.n	8007238 <cleanup_stdio+0x10>
 8007234:	f001 fe8c 	bl	8008f50 <_fflush_r>
 8007238:	68a1      	ldr	r1, [r4, #8]
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <cleanup_stdio+0x38>)
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <cleanup_stdio+0x1e>
 8007240:	4620      	mov	r0, r4
 8007242:	f001 fe85 	bl	8008f50 <_fflush_r>
 8007246:	68e1      	ldr	r1, [r4, #12]
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <cleanup_stdio+0x3c>)
 800724a:	4299      	cmp	r1, r3
 800724c:	d004      	beq.n	8007258 <cleanup_stdio+0x30>
 800724e:	4620      	mov	r0, r4
 8007250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007254:	f001 be7c 	b.w	8008f50 <_fflush_r>
 8007258:	bd10      	pop	{r4, pc}
 800725a:	bf00      	nop
 800725c:	20000e2c 	.word	0x20000e2c
 8007260:	20000e94 	.word	0x20000e94
 8007264:	20000efc 	.word	0x20000efc

08007268 <global_stdio_init.part.0>:
 8007268:	b510      	push	{r4, lr}
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <global_stdio_init.part.0+0x30>)
 800726c:	4c0b      	ldr	r4, [pc, #44]	; (800729c <global_stdio_init.part.0+0x34>)
 800726e:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <global_stdio_init.part.0+0x38>)
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	4620      	mov	r0, r4
 8007274:	2200      	movs	r2, #0
 8007276:	2104      	movs	r1, #4
 8007278:	f7ff ffa6 	bl	80071c8 <std>
 800727c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007280:	2201      	movs	r2, #1
 8007282:	2109      	movs	r1, #9
 8007284:	f7ff ffa0 	bl	80071c8 <std>
 8007288:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800728c:	2202      	movs	r2, #2
 800728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007292:	2112      	movs	r1, #18
 8007294:	f7ff bf98 	b.w	80071c8 <std>
 8007298:	20000f64 	.word	0x20000f64
 800729c:	20000e2c 	.word	0x20000e2c
 80072a0:	08007211 	.word	0x08007211

080072a4 <__sfp_lock_acquire>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__sfp_lock_acquire+0x8>)
 80072a6:	f000 ba19 	b.w	80076dc <__retarget_lock_acquire_recursive>
 80072aa:	bf00      	nop
 80072ac:	20000f6d 	.word	0x20000f6d

080072b0 <__sfp_lock_release>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__sfp_lock_release+0x8>)
 80072b2:	f000 ba14 	b.w	80076de <__retarget_lock_release_recursive>
 80072b6:	bf00      	nop
 80072b8:	20000f6d 	.word	0x20000f6d

080072bc <__sinit>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	f7ff fff0 	bl	80072a4 <__sfp_lock_acquire>
 80072c4:	6a23      	ldr	r3, [r4, #32]
 80072c6:	b11b      	cbz	r3, 80072d0 <__sinit+0x14>
 80072c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072cc:	f7ff bff0 	b.w	80072b0 <__sfp_lock_release>
 80072d0:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <__sinit+0x28>)
 80072d2:	6223      	str	r3, [r4, #32]
 80072d4:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <__sinit+0x2c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f5      	bne.n	80072c8 <__sinit+0xc>
 80072dc:	f7ff ffc4 	bl	8007268 <global_stdio_init.part.0>
 80072e0:	e7f2      	b.n	80072c8 <__sinit+0xc>
 80072e2:	bf00      	nop
 80072e4:	08007229 	.word	0x08007229
 80072e8:	20000f64 	.word	0x20000f64

080072ec <_fwalk_sglue>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4607      	mov	r7, r0
 80072f2:	4688      	mov	r8, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	2600      	movs	r6, #0
 80072f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007300:	d505      	bpl.n	800730e <_fwalk_sglue+0x22>
 8007302:	6824      	ldr	r4, [r4, #0]
 8007304:	2c00      	cmp	r4, #0
 8007306:	d1f7      	bne.n	80072f8 <_fwalk_sglue+0xc>
 8007308:	4630      	mov	r0, r6
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d907      	bls.n	8007324 <_fwalk_sglue+0x38>
 8007314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007318:	3301      	adds	r3, #1
 800731a:	d003      	beq.n	8007324 <_fwalk_sglue+0x38>
 800731c:	4629      	mov	r1, r5
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	4306      	orrs	r6, r0
 8007324:	3568      	adds	r5, #104	; 0x68
 8007326:	e7e9      	b.n	80072fc <_fwalk_sglue+0x10>

08007328 <iprintf>:
 8007328:	b40f      	push	{r0, r1, r2, r3}
 800732a:	b507      	push	{r0, r1, r2, lr}
 800732c:	4906      	ldr	r1, [pc, #24]	; (8007348 <iprintf+0x20>)
 800732e:	ab04      	add	r3, sp, #16
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	f853 2b04 	ldr.w	r2, [r3], #4
 8007336:	6881      	ldr	r1, [r0, #8]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	f001 fc69 	bl	8008c10 <_vfiprintf_r>
 800733e:	b003      	add	sp, #12
 8007340:	f85d eb04 	ldr.w	lr, [sp], #4
 8007344:	b004      	add	sp, #16
 8007346:	4770      	bx	lr
 8007348:	200007b4 	.word	0x200007b4

0800734c <putchar>:
 800734c:	4b02      	ldr	r3, [pc, #8]	; (8007358 <putchar+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	6882      	ldr	r2, [r0, #8]
 8007354:	f001 be98 	b.w	8009088 <_putc_r>
 8007358:	200007b4 	.word	0x200007b4

0800735c <_puts_r>:
 800735c:	6a03      	ldr	r3, [r0, #32]
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	6884      	ldr	r4, [r0, #8]
 8007362:	4605      	mov	r5, r0
 8007364:	460e      	mov	r6, r1
 8007366:	b90b      	cbnz	r3, 800736c <_puts_r+0x10>
 8007368:	f7ff ffa8 	bl	80072bc <__sinit>
 800736c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800736e:	07db      	lsls	r3, r3, #31
 8007370:	d405      	bmi.n	800737e <_puts_r+0x22>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	0598      	lsls	r0, r3, #22
 8007376:	d402      	bmi.n	800737e <_puts_r+0x22>
 8007378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800737a:	f000 f9af 	bl	80076dc <__retarget_lock_acquire_recursive>
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	0719      	lsls	r1, r3, #28
 8007382:	d513      	bpl.n	80073ac <_puts_r+0x50>
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	b18b      	cbz	r3, 80073ac <_puts_r+0x50>
 8007388:	3e01      	subs	r6, #1
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007390:	3b01      	subs	r3, #1
 8007392:	60a3      	str	r3, [r4, #8]
 8007394:	b9e9      	cbnz	r1, 80073d2 <_puts_r+0x76>
 8007396:	2b00      	cmp	r3, #0
 8007398:	da2e      	bge.n	80073f8 <_puts_r+0x9c>
 800739a:	4622      	mov	r2, r4
 800739c:	210a      	movs	r1, #10
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 f87b 	bl	800749a <__swbuf_r>
 80073a4:	3001      	adds	r0, #1
 80073a6:	d007      	beq.n	80073b8 <_puts_r+0x5c>
 80073a8:	250a      	movs	r5, #10
 80073aa:	e007      	b.n	80073bc <_puts_r+0x60>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 f8b0 	bl	8007514 <__swsetup_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0e7      	beq.n	8007388 <_puts_r+0x2c>
 80073b8:	f04f 35ff 	mov.w	r5, #4294967295
 80073bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073be:	07da      	lsls	r2, r3, #31
 80073c0:	d405      	bmi.n	80073ce <_puts_r+0x72>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	059b      	lsls	r3, r3, #22
 80073c6:	d402      	bmi.n	80073ce <_puts_r+0x72>
 80073c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ca:	f000 f988 	bl	80076de <__retarget_lock_release_recursive>
 80073ce:	4628      	mov	r0, r5
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da04      	bge.n	80073e0 <_puts_r+0x84>
 80073d6:	69a2      	ldr	r2, [r4, #24]
 80073d8:	429a      	cmp	r2, r3
 80073da:	dc06      	bgt.n	80073ea <_puts_r+0x8e>
 80073dc:	290a      	cmp	r1, #10
 80073de:	d004      	beq.n	80073ea <_puts_r+0x8e>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	6022      	str	r2, [r4, #0]
 80073e6:	7019      	strb	r1, [r3, #0]
 80073e8:	e7cf      	b.n	800738a <_puts_r+0x2e>
 80073ea:	4622      	mov	r2, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 f854 	bl	800749a <__swbuf_r>
 80073f2:	3001      	adds	r0, #1
 80073f4:	d1c9      	bne.n	800738a <_puts_r+0x2e>
 80073f6:	e7df      	b.n	80073b8 <_puts_r+0x5c>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	250a      	movs	r5, #10
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	6022      	str	r2, [r4, #0]
 8007400:	701d      	strb	r5, [r3, #0]
 8007402:	e7db      	b.n	80073bc <_puts_r+0x60>

08007404 <puts>:
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <puts+0xc>)
 8007406:	4601      	mov	r1, r0
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f7ff bfa7 	b.w	800735c <_puts_r>
 800740e:	bf00      	nop
 8007410:	200007b4 	.word	0x200007b4

08007414 <__sread>:
 8007414:	b510      	push	{r4, lr}
 8007416:	460c      	mov	r4, r1
 8007418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741c:	f000 f900 	bl	8007620 <_read_r>
 8007420:	2800      	cmp	r0, #0
 8007422:	bfab      	itete	ge
 8007424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007426:	89a3      	ldrhlt	r3, [r4, #12]
 8007428:	181b      	addge	r3, r3, r0
 800742a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800742e:	bfac      	ite	ge
 8007430:	6563      	strge	r3, [r4, #84]	; 0x54
 8007432:	81a3      	strhlt	r3, [r4, #12]
 8007434:	bd10      	pop	{r4, pc}

08007436 <__swrite>:
 8007436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743a:	461f      	mov	r7, r3
 800743c:	898b      	ldrh	r3, [r1, #12]
 800743e:	05db      	lsls	r3, r3, #23
 8007440:	4605      	mov	r5, r0
 8007442:	460c      	mov	r4, r1
 8007444:	4616      	mov	r6, r2
 8007446:	d505      	bpl.n	8007454 <__swrite+0x1e>
 8007448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744c:	2302      	movs	r3, #2
 800744e:	2200      	movs	r2, #0
 8007450:	f000 f8d4 	bl	80075fc <_lseek_r>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800745a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	4632      	mov	r2, r6
 8007462:	463b      	mov	r3, r7
 8007464:	4628      	mov	r0, r5
 8007466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800746a:	f000 b8fb 	b.w	8007664 <_write_r>

0800746e <__sseek>:
 800746e:	b510      	push	{r4, lr}
 8007470:	460c      	mov	r4, r1
 8007472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007476:	f000 f8c1 	bl	80075fc <_lseek_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	bf15      	itete	ne
 8007480:	6560      	strne	r0, [r4, #84]	; 0x54
 8007482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800748a:	81a3      	strheq	r3, [r4, #12]
 800748c:	bf18      	it	ne
 800748e:	81a3      	strhne	r3, [r4, #12]
 8007490:	bd10      	pop	{r4, pc}

08007492 <__sclose>:
 8007492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007496:	f000 b8a1 	b.w	80075dc <_close_r>

0800749a <__swbuf_r>:
 800749a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749c:	460e      	mov	r6, r1
 800749e:	4614      	mov	r4, r2
 80074a0:	4605      	mov	r5, r0
 80074a2:	b118      	cbz	r0, 80074ac <__swbuf_r+0x12>
 80074a4:	6a03      	ldr	r3, [r0, #32]
 80074a6:	b90b      	cbnz	r3, 80074ac <__swbuf_r+0x12>
 80074a8:	f7ff ff08 	bl	80072bc <__sinit>
 80074ac:	69a3      	ldr	r3, [r4, #24]
 80074ae:	60a3      	str	r3, [r4, #8]
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	071a      	lsls	r2, r3, #28
 80074b4:	d525      	bpl.n	8007502 <__swbuf_r+0x68>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	b31b      	cbz	r3, 8007502 <__swbuf_r+0x68>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	6922      	ldr	r2, [r4, #16]
 80074be:	1a98      	subs	r0, r3, r2
 80074c0:	6963      	ldr	r3, [r4, #20]
 80074c2:	b2f6      	uxtb	r6, r6
 80074c4:	4283      	cmp	r3, r0
 80074c6:	4637      	mov	r7, r6
 80074c8:	dc04      	bgt.n	80074d4 <__swbuf_r+0x3a>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4628      	mov	r0, r5
 80074ce:	f001 fd3f 	bl	8008f50 <_fflush_r>
 80074d2:	b9e0      	cbnz	r0, 800750e <__swbuf_r+0x74>
 80074d4:	68a3      	ldr	r3, [r4, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	60a3      	str	r3, [r4, #8]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	6022      	str	r2, [r4, #0]
 80074e0:	701e      	strb	r6, [r3, #0]
 80074e2:	6962      	ldr	r2, [r4, #20]
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d004      	beq.n	80074f4 <__swbuf_r+0x5a>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	07db      	lsls	r3, r3, #31
 80074ee:	d506      	bpl.n	80074fe <__swbuf_r+0x64>
 80074f0:	2e0a      	cmp	r6, #10
 80074f2:	d104      	bne.n	80074fe <__swbuf_r+0x64>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4628      	mov	r0, r5
 80074f8:	f001 fd2a 	bl	8008f50 <_fflush_r>
 80074fc:	b938      	cbnz	r0, 800750e <__swbuf_r+0x74>
 80074fe:	4638      	mov	r0, r7
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007502:	4621      	mov	r1, r4
 8007504:	4628      	mov	r0, r5
 8007506:	f000 f805 	bl	8007514 <__swsetup_r>
 800750a:	2800      	cmp	r0, #0
 800750c:	d0d5      	beq.n	80074ba <__swbuf_r+0x20>
 800750e:	f04f 37ff 	mov.w	r7, #4294967295
 8007512:	e7f4      	b.n	80074fe <__swbuf_r+0x64>

08007514 <__swsetup_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <__swsetup_r+0xac>)
 8007518:	4605      	mov	r5, r0
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	460c      	mov	r4, r1
 800751e:	b118      	cbz	r0, 8007528 <__swsetup_r+0x14>
 8007520:	6a03      	ldr	r3, [r0, #32]
 8007522:	b90b      	cbnz	r3, 8007528 <__swsetup_r+0x14>
 8007524:	f7ff feca 	bl	80072bc <__sinit>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800752e:	0718      	lsls	r0, r3, #28
 8007530:	d422      	bmi.n	8007578 <__swsetup_r+0x64>
 8007532:	06d9      	lsls	r1, r3, #27
 8007534:	d407      	bmi.n	8007546 <__swsetup_r+0x32>
 8007536:	2309      	movs	r3, #9
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	e034      	b.n	80075b0 <__swsetup_r+0x9c>
 8007546:	0758      	lsls	r0, r3, #29
 8007548:	d512      	bpl.n	8007570 <__swsetup_r+0x5c>
 800754a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800754c:	b141      	cbz	r1, 8007560 <__swsetup_r+0x4c>
 800754e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007552:	4299      	cmp	r1, r3
 8007554:	d002      	beq.n	800755c <__swsetup_r+0x48>
 8007556:	4628      	mov	r0, r5
 8007558:	f000 ff68 	bl	800842c <_free_r>
 800755c:	2300      	movs	r3, #0
 800755e:	6363      	str	r3, [r4, #52]	; 0x34
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	2300      	movs	r3, #0
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	f043 0308 	orr.w	r3, r3, #8
 8007576:	81a3      	strh	r3, [r4, #12]
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	b94b      	cbnz	r3, 8007590 <__swsetup_r+0x7c>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007586:	d003      	beq.n	8007590 <__swsetup_r+0x7c>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f001 fd40 	bl	8009010 <__smakebuf_r>
 8007590:	89a0      	ldrh	r0, [r4, #12]
 8007592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007596:	f010 0301 	ands.w	r3, r0, #1
 800759a:	d00a      	beq.n	80075b2 <__swsetup_r+0x9e>
 800759c:	2300      	movs	r3, #0
 800759e:	60a3      	str	r3, [r4, #8]
 80075a0:	6963      	ldr	r3, [r4, #20]
 80075a2:	425b      	negs	r3, r3
 80075a4:	61a3      	str	r3, [r4, #24]
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	b943      	cbnz	r3, 80075bc <__swsetup_r+0xa8>
 80075aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075ae:	d1c4      	bne.n	800753a <__swsetup_r+0x26>
 80075b0:	bd38      	pop	{r3, r4, r5, pc}
 80075b2:	0781      	lsls	r1, r0, #30
 80075b4:	bf58      	it	pl
 80075b6:	6963      	ldrpl	r3, [r4, #20]
 80075b8:	60a3      	str	r3, [r4, #8]
 80075ba:	e7f4      	b.n	80075a6 <__swsetup_r+0x92>
 80075bc:	2000      	movs	r0, #0
 80075be:	e7f7      	b.n	80075b0 <__swsetup_r+0x9c>
 80075c0:	200007b4 	.word	0x200007b4

080075c4 <memset>:
 80075c4:	4402      	add	r2, r0
 80075c6:	4603      	mov	r3, r0
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d100      	bne.n	80075ce <memset+0xa>
 80075cc:	4770      	bx	lr
 80075ce:	f803 1b01 	strb.w	r1, [r3], #1
 80075d2:	e7f9      	b.n	80075c8 <memset+0x4>

080075d4 <_localeconv_r>:
 80075d4:	4800      	ldr	r0, [pc, #0]	; (80075d8 <_localeconv_r+0x4>)
 80075d6:	4770      	bx	lr
 80075d8:	200008a8 	.word	0x200008a8

080075dc <_close_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d06      	ldr	r5, [pc, #24]	; (80075f8 <_close_r+0x1c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	602b      	str	r3, [r5, #0]
 80075e8:	f002 f848 	bl	800967c <_close>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_close_r+0x1a>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_close_r+0x1a>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	20000f68 	.word	0x20000f68

080075fc <_lseek_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d07      	ldr	r5, [pc, #28]	; (800761c <_lseek_r+0x20>)
 8007600:	4604      	mov	r4, r0
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	2200      	movs	r2, #0
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f002 f85e 	bl	80096cc <_lseek>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_lseek_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_lseek_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	20000f68 	.word	0x20000f68

08007620 <_read_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	; (8007640 <_read_r+0x20>)
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f002 f854 	bl	80096dc <_read>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_read_r+0x1e>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_read_r+0x1e>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000f68 	.word	0x20000f68

08007644 <_sbrk_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d06      	ldr	r5, [pc, #24]	; (8007660 <_sbrk_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7fa fb4a 	bl	8001ce8 <_sbrk>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_sbrk_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_sbrk_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000f68 	.word	0x20000f68

08007664 <_write_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d07      	ldr	r5, [pc, #28]	; (8007684 <_write_r+0x20>)
 8007668:	4604      	mov	r4, r0
 800766a:	4608      	mov	r0, r1
 800766c:	4611      	mov	r1, r2
 800766e:	2200      	movs	r2, #0
 8007670:	602a      	str	r2, [r5, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	f7fa fa08 	bl	8001a88 <_write>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_write_r+0x1e>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_write_r+0x1e>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20000f68 	.word	0x20000f68

08007688 <__errno>:
 8007688:	4b01      	ldr	r3, [pc, #4]	; (8007690 <__errno+0x8>)
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	200007b4 	.word	0x200007b4

08007694 <__libc_init_array>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	4d0d      	ldr	r5, [pc, #52]	; (80076cc <__libc_init_array+0x38>)
 8007698:	4c0d      	ldr	r4, [pc, #52]	; (80076d0 <__libc_init_array+0x3c>)
 800769a:	1b64      	subs	r4, r4, r5
 800769c:	10a4      	asrs	r4, r4, #2
 800769e:	2600      	movs	r6, #0
 80076a0:	42a6      	cmp	r6, r4
 80076a2:	d109      	bne.n	80076b8 <__libc_init_array+0x24>
 80076a4:	4d0b      	ldr	r5, [pc, #44]	; (80076d4 <__libc_init_array+0x40>)
 80076a6:	4c0c      	ldr	r4, [pc, #48]	; (80076d8 <__libc_init_array+0x44>)
 80076a8:	f002 f822 	bl	80096f0 <_init>
 80076ac:	1b64      	subs	r4, r4, r5
 80076ae:	10a4      	asrs	r4, r4, #2
 80076b0:	2600      	movs	r6, #0
 80076b2:	42a6      	cmp	r6, r4
 80076b4:	d105      	bne.n	80076c2 <__libc_init_array+0x2e>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076bc:	4798      	blx	r3
 80076be:	3601      	adds	r6, #1
 80076c0:	e7ee      	b.n	80076a0 <__libc_init_array+0xc>
 80076c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c6:	4798      	blx	r3
 80076c8:	3601      	adds	r6, #1
 80076ca:	e7f2      	b.n	80076b2 <__libc_init_array+0x1e>
 80076cc:	0800ba58 	.word	0x0800ba58
 80076d0:	0800ba58 	.word	0x0800ba58
 80076d4:	0800ba58 	.word	0x0800ba58
 80076d8:	0800ba5c 	.word	0x0800ba5c

080076dc <__retarget_lock_acquire_recursive>:
 80076dc:	4770      	bx	lr

080076de <__retarget_lock_release_recursive>:
 80076de:	4770      	bx	lr

080076e0 <memcpy>:
 80076e0:	440a      	add	r2, r1
 80076e2:	4291      	cmp	r1, r2
 80076e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e8:	d100      	bne.n	80076ec <memcpy+0xc>
 80076ea:	4770      	bx	lr
 80076ec:	b510      	push	{r4, lr}
 80076ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f6:	4291      	cmp	r1, r2
 80076f8:	d1f9      	bne.n	80076ee <memcpy+0xe>
 80076fa:	bd10      	pop	{r4, pc}

080076fc <__assert_func>:
 80076fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076fe:	4614      	mov	r4, r2
 8007700:	461a      	mov	r2, r3
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <__assert_func+0x2c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4605      	mov	r5, r0
 8007708:	68d8      	ldr	r0, [r3, #12]
 800770a:	b14c      	cbz	r4, 8007720 <__assert_func+0x24>
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <__assert_func+0x30>)
 800770e:	9100      	str	r1, [sp, #0]
 8007710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007714:	4906      	ldr	r1, [pc, #24]	; (8007730 <__assert_func+0x34>)
 8007716:	462b      	mov	r3, r5
 8007718:	f001 fc42 	bl	8008fa0 <fiprintf>
 800771c:	f001 fd0a 	bl	8009134 <abort>
 8007720:	4b04      	ldr	r3, [pc, #16]	; (8007734 <__assert_func+0x38>)
 8007722:	461c      	mov	r4, r3
 8007724:	e7f3      	b.n	800770e <__assert_func+0x12>
 8007726:	bf00      	nop
 8007728:	200007b4 	.word	0x200007b4
 800772c:	0800b70f 	.word	0x0800b70f
 8007730:	0800b71c 	.word	0x0800b71c
 8007734:	08009828 	.word	0x08009828

08007738 <quorem>:
 8007738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	6903      	ldr	r3, [r0, #16]
 800773e:	690c      	ldr	r4, [r1, #16]
 8007740:	42a3      	cmp	r3, r4
 8007742:	4607      	mov	r7, r0
 8007744:	db7e      	blt.n	8007844 <quorem+0x10c>
 8007746:	3c01      	subs	r4, #1
 8007748:	f101 0814 	add.w	r8, r1, #20
 800774c:	f100 0514 	add.w	r5, r0, #20
 8007750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800775a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800775e:	3301      	adds	r3, #1
 8007760:	429a      	cmp	r2, r3
 8007762:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007766:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800776a:	fbb2 f6f3 	udiv	r6, r2, r3
 800776e:	d331      	bcc.n	80077d4 <quorem+0x9c>
 8007770:	f04f 0e00 	mov.w	lr, #0
 8007774:	4640      	mov	r0, r8
 8007776:	46ac      	mov	ip, r5
 8007778:	46f2      	mov	sl, lr
 800777a:	f850 2b04 	ldr.w	r2, [r0], #4
 800777e:	b293      	uxth	r3, r2
 8007780:	fb06 e303 	mla	r3, r6, r3, lr
 8007784:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007788:	0c1a      	lsrs	r2, r3, #16
 800778a:	b29b      	uxth	r3, r3
 800778c:	ebaa 0303 	sub.w	r3, sl, r3
 8007790:	f8dc a000 	ldr.w	sl, [ip]
 8007794:	fa13 f38a 	uxtah	r3, r3, sl
 8007798:	fb06 220e 	mla	r2, r6, lr, r2
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	9b00      	ldr	r3, [sp, #0]
 80077a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a4:	b292      	uxth	r2, r2
 80077a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80077b2:	4581      	cmp	r9, r0
 80077b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b8:	f84c 3b04 	str.w	r3, [ip], #4
 80077bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077c0:	d2db      	bcs.n	800777a <quorem+0x42>
 80077c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c6:	b92b      	cbnz	r3, 80077d4 <quorem+0x9c>
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	3b04      	subs	r3, #4
 80077cc:	429d      	cmp	r5, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	d32c      	bcc.n	800782c <quorem+0xf4>
 80077d2:	613c      	str	r4, [r7, #16]
 80077d4:	4638      	mov	r0, r7
 80077d6:	f001 f8f1 	bl	80089bc <__mcmp>
 80077da:	2800      	cmp	r0, #0
 80077dc:	db22      	blt.n	8007824 <quorem+0xec>
 80077de:	3601      	adds	r6, #1
 80077e0:	4629      	mov	r1, r5
 80077e2:	2000      	movs	r0, #0
 80077e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80077e8:	f8d1 c000 	ldr.w	ip, [r1]
 80077ec:	b293      	uxth	r3, r2
 80077ee:	1ac3      	subs	r3, r0, r3
 80077f0:	0c12      	lsrs	r2, r2, #16
 80077f2:	fa13 f38c 	uxtah	r3, r3, ip
 80077f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80077fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077fe:	b29b      	uxth	r3, r3
 8007800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007804:	45c1      	cmp	r9, r8
 8007806:	f841 3b04 	str.w	r3, [r1], #4
 800780a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800780e:	d2e9      	bcs.n	80077e4 <quorem+0xac>
 8007810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007818:	b922      	cbnz	r2, 8007824 <quorem+0xec>
 800781a:	3b04      	subs	r3, #4
 800781c:	429d      	cmp	r5, r3
 800781e:	461a      	mov	r2, r3
 8007820:	d30a      	bcc.n	8007838 <quorem+0x100>
 8007822:	613c      	str	r4, [r7, #16]
 8007824:	4630      	mov	r0, r6
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	3b04      	subs	r3, #4
 8007830:	2a00      	cmp	r2, #0
 8007832:	d1ce      	bne.n	80077d2 <quorem+0x9a>
 8007834:	3c01      	subs	r4, #1
 8007836:	e7c9      	b.n	80077cc <quorem+0x94>
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	3b04      	subs	r3, #4
 800783c:	2a00      	cmp	r2, #0
 800783e:	d1f0      	bne.n	8007822 <quorem+0xea>
 8007840:	3c01      	subs	r4, #1
 8007842:	e7eb      	b.n	800781c <quorem+0xe4>
 8007844:	2000      	movs	r0, #0
 8007846:	e7ee      	b.n	8007826 <quorem+0xee>

08007848 <_dtoa_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	ed2d 8b04 	vpush	{d8-d9}
 8007850:	69c5      	ldr	r5, [r0, #28]
 8007852:	b093      	sub	sp, #76	; 0x4c
 8007854:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007858:	ec57 6b10 	vmov	r6, r7, d0
 800785c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007860:	9107      	str	r1, [sp, #28]
 8007862:	4604      	mov	r4, r0
 8007864:	920a      	str	r2, [sp, #40]	; 0x28
 8007866:	930d      	str	r3, [sp, #52]	; 0x34
 8007868:	b975      	cbnz	r5, 8007888 <_dtoa_r+0x40>
 800786a:	2010      	movs	r0, #16
 800786c:	f7fe ff54 	bl	8006718 <malloc>
 8007870:	4602      	mov	r2, r0
 8007872:	61e0      	str	r0, [r4, #28]
 8007874:	b920      	cbnz	r0, 8007880 <_dtoa_r+0x38>
 8007876:	4bae      	ldr	r3, [pc, #696]	; (8007b30 <_dtoa_r+0x2e8>)
 8007878:	21ef      	movs	r1, #239	; 0xef
 800787a:	48ae      	ldr	r0, [pc, #696]	; (8007b34 <_dtoa_r+0x2ec>)
 800787c:	f7ff ff3e 	bl	80076fc <__assert_func>
 8007880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007884:	6005      	str	r5, [r0, #0]
 8007886:	60c5      	str	r5, [r0, #12]
 8007888:	69e3      	ldr	r3, [r4, #28]
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	b151      	cbz	r1, 80078a4 <_dtoa_r+0x5c>
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	604a      	str	r2, [r1, #4]
 8007892:	2301      	movs	r3, #1
 8007894:	4093      	lsls	r3, r2
 8007896:	608b      	str	r3, [r1, #8]
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fe53 	bl	8008544 <_Bfree>
 800789e:	69e3      	ldr	r3, [r4, #28]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	1e3b      	subs	r3, r7, #0
 80078a6:	bfbb      	ittet	lt
 80078a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	9303      	strlt	r3, [sp, #12]
 80078ae:	2300      	movge	r3, #0
 80078b0:	2201      	movlt	r2, #1
 80078b2:	bfac      	ite	ge
 80078b4:	f8c8 3000 	strge.w	r3, [r8]
 80078b8:	f8c8 2000 	strlt.w	r2, [r8]
 80078bc:	4b9e      	ldr	r3, [pc, #632]	; (8007b38 <_dtoa_r+0x2f0>)
 80078be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078c2:	ea33 0308 	bics.w	r3, r3, r8
 80078c6:	d11b      	bne.n	8007900 <_dtoa_r+0xb8>
 80078c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078d4:	4333      	orrs	r3, r6
 80078d6:	f000 8593 	beq.w	8008400 <_dtoa_r+0xbb8>
 80078da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078dc:	b963      	cbnz	r3, 80078f8 <_dtoa_r+0xb0>
 80078de:	4b97      	ldr	r3, [pc, #604]	; (8007b3c <_dtoa_r+0x2f4>)
 80078e0:	e027      	b.n	8007932 <_dtoa_r+0xea>
 80078e2:	4b97      	ldr	r3, [pc, #604]	; (8007b40 <_dtoa_r+0x2f8>)
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	9800      	ldr	r0, [sp, #0]
 80078ee:	b013      	add	sp, #76	; 0x4c
 80078f0:	ecbd 8b04 	vpop	{d8-d9}
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	4b90      	ldr	r3, [pc, #576]	; (8007b3c <_dtoa_r+0x2f4>)
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	3303      	adds	r3, #3
 80078fe:	e7f3      	b.n	80078e8 <_dtoa_r+0xa0>
 8007900:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	ec51 0b17 	vmov	r0, r1, d7
 800790a:	eeb0 8a47 	vmov.f32	s16, s14
 800790e:	eef0 8a67 	vmov.f32	s17, s15
 8007912:	2300      	movs	r3, #0
 8007914:	f7f9 f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007918:	4681      	mov	r9, r0
 800791a:	b160      	cbz	r0, 8007936 <_dtoa_r+0xee>
 800791c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800791e:	2301      	movs	r3, #1
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8568 	beq.w	80083fa <_dtoa_r+0xbb2>
 800792a:	4b86      	ldr	r3, [pc, #536]	; (8007b44 <_dtoa_r+0x2fc>)
 800792c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	3b01      	subs	r3, #1
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	e7da      	b.n	80078ec <_dtoa_r+0xa4>
 8007936:	aa10      	add	r2, sp, #64	; 0x40
 8007938:	a911      	add	r1, sp, #68	; 0x44
 800793a:	4620      	mov	r0, r4
 800793c:	eeb0 0a48 	vmov.f32	s0, s16
 8007940:	eef0 0a68 	vmov.f32	s1, s17
 8007944:	f001 f8e0 	bl	8008b08 <__d2b>
 8007948:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800794c:	4682      	mov	sl, r0
 800794e:	2d00      	cmp	r5, #0
 8007950:	d07f      	beq.n	8007a52 <_dtoa_r+0x20a>
 8007952:	ee18 3a90 	vmov	r3, s17
 8007956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800795a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800795e:	ec51 0b18 	vmov	r0, r1, d8
 8007962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800796a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800796e:	4619      	mov	r1, r3
 8007970:	2200      	movs	r2, #0
 8007972:	4b75      	ldr	r3, [pc, #468]	; (8007b48 <_dtoa_r+0x300>)
 8007974:	f7f8 fc88 	bl	8000288 <__aeabi_dsub>
 8007978:	a367      	add	r3, pc, #412	; (adr r3, 8007b18 <_dtoa_r+0x2d0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fe3b 	bl	80005f8 <__aeabi_dmul>
 8007982:	a367      	add	r3, pc, #412	; (adr r3, 8007b20 <_dtoa_r+0x2d8>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fc80 	bl	800028c <__adddf3>
 800798c:	4606      	mov	r6, r0
 800798e:	4628      	mov	r0, r5
 8007990:	460f      	mov	r7, r1
 8007992:	f7f8 fdc7 	bl	8000524 <__aeabi_i2d>
 8007996:	a364      	add	r3, pc, #400	; (adr r3, 8007b28 <_dtoa_r+0x2e0>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f8 fe2c 	bl	80005f8 <__aeabi_dmul>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f8 fc70 	bl	800028c <__adddf3>
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	f7f9 f8d2 	bl	8000b58 <__aeabi_d2iz>
 80079b4:	2200      	movs	r2, #0
 80079b6:	4683      	mov	fp, r0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4630      	mov	r0, r6
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f9 f88d 	bl	8000adc <__aeabi_dcmplt>
 80079c2:	b148      	cbz	r0, 80079d8 <_dtoa_r+0x190>
 80079c4:	4658      	mov	r0, fp
 80079c6:	f7f8 fdad 	bl	8000524 <__aeabi_i2d>
 80079ca:	4632      	mov	r2, r6
 80079cc:	463b      	mov	r3, r7
 80079ce:	f7f9 f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d2:	b908      	cbnz	r0, 80079d8 <_dtoa_r+0x190>
 80079d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079d8:	f1bb 0f16 	cmp.w	fp, #22
 80079dc:	d857      	bhi.n	8007a8e <_dtoa_r+0x246>
 80079de:	4b5b      	ldr	r3, [pc, #364]	; (8007b4c <_dtoa_r+0x304>)
 80079e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	ec51 0b18 	vmov	r0, r1, d8
 80079ec:	f7f9 f876 	bl	8000adc <__aeabi_dcmplt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d04e      	beq.n	8007a92 <_dtoa_r+0x24a>
 80079f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079f8:	2300      	movs	r3, #0
 80079fa:	930c      	str	r3, [sp, #48]	; 0x30
 80079fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079fe:	1b5b      	subs	r3, r3, r5
 8007a00:	1e5a      	subs	r2, r3, #1
 8007a02:	bf45      	ittet	mi
 8007a04:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a08:	9305      	strmi	r3, [sp, #20]
 8007a0a:	2300      	movpl	r3, #0
 8007a0c:	2300      	movmi	r3, #0
 8007a0e:	9206      	str	r2, [sp, #24]
 8007a10:	bf54      	ite	pl
 8007a12:	9305      	strpl	r3, [sp, #20]
 8007a14:	9306      	strmi	r3, [sp, #24]
 8007a16:	f1bb 0f00 	cmp.w	fp, #0
 8007a1a:	db3c      	blt.n	8007a96 <_dtoa_r+0x24e>
 8007a1c:	9b06      	ldr	r3, [sp, #24]
 8007a1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007a22:	445b      	add	r3, fp
 8007a24:	9306      	str	r3, [sp, #24]
 8007a26:	2300      	movs	r3, #0
 8007a28:	9308      	str	r3, [sp, #32]
 8007a2a:	9b07      	ldr	r3, [sp, #28]
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d868      	bhi.n	8007b02 <_dtoa_r+0x2ba>
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	bfc4      	itt	gt
 8007a34:	3b04      	subgt	r3, #4
 8007a36:	9307      	strgt	r3, [sp, #28]
 8007a38:	9b07      	ldr	r3, [sp, #28]
 8007a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8007a3e:	bfcc      	ite	gt
 8007a40:	2500      	movgt	r5, #0
 8007a42:	2501      	movle	r5, #1
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	f200 8085 	bhi.w	8007b54 <_dtoa_r+0x30c>
 8007a4a:	e8df f003 	tbb	[pc, r3]
 8007a4e:	3b2e      	.short	0x3b2e
 8007a50:	5839      	.short	0x5839
 8007a52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a56:	441d      	add	r5, r3
 8007a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	bfc1      	itttt	gt
 8007a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a64:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007a6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a70:	bfd6      	itet	le
 8007a72:	f1c3 0320 	rsble	r3, r3, #32
 8007a76:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a7a:	fa06 f003 	lslle.w	r0, r6, r3
 8007a7e:	f7f8 fd41 	bl	8000504 <__aeabi_ui2d>
 8007a82:	2201      	movs	r2, #1
 8007a84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a88:	3d01      	subs	r5, #1
 8007a8a:	920e      	str	r2, [sp, #56]	; 0x38
 8007a8c:	e76f      	b.n	800796e <_dtoa_r+0x126>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7b3      	b.n	80079fa <_dtoa_r+0x1b2>
 8007a92:	900c      	str	r0, [sp, #48]	; 0x30
 8007a94:	e7b2      	b.n	80079fc <_dtoa_r+0x1b4>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	eba3 030b 	sub.w	r3, r3, fp
 8007a9c:	9305      	str	r3, [sp, #20]
 8007a9e:	f1cb 0300 	rsb	r3, fp, #0
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa8:	e7bf      	b.n	8007a2a <_dtoa_r+0x1e2>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9309      	str	r3, [sp, #36]	; 0x24
 8007aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dc52      	bgt.n	8007b5a <_dtoa_r+0x312>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	461a      	mov	r2, r3
 8007abc:	920a      	str	r2, [sp, #40]	; 0x28
 8007abe:	e00b      	b.n	8007ad8 <_dtoa_r+0x290>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7f3      	b.n	8007aac <_dtoa_r+0x264>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aca:	445b      	add	r3, fp
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	bfb8      	it	lt
 8007ad6:	2301      	movlt	r3, #1
 8007ad8:	69e0      	ldr	r0, [r4, #28]
 8007ada:	2100      	movs	r1, #0
 8007adc:	2204      	movs	r2, #4
 8007ade:	f102 0614 	add.w	r6, r2, #20
 8007ae2:	429e      	cmp	r6, r3
 8007ae4:	d93d      	bls.n	8007b62 <_dtoa_r+0x31a>
 8007ae6:	6041      	str	r1, [r0, #4]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fceb 	bl	80084c4 <_Balloc>
 8007aee:	9000      	str	r0, [sp, #0]
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d139      	bne.n	8007b68 <_dtoa_r+0x320>
 8007af4:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <_dtoa_r+0x308>)
 8007af6:	4602      	mov	r2, r0
 8007af8:	f240 11af 	movw	r1, #431	; 0x1af
 8007afc:	e6bd      	b.n	800787a <_dtoa_r+0x32>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e7e1      	b.n	8007ac6 <_dtoa_r+0x27e>
 8007b02:	2501      	movs	r5, #1
 8007b04:	2300      	movs	r3, #0
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	9509      	str	r5, [sp, #36]	; 0x24
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	2200      	movs	r2, #0
 8007b14:	2312      	movs	r3, #18
 8007b16:	e7d1      	b.n	8007abc <_dtoa_r+0x274>
 8007b18:	636f4361 	.word	0x636f4361
 8007b1c:	3fd287a7 	.word	0x3fd287a7
 8007b20:	8b60c8b3 	.word	0x8b60c8b3
 8007b24:	3fc68a28 	.word	0x3fc68a28
 8007b28:	509f79fb 	.word	0x509f79fb
 8007b2c:	3fd34413 	.word	0x3fd34413
 8007b30:	0800b66c 	.word	0x0800b66c
 8007b34:	0800b758 	.word	0x0800b758
 8007b38:	7ff00000 	.word	0x7ff00000
 8007b3c:	0800b754 	.word	0x0800b754
 8007b40:	0800b74b 	.word	0x0800b74b
 8007b44:	0800b6ec 	.word	0x0800b6ec
 8007b48:	3ff80000 	.word	0x3ff80000
 8007b4c:	0800b848 	.word	0x0800b848
 8007b50:	0800b7b0 	.word	0x0800b7b0
 8007b54:	2301      	movs	r3, #1
 8007b56:	9309      	str	r3, [sp, #36]	; 0x24
 8007b58:	e7d7      	b.n	8007b0a <_dtoa_r+0x2c2>
 8007b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	e7ba      	b.n	8007ad8 <_dtoa_r+0x290>
 8007b62:	3101      	adds	r1, #1
 8007b64:	0052      	lsls	r2, r2, #1
 8007b66:	e7ba      	b.n	8007ade <_dtoa_r+0x296>
 8007b68:	69e3      	ldr	r3, [r4, #28]
 8007b6a:	9a00      	ldr	r2, [sp, #0]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	2b0e      	cmp	r3, #14
 8007b72:	f200 80a8 	bhi.w	8007cc6 <_dtoa_r+0x47e>
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	f000 80a5 	beq.w	8007cc6 <_dtoa_r+0x47e>
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	dd38      	ble.n	8007bf4 <_dtoa_r+0x3ac>
 8007b82:	4bc0      	ldr	r3, [pc, #768]	; (8007e84 <_dtoa_r+0x63c>)
 8007b84:	f00b 020f 	and.w	r2, fp, #15
 8007b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007b98:	d019      	beq.n	8007bce <_dtoa_r+0x386>
 8007b9a:	4bbb      	ldr	r3, [pc, #748]	; (8007e88 <_dtoa_r+0x640>)
 8007b9c:	ec51 0b18 	vmov	r0, r1, d8
 8007ba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba4:	f7f8 fe52 	bl	800084c <__aeabi_ddiv>
 8007ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bac:	f008 080f 	and.w	r8, r8, #15
 8007bb0:	2503      	movs	r5, #3
 8007bb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e88 <_dtoa_r+0x640>
 8007bb6:	f1b8 0f00 	cmp.w	r8, #0
 8007bba:	d10a      	bne.n	8007bd2 <_dtoa_r+0x38a>
 8007bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	f7f8 fe42 	bl	800084c <__aeabi_ddiv>
 8007bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bcc:	e02b      	b.n	8007c26 <_dtoa_r+0x3de>
 8007bce:	2502      	movs	r5, #2
 8007bd0:	e7ef      	b.n	8007bb2 <_dtoa_r+0x36a>
 8007bd2:	f018 0f01 	tst.w	r8, #1
 8007bd6:	d008      	beq.n	8007bea <_dtoa_r+0x3a2>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	3501      	adds	r5, #1
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007bee:	f109 0908 	add.w	r9, r9, #8
 8007bf2:	e7e0      	b.n	8007bb6 <_dtoa_r+0x36e>
 8007bf4:	f000 809f 	beq.w	8007d36 <_dtoa_r+0x4ee>
 8007bf8:	f1cb 0600 	rsb	r6, fp, #0
 8007bfc:	4ba1      	ldr	r3, [pc, #644]	; (8007e84 <_dtoa_r+0x63c>)
 8007bfe:	4fa2      	ldr	r7, [pc, #648]	; (8007e88 <_dtoa_r+0x640>)
 8007c00:	f006 020f 	and.w	r2, r6, #15
 8007c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	ec51 0b18 	vmov	r0, r1, d8
 8007c10:	f7f8 fcf2 	bl	80005f8 <__aeabi_dmul>
 8007c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c18:	1136      	asrs	r6, r6, #4
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2502      	movs	r5, #2
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d17e      	bne.n	8007d20 <_dtoa_r+0x4d8>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1d0      	bne.n	8007bc8 <_dtoa_r+0x380>
 8007c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8084 	beq.w	8007d3a <_dtoa_r+0x4f2>
 8007c32:	4b96      	ldr	r3, [pc, #600]	; (8007e8c <_dtoa_r+0x644>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	4640      	mov	r0, r8
 8007c38:	4649      	mov	r1, r9
 8007c3a:	f7f8 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d07b      	beq.n	8007d3a <_dtoa_r+0x4f2>
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d078      	beq.n	8007d3a <_dtoa_r+0x4f2>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dd39      	ble.n	8007cc2 <_dtoa_r+0x47a>
 8007c4e:	4b90      	ldr	r3, [pc, #576]	; (8007e90 <_dtoa_r+0x648>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fccf 	bl	80005f8 <__aeabi_dmul>
 8007c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c5e:	9e01      	ldr	r6, [sp, #4]
 8007c60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007c64:	3501      	adds	r5, #1
 8007c66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f7f8 fc5a 	bl	8000524 <__aeabi_i2d>
 8007c70:	4642      	mov	r2, r8
 8007c72:	464b      	mov	r3, r9
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	4b86      	ldr	r3, [pc, #536]	; (8007e94 <_dtoa_r+0x64c>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7f8 fb06 	bl	800028c <__adddf3>
 8007c80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	d158      	bne.n	8007d40 <_dtoa_r+0x4f8>
 8007c8e:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <_dtoa_r+0x650>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 faf7 	bl	8000288 <__aeabi_dsub>
 8007c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	f7f8 ff39 	bl	8000b18 <__aeabi_dcmpgt>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f040 8296 	bne.w	80081d8 <_dtoa_r+0x990>
 8007cac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 ff10 	bl	8000adc <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f040 8289 	bne.w	80081d4 <_dtoa_r+0x98c>
 8007cc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f2c0 814e 	blt.w	8007f6a <_dtoa_r+0x722>
 8007cce:	f1bb 0f0e 	cmp.w	fp, #14
 8007cd2:	f300 814a 	bgt.w	8007f6a <_dtoa_r+0x722>
 8007cd6:	4b6b      	ldr	r3, [pc, #428]	; (8007e84 <_dtoa_r+0x63c>)
 8007cd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f280 80dc 	bge.w	8007ea0 <_dtoa_r+0x658>
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f300 80d8 	bgt.w	8007ea0 <_dtoa_r+0x658>
 8007cf0:	f040 826f 	bne.w	80081d2 <_dtoa_r+0x98a>
 8007cf4:	4b68      	ldr	r3, [pc, #416]	; (8007e98 <_dtoa_r+0x650>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 fc7c 	bl	80005f8 <__aeabi_dmul>
 8007d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d04:	f7f8 fefe 	bl	8000b04 <__aeabi_dcmpge>
 8007d08:	9e04      	ldr	r6, [sp, #16]
 8007d0a:	4637      	mov	r7, r6
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f040 8245 	bne.w	800819c <_dtoa_r+0x954>
 8007d12:	9d00      	ldr	r5, [sp, #0]
 8007d14:	2331      	movs	r3, #49	; 0x31
 8007d16:	f805 3b01 	strb.w	r3, [r5], #1
 8007d1a:	f10b 0b01 	add.w	fp, fp, #1
 8007d1e:	e241      	b.n	80081a4 <_dtoa_r+0x95c>
 8007d20:	07f2      	lsls	r2, r6, #31
 8007d22:	d505      	bpl.n	8007d30 <_dtoa_r+0x4e8>
 8007d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d28:	f7f8 fc66 	bl	80005f8 <__aeabi_dmul>
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	2301      	movs	r3, #1
 8007d30:	1076      	asrs	r6, r6, #1
 8007d32:	3708      	adds	r7, #8
 8007d34:	e773      	b.n	8007c1e <_dtoa_r+0x3d6>
 8007d36:	2502      	movs	r5, #2
 8007d38:	e775      	b.n	8007c26 <_dtoa_r+0x3de>
 8007d3a:	9e04      	ldr	r6, [sp, #16]
 8007d3c:	465f      	mov	r7, fp
 8007d3e:	e792      	b.n	8007c66 <_dtoa_r+0x41e>
 8007d40:	9900      	ldr	r1, [sp, #0]
 8007d42:	4b50      	ldr	r3, [pc, #320]	; (8007e84 <_dtoa_r+0x63c>)
 8007d44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d48:	4431      	add	r1, r6
 8007d4a:	9102      	str	r1, [sp, #8]
 8007d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4e:	eeb0 9a47 	vmov.f32	s18, s14
 8007d52:	eef0 9a67 	vmov.f32	s19, s15
 8007d56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d044      	beq.n	8007dec <_dtoa_r+0x5a4>
 8007d62:	494e      	ldr	r1, [pc, #312]	; (8007e9c <_dtoa_r+0x654>)
 8007d64:	2000      	movs	r0, #0
 8007d66:	f7f8 fd71 	bl	800084c <__aeabi_ddiv>
 8007d6a:	ec53 2b19 	vmov	r2, r3, d9
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	9d00      	ldr	r5, [sp, #0]
 8007d74:	ec41 0b19 	vmov	d9, r0, r1
 8007d78:	4649      	mov	r1, r9
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7f8 feec 	bl	8000b58 <__aeabi_d2iz>
 8007d80:	4606      	mov	r6, r0
 8007d82:	f7f8 fbcf 	bl	8000524 <__aeabi_i2d>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fa7b 	bl	8000288 <__aeabi_dsub>
 8007d92:	3630      	adds	r6, #48	; 0x30
 8007d94:	f805 6b01 	strb.w	r6, [r5], #1
 8007d98:	ec53 2b19 	vmov	r2, r3, d9
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4689      	mov	r9, r1
 8007da0:	f7f8 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d164      	bne.n	8007e72 <_dtoa_r+0x62a>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	4937      	ldr	r1, [pc, #220]	; (8007e8c <_dtoa_r+0x644>)
 8007dae:	2000      	movs	r0, #0
 8007db0:	f7f8 fa6a 	bl	8000288 <__aeabi_dsub>
 8007db4:	ec53 2b19 	vmov	r2, r3, d9
 8007db8:	f7f8 fe90 	bl	8000adc <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f040 80b6 	bne.w	8007f2e <_dtoa_r+0x6e6>
 8007dc2:	9b02      	ldr	r3, [sp, #8]
 8007dc4:	429d      	cmp	r5, r3
 8007dc6:	f43f af7c 	beq.w	8007cc2 <_dtoa_r+0x47a>
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <_dtoa_r+0x648>)
 8007dcc:	ec51 0b19 	vmov	r0, r1, d9
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f7f8 fc11 	bl	80005f8 <__aeabi_dmul>
 8007dd6:	4b2e      	ldr	r3, [pc, #184]	; (8007e90 <_dtoa_r+0x648>)
 8007dd8:	ec41 0b19 	vmov	d9, r0, r1
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fc09 	bl	80005f8 <__aeabi_dmul>
 8007de6:	4680      	mov	r8, r0
 8007de8:	4689      	mov	r9, r1
 8007dea:	e7c5      	b.n	8007d78 <_dtoa_r+0x530>
 8007dec:	ec51 0b17 	vmov	r0, r1, d7
 8007df0:	f7f8 fc02 	bl	80005f8 <__aeabi_dmul>
 8007df4:	9b02      	ldr	r3, [sp, #8]
 8007df6:	9d00      	ldr	r5, [sp, #0]
 8007df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dfa:	ec41 0b19 	vmov	d9, r0, r1
 8007dfe:	4649      	mov	r1, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	f7f8 fea9 	bl	8000b58 <__aeabi_d2iz>
 8007e06:	4606      	mov	r6, r0
 8007e08:	f7f8 fb8c 	bl	8000524 <__aeabi_i2d>
 8007e0c:	3630      	adds	r6, #48	; 0x30
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fa37 	bl	8000288 <__aeabi_dsub>
 8007e1a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	429d      	cmp	r5, r3
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	d124      	bne.n	8007e76 <_dtoa_r+0x62e>
 8007e2c:	4b1b      	ldr	r3, [pc, #108]	; (8007e9c <_dtoa_r+0x654>)
 8007e2e:	ec51 0b19 	vmov	r0, r1, d9
 8007e32:	f7f8 fa2b 	bl	800028c <__adddf3>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d173      	bne.n	8007f2e <_dtoa_r+0x6e6>
 8007e46:	ec53 2b19 	vmov	r2, r3, d9
 8007e4a:	4914      	ldr	r1, [pc, #80]	; (8007e9c <_dtoa_r+0x654>)
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 fe3f 	bl	8000adc <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f af2f 	beq.w	8007cc2 <_dtoa_r+0x47a>
 8007e64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e66:	1e6b      	subs	r3, r5, #1
 8007e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e6e:	2b30      	cmp	r3, #48	; 0x30
 8007e70:	d0f8      	beq.n	8007e64 <_dtoa_r+0x61c>
 8007e72:	46bb      	mov	fp, r7
 8007e74:	e04a      	b.n	8007f0c <_dtoa_r+0x6c4>
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <_dtoa_r+0x648>)
 8007e78:	f7f8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	4689      	mov	r9, r1
 8007e80:	e7bd      	b.n	8007dfe <_dtoa_r+0x5b6>
 8007e82:	bf00      	nop
 8007e84:	0800b848 	.word	0x0800b848
 8007e88:	0800b820 	.word	0x0800b820
 8007e8c:	3ff00000 	.word	0x3ff00000
 8007e90:	40240000 	.word	0x40240000
 8007e94:	401c0000 	.word	0x401c0000
 8007e98:	40140000 	.word	0x40140000
 8007e9c:	3fe00000 	.word	0x3fe00000
 8007ea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ea4:	9d00      	ldr	r5, [sp, #0]
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 fccd 	bl	800084c <__aeabi_ddiv>
 8007eb2:	f7f8 fe51 	bl	8000b58 <__aeabi_d2iz>
 8007eb6:	9001      	str	r0, [sp, #4]
 8007eb8:	f7f8 fb34 	bl	8000524 <__aeabi_i2d>
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 f9dc 	bl	8000288 <__aeabi_dsub>
 8007ed0:	9e01      	ldr	r6, [sp, #4]
 8007ed2:	9f04      	ldr	r7, [sp, #16]
 8007ed4:	3630      	adds	r6, #48	; 0x30
 8007ed6:	f805 6b01 	strb.w	r6, [r5], #1
 8007eda:	9e00      	ldr	r6, [sp, #0]
 8007edc:	1bae      	subs	r6, r5, r6
 8007ede:	42b7      	cmp	r7, r6
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	d134      	bne.n	8007f50 <_dtoa_r+0x708>
 8007ee6:	f7f8 f9d1 	bl	800028c <__adddf3>
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	f7f8 fe11 	bl	8000b18 <__aeabi_dcmpgt>
 8007ef6:	b9c8      	cbnz	r0, 8007f2c <_dtoa_r+0x6e4>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f04:	b110      	cbz	r0, 8007f0c <_dtoa_r+0x6c4>
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	07db      	lsls	r3, r3, #31
 8007f0a:	d40f      	bmi.n	8007f2c <_dtoa_r+0x6e4>
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fb18 	bl	8008544 <_Bfree>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f18:	702b      	strb	r3, [r5, #0]
 8007f1a:	f10b 0301 	add.w	r3, fp, #1
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f43f ace2 	beq.w	80078ec <_dtoa_r+0xa4>
 8007f28:	601d      	str	r5, [r3, #0]
 8007f2a:	e4df      	b.n	80078ec <_dtoa_r+0xa4>
 8007f2c:	465f      	mov	r7, fp
 8007f2e:	462b      	mov	r3, r5
 8007f30:	461d      	mov	r5, r3
 8007f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f36:	2a39      	cmp	r2, #57	; 0x39
 8007f38:	d106      	bne.n	8007f48 <_dtoa_r+0x700>
 8007f3a:	9a00      	ldr	r2, [sp, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d1f7      	bne.n	8007f30 <_dtoa_r+0x6e8>
 8007f40:	9900      	ldr	r1, [sp, #0]
 8007f42:	2230      	movs	r2, #48	; 0x30
 8007f44:	3701      	adds	r7, #1
 8007f46:	700a      	strb	r2, [r1, #0]
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	3201      	adds	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e790      	b.n	8007e72 <_dtoa_r+0x62a>
 8007f50:	4ba3      	ldr	r3, [pc, #652]	; (80081e0 <_dtoa_r+0x998>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	f7f8 fb50 	bl	80005f8 <__aeabi_dmul>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	460f      	mov	r7, r1
 8007f60:	f7f8 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d09e      	beq.n	8007ea6 <_dtoa_r+0x65e>
 8007f68:	e7d0      	b.n	8007f0c <_dtoa_r+0x6c4>
 8007f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f6c:	2a00      	cmp	r2, #0
 8007f6e:	f000 80ca 	beq.w	8008106 <_dtoa_r+0x8be>
 8007f72:	9a07      	ldr	r2, [sp, #28]
 8007f74:	2a01      	cmp	r2, #1
 8007f76:	f300 80ad 	bgt.w	80080d4 <_dtoa_r+0x88c>
 8007f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	f000 80a5 	beq.w	80080cc <_dtoa_r+0x884>
 8007f82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f86:	9e08      	ldr	r6, [sp, #32]
 8007f88:	9d05      	ldr	r5, [sp, #20]
 8007f8a:	9a05      	ldr	r2, [sp, #20]
 8007f8c:	441a      	add	r2, r3
 8007f8e:	9205      	str	r2, [sp, #20]
 8007f90:	9a06      	ldr	r2, [sp, #24]
 8007f92:	2101      	movs	r1, #1
 8007f94:	441a      	add	r2, r3
 8007f96:	4620      	mov	r0, r4
 8007f98:	9206      	str	r2, [sp, #24]
 8007f9a:	f000 fb89 	bl	80086b0 <__i2b>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	b165      	cbz	r5, 8007fbc <_dtoa_r+0x774>
 8007fa2:	9b06      	ldr	r3, [sp, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd09      	ble.n	8007fbc <_dtoa_r+0x774>
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	9a05      	ldr	r2, [sp, #20]
 8007fac:	bfa8      	it	ge
 8007fae:	462b      	movge	r3, r5
 8007fb0:	1ad2      	subs	r2, r2, r3
 8007fb2:	9205      	str	r2, [sp, #20]
 8007fb4:	9a06      	ldr	r2, [sp, #24]
 8007fb6:	1aed      	subs	r5, r5, r3
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	9306      	str	r3, [sp, #24]
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	b1f3      	cbz	r3, 8007ffe <_dtoa_r+0x7b6>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80a3 	beq.w	800810e <_dtoa_r+0x8c6>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	dd10      	ble.n	8007fee <_dtoa_r+0x7a6>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4632      	mov	r2, r6
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fc2d 	bl	8008830 <__pow5mult>
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4601      	mov	r1, r0
 8007fda:	4607      	mov	r7, r0
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fb7d 	bl	80086dc <__multiply>
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 faac 	bl	8008544 <_Bfree>
 8007fec:	46c2      	mov	sl, r8
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	1b9a      	subs	r2, r3, r6
 8007ff2:	d004      	beq.n	8007ffe <_dtoa_r+0x7b6>
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fc1a 	bl	8008830 <__pow5mult>
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	2101      	movs	r1, #1
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fb55 	bl	80086b0 <__i2b>
 8008006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	4606      	mov	r6, r0
 800800c:	f340 8081 	ble.w	8008112 <_dtoa_r+0x8ca>
 8008010:	461a      	mov	r2, r3
 8008012:	4601      	mov	r1, r0
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fc0b 	bl	8008830 <__pow5mult>
 800801a:	9b07      	ldr	r3, [sp, #28]
 800801c:	2b01      	cmp	r3, #1
 800801e:	4606      	mov	r6, r0
 8008020:	dd7a      	ble.n	8008118 <_dtoa_r+0x8d0>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	6933      	ldr	r3, [r6, #16]
 8008028:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800802c:	6918      	ldr	r0, [r3, #16]
 800802e:	f000 faf1 	bl	8008614 <__hi0bits>
 8008032:	f1c0 0020 	rsb	r0, r0, #32
 8008036:	9b06      	ldr	r3, [sp, #24]
 8008038:	4418      	add	r0, r3
 800803a:	f010 001f 	ands.w	r0, r0, #31
 800803e:	f000 8094 	beq.w	800816a <_dtoa_r+0x922>
 8008042:	f1c0 0320 	rsb	r3, r0, #32
 8008046:	2b04      	cmp	r3, #4
 8008048:	f340 8085 	ble.w	8008156 <_dtoa_r+0x90e>
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	f1c0 001c 	rsb	r0, r0, #28
 8008052:	4403      	add	r3, r0
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	4403      	add	r3, r0
 800805a:	4405      	add	r5, r0
 800805c:	9306      	str	r3, [sp, #24]
 800805e:	9b05      	ldr	r3, [sp, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	dd05      	ble.n	8008070 <_dtoa_r+0x828>
 8008064:	4651      	mov	r1, sl
 8008066:	461a      	mov	r2, r3
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fc3b 	bl	80088e4 <__lshift>
 800806e:	4682      	mov	sl, r0
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	dd05      	ble.n	8008082 <_dtoa_r+0x83a>
 8008076:	4631      	mov	r1, r6
 8008078:	461a      	mov	r2, r3
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fc32 	bl	80088e4 <__lshift>
 8008080:	4606      	mov	r6, r0
 8008082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d072      	beq.n	800816e <_dtoa_r+0x926>
 8008088:	4631      	mov	r1, r6
 800808a:	4650      	mov	r0, sl
 800808c:	f000 fc96 	bl	80089bc <__mcmp>
 8008090:	2800      	cmp	r0, #0
 8008092:	da6c      	bge.n	800816e <_dtoa_r+0x926>
 8008094:	2300      	movs	r3, #0
 8008096:	4651      	mov	r1, sl
 8008098:	220a      	movs	r2, #10
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fa74 	bl	8008588 <__multadd>
 80080a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080a6:	4682      	mov	sl, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 81b0 	beq.w	800840e <_dtoa_r+0xbc6>
 80080ae:	2300      	movs	r3, #0
 80080b0:	4639      	mov	r1, r7
 80080b2:	220a      	movs	r2, #10
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fa67 	bl	8008588 <__multadd>
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	4607      	mov	r7, r0
 80080c0:	f300 8096 	bgt.w	80081f0 <_dtoa_r+0x9a8>
 80080c4:	9b07      	ldr	r3, [sp, #28]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	dc59      	bgt.n	800817e <_dtoa_r+0x936>
 80080ca:	e091      	b.n	80081f0 <_dtoa_r+0x9a8>
 80080cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080d2:	e758      	b.n	8007f86 <_dtoa_r+0x73e>
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	1e5e      	subs	r6, r3, #1
 80080d8:	9b08      	ldr	r3, [sp, #32]
 80080da:	42b3      	cmp	r3, r6
 80080dc:	bfbf      	itttt	lt
 80080de:	9b08      	ldrlt	r3, [sp, #32]
 80080e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80080e2:	9608      	strlt	r6, [sp, #32]
 80080e4:	1af3      	sublt	r3, r6, r3
 80080e6:	bfb4      	ite	lt
 80080e8:	18d2      	addlt	r2, r2, r3
 80080ea:	1b9e      	subge	r6, r3, r6
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	bfbc      	itt	lt
 80080f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80080f2:	2600      	movlt	r6, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bfb7      	itett	lt
 80080f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80080fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008100:	1a9d      	sublt	r5, r3, r2
 8008102:	2300      	movlt	r3, #0
 8008104:	e741      	b.n	8007f8a <_dtoa_r+0x742>
 8008106:	9e08      	ldr	r6, [sp, #32]
 8008108:	9d05      	ldr	r5, [sp, #20]
 800810a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800810c:	e748      	b.n	8007fa0 <_dtoa_r+0x758>
 800810e:	9a08      	ldr	r2, [sp, #32]
 8008110:	e770      	b.n	8007ff4 <_dtoa_r+0x7ac>
 8008112:	9b07      	ldr	r3, [sp, #28]
 8008114:	2b01      	cmp	r3, #1
 8008116:	dc19      	bgt.n	800814c <_dtoa_r+0x904>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	b9bb      	cbnz	r3, 800814c <_dtoa_r+0x904>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008122:	b99b      	cbnz	r3, 800814c <_dtoa_r+0x904>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800812a:	0d1b      	lsrs	r3, r3, #20
 800812c:	051b      	lsls	r3, r3, #20
 800812e:	b183      	cbz	r3, 8008152 <_dtoa_r+0x90a>
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	3301      	adds	r3, #1
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	3301      	adds	r3, #1
 800813a:	9306      	str	r3, [sp, #24]
 800813c:	f04f 0801 	mov.w	r8, #1
 8008140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008142:	2b00      	cmp	r3, #0
 8008144:	f47f af6f 	bne.w	8008026 <_dtoa_r+0x7de>
 8008148:	2001      	movs	r0, #1
 800814a:	e774      	b.n	8008036 <_dtoa_r+0x7ee>
 800814c:	f04f 0800 	mov.w	r8, #0
 8008150:	e7f6      	b.n	8008140 <_dtoa_r+0x8f8>
 8008152:	4698      	mov	r8, r3
 8008154:	e7f4      	b.n	8008140 <_dtoa_r+0x8f8>
 8008156:	d082      	beq.n	800805e <_dtoa_r+0x816>
 8008158:	9a05      	ldr	r2, [sp, #20]
 800815a:	331c      	adds	r3, #28
 800815c:	441a      	add	r2, r3
 800815e:	9205      	str	r2, [sp, #20]
 8008160:	9a06      	ldr	r2, [sp, #24]
 8008162:	441a      	add	r2, r3
 8008164:	441d      	add	r5, r3
 8008166:	9206      	str	r2, [sp, #24]
 8008168:	e779      	b.n	800805e <_dtoa_r+0x816>
 800816a:	4603      	mov	r3, r0
 800816c:	e7f4      	b.n	8008158 <_dtoa_r+0x910>
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	dc37      	bgt.n	80081e4 <_dtoa_r+0x99c>
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	2b02      	cmp	r3, #2
 8008178:	dd34      	ble.n	80081e4 <_dtoa_r+0x99c>
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	b963      	cbnz	r3, 800819c <_dtoa_r+0x954>
 8008182:	4631      	mov	r1, r6
 8008184:	2205      	movs	r2, #5
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f9fe 	bl	8008588 <__multadd>
 800818c:	4601      	mov	r1, r0
 800818e:	4606      	mov	r6, r0
 8008190:	4650      	mov	r0, sl
 8008192:	f000 fc13 	bl	80089bc <__mcmp>
 8008196:	2800      	cmp	r0, #0
 8008198:	f73f adbb 	bgt.w	8007d12 <_dtoa_r+0x4ca>
 800819c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819e:	9d00      	ldr	r5, [sp, #0]
 80081a0:	ea6f 0b03 	mvn.w	fp, r3
 80081a4:	f04f 0800 	mov.w	r8, #0
 80081a8:	4631      	mov	r1, r6
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 f9ca 	bl	8008544 <_Bfree>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	f43f aeab 	beq.w	8007f0c <_dtoa_r+0x6c4>
 80081b6:	f1b8 0f00 	cmp.w	r8, #0
 80081ba:	d005      	beq.n	80081c8 <_dtoa_r+0x980>
 80081bc:	45b8      	cmp	r8, r7
 80081be:	d003      	beq.n	80081c8 <_dtoa_r+0x980>
 80081c0:	4641      	mov	r1, r8
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f9be 	bl	8008544 <_Bfree>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f9ba 	bl	8008544 <_Bfree>
 80081d0:	e69c      	b.n	8007f0c <_dtoa_r+0x6c4>
 80081d2:	2600      	movs	r6, #0
 80081d4:	4637      	mov	r7, r6
 80081d6:	e7e1      	b.n	800819c <_dtoa_r+0x954>
 80081d8:	46bb      	mov	fp, r7
 80081da:	4637      	mov	r7, r6
 80081dc:	e599      	b.n	8007d12 <_dtoa_r+0x4ca>
 80081de:	bf00      	nop
 80081e0:	40240000 	.word	0x40240000
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80c8 	beq.w	800837c <_dtoa_r+0xb34>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	dd05      	ble.n	8008200 <_dtoa_r+0x9b8>
 80081f4:	4639      	mov	r1, r7
 80081f6:	462a      	mov	r2, r5
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fb73 	bl	80088e4 <__lshift>
 80081fe:	4607      	mov	r7, r0
 8008200:	f1b8 0f00 	cmp.w	r8, #0
 8008204:	d05b      	beq.n	80082be <_dtoa_r+0xa76>
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f95b 	bl	80084c4 <_Balloc>
 800820e:	4605      	mov	r5, r0
 8008210:	b928      	cbnz	r0, 800821e <_dtoa_r+0x9d6>
 8008212:	4b83      	ldr	r3, [pc, #524]	; (8008420 <_dtoa_r+0xbd8>)
 8008214:	4602      	mov	r2, r0
 8008216:	f240 21ef 	movw	r1, #751	; 0x2ef
 800821a:	f7ff bb2e 	b.w	800787a <_dtoa_r+0x32>
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	3202      	adds	r2, #2
 8008222:	0092      	lsls	r2, r2, #2
 8008224:	f107 010c 	add.w	r1, r7, #12
 8008228:	300c      	adds	r0, #12
 800822a:	f7ff fa59 	bl	80076e0 <memcpy>
 800822e:	2201      	movs	r2, #1
 8008230:	4629      	mov	r1, r5
 8008232:	4620      	mov	r0, r4
 8008234:	f000 fb56 	bl	80088e4 <__lshift>
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008242:	4413      	add	r3, r2
 8008244:	9308      	str	r3, [sp, #32]
 8008246:	9b02      	ldr	r3, [sp, #8]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	46b8      	mov	r8, r7
 800824e:	9306      	str	r3, [sp, #24]
 8008250:	4607      	mov	r7, r0
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	4631      	mov	r1, r6
 8008256:	3b01      	subs	r3, #1
 8008258:	4650      	mov	r0, sl
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	f7ff fa6c 	bl	8007738 <quorem>
 8008260:	4641      	mov	r1, r8
 8008262:	9002      	str	r0, [sp, #8]
 8008264:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008268:	4650      	mov	r0, sl
 800826a:	f000 fba7 	bl	80089bc <__mcmp>
 800826e:	463a      	mov	r2, r7
 8008270:	9005      	str	r0, [sp, #20]
 8008272:	4631      	mov	r1, r6
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fbbd 	bl	80089f4 <__mdiff>
 800827a:	68c2      	ldr	r2, [r0, #12]
 800827c:	4605      	mov	r5, r0
 800827e:	bb02      	cbnz	r2, 80082c2 <_dtoa_r+0xa7a>
 8008280:	4601      	mov	r1, r0
 8008282:	4650      	mov	r0, sl
 8008284:	f000 fb9a 	bl	80089bc <__mcmp>
 8008288:	4602      	mov	r2, r0
 800828a:	4629      	mov	r1, r5
 800828c:	4620      	mov	r0, r4
 800828e:	9209      	str	r2, [sp, #36]	; 0x24
 8008290:	f000 f958 	bl	8008544 <_Bfree>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008298:	9d04      	ldr	r5, [sp, #16]
 800829a:	ea43 0102 	orr.w	r1, r3, r2
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	4319      	orrs	r1, r3
 80082a2:	d110      	bne.n	80082c6 <_dtoa_r+0xa7e>
 80082a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082a8:	d029      	beq.n	80082fe <_dtoa_r+0xab6>
 80082aa:	9b05      	ldr	r3, [sp, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd02      	ble.n	80082b6 <_dtoa_r+0xa6e>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	f883 9000 	strb.w	r9, [r3]
 80082bc:	e774      	b.n	80081a8 <_dtoa_r+0x960>
 80082be:	4638      	mov	r0, r7
 80082c0:	e7ba      	b.n	8008238 <_dtoa_r+0x9f0>
 80082c2:	2201      	movs	r2, #1
 80082c4:	e7e1      	b.n	800828a <_dtoa_r+0xa42>
 80082c6:	9b05      	ldr	r3, [sp, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db04      	blt.n	80082d6 <_dtoa_r+0xa8e>
 80082cc:	9907      	ldr	r1, [sp, #28]
 80082ce:	430b      	orrs	r3, r1
 80082d0:	9906      	ldr	r1, [sp, #24]
 80082d2:	430b      	orrs	r3, r1
 80082d4:	d120      	bne.n	8008318 <_dtoa_r+0xad0>
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	dded      	ble.n	80082b6 <_dtoa_r+0xa6e>
 80082da:	4651      	mov	r1, sl
 80082dc:	2201      	movs	r2, #1
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fb00 	bl	80088e4 <__lshift>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4682      	mov	sl, r0
 80082e8:	f000 fb68 	bl	80089bc <__mcmp>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	dc03      	bgt.n	80082f8 <_dtoa_r+0xab0>
 80082f0:	d1e1      	bne.n	80082b6 <_dtoa_r+0xa6e>
 80082f2:	f019 0f01 	tst.w	r9, #1
 80082f6:	d0de      	beq.n	80082b6 <_dtoa_r+0xa6e>
 80082f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082fc:	d1d8      	bne.n	80082b0 <_dtoa_r+0xa68>
 80082fe:	9a01      	ldr	r2, [sp, #4]
 8008300:	2339      	movs	r3, #57	; 0x39
 8008302:	7013      	strb	r3, [r2, #0]
 8008304:	462b      	mov	r3, r5
 8008306:	461d      	mov	r5, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800830e:	2a39      	cmp	r2, #57	; 0x39
 8008310:	d06c      	beq.n	80083ec <_dtoa_r+0xba4>
 8008312:	3201      	adds	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e747      	b.n	80081a8 <_dtoa_r+0x960>
 8008318:	2a00      	cmp	r2, #0
 800831a:	dd07      	ble.n	800832c <_dtoa_r+0xae4>
 800831c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008320:	d0ed      	beq.n	80082fe <_dtoa_r+0xab6>
 8008322:	9a01      	ldr	r2, [sp, #4]
 8008324:	f109 0301 	add.w	r3, r9, #1
 8008328:	7013      	strb	r3, [r2, #0]
 800832a:	e73d      	b.n	80081a8 <_dtoa_r+0x960>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	9a08      	ldr	r2, [sp, #32]
 8008330:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008334:	4293      	cmp	r3, r2
 8008336:	d043      	beq.n	80083c0 <_dtoa_r+0xb78>
 8008338:	4651      	mov	r1, sl
 800833a:	2300      	movs	r3, #0
 800833c:	220a      	movs	r2, #10
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f922 	bl	8008588 <__multadd>
 8008344:	45b8      	cmp	r8, r7
 8008346:	4682      	mov	sl, r0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	f04f 020a 	mov.w	r2, #10
 8008350:	4641      	mov	r1, r8
 8008352:	4620      	mov	r0, r4
 8008354:	d107      	bne.n	8008366 <_dtoa_r+0xb1e>
 8008356:	f000 f917 	bl	8008588 <__multadd>
 800835a:	4680      	mov	r8, r0
 800835c:	4607      	mov	r7, r0
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	e775      	b.n	8008252 <_dtoa_r+0xa0a>
 8008366:	f000 f90f 	bl	8008588 <__multadd>
 800836a:	4639      	mov	r1, r7
 800836c:	4680      	mov	r8, r0
 800836e:	2300      	movs	r3, #0
 8008370:	220a      	movs	r2, #10
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f908 	bl	8008588 <__multadd>
 8008378:	4607      	mov	r7, r0
 800837a:	e7f0      	b.n	800835e <_dtoa_r+0xb16>
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	9d00      	ldr	r5, [sp, #0]
 8008382:	4631      	mov	r1, r6
 8008384:	4650      	mov	r0, sl
 8008386:	f7ff f9d7 	bl	8007738 <quorem>
 800838a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800838e:	9b00      	ldr	r3, [sp, #0]
 8008390:	f805 9b01 	strb.w	r9, [r5], #1
 8008394:	1aea      	subs	r2, r5, r3
 8008396:	9b01      	ldr	r3, [sp, #4]
 8008398:	4293      	cmp	r3, r2
 800839a:	dd07      	ble.n	80083ac <_dtoa_r+0xb64>
 800839c:	4651      	mov	r1, sl
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f8f0 	bl	8008588 <__multadd>
 80083a8:	4682      	mov	sl, r0
 80083aa:	e7ea      	b.n	8008382 <_dtoa_r+0xb3a>
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfc8      	it	gt
 80083b2:	461d      	movgt	r5, r3
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	bfd8      	it	le
 80083b8:	2501      	movle	r5, #1
 80083ba:	441d      	add	r5, r3
 80083bc:	f04f 0800 	mov.w	r8, #0
 80083c0:	4651      	mov	r1, sl
 80083c2:	2201      	movs	r2, #1
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fa8d 	bl	80088e4 <__lshift>
 80083ca:	4631      	mov	r1, r6
 80083cc:	4682      	mov	sl, r0
 80083ce:	f000 faf5 	bl	80089bc <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dc96      	bgt.n	8008304 <_dtoa_r+0xabc>
 80083d6:	d102      	bne.n	80083de <_dtoa_r+0xb96>
 80083d8:	f019 0f01 	tst.w	r9, #1
 80083dc:	d192      	bne.n	8008304 <_dtoa_r+0xabc>
 80083de:	462b      	mov	r3, r5
 80083e0:	461d      	mov	r5, r3
 80083e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083e6:	2a30      	cmp	r2, #48	; 0x30
 80083e8:	d0fa      	beq.n	80083e0 <_dtoa_r+0xb98>
 80083ea:	e6dd      	b.n	80081a8 <_dtoa_r+0x960>
 80083ec:	9a00      	ldr	r2, [sp, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d189      	bne.n	8008306 <_dtoa_r+0xabe>
 80083f2:	f10b 0b01 	add.w	fp, fp, #1
 80083f6:	2331      	movs	r3, #49	; 0x31
 80083f8:	e796      	b.n	8008328 <_dtoa_r+0xae0>
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <_dtoa_r+0xbdc>)
 80083fc:	f7ff ba99 	b.w	8007932 <_dtoa_r+0xea>
 8008400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008402:	2b00      	cmp	r3, #0
 8008404:	f47f aa6d 	bne.w	80078e2 <_dtoa_r+0x9a>
 8008408:	4b07      	ldr	r3, [pc, #28]	; (8008428 <_dtoa_r+0xbe0>)
 800840a:	f7ff ba92 	b.w	8007932 <_dtoa_r+0xea>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dcb5      	bgt.n	8008380 <_dtoa_r+0xb38>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	2b02      	cmp	r3, #2
 8008418:	f73f aeb1 	bgt.w	800817e <_dtoa_r+0x936>
 800841c:	e7b0      	b.n	8008380 <_dtoa_r+0xb38>
 800841e:	bf00      	nop
 8008420:	0800b7b0 	.word	0x0800b7b0
 8008424:	0800b6eb 	.word	0x0800b6eb
 8008428:	0800b74b 	.word	0x0800b74b

0800842c <_free_r>:
 800842c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800842e:	2900      	cmp	r1, #0
 8008430:	d044      	beq.n	80084bc <_free_r+0x90>
 8008432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008436:	9001      	str	r0, [sp, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f1a1 0404 	sub.w	r4, r1, #4
 800843e:	bfb8      	it	lt
 8008440:	18e4      	addlt	r4, r4, r3
 8008442:	f7fe fa11 	bl	8006868 <__malloc_lock>
 8008446:	4a1e      	ldr	r2, [pc, #120]	; (80084c0 <_free_r+0x94>)
 8008448:	9801      	ldr	r0, [sp, #4]
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	b933      	cbnz	r3, 800845c <_free_r+0x30>
 800844e:	6063      	str	r3, [r4, #4]
 8008450:	6014      	str	r4, [r2, #0]
 8008452:	b003      	add	sp, #12
 8008454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008458:	f7fe ba0c 	b.w	8006874 <__malloc_unlock>
 800845c:	42a3      	cmp	r3, r4
 800845e:	d908      	bls.n	8008472 <_free_r+0x46>
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1961      	adds	r1, r4, r5
 8008464:	428b      	cmp	r3, r1
 8008466:	bf01      	itttt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	1949      	addeq	r1, r1, r5
 800846e:	6021      	streq	r1, [r4, #0]
 8008470:	e7ed      	b.n	800844e <_free_r+0x22>
 8008472:	461a      	mov	r2, r3
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b10b      	cbz	r3, 800847c <_free_r+0x50>
 8008478:	42a3      	cmp	r3, r4
 800847a:	d9fa      	bls.n	8008472 <_free_r+0x46>
 800847c:	6811      	ldr	r1, [r2, #0]
 800847e:	1855      	adds	r5, r2, r1
 8008480:	42a5      	cmp	r5, r4
 8008482:	d10b      	bne.n	800849c <_free_r+0x70>
 8008484:	6824      	ldr	r4, [r4, #0]
 8008486:	4421      	add	r1, r4
 8008488:	1854      	adds	r4, r2, r1
 800848a:	42a3      	cmp	r3, r4
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	d1e0      	bne.n	8008452 <_free_r+0x26>
 8008490:	681c      	ldr	r4, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	6053      	str	r3, [r2, #4]
 8008496:	440c      	add	r4, r1
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	e7da      	b.n	8008452 <_free_r+0x26>
 800849c:	d902      	bls.n	80084a4 <_free_r+0x78>
 800849e:	230c      	movs	r3, #12
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	e7d6      	b.n	8008452 <_free_r+0x26>
 80084a4:	6825      	ldr	r5, [r4, #0]
 80084a6:	1961      	adds	r1, r4, r5
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf04      	itt	eq
 80084ac:	6819      	ldreq	r1, [r3, #0]
 80084ae:	685b      	ldreq	r3, [r3, #4]
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	bf04      	itt	eq
 80084b4:	1949      	addeq	r1, r1, r5
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	6054      	str	r4, [r2, #4]
 80084ba:	e7ca      	b.n	8008452 <_free_r+0x26>
 80084bc:	b003      	add	sp, #12
 80084be:	bd30      	pop	{r4, r5, pc}
 80084c0:	20000e24 	.word	0x20000e24

080084c4 <_Balloc>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	69c6      	ldr	r6, [r0, #28]
 80084c8:	4604      	mov	r4, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	b976      	cbnz	r6, 80084ec <_Balloc+0x28>
 80084ce:	2010      	movs	r0, #16
 80084d0:	f7fe f922 	bl	8006718 <malloc>
 80084d4:	4602      	mov	r2, r0
 80084d6:	61e0      	str	r0, [r4, #28]
 80084d8:	b920      	cbnz	r0, 80084e4 <_Balloc+0x20>
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <_Balloc+0x78>)
 80084dc:	4818      	ldr	r0, [pc, #96]	; (8008540 <_Balloc+0x7c>)
 80084de:	216b      	movs	r1, #107	; 0x6b
 80084e0:	f7ff f90c 	bl	80076fc <__assert_func>
 80084e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e8:	6006      	str	r6, [r0, #0]
 80084ea:	60c6      	str	r6, [r0, #12]
 80084ec:	69e6      	ldr	r6, [r4, #28]
 80084ee:	68f3      	ldr	r3, [r6, #12]
 80084f0:	b183      	cbz	r3, 8008514 <_Balloc+0x50>
 80084f2:	69e3      	ldr	r3, [r4, #28]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084fa:	b9b8      	cbnz	r0, 800852c <_Balloc+0x68>
 80084fc:	2101      	movs	r1, #1
 80084fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008502:	1d72      	adds	r2, r6, #5
 8008504:	0092      	lsls	r2, r2, #2
 8008506:	4620      	mov	r0, r4
 8008508:	f7fe f8f0 	bl	80066ec <_calloc_r>
 800850c:	b160      	cbz	r0, 8008528 <_Balloc+0x64>
 800850e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008512:	e00e      	b.n	8008532 <_Balloc+0x6e>
 8008514:	2221      	movs	r2, #33	; 0x21
 8008516:	2104      	movs	r1, #4
 8008518:	4620      	mov	r0, r4
 800851a:	f7fe f8e7 	bl	80066ec <_calloc_r>
 800851e:	69e3      	ldr	r3, [r4, #28]
 8008520:	60f0      	str	r0, [r6, #12]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e4      	bne.n	80084f2 <_Balloc+0x2e>
 8008528:	2000      	movs	r0, #0
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	6802      	ldr	r2, [r0, #0]
 800852e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008532:	2300      	movs	r3, #0
 8008534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008538:	e7f7      	b.n	800852a <_Balloc+0x66>
 800853a:	bf00      	nop
 800853c:	0800b66c 	.word	0x0800b66c
 8008540:	0800b7c1 	.word	0x0800b7c1

08008544 <_Bfree>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	69c6      	ldr	r6, [r0, #28]
 8008548:	4605      	mov	r5, r0
 800854a:	460c      	mov	r4, r1
 800854c:	b976      	cbnz	r6, 800856c <_Bfree+0x28>
 800854e:	2010      	movs	r0, #16
 8008550:	f7fe f8e2 	bl	8006718 <malloc>
 8008554:	4602      	mov	r2, r0
 8008556:	61e8      	str	r0, [r5, #28]
 8008558:	b920      	cbnz	r0, 8008564 <_Bfree+0x20>
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <_Bfree+0x3c>)
 800855c:	4809      	ldr	r0, [pc, #36]	; (8008584 <_Bfree+0x40>)
 800855e:	218f      	movs	r1, #143	; 0x8f
 8008560:	f7ff f8cc 	bl	80076fc <__assert_func>
 8008564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008568:	6006      	str	r6, [r0, #0]
 800856a:	60c6      	str	r6, [r0, #12]
 800856c:	b13c      	cbz	r4, 800857e <_Bfree+0x3a>
 800856e:	69eb      	ldr	r3, [r5, #28]
 8008570:	6862      	ldr	r2, [r4, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008578:	6021      	str	r1, [r4, #0]
 800857a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	0800b66c 	.word	0x0800b66c
 8008584:	0800b7c1 	.word	0x0800b7c1

08008588 <__multadd>:
 8008588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	690d      	ldr	r5, [r1, #16]
 800858e:	4607      	mov	r7, r0
 8008590:	460c      	mov	r4, r1
 8008592:	461e      	mov	r6, r3
 8008594:	f101 0c14 	add.w	ip, r1, #20
 8008598:	2000      	movs	r0, #0
 800859a:	f8dc 3000 	ldr.w	r3, [ip]
 800859e:	b299      	uxth	r1, r3
 80085a0:	fb02 6101 	mla	r1, r2, r1, r6
 80085a4:	0c1e      	lsrs	r6, r3, #16
 80085a6:	0c0b      	lsrs	r3, r1, #16
 80085a8:	fb02 3306 	mla	r3, r2, r6, r3
 80085ac:	b289      	uxth	r1, r1
 80085ae:	3001      	adds	r0, #1
 80085b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085b4:	4285      	cmp	r5, r0
 80085b6:	f84c 1b04 	str.w	r1, [ip], #4
 80085ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085be:	dcec      	bgt.n	800859a <__multadd+0x12>
 80085c0:	b30e      	cbz	r6, 8008606 <__multadd+0x7e>
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dc19      	bgt.n	80085fc <__multadd+0x74>
 80085c8:	6861      	ldr	r1, [r4, #4]
 80085ca:	4638      	mov	r0, r7
 80085cc:	3101      	adds	r1, #1
 80085ce:	f7ff ff79 	bl	80084c4 <_Balloc>
 80085d2:	4680      	mov	r8, r0
 80085d4:	b928      	cbnz	r0, 80085e2 <__multadd+0x5a>
 80085d6:	4602      	mov	r2, r0
 80085d8:	4b0c      	ldr	r3, [pc, #48]	; (800860c <__multadd+0x84>)
 80085da:	480d      	ldr	r0, [pc, #52]	; (8008610 <__multadd+0x88>)
 80085dc:	21ba      	movs	r1, #186	; 0xba
 80085de:	f7ff f88d 	bl	80076fc <__assert_func>
 80085e2:	6922      	ldr	r2, [r4, #16]
 80085e4:	3202      	adds	r2, #2
 80085e6:	f104 010c 	add.w	r1, r4, #12
 80085ea:	0092      	lsls	r2, r2, #2
 80085ec:	300c      	adds	r0, #12
 80085ee:	f7ff f877 	bl	80076e0 <memcpy>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4638      	mov	r0, r7
 80085f6:	f7ff ffa5 	bl	8008544 <_Bfree>
 80085fa:	4644      	mov	r4, r8
 80085fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008600:	3501      	adds	r5, #1
 8008602:	615e      	str	r6, [r3, #20]
 8008604:	6125      	str	r5, [r4, #16]
 8008606:	4620      	mov	r0, r4
 8008608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860c:	0800b7b0 	.word	0x0800b7b0
 8008610:	0800b7c1 	.word	0x0800b7c1

08008614 <__hi0bits>:
 8008614:	0c03      	lsrs	r3, r0, #16
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	b9d3      	cbnz	r3, 8008650 <__hi0bits+0x3c>
 800861a:	0400      	lsls	r0, r0, #16
 800861c:	2310      	movs	r3, #16
 800861e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008622:	bf04      	itt	eq
 8008624:	0200      	lsleq	r0, r0, #8
 8008626:	3308      	addeq	r3, #8
 8008628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800862c:	bf04      	itt	eq
 800862e:	0100      	lsleq	r0, r0, #4
 8008630:	3304      	addeq	r3, #4
 8008632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008636:	bf04      	itt	eq
 8008638:	0080      	lsleq	r0, r0, #2
 800863a:	3302      	addeq	r3, #2
 800863c:	2800      	cmp	r0, #0
 800863e:	db05      	blt.n	800864c <__hi0bits+0x38>
 8008640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008644:	f103 0301 	add.w	r3, r3, #1
 8008648:	bf08      	it	eq
 800864a:	2320      	moveq	r3, #32
 800864c:	4618      	mov	r0, r3
 800864e:	4770      	bx	lr
 8008650:	2300      	movs	r3, #0
 8008652:	e7e4      	b.n	800861e <__hi0bits+0xa>

08008654 <__lo0bits>:
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	f013 0207 	ands.w	r2, r3, #7
 800865a:	d00c      	beq.n	8008676 <__lo0bits+0x22>
 800865c:	07d9      	lsls	r1, r3, #31
 800865e:	d422      	bmi.n	80086a6 <__lo0bits+0x52>
 8008660:	079a      	lsls	r2, r3, #30
 8008662:	bf49      	itett	mi
 8008664:	085b      	lsrmi	r3, r3, #1
 8008666:	089b      	lsrpl	r3, r3, #2
 8008668:	6003      	strmi	r3, [r0, #0]
 800866a:	2201      	movmi	r2, #1
 800866c:	bf5c      	itt	pl
 800866e:	6003      	strpl	r3, [r0, #0]
 8008670:	2202      	movpl	r2, #2
 8008672:	4610      	mov	r0, r2
 8008674:	4770      	bx	lr
 8008676:	b299      	uxth	r1, r3
 8008678:	b909      	cbnz	r1, 800867e <__lo0bits+0x2a>
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	2210      	movs	r2, #16
 800867e:	b2d9      	uxtb	r1, r3
 8008680:	b909      	cbnz	r1, 8008686 <__lo0bits+0x32>
 8008682:	3208      	adds	r2, #8
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	0719      	lsls	r1, r3, #28
 8008688:	bf04      	itt	eq
 800868a:	091b      	lsreq	r3, r3, #4
 800868c:	3204      	addeq	r2, #4
 800868e:	0799      	lsls	r1, r3, #30
 8008690:	bf04      	itt	eq
 8008692:	089b      	lsreq	r3, r3, #2
 8008694:	3202      	addeq	r2, #2
 8008696:	07d9      	lsls	r1, r3, #31
 8008698:	d403      	bmi.n	80086a2 <__lo0bits+0x4e>
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	f102 0201 	add.w	r2, r2, #1
 80086a0:	d003      	beq.n	80086aa <__lo0bits+0x56>
 80086a2:	6003      	str	r3, [r0, #0]
 80086a4:	e7e5      	b.n	8008672 <__lo0bits+0x1e>
 80086a6:	2200      	movs	r2, #0
 80086a8:	e7e3      	b.n	8008672 <__lo0bits+0x1e>
 80086aa:	2220      	movs	r2, #32
 80086ac:	e7e1      	b.n	8008672 <__lo0bits+0x1e>
	...

080086b0 <__i2b>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	2101      	movs	r1, #1
 80086b6:	f7ff ff05 	bl	80084c4 <_Balloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	b928      	cbnz	r0, 80086ca <__i2b+0x1a>
 80086be:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <__i2b+0x24>)
 80086c0:	4805      	ldr	r0, [pc, #20]	; (80086d8 <__i2b+0x28>)
 80086c2:	f240 1145 	movw	r1, #325	; 0x145
 80086c6:	f7ff f819 	bl	80076fc <__assert_func>
 80086ca:	2301      	movs	r3, #1
 80086cc:	6144      	str	r4, [r0, #20]
 80086ce:	6103      	str	r3, [r0, #16]
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	bf00      	nop
 80086d4:	0800b7b0 	.word	0x0800b7b0
 80086d8:	0800b7c1 	.word	0x0800b7c1

080086dc <__multiply>:
 80086dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	4691      	mov	r9, r2
 80086e2:	690a      	ldr	r2, [r1, #16]
 80086e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bfb8      	it	lt
 80086ec:	460b      	movlt	r3, r1
 80086ee:	460c      	mov	r4, r1
 80086f0:	bfbc      	itt	lt
 80086f2:	464c      	movlt	r4, r9
 80086f4:	4699      	movlt	r9, r3
 80086f6:	6927      	ldr	r7, [r4, #16]
 80086f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	6861      	ldr	r1, [r4, #4]
 8008700:	eb07 060a 	add.w	r6, r7, sl
 8008704:	42b3      	cmp	r3, r6
 8008706:	b085      	sub	sp, #20
 8008708:	bfb8      	it	lt
 800870a:	3101      	addlt	r1, #1
 800870c:	f7ff feda 	bl	80084c4 <_Balloc>
 8008710:	b930      	cbnz	r0, 8008720 <__multiply+0x44>
 8008712:	4602      	mov	r2, r0
 8008714:	4b44      	ldr	r3, [pc, #272]	; (8008828 <__multiply+0x14c>)
 8008716:	4845      	ldr	r0, [pc, #276]	; (800882c <__multiply+0x150>)
 8008718:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800871c:	f7fe ffee 	bl	80076fc <__assert_func>
 8008720:	f100 0514 	add.w	r5, r0, #20
 8008724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008728:	462b      	mov	r3, r5
 800872a:	2200      	movs	r2, #0
 800872c:	4543      	cmp	r3, r8
 800872e:	d321      	bcc.n	8008774 <__multiply+0x98>
 8008730:	f104 0314 	add.w	r3, r4, #20
 8008734:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008738:	f109 0314 	add.w	r3, r9, #20
 800873c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008740:	9202      	str	r2, [sp, #8]
 8008742:	1b3a      	subs	r2, r7, r4
 8008744:	3a15      	subs	r2, #21
 8008746:	f022 0203 	bic.w	r2, r2, #3
 800874a:	3204      	adds	r2, #4
 800874c:	f104 0115 	add.w	r1, r4, #21
 8008750:	428f      	cmp	r7, r1
 8008752:	bf38      	it	cc
 8008754:	2204      	movcc	r2, #4
 8008756:	9201      	str	r2, [sp, #4]
 8008758:	9a02      	ldr	r2, [sp, #8]
 800875a:	9303      	str	r3, [sp, #12]
 800875c:	429a      	cmp	r2, r3
 800875e:	d80c      	bhi.n	800877a <__multiply+0x9e>
 8008760:	2e00      	cmp	r6, #0
 8008762:	dd03      	ble.n	800876c <__multiply+0x90>
 8008764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008768:	2b00      	cmp	r3, #0
 800876a:	d05b      	beq.n	8008824 <__multiply+0x148>
 800876c:	6106      	str	r6, [r0, #16]
 800876e:	b005      	add	sp, #20
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	f843 2b04 	str.w	r2, [r3], #4
 8008778:	e7d8      	b.n	800872c <__multiply+0x50>
 800877a:	f8b3 a000 	ldrh.w	sl, [r3]
 800877e:	f1ba 0f00 	cmp.w	sl, #0
 8008782:	d024      	beq.n	80087ce <__multiply+0xf2>
 8008784:	f104 0e14 	add.w	lr, r4, #20
 8008788:	46a9      	mov	r9, r5
 800878a:	f04f 0c00 	mov.w	ip, #0
 800878e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008792:	f8d9 1000 	ldr.w	r1, [r9]
 8008796:	fa1f fb82 	uxth.w	fp, r2
 800879a:	b289      	uxth	r1, r1
 800879c:	fb0a 110b 	mla	r1, sl, fp, r1
 80087a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087a4:	f8d9 2000 	ldr.w	r2, [r9]
 80087a8:	4461      	add	r1, ip
 80087aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80087b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087b6:	b289      	uxth	r1, r1
 80087b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087bc:	4577      	cmp	r7, lr
 80087be:	f849 1b04 	str.w	r1, [r9], #4
 80087c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087c6:	d8e2      	bhi.n	800878e <__multiply+0xb2>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	f845 c002 	str.w	ip, [r5, r2]
 80087ce:	9a03      	ldr	r2, [sp, #12]
 80087d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087d4:	3304      	adds	r3, #4
 80087d6:	f1b9 0f00 	cmp.w	r9, #0
 80087da:	d021      	beq.n	8008820 <__multiply+0x144>
 80087dc:	6829      	ldr	r1, [r5, #0]
 80087de:	f104 0c14 	add.w	ip, r4, #20
 80087e2:	46ae      	mov	lr, r5
 80087e4:	f04f 0a00 	mov.w	sl, #0
 80087e8:	f8bc b000 	ldrh.w	fp, [ip]
 80087ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087f0:	fb09 220b 	mla	r2, r9, fp, r2
 80087f4:	4452      	add	r2, sl
 80087f6:	b289      	uxth	r1, r1
 80087f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008800:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008808:	f8be 1000 	ldrh.w	r1, [lr]
 800880c:	fb09 110a 	mla	r1, r9, sl, r1
 8008810:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008814:	4567      	cmp	r7, ip
 8008816:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800881a:	d8e5      	bhi.n	80087e8 <__multiply+0x10c>
 800881c:	9a01      	ldr	r2, [sp, #4]
 800881e:	50a9      	str	r1, [r5, r2]
 8008820:	3504      	adds	r5, #4
 8008822:	e799      	b.n	8008758 <__multiply+0x7c>
 8008824:	3e01      	subs	r6, #1
 8008826:	e79b      	b.n	8008760 <__multiply+0x84>
 8008828:	0800b7b0 	.word	0x0800b7b0
 800882c:	0800b7c1 	.word	0x0800b7c1

08008830 <__pow5mult>:
 8008830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008834:	4615      	mov	r5, r2
 8008836:	f012 0203 	ands.w	r2, r2, #3
 800883a:	4606      	mov	r6, r0
 800883c:	460f      	mov	r7, r1
 800883e:	d007      	beq.n	8008850 <__pow5mult+0x20>
 8008840:	4c25      	ldr	r4, [pc, #148]	; (80088d8 <__pow5mult+0xa8>)
 8008842:	3a01      	subs	r2, #1
 8008844:	2300      	movs	r3, #0
 8008846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800884a:	f7ff fe9d 	bl	8008588 <__multadd>
 800884e:	4607      	mov	r7, r0
 8008850:	10ad      	asrs	r5, r5, #2
 8008852:	d03d      	beq.n	80088d0 <__pow5mult+0xa0>
 8008854:	69f4      	ldr	r4, [r6, #28]
 8008856:	b97c      	cbnz	r4, 8008878 <__pow5mult+0x48>
 8008858:	2010      	movs	r0, #16
 800885a:	f7fd ff5d 	bl	8006718 <malloc>
 800885e:	4602      	mov	r2, r0
 8008860:	61f0      	str	r0, [r6, #28]
 8008862:	b928      	cbnz	r0, 8008870 <__pow5mult+0x40>
 8008864:	4b1d      	ldr	r3, [pc, #116]	; (80088dc <__pow5mult+0xac>)
 8008866:	481e      	ldr	r0, [pc, #120]	; (80088e0 <__pow5mult+0xb0>)
 8008868:	f240 11b3 	movw	r1, #435	; 0x1b3
 800886c:	f7fe ff46 	bl	80076fc <__assert_func>
 8008870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008874:	6004      	str	r4, [r0, #0]
 8008876:	60c4      	str	r4, [r0, #12]
 8008878:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800887c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008880:	b94c      	cbnz	r4, 8008896 <__pow5mult+0x66>
 8008882:	f240 2171 	movw	r1, #625	; 0x271
 8008886:	4630      	mov	r0, r6
 8008888:	f7ff ff12 	bl	80086b0 <__i2b>
 800888c:	2300      	movs	r3, #0
 800888e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008892:	4604      	mov	r4, r0
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	07eb      	lsls	r3, r5, #31
 800889c:	d50a      	bpl.n	80088b4 <__pow5mult+0x84>
 800889e:	4639      	mov	r1, r7
 80088a0:	4622      	mov	r2, r4
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7ff ff1a 	bl	80086dc <__multiply>
 80088a8:	4639      	mov	r1, r7
 80088aa:	4680      	mov	r8, r0
 80088ac:	4630      	mov	r0, r6
 80088ae:	f7ff fe49 	bl	8008544 <_Bfree>
 80088b2:	4647      	mov	r7, r8
 80088b4:	106d      	asrs	r5, r5, #1
 80088b6:	d00b      	beq.n	80088d0 <__pow5mult+0xa0>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	b938      	cbnz	r0, 80088cc <__pow5mult+0x9c>
 80088bc:	4622      	mov	r2, r4
 80088be:	4621      	mov	r1, r4
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff ff0b 	bl	80086dc <__multiply>
 80088c6:	6020      	str	r0, [r4, #0]
 80088c8:	f8c0 9000 	str.w	r9, [r0]
 80088cc:	4604      	mov	r4, r0
 80088ce:	e7e4      	b.n	800889a <__pow5mult+0x6a>
 80088d0:	4638      	mov	r0, r7
 80088d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d6:	bf00      	nop
 80088d8:	0800b910 	.word	0x0800b910
 80088dc:	0800b66c 	.word	0x0800b66c
 80088e0:	0800b7c1 	.word	0x0800b7c1

080088e4 <__lshift>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	6849      	ldr	r1, [r1, #4]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	4607      	mov	r7, r0
 80088f6:	4691      	mov	r9, r2
 80088f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088fc:	f108 0601 	add.w	r6, r8, #1
 8008900:	42b3      	cmp	r3, r6
 8008902:	db0b      	blt.n	800891c <__lshift+0x38>
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fddd 	bl	80084c4 <_Balloc>
 800890a:	4605      	mov	r5, r0
 800890c:	b948      	cbnz	r0, 8008922 <__lshift+0x3e>
 800890e:	4602      	mov	r2, r0
 8008910:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <__lshift+0xd0>)
 8008912:	4829      	ldr	r0, [pc, #164]	; (80089b8 <__lshift+0xd4>)
 8008914:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008918:	f7fe fef0 	bl	80076fc <__assert_func>
 800891c:	3101      	adds	r1, #1
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	e7ee      	b.n	8008900 <__lshift+0x1c>
 8008922:	2300      	movs	r3, #0
 8008924:	f100 0114 	add.w	r1, r0, #20
 8008928:	f100 0210 	add.w	r2, r0, #16
 800892c:	4618      	mov	r0, r3
 800892e:	4553      	cmp	r3, sl
 8008930:	db33      	blt.n	800899a <__lshift+0xb6>
 8008932:	6920      	ldr	r0, [r4, #16]
 8008934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008938:	f104 0314 	add.w	r3, r4, #20
 800893c:	f019 091f 	ands.w	r9, r9, #31
 8008940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008948:	d02b      	beq.n	80089a2 <__lshift+0xbe>
 800894a:	f1c9 0e20 	rsb	lr, r9, #32
 800894e:	468a      	mov	sl, r1
 8008950:	2200      	movs	r2, #0
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	fa00 f009 	lsl.w	r0, r0, r9
 8008958:	4310      	orrs	r0, r2
 800895a:	f84a 0b04 	str.w	r0, [sl], #4
 800895e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008962:	459c      	cmp	ip, r3
 8008964:	fa22 f20e 	lsr.w	r2, r2, lr
 8008968:	d8f3      	bhi.n	8008952 <__lshift+0x6e>
 800896a:	ebac 0304 	sub.w	r3, ip, r4
 800896e:	3b15      	subs	r3, #21
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	3304      	adds	r3, #4
 8008976:	f104 0015 	add.w	r0, r4, #21
 800897a:	4584      	cmp	ip, r0
 800897c:	bf38      	it	cc
 800897e:	2304      	movcc	r3, #4
 8008980:	50ca      	str	r2, [r1, r3]
 8008982:	b10a      	cbz	r2, 8008988 <__lshift+0xa4>
 8008984:	f108 0602 	add.w	r6, r8, #2
 8008988:	3e01      	subs	r6, #1
 800898a:	4638      	mov	r0, r7
 800898c:	612e      	str	r6, [r5, #16]
 800898e:	4621      	mov	r1, r4
 8008990:	f7ff fdd8 	bl	8008544 <_Bfree>
 8008994:	4628      	mov	r0, r5
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	f842 0f04 	str.w	r0, [r2, #4]!
 800899e:	3301      	adds	r3, #1
 80089a0:	e7c5      	b.n	800892e <__lshift+0x4a>
 80089a2:	3904      	subs	r1, #4
 80089a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089ac:	459c      	cmp	ip, r3
 80089ae:	d8f9      	bhi.n	80089a4 <__lshift+0xc0>
 80089b0:	e7ea      	b.n	8008988 <__lshift+0xa4>
 80089b2:	bf00      	nop
 80089b4:	0800b7b0 	.word	0x0800b7b0
 80089b8:	0800b7c1 	.word	0x0800b7c1

080089bc <__mcmp>:
 80089bc:	b530      	push	{r4, r5, lr}
 80089be:	6902      	ldr	r2, [r0, #16]
 80089c0:	690c      	ldr	r4, [r1, #16]
 80089c2:	1b12      	subs	r2, r2, r4
 80089c4:	d10e      	bne.n	80089e4 <__mcmp+0x28>
 80089c6:	f100 0314 	add.w	r3, r0, #20
 80089ca:	3114      	adds	r1, #20
 80089cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089dc:	42a5      	cmp	r5, r4
 80089de:	d003      	beq.n	80089e8 <__mcmp+0x2c>
 80089e0:	d305      	bcc.n	80089ee <__mcmp+0x32>
 80089e2:	2201      	movs	r2, #1
 80089e4:	4610      	mov	r0, r2
 80089e6:	bd30      	pop	{r4, r5, pc}
 80089e8:	4283      	cmp	r3, r0
 80089ea:	d3f3      	bcc.n	80089d4 <__mcmp+0x18>
 80089ec:	e7fa      	b.n	80089e4 <__mcmp+0x28>
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	e7f7      	b.n	80089e4 <__mcmp+0x28>

080089f4 <__mdiff>:
 80089f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	4606      	mov	r6, r0
 80089fc:	4611      	mov	r1, r2
 80089fe:	4620      	mov	r0, r4
 8008a00:	4690      	mov	r8, r2
 8008a02:	f7ff ffdb 	bl	80089bc <__mcmp>
 8008a06:	1e05      	subs	r5, r0, #0
 8008a08:	d110      	bne.n	8008a2c <__mdiff+0x38>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff fd59 	bl	80084c4 <_Balloc>
 8008a12:	b930      	cbnz	r0, 8008a22 <__mdiff+0x2e>
 8008a14:	4b3a      	ldr	r3, [pc, #232]	; (8008b00 <__mdiff+0x10c>)
 8008a16:	4602      	mov	r2, r0
 8008a18:	f240 2137 	movw	r1, #567	; 0x237
 8008a1c:	4839      	ldr	r0, [pc, #228]	; (8008b04 <__mdiff+0x110>)
 8008a1e:	f7fe fe6d 	bl	80076fc <__assert_func>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	bfa4      	itt	ge
 8008a2e:	4643      	movge	r3, r8
 8008a30:	46a0      	movge	r8, r4
 8008a32:	4630      	mov	r0, r6
 8008a34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a38:	bfa6      	itte	ge
 8008a3a:	461c      	movge	r4, r3
 8008a3c:	2500      	movge	r5, #0
 8008a3e:	2501      	movlt	r5, #1
 8008a40:	f7ff fd40 	bl	80084c4 <_Balloc>
 8008a44:	b920      	cbnz	r0, 8008a50 <__mdiff+0x5c>
 8008a46:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <__mdiff+0x10c>)
 8008a48:	4602      	mov	r2, r0
 8008a4a:	f240 2145 	movw	r1, #581	; 0x245
 8008a4e:	e7e5      	b.n	8008a1c <__mdiff+0x28>
 8008a50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a54:	6926      	ldr	r6, [r4, #16]
 8008a56:	60c5      	str	r5, [r0, #12]
 8008a58:	f104 0914 	add.w	r9, r4, #20
 8008a5c:	f108 0514 	add.w	r5, r8, #20
 8008a60:	f100 0e14 	add.w	lr, r0, #20
 8008a64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a6c:	f108 0210 	add.w	r2, r8, #16
 8008a70:	46f2      	mov	sl, lr
 8008a72:	2100      	movs	r1, #0
 8008a74:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a7c:	fa11 f88b 	uxtah	r8, r1, fp
 8008a80:	b299      	uxth	r1, r3
 8008a82:	0c1b      	lsrs	r3, r3, #16
 8008a84:	eba8 0801 	sub.w	r8, r8, r1
 8008a88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a90:	fa1f f888 	uxth.w	r8, r8
 8008a94:	1419      	asrs	r1, r3, #16
 8008a96:	454e      	cmp	r6, r9
 8008a98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a9c:	f84a 3b04 	str.w	r3, [sl], #4
 8008aa0:	d8e8      	bhi.n	8008a74 <__mdiff+0x80>
 8008aa2:	1b33      	subs	r3, r6, r4
 8008aa4:	3b15      	subs	r3, #21
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	3304      	adds	r3, #4
 8008aac:	3415      	adds	r4, #21
 8008aae:	42a6      	cmp	r6, r4
 8008ab0:	bf38      	it	cc
 8008ab2:	2304      	movcc	r3, #4
 8008ab4:	441d      	add	r5, r3
 8008ab6:	4473      	add	r3, lr
 8008ab8:	469e      	mov	lr, r3
 8008aba:	462e      	mov	r6, r5
 8008abc:	4566      	cmp	r6, ip
 8008abe:	d30e      	bcc.n	8008ade <__mdiff+0xea>
 8008ac0:	f10c 0203 	add.w	r2, ip, #3
 8008ac4:	1b52      	subs	r2, r2, r5
 8008ac6:	f022 0203 	bic.w	r2, r2, #3
 8008aca:	3d03      	subs	r5, #3
 8008acc:	45ac      	cmp	ip, r5
 8008ace:	bf38      	it	cc
 8008ad0:	2200      	movcc	r2, #0
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ad8:	b17a      	cbz	r2, 8008afa <__mdiff+0x106>
 8008ada:	6107      	str	r7, [r0, #16]
 8008adc:	e7a4      	b.n	8008a28 <__mdiff+0x34>
 8008ade:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ae2:	fa11 f288 	uxtah	r2, r1, r8
 8008ae6:	1414      	asrs	r4, r2, #16
 8008ae8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008aec:	b292      	uxth	r2, r2
 8008aee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008af2:	f84e 2b04 	str.w	r2, [lr], #4
 8008af6:	1421      	asrs	r1, r4, #16
 8008af8:	e7e0      	b.n	8008abc <__mdiff+0xc8>
 8008afa:	3f01      	subs	r7, #1
 8008afc:	e7ea      	b.n	8008ad4 <__mdiff+0xe0>
 8008afe:	bf00      	nop
 8008b00:	0800b7b0 	.word	0x0800b7b0
 8008b04:	0800b7c1 	.word	0x0800b7c1

08008b08 <__d2b>:
 8008b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	2101      	movs	r1, #1
 8008b10:	ec59 8b10 	vmov	r8, r9, d0
 8008b14:	4616      	mov	r6, r2
 8008b16:	f7ff fcd5 	bl	80084c4 <_Balloc>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b930      	cbnz	r0, 8008b2c <__d2b+0x24>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <__d2b+0xac>)
 8008b22:	4825      	ldr	r0, [pc, #148]	; (8008bb8 <__d2b+0xb0>)
 8008b24:	f240 310f 	movw	r1, #783	; 0x30f
 8008b28:	f7fe fde8 	bl	80076fc <__assert_func>
 8008b2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b34:	bb2d      	cbnz	r5, 8008b82 <__d2b+0x7a>
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	f1b8 0300 	subs.w	r3, r8, #0
 8008b3c:	d026      	beq.n	8008b8c <__d2b+0x84>
 8008b3e:	4668      	mov	r0, sp
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	f7ff fd87 	bl	8008654 <__lo0bits>
 8008b46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b4a:	b1e8      	cbz	r0, 8008b88 <__d2b+0x80>
 8008b4c:	f1c0 0320 	rsb	r3, r0, #32
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	430b      	orrs	r3, r1
 8008b56:	40c2      	lsrs	r2, r0
 8008b58:	6163      	str	r3, [r4, #20]
 8008b5a:	9201      	str	r2, [sp, #4]
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	61a3      	str	r3, [r4, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bf14      	ite	ne
 8008b64:	2202      	movne	r2, #2
 8008b66:	2201      	moveq	r2, #1
 8008b68:	6122      	str	r2, [r4, #16]
 8008b6a:	b1bd      	cbz	r5, 8008b9c <__d2b+0x94>
 8008b6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b70:	4405      	add	r5, r0
 8008b72:	603d      	str	r5, [r7, #0]
 8008b74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b78:	6030      	str	r0, [r6, #0]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	b003      	add	sp, #12
 8008b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b86:	e7d6      	b.n	8008b36 <__d2b+0x2e>
 8008b88:	6161      	str	r1, [r4, #20]
 8008b8a:	e7e7      	b.n	8008b5c <__d2b+0x54>
 8008b8c:	a801      	add	r0, sp, #4
 8008b8e:	f7ff fd61 	bl	8008654 <__lo0bits>
 8008b92:	9b01      	ldr	r3, [sp, #4]
 8008b94:	6163      	str	r3, [r4, #20]
 8008b96:	3020      	adds	r0, #32
 8008b98:	2201      	movs	r2, #1
 8008b9a:	e7e5      	b.n	8008b68 <__d2b+0x60>
 8008b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ba4:	6038      	str	r0, [r7, #0]
 8008ba6:	6918      	ldr	r0, [r3, #16]
 8008ba8:	f7ff fd34 	bl	8008614 <__hi0bits>
 8008bac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bb0:	e7e2      	b.n	8008b78 <__d2b+0x70>
 8008bb2:	bf00      	nop
 8008bb4:	0800b7b0 	.word	0x0800b7b0
 8008bb8:	0800b7c1 	.word	0x0800b7c1

08008bbc <__sfputc_r>:
 8008bbc:	6893      	ldr	r3, [r2, #8]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	b410      	push	{r4}
 8008bc4:	6093      	str	r3, [r2, #8]
 8008bc6:	da08      	bge.n	8008bda <__sfputc_r+0x1e>
 8008bc8:	6994      	ldr	r4, [r2, #24]
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	db01      	blt.n	8008bd2 <__sfputc_r+0x16>
 8008bce:	290a      	cmp	r1, #10
 8008bd0:	d103      	bne.n	8008bda <__sfputc_r+0x1e>
 8008bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd6:	f7fe bc60 	b.w	800749a <__swbuf_r>
 8008bda:	6813      	ldr	r3, [r2, #0]
 8008bdc:	1c58      	adds	r0, r3, #1
 8008bde:	6010      	str	r0, [r2, #0]
 8008be0:	7019      	strb	r1, [r3, #0]
 8008be2:	4608      	mov	r0, r1
 8008be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <__sfputs_r>:
 8008bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bec:	4606      	mov	r6, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	18d5      	adds	r5, r2, r3
 8008bf4:	42ac      	cmp	r4, r5
 8008bf6:	d101      	bne.n	8008bfc <__sfputs_r+0x12>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e007      	b.n	8008c0c <__sfputs_r+0x22>
 8008bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c00:	463a      	mov	r2, r7
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ffda 	bl	8008bbc <__sfputc_r>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d1f3      	bne.n	8008bf4 <__sfputs_r+0xa>
 8008c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c10 <_vfiprintf_r>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	460d      	mov	r5, r1
 8008c16:	b09d      	sub	sp, #116	; 0x74
 8008c18:	4614      	mov	r4, r2
 8008c1a:	4698      	mov	r8, r3
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	b118      	cbz	r0, 8008c28 <_vfiprintf_r+0x18>
 8008c20:	6a03      	ldr	r3, [r0, #32]
 8008c22:	b90b      	cbnz	r3, 8008c28 <_vfiprintf_r+0x18>
 8008c24:	f7fe fb4a 	bl	80072bc <__sinit>
 8008c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c2a:	07d9      	lsls	r1, r3, #31
 8008c2c:	d405      	bmi.n	8008c3a <_vfiprintf_r+0x2a>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	059a      	lsls	r2, r3, #22
 8008c32:	d402      	bmi.n	8008c3a <_vfiprintf_r+0x2a>
 8008c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c36:	f7fe fd51 	bl	80076dc <__retarget_lock_acquire_recursive>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	071b      	lsls	r3, r3, #28
 8008c3e:	d501      	bpl.n	8008c44 <_vfiprintf_r+0x34>
 8008c40:	692b      	ldr	r3, [r5, #16]
 8008c42:	b99b      	cbnz	r3, 8008c6c <_vfiprintf_r+0x5c>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7fe fc64 	bl	8007514 <__swsetup_r>
 8008c4c:	b170      	cbz	r0, 8008c6c <_vfiprintf_r+0x5c>
 8008c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c50:	07dc      	lsls	r4, r3, #31
 8008c52:	d504      	bpl.n	8008c5e <_vfiprintf_r+0x4e>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	b01d      	add	sp, #116	; 0x74
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	0598      	lsls	r0, r3, #22
 8008c62:	d4f7      	bmi.n	8008c54 <_vfiprintf_r+0x44>
 8008c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c66:	f7fe fd3a 	bl	80076de <__retarget_lock_release_recursive>
 8008c6a:	e7f3      	b.n	8008c54 <_vfiprintf_r+0x44>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	2320      	movs	r3, #32
 8008c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c7a:	2330      	movs	r3, #48	; 0x30
 8008c7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e30 <_vfiprintf_r+0x220>
 8008c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c84:	f04f 0901 	mov.w	r9, #1
 8008c88:	4623      	mov	r3, r4
 8008c8a:	469a      	mov	sl, r3
 8008c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c90:	b10a      	cbz	r2, 8008c96 <_vfiprintf_r+0x86>
 8008c92:	2a25      	cmp	r2, #37	; 0x25
 8008c94:	d1f9      	bne.n	8008c8a <_vfiprintf_r+0x7a>
 8008c96:	ebba 0b04 	subs.w	fp, sl, r4
 8008c9a:	d00b      	beq.n	8008cb4 <_vfiprintf_r+0xa4>
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff ffa1 	bl	8008bea <__sfputs_r>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f000 80a9 	beq.w	8008e00 <_vfiprintf_r+0x1f0>
 8008cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb0:	445a      	add	r2, fp
 8008cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80a1 	beq.w	8008e00 <_vfiprintf_r+0x1f0>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cc8:	f10a 0a01 	add.w	sl, sl, #1
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	9307      	str	r3, [sp, #28]
 8008cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd6:	4654      	mov	r4, sl
 8008cd8:	2205      	movs	r2, #5
 8008cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cde:	4854      	ldr	r0, [pc, #336]	; (8008e30 <_vfiprintf_r+0x220>)
 8008ce0:	f7f7 fa76 	bl	80001d0 <memchr>
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	b9d8      	cbnz	r0, 8008d20 <_vfiprintf_r+0x110>
 8008ce8:	06d1      	lsls	r1, r2, #27
 8008cea:	bf44      	itt	mi
 8008cec:	2320      	movmi	r3, #32
 8008cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf2:	0713      	lsls	r3, r2, #28
 8008cf4:	bf44      	itt	mi
 8008cf6:	232b      	movmi	r3, #43	; 0x2b
 8008cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008d00:	2b2a      	cmp	r3, #42	; 0x2a
 8008d02:	d015      	beq.n	8008d30 <_vfiprintf_r+0x120>
 8008d04:	9a07      	ldr	r2, [sp, #28]
 8008d06:	4654      	mov	r4, sl
 8008d08:	2000      	movs	r0, #0
 8008d0a:	f04f 0c0a 	mov.w	ip, #10
 8008d0e:	4621      	mov	r1, r4
 8008d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d14:	3b30      	subs	r3, #48	; 0x30
 8008d16:	2b09      	cmp	r3, #9
 8008d18:	d94d      	bls.n	8008db6 <_vfiprintf_r+0x1a6>
 8008d1a:	b1b0      	cbz	r0, 8008d4a <_vfiprintf_r+0x13a>
 8008d1c:	9207      	str	r2, [sp, #28]
 8008d1e:	e014      	b.n	8008d4a <_vfiprintf_r+0x13a>
 8008d20:	eba0 0308 	sub.w	r3, r0, r8
 8008d24:	fa09 f303 	lsl.w	r3, r9, r3
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	46a2      	mov	sl, r4
 8008d2e:	e7d2      	b.n	8008cd6 <_vfiprintf_r+0xc6>
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	1d19      	adds	r1, r3, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	9103      	str	r1, [sp, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bfbb      	ittet	lt
 8008d3c:	425b      	neglt	r3, r3
 8008d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d42:	9307      	strge	r3, [sp, #28]
 8008d44:	9307      	strlt	r3, [sp, #28]
 8008d46:	bfb8      	it	lt
 8008d48:	9204      	strlt	r2, [sp, #16]
 8008d4a:	7823      	ldrb	r3, [r4, #0]
 8008d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d4e:	d10c      	bne.n	8008d6a <_vfiprintf_r+0x15a>
 8008d50:	7863      	ldrb	r3, [r4, #1]
 8008d52:	2b2a      	cmp	r3, #42	; 0x2a
 8008d54:	d134      	bne.n	8008dc0 <_vfiprintf_r+0x1b0>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	9203      	str	r2, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfb8      	it	lt
 8008d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d66:	3402      	adds	r4, #2
 8008d68:	9305      	str	r3, [sp, #20]
 8008d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008e40 <_vfiprintf_r+0x230>
 8008d6e:	7821      	ldrb	r1, [r4, #0]
 8008d70:	2203      	movs	r2, #3
 8008d72:	4650      	mov	r0, sl
 8008d74:	f7f7 fa2c 	bl	80001d0 <memchr>
 8008d78:	b138      	cbz	r0, 8008d8a <_vfiprintf_r+0x17a>
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	eba0 000a 	sub.w	r0, r0, sl
 8008d80:	2240      	movs	r2, #64	; 0x40
 8008d82:	4082      	lsls	r2, r0
 8008d84:	4313      	orrs	r3, r2
 8008d86:	3401      	adds	r4, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8e:	4829      	ldr	r0, [pc, #164]	; (8008e34 <_vfiprintf_r+0x224>)
 8008d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d94:	2206      	movs	r2, #6
 8008d96:	f7f7 fa1b 	bl	80001d0 <memchr>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d03f      	beq.n	8008e1e <_vfiprintf_r+0x20e>
 8008d9e:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <_vfiprintf_r+0x228>)
 8008da0:	bb1b      	cbnz	r3, 8008dea <_vfiprintf_r+0x1da>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	3307      	adds	r3, #7
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	3308      	adds	r3, #8
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db0:	443b      	add	r3, r7
 8008db2:	9309      	str	r3, [sp, #36]	; 0x24
 8008db4:	e768      	b.n	8008c88 <_vfiprintf_r+0x78>
 8008db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dba:	460c      	mov	r4, r1
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	e7a6      	b.n	8008d0e <_vfiprintf_r+0xfe>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	f04f 0c0a 	mov.w	ip, #10
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd2:	3a30      	subs	r2, #48	; 0x30
 8008dd4:	2a09      	cmp	r2, #9
 8008dd6:	d903      	bls.n	8008de0 <_vfiprintf_r+0x1d0>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0c6      	beq.n	8008d6a <_vfiprintf_r+0x15a>
 8008ddc:	9105      	str	r1, [sp, #20]
 8008dde:	e7c4      	b.n	8008d6a <_vfiprintf_r+0x15a>
 8008de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008de4:	4604      	mov	r4, r0
 8008de6:	2301      	movs	r3, #1
 8008de8:	e7f0      	b.n	8008dcc <_vfiprintf_r+0x1bc>
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <_vfiprintf_r+0x22c>)
 8008df2:	a904      	add	r1, sp, #16
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7fd fe21 	bl	8006a3c <_printf_float>
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	1c78      	adds	r0, r7, #1
 8008dfe:	d1d6      	bne.n	8008dae <_vfiprintf_r+0x19e>
 8008e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e02:	07d9      	lsls	r1, r3, #31
 8008e04:	d405      	bmi.n	8008e12 <_vfiprintf_r+0x202>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	059a      	lsls	r2, r3, #22
 8008e0a:	d402      	bmi.n	8008e12 <_vfiprintf_r+0x202>
 8008e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e0e:	f7fe fc66 	bl	80076de <__retarget_lock_release_recursive>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	065b      	lsls	r3, r3, #25
 8008e16:	f53f af1d 	bmi.w	8008c54 <_vfiprintf_r+0x44>
 8008e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e1c:	e71c      	b.n	8008c58 <_vfiprintf_r+0x48>
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	462a      	mov	r2, r5
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <_vfiprintf_r+0x22c>)
 8008e26:	a904      	add	r1, sp, #16
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7fe f8ab 	bl	8006f84 <_printf_i>
 8008e2e:	e7e4      	b.n	8008dfa <_vfiprintf_r+0x1ea>
 8008e30:	0800b91c 	.word	0x0800b91c
 8008e34:	0800b926 	.word	0x0800b926
 8008e38:	08006a3d 	.word	0x08006a3d
 8008e3c:	08008beb 	.word	0x08008beb
 8008e40:	0800b922 	.word	0x0800b922

08008e44 <__sflush_r>:
 8008e44:	898a      	ldrh	r2, [r1, #12]
 8008e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	0710      	lsls	r0, r2, #28
 8008e4e:	460c      	mov	r4, r1
 8008e50:	d458      	bmi.n	8008f04 <__sflush_r+0xc0>
 8008e52:	684b      	ldr	r3, [r1, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dc05      	bgt.n	8008e64 <__sflush_r+0x20>
 8008e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dc02      	bgt.n	8008e64 <__sflush_r+0x20>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d0f9      	beq.n	8008e5e <__sflush_r+0x1a>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e70:	682f      	ldr	r7, [r5, #0]
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	d032      	beq.n	8008ede <__sflush_r+0x9a>
 8008e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	075a      	lsls	r2, r3, #29
 8008e7e:	d505      	bpl.n	8008e8c <__sflush_r+0x48>
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	1ac0      	subs	r0, r0, r3
 8008e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e86:	b10b      	cbz	r3, 8008e8c <__sflush_r+0x48>
 8008e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e8a:	1ac0      	subs	r0, r0, r3
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e92:	6a21      	ldr	r1, [r4, #32]
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b0      	blx	r6
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	d106      	bne.n	8008eac <__sflush_r+0x68>
 8008e9e:	6829      	ldr	r1, [r5, #0]
 8008ea0:	291d      	cmp	r1, #29
 8008ea2:	d82b      	bhi.n	8008efc <__sflush_r+0xb8>
 8008ea4:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <__sflush_r+0x108>)
 8008ea6:	410a      	asrs	r2, r1
 8008ea8:	07d6      	lsls	r6, r2, #31
 8008eaa:	d427      	bmi.n	8008efc <__sflush_r+0xb8>
 8008eac:	2200      	movs	r2, #0
 8008eae:	6062      	str	r2, [r4, #4]
 8008eb0:	04d9      	lsls	r1, r3, #19
 8008eb2:	6922      	ldr	r2, [r4, #16]
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	d504      	bpl.n	8008ec2 <__sflush_r+0x7e>
 8008eb8:	1c42      	adds	r2, r0, #1
 8008eba:	d101      	bne.n	8008ec0 <__sflush_r+0x7c>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b903      	cbnz	r3, 8008ec2 <__sflush_r+0x7e>
 8008ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8008ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec4:	602f      	str	r7, [r5, #0]
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	d0c9      	beq.n	8008e5e <__sflush_r+0x1a>
 8008eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ece:	4299      	cmp	r1, r3
 8008ed0:	d002      	beq.n	8008ed8 <__sflush_r+0x94>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7ff faaa 	bl	800842c <_free_r>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	6360      	str	r0, [r4, #52]	; 0x34
 8008edc:	e7c0      	b.n	8008e60 <__sflush_r+0x1c>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b0      	blx	r6
 8008ee4:	1c41      	adds	r1, r0, #1
 8008ee6:	d1c8      	bne.n	8008e7a <__sflush_r+0x36>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0c5      	beq.n	8008e7a <__sflush_r+0x36>
 8008eee:	2b1d      	cmp	r3, #29
 8008ef0:	d001      	beq.n	8008ef6 <__sflush_r+0xb2>
 8008ef2:	2b16      	cmp	r3, #22
 8008ef4:	d101      	bne.n	8008efa <__sflush_r+0xb6>
 8008ef6:	602f      	str	r7, [r5, #0]
 8008ef8:	e7b1      	b.n	8008e5e <__sflush_r+0x1a>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	e7ad      	b.n	8008e60 <__sflush_r+0x1c>
 8008f04:	690f      	ldr	r7, [r1, #16]
 8008f06:	2f00      	cmp	r7, #0
 8008f08:	d0a9      	beq.n	8008e5e <__sflush_r+0x1a>
 8008f0a:	0793      	lsls	r3, r2, #30
 8008f0c:	680e      	ldr	r6, [r1, #0]
 8008f0e:	bf08      	it	eq
 8008f10:	694b      	ldreq	r3, [r1, #20]
 8008f12:	600f      	str	r7, [r1, #0]
 8008f14:	bf18      	it	ne
 8008f16:	2300      	movne	r3, #0
 8008f18:	eba6 0807 	sub.w	r8, r6, r7
 8008f1c:	608b      	str	r3, [r1, #8]
 8008f1e:	f1b8 0f00 	cmp.w	r8, #0
 8008f22:	dd9c      	ble.n	8008e5e <__sflush_r+0x1a>
 8008f24:	6a21      	ldr	r1, [r4, #32]
 8008f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f28:	4643      	mov	r3, r8
 8008f2a:	463a      	mov	r2, r7
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	2800      	cmp	r0, #0
 8008f32:	dc06      	bgt.n	8008f42 <__sflush_r+0xfe>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e78e      	b.n	8008e60 <__sflush_r+0x1c>
 8008f42:	4407      	add	r7, r0
 8008f44:	eba8 0800 	sub.w	r8, r8, r0
 8008f48:	e7e9      	b.n	8008f1e <__sflush_r+0xda>
 8008f4a:	bf00      	nop
 8008f4c:	dfbffffe 	.word	0xdfbffffe

08008f50 <_fflush_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	690b      	ldr	r3, [r1, #16]
 8008f54:	4605      	mov	r5, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	b913      	cbnz	r3, 8008f60 <_fflush_r+0x10>
 8008f5a:	2500      	movs	r5, #0
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	b118      	cbz	r0, 8008f6a <_fflush_r+0x1a>
 8008f62:	6a03      	ldr	r3, [r0, #32]
 8008f64:	b90b      	cbnz	r3, 8008f6a <_fflush_r+0x1a>
 8008f66:	f7fe f9a9 	bl	80072bc <__sinit>
 8008f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f3      	beq.n	8008f5a <_fflush_r+0xa>
 8008f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f74:	07d0      	lsls	r0, r2, #31
 8008f76:	d404      	bmi.n	8008f82 <_fflush_r+0x32>
 8008f78:	0599      	lsls	r1, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_fflush_r+0x32>
 8008f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7e:	f7fe fbad 	bl	80076dc <__retarget_lock_acquire_recursive>
 8008f82:	4628      	mov	r0, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f7ff ff5d 	bl	8008e44 <__sflush_r>
 8008f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f8c:	07da      	lsls	r2, r3, #31
 8008f8e:	4605      	mov	r5, r0
 8008f90:	d4e4      	bmi.n	8008f5c <_fflush_r+0xc>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	059b      	lsls	r3, r3, #22
 8008f96:	d4e1      	bmi.n	8008f5c <_fflush_r+0xc>
 8008f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9a:	f7fe fba0 	bl	80076de <__retarget_lock_release_recursive>
 8008f9e:	e7dd      	b.n	8008f5c <_fflush_r+0xc>

08008fa0 <fiprintf>:
 8008fa0:	b40e      	push	{r1, r2, r3}
 8008fa2:	b503      	push	{r0, r1, lr}
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <fiprintf+0x20>)
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f7ff fe2d 	bl	8008c10 <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b003      	add	sp, #12
 8008fbe:	4770      	bx	lr
 8008fc0:	200007b4 	.word	0x200007b4

08008fc4 <__swhatbuf_r>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	b096      	sub	sp, #88	; 0x58
 8008fd0:	4615      	mov	r5, r2
 8008fd2:	461e      	mov	r6, r3
 8008fd4:	da0d      	bge.n	8008ff2 <__swhatbuf_r+0x2e>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fdc:	f04f 0100 	mov.w	r1, #0
 8008fe0:	bf0c      	ite	eq
 8008fe2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fe6:	2340      	movne	r3, #64	; 0x40
 8008fe8:	2000      	movs	r0, #0
 8008fea:	6031      	str	r1, [r6, #0]
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	b016      	add	sp, #88	; 0x58
 8008ff0:	bd70      	pop	{r4, r5, r6, pc}
 8008ff2:	466a      	mov	r2, sp
 8008ff4:	f000 f87c 	bl	80090f0 <_fstat_r>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dbec      	blt.n	8008fd6 <__swhatbuf_r+0x12>
 8008ffc:	9901      	ldr	r1, [sp, #4]
 8008ffe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009002:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009006:	4259      	negs	r1, r3
 8009008:	4159      	adcs	r1, r3
 800900a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800900e:	e7eb      	b.n	8008fe8 <__swhatbuf_r+0x24>

08009010 <__smakebuf_r>:
 8009010:	898b      	ldrh	r3, [r1, #12]
 8009012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009014:	079d      	lsls	r5, r3, #30
 8009016:	4606      	mov	r6, r0
 8009018:	460c      	mov	r4, r1
 800901a:	d507      	bpl.n	800902c <__smakebuf_r+0x1c>
 800901c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	6123      	str	r3, [r4, #16]
 8009024:	2301      	movs	r3, #1
 8009026:	6163      	str	r3, [r4, #20]
 8009028:	b002      	add	sp, #8
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	ab01      	add	r3, sp, #4
 800902e:	466a      	mov	r2, sp
 8009030:	f7ff ffc8 	bl	8008fc4 <__swhatbuf_r>
 8009034:	9900      	ldr	r1, [sp, #0]
 8009036:	4605      	mov	r5, r0
 8009038:	4630      	mov	r0, r6
 800903a:	f7fd fb95 	bl	8006768 <_malloc_r>
 800903e:	b948      	cbnz	r0, 8009054 <__smakebuf_r+0x44>
 8009040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009044:	059a      	lsls	r2, r3, #22
 8009046:	d4ef      	bmi.n	8009028 <__smakebuf_r+0x18>
 8009048:	f023 0303 	bic.w	r3, r3, #3
 800904c:	f043 0302 	orr.w	r3, r3, #2
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	e7e3      	b.n	800901c <__smakebuf_r+0xc>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	6020      	str	r0, [r4, #0]
 8009058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	9b00      	ldr	r3, [sp, #0]
 8009060:	6163      	str	r3, [r4, #20]
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	6120      	str	r0, [r4, #16]
 8009066:	b15b      	cbz	r3, 8009080 <__smakebuf_r+0x70>
 8009068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906c:	4630      	mov	r0, r6
 800906e:	f000 f851 	bl	8009114 <_isatty_r>
 8009072:	b128      	cbz	r0, 8009080 <__smakebuf_r+0x70>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	431d      	orrs	r5, r3
 8009084:	81a5      	strh	r5, [r4, #12]
 8009086:	e7cf      	b.n	8009028 <__smakebuf_r+0x18>

08009088 <_putc_r>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	460d      	mov	r5, r1
 800908c:	4614      	mov	r4, r2
 800908e:	4606      	mov	r6, r0
 8009090:	b118      	cbz	r0, 800909a <_putc_r+0x12>
 8009092:	6a03      	ldr	r3, [r0, #32]
 8009094:	b90b      	cbnz	r3, 800909a <_putc_r+0x12>
 8009096:	f7fe f911 	bl	80072bc <__sinit>
 800909a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800909c:	07d8      	lsls	r0, r3, #31
 800909e:	d405      	bmi.n	80090ac <_putc_r+0x24>
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	0599      	lsls	r1, r3, #22
 80090a4:	d402      	bmi.n	80090ac <_putc_r+0x24>
 80090a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a8:	f7fe fb18 	bl	80076dc <__retarget_lock_acquire_recursive>
 80090ac:	68a3      	ldr	r3, [r4, #8]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	60a3      	str	r3, [r4, #8]
 80090b4:	da05      	bge.n	80090c2 <_putc_r+0x3a>
 80090b6:	69a2      	ldr	r2, [r4, #24]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	db12      	blt.n	80090e2 <_putc_r+0x5a>
 80090bc:	b2eb      	uxtb	r3, r5
 80090be:	2b0a      	cmp	r3, #10
 80090c0:	d00f      	beq.n	80090e2 <_putc_r+0x5a>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	701d      	strb	r5, [r3, #0]
 80090ca:	b2ed      	uxtb	r5, r5
 80090cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ce:	07da      	lsls	r2, r3, #31
 80090d0:	d405      	bmi.n	80090de <_putc_r+0x56>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	059b      	lsls	r3, r3, #22
 80090d6:	d402      	bmi.n	80090de <_putc_r+0x56>
 80090d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090da:	f7fe fb00 	bl	80076de <__retarget_lock_release_recursive>
 80090de:	4628      	mov	r0, r5
 80090e0:	bd70      	pop	{r4, r5, r6, pc}
 80090e2:	4629      	mov	r1, r5
 80090e4:	4622      	mov	r2, r4
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7fe f9d7 	bl	800749a <__swbuf_r>
 80090ec:	4605      	mov	r5, r0
 80090ee:	e7ed      	b.n	80090cc <_putc_r+0x44>

080090f0 <_fstat_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d07      	ldr	r5, [pc, #28]	; (8009110 <_fstat_r+0x20>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f000 fac5 	bl	800968c <_fstat>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d102      	bne.n	800910c <_fstat_r+0x1c>
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	b103      	cbz	r3, 800910c <_fstat_r+0x1c>
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	bd38      	pop	{r3, r4, r5, pc}
 800910e:	bf00      	nop
 8009110:	20000f68 	.word	0x20000f68

08009114 <_isatty_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d06      	ldr	r5, [pc, #24]	; (8009130 <_isatty_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f000 fac4 	bl	80096ac <_isatty>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_isatty_r+0x1a>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_isatty_r+0x1a>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000f68 	.word	0x20000f68

08009134 <abort>:
 8009134:	b508      	push	{r3, lr}
 8009136:	2006      	movs	r0, #6
 8009138:	f000 f84a 	bl	80091d0 <raise>
 800913c:	2001      	movs	r0, #1
 800913e:	f000 fad5 	bl	80096ec <_exit>

08009142 <__ascii_mbtowc>:
 8009142:	b082      	sub	sp, #8
 8009144:	b901      	cbnz	r1, 8009148 <__ascii_mbtowc+0x6>
 8009146:	a901      	add	r1, sp, #4
 8009148:	b142      	cbz	r2, 800915c <__ascii_mbtowc+0x1a>
 800914a:	b14b      	cbz	r3, 8009160 <__ascii_mbtowc+0x1e>
 800914c:	7813      	ldrb	r3, [r2, #0]
 800914e:	600b      	str	r3, [r1, #0]
 8009150:	7812      	ldrb	r2, [r2, #0]
 8009152:	1e10      	subs	r0, r2, #0
 8009154:	bf18      	it	ne
 8009156:	2001      	movne	r0, #1
 8009158:	b002      	add	sp, #8
 800915a:	4770      	bx	lr
 800915c:	4610      	mov	r0, r2
 800915e:	e7fb      	b.n	8009158 <__ascii_mbtowc+0x16>
 8009160:	f06f 0001 	mvn.w	r0, #1
 8009164:	e7f8      	b.n	8009158 <__ascii_mbtowc+0x16>

08009166 <__ascii_wctomb>:
 8009166:	b149      	cbz	r1, 800917c <__ascii_wctomb+0x16>
 8009168:	2aff      	cmp	r2, #255	; 0xff
 800916a:	bf85      	ittet	hi
 800916c:	238a      	movhi	r3, #138	; 0x8a
 800916e:	6003      	strhi	r3, [r0, #0]
 8009170:	700a      	strbls	r2, [r1, #0]
 8009172:	f04f 30ff 	movhi.w	r0, #4294967295
 8009176:	bf98      	it	ls
 8009178:	2001      	movls	r0, #1
 800917a:	4770      	bx	lr
 800917c:	4608      	mov	r0, r1
 800917e:	4770      	bx	lr

08009180 <_raise_r>:
 8009180:	291f      	cmp	r1, #31
 8009182:	b538      	push	{r3, r4, r5, lr}
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	d904      	bls.n	8009194 <_raise_r+0x14>
 800918a:	2316      	movs	r3, #22
 800918c:	6003      	str	r3, [r0, #0]
 800918e:	f04f 30ff 	mov.w	r0, #4294967295
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009196:	b112      	cbz	r2, 800919e <_raise_r+0x1e>
 8009198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800919c:	b94b      	cbnz	r3, 80091b2 <_raise_r+0x32>
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 f830 	bl	8009204 <_getpid_r>
 80091a4:	462a      	mov	r2, r5
 80091a6:	4601      	mov	r1, r0
 80091a8:	4620      	mov	r0, r4
 80091aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ae:	f000 b817 	b.w	80091e0 <_kill_r>
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d00a      	beq.n	80091cc <_raise_r+0x4c>
 80091b6:	1c59      	adds	r1, r3, #1
 80091b8:	d103      	bne.n	80091c2 <_raise_r+0x42>
 80091ba:	2316      	movs	r3, #22
 80091bc:	6003      	str	r3, [r0, #0]
 80091be:	2001      	movs	r0, #1
 80091c0:	e7e7      	b.n	8009192 <_raise_r+0x12>
 80091c2:	2400      	movs	r4, #0
 80091c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091c8:	4628      	mov	r0, r5
 80091ca:	4798      	blx	r3
 80091cc:	2000      	movs	r0, #0
 80091ce:	e7e0      	b.n	8009192 <_raise_r+0x12>

080091d0 <raise>:
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <raise+0xc>)
 80091d2:	4601      	mov	r1, r0
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f7ff bfd3 	b.w	8009180 <_raise_r>
 80091da:	bf00      	nop
 80091dc:	200007b4 	.word	0x200007b4

080091e0 <_kill_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	; (8009200 <_kill_r+0x20>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	f000 fa65 	bl	80096bc <_kill>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d102      	bne.n	80091fc <_kill_r+0x1c>
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	b103      	cbz	r3, 80091fc <_kill_r+0x1c>
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	bd38      	pop	{r3, r4, r5, pc}
 80091fe:	bf00      	nop
 8009200:	20000f68 	.word	0x20000f68

08009204 <_getpid_r>:
 8009204:	f000 ba4a 	b.w	800969c <_getpid>

08009208 <sqrt>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	ed2d 8b02 	vpush	{d8}
 800920e:	ec55 4b10 	vmov	r4, r5, d0
 8009212:	f000 f88b 	bl	800932c <__ieee754_sqrt>
 8009216:	4622      	mov	r2, r4
 8009218:	462b      	mov	r3, r5
 800921a:	4620      	mov	r0, r4
 800921c:	4629      	mov	r1, r5
 800921e:	eeb0 8a40 	vmov.f32	s16, s0
 8009222:	eef0 8a60 	vmov.f32	s17, s1
 8009226:	f7f7 fc81 	bl	8000b2c <__aeabi_dcmpun>
 800922a:	b990      	cbnz	r0, 8009252 <sqrt+0x4a>
 800922c:	2200      	movs	r2, #0
 800922e:	2300      	movs	r3, #0
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	f7f7 fc52 	bl	8000adc <__aeabi_dcmplt>
 8009238:	b158      	cbz	r0, 8009252 <sqrt+0x4a>
 800923a:	f7fe fa25 	bl	8007688 <__errno>
 800923e:	2321      	movs	r3, #33	; 0x21
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	2200      	movs	r2, #0
 8009244:	2300      	movs	r3, #0
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	f7f7 faff 	bl	800084c <__aeabi_ddiv>
 800924e:	ec41 0b18 	vmov	d8, r0, r1
 8009252:	eeb0 0a48 	vmov.f32	s0, s16
 8009256:	eef0 0a68 	vmov.f32	s1, s17
 800925a:	ecbd 8b02 	vpop	{d8}
 800925e:	bd38      	pop	{r3, r4, r5, pc}

08009260 <expf>:
 8009260:	b508      	push	{r3, lr}
 8009262:	ed2d 8b02 	vpush	{d8}
 8009266:	eef0 8a40 	vmov.f32	s17, s0
 800926a:	f000 f939 	bl	80094e0 <__ieee754_expf>
 800926e:	eeb0 8a40 	vmov.f32	s16, s0
 8009272:	eeb0 0a68 	vmov.f32	s0, s17
 8009276:	f000 f829 	bl	80092cc <finitef>
 800927a:	b160      	cbz	r0, 8009296 <expf+0x36>
 800927c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80092bc <expf+0x5c>
 8009280:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009288:	dd0a      	ble.n	80092a0 <expf+0x40>
 800928a:	f7fe f9fd 	bl	8007688 <__errno>
 800928e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80092c0 <expf+0x60>
 8009292:	2322      	movs	r3, #34	; 0x22
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	eeb0 0a48 	vmov.f32	s0, s16
 800929a:	ecbd 8b02 	vpop	{d8}
 800929e:	bd08      	pop	{r3, pc}
 80092a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80092c4 <expf+0x64>
 80092a4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80092a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ac:	d5f3      	bpl.n	8009296 <expf+0x36>
 80092ae:	f7fe f9eb 	bl	8007688 <__errno>
 80092b2:	2322      	movs	r3, #34	; 0x22
 80092b4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80092c8 <expf+0x68>
 80092b8:	6003      	str	r3, [r0, #0]
 80092ba:	e7ec      	b.n	8009296 <expf+0x36>
 80092bc:	42b17217 	.word	0x42b17217
 80092c0:	7f800000 	.word	0x7f800000
 80092c4:	c2cff1b5 	.word	0xc2cff1b5
 80092c8:	00000000 	.word	0x00000000

080092cc <finitef>:
 80092cc:	b082      	sub	sp, #8
 80092ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 80092d2:	9801      	ldr	r0, [sp, #4]
 80092d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80092d8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80092dc:	bfac      	ite	ge
 80092de:	2000      	movge	r0, #0
 80092e0:	2001      	movlt	r0, #1
 80092e2:	b002      	add	sp, #8
 80092e4:	4770      	bx	lr

080092e6 <with_errnof>:
 80092e6:	b513      	push	{r0, r1, r4, lr}
 80092e8:	4604      	mov	r4, r0
 80092ea:	ed8d 0a01 	vstr	s0, [sp, #4]
 80092ee:	f7fe f9cb 	bl	8007688 <__errno>
 80092f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80092f6:	6004      	str	r4, [r0, #0]
 80092f8:	b002      	add	sp, #8
 80092fa:	bd10      	pop	{r4, pc}

080092fc <xflowf>:
 80092fc:	b130      	cbz	r0, 800930c <xflowf+0x10>
 80092fe:	eef1 7a40 	vneg.f32	s15, s0
 8009302:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009306:	2022      	movs	r0, #34	; 0x22
 8009308:	f7ff bfed 	b.w	80092e6 <with_errnof>
 800930c:	eef0 7a40 	vmov.f32	s15, s0
 8009310:	e7f7      	b.n	8009302 <xflowf+0x6>
	...

08009314 <__math_uflowf>:
 8009314:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800931c <__math_uflowf+0x8>
 8009318:	f7ff bff0 	b.w	80092fc <xflowf>
 800931c:	10000000 	.word	0x10000000

08009320 <__math_oflowf>:
 8009320:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009328 <__math_oflowf+0x8>
 8009324:	f7ff bfea 	b.w	80092fc <xflowf>
 8009328:	70000000 	.word	0x70000000

0800932c <__ieee754_sqrt>:
 800932c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	ec55 4b10 	vmov	r4, r5, d0
 8009334:	4e67      	ldr	r6, [pc, #412]	; (80094d4 <__ieee754_sqrt+0x1a8>)
 8009336:	43ae      	bics	r6, r5
 8009338:	ee10 0a10 	vmov	r0, s0
 800933c:	ee10 2a10 	vmov	r2, s0
 8009340:	4629      	mov	r1, r5
 8009342:	462b      	mov	r3, r5
 8009344:	d10d      	bne.n	8009362 <__ieee754_sqrt+0x36>
 8009346:	f7f7 f957 	bl	80005f8 <__aeabi_dmul>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f7f6 ff9b 	bl	800028c <__adddf3>
 8009356:	4604      	mov	r4, r0
 8009358:	460d      	mov	r5, r1
 800935a:	ec45 4b10 	vmov	d0, r4, r5
 800935e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009362:	2d00      	cmp	r5, #0
 8009364:	dc0b      	bgt.n	800937e <__ieee754_sqrt+0x52>
 8009366:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800936a:	4326      	orrs	r6, r4
 800936c:	d0f5      	beq.n	800935a <__ieee754_sqrt+0x2e>
 800936e:	b135      	cbz	r5, 800937e <__ieee754_sqrt+0x52>
 8009370:	f7f6 ff8a 	bl	8000288 <__aeabi_dsub>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	f7f7 fa68 	bl	800084c <__aeabi_ddiv>
 800937c:	e7eb      	b.n	8009356 <__ieee754_sqrt+0x2a>
 800937e:	1509      	asrs	r1, r1, #20
 8009380:	f000 808d 	beq.w	800949e <__ieee754_sqrt+0x172>
 8009384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009388:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800938c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009390:	07c9      	lsls	r1, r1, #31
 8009392:	bf5c      	itt	pl
 8009394:	005b      	lslpl	r3, r3, #1
 8009396:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800939a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800939e:	bf58      	it	pl
 80093a0:	0052      	lslpl	r2, r2, #1
 80093a2:	2500      	movs	r5, #0
 80093a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80093a8:	1076      	asrs	r6, r6, #1
 80093aa:	0052      	lsls	r2, r2, #1
 80093ac:	f04f 0e16 	mov.w	lr, #22
 80093b0:	46ac      	mov	ip, r5
 80093b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093b6:	eb0c 0001 	add.w	r0, ip, r1
 80093ba:	4298      	cmp	r0, r3
 80093bc:	bfde      	ittt	le
 80093be:	1a1b      	suble	r3, r3, r0
 80093c0:	eb00 0c01 	addle.w	ip, r0, r1
 80093c4:	186d      	addle	r5, r5, r1
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	f1be 0e01 	subs.w	lr, lr, #1
 80093cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80093d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80093d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80093d8:	d1ed      	bne.n	80093b6 <__ieee754_sqrt+0x8a>
 80093da:	4674      	mov	r4, lr
 80093dc:	2720      	movs	r7, #32
 80093de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80093e2:	4563      	cmp	r3, ip
 80093e4:	eb01 000e 	add.w	r0, r1, lr
 80093e8:	dc02      	bgt.n	80093f0 <__ieee754_sqrt+0xc4>
 80093ea:	d113      	bne.n	8009414 <__ieee754_sqrt+0xe8>
 80093ec:	4290      	cmp	r0, r2
 80093ee:	d811      	bhi.n	8009414 <__ieee754_sqrt+0xe8>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	eb00 0e01 	add.w	lr, r0, r1
 80093f6:	da57      	bge.n	80094a8 <__ieee754_sqrt+0x17c>
 80093f8:	f1be 0f00 	cmp.w	lr, #0
 80093fc:	db54      	blt.n	80094a8 <__ieee754_sqrt+0x17c>
 80093fe:	f10c 0801 	add.w	r8, ip, #1
 8009402:	eba3 030c 	sub.w	r3, r3, ip
 8009406:	4290      	cmp	r0, r2
 8009408:	bf88      	it	hi
 800940a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800940e:	1a12      	subs	r2, r2, r0
 8009410:	440c      	add	r4, r1
 8009412:	46c4      	mov	ip, r8
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	3f01      	subs	r7, #1
 8009418:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800941c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009420:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009424:	d1dd      	bne.n	80093e2 <__ieee754_sqrt+0xb6>
 8009426:	4313      	orrs	r3, r2
 8009428:	d01b      	beq.n	8009462 <__ieee754_sqrt+0x136>
 800942a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80094d8 <__ieee754_sqrt+0x1ac>
 800942e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80094dc <__ieee754_sqrt+0x1b0>
 8009432:	e9da 0100 	ldrd	r0, r1, [sl]
 8009436:	e9db 2300 	ldrd	r2, r3, [fp]
 800943a:	f7f6 ff25 	bl	8000288 <__aeabi_dsub>
 800943e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f7f7 fb51 	bl	8000af0 <__aeabi_dcmple>
 800944e:	b140      	cbz	r0, 8009462 <__ieee754_sqrt+0x136>
 8009450:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009454:	e9da 0100 	ldrd	r0, r1, [sl]
 8009458:	e9db 2300 	ldrd	r2, r3, [fp]
 800945c:	d126      	bne.n	80094ac <__ieee754_sqrt+0x180>
 800945e:	3501      	adds	r5, #1
 8009460:	463c      	mov	r4, r7
 8009462:	106a      	asrs	r2, r5, #1
 8009464:	0863      	lsrs	r3, r4, #1
 8009466:	07e9      	lsls	r1, r5, #31
 8009468:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800946c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009470:	bf48      	it	mi
 8009472:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009476:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800947a:	461c      	mov	r4, r3
 800947c:	e76d      	b.n	800935a <__ieee754_sqrt+0x2e>
 800947e:	0ad3      	lsrs	r3, r2, #11
 8009480:	3815      	subs	r0, #21
 8009482:	0552      	lsls	r2, r2, #21
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0fa      	beq.n	800947e <__ieee754_sqrt+0x152>
 8009488:	02dc      	lsls	r4, r3, #11
 800948a:	d50a      	bpl.n	80094a2 <__ieee754_sqrt+0x176>
 800948c:	f1c1 0420 	rsb	r4, r1, #32
 8009490:	fa22 f404 	lsr.w	r4, r2, r4
 8009494:	1e4d      	subs	r5, r1, #1
 8009496:	408a      	lsls	r2, r1
 8009498:	4323      	orrs	r3, r4
 800949a:	1b41      	subs	r1, r0, r5
 800949c:	e772      	b.n	8009384 <__ieee754_sqrt+0x58>
 800949e:	4608      	mov	r0, r1
 80094a0:	e7f0      	b.n	8009484 <__ieee754_sqrt+0x158>
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	3101      	adds	r1, #1
 80094a6:	e7ef      	b.n	8009488 <__ieee754_sqrt+0x15c>
 80094a8:	46e0      	mov	r8, ip
 80094aa:	e7aa      	b.n	8009402 <__ieee754_sqrt+0xd6>
 80094ac:	f7f6 feee 	bl	800028c <__adddf3>
 80094b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f7 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80094c0:	b120      	cbz	r0, 80094cc <__ieee754_sqrt+0x1a0>
 80094c2:	1ca0      	adds	r0, r4, #2
 80094c4:	bf08      	it	eq
 80094c6:	3501      	addeq	r5, #1
 80094c8:	3402      	adds	r4, #2
 80094ca:	e7ca      	b.n	8009462 <__ieee754_sqrt+0x136>
 80094cc:	3401      	adds	r4, #1
 80094ce:	f024 0401 	bic.w	r4, r4, #1
 80094d2:	e7c6      	b.n	8009462 <__ieee754_sqrt+0x136>
 80094d4:	7ff00000 	.word	0x7ff00000
 80094d8:	20000928 	.word	0x20000928
 80094dc:	20000930 	.word	0x20000930

080094e0 <__ieee754_expf>:
 80094e0:	ee10 2a10 	vmov	r2, s0
 80094e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80094e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094ec:	d902      	bls.n	80094f4 <__ieee754_expf+0x14>
 80094ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80094f2:	4770      	bx	lr
 80094f4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80094f8:	d106      	bne.n	8009508 <__ieee754_expf+0x28>
 80094fa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009634 <__ieee754_expf+0x154>
 80094fe:	2900      	cmp	r1, #0
 8009500:	bf18      	it	ne
 8009502:	eeb0 0a67 	vmovne.f32	s0, s15
 8009506:	4770      	bx	lr
 8009508:	484b      	ldr	r0, [pc, #300]	; (8009638 <__ieee754_expf+0x158>)
 800950a:	4282      	cmp	r2, r0
 800950c:	dd02      	ble.n	8009514 <__ieee754_expf+0x34>
 800950e:	2000      	movs	r0, #0
 8009510:	f7ff bf06 	b.w	8009320 <__math_oflowf>
 8009514:	2a00      	cmp	r2, #0
 8009516:	da05      	bge.n	8009524 <__ieee754_expf+0x44>
 8009518:	4a48      	ldr	r2, [pc, #288]	; (800963c <__ieee754_expf+0x15c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d902      	bls.n	8009524 <__ieee754_expf+0x44>
 800951e:	2000      	movs	r0, #0
 8009520:	f7ff bef8 	b.w	8009314 <__math_uflowf>
 8009524:	4a46      	ldr	r2, [pc, #280]	; (8009640 <__ieee754_expf+0x160>)
 8009526:	4293      	cmp	r3, r2
 8009528:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800952c:	d952      	bls.n	80095d4 <__ieee754_expf+0xf4>
 800952e:	4a45      	ldr	r2, [pc, #276]	; (8009644 <__ieee754_expf+0x164>)
 8009530:	4293      	cmp	r3, r2
 8009532:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009536:	d834      	bhi.n	80095a2 <__ieee754_expf+0xc2>
 8009538:	4b43      	ldr	r3, [pc, #268]	; (8009648 <__ieee754_expf+0x168>)
 800953a:	4413      	add	r3, r2
 800953c:	ed93 7a00 	vldr	s14, [r3]
 8009540:	4b42      	ldr	r3, [pc, #264]	; (800964c <__ieee754_expf+0x16c>)
 8009542:	4413      	add	r3, r2
 8009544:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009548:	f1c1 0201 	rsb	r2, r1, #1
 800954c:	edd3 7a00 	vldr	s15, [r3]
 8009550:	1a52      	subs	r2, r2, r1
 8009552:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009556:	ee20 6a00 	vmul.f32	s12, s0, s0
 800955a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009650 <__ieee754_expf+0x170>
 800955e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009654 <__ieee754_expf+0x174>
 8009562:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009566:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009658 <__ieee754_expf+0x178>
 800956a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800956e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800965c <__ieee754_expf+0x17c>
 8009572:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009576:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009660 <__ieee754_expf+0x180>
 800957a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800957e:	eef0 6a40 	vmov.f32	s13, s0
 8009582:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009586:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800958a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800958e:	bb92      	cbnz	r2, 80095f6 <__ieee754_expf+0x116>
 8009590:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009594:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009598:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800959c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80095a0:	4770      	bx	lr
 80095a2:	4b30      	ldr	r3, [pc, #192]	; (8009664 <__ieee754_expf+0x184>)
 80095a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009668 <__ieee754_expf+0x188>
 80095a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800966c <__ieee754_expf+0x18c>
 80095ac:	4413      	add	r3, r2
 80095ae:	edd3 7a00 	vldr	s15, [r3]
 80095b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80095b6:	eeb0 7a40 	vmov.f32	s14, s0
 80095ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095be:	ee17 2a90 	vmov	r2, s15
 80095c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80095ca:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009670 <__ieee754_expf+0x190>
 80095ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095d2:	e7be      	b.n	8009552 <__ieee754_expf+0x72>
 80095d4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80095d8:	d20b      	bcs.n	80095f2 <__ieee754_expf+0x112>
 80095da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009674 <__ieee754_expf+0x194>
 80095de:	ee70 6a26 	vadd.f32	s13, s0, s13
 80095e2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80095e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ea:	dd02      	ble.n	80095f2 <__ieee754_expf+0x112>
 80095ec:	ee30 0a25 	vadd.f32	s0, s0, s11
 80095f0:	4770      	bx	lr
 80095f2:	2200      	movs	r2, #0
 80095f4:	e7af      	b.n	8009556 <__ieee754_expf+0x76>
 80095f6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80095fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80095fe:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009602:	bfb8      	it	lt
 8009604:	3264      	addlt	r2, #100	; 0x64
 8009606:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800960a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800960e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009612:	ee17 3a90 	vmov	r3, s15
 8009616:	bfab      	itete	ge
 8009618:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800961c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009620:	ee00 3a10 	vmovge	s0, r3
 8009624:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009678 <__ieee754_expf+0x198>
 8009628:	bfbc      	itt	lt
 800962a:	ee00 3a10 	vmovlt	s0, r3
 800962e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009632:	4770      	bx	lr
 8009634:	00000000 	.word	0x00000000
 8009638:	42b17217 	.word	0x42b17217
 800963c:	42cff1b5 	.word	0x42cff1b5
 8009640:	3eb17218 	.word	0x3eb17218
 8009644:	3f851591 	.word	0x3f851591
 8009648:	0800ba40 	.word	0x0800ba40
 800964c:	0800ba48 	.word	0x0800ba48
 8009650:	3331bb4c 	.word	0x3331bb4c
 8009654:	b5ddea0e 	.word	0xb5ddea0e
 8009658:	388ab355 	.word	0x388ab355
 800965c:	bb360b61 	.word	0xbb360b61
 8009660:	3e2aaaab 	.word	0x3e2aaaab
 8009664:	0800ba38 	.word	0x0800ba38
 8009668:	3fb8aa3b 	.word	0x3fb8aa3b
 800966c:	3f317180 	.word	0x3f317180
 8009670:	3717f7d1 	.word	0x3717f7d1
 8009674:	7149f2ca 	.word	0x7149f2ca
 8009678:	0d800000 	.word	0x0d800000

0800967c <_close>:
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <_close+0xc>)
 800967e:	2258      	movs	r2, #88	; 0x58
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	f04f 30ff 	mov.w	r0, #4294967295
 8009686:	4770      	bx	lr
 8009688:	20000f68 	.word	0x20000f68

0800968c <_fstat>:
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <_fstat+0xc>)
 800968e:	2258      	movs	r2, #88	; 0x58
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
 8009696:	4770      	bx	lr
 8009698:	20000f68 	.word	0x20000f68

0800969c <_getpid>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <_getpid+0xc>)
 800969e:	2258      	movs	r2, #88	; 0x58
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	f04f 30ff 	mov.w	r0, #4294967295
 80096a6:	4770      	bx	lr
 80096a8:	20000f68 	.word	0x20000f68

080096ac <_isatty>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	; (80096b8 <_isatty+0xc>)
 80096ae:	2258      	movs	r2, #88	; 0x58
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	2000      	movs	r0, #0
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000f68 	.word	0x20000f68

080096bc <_kill>:
 80096bc:	4b02      	ldr	r3, [pc, #8]	; (80096c8 <_kill+0xc>)
 80096be:	2258      	movs	r2, #88	; 0x58
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295
 80096c6:	4770      	bx	lr
 80096c8:	20000f68 	.word	0x20000f68

080096cc <_lseek>:
 80096cc:	4b02      	ldr	r3, [pc, #8]	; (80096d8 <_lseek+0xc>)
 80096ce:	2258      	movs	r2, #88	; 0x58
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	f04f 30ff 	mov.w	r0, #4294967295
 80096d6:	4770      	bx	lr
 80096d8:	20000f68 	.word	0x20000f68

080096dc <_read>:
 80096dc:	4b02      	ldr	r3, [pc, #8]	; (80096e8 <_read+0xc>)
 80096de:	2258      	movs	r2, #88	; 0x58
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	f04f 30ff 	mov.w	r0, #4294967295
 80096e6:	4770      	bx	lr
 80096e8:	20000f68 	.word	0x20000f68

080096ec <_exit>:
 80096ec:	e7fe      	b.n	80096ec <_exit>
	...

080096f0 <_init>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr

080096fc <_fini>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	bf00      	nop
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr
