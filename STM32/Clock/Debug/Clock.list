
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080060f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08006154  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006154  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ced  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002543  00000000  00000000  00030dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00033300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba2  00000000  00000000  00034208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272de  00000000  00000000  00034daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e96  00000000  00000000  0005c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0afe  00000000  00000000  0006ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004634  00000000  00000000  0015fa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00164050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ecc 	.word	0x08005ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ecc 	.word	0x08005ecc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <write_command>:

/*
 * AQM1602XA-RN-GBW
 * LCD write command
 */
void write_command(uint8_t command) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[2] = { 0x00, 0x00 };
 8000586:	2300      	movs	r3, #0
 8000588:	81bb      	strh	r3, [r7, #12]
  buf[1] = command;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <write_command+0x34>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	217c      	movs	r1, #124	; 0x7c
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	f001 f911 	bl	80017c4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fd8c 	bl	80010c0 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000078 	.word	0x20000078

080005b4 <write_data>:

/*
 * AQM1602XA-RN-GBW
 * LCD write data
 */
void write_data(uint8_t data) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[2] = { 0x40, 0x00 };
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	81bb      	strh	r3, [r7, #12]
  buf[1] = data;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(phi2c, lcd_i2c_addr, buf, 2, 100);
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <write_data+0x34>)
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	217c      	movs	r1, #124	; 0x7c
 80005cc:	f107 020c 	add.w	r2, r7, #12
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2302      	movs	r3, #2
 80005d6:	f001 f8f5 	bl	80017c4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fd70 	bl	80010c0 <HAL_Delay>
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000078 	.word	0x20000078

080005ec <lcd_init>:

void lcd_init(I2C_HandleTypeDef *p_hi2c) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  phi2c = p_hi2c;
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <lcd_init+0x60>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(50);
 80005fa:	2032      	movs	r0, #50	; 0x32
 80005fc:	f000 fd60 	bl	80010c0 <HAL_Delay>
  write_command(0x38);
 8000600:	2038      	movs	r0, #56	; 0x38
 8000602:	f7ff ffbb 	bl	800057c <write_command>
  write_command(0x39);
 8000606:	2039      	movs	r0, #57	; 0x39
 8000608:	f7ff ffb8 	bl	800057c <write_command>
  write_command(0x14);
 800060c:	2014      	movs	r0, #20
 800060e:	f7ff ffb5 	bl	800057c <write_command>
  write_command(0x73);  // Contrast: C3=0 C2=0 C1=1 C0=1
 8000612:	2073      	movs	r0, #115	; 0x73
 8000614:	f7ff ffb2 	bl	800057c <write_command>
  write_command(0x52);  // Contrast: BON=0 C5=1 C4=0
 8000618:	2052      	movs	r0, #82	; 0x52
 800061a:	f7ff ffaf 	bl	800057c <write_command>
  write_command(0x6c);
 800061e:	206c      	movs	r0, #108	; 0x6c
 8000620:	f7ff ffac 	bl	800057c <write_command>
  HAL_Delay(250);
 8000624:	20fa      	movs	r0, #250	; 0xfa
 8000626:	f000 fd4b 	bl	80010c0 <HAL_Delay>
  write_command(0x38);
 800062a:	2038      	movs	r0, #56	; 0x38
 800062c:	f7ff ffa6 	bl	800057c <write_command>
  write_command(0x01);
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff ffa3 	bl	800057c <write_command>
  write_command(0x0c);
 8000636:	200c      	movs	r0, #12
 8000638:	f7ff ffa0 	bl	800057c <write_command>
  HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 fd3f 	bl	80010c0 <HAL_Delay>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000078 	.word	0x20000078

08000650 <lcd_clear>:

void lcd_clear(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  write_command(0x01);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff91 	bl	800057c <write_command>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <lcd_newline>:

void lcd_newline(void) {
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  write_command(0xc0);
 8000662:	20c0      	movs	r0, #192	; 0xc0
 8000664:	f7ff ff8a 	bl	800057c <write_command>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <lcd_move_right>:

void lcd_move_left(void) {
  write_command(0x10);
}

void lcd_move_right(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  write_command(0x14);
 8000670:	2014      	movs	r0, #20
 8000672:	f7ff ff83 	bl	800057c <write_command>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}

0800067a <lcd_string>:

void lcd_string(uint8_t *pbuf, uint8_t len) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  for(i=0; i<len; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e009      	b.n	80006a0 <lcd_string+0x26>
    write_data(pbuf[i]);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff8d 	bl	80005b4 <write_data>
  for(i=0; i<len; i++) {
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	3301      	adds	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f1      	bcc.n	800068c <lcd_string+0x12>
  }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <lcd_test>:

void lcd_test(void) {
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  write_data(0x33);  // 3
 80006b6:	2033      	movs	r0, #51	; 0x33
 80006b8:	f7ff ff7c 	bl	80005b4 <write_data>
  write_data(0x37);  // 7
 80006bc:	2037      	movs	r0, #55	; 0x37
 80006be:	f7ff ff79 	bl	80005b4 <write_data>
  write_data(0x2e);  // .
 80006c2:	202e      	movs	r0, #46	; 0x2e
 80006c4:	f7ff ff76 	bl	80005b4 <write_data>
  write_data(0x30);  // 0
 80006c8:	2030      	movs	r0, #48	; 0x30
 80006ca:	f7ff ff73 	bl	80005b4 <write_data>
  write_data(0xf2);  // o
 80006ce:	20f2      	movs	r0, #242	; 0xf2
 80006d0:	f7ff ff70 	bl	80005b4 <write_data>
  write_data(0x43);  // C
 80006d4:	2043      	movs	r0, #67	; 0x43
 80006d6:	f7ff ff6d 	bl	80005b4 <write_data>
  write_command(0xc0);  // new line
 80006da:	20c0      	movs	r0, #192	; 0xc0
 80006dc:	f7ff ff4e 	bl	800057c <write_command>
  write_data(0x28);  // (
 80006e0:	2028      	movs	r0, #40	; 0x28
 80006e2:	f7ff ff67 	bl	80005b4 <write_data>
  write_data(0x5e);  // ~
 80006e6:	205e      	movs	r0, #94	; 0x5e
 80006e8:	f7ff ff64 	bl	80005b4 <write_data>
  write_data(0x2d);  // -
 80006ec:	202d      	movs	r0, #45	; 0x2d
 80006ee:	f7ff ff61 	bl	80005b4 <write_data>
  write_data(0x5e);  // ~
 80006f2:	205e      	movs	r0, #94	; 0x5e
 80006f4:	f7ff ff5e 	bl	80005b4 <write_data>
  write_data(0x29);  // )
 80006f8:	2029      	movs	r0, #41	; 0x29
 80006fa:	f7ff ff5b 	bl	80005b4 <write_data>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <get_current_datetime>:
static void MX_RTC_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_current_datetime(current_datetime *dt, bool add_seconds) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;

  HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);  // RTC Time
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4838      	ldr	r0, [pc, #224]	; (80007fc <get_current_datetime+0xf8>)
 800071a:	f003 f868 	bl	80037ee <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);  // RTC Date
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	4835      	ldr	r0, [pc, #212]	; (80007fc <get_current_datetime+0xf8>)
 8000728:	f003 f944 	bl	80039b4 <HAL_RTC_GetDate>

  sprintf(dt->date, "20%02d/%02d/%02d", sDate.Year, sDate.Month, sDate.Date);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	7ffb      	ldrb	r3, [r7, #31]
 8000730:	461a      	mov	r2, r3
 8000732:	7f7b      	ldrb	r3, [r7, #29]
 8000734:	4619      	mov	r1, r3
 8000736:	7fbb      	ldrb	r3, [r7, #30]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	460b      	mov	r3, r1
 800073c:	4930      	ldr	r1, [pc, #192]	; (8000800 <get_current_datetime+0xfc>)
 800073e:	f004 fa67 	bl	8004c10 <siprintf>
  if (add_seconds) {
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00d      	beq.n	8000764 <get_current_datetime+0x60>
    sprintf(dt->time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 000a 	add.w	r0, r3, #10
 800074e:	7a3b      	ldrb	r3, [r7, #8]
 8000750:	461a      	mov	r2, r3
 8000752:	7a7b      	ldrb	r3, [r7, #9]
 8000754:	4619      	mov	r1, r3
        sTime.Seconds);
 8000756:	7abb      	ldrb	r3, [r7, #10]
    sprintf(dt->time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	460b      	mov	r3, r1
 800075c:	4929      	ldr	r1, [pc, #164]	; (8000804 <get_current_datetime+0x100>)
 800075e:	f004 fa57 	bl	8004c10 <siprintf>
 8000762:	e008      	b.n	8000776 <get_current_datetime+0x72>
  } else {
    sprintf(dt->time, "%02d:%02d", sTime.Hours, sTime.Minutes);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 000a 	add.w	r0, r3, #10
 800076a:	7a3b      	ldrb	r3, [r7, #8]
 800076c:	461a      	mov	r2, r3
 800076e:	7a7b      	ldrb	r3, [r7, #9]
 8000770:	4925      	ldr	r1, [pc, #148]	; (8000808 <get_current_datetime+0x104>)
 8000772:	f004 fa4d 	bl	8004c10 <siprintf>
  }

  switch (sDate.WeekDay) {
 8000776:	7f3b      	ldrb	r3, [r7, #28]
 8000778:	3b01      	subs	r3, #1
 800077a:	2b06      	cmp	r3, #6
 800077c:	d83a      	bhi.n	80007f4 <get_current_datetime+0xf0>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <get_current_datetime+0x80>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	080007a1 	.word	0x080007a1
 8000788:	080007ad 	.word	0x080007ad
 800078c:	080007b9 	.word	0x080007b9
 8000790:	080007c5 	.word	0x080007c5
 8000794:	080007d1 	.word	0x080007d1
 8000798:	080007dd 	.word	0x080007dd
 800079c:	080007e9 	.word	0x080007e9
  case RTC_WEEKDAY_MONDAY:
    strcpy(dt->weekday, "MON");
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3312      	adds	r3, #18
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <get_current_datetime+0x108>)
 80007a6:	6810      	ldr	r0, [r2, #0]
 80007a8:	6018      	str	r0, [r3, #0]
    break;
 80007aa:	e023      	b.n	80007f4 <get_current_datetime+0xf0>
  case RTC_WEEKDAY_TUESDAY:
    strcpy(dt->weekday, "TUE");
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3312      	adds	r3, #18
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <get_current_datetime+0x10c>)
 80007b2:	6810      	ldr	r0, [r2, #0]
 80007b4:	6018      	str	r0, [r3, #0]
    break;
 80007b6:	e01d      	b.n	80007f4 <get_current_datetime+0xf0>
  case RTC_WEEKDAY_WEDNESDAY:
    strcpy(dt->weekday, "WED");
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3312      	adds	r3, #18
 80007bc:	4a15      	ldr	r2, [pc, #84]	; (8000814 <get_current_datetime+0x110>)
 80007be:	6810      	ldr	r0, [r2, #0]
 80007c0:	6018      	str	r0, [r3, #0]
    break;
 80007c2:	e017      	b.n	80007f4 <get_current_datetime+0xf0>
  case RTC_WEEKDAY_THURSDAY:
    strcpy(dt->weekday, "THU");
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3312      	adds	r3, #18
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <get_current_datetime+0x114>)
 80007ca:	6810      	ldr	r0, [r2, #0]
 80007cc:	6018      	str	r0, [r3, #0]
    break;
 80007ce:	e011      	b.n	80007f4 <get_current_datetime+0xf0>
  case RTC_WEEKDAY_FRIDAY:
    strcpy(dt->weekday, "FRI");
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3312      	adds	r3, #18
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <get_current_datetime+0x118>)
 80007d6:	6810      	ldr	r0, [r2, #0]
 80007d8:	6018      	str	r0, [r3, #0]
    break;
 80007da:	e00b      	b.n	80007f4 <get_current_datetime+0xf0>
  case RTC_WEEKDAY_SATURDAY:
    strcpy(dt->weekday, "SAT");
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3312      	adds	r3, #18
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <get_current_datetime+0x11c>)
 80007e2:	6810      	ldr	r0, [r2, #0]
 80007e4:	6018      	str	r0, [r3, #0]
    break;
 80007e6:	e005      	b.n	80007f4 <get_current_datetime+0xf0>
  case RTC_WEEKDAY_SUNDAY:
    strcpy(dt->weekday, "SUN");
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3312      	adds	r3, #18
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <get_current_datetime+0x120>)
 80007ee:	6810      	ldr	r0, [r2, #0]
 80007f0:	6018      	str	r0, [r3, #0]
    break;
 80007f2:	bf00      	nop
  }
}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000d0 	.word	0x200000d0
 8000800:	08005ee4 	.word	0x08005ee4
 8000804:	08005ef8 	.word	0x08005ef8
 8000808:	08005f08 	.word	0x08005f08
 800080c:	08005f14 	.word	0x08005f14
 8000810:	08005f18 	.word	0x08005f18
 8000814:	08005f1c 	.word	0x08005f1c
 8000818:	08005f20 	.word	0x08005f20
 800081c:	08005f24 	.word	0x08005f24
 8000820:	08005f28 	.word	0x08005f28
 8000824:	08005f2c 	.word	0x08005f2c

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fbd2 	bl	8000fd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f83f 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f935 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083a:	f000 f903 	bl	8000a44 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800083e:	f000 f8d9 	bl	80009f4 <MX_RTC_Init>
  MX_I2C1_Init();
 8000842:	f000 f897 	bl	8000974 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	4917      	ldr	r1, [pc, #92]	; (80008a8 <main+0x80>)
 800084a:	4818      	ldr	r0, [pc, #96]	; (80008ac <main+0x84>)
 800084c:	f003 fa38 	bl	8003cc0 <HAL_UART_Receive_IT>

  lcd_init(&hi2c1);
 8000850:	4817      	ldr	r0, [pc, #92]	; (80008b0 <main+0x88>)
 8000852:	f7ff fecb 	bl	80005ec <lcd_init>
  lcd_test();
 8000856:	f7ff ff2c 	bl	80006b2 <lcd_test>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	get_current_datetime(&cd, false);
 800085a:	463b      	mov	r3, r7
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff50 	bl	8000704 <get_current_datetime>
	lcd_clear();
 8000864:	f7ff fef4 	bl	8000650 <lcd_clear>
	lcd_string((uint8_t *)cd.date, sizeof(cd.date));
 8000868:	463b      	mov	r3, r7
 800086a:	210a      	movs	r1, #10
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff04 	bl	800067a <lcd_string>
	lcd_move_right();
 8000872:	f7ff fefb 	bl	800066c <lcd_move_right>
	lcd_string((uint8_t *)cd.weekday, sizeof(cd.weekday));
 8000876:	463b      	mov	r3, r7
 8000878:	3312      	adds	r3, #18
 800087a:	2103      	movs	r1, #3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fefc 	bl	800067a <lcd_string>
	lcd_newline();
 8000882:	f7ff feec 	bl	800065e <lcd_newline>
	lcd_string((uint8_t *)cd.time, sizeof(cd.time));
 8000886:	463b      	mov	r3, r7
 8000888:	330a      	adds	r3, #10
 800088a:	2108      	movs	r1, #8
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fef4 	bl	800067a <lcd_string>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // LD2
 8000892:	2120      	movs	r1, #32
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fede 	bl	8001658 <HAL_GPIO_TogglePin>
	HAL_Delay(30000); // 30 sec
 800089c:	f247 5030 	movw	r0, #30000	; 0x7530
 80008a0:	f000 fc0e 	bl	80010c0 <HAL_Delay>
	get_current_datetime(&cd, false);
 80008a4:	e7d9      	b.n	800085a <main+0x32>
 80008a6:	bf00      	nop
 80008a8:	2000017c 	.word	0x2000017c
 80008ac:	200000f4 	.word	0x200000f4
 80008b0:	2000007c 	.word	0x2000007c

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b096      	sub	sp, #88	; 0x58
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2244      	movs	r2, #68	; 0x44
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 f9f2 	bl	8004cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008da:	f001 fb51 	bl	8001f80 <HAL_PWREx_ControlVoltageScaling>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008e4:	f000 f9c6 	bl	8000c74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008e8:	f001 fb2c 	bl	8001f44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <SystemClock_Config+0xbc>)
 80008ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <SystemClock_Config+0xbc>)
 80008f4:	f023 0318 	bic.w	r3, r3, #24
 80008f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008fc:	2306      	movs	r3, #6
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090a:	2310      	movs	r3, #16
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000912:	2302      	movs	r3, #2
 8000914:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800091a:	230a      	movs	r3, #10
 800091c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800091e:	2307      	movs	r3, #7
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fb7c 	bl	800202c <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800093a:	f000 f99b 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2303      	movs	r3, #3
 8000944:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2104      	movs	r1, #4
 8000956:	4618      	mov	r0, r3
 8000958:	f001 ff44 	bl	80027e4 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000962:	f000 f987 	bl	8000c74 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3758      	adds	r7, #88	; 0x58
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C1_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C1_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009b0:	f000 fe6c 	bl	800168c <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 f95b 	bl	8000c74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009c2:	f001 fa27 	bl	8001e14 <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 f952 	bl	8000c74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009d4:	f001 fa69 	bl	8001eaa <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 f949 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000007c 	.word	0x2000007c
 80009ec:	40005400 	.word	0x40005400
 80009f0:	10909cec 	.word	0x10909cec

080009f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_RTC_Init+0x48>)
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <MX_RTC_Init+0x4c>)
 80009fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a06:	227f      	movs	r2, #127	; 0x7f
 8000a08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_RTC_Init+0x48>)
 8000a2a:	f002 fdbb 	bl	80035a4 <HAL_RTC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a34:	f000 f91e 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	40002800 	.word	0x40002800

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART2_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a88:	f003 f8cb 	bl	8003c22 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f8ef 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000f4 	.word	0x200000f4
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f000 fd81 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0xc8>)
 8000b3e:	f000 fbc9 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b42:	2320      	movs	r3, #32
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f000 fbba 	bl	80012d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000800 	.word	0x48000800

08000b70 <HAL_UART_RxCpltCallback>:
    HAL_UART_Transmit(&huart2, (uint8_t *) cd.weekday, sizeof(cd.weekday), 100); // RTC weekday
    HAL_UART_Transmit(&huart2, (uint8_t *) newline, 1, 100);  // new line
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b092      	sub	sp, #72	; 0x48
 8000b74:	af04      	add	r7, sp, #16
 8000b76:	6078      	str	r0, [r7, #4]
  static uint8_t cnt = 0;
  int year, month, date, hours, minutes, weekday;
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b78:	2120      	movs	r1, #32
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fd6b 	bl	8001658 <HAL_GPIO_TogglePin>
  cmd_buf[cnt++] = rxbuf[0];
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_UART_RxCpltCallback+0xec>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	b2d1      	uxtb	r1, r2
 8000b8a:	4a34      	ldr	r2, [pc, #208]	; (8000c5c <HAL_UART_RxCpltCallback+0xec>)
 8000b8c:	7011      	strb	r1, [r2, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <HAL_UART_RxCpltCallback+0xf0>)
 8000b92:	7819      	ldrb	r1, [r3, #0]
 8000b94:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <HAL_UART_RxCpltCallback+0xf4>)
 8000b96:	5499      	strb	r1, [r3, r2]
  if (rxbuf[0] == '\n') {
 8000b98:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <HAL_UART_RxCpltCallback+0xf0>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b0a      	cmp	r3, #10
 8000b9e:	d153      	bne.n	8000c48 <HAL_UART_RxCpltCallback+0xd8>
    //HAL_UART_Transmit(&huart2, (uint8_t *)cmd_buf, cnt, 1000);
    cmd_buf[cnt] = '\0';
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_UART_RxCpltCallback+0xec>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <HAL_UART_RxCpltCallback+0xf4>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	5499      	strb	r1, [r3, r2]
    sscanf((char *) cmd_buf, "%d %d %d %d %d %d", &year, &month, &date, &hours,
 8000bac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000bb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	9303      	str	r3, [sp, #12]
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4926      	ldr	r1, [pc, #152]	; (8000c68 <HAL_UART_RxCpltCallback+0xf8>)
 8000bd0:	4824      	ldr	r0, [pc, #144]	; (8000c64 <HAL_UART_RxCpltCallback+0xf4>)
 8000bd2:	f004 f83d 	bl	8004c50 <siscanf>
        &minutes, &weekday);
    cnt = 0;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_UART_RxCpltCallback+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

    /* Initialize RTC and set the Time and Date */
    sTime.Hours = hours;
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = minutes;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <HAL_UART_RxCpltCallback+0xfc>)
 8000bfe:	f002 fd59 	bl	80036b4 <HAL_RTC_SetTime>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_RxCpltCallback+0x9c>
      Error_Handler();
 8000c08:	f000 f834 	bl	8000c74 <Error_Handler>
    }

    sDate.WeekDay = weekday;
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	723b      	strb	r3, [r7, #8]
    sDate.Month = month;
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
    sDate.Date = date;
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	72bb      	strb	r3, [r7, #10]
    sDate.Year = year;
 8000c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <HAL_UART_RxCpltCallback+0xfc>)
 8000c2e:	f002 fe3a 	bl	80038a6 <HAL_RTC_SetDate>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_UART_RxCpltCallback+0xcc>
      Error_Handler();
 8000c38:	f000 f81c 	bl	8000c74 <Error_Handler>
    }

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8000c3c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000c40:	2100      	movs	r1, #0
 8000c42:	480a      	ldr	r0, [pc, #40]	; (8000c6c <HAL_UART_RxCpltCallback+0xfc>)
 8000c44:	f002 ffd4 	bl	8003bf0 <HAL_RTCEx_BKUPWrite>

  }
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4905      	ldr	r1, [pc, #20]	; (8000c60 <HAL_UART_RxCpltCallback+0xf0>)
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <HAL_UART_RxCpltCallback+0x100>)
 8000c4e:	f003 f837 	bl	8003cc0 <HAL_UART_Receive_IT>
}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000017d 	.word	0x2000017d
 8000c60:	2000017c 	.word	0x2000017c
 8000c64:	20000180 	.word	0x20000180
 8000c68:	08005f30 	.word	0x08005f30
 8000c6c:	200000d0 	.word	0x200000d0
 8000c70:	200000f4 	.word	0x200000f4

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6613      	str	r3, [r2, #96]	; 0x60
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x44>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ac      	sub	sp, #176	; 0xb0
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2288      	movs	r2, #136	; 0x88
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 ffdf 	bl	8004cac <memset>
  if(hi2c->Instance==I2C1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <HAL_I2C_MspInit+0xb0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d13b      	bne.n	8000d70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 ff91 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d10:	f7ff ffb0 	bl	8000c74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_I2C_MspInit+0xb4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_I2C_MspInit+0xb4>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_I2C_MspInit+0xb4>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d46:	2304      	movs	r3, #4
 8000d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d50:	4619      	mov	r1, r3
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_I2C_MspInit+0xb8>)
 8000d54:	f000 fabe 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0xb4>)
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_I2C_MspInit+0xb4>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	6593      	str	r3, [r2, #88]	; 0x58
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_I2C_MspInit+0xb4>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	37b0      	adds	r7, #176	; 0xb0
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400

08000d84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0a4      	sub	sp, #144	; 0x90
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2288      	movs	r2, #136	; 0x88
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 ff89 	bl	8004cac <memset>
  if(hrtc->Instance==RTC)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_RTC_MspInit+0x5c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d118      	bne.n	8000dd6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 ff38 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000dc2:	f7ff ff57 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_RTC_MspInit+0x60>)
 8000dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dcc:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <HAL_RTC_MspInit+0x60>)
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3790      	adds	r7, #144	; 0x90
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40002800 	.word	0x40002800
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0ac      	sub	sp, #176	; 0xb0
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2288      	movs	r2, #136	; 0x88
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 ff4f 	bl	8004cac <memset>
  if(huart->Instance==USART2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_UART_MspInit+0xb0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d13b      	bne.n	8000e90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 ff01 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e30:	f7ff ff20 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0xb4>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0xb4>)
 8000e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_UART_MspInit+0xb4>)
 8000e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_UART_MspInit+0xb4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_UART_MspInit+0xb4>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_UART_MspInit+0xb4>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e64:	230c      	movs	r3, #12
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f000 fa22 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	37b0      	adds	r7, #176	; 0xb0
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8c8 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f003 feca 	bl	8004cbc <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20018000 	.word	0x20018000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	200001a0 	.word	0x200001a0
 8000f5c:	200002f0 	.word	0x200002f0

08000f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f88:	f7ff ffea 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f003 fe89 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb6:	f7ff fc37 	bl	8000828 <main>

08000fba <LoopForever>:

LoopForever:
    b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fc8:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 8000fcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fd0:	200002f0 	.word	0x200002f0

08000fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_2_IRQHandler>

08000fd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f943 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f80e 	bl	8001008 <HAL_InitTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	e001      	b.n	8000ffc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff8:	f7ff fe42 	bl	8000c80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_InitTick+0x6c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d023      	beq.n	8001064 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x70>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_InitTick+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f941 	bl	80012ba <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10f      	bne.n	800105e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d809      	bhi.n	8001058 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f919 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_InitTick+0x74>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e007      	b.n	8001068 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e004      	b.n	8001068 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e001      	b.n	8001068 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	200001a4 	.word	0x200001a4

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200001a4 	.word	0x200001a4

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff47 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5c 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb0 	bl	8001228 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e17f      	b.n	80015e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8171 	beq.w	80015de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x40>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d118      	bne.n	80013b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001388:	2201      	movs	r2, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f003 0201 	and.w	r2, r3, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d017      	beq.n	80013f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d123      	bne.n	8001444 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	6939      	ldr	r1, [r7, #16]
 8001440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0203 	and.w	r2, r3, #3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80ac 	beq.w	80015de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_GPIO_Init+0x330>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <HAL_GPIO_Init+0x330>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	; 0x60
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_GPIO_Init+0x330>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149e:	4a5a      	ldr	r2, [pc, #360]	; (8001608 <HAL_GPIO_Init+0x334>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c8:	d025      	beq.n	8001516 <HAL_GPIO_Init+0x242>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_GPIO_Init+0x338>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01f      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_GPIO_Init+0x33c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0x23a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x340>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x236>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x344>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x232>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4b      	ldr	r2, [pc, #300]	; (800161c <HAL_GPIO_Init+0x348>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <HAL_GPIO_Init+0x34c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x22a>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x244>
 80014fe:	2307      	movs	r3, #7
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x244>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x244>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001516:	2300      	movs	r3, #0
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x334>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_GPIO_Init+0x350>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_GPIO_Init+0x350>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_GPIO_Init+0x350>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001584:	4a27      	ldr	r2, [pc, #156]	; (8001624 <HAL_GPIO_Init+0x350>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_GPIO_Init+0x350>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_GPIO_Init+0x350>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_GPIO_Init+0x350>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_GPIO_Init+0x350>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f47f ae78 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	48000400 	.word	0x48000400
 8001610:	48000800 	.word	0x48000800
 8001614:	48000c00 	.word	0x48000c00
 8001618:	48001000 	.word	0x48001000
 800161c:	48001400 	.word	0x48001400
 8001620:	48001800 	.word	0x48001800
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001644:	e002      	b.n	800164c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43d9      	mvns	r1, r3
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	400b      	ands	r3, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e08d      	b.n	80017ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fb08 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	; 0x24
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e006      	b.n	8001714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d108      	bne.n	800172e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	e007      	b.n	800173e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800173c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69d9      	ldr	r1, [r3, #28]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	460b      	mov	r3, r1
 80017d2:	817b      	strh	r3, [r7, #10]
 80017d4:	4613      	mov	r3, r2
 80017d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	f040 80fd 	bne.w	80019e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x30>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e0f6      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017fc:	f7ff fc54 	bl	80010a8 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2319      	movs	r3, #25
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f914 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0e1      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2221      	movs	r2, #33	; 0x21
 8001822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2210      	movs	r2, #16
 800182a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2bff      	cmp	r3, #255	; 0xff
 800184e:	d906      	bls.n	800185e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	22ff      	movs	r2, #255	; 0xff
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e007      	b.n	800186e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <HAL_I2C_Master_Transmit+0x228>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fa79 	bl	8001db0 <I2C_TransferConfig>
 80018be:	e066      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	8979      	ldrh	r1, [r7, #10]
 80018c8:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_I2C_Master_Transmit+0x228>)
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fa6e 	bl	8001db0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018d4:	e05b      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f8fd 	bl	8001ada <I2C_WaitOnTXISFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07b      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d034      	beq.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d130      	bne.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	2200      	movs	r2, #0
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f880 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e04d      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2bff      	cmp	r3, #255	; 0xff
 800194e:	d90e      	bls.n	800196e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	22ff      	movs	r2, #255	; 0xff
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	b2da      	uxtb	r2, r3
 800195c:	8979      	ldrh	r1, [r7, #10]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa22 	bl	8001db0 <I2C_TransferConfig>
 800196c:	e00f      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	b2da      	uxtb	r2, r3
 800197e:	8979      	ldrh	r1, [r7, #10]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fa11 	bl	8001db0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d19e      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f8e3 	bl	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e01a      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2220      	movs	r2, #32
 80019b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_I2C_Master_Transmit+0x22c>)
 80019c0:	400b      	ands	r3, r1
 80019c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	80002000 	.word	0x80002000
 80019f0:	fe00e800 	.word	0xfe00e800

080019f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d007      	beq.n	8001a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	619a      	str	r2, [r3, #24]
  }
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	e031      	b.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d02d      	beq.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff fb27 	bl	80010a8 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d122      	bne.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4013      	ands	r3, r2
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d113      	bne.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0220 	orr.w	r2, r3, #32
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4013      	ands	r3, r2
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d0be      	beq.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ae6:	e033      	b.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f87f 	bl	8001bf0 <I2C_IsErrorOccurred>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e031      	b.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d025      	beq.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b04:	f7ff fad0 	bl	80010a8 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d302      	bcc.n	8001b1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11a      	bne.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d013      	beq.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e007      	b.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d1c4      	bne.n	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b74:	e02f      	b.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f838 	bl	8001bf0 <I2C_IsErrorOccurred>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e02d      	b.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7ff fa8d 	bl	80010a8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11a      	bne.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d013      	beq.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f043 0220 	orr.w	r2, r3, #32
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e007      	b.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d1c8      	bne.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d068      	beq.n	8001cee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c24:	e049      	b.n	8001cba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d045      	beq.n	8001cba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff fa3b 	bl	80010a8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <I2C_IsErrorOccurred+0x54>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13a      	bne.n	8001cba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c66:	d121      	bne.n	8001cac <I2C_IsErrorOccurred+0xbc>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c6e:	d01d      	beq.n	8001cac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d01a      	beq.n	8001cac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c86:	f7ff fa0f 	bl	80010a8 <HAL_GetTick>
 8001c8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	e00e      	b.n	8001cac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c8e:	f7ff fa0b 	bl	80010a8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b19      	cmp	r3, #25
 8001c9a:	d907      	bls.n	8001cac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001caa:	e006      	b.n	8001cba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d1e9      	bne.n	8001c8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d003      	beq.n	8001cd0 <I2C_IsErrorOccurred+0xe0>
 8001cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0aa      	beq.n	8001c26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01c      	beq.n	8001d9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fe45 	bl	80019f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <I2C_IsErrorOccurred+0x1bc>)
 8001d76:	400b      	ands	r3, r1
 8001d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	fe00e800 	.word	0xfe00e800

08001db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc8:	7a7b      	ldrb	r3, [r7, #9]
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	0d5b      	lsrs	r3, r3, #21
 8001dea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <I2C_TransferConfig+0x60>)
 8001df0:	430b      	orrs	r3, r1
 8001df2:	43db      	mvns	r3, r3
 8001df4:	ea02 0103 	and.w	r1, r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	03ff63ff 	.word	0x03ff63ff

08001e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d138      	bne.n	8001e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e032      	b.n	8001e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2224      	movs	r2, #36	; 0x24
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d139      	bne.n	8001f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e033      	b.n	8001f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2224      	movs	r2, #36	; 0x24
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40007000 	.word	0x40007000

08001f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8e:	d130      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9c:	d038      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2232      	movs	r2, #50	; 0x32
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc4:	e002      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f2      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fec:	d110      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e00f      	b.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffe:	d007      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83

0800202c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e3ca      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4b97      	ldr	r3, [pc, #604]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80e4 	beq.w	8002228 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	f040 808b 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 8087 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x62>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3a2      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_RCC_OscConfig+0x7c>
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a6:	e005      	b.n	80020b4 <HAL_RCC_OscConfig+0x88>
 80020a8:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d223      	bcs.n	8002100 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd55 	bl	8002b6c <RCC_SetFlashLatencyFromMSIRange>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e383      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020cc:	4b73      	ldr	r3, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a72      	ldr	r2, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	496d      	ldr	r1, [pc, #436]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4968      	ldr	r1, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
 80020fe:	e025      	b.n	800214c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4960      	ldr	r1, [pc, #384]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	495b      	ldr	r1, [pc, #364]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fd15 	bl	8002b6c <RCC_SetFlashLatencyFromMSIRange>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e343      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 fc4a 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	4950      	ldr	r1, [pc, #320]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_RCC_OscConfig+0x278>)
 800216a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe ff49 	bl	8001008 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d052      	beq.n	8002226 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	e327      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d032      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a42      	ldr	r2, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002198:	f7fe ff86 	bl	80010a8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a0:	f7fe ff82 	bl	80010a8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e310      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a36      	ldr	r2, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4931      	ldr	r1, [pc, #196]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	492c      	ldr	r1, [pc, #176]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e01a      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fe:	f7fe ff53 	bl	80010a8 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002206:	f7fe ff4f 	bl	80010a8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e2dd      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x1da>
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d074      	beq.n	800231e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x21a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d10e      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d064      	beq.n	800231c <HAL_RCC_OscConfig+0x2f0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d160      	bne.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e2ba      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x24a>
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e026      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227e:	d115      	bne.n	80022ac <HAL_RCC_OscConfig+0x280>
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x298>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	08005f50 	.word	0x08005f50
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004
 80022ac:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a9f      	ldr	r2, [pc, #636]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b9d      	ldr	r3, [pc, #628]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9c      	ldr	r2, [pc, #624]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe feec 	bl	80010a8 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe fee8 	bl	80010a8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e276      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b92      	ldr	r3, [pc, #584]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2a8>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fed8 	bl	80010a8 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe fed4 	bl	80010a8 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e262      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d0>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d060      	beq.n	80023ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x310>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d119      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x328>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e23f      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4973      	ldr	r1, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e040      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fe93 	bl	80010a8 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fe8f 	bl	80010a8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e21d      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	495f      	ldr	r1, [pc, #380]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fe6f 	bl	80010a8 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe fe6b 	bl	80010a8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1f9      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03c      	beq.n	8002472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002400:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fe4a 	bl	80010a8 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7fe fe46 	bl	80010a8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1d4      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <HAL_RCC_OscConfig+0x3ec>
 8002438:	e01b      	b.n	8002472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fe2d 	bl	80010a8 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe fe29 	bl	80010a8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1b7      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d118      	bne.n	80024ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fdf0 	bl	80010a8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7fe fdec 	bl	80010a8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e17a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x508>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x4d8>
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	e029      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d115      	bne.n	8002538 <HAL_RCC_OscConfig+0x50c>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <HAL_RCC_OscConfig+0x504>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x52c>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	4b9c      	ldr	r3, [pc, #624]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a9b      	ldr	r2, [pc, #620]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	4b98      	ldr	r3, [pc, #608]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	4a97      	ldr	r2, [pc, #604]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fda2 	bl	80010a8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fd9e 	bl	80010a8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e12a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ed      	beq.n	8002568 <HAL_RCC_OscConfig+0x53c>
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fd8b 	bl	80010a8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fd87 	bl	80010a8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e113      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ed      	bne.n	8002596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b7a      	ldr	r3, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a79      	ldr	r2, [pc, #484]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80fe 	beq.w	80027d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f040 80d0 	bne.w	8002780 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025e0:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d130      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d127      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11f      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002620:	2a07      	cmp	r2, #7
 8002622:	bf14      	ite	ne
 8002624:	2201      	movne	r2, #1
 8002626:	2200      	moveq	r2, #0
 8002628:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d109      	bne.n	8002656 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d06e      	beq.n	8002734 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d069      	beq.n	8002730 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0ad      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002684:	f7fe fd10 	bl	80010a8 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fd0c 	bl	80010a8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e09a      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <HAL_RCC_OscConfig+0x784>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026cc:	0852      	lsrs	r2, r2, #1
 80026ce:	3a01      	subs	r2, #1
 80026d0:	0552      	lsls	r2, r2, #21
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	3a01      	subs	r2, #1
 80026dc:	0652      	lsls	r2, r2, #25
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e4:	0912      	lsrs	r2, r2, #4
 80026e6:	0452      	lsls	r2, r2, #17
 80026e8:	430a      	orrs	r2, r1
 80026ea:	4930      	ldr	r1, [pc, #192]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002708:	f7fe fcce 	bl	80010a8 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fcca 	bl	80010a8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e058      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272e:	e050      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04f      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d148      	bne.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002758:	f7fe fca6 	bl	80010a8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fca2 	bl	80010a8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e030      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x734>
 800277e:	e028      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d023      	beq.n	80027ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_RCC_OscConfig+0x780>)
 800278c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fc89 	bl	80010a8 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002798:	e00c      	b.n	80027b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fc85 	bl	80010a8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d905      	bls.n	80027b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ec      	bne.n	800279a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4905      	ldr	r1, [pc, #20]	; (80027dc <HAL_RCC_OscConfig+0x7b0>)
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_OscConfig+0x7b4>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e001      	b.n	80027d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	feeefffc 	.word	0xfeeefffc

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0e7      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4970      	ldr	r1, [pc, #448]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cf      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002840:	429a      	cmp	r2, r3
 8002842:	d908      	bls.n	8002856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002844:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4960      	ldr	r1, [pc, #384]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04c      	beq.n	80028fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0a6      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e09a      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289a:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e08e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e086      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4943      	ldr	r1, [pc, #268]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe fbec 	bl	80010a8 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fbe8 	bl	80010a8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e06e      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	429a      	cmp	r2, r3
 8002916:	d208      	bcs.n	800292a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	492b      	ldr	r1, [pc, #172]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d210      	bcs.n	800295a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 0207 	bic.w	r2, r3, #7
 8002940:	4923      	ldr	r1, [pc, #140]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCC_ClockConfig+0x1ec>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e036      	b.n	80029c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4918      	ldr	r1, [pc, #96]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4910      	ldr	r1, [pc, #64]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002998:	f000 f824 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	490b      	ldr	r1, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1f4>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1fc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fb23 	bl	8001008 <HAL_InitTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08005f50 	.word	0x08005f50
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d121      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d11e      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e005      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e004      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d134      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d003      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0xac>
 8002a88:	e005      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a8c:	617b      	str	r3, [r7, #20]
      break;
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a92:	617b      	str	r3, [r7, #20]
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	fb03 f202 	mul.w	r2, r3, r2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	0e5b      	lsrs	r3, r3, #25
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	3301      	adds	r3, #1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002adc:	69bb      	ldr	r3, [r7, #24]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	; 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08005f68 	.word	0x08005f68
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b18:	f7ff fff0 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4904      	ldr	r1, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08005f60 	.word	0x08005f60

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b44:	f7ff ffda 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0adb      	lsrs	r3, r3, #11
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4904      	ldr	r1, [pc, #16]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08005f60 	.word	0x08005f60

08002b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b84:	f7ff f9ee 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002b88:	6178      	str	r0, [r7, #20]
 8002b8a:	e014      	b.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6593      	str	r3, [r2, #88]	; 0x58
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ba4:	f7ff f9de 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbc:	d10b      	bne.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d919      	bls.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002bc8:	d902      	bls.n	8002bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bca:	2302      	movs	r3, #2
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	e013      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	e010      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d902      	bls.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bdc:	2303      	movs	r3, #3
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e00a      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d102      	bne.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be8:	2302      	movs	r3, #2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e004      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b70      	cmp	r3, #112	; 0x70
 8002bf2:	d101      	bne.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0207 	bic.w	r2, r3, #7
 8002c00:	4909      	ldr	r1, [pc, #36]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40022000 	.word	0x40022000

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c34:	2300      	movs	r3, #0
 8002c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d041      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c50:	d02a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c56:	d824      	bhi.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c62:	d81e      	bhi.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c6e:	e018      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c70:	4b86      	ldr	r3, [pc, #536]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a85      	ldr	r2, [pc, #532]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7c:	e015      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fabb 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8e:	e00c      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3320      	adds	r3, #32
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fba6 	bl	80033e8 <RCCEx_PLLSAI2_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca0:	e003      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ca6:	e000      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cb0:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cbe:	4973      	ldr	r1, [pc, #460]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cc6:	e001      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d041      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ce0:	d02a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ce2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ce6:	d824      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cec:	d008      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cf2:	d81e      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d010      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d00:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a61      	ldr	r2, [pc, #388]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fa73 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3320      	adds	r3, #32
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fb5e 	bl	80033e8 <RCCEx_PLLSAI2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	74fb      	strb	r3, [r7, #19]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d40:	4b52      	ldr	r3, [pc, #328]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4e:	494f      	ldr	r1, [pc, #316]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a0 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d90:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3a      	ldr	r2, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dac:	f7fe f97c 	bl	80010a8 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db2:	e009      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db4:	f7fe f978 	bl	80010a8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	74fb      	strb	r3, [r7, #19]
        break;
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ef      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d15c      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01f      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d019      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe f937 	bl	80010a8 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe f933 	bl	80010a8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d902      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	74fb      	strb	r3, [r7, #19]
            break;
 8002e54:	e006      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ec      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7a:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e82:	e009      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	74bb      	strb	r3, [r7, #18]
 8002e88:	e006      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e98:	7c7b      	ldrb	r3, [r7, #17]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b9e      	ldr	r3, [pc, #632]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4a9d      	ldr	r2, [pc, #628]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb6:	4b98      	ldr	r3, [pc, #608]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 0203 	bic.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	4994      	ldr	r1, [pc, #592]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 020c 	bic.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	498c      	ldr	r1, [pc, #560]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efa:	4b87      	ldr	r3, [pc, #540]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	4983      	ldr	r1, [pc, #524]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f1c:	4b7e      	ldr	r3, [pc, #504]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	497b      	ldr	r1, [pc, #492]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f3e:	4b76      	ldr	r3, [pc, #472]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	4972      	ldr	r1, [pc, #456]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f60:	4b6d      	ldr	r3, [pc, #436]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	496a      	ldr	r1, [pc, #424]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	4961      	ldr	r1, [pc, #388]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fa4:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	4959      	ldr	r1, [pc, #356]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc6:	4b54      	ldr	r3, [pc, #336]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	4950      	ldr	r1, [pc, #320]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	4948      	ldr	r1, [pc, #288]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800300a:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	493f      	ldr	r1, [pc, #252]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d028      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800302c:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303a:	4937      	ldr	r1, [pc, #220]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304a:	d106      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a31      	ldr	r2, [pc, #196]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003056:	60d3      	str	r3, [r2, #12]
 8003058:	e011      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003062:	d10c      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f8c8 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	491f      	ldr	r1, [pc, #124]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a8:	d106      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b4:	60d3      	str	r3, [r2, #12]
 80030b6:	e011      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2101      	movs	r1, #1
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f899 	bl	8003200 <RCCEx_PLLSAI1_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02b      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	4908      	ldr	r1, [pc, #32]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003106:	d109      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a02      	ldr	r2, [pc, #8]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003112:	60d3      	str	r3, [r2, #12]
 8003114:	e014      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003124:	d10c      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f000 f867 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02f      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315a:	4928      	ldr	r1, [pc, #160]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316a:	d10d      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	2102      	movs	r1, #2
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f844 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d014      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	74bb      	strb	r3, [r7, #18]
 8003186:	e011      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003190:	d10c      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3320      	adds	r3, #32
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f925 	bl	80033e8 <RCCEx_PLLSAI2_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031b8:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c6:	490d      	ldr	r1, [pc, #52]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000

08003200 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d018      	beq.n	800324c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d10d      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
       ||
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
       ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d047      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e044      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d018      	beq.n	8003286 <RCCEx_PLLSAI1_Config+0x86>
 8003254:	2b03      	cmp	r3, #3
 8003256:	d825      	bhi.n	80032a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003258:	2b01      	cmp	r3, #1
 800325a:	d002      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x62>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d009      	beq.n	8003274 <RCCEx_PLLSAI1_Config+0x74>
 8003260:	e020      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003262:	4b60      	ldr	r3, [pc, #384]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003272:	e01a      	b.n	80032aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003274:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e013      	b.n	80032ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003286:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003292:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032a2:	e006      	b.n	80032b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e004      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	430b      	orrs	r3, r1
 80032d0:	4944      	ldr	r1, [pc, #272]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d17d      	bne.n	80033d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032dc:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a40      	ldr	r2, [pc, #256]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fd fede 	bl	80010a8 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ee:	e009      	b.n	8003304 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f0:	f7fd feda 	bl	80010a8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	73fb      	strb	r3, [r7, #15]
        break;
 8003302:	e005      	b.n	8003310 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003304:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ef      	bne.n	80032f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d160      	bne.n	80033d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	0211      	lsls	r1, r2, #8
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	0912      	lsrs	r2, r2, #4
 8003334:	0452      	lsls	r2, r2, #17
 8003336:	430a      	orrs	r2, r1
 8003338:	492a      	ldr	r1, [pc, #168]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	610b      	str	r3, [r1, #16]
 800333e:	e027      	b.n	8003390 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d112      	bne.n	800336c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800334e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	0211      	lsls	r1, r2, #8
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6912      	ldr	r2, [r2, #16]
 800335c:	0852      	lsrs	r2, r2, #1
 800335e:	3a01      	subs	r2, #1
 8003360:	0552      	lsls	r2, r2, #21
 8003362:	430a      	orrs	r2, r1
 8003364:	491f      	ldr	r1, [pc, #124]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	610b      	str	r3, [r1, #16]
 800336a:	e011      	b.n	8003390 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003374:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6892      	ldr	r2, [r2, #8]
 800337c:	0211      	lsls	r1, r2, #8
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6952      	ldr	r2, [r2, #20]
 8003382:	0852      	lsrs	r2, r2, #1
 8003384:	3a01      	subs	r2, #1
 8003386:	0652      	lsls	r2, r2, #25
 8003388:	430a      	orrs	r2, r1
 800338a:	4916      	ldr	r1, [pc, #88]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fe84 	bl	80010a8 <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a2:	e009      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a4:	f7fd fe80 	bl	80010a8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	73fb      	strb	r3, [r7, #15]
          break;
 80033b6:	e005      	b.n	80033c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	4904      	ldr	r1, [pc, #16]	; (80033e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d10d      	bne.n	800342e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
       ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800341a:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
       ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d047      	beq.n	80034be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e044      	b.n	80034be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d018      	beq.n	800346e <RCCEx_PLLSAI2_Config+0x86>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d825      	bhi.n	800348c <RCCEx_PLLSAI2_Config+0xa4>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d002      	beq.n	800344a <RCCEx_PLLSAI2_Config+0x62>
 8003444:	2b02      	cmp	r3, #2
 8003446:	d009      	beq.n	800345c <RCCEx_PLLSAI2_Config+0x74>
 8003448:	e020      	b.n	800348c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344a:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11d      	bne.n	8003492 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345a:	e01a      	b.n	8003492 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800345c:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346c:	e013      	b.n	8003496 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800346e:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347a:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348a:	e006      	b.n	800349a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e004      	b.n	800349c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800349a:	bf00      	nop
    }

    if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a2:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	430b      	orrs	r3, r1
 80034b8:	4939      	ldr	r1, [pc, #228]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d167      	bne.n	8003594 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d0:	f7fd fdea 	bl	80010a8 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034d6:	e009      	b.n	80034ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034d8:	f7fd fde6 	bl	80010a8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d902      	bls.n	80034ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ea:	e005      	b.n	80034f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ec:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ef      	bne.n	80034d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d14a      	bne.n	8003594 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d111      	bne.n	8003528 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003504:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800350c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	0211      	lsls	r1, r2, #8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	0912      	lsrs	r2, r2, #4
 800351c:	0452      	lsls	r2, r2, #17
 800351e:	430a      	orrs	r2, r1
 8003520:	491f      	ldr	r1, [pc, #124]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	614b      	str	r3, [r1, #20]
 8003526:	e011      	b.n	800354c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003530:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6892      	ldr	r2, [r2, #8]
 8003538:	0211      	lsls	r1, r2, #8
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6912      	ldr	r2, [r2, #16]
 800353e:	0852      	lsrs	r2, r2, #1
 8003540:	3a01      	subs	r2, #1
 8003542:	0652      	lsls	r2, r2, #25
 8003544:	430a      	orrs	r2, r1
 8003546:	4916      	ldr	r1, [pc, #88]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fda6 	bl	80010a8 <HAL_GetTick>
 800355c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800355e:	e009      	b.n	8003574 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003560:	f7fd fda2 	bl	80010a8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d902      	bls.n	8003574 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	73fb      	strb	r3, [r7, #15]
          break;
 8003572:	e005      	b.n	8003580 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	4904      	ldr	r1, [pc, #16]	; (80035a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d079      	beq.n	80036aa <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fbda 	bl	8000d84 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d058      	beq.n	8003698 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	22ca      	movs	r2, #202	; 0xca
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2253      	movs	r2, #83	; 0x53
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa4e 	bl	8003a98 <RTC_EnterInitMode>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d127      	bne.n	8003656 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68d2      	ldr	r2, [r2, #12]
 8003640:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6919      	ldr	r1, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa52 	bl	8003b00 <RTC_ExitInitMode>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0203 	bic.w	r2, r2, #3
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	22ff      	movs	r2, #255	; 0xff
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
 8003696:	e001      	b.n	800369c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_RTC_SetTime+0x1a>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e08b      	b.n	80037e6 <HAL_RTC_SetTime+0x132>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	22ca      	movs	r2, #202	; 0xca
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2253      	movs	r2, #83	; 0x53
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f9d2 	bl	8003a98 <RTC_EnterInitMode>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d163      	bne.n	80037c6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d126      	bne.n	8003752 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fa2d 	bl	8003b7c <RTC_ByteToBcd2>
 8003722:	4603      	mov	r3, r0
 8003724:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa26 	bl	8003b7c <RTC_ByteToBcd2>
 8003730:	4603      	mov	r3, r0
 8003732:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003734:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	789b      	ldrb	r3, [r3, #2]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fa1e 	bl	8003b7c <RTC_ByteToBcd2>
 8003740:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003742:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	78db      	ldrb	r3, [r3, #3]
 800374a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e018      	b.n	8003784 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003772:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003778:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	78db      	ldrb	r3, [r3, #3]
 800377e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800378e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003792:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f99f 	bl	8003b00 <RTC_ExitInitMode>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd90      	pop	{r4, r7, pc}

080037ee <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800381c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003820:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	0d9b      	lsrs	r3, r3, #22
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11a      	bne.n	800389c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f9a6 	bl	8003bbc <RTC_Bcd2ToByte>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f99d 	bl	8003bbc <RTC_Bcd2ToByte>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	789b      	ldrb	r3, [r3, #2]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f994 	bl	8003bbc <RTC_Bcd2ToByte>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038a6:	b590      	push	{r4, r7, lr}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_RTC_SetDate+0x1a>
 80038bc:	2302      	movs	r3, #2
 80038be:	e075      	b.n	80039ac <HAL_RTC_SetDate+0x106>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <HAL_RTC_SetDate+0x4e>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	330a      	adds	r3, #10
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11c      	bne.n	8003934 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	78db      	ldrb	r3, [r3, #3]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f93c 	bl	8003b7c <RTC_ByteToBcd2>
 8003904:	4603      	mov	r3, r0
 8003906:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f935 	bl	8003b7c <RTC_ByteToBcd2>
 8003912:	4603      	mov	r3, r0
 8003914:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003916:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	789b      	ldrb	r3, [r3, #2]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f92d 	bl	8003b7c <RTC_ByteToBcd2>
 8003922:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003924:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e00e      	b.n	8003952 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	785b      	ldrb	r3, [r3, #1]
 800393e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003940:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003946:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	22ca      	movs	r2, #202	; 0xca
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2253      	movs	r2, #83	; 0x53
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f898 	bl	8003a98 <RTC_EnterInitMode>
 8003968:	4603      	mov	r3, r0
 800396a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10c      	bne.n	800398c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800397c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003980:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f8bc 	bl	8003b00 <RTC_ExitInitMode>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}

080039b4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	0b5b      	lsrs	r3, r3, #13
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11a      	bne.n	8003a44 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	78db      	ldrb	r3, [r3, #3]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f8d2 	bl	8003bbc <RTC_Bcd2ToByte>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f8c9 	bl	8003bbc <RTC_Bcd2ToByte>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	789b      	ldrb	r3, [r3, #2]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f8c0 	bl	8003bbc <RTC_Bcd2ToByte>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <HAL_RTC_WaitForSynchro+0x44>)
 8003a5e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003a60:	f7fd fb22 	bl	80010a8 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a66:	e009      	b.n	8003a7c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a68:	f7fd fb1e 	bl	80010a8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a76:	d901      	bls.n	8003a7c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e007      	b.n	8003a8c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ee      	beq.n	8003a68 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	0003ff5f 	.word	0x0003ff5f

08003a98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d120      	bne.n	8003af4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003abc:	f7fd faf4 	bl	80010a8 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ac2:	e00d      	b.n	8003ae0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac4:	f7fd faf0 	bl	80010a8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad2:	d905      	bls.n	8003ae0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2203      	movs	r2, #3
 8003adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <RTC_EnterInitMode+0x5c>
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d1e7      	bne.n	8003ac4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b16:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10c      	bne.n	8003b3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff93 	bl	8003a50 <HAL_RTC_WaitForSynchro>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01e      	beq.n	8003b6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2203      	movs	r2, #3
 8003b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e017      	b.n	8003b6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b44:	f023 0320 	bic.w	r3, r3, #32
 8003b48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ff80 	bl	8003a50 <HAL_RTC_WaitForSynchro>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <RTC_ExitInitMode+0x78>)
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40002800 	.word	0x40002800

08003b7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003b8e:	e005      	b.n	8003b9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	3b0a      	subs	r3, #10
 8003b9a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	d8f6      	bhi.n	8003b90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	b2db      	uxtb	r3, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	4413      	add	r3, r2
 8003be2:	b2db      	uxtb	r3, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3350      	adds	r3, #80	; 0x50
 8003c02:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	461a      	mov	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e040      	b.n	8003cb6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fd f8cf 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2224      	movs	r2, #36	; 0x24
 8003c4e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb39 	bl	80042e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f87e 	bl	8003d70 <UART_SetConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e01b      	b.n	8003cb6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fbb8 	bl	8004424 <UART_CheckIdleState>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d137      	bne.n	8003d48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_UART_Receive_IT+0x24>
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e030      	b.n	8003d4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_UART_Receive_IT+0x94>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01f      	beq.n	8003d38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	613b      	str	r3, [r7, #16]
   return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	69f9      	ldr	r1, [r7, #28]
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e6      	bne.n	8003d06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fc80 	bl	8004644 <UART_Start_Receive_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3728      	adds	r7, #40	; 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40008000 	.word	0x40008000

08003d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d74:	b08a      	sub	sp, #40	; 0x28
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4ba4      	ldr	r3, [pc, #656]	; (8004030 <UART_SetConfig+0x2c0>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a99      	ldr	r2, [pc, #612]	; (8004034 <UART_SetConfig+0x2c4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dec:	430a      	orrs	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a90      	ldr	r2, [pc, #576]	; (8004038 <UART_SetConfig+0x2c8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d126      	bne.n	8003e48 <UART_SetConfig+0xd8>
 8003dfa:	4b90      	ldr	r3, [pc, #576]	; (800403c <UART_SetConfig+0x2cc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d81b      	bhi.n	8003e40 <UART_SetConfig+0xd0>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0xa0>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e31 	.word	0x08003e31
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e39 	.word	0x08003e39
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e116      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e112      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003e30:	2304      	movs	r3, #4
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e10e      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3e:	e10a      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	e106      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a7c      	ldr	r2, [pc, #496]	; (8004040 <UART_SetConfig+0x2d0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d138      	bne.n	8003ec4 <UART_SetConfig+0x154>
 8003e52:	4b7a      	ldr	r3, [pc, #488]	; (800403c <UART_SetConfig+0x2cc>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d82d      	bhi.n	8003ebc <UART_SetConfig+0x14c>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0xf8>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003ebd 	.word	0x08003ebd
 8003e70:	08003ebd 	.word	0x08003ebd
 8003e74:	08003ebd 	.word	0x08003ebd
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ebd 	.word	0x08003ebd
 8003e84:	08003ebd 	.word	0x08003ebd
 8003e88:	08003ea5 	.word	0x08003ea5
 8003e8c:	08003ebd 	.word	0x08003ebd
 8003e90:	08003ebd 	.word	0x08003ebd
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e0d8      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eaa:	e0d4      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb2:	e0d0      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e0cc      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e0c8      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5e      	ldr	r2, [pc, #376]	; (8004044 <UART_SetConfig+0x2d4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d125      	bne.n	8003f1a <UART_SetConfig+0x1aa>
 8003ece:	4b5b      	ldr	r3, [pc, #364]	; (800403c <UART_SetConfig+0x2cc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ed8:	2b30      	cmp	r3, #48	; 0x30
 8003eda:	d016      	beq.n	8003f0a <UART_SetConfig+0x19a>
 8003edc:	2b30      	cmp	r3, #48	; 0x30
 8003ede:	d818      	bhi.n	8003f12 <UART_SetConfig+0x1a2>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d00a      	beq.n	8003efa <UART_SetConfig+0x18a>
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d814      	bhi.n	8003f12 <UART_SetConfig+0x1a2>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <UART_SetConfig+0x182>
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d008      	beq.n	8003f02 <UART_SetConfig+0x192>
 8003ef0:	e00f      	b.n	8003f12 <UART_SetConfig+0x1a2>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef8:	e0ad      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003efa:	2302      	movs	r3, #2
 8003efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f00:	e0a9      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f02:	2304      	movs	r3, #4
 8003f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f08:	e0a5      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f10:	e0a1      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f12:	2310      	movs	r3, #16
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f18:	e09d      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	; (8004048 <UART_SetConfig+0x2d8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d125      	bne.n	8003f70 <UART_SetConfig+0x200>
 8003f24:	4b45      	ldr	r3, [pc, #276]	; (800403c <UART_SetConfig+0x2cc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f30:	d016      	beq.n	8003f60 <UART_SetConfig+0x1f0>
 8003f32:	2bc0      	cmp	r3, #192	; 0xc0
 8003f34:	d818      	bhi.n	8003f68 <UART_SetConfig+0x1f8>
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d00a      	beq.n	8003f50 <UART_SetConfig+0x1e0>
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d814      	bhi.n	8003f68 <UART_SetConfig+0x1f8>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <UART_SetConfig+0x1d8>
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d008      	beq.n	8003f58 <UART_SetConfig+0x1e8>
 8003f46:	e00f      	b.n	8003f68 <UART_SetConfig+0x1f8>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4e:	e082      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f50:	2302      	movs	r3, #2
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e07e      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e07a      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f60:	2308      	movs	r3, #8
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f66:	e076      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	e072      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a35      	ldr	r2, [pc, #212]	; (800404c <UART_SetConfig+0x2dc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d12a      	bne.n	8003fd0 <UART_SetConfig+0x260>
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <UART_SetConfig+0x2cc>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f88:	d01a      	beq.n	8003fc0 <UART_SetConfig+0x250>
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d81b      	bhi.n	8003fc8 <UART_SetConfig+0x258>
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f94:	d00c      	beq.n	8003fb0 <UART_SetConfig+0x240>
 8003f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9a:	d815      	bhi.n	8003fc8 <UART_SetConfig+0x258>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <UART_SetConfig+0x238>
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d008      	beq.n	8003fb8 <UART_SetConfig+0x248>
 8003fa6:	e00f      	b.n	8003fc8 <UART_SetConfig+0x258>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fae:	e052      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb6:	e04e      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e04a      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e046      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e042      	b.n	8004056 <UART_SetConfig+0x2e6>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <UART_SetConfig+0x2c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d13a      	bne.n	8004050 <UART_SetConfig+0x2e0>
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <UART_SetConfig+0x2cc>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe8:	d01a      	beq.n	8004020 <UART_SetConfig+0x2b0>
 8003fea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fee:	d81b      	bhi.n	8004028 <UART_SetConfig+0x2b8>
 8003ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff4:	d00c      	beq.n	8004010 <UART_SetConfig+0x2a0>
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d815      	bhi.n	8004028 <UART_SetConfig+0x2b8>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <UART_SetConfig+0x298>
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d008      	beq.n	8004018 <UART_SetConfig+0x2a8>
 8004006:	e00f      	b.n	8004028 <UART_SetConfig+0x2b8>
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e022      	b.n	8004056 <UART_SetConfig+0x2e6>
 8004010:	2302      	movs	r3, #2
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004016:	e01e      	b.n	8004056 <UART_SetConfig+0x2e6>
 8004018:	2304      	movs	r3, #4
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401e:	e01a      	b.n	8004056 <UART_SetConfig+0x2e6>
 8004020:	2308      	movs	r3, #8
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e016      	b.n	8004056 <UART_SetConfig+0x2e6>
 8004028:	2310      	movs	r3, #16
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e012      	b.n	8004056 <UART_SetConfig+0x2e6>
 8004030:	efff69f3 	.word	0xefff69f3
 8004034:	40008000 	.word	0x40008000
 8004038:	40013800 	.word	0x40013800
 800403c:	40021000 	.word	0x40021000
 8004040:	40004400 	.word	0x40004400
 8004044:	40004800 	.word	0x40004800
 8004048:	40004c00 	.word	0x40004c00
 800404c:	40005000 	.word	0x40005000
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a9f      	ldr	r2, [pc, #636]	; (80042d8 <UART_SetConfig+0x568>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d17a      	bne.n	8004156 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004064:	2b08      	cmp	r3, #8
 8004066:	d824      	bhi.n	80040b2 <UART_SetConfig+0x342>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x300>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004095 	.word	0x08004095
 8004074:	080040b3 	.word	0x080040b3
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040a3 	.word	0x080040a3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040b3 	.word	0x080040b3
 800408c:	080040b3 	.word	0x080040b3
 8004090:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fd3e 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8004098:	61f8      	str	r0, [r7, #28]
        break;
 800409a:	e010      	b.n	80040be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b8f      	ldr	r3, [pc, #572]	; (80042dc <UART_SetConfig+0x56c>)
 800409e:	61fb      	str	r3, [r7, #28]
        break;
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7fe fc9f 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80040a6:	61f8      	str	r0, [r7, #28]
        break;
 80040a8:	e009      	b.n	80040be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	61fb      	str	r3, [r7, #28]
        break;
 80040b0:	e005      	b.n	80040be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80fb 	beq.w	80042bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d305      	bcc.n	80040e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d903      	bls.n	80040ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040e8:	e0e8      	b.n	80042bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2200      	movs	r2, #0
 80040ee:	461c      	mov	r4, r3
 80040f0:	4615      	mov	r5, r2
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	022b      	lsls	r3, r5, #8
 80040fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004100:	0222      	lsls	r2, r4, #8
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	6849      	ldr	r1, [r1, #4]
 8004106:	0849      	lsrs	r1, r1, #1
 8004108:	2000      	movs	r0, #0
 800410a:	4688      	mov	r8, r1
 800410c:	4681      	mov	r9, r0
 800410e:	eb12 0a08 	adds.w	sl, r2, r8
 8004112:	eb43 0b09 	adc.w	fp, r3, r9
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004124:	4650      	mov	r0, sl
 8004126:	4659      	mov	r1, fp
 8004128:	f7fc f8aa 	bl	8000280 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413a:	d308      	bcc.n	800414e <UART_SetConfig+0x3de>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004142:	d204      	bcs.n	800414e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	e0b6      	b.n	80042bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004154:	e0b2      	b.n	80042bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d15e      	bne.n	800421e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004164:	2b08      	cmp	r3, #8
 8004166:	d828      	bhi.n	80041ba <UART_SetConfig+0x44a>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0x400>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004195 	.word	0x08004195
 8004174:	0800419d 	.word	0x0800419d
 8004178:	080041a5 	.word	0x080041a5
 800417c:	080041bb 	.word	0x080041bb
 8004180:	080041ab 	.word	0x080041ab
 8004184:	080041bb 	.word	0x080041bb
 8004188:	080041bb 	.word	0x080041bb
 800418c:	080041bb 	.word	0x080041bb
 8004190:	080041b3 	.word	0x080041b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004194:	f7fe fcbe 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8004198:	61f8      	str	r0, [r7, #28]
        break;
 800419a:	e014      	b.n	80041c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800419c:	f7fe fcd0 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 80041a0:	61f8      	str	r0, [r7, #28]
        break;
 80041a2:	e010      	b.n	80041c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <UART_SetConfig+0x56c>)
 80041a6:	61fb      	str	r3, [r7, #28]
        break;
 80041a8:	e00d      	b.n	80041c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041aa:	f7fe fc1b 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80041ae:	61f8      	str	r0, [r7, #28]
        break;
 80041b0:	e009      	b.n	80041c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b6:	61fb      	str	r3, [r7, #28]
        break;
 80041b8:	e005      	b.n	80041c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d077      	beq.n	80042bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005a      	lsls	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d916      	bls.n	8004216 <UART_SetConfig+0x4a6>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d212      	bcs.n	8004216 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f023 030f 	bic.w	r3, r3, #15
 80041f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	b29a      	uxth	r2, r3
 8004206:	8afb      	ldrh	r3, [r7, #22]
 8004208:	4313      	orrs	r3, r2
 800420a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	8afa      	ldrh	r2, [r7, #22]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	e052      	b.n	80042bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800421c:	e04e      	b.n	80042bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800421e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004222:	2b08      	cmp	r3, #8
 8004224:	d827      	bhi.n	8004276 <UART_SetConfig+0x506>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x4bc>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004251 	.word	0x08004251
 8004230:	08004259 	.word	0x08004259
 8004234:	08004261 	.word	0x08004261
 8004238:	08004277 	.word	0x08004277
 800423c:	08004267 	.word	0x08004267
 8004240:	08004277 	.word	0x08004277
 8004244:	08004277 	.word	0x08004277
 8004248:	08004277 	.word	0x08004277
 800424c:	0800426f 	.word	0x0800426f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe fc60 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8004254:	61f8      	str	r0, [r7, #28]
        break;
 8004256:	e014      	b.n	8004282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004258:	f7fe fc72 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 800425c:	61f8      	str	r0, [r7, #28]
        break;
 800425e:	e010      	b.n	8004282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <UART_SetConfig+0x56c>)
 8004262:	61fb      	str	r3, [r7, #28]
        break;
 8004264:	e00d      	b.n	8004282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004266:	f7fe fbbd 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 800426a:	61f8      	str	r0, [r7, #28]
        break;
 800426c:	e009      	b.n	8004282 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	61fb      	str	r3, [r7, #28]
        break;
 8004274:	e005      	b.n	8004282 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004280:	bf00      	nop
    }

    if (pclk != 0U)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d019      	beq.n	80042bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	085a      	lsrs	r2, r3, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	d909      	bls.n	80042b6 <UART_SetConfig+0x546>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d205      	bcs.n	80042b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e002      	b.n	80042bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d6:	bf00      	nop
 80042d8:	40008000 	.word	0x40008000
 80042dc:	00f42400 	.word	0x00f42400

080042e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	d10a      	bne.n	80043f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b098      	sub	sp, #96	; 0x60
 8004428:	af02      	add	r7, sp, #8
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004434:	f7fc fe38 	bl	80010a8 <HAL_GetTick>
 8004438:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d12e      	bne.n	80044a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f88c 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d021      	beq.n	80044a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004476:	653b      	str	r3, [r7, #80]	; 0x50
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
 8004482:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e062      	b.n	800456c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d149      	bne.n	8004548 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044bc:	2200      	movs	r2, #0
 80044be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f856 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03c      	beq.n	8004548 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	623b      	str	r3, [r7, #32]
   return(result);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
 80044ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e6      	bne.n	80044ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004520:	61fa      	str	r2, [r7, #28]
 8004522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	617b      	str	r3, [r7, #20]
   return(result);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e011      	b.n	800456c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3758      	adds	r7, #88	; 0x58
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004584:	e049      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d045      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fc fd8b 	bl	80010a8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e048      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d031      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d110      	bne.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2208      	movs	r2, #8
 80045ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8ff 	bl	80047d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2208      	movs	r2, #8
 80045d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e029      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	d111      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f8e5 	bl	80047d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e00f      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	d0a6      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004644:	b480      	push	{r7}
 8004646:	b097      	sub	sp, #92	; 0x5c
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d10e      	bne.n	8004696 <UART_Start_Receive_IT+0x52>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <UART_Start_Receive_IT+0x48>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800468a:	e02d      	b.n	80046e8 <UART_Start_Receive_IT+0xa4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	22ff      	movs	r2, #255	; 0xff
 8004690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004694:	e028      	b.n	80046e8 <UART_Start_Receive_IT+0xa4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <UART_Start_Receive_IT+0x76>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <UART_Start_Receive_IT+0x6c>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	22ff      	movs	r2, #255	; 0xff
 80046aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ae:	e01b      	b.n	80046e8 <UART_Start_Receive_IT+0xa4>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	227f      	movs	r2, #127	; 0x7f
 80046b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b8:	e016      	b.n	80046e8 <UART_Start_Receive_IT+0xa4>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046c2:	d10d      	bne.n	80046e0 <UART_Start_Receive_IT+0x9c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <UART_Start_Receive_IT+0x92>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	227f      	movs	r2, #127	; 0x7f
 80046d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d4:	e008      	b.n	80046e8 <UART_Start_Receive_IT+0xa4>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	223f      	movs	r2, #63	; 0x3f
 80046da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046de:	e003      	b.n	80046e8 <UART_Start_Receive_IT+0xa4>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2222      	movs	r2, #34	; 0x22
 80046f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	657b      	str	r3, [r7, #84]	; 0x54
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004718:	64ba      	str	r2, [r7, #72]	; 0x48
 800471a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800471e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d107      	bne.n	8004746 <UART_Start_Receive_IT+0x102>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <UART_Start_Receive_IT+0x184>)
 8004742:	669a      	str	r2, [r3, #104]	; 0x68
 8004744:	e002      	b.n	800474c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <UART_Start_Receive_IT+0x188>)
 800474a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d019      	beq.n	8004788 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
 8004774:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e6      	bne.n	8004754 <UART_Start_Receive_IT+0x110>
 8004786:	e018      	b.n	80047ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	613b      	str	r3, [r7, #16]
   return(result);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f043 0320 	orr.w	r3, r3, #32
 800479c:	653b      	str	r3, [r7, #80]	; 0x50
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	69f9      	ldr	r1, [r7, #28]
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e6      	bne.n	8004788 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	375c      	adds	r7, #92	; 0x5c
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	08004a55 	.word	0x08004a55
 80047cc:	08004899 	.word	0x08004899

080047d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b095      	sub	sp, #84	; 0x54
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
 80047f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e6      	bne.n	80047d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	61fb      	str	r3, [r7, #28]
   return(result);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	64bb      	str	r3, [r7, #72]	; 0x48
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	2b01      	cmp	r3, #1
 8004844:	d118      	bne.n	8004878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	60bb      	str	r3, [r7, #8]
   return(result);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	613b      	str	r3, [r7, #16]
   return(result);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800488c:	bf00      	nop
 800488e:	3754      	adds	r7, #84	; 0x54
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b09c      	sub	sp, #112	; 0x70
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b0:	2b22      	cmp	r3, #34	; 0x22
 80048b2:	f040 80be 	bne.w	8004a32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80048c4:	b2d9      	uxtb	r1, r3
 80048c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	400a      	ands	r2, r1
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 80a3 	bne.w	8004a46 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800490e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004914:	66bb      	str	r3, [r7, #104]	; 0x68
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800491e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004920:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800492c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e6      	bne.n	8004900 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3308      	adds	r3, #8
 8004938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	667b      	str	r3, [r7, #100]	; 0x64
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004952:	647a      	str	r2, [r7, #68]	; 0x44
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <UART_RxISR_8BIT+0x1b8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01f      	beq.n	80049c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d018      	beq.n	80049c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	623b      	str	r3, [r7, #32]
   return(result);
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049a6:	663b      	str	r3, [r7, #96]	; 0x60
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
 80049b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e6      	bne.n	8004992 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d12e      	bne.n	8004a2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0310 	bic.w	r3, r3, #16
 80049e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	617b      	str	r3, [r7, #20]
   return(result);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e6      	bne.n	80049d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d103      	bne.n	8004a1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2210      	movs	r2, #16
 8004a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff f998 	bl	8003d58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a28:	e00d      	b.n	8004a46 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc f8a0 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8004a30:	e009      	b.n	8004a46 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	8b1b      	ldrh	r3, [r3, #24]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	b292      	uxth	r2, r2
 8004a44:	831a      	strh	r2, [r3, #24]
}
 8004a46:	bf00      	nop
 8004a48:	3770      	adds	r7, #112	; 0x70
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40008000 	.word	0x40008000

08004a54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b09c      	sub	sp, #112	; 0x70
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6c:	2b22      	cmp	r3, #34	; 0x22
 8004a6e:	f040 80be 	bne.w	8004bee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004a86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	1c9a      	adds	r2, r3, #2
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f040 80a3 	bne.w	8004c02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
 8004adc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ae0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e6      	bne.n	8004abc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	663b      	str	r3, [r7, #96]	; 0x60
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b0e:	643a      	str	r2, [r7, #64]	; 0x40
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e5      	bne.n	8004aee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a34      	ldr	r2, [pc, #208]	; (8004c0c <UART_RxISR_16BIT+0x1b8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01f      	beq.n	8004b80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d018      	beq.n	8004b80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d12e      	bne.n	8004be6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d103      	bne.n	8004bd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff f8ba 	bl	8003d58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004be4:	e00d      	b.n	8004c02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fb ffc2 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8004bec:	e009      	b.n	8004c02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	8b1b      	ldrh	r3, [r3, #24]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	831a      	strh	r2, [r3, #24]
}
 8004c02:	bf00      	nop
 8004c04:	3770      	adds	r7, #112	; 0x70
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40008000 	.word	0x40008000

08004c10 <siprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	b500      	push	{lr}
 8004c14:	b09c      	sub	sp, #112	; 0x70
 8004c16:	ab1d      	add	r3, sp, #116	; 0x74
 8004c18:	9002      	str	r0, [sp, #8]
 8004c1a:	9006      	str	r0, [sp, #24]
 8004c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c20:	4809      	ldr	r0, [pc, #36]	; (8004c48 <siprintf+0x38>)
 8004c22:	9107      	str	r1, [sp, #28]
 8004c24:	9104      	str	r1, [sp, #16]
 8004c26:	4909      	ldr	r1, [pc, #36]	; (8004c4c <siprintf+0x3c>)
 8004c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c2c:	9105      	str	r1, [sp, #20]
 8004c2e:	6800      	ldr	r0, [r0, #0]
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	a902      	add	r1, sp, #8
 8004c34:	f000 f9c0 	bl	8004fb8 <_svfiprintf_r>
 8004c38:	9b02      	ldr	r3, [sp, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	b01c      	add	sp, #112	; 0x70
 8004c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c44:	b003      	add	sp, #12
 8004c46:	4770      	bx	lr
 8004c48:	20000058 	.word	0x20000058
 8004c4c:	ffff0208 	.word	0xffff0208

08004c50 <siscanf>:
 8004c50:	b40e      	push	{r1, r2, r3}
 8004c52:	b510      	push	{r4, lr}
 8004c54:	b09f      	sub	sp, #124	; 0x7c
 8004c56:	ac21      	add	r4, sp, #132	; 0x84
 8004c58:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004c5c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004c60:	9201      	str	r2, [sp, #4]
 8004c62:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004c66:	9004      	str	r0, [sp, #16]
 8004c68:	9008      	str	r0, [sp, #32]
 8004c6a:	f7fb fab1 	bl	80001d0 <strlen>
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <siscanf+0x50>)
 8004c70:	9005      	str	r0, [sp, #20]
 8004c72:	9009      	str	r0, [sp, #36]	; 0x24
 8004c74:	930d      	str	r3, [sp, #52]	; 0x34
 8004c76:	480b      	ldr	r0, [pc, #44]	; (8004ca4 <siscanf+0x54>)
 8004c78:	9a01      	ldr	r2, [sp, #4]
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	9403      	str	r4, [sp, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9311      	str	r3, [sp, #68]	; 0x44
 8004c82:	9316      	str	r3, [sp, #88]	; 0x58
 8004c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004c8c:	a904      	add	r1, sp, #16
 8004c8e:	4623      	mov	r3, r4
 8004c90:	f000 faea 	bl	8005268 <__ssvfiscanf_r>
 8004c94:	b01f      	add	sp, #124	; 0x7c
 8004c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c9a:	b003      	add	sp, #12
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	20000058 	.word	0x20000058

08004ca8 <__seofread>:
 8004ca8:	2000      	movs	r0, #0
 8004caa:	4770      	bx	lr

08004cac <memset>:
 8004cac:	4402      	add	r2, r0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <memset+0xa>
 8004cb4:	4770      	bx	lr
 8004cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cba:	e7f9      	b.n	8004cb0 <memset+0x4>

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000058 	.word	0x20000058

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f001 f8f6 	bl	8005ecc <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	080060f0 	.word	0x080060f0
 8004d04:	080060f0 	.word	0x080060f0
 8004d08:	080060f0 	.word	0x080060f0
 8004d0c:	080060f4 	.word	0x080060f4

08004d10 <__retarget_lock_acquire_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__retarget_lock_release_recursive>:
 8004d12:	4770      	bx	lr

08004d14 <_free_r>:
 8004d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d044      	beq.n	8004da4 <_free_r+0x90>
 8004d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1e:	9001      	str	r0, [sp, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f1a1 0404 	sub.w	r4, r1, #4
 8004d26:	bfb8      	it	lt
 8004d28:	18e4      	addlt	r4, r4, r3
 8004d2a:	f000 f8df 	bl	8004eec <__malloc_lock>
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <_free_r+0x94>)
 8004d30:	9801      	ldr	r0, [sp, #4]
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	b933      	cbnz	r3, 8004d44 <_free_r+0x30>
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	6014      	str	r4, [r2, #0]
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d40:	f000 b8da 	b.w	8004ef8 <__malloc_unlock>
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d908      	bls.n	8004d5a <_free_r+0x46>
 8004d48:	6825      	ldr	r5, [r4, #0]
 8004d4a:	1961      	adds	r1, r4, r5
 8004d4c:	428b      	cmp	r3, r1
 8004d4e:	bf01      	itttt	eq
 8004d50:	6819      	ldreq	r1, [r3, #0]
 8004d52:	685b      	ldreq	r3, [r3, #4]
 8004d54:	1949      	addeq	r1, r1, r5
 8004d56:	6021      	streq	r1, [r4, #0]
 8004d58:	e7ed      	b.n	8004d36 <_free_r+0x22>
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b10b      	cbz	r3, 8004d64 <_free_r+0x50>
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d9fa      	bls.n	8004d5a <_free_r+0x46>
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	1855      	adds	r5, r2, r1
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	d10b      	bne.n	8004d84 <_free_r+0x70>
 8004d6c:	6824      	ldr	r4, [r4, #0]
 8004d6e:	4421      	add	r1, r4
 8004d70:	1854      	adds	r4, r2, r1
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	d1e0      	bne.n	8004d3a <_free_r+0x26>
 8004d78:	681c      	ldr	r4, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	440c      	add	r4, r1
 8004d80:	6014      	str	r4, [r2, #0]
 8004d82:	e7da      	b.n	8004d3a <_free_r+0x26>
 8004d84:	d902      	bls.n	8004d8c <_free_r+0x78>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	e7d6      	b.n	8004d3a <_free_r+0x26>
 8004d8c:	6825      	ldr	r5, [r4, #0]
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf04      	itt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	bf04      	itt	eq
 8004d9c:	1949      	addeq	r1, r1, r5
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	6054      	str	r4, [r2, #4]
 8004da2:	e7ca      	b.n	8004d3a <_free_r+0x26>
 8004da4:	b003      	add	sp, #12
 8004da6:	bd30      	pop	{r4, r5, pc}
 8004da8:	200002e8 	.word	0x200002e8

08004dac <sbrk_aligned>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4e0e      	ldr	r6, [pc, #56]	; (8004de8 <sbrk_aligned+0x3c>)
 8004db0:	460c      	mov	r4, r1
 8004db2:	6831      	ldr	r1, [r6, #0]
 8004db4:	4605      	mov	r5, r0
 8004db6:	b911      	cbnz	r1, 8004dbe <sbrk_aligned+0x12>
 8004db8:	f000 ff3a 	bl	8005c30 <_sbrk_r>
 8004dbc:	6030      	str	r0, [r6, #0]
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 ff35 	bl	8005c30 <_sbrk_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <sbrk_aligned+0x34>
 8004dca:	1cc4      	adds	r4, r0, #3
 8004dcc:	f024 0403 	bic.w	r4, r4, #3
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d007      	beq.n	8004de4 <sbrk_aligned+0x38>
 8004dd4:	1a21      	subs	r1, r4, r0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 ff2a 	bl	8005c30 <_sbrk_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d101      	bne.n	8004de4 <sbrk_aligned+0x38>
 8004de0:	f04f 34ff 	mov.w	r4, #4294967295
 8004de4:	4620      	mov	r0, r4
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	200002ec 	.word	0x200002ec

08004dec <_malloc_r>:
 8004dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df0:	1ccd      	adds	r5, r1, #3
 8004df2:	f025 0503 	bic.w	r5, r5, #3
 8004df6:	3508      	adds	r5, #8
 8004df8:	2d0c      	cmp	r5, #12
 8004dfa:	bf38      	it	cc
 8004dfc:	250c      	movcc	r5, #12
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	4607      	mov	r7, r0
 8004e02:	db01      	blt.n	8004e08 <_malloc_r+0x1c>
 8004e04:	42a9      	cmp	r1, r5
 8004e06:	d905      	bls.n	8004e14 <_malloc_r+0x28>
 8004e08:	230c      	movs	r3, #12
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	4630      	mov	r0, r6
 8004e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ee8 <_malloc_r+0xfc>
 8004e18:	f000 f868 	bl	8004eec <__malloc_lock>
 8004e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e20:	461c      	mov	r4, r3
 8004e22:	bb5c      	cbnz	r4, 8004e7c <_malloc_r+0x90>
 8004e24:	4629      	mov	r1, r5
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff ffc0 	bl	8004dac <sbrk_aligned>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	4604      	mov	r4, r0
 8004e30:	d155      	bne.n	8004ede <_malloc_r+0xf2>
 8004e32:	f8d8 4000 	ldr.w	r4, [r8]
 8004e36:	4626      	mov	r6, r4
 8004e38:	2e00      	cmp	r6, #0
 8004e3a:	d145      	bne.n	8004ec8 <_malloc_r+0xdc>
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	d048      	beq.n	8004ed2 <_malloc_r+0xe6>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	4631      	mov	r1, r6
 8004e44:	4638      	mov	r0, r7
 8004e46:	eb04 0903 	add.w	r9, r4, r3
 8004e4a:	f000 fef1 	bl	8005c30 <_sbrk_r>
 8004e4e:	4581      	cmp	r9, r0
 8004e50:	d13f      	bne.n	8004ed2 <_malloc_r+0xe6>
 8004e52:	6821      	ldr	r1, [r4, #0]
 8004e54:	1a6d      	subs	r5, r5, r1
 8004e56:	4629      	mov	r1, r5
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f7ff ffa7 	bl	8004dac <sbrk_aligned>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d037      	beq.n	8004ed2 <_malloc_r+0xe6>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	442b      	add	r3, r5
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	f8d8 3000 	ldr.w	r3, [r8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d038      	beq.n	8004ee2 <_malloc_r+0xf6>
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	42a2      	cmp	r2, r4
 8004e74:	d12b      	bne.n	8004ece <_malloc_r+0xe2>
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	e00f      	b.n	8004e9c <_malloc_r+0xb0>
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	1b52      	subs	r2, r2, r5
 8004e80:	d41f      	bmi.n	8004ec2 <_malloc_r+0xd6>
 8004e82:	2a0b      	cmp	r2, #11
 8004e84:	d917      	bls.n	8004eb6 <_malloc_r+0xca>
 8004e86:	1961      	adds	r1, r4, r5
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	6025      	str	r5, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	6059      	strne	r1, [r3, #4]
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	bf08      	it	eq
 8004e94:	f8c8 1000 	streq.w	r1, [r8]
 8004e98:	5162      	str	r2, [r4, r5]
 8004e9a:	604b      	str	r3, [r1, #4]
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f104 060b 	add.w	r6, r4, #11
 8004ea2:	f000 f829 	bl	8004ef8 <__malloc_unlock>
 8004ea6:	f026 0607 	bic.w	r6, r6, #7
 8004eaa:	1d23      	adds	r3, r4, #4
 8004eac:	1af2      	subs	r2, r6, r3
 8004eae:	d0ae      	beq.n	8004e0e <_malloc_r+0x22>
 8004eb0:	1b9b      	subs	r3, r3, r6
 8004eb2:	50a3      	str	r3, [r4, r2]
 8004eb4:	e7ab      	b.n	8004e0e <_malloc_r+0x22>
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	6862      	ldr	r2, [r4, #4]
 8004eba:	d1dd      	bne.n	8004e78 <_malloc_r+0x8c>
 8004ebc:	f8c8 2000 	str.w	r2, [r8]
 8004ec0:	e7ec      	b.n	8004e9c <_malloc_r+0xb0>
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	6864      	ldr	r4, [r4, #4]
 8004ec6:	e7ac      	b.n	8004e22 <_malloc_r+0x36>
 8004ec8:	4634      	mov	r4, r6
 8004eca:	6876      	ldr	r6, [r6, #4]
 8004ecc:	e7b4      	b.n	8004e38 <_malloc_r+0x4c>
 8004ece:	4613      	mov	r3, r2
 8004ed0:	e7cc      	b.n	8004e6c <_malloc_r+0x80>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f000 f80e 	bl	8004ef8 <__malloc_unlock>
 8004edc:	e797      	b.n	8004e0e <_malloc_r+0x22>
 8004ede:	6025      	str	r5, [r4, #0]
 8004ee0:	e7dc      	b.n	8004e9c <_malloc_r+0xb0>
 8004ee2:	605b      	str	r3, [r3, #4]
 8004ee4:	deff      	udf	#255	; 0xff
 8004ee6:	bf00      	nop
 8004ee8:	200002e8 	.word	0x200002e8

08004eec <__malloc_lock>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__malloc_lock+0x8>)
 8004eee:	f7ff bf0f 	b.w	8004d10 <__retarget_lock_acquire_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200002e4 	.word	0x200002e4

08004ef8 <__malloc_unlock>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__malloc_unlock+0x8>)
 8004efa:	f7ff bf0a 	b.w	8004d12 <__retarget_lock_release_recursive>
 8004efe:	bf00      	nop
 8004f00:	200002e4 	.word	0x200002e4

08004f04 <__ssputs_r>:
 8004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	688e      	ldr	r6, [r1, #8]
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	42be      	cmp	r6, r7
 8004f0e:	680b      	ldr	r3, [r1, #0]
 8004f10:	4682      	mov	sl, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4690      	mov	r8, r2
 8004f16:	d82c      	bhi.n	8004f72 <__ssputs_r+0x6e>
 8004f18:	898a      	ldrh	r2, [r1, #12]
 8004f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f1e:	d026      	beq.n	8004f6e <__ssputs_r+0x6a>
 8004f20:	6965      	ldr	r5, [r4, #20]
 8004f22:	6909      	ldr	r1, [r1, #16]
 8004f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f28:	eba3 0901 	sub.w	r9, r3, r1
 8004f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f30:	1c7b      	adds	r3, r7, #1
 8004f32:	444b      	add	r3, r9
 8004f34:	106d      	asrs	r5, r5, #1
 8004f36:	429d      	cmp	r5, r3
 8004f38:	bf38      	it	cc
 8004f3a:	461d      	movcc	r5, r3
 8004f3c:	0553      	lsls	r3, r2, #21
 8004f3e:	d527      	bpl.n	8004f90 <__ssputs_r+0x8c>
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7ff ff53 	bl	8004dec <_malloc_r>
 8004f46:	4606      	mov	r6, r0
 8004f48:	b360      	cbz	r0, 8004fa4 <__ssputs_r+0xa0>
 8004f4a:	6921      	ldr	r1, [r4, #16]
 8004f4c:	464a      	mov	r2, r9
 8004f4e:	f000 fe7f 	bl	8005c50 <memcpy>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	6126      	str	r6, [r4, #16]
 8004f60:	6165      	str	r5, [r4, #20]
 8004f62:	444e      	add	r6, r9
 8004f64:	eba5 0509 	sub.w	r5, r5, r9
 8004f68:	6026      	str	r6, [r4, #0]
 8004f6a:	60a5      	str	r5, [r4, #8]
 8004f6c:	463e      	mov	r6, r7
 8004f6e:	42be      	cmp	r6, r7
 8004f70:	d900      	bls.n	8004f74 <__ssputs_r+0x70>
 8004f72:	463e      	mov	r6, r7
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	4632      	mov	r2, r6
 8004f78:	4641      	mov	r1, r8
 8004f7a:	f000 fe3e 	bl	8005bfa <memmove>
 8004f7e:	68a3      	ldr	r3, [r4, #8]
 8004f80:	1b9b      	subs	r3, r3, r6
 8004f82:	60a3      	str	r3, [r4, #8]
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	4433      	add	r3, r6
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	462a      	mov	r2, r5
 8004f92:	f000 fe6b 	bl	8005c6c <_realloc_r>
 8004f96:	4606      	mov	r6, r0
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1e0      	bne.n	8004f5e <__ssputs_r+0x5a>
 8004f9c:	6921      	ldr	r1, [r4, #16]
 8004f9e:	4650      	mov	r0, sl
 8004fa0:	f7ff feb8 	bl	8004d14 <_free_r>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	f8ca 3000 	str.w	r3, [sl]
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	e7e9      	b.n	8004f8c <__ssputs_r+0x88>

08004fb8 <_svfiprintf_r>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4698      	mov	r8, r3
 8004fbe:	898b      	ldrh	r3, [r1, #12]
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	b09d      	sub	sp, #116	; 0x74
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	4614      	mov	r4, r2
 8004fca:	d50e      	bpl.n	8004fea <_svfiprintf_r+0x32>
 8004fcc:	690b      	ldr	r3, [r1, #16]
 8004fce:	b963      	cbnz	r3, 8004fea <_svfiprintf_r+0x32>
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	f7ff ff0b 	bl	8004dec <_malloc_r>
 8004fd6:	6028      	str	r0, [r5, #0]
 8004fd8:	6128      	str	r0, [r5, #16]
 8004fda:	b920      	cbnz	r0, 8004fe6 <_svfiprintf_r+0x2e>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	e0d0      	b.n	8005188 <_svfiprintf_r+0x1d0>
 8004fe6:	2340      	movs	r3, #64	; 0x40
 8004fe8:	616b      	str	r3, [r5, #20]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	2320      	movs	r3, #32
 8004ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ff8:	2330      	movs	r3, #48	; 0x30
 8004ffa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051a0 <_svfiprintf_r+0x1e8>
 8004ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005002:	f04f 0901 	mov.w	r9, #1
 8005006:	4623      	mov	r3, r4
 8005008:	469a      	mov	sl, r3
 800500a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800500e:	b10a      	cbz	r2, 8005014 <_svfiprintf_r+0x5c>
 8005010:	2a25      	cmp	r2, #37	; 0x25
 8005012:	d1f9      	bne.n	8005008 <_svfiprintf_r+0x50>
 8005014:	ebba 0b04 	subs.w	fp, sl, r4
 8005018:	d00b      	beq.n	8005032 <_svfiprintf_r+0x7a>
 800501a:	465b      	mov	r3, fp
 800501c:	4622      	mov	r2, r4
 800501e:	4629      	mov	r1, r5
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff ff6f 	bl	8004f04 <__ssputs_r>
 8005026:	3001      	adds	r0, #1
 8005028:	f000 80a9 	beq.w	800517e <_svfiprintf_r+0x1c6>
 800502c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800502e:	445a      	add	r2, fp
 8005030:	9209      	str	r2, [sp, #36]	; 0x24
 8005032:	f89a 3000 	ldrb.w	r3, [sl]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80a1 	beq.w	800517e <_svfiprintf_r+0x1c6>
 800503c:	2300      	movs	r3, #0
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005046:	f10a 0a01 	add.w	sl, sl, #1
 800504a:	9304      	str	r3, [sp, #16]
 800504c:	9307      	str	r3, [sp, #28]
 800504e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005052:	931a      	str	r3, [sp, #104]	; 0x68
 8005054:	4654      	mov	r4, sl
 8005056:	2205      	movs	r2, #5
 8005058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505c:	4850      	ldr	r0, [pc, #320]	; (80051a0 <_svfiprintf_r+0x1e8>)
 800505e:	f7fb f8bf 	bl	80001e0 <memchr>
 8005062:	9a04      	ldr	r2, [sp, #16]
 8005064:	b9d8      	cbnz	r0, 800509e <_svfiprintf_r+0xe6>
 8005066:	06d0      	lsls	r0, r2, #27
 8005068:	bf44      	itt	mi
 800506a:	2320      	movmi	r3, #32
 800506c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005070:	0711      	lsls	r1, r2, #28
 8005072:	bf44      	itt	mi
 8005074:	232b      	movmi	r3, #43	; 0x2b
 8005076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800507a:	f89a 3000 	ldrb.w	r3, [sl]
 800507e:	2b2a      	cmp	r3, #42	; 0x2a
 8005080:	d015      	beq.n	80050ae <_svfiprintf_r+0xf6>
 8005082:	9a07      	ldr	r2, [sp, #28]
 8005084:	4654      	mov	r4, sl
 8005086:	2000      	movs	r0, #0
 8005088:	f04f 0c0a 	mov.w	ip, #10
 800508c:	4621      	mov	r1, r4
 800508e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005092:	3b30      	subs	r3, #48	; 0x30
 8005094:	2b09      	cmp	r3, #9
 8005096:	d94d      	bls.n	8005134 <_svfiprintf_r+0x17c>
 8005098:	b1b0      	cbz	r0, 80050c8 <_svfiprintf_r+0x110>
 800509a:	9207      	str	r2, [sp, #28]
 800509c:	e014      	b.n	80050c8 <_svfiprintf_r+0x110>
 800509e:	eba0 0308 	sub.w	r3, r0, r8
 80050a2:	fa09 f303 	lsl.w	r3, r9, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	9304      	str	r3, [sp, #16]
 80050aa:	46a2      	mov	sl, r4
 80050ac:	e7d2      	b.n	8005054 <_svfiprintf_r+0x9c>
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	9103      	str	r1, [sp, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfbb      	ittet	lt
 80050ba:	425b      	neglt	r3, r3
 80050bc:	f042 0202 	orrlt.w	r2, r2, #2
 80050c0:	9307      	strge	r3, [sp, #28]
 80050c2:	9307      	strlt	r3, [sp, #28]
 80050c4:	bfb8      	it	lt
 80050c6:	9204      	strlt	r2, [sp, #16]
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	2b2e      	cmp	r3, #46	; 0x2e
 80050cc:	d10c      	bne.n	80050e8 <_svfiprintf_r+0x130>
 80050ce:	7863      	ldrb	r3, [r4, #1]
 80050d0:	2b2a      	cmp	r3, #42	; 0x2a
 80050d2:	d134      	bne.n	800513e <_svfiprintf_r+0x186>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	1d1a      	adds	r2, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	9203      	str	r2, [sp, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfb8      	it	lt
 80050e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050e4:	3402      	adds	r4, #2
 80050e6:	9305      	str	r3, [sp, #20]
 80050e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051b0 <_svfiprintf_r+0x1f8>
 80050ec:	7821      	ldrb	r1, [r4, #0]
 80050ee:	2203      	movs	r2, #3
 80050f0:	4650      	mov	r0, sl
 80050f2:	f7fb f875 	bl	80001e0 <memchr>
 80050f6:	b138      	cbz	r0, 8005108 <_svfiprintf_r+0x150>
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	eba0 000a 	sub.w	r0, r0, sl
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	4082      	lsls	r2, r0
 8005102:	4313      	orrs	r3, r2
 8005104:	3401      	adds	r4, #1
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510c:	4825      	ldr	r0, [pc, #148]	; (80051a4 <_svfiprintf_r+0x1ec>)
 800510e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005112:	2206      	movs	r2, #6
 8005114:	f7fb f864 	bl	80001e0 <memchr>
 8005118:	2800      	cmp	r0, #0
 800511a:	d038      	beq.n	800518e <_svfiprintf_r+0x1d6>
 800511c:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <_svfiprintf_r+0x1f0>)
 800511e:	bb1b      	cbnz	r3, 8005168 <_svfiprintf_r+0x1b0>
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	3307      	adds	r3, #7
 8005124:	f023 0307 	bic.w	r3, r3, #7
 8005128:	3308      	adds	r3, #8
 800512a:	9303      	str	r3, [sp, #12]
 800512c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512e:	4433      	add	r3, r6
 8005130:	9309      	str	r3, [sp, #36]	; 0x24
 8005132:	e768      	b.n	8005006 <_svfiprintf_r+0x4e>
 8005134:	fb0c 3202 	mla	r2, ip, r2, r3
 8005138:	460c      	mov	r4, r1
 800513a:	2001      	movs	r0, #1
 800513c:	e7a6      	b.n	800508c <_svfiprintf_r+0xd4>
 800513e:	2300      	movs	r3, #0
 8005140:	3401      	adds	r4, #1
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	4619      	mov	r1, r3
 8005146:	f04f 0c0a 	mov.w	ip, #10
 800514a:	4620      	mov	r0, r4
 800514c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005150:	3a30      	subs	r2, #48	; 0x30
 8005152:	2a09      	cmp	r2, #9
 8005154:	d903      	bls.n	800515e <_svfiprintf_r+0x1a6>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0c6      	beq.n	80050e8 <_svfiprintf_r+0x130>
 800515a:	9105      	str	r1, [sp, #20]
 800515c:	e7c4      	b.n	80050e8 <_svfiprintf_r+0x130>
 800515e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005162:	4604      	mov	r4, r0
 8005164:	2301      	movs	r3, #1
 8005166:	e7f0      	b.n	800514a <_svfiprintf_r+0x192>
 8005168:	ab03      	add	r3, sp, #12
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	462a      	mov	r2, r5
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <_svfiprintf_r+0x1f4>)
 8005170:	a904      	add	r1, sp, #16
 8005172:	4638      	mov	r0, r7
 8005174:	f3af 8000 	nop.w
 8005178:	1c42      	adds	r2, r0, #1
 800517a:	4606      	mov	r6, r0
 800517c:	d1d6      	bne.n	800512c <_svfiprintf_r+0x174>
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	065b      	lsls	r3, r3, #25
 8005182:	f53f af2d 	bmi.w	8004fe0 <_svfiprintf_r+0x28>
 8005186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005188:	b01d      	add	sp, #116	; 0x74
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <_svfiprintf_r+0x1f4>)
 8005196:	a904      	add	r1, sp, #16
 8005198:	4638      	mov	r0, r7
 800519a:	f000 fa4b 	bl	8005634 <_printf_i>
 800519e:	e7eb      	b.n	8005178 <_svfiprintf_r+0x1c0>
 80051a0:	08005f98 	.word	0x08005f98
 80051a4:	08005fa2 	.word	0x08005fa2
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f05 	.word	0x08004f05
 80051b0:	08005f9e 	.word	0x08005f9e

080051b4 <_sungetc_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	1c4b      	adds	r3, r1, #1
 80051b8:	4614      	mov	r4, r2
 80051ba:	d103      	bne.n	80051c4 <_sungetc_r+0x10>
 80051bc:	f04f 35ff 	mov.w	r5, #4294967295
 80051c0:	4628      	mov	r0, r5
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	8993      	ldrh	r3, [r2, #12]
 80051c6:	f023 0320 	bic.w	r3, r3, #32
 80051ca:	8193      	strh	r3, [r2, #12]
 80051cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ce:	6852      	ldr	r2, [r2, #4]
 80051d0:	b2cd      	uxtb	r5, r1
 80051d2:	b18b      	cbz	r3, 80051f8 <_sungetc_r+0x44>
 80051d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d6:	4293      	cmp	r3, r2
 80051d8:	dd08      	ble.n	80051ec <_sungetc_r+0x38>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	1e5a      	subs	r2, r3, #1
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	6063      	str	r3, [r4, #4]
 80051ea:	e7e9      	b.n	80051c0 <_sungetc_r+0xc>
 80051ec:	4621      	mov	r1, r4
 80051ee:	f000 fcca 	bl	8005b86 <__submore>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d0f1      	beq.n	80051da <_sungetc_r+0x26>
 80051f6:	e7e1      	b.n	80051bc <_sungetc_r+0x8>
 80051f8:	6921      	ldr	r1, [r4, #16]
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	b151      	cbz	r1, 8005214 <_sungetc_r+0x60>
 80051fe:	4299      	cmp	r1, r3
 8005200:	d208      	bcs.n	8005214 <_sungetc_r+0x60>
 8005202:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005206:	42a9      	cmp	r1, r5
 8005208:	d104      	bne.n	8005214 <_sungetc_r+0x60>
 800520a:	3b01      	subs	r3, #1
 800520c:	3201      	adds	r2, #1
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	6062      	str	r2, [r4, #4]
 8005212:	e7d5      	b.n	80051c0 <_sungetc_r+0xc>
 8005214:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800521c:	6363      	str	r3, [r4, #52]	; 0x34
 800521e:	2303      	movs	r3, #3
 8005220:	63a3      	str	r3, [r4, #56]	; 0x38
 8005222:	4623      	mov	r3, r4
 8005224:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	2301      	movs	r3, #1
 800522c:	e7dc      	b.n	80051e8 <_sungetc_r+0x34>

0800522e <__ssrefill_r>:
 800522e:	b510      	push	{r4, lr}
 8005230:	460c      	mov	r4, r1
 8005232:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005234:	b169      	cbz	r1, 8005252 <__ssrefill_r+0x24>
 8005236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800523a:	4299      	cmp	r1, r3
 800523c:	d001      	beq.n	8005242 <__ssrefill_r+0x14>
 800523e:	f7ff fd69 	bl	8004d14 <_free_r>
 8005242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	2000      	movs	r0, #0
 8005248:	6360      	str	r0, [r4, #52]	; 0x34
 800524a:	b113      	cbz	r3, 8005252 <__ssrefill_r+0x24>
 800524c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	bd10      	pop	{r4, pc}
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	2300      	movs	r3, #0
 8005258:	6063      	str	r3, [r4, #4]
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f043 0320 	orr.w	r3, r3, #32
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	f04f 30ff 	mov.w	r0, #4294967295
 8005266:	e7f3      	b.n	8005250 <__ssrefill_r+0x22>

08005268 <__ssvfiscanf_r>:
 8005268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	460c      	mov	r4, r1
 800526e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005272:	2100      	movs	r1, #0
 8005274:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005278:	49a6      	ldr	r1, [pc, #664]	; (8005514 <__ssvfiscanf_r+0x2ac>)
 800527a:	91a0      	str	r1, [sp, #640]	; 0x280
 800527c:	f10d 0804 	add.w	r8, sp, #4
 8005280:	49a5      	ldr	r1, [pc, #660]	; (8005518 <__ssvfiscanf_r+0x2b0>)
 8005282:	4fa6      	ldr	r7, [pc, #664]	; (800551c <__ssvfiscanf_r+0x2b4>)
 8005284:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005520 <__ssvfiscanf_r+0x2b8>
 8005288:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800528c:	4606      	mov	r6, r0
 800528e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	7813      	ldrb	r3, [r2, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 815a 	beq.w	800554e <__ssvfiscanf_r+0x2e6>
 800529a:	5cf9      	ldrb	r1, [r7, r3]
 800529c:	f011 0108 	ands.w	r1, r1, #8
 80052a0:	f102 0501 	add.w	r5, r2, #1
 80052a4:	d019      	beq.n	80052da <__ssvfiscanf_r+0x72>
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd0f      	ble.n	80052cc <__ssvfiscanf_r+0x64>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	5cba      	ldrb	r2, [r7, r2]
 80052b2:	0712      	lsls	r2, r2, #28
 80052b4:	d401      	bmi.n	80052ba <__ssvfiscanf_r+0x52>
 80052b6:	462a      	mov	r2, r5
 80052b8:	e7eb      	b.n	8005292 <__ssvfiscanf_r+0x2a>
 80052ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052bc:	3201      	adds	r2, #1
 80052be:	9245      	str	r2, [sp, #276]	; 0x114
 80052c0:	6862      	ldr	r2, [r4, #4]
 80052c2:	3301      	adds	r3, #1
 80052c4:	3a01      	subs	r2, #1
 80052c6:	6062      	str	r2, [r4, #4]
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	e7ec      	b.n	80052a6 <__ssvfiscanf_r+0x3e>
 80052cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052ce:	4621      	mov	r1, r4
 80052d0:	4630      	mov	r0, r6
 80052d2:	4798      	blx	r3
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d0e9      	beq.n	80052ac <__ssvfiscanf_r+0x44>
 80052d8:	e7ed      	b.n	80052b6 <__ssvfiscanf_r+0x4e>
 80052da:	2b25      	cmp	r3, #37	; 0x25
 80052dc:	d012      	beq.n	8005304 <__ssvfiscanf_r+0x9c>
 80052de:	469a      	mov	sl, r3
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f340 8091 	ble.w	800540a <__ssvfiscanf_r+0x1a2>
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	7813      	ldrb	r3, [r2, #0]
 80052ec:	4553      	cmp	r3, sl
 80052ee:	f040 812e 	bne.w	800554e <__ssvfiscanf_r+0x2e6>
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80052fa:	3201      	adds	r2, #1
 80052fc:	3301      	adds	r3, #1
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	9345      	str	r3, [sp, #276]	; 0x114
 8005302:	e7d8      	b.n	80052b6 <__ssvfiscanf_r+0x4e>
 8005304:	9141      	str	r1, [sp, #260]	; 0x104
 8005306:	9143      	str	r1, [sp, #268]	; 0x10c
 8005308:	7853      	ldrb	r3, [r2, #1]
 800530a:	2b2a      	cmp	r3, #42	; 0x2a
 800530c:	bf02      	ittt	eq
 800530e:	2310      	moveq	r3, #16
 8005310:	1c95      	addeq	r5, r2, #2
 8005312:	9341      	streq	r3, [sp, #260]	; 0x104
 8005314:	220a      	movs	r2, #10
 8005316:	46aa      	mov	sl, r5
 8005318:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800531c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005320:	2b09      	cmp	r3, #9
 8005322:	d91c      	bls.n	800535e <__ssvfiscanf_r+0xf6>
 8005324:	487e      	ldr	r0, [pc, #504]	; (8005520 <__ssvfiscanf_r+0x2b8>)
 8005326:	2203      	movs	r2, #3
 8005328:	f7fa ff5a 	bl	80001e0 <memchr>
 800532c:	b138      	cbz	r0, 800533e <__ssvfiscanf_r+0xd6>
 800532e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005330:	eba0 0009 	sub.w	r0, r0, r9
 8005334:	2301      	movs	r3, #1
 8005336:	4083      	lsls	r3, r0
 8005338:	4313      	orrs	r3, r2
 800533a:	9341      	str	r3, [sp, #260]	; 0x104
 800533c:	4655      	mov	r5, sl
 800533e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005342:	2b78      	cmp	r3, #120	; 0x78
 8005344:	d806      	bhi.n	8005354 <__ssvfiscanf_r+0xec>
 8005346:	2b57      	cmp	r3, #87	; 0x57
 8005348:	d810      	bhi.n	800536c <__ssvfiscanf_r+0x104>
 800534a:	2b25      	cmp	r3, #37	; 0x25
 800534c:	d0c7      	beq.n	80052de <__ssvfiscanf_r+0x76>
 800534e:	d857      	bhi.n	8005400 <__ssvfiscanf_r+0x198>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d065      	beq.n	8005420 <__ssvfiscanf_r+0x1b8>
 8005354:	2303      	movs	r3, #3
 8005356:	9347      	str	r3, [sp, #284]	; 0x11c
 8005358:	230a      	movs	r3, #10
 800535a:	9342      	str	r3, [sp, #264]	; 0x108
 800535c:	e076      	b.n	800544c <__ssvfiscanf_r+0x1e4>
 800535e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005360:	fb02 1103 	mla	r1, r2, r3, r1
 8005364:	3930      	subs	r1, #48	; 0x30
 8005366:	9143      	str	r1, [sp, #268]	; 0x10c
 8005368:	4655      	mov	r5, sl
 800536a:	e7d4      	b.n	8005316 <__ssvfiscanf_r+0xae>
 800536c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005370:	2a20      	cmp	r2, #32
 8005372:	d8ef      	bhi.n	8005354 <__ssvfiscanf_r+0xec>
 8005374:	a101      	add	r1, pc, #4	; (adr r1, 800537c <__ssvfiscanf_r+0x114>)
 8005376:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800542f 	.word	0x0800542f
 8005380:	08005355 	.word	0x08005355
 8005384:	08005355 	.word	0x08005355
 8005388:	0800548d 	.word	0x0800548d
 800538c:	08005355 	.word	0x08005355
 8005390:	08005355 	.word	0x08005355
 8005394:	08005355 	.word	0x08005355
 8005398:	08005355 	.word	0x08005355
 800539c:	08005355 	.word	0x08005355
 80053a0:	08005355 	.word	0x08005355
 80053a4:	08005355 	.word	0x08005355
 80053a8:	080054a3 	.word	0x080054a3
 80053ac:	08005489 	.word	0x08005489
 80053b0:	08005407 	.word	0x08005407
 80053b4:	08005407 	.word	0x08005407
 80053b8:	08005407 	.word	0x08005407
 80053bc:	08005355 	.word	0x08005355
 80053c0:	08005445 	.word	0x08005445
 80053c4:	08005355 	.word	0x08005355
 80053c8:	08005355 	.word	0x08005355
 80053cc:	08005355 	.word	0x08005355
 80053d0:	08005355 	.word	0x08005355
 80053d4:	080054b3 	.word	0x080054b3
 80053d8:	08005481 	.word	0x08005481
 80053dc:	08005427 	.word	0x08005427
 80053e0:	08005355 	.word	0x08005355
 80053e4:	08005355 	.word	0x08005355
 80053e8:	080054af 	.word	0x080054af
 80053ec:	08005355 	.word	0x08005355
 80053f0:	08005489 	.word	0x08005489
 80053f4:	08005355 	.word	0x08005355
 80053f8:	08005355 	.word	0x08005355
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	3b45      	subs	r3, #69	; 0x45
 8005402:	2b02      	cmp	r3, #2
 8005404:	d8a6      	bhi.n	8005354 <__ssvfiscanf_r+0xec>
 8005406:	2305      	movs	r3, #5
 8005408:	e01f      	b.n	800544a <__ssvfiscanf_r+0x1e2>
 800540a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800540c:	4621      	mov	r1, r4
 800540e:	4630      	mov	r0, r6
 8005410:	4798      	blx	r3
 8005412:	2800      	cmp	r0, #0
 8005414:	f43f af68 	beq.w	80052e8 <__ssvfiscanf_r+0x80>
 8005418:	9844      	ldr	r0, [sp, #272]	; 0x110
 800541a:	2800      	cmp	r0, #0
 800541c:	f040 808d 	bne.w	800553a <__ssvfiscanf_r+0x2d2>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	e08f      	b.n	8005546 <__ssvfiscanf_r+0x2de>
 8005426:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005428:	f042 0220 	orr.w	r2, r2, #32
 800542c:	9241      	str	r2, [sp, #260]	; 0x104
 800542e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	9241      	str	r2, [sp, #260]	; 0x104
 8005436:	2210      	movs	r2, #16
 8005438:	2b6f      	cmp	r3, #111	; 0x6f
 800543a:	9242      	str	r2, [sp, #264]	; 0x108
 800543c:	bf34      	ite	cc
 800543e:	2303      	movcc	r3, #3
 8005440:	2304      	movcs	r3, #4
 8005442:	e002      	b.n	800544a <__ssvfiscanf_r+0x1e2>
 8005444:	2300      	movs	r3, #0
 8005446:	9342      	str	r3, [sp, #264]	; 0x108
 8005448:	2303      	movs	r3, #3
 800544a:	9347      	str	r3, [sp, #284]	; 0x11c
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	dd3d      	ble.n	80054ce <__ssvfiscanf_r+0x266>
 8005452:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005454:	0659      	lsls	r1, r3, #25
 8005456:	d404      	bmi.n	8005462 <__ssvfiscanf_r+0x1fa>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	5cba      	ldrb	r2, [r7, r2]
 800545e:	0712      	lsls	r2, r2, #28
 8005460:	d43c      	bmi.n	80054dc <__ssvfiscanf_r+0x274>
 8005462:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005464:	2b02      	cmp	r3, #2
 8005466:	dc4b      	bgt.n	8005500 <__ssvfiscanf_r+0x298>
 8005468:	466b      	mov	r3, sp
 800546a:	4622      	mov	r2, r4
 800546c:	a941      	add	r1, sp, #260	; 0x104
 800546e:	4630      	mov	r0, r6
 8005470:	f000 fa02 	bl	8005878 <_scanf_chars>
 8005474:	2801      	cmp	r0, #1
 8005476:	d06a      	beq.n	800554e <__ssvfiscanf_r+0x2e6>
 8005478:	2802      	cmp	r0, #2
 800547a:	f47f af1c 	bne.w	80052b6 <__ssvfiscanf_r+0x4e>
 800547e:	e7cb      	b.n	8005418 <__ssvfiscanf_r+0x1b0>
 8005480:	2308      	movs	r3, #8
 8005482:	9342      	str	r3, [sp, #264]	; 0x108
 8005484:	2304      	movs	r3, #4
 8005486:	e7e0      	b.n	800544a <__ssvfiscanf_r+0x1e2>
 8005488:	220a      	movs	r2, #10
 800548a:	e7d5      	b.n	8005438 <__ssvfiscanf_r+0x1d0>
 800548c:	4629      	mov	r1, r5
 800548e:	4640      	mov	r0, r8
 8005490:	f000 fb40 	bl	8005b14 <__sccl>
 8005494:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800549a:	9341      	str	r3, [sp, #260]	; 0x104
 800549c:	4605      	mov	r5, r0
 800549e:	2301      	movs	r3, #1
 80054a0:	e7d3      	b.n	800544a <__ssvfiscanf_r+0x1e2>
 80054a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80054a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a8:	9341      	str	r3, [sp, #260]	; 0x104
 80054aa:	2300      	movs	r3, #0
 80054ac:	e7cd      	b.n	800544a <__ssvfiscanf_r+0x1e2>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e7cb      	b.n	800544a <__ssvfiscanf_r+0x1e2>
 80054b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80054b4:	06c3      	lsls	r3, r0, #27
 80054b6:	f53f aefe 	bmi.w	80052b6 <__ssvfiscanf_r+0x4e>
 80054ba:	9b00      	ldr	r3, [sp, #0]
 80054bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80054be:	1d19      	adds	r1, r3, #4
 80054c0:	9100      	str	r1, [sp, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	07c0      	lsls	r0, r0, #31
 80054c6:	bf4c      	ite	mi
 80054c8:	801a      	strhmi	r2, [r3, #0]
 80054ca:	601a      	strpl	r2, [r3, #0]
 80054cc:	e6f3      	b.n	80052b6 <__ssvfiscanf_r+0x4e>
 80054ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80054d0:	4621      	mov	r1, r4
 80054d2:	4630      	mov	r0, r6
 80054d4:	4798      	blx	r3
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d0bb      	beq.n	8005452 <__ssvfiscanf_r+0x1ea>
 80054da:	e79d      	b.n	8005418 <__ssvfiscanf_r+0x1b0>
 80054dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80054de:	3201      	adds	r2, #1
 80054e0:	9245      	str	r2, [sp, #276]	; 0x114
 80054e2:	6862      	ldr	r2, [r4, #4]
 80054e4:	3a01      	subs	r2, #1
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	6062      	str	r2, [r4, #4]
 80054ea:	dd02      	ble.n	80054f2 <__ssvfiscanf_r+0x28a>
 80054ec:	3301      	adds	r3, #1
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	e7b2      	b.n	8005458 <__ssvfiscanf_r+0x1f0>
 80054f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80054f4:	4621      	mov	r1, r4
 80054f6:	4630      	mov	r0, r6
 80054f8:	4798      	blx	r3
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d0ac      	beq.n	8005458 <__ssvfiscanf_r+0x1f0>
 80054fe:	e78b      	b.n	8005418 <__ssvfiscanf_r+0x1b0>
 8005500:	2b04      	cmp	r3, #4
 8005502:	dc0f      	bgt.n	8005524 <__ssvfiscanf_r+0x2bc>
 8005504:	466b      	mov	r3, sp
 8005506:	4622      	mov	r2, r4
 8005508:	a941      	add	r1, sp, #260	; 0x104
 800550a:	4630      	mov	r0, r6
 800550c:	f000 fa0e 	bl	800592c <_scanf_i>
 8005510:	e7b0      	b.n	8005474 <__ssvfiscanf_r+0x20c>
 8005512:	bf00      	nop
 8005514:	080051b5 	.word	0x080051b5
 8005518:	0800522f 	.word	0x0800522f
 800551c:	08005fe7 	.word	0x08005fe7
 8005520:	08005f9e 	.word	0x08005f9e
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <__ssvfiscanf_r+0x2ec>)
 8005526:	2b00      	cmp	r3, #0
 8005528:	f43f aec5 	beq.w	80052b6 <__ssvfiscanf_r+0x4e>
 800552c:	466b      	mov	r3, sp
 800552e:	4622      	mov	r2, r4
 8005530:	a941      	add	r1, sp, #260	; 0x104
 8005532:	4630      	mov	r0, r6
 8005534:	f3af 8000 	nop.w
 8005538:	e79c      	b.n	8005474 <__ssvfiscanf_r+0x20c>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005540:	bf18      	it	ne
 8005542:	f04f 30ff 	movne.w	r0, #4294967295
 8005546:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005550:	e7f9      	b.n	8005546 <__ssvfiscanf_r+0x2de>
 8005552:	bf00      	nop
 8005554:	00000000 	.word	0x00000000

08005558 <_printf_common>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	4616      	mov	r6, r2
 800555e:	4699      	mov	r9, r3
 8005560:	688a      	ldr	r2, [r1, #8]
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005568:	4293      	cmp	r3, r2
 800556a:	bfb8      	it	lt
 800556c:	4613      	movlt	r3, r2
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005574:	4607      	mov	r7, r0
 8005576:	460c      	mov	r4, r1
 8005578:	b10a      	cbz	r2, 800557e <_printf_common+0x26>
 800557a:	3301      	adds	r3, #1
 800557c:	6033      	str	r3, [r6, #0]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	0699      	lsls	r1, r3, #26
 8005582:	bf42      	ittt	mi
 8005584:	6833      	ldrmi	r3, [r6, #0]
 8005586:	3302      	addmi	r3, #2
 8005588:	6033      	strmi	r3, [r6, #0]
 800558a:	6825      	ldr	r5, [r4, #0]
 800558c:	f015 0506 	ands.w	r5, r5, #6
 8005590:	d106      	bne.n	80055a0 <_printf_common+0x48>
 8005592:	f104 0a19 	add.w	sl, r4, #25
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	6832      	ldr	r2, [r6, #0]
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	42ab      	cmp	r3, r5
 800559e:	dc26      	bgt.n	80055ee <_printf_common+0x96>
 80055a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055a4:	1e13      	subs	r3, r2, #0
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	bf18      	it	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	0692      	lsls	r2, r2, #26
 80055ae:	d42b      	bmi.n	8005608 <_printf_common+0xb0>
 80055b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055b4:	4649      	mov	r1, r9
 80055b6:	4638      	mov	r0, r7
 80055b8:	47c0      	blx	r8
 80055ba:	3001      	adds	r0, #1
 80055bc:	d01e      	beq.n	80055fc <_printf_common+0xa4>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6922      	ldr	r2, [r4, #16]
 80055c2:	f003 0306 	and.w	r3, r3, #6
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	bf02      	ittt	eq
 80055ca:	68e5      	ldreq	r5, [r4, #12]
 80055cc:	6833      	ldreq	r3, [r6, #0]
 80055ce:	1aed      	subeq	r5, r5, r3
 80055d0:	68a3      	ldr	r3, [r4, #8]
 80055d2:	bf0c      	ite	eq
 80055d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d8:	2500      	movne	r5, #0
 80055da:	4293      	cmp	r3, r2
 80055dc:	bfc4      	itt	gt
 80055de:	1a9b      	subgt	r3, r3, r2
 80055e0:	18ed      	addgt	r5, r5, r3
 80055e2:	2600      	movs	r6, #0
 80055e4:	341a      	adds	r4, #26
 80055e6:	42b5      	cmp	r5, r6
 80055e8:	d11a      	bne.n	8005620 <_printf_common+0xc8>
 80055ea:	2000      	movs	r0, #0
 80055ec:	e008      	b.n	8005600 <_printf_common+0xa8>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4652      	mov	r2, sl
 80055f2:	4649      	mov	r1, r9
 80055f4:	4638      	mov	r0, r7
 80055f6:	47c0      	blx	r8
 80055f8:	3001      	adds	r0, #1
 80055fa:	d103      	bne.n	8005604 <_printf_common+0xac>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005604:	3501      	adds	r5, #1
 8005606:	e7c6      	b.n	8005596 <_printf_common+0x3e>
 8005608:	18e1      	adds	r1, r4, r3
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	2030      	movs	r0, #48	; 0x30
 800560e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005612:	4422      	add	r2, r4
 8005614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800561c:	3302      	adds	r3, #2
 800561e:	e7c7      	b.n	80055b0 <_printf_common+0x58>
 8005620:	2301      	movs	r3, #1
 8005622:	4622      	mov	r2, r4
 8005624:	4649      	mov	r1, r9
 8005626:	4638      	mov	r0, r7
 8005628:	47c0      	blx	r8
 800562a:	3001      	adds	r0, #1
 800562c:	d0e6      	beq.n	80055fc <_printf_common+0xa4>
 800562e:	3601      	adds	r6, #1
 8005630:	e7d9      	b.n	80055e6 <_printf_common+0x8e>
	...

08005634 <_printf_i>:
 8005634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	7e0f      	ldrb	r7, [r1, #24]
 800563a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800563c:	2f78      	cmp	r7, #120	; 0x78
 800563e:	4691      	mov	r9, r2
 8005640:	4680      	mov	r8, r0
 8005642:	460c      	mov	r4, r1
 8005644:	469a      	mov	sl, r3
 8005646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800564a:	d807      	bhi.n	800565c <_printf_i+0x28>
 800564c:	2f62      	cmp	r7, #98	; 0x62
 800564e:	d80a      	bhi.n	8005666 <_printf_i+0x32>
 8005650:	2f00      	cmp	r7, #0
 8005652:	f000 80d4 	beq.w	80057fe <_printf_i+0x1ca>
 8005656:	2f58      	cmp	r7, #88	; 0x58
 8005658:	f000 80c0 	beq.w	80057dc <_printf_i+0x1a8>
 800565c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005664:	e03a      	b.n	80056dc <_printf_i+0xa8>
 8005666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800566a:	2b15      	cmp	r3, #21
 800566c:	d8f6      	bhi.n	800565c <_printf_i+0x28>
 800566e:	a101      	add	r1, pc, #4	; (adr r1, 8005674 <_printf_i+0x40>)
 8005670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005674:	080056cd 	.word	0x080056cd
 8005678:	080056e1 	.word	0x080056e1
 800567c:	0800565d 	.word	0x0800565d
 8005680:	0800565d 	.word	0x0800565d
 8005684:	0800565d 	.word	0x0800565d
 8005688:	0800565d 	.word	0x0800565d
 800568c:	080056e1 	.word	0x080056e1
 8005690:	0800565d 	.word	0x0800565d
 8005694:	0800565d 	.word	0x0800565d
 8005698:	0800565d 	.word	0x0800565d
 800569c:	0800565d 	.word	0x0800565d
 80056a0:	080057e5 	.word	0x080057e5
 80056a4:	0800570d 	.word	0x0800570d
 80056a8:	0800579f 	.word	0x0800579f
 80056ac:	0800565d 	.word	0x0800565d
 80056b0:	0800565d 	.word	0x0800565d
 80056b4:	08005807 	.word	0x08005807
 80056b8:	0800565d 	.word	0x0800565d
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800565d 	.word	0x0800565d
 80056c4:	0800565d 	.word	0x0800565d
 80056c8:	080057a7 	.word	0x080057a7
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	1d1a      	adds	r2, r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	602a      	str	r2, [r5, #0]
 80056d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056dc:	2301      	movs	r3, #1
 80056de:	e09f      	b.n	8005820 <_printf_i+0x1ec>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	0607      	lsls	r7, r0, #24
 80056e6:	f103 0104 	add.w	r1, r3, #4
 80056ea:	6029      	str	r1, [r5, #0]
 80056ec:	d501      	bpl.n	80056f2 <_printf_i+0xbe>
 80056ee:	681e      	ldr	r6, [r3, #0]
 80056f0:	e003      	b.n	80056fa <_printf_i+0xc6>
 80056f2:	0646      	lsls	r6, r0, #25
 80056f4:	d5fb      	bpl.n	80056ee <_printf_i+0xba>
 80056f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	da03      	bge.n	8005706 <_printf_i+0xd2>
 80056fe:	232d      	movs	r3, #45	; 0x2d
 8005700:	4276      	negs	r6, r6
 8005702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005706:	485a      	ldr	r0, [pc, #360]	; (8005870 <_printf_i+0x23c>)
 8005708:	230a      	movs	r3, #10
 800570a:	e012      	b.n	8005732 <_printf_i+0xfe>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1d19      	adds	r1, r3, #4
 8005712:	6029      	str	r1, [r5, #0]
 8005714:	0605      	lsls	r5, r0, #24
 8005716:	d501      	bpl.n	800571c <_printf_i+0xe8>
 8005718:	681e      	ldr	r6, [r3, #0]
 800571a:	e002      	b.n	8005722 <_printf_i+0xee>
 800571c:	0641      	lsls	r1, r0, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0xe4>
 8005720:	881e      	ldrh	r6, [r3, #0]
 8005722:	4853      	ldr	r0, [pc, #332]	; (8005870 <_printf_i+0x23c>)
 8005724:	2f6f      	cmp	r7, #111	; 0x6f
 8005726:	bf0c      	ite	eq
 8005728:	2308      	moveq	r3, #8
 800572a:	230a      	movne	r3, #10
 800572c:	2100      	movs	r1, #0
 800572e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005732:	6865      	ldr	r5, [r4, #4]
 8005734:	60a5      	str	r5, [r4, #8]
 8005736:	2d00      	cmp	r5, #0
 8005738:	bfa2      	ittt	ge
 800573a:	6821      	ldrge	r1, [r4, #0]
 800573c:	f021 0104 	bicge.w	r1, r1, #4
 8005740:	6021      	strge	r1, [r4, #0]
 8005742:	b90e      	cbnz	r6, 8005748 <_printf_i+0x114>
 8005744:	2d00      	cmp	r5, #0
 8005746:	d04b      	beq.n	80057e0 <_printf_i+0x1ac>
 8005748:	4615      	mov	r5, r2
 800574a:	fbb6 f1f3 	udiv	r1, r6, r3
 800574e:	fb03 6711 	mls	r7, r3, r1, r6
 8005752:	5dc7      	ldrb	r7, [r0, r7]
 8005754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005758:	4637      	mov	r7, r6
 800575a:	42bb      	cmp	r3, r7
 800575c:	460e      	mov	r6, r1
 800575e:	d9f4      	bls.n	800574a <_printf_i+0x116>
 8005760:	2b08      	cmp	r3, #8
 8005762:	d10b      	bne.n	800577c <_printf_i+0x148>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	07de      	lsls	r6, r3, #31
 8005768:	d508      	bpl.n	800577c <_printf_i+0x148>
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	6861      	ldr	r1, [r4, #4]
 800576e:	4299      	cmp	r1, r3
 8005770:	bfde      	ittt	le
 8005772:	2330      	movle	r3, #48	; 0x30
 8005774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800577c:	1b52      	subs	r2, r2, r5
 800577e:	6122      	str	r2, [r4, #16]
 8005780:	f8cd a000 	str.w	sl, [sp]
 8005784:	464b      	mov	r3, r9
 8005786:	aa03      	add	r2, sp, #12
 8005788:	4621      	mov	r1, r4
 800578a:	4640      	mov	r0, r8
 800578c:	f7ff fee4 	bl	8005558 <_printf_common>
 8005790:	3001      	adds	r0, #1
 8005792:	d14a      	bne.n	800582a <_printf_i+0x1f6>
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	b004      	add	sp, #16
 800579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f043 0320 	orr.w	r3, r3, #32
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	4833      	ldr	r0, [pc, #204]	; (8005874 <_printf_i+0x240>)
 80057a8:	2778      	movs	r7, #120	; 0x78
 80057aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	061f      	lsls	r7, r3, #24
 80057b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b8:	d402      	bmi.n	80057c0 <_printf_i+0x18c>
 80057ba:	065f      	lsls	r7, r3, #25
 80057bc:	bf48      	it	mi
 80057be:	b2b6      	uxthmi	r6, r6
 80057c0:	07df      	lsls	r7, r3, #31
 80057c2:	bf48      	it	mi
 80057c4:	f043 0320 	orrmi.w	r3, r3, #32
 80057c8:	6029      	str	r1, [r5, #0]
 80057ca:	bf48      	it	mi
 80057cc:	6023      	strmi	r3, [r4, #0]
 80057ce:	b91e      	cbnz	r6, 80057d8 <_printf_i+0x1a4>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	2310      	movs	r3, #16
 80057da:	e7a7      	b.n	800572c <_printf_i+0xf8>
 80057dc:	4824      	ldr	r0, [pc, #144]	; (8005870 <_printf_i+0x23c>)
 80057de:	e7e4      	b.n	80057aa <_printf_i+0x176>
 80057e0:	4615      	mov	r5, r2
 80057e2:	e7bd      	b.n	8005760 <_printf_i+0x12c>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	6826      	ldr	r6, [r4, #0]
 80057e8:	6961      	ldr	r1, [r4, #20]
 80057ea:	1d18      	adds	r0, r3, #4
 80057ec:	6028      	str	r0, [r5, #0]
 80057ee:	0635      	lsls	r5, r6, #24
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	d501      	bpl.n	80057f8 <_printf_i+0x1c4>
 80057f4:	6019      	str	r1, [r3, #0]
 80057f6:	e002      	b.n	80057fe <_printf_i+0x1ca>
 80057f8:	0670      	lsls	r0, r6, #25
 80057fa:	d5fb      	bpl.n	80057f4 <_printf_i+0x1c0>
 80057fc:	8019      	strh	r1, [r3, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	6123      	str	r3, [r4, #16]
 8005802:	4615      	mov	r5, r2
 8005804:	e7bc      	b.n	8005780 <_printf_i+0x14c>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	2100      	movs	r1, #0
 8005812:	4628      	mov	r0, r5
 8005814:	f7fa fce4 	bl	80001e0 <memchr>
 8005818:	b108      	cbz	r0, 800581e <_printf_i+0x1ea>
 800581a:	1b40      	subs	r0, r0, r5
 800581c:	6060      	str	r0, [r4, #4]
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	2300      	movs	r3, #0
 8005824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005828:	e7aa      	b.n	8005780 <_printf_i+0x14c>
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	462a      	mov	r2, r5
 800582e:	4649      	mov	r1, r9
 8005830:	4640      	mov	r0, r8
 8005832:	47d0      	blx	sl
 8005834:	3001      	adds	r0, #1
 8005836:	d0ad      	beq.n	8005794 <_printf_i+0x160>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	079b      	lsls	r3, r3, #30
 800583c:	d413      	bmi.n	8005866 <_printf_i+0x232>
 800583e:	68e0      	ldr	r0, [r4, #12]
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	4298      	cmp	r0, r3
 8005844:	bfb8      	it	lt
 8005846:	4618      	movlt	r0, r3
 8005848:	e7a6      	b.n	8005798 <_printf_i+0x164>
 800584a:	2301      	movs	r3, #1
 800584c:	4632      	mov	r2, r6
 800584e:	4649      	mov	r1, r9
 8005850:	4640      	mov	r0, r8
 8005852:	47d0      	blx	sl
 8005854:	3001      	adds	r0, #1
 8005856:	d09d      	beq.n	8005794 <_printf_i+0x160>
 8005858:	3501      	adds	r5, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	9903      	ldr	r1, [sp, #12]
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	42ab      	cmp	r3, r5
 8005862:	dcf2      	bgt.n	800584a <_printf_i+0x216>
 8005864:	e7eb      	b.n	800583e <_printf_i+0x20a>
 8005866:	2500      	movs	r5, #0
 8005868:	f104 0619 	add.w	r6, r4, #25
 800586c:	e7f5      	b.n	800585a <_printf_i+0x226>
 800586e:	bf00      	nop
 8005870:	08005fa9 	.word	0x08005fa9
 8005874:	08005fba 	.word	0x08005fba

08005878 <_scanf_chars>:
 8005878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800587c:	4615      	mov	r5, r2
 800587e:	688a      	ldr	r2, [r1, #8]
 8005880:	4680      	mov	r8, r0
 8005882:	460c      	mov	r4, r1
 8005884:	b932      	cbnz	r2, 8005894 <_scanf_chars+0x1c>
 8005886:	698a      	ldr	r2, [r1, #24]
 8005888:	2a00      	cmp	r2, #0
 800588a:	bf0c      	ite	eq
 800588c:	2201      	moveq	r2, #1
 800588e:	f04f 32ff 	movne.w	r2, #4294967295
 8005892:	608a      	str	r2, [r1, #8]
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005928 <_scanf_chars+0xb0>
 800589a:	06d1      	lsls	r1, r2, #27
 800589c:	bf5f      	itttt	pl
 800589e:	681a      	ldrpl	r2, [r3, #0]
 80058a0:	1d11      	addpl	r1, r2, #4
 80058a2:	6019      	strpl	r1, [r3, #0]
 80058a4:	6816      	ldrpl	r6, [r2, #0]
 80058a6:	2700      	movs	r7, #0
 80058a8:	69a0      	ldr	r0, [r4, #24]
 80058aa:	b188      	cbz	r0, 80058d0 <_scanf_chars+0x58>
 80058ac:	2801      	cmp	r0, #1
 80058ae:	d107      	bne.n	80058c0 <_scanf_chars+0x48>
 80058b0:	682a      	ldr	r2, [r5, #0]
 80058b2:	7811      	ldrb	r1, [r2, #0]
 80058b4:	6962      	ldr	r2, [r4, #20]
 80058b6:	5c52      	ldrb	r2, [r2, r1]
 80058b8:	b952      	cbnz	r2, 80058d0 <_scanf_chars+0x58>
 80058ba:	2f00      	cmp	r7, #0
 80058bc:	d031      	beq.n	8005922 <_scanf_chars+0xaa>
 80058be:	e022      	b.n	8005906 <_scanf_chars+0x8e>
 80058c0:	2802      	cmp	r0, #2
 80058c2:	d120      	bne.n	8005906 <_scanf_chars+0x8e>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80058cc:	071b      	lsls	r3, r3, #28
 80058ce:	d41a      	bmi.n	8005906 <_scanf_chars+0x8e>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	06da      	lsls	r2, r3, #27
 80058d4:	bf5e      	ittt	pl
 80058d6:	682b      	ldrpl	r3, [r5, #0]
 80058d8:	781b      	ldrbpl	r3, [r3, #0]
 80058da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80058de:	682a      	ldr	r2, [r5, #0]
 80058e0:	686b      	ldr	r3, [r5, #4]
 80058e2:	3201      	adds	r2, #1
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	68a2      	ldr	r2, [r4, #8]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	3a01      	subs	r2, #1
 80058ec:	606b      	str	r3, [r5, #4]
 80058ee:	3701      	adds	r7, #1
 80058f0:	60a2      	str	r2, [r4, #8]
 80058f2:	b142      	cbz	r2, 8005906 <_scanf_chars+0x8e>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dcd7      	bgt.n	80058a8 <_scanf_chars+0x30>
 80058f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058fc:	4629      	mov	r1, r5
 80058fe:	4640      	mov	r0, r8
 8005900:	4798      	blx	r3
 8005902:	2800      	cmp	r0, #0
 8005904:	d0d0      	beq.n	80058a8 <_scanf_chars+0x30>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f013 0310 	ands.w	r3, r3, #16
 800590c:	d105      	bne.n	800591a <_scanf_chars+0xa2>
 800590e:	68e2      	ldr	r2, [r4, #12]
 8005910:	3201      	adds	r2, #1
 8005912:	60e2      	str	r2, [r4, #12]
 8005914:	69a2      	ldr	r2, [r4, #24]
 8005916:	b102      	cbz	r2, 800591a <_scanf_chars+0xa2>
 8005918:	7033      	strb	r3, [r6, #0]
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	443b      	add	r3, r7
 800591e:	6123      	str	r3, [r4, #16]
 8005920:	2000      	movs	r0, #0
 8005922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005926:	bf00      	nop
 8005928:	08005fe7 	.word	0x08005fe7

0800592c <_scanf_i>:
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005930:	4698      	mov	r8, r3
 8005932:	4b74      	ldr	r3, [pc, #464]	; (8005b04 <_scanf_i+0x1d8>)
 8005934:	460c      	mov	r4, r1
 8005936:	4682      	mov	sl, r0
 8005938:	4616      	mov	r6, r2
 800593a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800593e:	b087      	sub	sp, #28
 8005940:	ab03      	add	r3, sp, #12
 8005942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005946:	4b70      	ldr	r3, [pc, #448]	; (8005b08 <_scanf_i+0x1dc>)
 8005948:	69a1      	ldr	r1, [r4, #24]
 800594a:	4a70      	ldr	r2, [pc, #448]	; (8005b0c <_scanf_i+0x1e0>)
 800594c:	2903      	cmp	r1, #3
 800594e:	bf18      	it	ne
 8005950:	461a      	movne	r2, r3
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	9201      	str	r2, [sp, #4]
 8005956:	1e5a      	subs	r2, r3, #1
 8005958:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800595c:	bf88      	it	hi
 800595e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005962:	4627      	mov	r7, r4
 8005964:	bf82      	ittt	hi
 8005966:	eb03 0905 	addhi.w	r9, r3, r5
 800596a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800596e:	60a3      	strhi	r3, [r4, #8]
 8005970:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005974:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005978:	bf98      	it	ls
 800597a:	f04f 0900 	movls.w	r9, #0
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	463d      	mov	r5, r7
 8005982:	f04f 0b00 	mov.w	fp, #0
 8005986:	6831      	ldr	r1, [r6, #0]
 8005988:	ab03      	add	r3, sp, #12
 800598a:	7809      	ldrb	r1, [r1, #0]
 800598c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005990:	2202      	movs	r2, #2
 8005992:	f7fa fc25 	bl	80001e0 <memchr>
 8005996:	b328      	cbz	r0, 80059e4 <_scanf_i+0xb8>
 8005998:	f1bb 0f01 	cmp.w	fp, #1
 800599c:	d159      	bne.n	8005a52 <_scanf_i+0x126>
 800599e:	6862      	ldr	r2, [r4, #4]
 80059a0:	b92a      	cbnz	r2, 80059ae <_scanf_i+0x82>
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	2308      	movs	r3, #8
 80059a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	6022      	str	r2, [r4, #0]
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80059b4:	6022      	str	r2, [r4, #0]
 80059b6:	68a2      	ldr	r2, [r4, #8]
 80059b8:	1e51      	subs	r1, r2, #1
 80059ba:	60a1      	str	r1, [r4, #8]
 80059bc:	b192      	cbz	r2, 80059e4 <_scanf_i+0xb8>
 80059be:	6832      	ldr	r2, [r6, #0]
 80059c0:	1c51      	adds	r1, r2, #1
 80059c2:	6031      	str	r1, [r6, #0]
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	f805 2b01 	strb.w	r2, [r5], #1
 80059ca:	6872      	ldr	r2, [r6, #4]
 80059cc:	3a01      	subs	r2, #1
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	6072      	str	r2, [r6, #4]
 80059d2:	dc07      	bgt.n	80059e4 <_scanf_i+0xb8>
 80059d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80059d8:	4631      	mov	r1, r6
 80059da:	4650      	mov	r0, sl
 80059dc:	4790      	blx	r2
 80059de:	2800      	cmp	r0, #0
 80059e0:	f040 8085 	bne.w	8005aee <_scanf_i+0x1c2>
 80059e4:	f10b 0b01 	add.w	fp, fp, #1
 80059e8:	f1bb 0f03 	cmp.w	fp, #3
 80059ec:	d1cb      	bne.n	8005986 <_scanf_i+0x5a>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	b90b      	cbnz	r3, 80059f6 <_scanf_i+0xca>
 80059f2:	230a      	movs	r3, #10
 80059f4:	6063      	str	r3, [r4, #4]
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	4945      	ldr	r1, [pc, #276]	; (8005b10 <_scanf_i+0x1e4>)
 80059fa:	6960      	ldr	r0, [r4, #20]
 80059fc:	1ac9      	subs	r1, r1, r3
 80059fe:	f000 f889 	bl	8005b14 <__sccl>
 8005a02:	f04f 0b00 	mov.w	fp, #0
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03d      	beq.n	8005a8a <_scanf_i+0x15e>
 8005a0e:	6831      	ldr	r1, [r6, #0]
 8005a10:	6960      	ldr	r0, [r4, #20]
 8005a12:	f891 c000 	ldrb.w	ip, [r1]
 8005a16:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d035      	beq.n	8005a8a <_scanf_i+0x15e>
 8005a1e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005a22:	d124      	bne.n	8005a6e <_scanf_i+0x142>
 8005a24:	0510      	lsls	r0, r2, #20
 8005a26:	d522      	bpl.n	8005a6e <_scanf_i+0x142>
 8005a28:	f10b 0b01 	add.w	fp, fp, #1
 8005a2c:	f1b9 0f00 	cmp.w	r9, #0
 8005a30:	d003      	beq.n	8005a3a <_scanf_i+0x10e>
 8005a32:	3301      	adds	r3, #1
 8005a34:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	6873      	ldr	r3, [r6, #4]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	6073      	str	r3, [r6, #4]
 8005a42:	dd1b      	ble.n	8005a7c <_scanf_i+0x150>
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	60a3      	str	r3, [r4, #8]
 8005a50:	e7d9      	b.n	8005a06 <_scanf_i+0xda>
 8005a52:	f1bb 0f02 	cmp.w	fp, #2
 8005a56:	d1ae      	bne.n	80059b6 <_scanf_i+0x8a>
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005a5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005a62:	d1bf      	bne.n	80059e4 <_scanf_i+0xb8>
 8005a64:	2310      	movs	r3, #16
 8005a66:	6063      	str	r3, [r4, #4]
 8005a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6c:	e7a2      	b.n	80059b4 <_scanf_i+0x88>
 8005a6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	780b      	ldrb	r3, [r1, #0]
 8005a76:	f805 3b01 	strb.w	r3, [r5], #1
 8005a7a:	e7de      	b.n	8005a3a <_scanf_i+0x10e>
 8005a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a80:	4631      	mov	r1, r6
 8005a82:	4650      	mov	r0, sl
 8005a84:	4798      	blx	r3
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d0df      	beq.n	8005a4a <_scanf_i+0x11e>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	05d9      	lsls	r1, r3, #23
 8005a8e:	d50d      	bpl.n	8005aac <_scanf_i+0x180>
 8005a90:	42bd      	cmp	r5, r7
 8005a92:	d909      	bls.n	8005aa8 <_scanf_i+0x17c>
 8005a94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	4798      	blx	r3
 8005aa2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005aa6:	464d      	mov	r5, r9
 8005aa8:	42bd      	cmp	r5, r7
 8005aaa:	d028      	beq.n	8005afe <_scanf_i+0x1d2>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	f012 0210 	ands.w	r2, r2, #16
 8005ab2:	d113      	bne.n	8005adc <_scanf_i+0x1b0>
 8005ab4:	702a      	strb	r2, [r5, #0]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	9e01      	ldr	r6, [sp, #4]
 8005aba:	4639      	mov	r1, r7
 8005abc:	4650      	mov	r0, sl
 8005abe:	47b0      	blx	r6
 8005ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac4:	6821      	ldr	r1, [r4, #0]
 8005ac6:	1d1a      	adds	r2, r3, #4
 8005ac8:	f8c8 2000 	str.w	r2, [r8]
 8005acc:	f011 0f20 	tst.w	r1, #32
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	d00f      	beq.n	8005af4 <_scanf_i+0x1c8>
 8005ad4:	6018      	str	r0, [r3, #0]
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60e3      	str	r3, [r4, #12]
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	1bed      	subs	r5, r5, r7
 8005ae0:	445d      	add	r5, fp
 8005ae2:	442b      	add	r3, r5
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	b007      	add	sp, #28
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aee:	f04f 0b00 	mov.w	fp, #0
 8005af2:	e7ca      	b.n	8005a8a <_scanf_i+0x15e>
 8005af4:	07ca      	lsls	r2, r1, #31
 8005af6:	bf4c      	ite	mi
 8005af8:	8018      	strhmi	r0, [r3, #0]
 8005afa:	6018      	strpl	r0, [r3, #0]
 8005afc:	e7eb      	b.n	8005ad6 <_scanf_i+0x1aa>
 8005afe:	2001      	movs	r0, #1
 8005b00:	e7f2      	b.n	8005ae8 <_scanf_i+0x1bc>
 8005b02:	bf00      	nop
 8005b04:	08005f44 	.word	0x08005f44
 8005b08:	08005eb9 	.word	0x08005eb9
 8005b0c:	08005dd1 	.word	0x08005dd1
 8005b10:	08005fdb 	.word	0x08005fdb

08005b14 <__sccl>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	780b      	ldrb	r3, [r1, #0]
 8005b18:	4604      	mov	r4, r0
 8005b1a:	2b5e      	cmp	r3, #94	; 0x5e
 8005b1c:	bf0b      	itete	eq
 8005b1e:	784b      	ldrbeq	r3, [r1, #1]
 8005b20:	1c4a      	addne	r2, r1, #1
 8005b22:	1c8a      	addeq	r2, r1, #2
 8005b24:	2100      	movne	r1, #0
 8005b26:	bf08      	it	eq
 8005b28:	2101      	moveq	r1, #1
 8005b2a:	3801      	subs	r0, #1
 8005b2c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005b30:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005b34:	42a8      	cmp	r0, r5
 8005b36:	d1fb      	bne.n	8005b30 <__sccl+0x1c>
 8005b38:	b90b      	cbnz	r3, 8005b3e <__sccl+0x2a>
 8005b3a:	1e50      	subs	r0, r2, #1
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	f081 0101 	eor.w	r1, r1, #1
 8005b42:	54e1      	strb	r1, [r4, r3]
 8005b44:	4610      	mov	r0, r2
 8005b46:	4602      	mov	r2, r0
 8005b48:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b4c:	2d2d      	cmp	r5, #45	; 0x2d
 8005b4e:	d005      	beq.n	8005b5c <__sccl+0x48>
 8005b50:	2d5d      	cmp	r5, #93	; 0x5d
 8005b52:	d016      	beq.n	8005b82 <__sccl+0x6e>
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	d0f1      	beq.n	8005b3c <__sccl+0x28>
 8005b58:	462b      	mov	r3, r5
 8005b5a:	e7f2      	b.n	8005b42 <__sccl+0x2e>
 8005b5c:	7846      	ldrb	r6, [r0, #1]
 8005b5e:	2e5d      	cmp	r6, #93	; 0x5d
 8005b60:	d0fa      	beq.n	8005b58 <__sccl+0x44>
 8005b62:	42b3      	cmp	r3, r6
 8005b64:	dcf8      	bgt.n	8005b58 <__sccl+0x44>
 8005b66:	3002      	adds	r0, #2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	3201      	adds	r2, #1
 8005b6c:	4296      	cmp	r6, r2
 8005b6e:	54a1      	strb	r1, [r4, r2]
 8005b70:	dcfb      	bgt.n	8005b6a <__sccl+0x56>
 8005b72:	1af2      	subs	r2, r6, r3
 8005b74:	3a01      	subs	r2, #1
 8005b76:	1c5d      	adds	r5, r3, #1
 8005b78:	42b3      	cmp	r3, r6
 8005b7a:	bfa8      	it	ge
 8005b7c:	2200      	movge	r2, #0
 8005b7e:	18ab      	adds	r3, r5, r2
 8005b80:	e7e1      	b.n	8005b46 <__sccl+0x32>
 8005b82:	4610      	mov	r0, r2
 8005b84:	e7da      	b.n	8005b3c <__sccl+0x28>

08005b86 <__submore>:
 8005b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b92:	4299      	cmp	r1, r3
 8005b94:	d11d      	bne.n	8005bd2 <__submore+0x4c>
 8005b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b9a:	f7ff f927 	bl	8004dec <_malloc_r>
 8005b9e:	b918      	cbnz	r0, 8005ba8 <__submore+0x22>
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bac:	63a3      	str	r3, [r4, #56]	; 0x38
 8005bae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005bb2:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005bb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005bbc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005bc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005bc4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005bc8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005bcc:	6020      	str	r0, [r4, #0]
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e7e8      	b.n	8005ba4 <__submore+0x1e>
 8005bd2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005bd4:	0077      	lsls	r7, r6, #1
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	f000 f848 	bl	8005c6c <_realloc_r>
 8005bdc:	4605      	mov	r5, r0
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d0de      	beq.n	8005ba0 <__submore+0x1a>
 8005be2:	eb00 0806 	add.w	r8, r0, r6
 8005be6:	4601      	mov	r1, r0
 8005be8:	4632      	mov	r2, r6
 8005bea:	4640      	mov	r0, r8
 8005bec:	f000 f830 	bl	8005c50 <memcpy>
 8005bf0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005bf4:	f8c4 8000 	str.w	r8, [r4]
 8005bf8:	e7e9      	b.n	8005bce <__submore+0x48>

08005bfa <memmove>:
 8005bfa:	4288      	cmp	r0, r1
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	eb01 0402 	add.w	r4, r1, r2
 8005c02:	d902      	bls.n	8005c0a <memmove+0x10>
 8005c04:	4284      	cmp	r4, r0
 8005c06:	4623      	mov	r3, r4
 8005c08:	d807      	bhi.n	8005c1a <memmove+0x20>
 8005c0a:	1e43      	subs	r3, r0, #1
 8005c0c:	42a1      	cmp	r1, r4
 8005c0e:	d008      	beq.n	8005c22 <memmove+0x28>
 8005c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c18:	e7f8      	b.n	8005c0c <memmove+0x12>
 8005c1a:	4402      	add	r2, r0
 8005c1c:	4601      	mov	r1, r0
 8005c1e:	428a      	cmp	r2, r1
 8005c20:	d100      	bne.n	8005c24 <memmove+0x2a>
 8005c22:	bd10      	pop	{r4, pc}
 8005c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c2c:	e7f7      	b.n	8005c1e <memmove+0x24>
	...

08005c30 <_sbrk_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d06      	ldr	r5, [pc, #24]	; (8005c4c <_sbrk_r+0x1c>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f7fb f95a 	bl	8000ef4 <_sbrk>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_sbrk_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_sbrk_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200002e0 	.word	0x200002e0

08005c50 <memcpy>:
 8005c50:	440a      	add	r2, r1
 8005c52:	4291      	cmp	r1, r2
 8005c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c58:	d100      	bne.n	8005c5c <memcpy+0xc>
 8005c5a:	4770      	bx	lr
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c66:	4291      	cmp	r1, r2
 8005c68:	d1f9      	bne.n	8005c5e <memcpy+0xe>
 8005c6a:	bd10      	pop	{r4, pc}

08005c6c <_realloc_r>:
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	4680      	mov	r8, r0
 8005c72:	4614      	mov	r4, r2
 8005c74:	460e      	mov	r6, r1
 8005c76:	b921      	cbnz	r1, 8005c82 <_realloc_r+0x16>
 8005c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	f7ff b8b5 	b.w	8004dec <_malloc_r>
 8005c82:	b92a      	cbnz	r2, 8005c90 <_realloc_r+0x24>
 8005c84:	f7ff f846 	bl	8004d14 <_free_r>
 8005c88:	4625      	mov	r5, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c90:	f000 f914 	bl	8005ebc <_malloc_usable_size_r>
 8005c94:	4284      	cmp	r4, r0
 8005c96:	4607      	mov	r7, r0
 8005c98:	d802      	bhi.n	8005ca0 <_realloc_r+0x34>
 8005c9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c9e:	d812      	bhi.n	8005cc6 <_realloc_r+0x5a>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff f8a2 	bl	8004dec <_malloc_r>
 8005ca8:	4605      	mov	r5, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d0ed      	beq.n	8005c8a <_realloc_r+0x1e>
 8005cae:	42bc      	cmp	r4, r7
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	bf28      	it	cs
 8005cb6:	463a      	movcs	r2, r7
 8005cb8:	f7ff ffca 	bl	8005c50 <memcpy>
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff f828 	bl	8004d14 <_free_r>
 8005cc4:	e7e1      	b.n	8005c8a <_realloc_r+0x1e>
 8005cc6:	4635      	mov	r5, r6
 8005cc8:	e7df      	b.n	8005c8a <_realloc_r+0x1e>
	...

08005ccc <_strtol_l.constprop.0>:
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd2:	d001      	beq.n	8005cd8 <_strtol_l.constprop.0+0xc>
 8005cd4:	2b24      	cmp	r3, #36	; 0x24
 8005cd6:	d906      	bls.n	8005ce6 <_strtol_l.constprop.0+0x1a>
 8005cd8:	f7fe fff0 	bl	8004cbc <__errno>
 8005cdc:	2316      	movs	r3, #22
 8005cde:	6003      	str	r3, [r0, #0]
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005dcc <_strtol_l.constprop.0+0x100>
 8005cea:	460d      	mov	r5, r1
 8005cec:	462e      	mov	r6, r5
 8005cee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cf2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005cf6:	f017 0708 	ands.w	r7, r7, #8
 8005cfa:	d1f7      	bne.n	8005cec <_strtol_l.constprop.0+0x20>
 8005cfc:	2c2d      	cmp	r4, #45	; 0x2d
 8005cfe:	d132      	bne.n	8005d66 <_strtol_l.constprop.0+0x9a>
 8005d00:	782c      	ldrb	r4, [r5, #0]
 8005d02:	2701      	movs	r7, #1
 8005d04:	1cb5      	adds	r5, r6, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d05b      	beq.n	8005dc2 <_strtol_l.constprop.0+0xf6>
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d109      	bne.n	8005d22 <_strtol_l.constprop.0+0x56>
 8005d0e:	2c30      	cmp	r4, #48	; 0x30
 8005d10:	d107      	bne.n	8005d22 <_strtol_l.constprop.0+0x56>
 8005d12:	782c      	ldrb	r4, [r5, #0]
 8005d14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d18:	2c58      	cmp	r4, #88	; 0x58
 8005d1a:	d14d      	bne.n	8005db8 <_strtol_l.constprop.0+0xec>
 8005d1c:	786c      	ldrb	r4, [r5, #1]
 8005d1e:	2310      	movs	r3, #16
 8005d20:	3502      	adds	r5, #2
 8005d22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d26:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d2a:	f04f 0e00 	mov.w	lr, #0
 8005d2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d32:	4676      	mov	r6, lr
 8005d34:	fb03 8a19 	mls	sl, r3, r9, r8
 8005d38:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d3c:	f1bc 0f09 	cmp.w	ip, #9
 8005d40:	d816      	bhi.n	8005d70 <_strtol_l.constprop.0+0xa4>
 8005d42:	4664      	mov	r4, ip
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	dd24      	ble.n	8005d92 <_strtol_l.constprop.0+0xc6>
 8005d48:	f1be 3fff 	cmp.w	lr, #4294967295
 8005d4c:	d008      	beq.n	8005d60 <_strtol_l.constprop.0+0x94>
 8005d4e:	45b1      	cmp	r9, r6
 8005d50:	d31c      	bcc.n	8005d8c <_strtol_l.constprop.0+0xc0>
 8005d52:	d101      	bne.n	8005d58 <_strtol_l.constprop.0+0x8c>
 8005d54:	45a2      	cmp	sl, r4
 8005d56:	db19      	blt.n	8005d8c <_strtol_l.constprop.0+0xc0>
 8005d58:	fb06 4603 	mla	r6, r6, r3, r4
 8005d5c:	f04f 0e01 	mov.w	lr, #1
 8005d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d64:	e7e8      	b.n	8005d38 <_strtol_l.constprop.0+0x6c>
 8005d66:	2c2b      	cmp	r4, #43	; 0x2b
 8005d68:	bf04      	itt	eq
 8005d6a:	782c      	ldrbeq	r4, [r5, #0]
 8005d6c:	1cb5      	addeq	r5, r6, #2
 8005d6e:	e7ca      	b.n	8005d06 <_strtol_l.constprop.0+0x3a>
 8005d70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005d74:	f1bc 0f19 	cmp.w	ip, #25
 8005d78:	d801      	bhi.n	8005d7e <_strtol_l.constprop.0+0xb2>
 8005d7a:	3c37      	subs	r4, #55	; 0x37
 8005d7c:	e7e2      	b.n	8005d44 <_strtol_l.constprop.0+0x78>
 8005d7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005d82:	f1bc 0f19 	cmp.w	ip, #25
 8005d86:	d804      	bhi.n	8005d92 <_strtol_l.constprop.0+0xc6>
 8005d88:	3c57      	subs	r4, #87	; 0x57
 8005d8a:	e7db      	b.n	8005d44 <_strtol_l.constprop.0+0x78>
 8005d8c:	f04f 3eff 	mov.w	lr, #4294967295
 8005d90:	e7e6      	b.n	8005d60 <_strtol_l.constprop.0+0x94>
 8005d92:	f1be 3fff 	cmp.w	lr, #4294967295
 8005d96:	d105      	bne.n	8005da4 <_strtol_l.constprop.0+0xd8>
 8005d98:	2322      	movs	r3, #34	; 0x22
 8005d9a:	6003      	str	r3, [r0, #0]
 8005d9c:	4646      	mov	r6, r8
 8005d9e:	b942      	cbnz	r2, 8005db2 <_strtol_l.constprop.0+0xe6>
 8005da0:	4630      	mov	r0, r6
 8005da2:	e79e      	b.n	8005ce2 <_strtol_l.constprop.0+0x16>
 8005da4:	b107      	cbz	r7, 8005da8 <_strtol_l.constprop.0+0xdc>
 8005da6:	4276      	negs	r6, r6
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d0f9      	beq.n	8005da0 <_strtol_l.constprop.0+0xd4>
 8005dac:	f1be 0f00 	cmp.w	lr, #0
 8005db0:	d000      	beq.n	8005db4 <_strtol_l.constprop.0+0xe8>
 8005db2:	1e69      	subs	r1, r5, #1
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	e7f3      	b.n	8005da0 <_strtol_l.constprop.0+0xd4>
 8005db8:	2430      	movs	r4, #48	; 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1b1      	bne.n	8005d22 <_strtol_l.constprop.0+0x56>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	e7af      	b.n	8005d22 <_strtol_l.constprop.0+0x56>
 8005dc2:	2c30      	cmp	r4, #48	; 0x30
 8005dc4:	d0a5      	beq.n	8005d12 <_strtol_l.constprop.0+0x46>
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	e7ab      	b.n	8005d22 <_strtol_l.constprop.0+0x56>
 8005dca:	bf00      	nop
 8005dcc:	08005fe7 	.word	0x08005fe7

08005dd0 <_strtol_r>:
 8005dd0:	f7ff bf7c 	b.w	8005ccc <_strtol_l.constprop.0>

08005dd4 <_strtoul_l.constprop.0>:
 8005dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	4f36      	ldr	r7, [pc, #216]	; (8005eb4 <_strtoul_l.constprop.0+0xe0>)
 8005dda:	4686      	mov	lr, r0
 8005ddc:	460d      	mov	r5, r1
 8005dde:	4628      	mov	r0, r5
 8005de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005de4:	5d3e      	ldrb	r6, [r7, r4]
 8005de6:	f016 0608 	ands.w	r6, r6, #8
 8005dea:	d1f8      	bne.n	8005dde <_strtoul_l.constprop.0+0xa>
 8005dec:	2c2d      	cmp	r4, #45	; 0x2d
 8005dee:	d130      	bne.n	8005e52 <_strtoul_l.constprop.0+0x7e>
 8005df0:	782c      	ldrb	r4, [r5, #0]
 8005df2:	2601      	movs	r6, #1
 8005df4:	1c85      	adds	r5, r0, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d057      	beq.n	8005eaa <_strtoul_l.constprop.0+0xd6>
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d109      	bne.n	8005e12 <_strtoul_l.constprop.0+0x3e>
 8005dfe:	2c30      	cmp	r4, #48	; 0x30
 8005e00:	d107      	bne.n	8005e12 <_strtoul_l.constprop.0+0x3e>
 8005e02:	7828      	ldrb	r0, [r5, #0]
 8005e04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e08:	2858      	cmp	r0, #88	; 0x58
 8005e0a:	d149      	bne.n	8005ea0 <_strtoul_l.constprop.0+0xcc>
 8005e0c:	786c      	ldrb	r4, [r5, #1]
 8005e0e:	2310      	movs	r3, #16
 8005e10:	3502      	adds	r5, #2
 8005e12:	f04f 38ff 	mov.w	r8, #4294967295
 8005e16:	2700      	movs	r7, #0
 8005e18:	fbb8 f8f3 	udiv	r8, r8, r3
 8005e1c:	fb03 f908 	mul.w	r9, r3, r8
 8005e20:	ea6f 0909 	mvn.w	r9, r9
 8005e24:	4638      	mov	r0, r7
 8005e26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e2a:	f1bc 0f09 	cmp.w	ip, #9
 8005e2e:	d815      	bhi.n	8005e5c <_strtoul_l.constprop.0+0x88>
 8005e30:	4664      	mov	r4, ip
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	dd23      	ble.n	8005e7e <_strtoul_l.constprop.0+0xaa>
 8005e36:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005e3a:	d007      	beq.n	8005e4c <_strtoul_l.constprop.0+0x78>
 8005e3c:	4580      	cmp	r8, r0
 8005e3e:	d31b      	bcc.n	8005e78 <_strtoul_l.constprop.0+0xa4>
 8005e40:	d101      	bne.n	8005e46 <_strtoul_l.constprop.0+0x72>
 8005e42:	45a1      	cmp	r9, r4
 8005e44:	db18      	blt.n	8005e78 <_strtoul_l.constprop.0+0xa4>
 8005e46:	fb00 4003 	mla	r0, r0, r3, r4
 8005e4a:	2701      	movs	r7, #1
 8005e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e50:	e7e9      	b.n	8005e26 <_strtoul_l.constprop.0+0x52>
 8005e52:	2c2b      	cmp	r4, #43	; 0x2b
 8005e54:	bf04      	itt	eq
 8005e56:	782c      	ldrbeq	r4, [r5, #0]
 8005e58:	1c85      	addeq	r5, r0, #2
 8005e5a:	e7cc      	b.n	8005df6 <_strtoul_l.constprop.0+0x22>
 8005e5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005e60:	f1bc 0f19 	cmp.w	ip, #25
 8005e64:	d801      	bhi.n	8005e6a <_strtoul_l.constprop.0+0x96>
 8005e66:	3c37      	subs	r4, #55	; 0x37
 8005e68:	e7e3      	b.n	8005e32 <_strtoul_l.constprop.0+0x5e>
 8005e6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005e6e:	f1bc 0f19 	cmp.w	ip, #25
 8005e72:	d804      	bhi.n	8005e7e <_strtoul_l.constprop.0+0xaa>
 8005e74:	3c57      	subs	r4, #87	; 0x57
 8005e76:	e7dc      	b.n	8005e32 <_strtoul_l.constprop.0+0x5e>
 8005e78:	f04f 37ff 	mov.w	r7, #4294967295
 8005e7c:	e7e6      	b.n	8005e4c <_strtoul_l.constprop.0+0x78>
 8005e7e:	1c7b      	adds	r3, r7, #1
 8005e80:	d106      	bne.n	8005e90 <_strtoul_l.constprop.0+0xbc>
 8005e82:	2322      	movs	r3, #34	; 0x22
 8005e84:	f8ce 3000 	str.w	r3, [lr]
 8005e88:	4638      	mov	r0, r7
 8005e8a:	b932      	cbnz	r2, 8005e9a <_strtoul_l.constprop.0+0xc6>
 8005e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e90:	b106      	cbz	r6, 8005e94 <_strtoul_l.constprop.0+0xc0>
 8005e92:	4240      	negs	r0, r0
 8005e94:	2a00      	cmp	r2, #0
 8005e96:	d0f9      	beq.n	8005e8c <_strtoul_l.constprop.0+0xb8>
 8005e98:	b107      	cbz	r7, 8005e9c <_strtoul_l.constprop.0+0xc8>
 8005e9a:	1e69      	subs	r1, r5, #1
 8005e9c:	6011      	str	r1, [r2, #0]
 8005e9e:	e7f5      	b.n	8005e8c <_strtoul_l.constprop.0+0xb8>
 8005ea0:	2430      	movs	r4, #48	; 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1b5      	bne.n	8005e12 <_strtoul_l.constprop.0+0x3e>
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	e7b3      	b.n	8005e12 <_strtoul_l.constprop.0+0x3e>
 8005eaa:	2c30      	cmp	r4, #48	; 0x30
 8005eac:	d0a9      	beq.n	8005e02 <_strtoul_l.constprop.0+0x2e>
 8005eae:	230a      	movs	r3, #10
 8005eb0:	e7af      	b.n	8005e12 <_strtoul_l.constprop.0+0x3e>
 8005eb2:	bf00      	nop
 8005eb4:	08005fe7 	.word	0x08005fe7

08005eb8 <_strtoul_r>:
 8005eb8:	f7ff bf8c 	b.w	8005dd4 <_strtoul_l.constprop.0>

08005ebc <_malloc_usable_size_r>:
 8005ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec0:	1f18      	subs	r0, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfbc      	itt	lt
 8005ec6:	580b      	ldrlt	r3, [r1, r0]
 8005ec8:	18c0      	addlt	r0, r0, r3
 8005eca:	4770      	bx	lr

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
