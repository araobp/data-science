
MEMSMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c6c  0800a048  0800a048  0001a048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dcb4  0801dcb4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801dcb4  0801dcb4  0002dcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dcbc  0801dcbc  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dcbc  0801dcbc  0002dcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dcc0  0801dcc0  0002dcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801dcc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011318  200001e4  0801dea8  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200114fc  0801dea8  000314fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e084  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041b6  00000000  00000000  0004e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00052508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f8  00000000  00000000  00053430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273cb  00000000  00000000  00053e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001395b  00000000  00000000  0007b1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee9a8  00000000  00000000  0008eb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c14  00000000  00000000  0017d4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0018210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004647  00000000  00000000  00182174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000208  00000000  00000000  001867bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a030 	.word	0x0800a030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a030 	.word	0x0800a030

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea8:	ed2d 8b02 	vpush	{d8}
 8000eac:	b08e      	sub	sp, #56	; 0x38
 8000eae:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fe7c 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f9a6 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 faaa 	bl	8001410 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebc:	f000 fa8a 	bl	80013d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 fa58 	bl	8001374 <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8000ec4:	f000 f9f0 	bl	80012a8 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f000 feeb 	bl	8001ca4 <HAL_Delay>
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, buf, NN) != HAL_OK) {
 8000ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed2:	49b0      	ldr	r1, [pc, #704]	; (8001194 <main+0x2f0>)
 8000ed4:	48b0      	ldr	r0, [pc, #704]	; (8001198 <main+0x2f4>)
 8000ed6:	f001 f9fb 	bl	80022d0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <main+0x40>
    Error_Handler();
 8000ee0:	f000 fb9a 	bl	8001618 <Error_Handler>
  }

  // FFT init
  fs = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 8000ee4:	4bad      	ldr	r3, [pc, #692]	; (800119c <main+0x2f8>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4bad      	ldr	r3, [pc, #692]	; (80011a0 <main+0x2fc>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8000ef0:	4ba9      	ldr	r3, [pc, #676]	; (8001198 <main+0x2f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8000ef8:	4ba7      	ldr	r3, [pc, #668]	; (8001198 <main+0x2f4>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	fbb2 f3f3 	udiv	r3, r2, r3
  fs = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f08:	4ba6      	ldr	r3, [pc, #664]	; (80011a4 <main+0x300>)
 8000f0a:	edc3 7a00 	vstr	s15, [r3]

  // Hanning window
  const float tmp = 2.0f * M_PI / (float) NN;
 8000f0e:	4ba6      	ldr	r3, [pc, #664]	; (80011a8 <main+0x304>)
 8000f10:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 0; i < NN; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
 8000f16:	e01f      	b.n	8000f58 <main+0xb4>
    *(fft_win + i) = 0.5f - 0.5f * arm_cos_f32((float) i * tmp);
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2e:	f005 fddd 	bl	8006aec <arm_cos_f32>
 8000f32:	eef0 7a40 	vmov.f32	s15, s0
 8000f36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4a9a      	ldr	r2, [pc, #616]	; (80011ac <main+0x308>)
 8000f44:	4413      	add	r3, r2
 8000f46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < NN; i++)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3301      	adds	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f5e:	d3db      	bcc.n	8000f18 <main+0x74>

  for (uint32_t i = 0; i < NN / 2; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	e016      	b.n	8000f94 <main+0xf0>
    *(fft_freq + i) = (float) i * (float) fs / (float) NN;
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f70:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <main+0x300>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4a8c      	ldr	r2, [pc, #560]	; (80011b0 <main+0x30c>)
 8000f80:	4413      	add	r3, r2
 8000f82:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80011b4 <main+0x310>
 8000f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8a:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < NN / 2; i++)
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	3301      	adds	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9a:	d3e4      	bcc.n	8000f66 <main+0xc2>

  arm_rfft_fast_init_f32(&S, NN);
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4885      	ldr	r0, [pc, #532]	; (80011b8 <main+0x314>)
 8000fa2:	f004 ffbd 	bl	8005f20 <arm_rfft_fast_init_f32>

  printf("\r\nType 'p' to output single-shot FFT.\r\n");
 8000fa6:	4885      	ldr	r0, [pc, #532]	; (80011bc <main+0x318>)
 8000fa8:	f006 ff08 	bl	8007dbc <puts>
  printf("Type 'a' to enable AC coupling.\r\n");
 8000fac:	4884      	ldr	r0, [pc, #528]	; (80011c0 <main+0x31c>)
 8000fae:	f006 ff05 	bl	8007dbc <puts>
  printf("Type 'A' to disable AC coupling.\r\n");
 8000fb2:	4884      	ldr	r0, [pc, #528]	; (80011c4 <main+0x320>)
 8000fb4:	f006 ff02 	bl	8007dbc <puts>

  HAL_UART_Receive_IT(&huart2, (uint8_t*) &cmd, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4983      	ldr	r1, [pc, #524]	; (80011c8 <main+0x324>)
 8000fbc:	4883      	ldr	r0, [pc, #524]	; (80011cc <main+0x328>)
 8000fbe:	f003 fb1d 	bl	80045fc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // Wait
    while (flag)
 8000fc2:	bf00      	nop
 8000fc4:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <main+0x32c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1fb      	bne.n	8000fc4 <main+0x120>
    // Raw data output
    /*for (uint32_t i = 0; i < FFT_SampleNum; i++)
     printf("%d\r\n", FFT_inp_int32[i]);*/

    // Set input data
    for (uint32_t i = 0; i < NN; i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	e031      	b.n	8001036 <main+0x192>
      fft_in[i] = (float32_t) SaturaLH(fft_in_int32[i] >> 9, saturation_min, saturation_max);
 8000fd2:	4a80      	ldr	r2, [pc, #512]	; (80011d4 <main+0x330>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	125a      	asrs	r2, r3, #9
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	; (80011d8 <main+0x334>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	da06      	bge.n	8000ff2 <main+0x14e>
 8000fe4:	4b7c      	ldr	r3, [pc, #496]	; (80011d8 <main+0x334>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff0:	e018      	b.n	8001024 <main+0x180>
 8000ff2:	4a78      	ldr	r2, [pc, #480]	; (80011d4 <main+0x330>)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	125a      	asrs	r2, r3, #9
 8000ffc:	4b77      	ldr	r3, [pc, #476]	; (80011dc <main+0x338>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	dd06      	ble.n	8001012 <main+0x16e>
 8001004:	4b75      	ldr	r3, [pc, #468]	; (80011dc <main+0x338>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001010:	e008      	b.n	8001024 <main+0x180>
 8001012:	4a70      	ldr	r2, [pc, #448]	; (80011d4 <main+0x330>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	125b      	asrs	r3, r3, #9
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001024:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <main+0x33c>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < NN; i++) {
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3301      	adds	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800103c:	d3c9      	bcc.n	8000fd2 <main+0x12e>
    }

    // AC Coupling
    if (ac_coupling) {
 800103e:	4b69      	ldr	r3, [pc, #420]	; (80011e4 <main+0x340>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <main+0x1a8>
      apply_ac_coupling(fft_in);
 8001046:	4866      	ldr	r0, [pc, #408]	; (80011e0 <main+0x33c>)
 8001048:	f000 fa48 	bl	80014dc <apply_ac_coupling>
    }

    // Windowing
    arm_mult_f32(fft_in, fft_win, fft_in, NN);
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	4a63      	ldr	r2, [pc, #396]	; (80011e0 <main+0x33c>)
 8001052:	4956      	ldr	r1, [pc, #344]	; (80011ac <main+0x308>)
 8001054:	4862      	ldr	r0, [pc, #392]	; (80011e0 <main+0x33c>)
 8001056:	f005 fe1b 	bl	8006c90 <arm_mult_f32>

    // Execute FFT
    arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 800105a:	2300      	movs	r3, #0
 800105c:	4a62      	ldr	r2, [pc, #392]	; (80011e8 <main+0x344>)
 800105e:	4960      	ldr	r1, [pc, #384]	; (80011e0 <main+0x33c>)
 8001060:	4855      	ldr	r0, [pc, #340]	; (80011b8 <main+0x314>)
 8001062:	f005 f841 	bl	80060e8 <arm_rfft_fast_f32>

    // calculate magnitude
    arm_cmplx_mag_f32(fft_out, fft_mag, NN / 2);
 8001066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106a:	4960      	ldr	r1, [pc, #384]	; (80011ec <main+0x348>)
 800106c:	485e      	ldr	r0, [pc, #376]	; (80011e8 <main+0x344>)
 800106e:	f005 fc19 	bl	80068a4 <arm_cmplx_mag_f32>

    // Normalization (Unitary transformation) of magnitude
    arm_scale_f32(fft_mag, 1.0f / sqrtf((float32_t) NN), fft_mag, NN / 2);
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	495d      	ldr	r1, [pc, #372]	; (80011ec <main+0x348>)
 8001078:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80011f0 <main+0x34c>
 800107c:	485b      	ldr	r0, [pc, #364]	; (80011ec <main+0x348>)
 800107e:	f005 fd7f 	bl	8006b80 <arm_scale_f32>
      else
        break;
    }
    */

    float32_t inv_dB_base_mag = 1.0f / 1.0f;
 8001082:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001086:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < NN / 2; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	e01c      	b.n	80010c8 <main+0x224>
      fft_db[i] = 10.0f * log10f(fft_mag[i] * inv_dB_base_mag);
 800108e:	4a57      	ldr	r2, [pc, #348]	; (80011ec <main+0x348>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	f008 fe23 	bl	8009cf0 <log10f>
 80010aa:	eef0 7a40 	vmov.f32	s15, s0
 80010ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <main+0x350>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < NN / 2; i++)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ce:	d3de      	bcc.n	800108e <main+0x1ea>

    // calc max mag
    float32_t mag_max, frq_max;
    uint32_t maxIndex;
    arm_max_f32(fft_mag, NN / 2, &mag_max, &maxIndex);
 80010d0:	463b      	mov	r3, r7
 80010d2:	1d3a      	adds	r2, r7, #4
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <main+0x348>)
 80010da:	f004 fded 	bl	8005cb8 <arm_max_f32>
    frq_max = *(fft_freq + maxIndex);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <main+0x30c>)
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60bb      	str	r3, [r7, #8]

    if (output_result) {
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <main+0x354>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d04c      	beq.n	800118c <main+0x2e8>
      printf(
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <main+0x300>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	4604      	mov	r4, r0
 8001104:	460d      	mov	r5, r1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa1d 	bl	8000548 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9cd 2300 	strd	r2, r3, [sp]
 8001116:	4622      	mov	r2, r4
 8001118:	462b      	mov	r3, r5
 800111a:	ee18 1a10 	vmov	r1, s16
 800111e:	4837      	ldr	r0, [pc, #220]	; (80011fc <main+0x358>)
 8001120:	f006 fde6 	bl	8007cf0 <iprintf>
          "\r\nSampleRate=%d, frq_max = %.1f, mag_max = %f\r\nFreq\tMag\tMag(dB)\r\n",
          (int) fs, frq_max, mag_max);
      for (uint32_t i = 0; i < NN / 2; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e029      	b.n	800117e <main+0x2da>
        printf("%.1f\t%f\t%f\r\n", fft_freq[i], fft_mag[i], fft_db[i]);
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <main+0x30c>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa07 	bl	8000548 <__aeabi_f2d>
 800113a:	4680      	mov	r8, r0
 800113c:	4689      	mov	r9, r1
 800113e:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <main+0x348>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9fd 	bl	8000548 <__aeabi_f2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	4a28      	ldr	r2, [pc, #160]	; (80011f4 <main+0x350>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800116a:	e9cd 4500 	strd	r4, r5, [sp]
 800116e:	4642      	mov	r2, r8
 8001170:	464b      	mov	r3, r9
 8001172:	4823      	ldr	r0, [pc, #140]	; (8001200 <main+0x35c>)
 8001174:	f006 fdbc 	bl	8007cf0 <iprintf>
      for (uint32_t i = 0; i < NN / 2; i++) {
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3301      	adds	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001184:	d3d1      	bcc.n	800112a <main+0x286>
      }

      output_result = false;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <main+0x354>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
    }

    // HAL_Delay(2000);

    flag = true;        // <- Continuous transformation
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <main+0x32c>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
  while (1) {
 8001192:	e716      	b.n	8000fc2 <main+0x11e>
 8001194:	2000035c 	.word	0x2000035c
 8001198:	20000200 	.word	0x20000200
 800119c:	20000010 	.word	0x20000010
 80011a0:	20000254 	.word	0x20000254
 80011a4:	20004374 	.word	0x20004374
 80011a8:	3b490fdb 	.word	0x3b490fdb
 80011ac:	2000d378 	.word	0x2000d378
 80011b0:	2000c378 	.word	0x2000c378
 80011b4:	45000000 	.word	0x45000000
 80011b8:	2000435c 	.word	0x2000435c
 80011bc:	0800a048 	.word	0x0800a048
 80011c0:	0800a070 	.word	0x0800a070
 80011c4:	0800a094 	.word	0x0800a094
 80011c8:	2000f379 	.word	0x2000f379
 80011cc:	200002d4 	.word	0x200002d4
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20004378 	.word	0x20004378
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004
 80011e0:	20006378 	.word	0x20006378
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	20008378 	.word	0x20008378
 80011ec:	2000a378 	.word	0x2000a378
 80011f0:	3cb504f3 	.word	0x3cb504f3
 80011f4:	2000b378 	.word	0x2000b378
 80011f8:	2000f378 	.word	0x2000f378
 80011fc:	0800a0b8 	.word	0x0800a0b8
 8001200:	0800a0fc 	.word	0x0800a0fc

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b096      	sub	sp, #88	; 0x58
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2244      	movs	r2, #68	; 0x44
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f006 feb2 	bl	8007f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001226:	f44f 7000 	mov.w	r0, #512	; 0x200
 800122a:	f001 fdfd 	bl	8002e28 <HAL_PWREx_ControlVoltageScaling>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001234:	f000 f9f0 	bl	8001618 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001240:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001242:	2310      	movs	r3, #16
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001252:	230a      	movs	r3, #10
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001256:	2307      	movs	r3, #7
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125e:	2302      	movs	r3, #2
 8001260:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fe34 	bl	8002ed4 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001272:	f000 f9d1 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2303      	movs	r3, #3
 800127c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f002 f9fc 	bl	800368c <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800129a:	f000 f9bd 	bl	8001618 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3758      	adds	r7, #88	; 0x58
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <MX_DFSDM1_Init+0xbc>)
 80012b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012c6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80012ca:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80012d8:	4821      	ldr	r0, [pc, #132]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 80012da:	f000 fed9 	bl	8002090 <HAL_DFSDM_FilterInit>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80012e4:	f000 f998 	bl	8001618 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <MX_DFSDM1_Init+0xc4>)
 80012ec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 80012fc:	2220      	movs	r2, #32
 80012fe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 800131a:	2204      	movs	r2, #4
 800131c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001326:	2201      	movs	r2, #1
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0x0;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x0;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_DFSDM1_Init+0xc0>)
 8001338:	f000 fdea 	bl	8001f10 <HAL_DFSDM_ChannelInit>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8001342:	f000 f969 	bl	8001618 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001346:	2201      	movs	r2, #1
 8001348:	4909      	ldr	r1, [pc, #36]	; (8001370 <MX_DFSDM1_Init+0xc8>)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_DFSDM1_Init+0xb8>)
 800134c:	f000 ff7a 	bl	8002244 <HAL_DFSDM_FilterConfigRegChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8001356:	f000 f95f 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000200 	.word	0x20000200
 8001364:	40016100 	.word	0x40016100
 8001368:	20000254 	.word	0x20000254
 800136c:	40016060 	.word	0x40016060
 8001370:	00030008 	.word	0x00030008

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART2_UART_Init+0x58>)
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART2_UART_Init+0x58>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USART2_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART2_UART_Init+0x58>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x58>)
 80013b8:	f003 f848 	bl	800444c <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c2:	f000 f929 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002d4 	.word	0x200002d4
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_DMA_Init+0x38>)
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <MX_DMA_Init+0x38>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6493      	str	r3, [r2, #72]	; 0x48
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_DMA_Init+0x38>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	200e      	movs	r0, #14
 80013f8:	f000 fd53 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013fc:	200e      	movs	r0, #14
 80013fe:	f000 fd6c 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <MX_GPIO_Init+0xc4>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_GPIO_Init+0xc4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <MX_GPIO_Init+0xc4>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <MX_GPIO_Init+0xc4>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_GPIO_Init+0xc4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f001 fca5 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001498:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0xc8>)
 80014aa:	f001 faed 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ae:	2320      	movs	r3, #32
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f001 fade 	bl	8002a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000800 	.word	0x48000800

080014dc <apply_ac_coupling>:

/* USER CODE BEGIN 4 */

// AC coupling (to remove DC)
void apply_ac_coupling(float32_t *signal) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  float32_t mean;
  static float32_t mean_hist[NUM_MEANS] = { 0.0f };
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <apply_ac_coupling+0x54>)
 80014e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014ea:	4912      	ldr	r1, [pc, #72]	; (8001534 <apply_ac_coupling+0x58>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fb75 	bl	8005bdc <arm_copy_f32>
  arm_mean_f32(signal, NN, mean_hist + NUM_MEANS - 1);
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <apply_ac_coupling+0x5c>)
 80014f4:	461a      	mov	r2, r3
 80014f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f004 fb9e 	bl	8005c3c <arm_mean_f32>
  arm_mean_f32(signal, NUM_MEANS, &mean);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	461a      	mov	r2, r3
 8001506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f004 fb96 	bl	8005c3c <arm_mean_f32>
  arm_offset_f32(signal, -mean, signal, NN);
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	eef1 7a67 	vneg.f32	s15, s15
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f005 fb70 	bl	8006c08 <arm_offset_f32>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000f380 	.word	0x2000f380
 8001534:	2000f37c 	.word	0x2000f37c
 8001538:	20011378 	.word	0x20011378

0800153c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if (flag) {
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d014      	beq.n	8001576 <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
    for (uint32_t i = 0; i < NN; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e00a      	b.n	8001568 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
      fft_in_int32[i] = buf[i];
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800155a:	490c      	ldr	r1, [pc, #48]	; (800158c <HAL_DFSDM_FilterRegConvCpltCallback+0x50>)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint32_t i = 0; i < NN; i++) {
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800156e:	d3f0      	bcc.n	8001552 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
    }
    flag = false;
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  }

}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000000 	.word	0x20000000
 8001588:	2000035c 	.word	0x2000035c
 800158c:	20004378 	.word	0x20004378

08001590 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  switch (cmd) {
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_UART_RxCpltCallback+0x4c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b70      	cmp	r3, #112	; 0x70
 800159e:	d006      	beq.n	80015ae <HAL_UART_RxCpltCallback+0x1e>
 80015a0:	2b70      	cmp	r3, #112	; 0x70
 80015a2:	dc10      	bgt.n	80015c6 <HAL_UART_RxCpltCallback+0x36>
 80015a4:	2b41      	cmp	r3, #65	; 0x41
 80015a6:	d00a      	beq.n	80015be <HAL_UART_RxCpltCallback+0x2e>
 80015a8:	2b61      	cmp	r3, #97	; 0x61
 80015aa:	d004      	beq.n	80015b6 <HAL_UART_RxCpltCallback+0x26>
    break;
  case 'A':
    ac_coupling = false;
    break;
  default:
    break;
 80015ac:	e00b      	b.n	80015c6 <HAL_UART_RxCpltCallback+0x36>
    output_result = true;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_UART_RxCpltCallback+0x50>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
    break;
 80015b4:	e008      	b.n	80015c8 <HAL_UART_RxCpltCallback+0x38>
    ac_coupling = true;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_UART_RxCpltCallback+0x54>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
    break;
 80015bc:	e004      	b.n	80015c8 <HAL_UART_RxCpltCallback+0x38>
    ac_coupling = false;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_UART_RxCpltCallback+0x54>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    break;
 80015c4:	e000      	b.n	80015c8 <HAL_UART_RxCpltCallback+0x38>
    break;
 80015c6:	bf00      	nop
  }

  HAL_UART_Receive_IT(&huart2, (uint8_t*) &cmd, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	4904      	ldr	r1, [pc, #16]	; (80015dc <HAL_UART_RxCpltCallback+0x4c>)
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <HAL_UART_RxCpltCallback+0x58>)
 80015ce:	f003 f815 	bl	80045fc <HAL_UART_Receive_IT>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000f379 	.word	0x2000f379
 80015e0:	2000f378 	.word	0x2000f378
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	200002d4 	.word	0x200002d4

080015ec <_write>:

int _write(int file, char *pbuf, int len) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, len, 1000);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <_write+0x28>)
 8001604:	f002 ff70 	bl	80044e8 <HAL_UART_Transmit>
  return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002d4 	.word	0x200002d4

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1) {
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_MspInit+0x44>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_MspInit+0x44>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6613      	str	r3, [r2, #96]	; 0x60
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x44>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x44>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ac      	sub	sp, #176	; 0xb0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2288      	movs	r2, #136	; 0x88
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f006 fc75 	bl	8007f7c <memset>
  if(DFSDM1_Init == 0)
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_DFSDM_FilterMspInit+0x138>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d14a      	bne.n	8001730 <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fa12 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80016b6:	f7ff ffaf 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_DFSDM_FilterMspInit+0x13c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <HAL_DFSDM_FilterMspInit+0x13c>)
 80016c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016c4:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_DFSDM_FilterMspInit+0x13c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d10b      	bne.n	80016e4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016cc:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_DFSDM_FilterMspInit+0x140>)
 80016ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d0:	4a36      	ldr	r2, [pc, #216]	; (80017ac <HAL_DFSDM_FilterMspInit+0x140>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d6:	6613      	str	r3, [r2, #96]	; 0x60
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_DFSDM_FilterMspInit+0x140>)
 80016da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_DFSDM_FilterMspInit+0x140>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a30      	ldr	r2, [pc, #192]	; (80017ac <HAL_DFSDM_FilterMspInit+0x140>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_DFSDM_FilterMspInit+0x140>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80016fc:	2384      	movs	r3, #132	; 0x84
 80016fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001714:	2306      	movs	r3, #6
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800171e:	4619      	mov	r1, r3
 8001720:	4823      	ldr	r0, [pc, #140]	; (80017b0 <HAL_DFSDM_FilterMspInit+0x144>)
 8001722:	f001 f9b1 	bl	8002a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_DFSDM_FilterMspInit+0x138>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_DFSDM_FilterMspInit+0x138>)
 800172e:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_DFSDM_FilterMspInit+0x148>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d130      	bne.n	800179c <HAL_DFSDM_FilterMspInit+0x130>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_DFSDM_FilterMspInit+0x150>)
 800173e:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001766:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 800176a:	2220      	movs	r2, #32
 800176c:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001776:	f000 ff11 	bl	800259c <HAL_DMA_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_DFSDM_FilterMspInit+0x118>
    {
      Error_Handler();
 8001780:	f7ff ff4a 	bl	8001618 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800179c:	bf00      	nop
 800179e:	37b0      	adds	r7, #176	; 0xb0
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20011380 	.word	0x20011380
 80017a8:	2001137c 	.word	0x2001137c
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000800 	.word	0x48000800
 80017b4:	40016100 	.word	0x40016100
 80017b8:	2000028c 	.word	0x2000028c
 80017bc:	40020044 	.word	0x40020044

080017c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0ac      	sub	sp, #176	; 0xb0
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2288      	movs	r2, #136	; 0x88
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 fbcb 	bl	8007f7c <memset>
  if(DFSDM1_Init == 0)
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_DFSDM_ChannelMspInit+0xcc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d14a      	bne.n	8001884 <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80017ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 f968 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800180a:	f7ff ff05 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10b      	bne.n	8001838 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182a:	6613      	str	r3, [r2, #96]	; 0x60
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8001850:	2384      	movs	r3, #132	; 0x84
 8001852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001868:	2306      	movs	r3, #6
 800186a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001872:	4619      	mov	r1, r3
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001876:	f001 f907 	bl	8002a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_DFSDM_ChannelMspInit+0xcc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a02      	ldr	r2, [pc, #8]	; (800188c <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001882:	6013      	str	r3, [r2, #0]
  }

}
 8001884:	bf00      	nop
 8001886:	37b0      	adds	r7, #176	; 0xb0
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20011380 	.word	0x20011380
 8001890:	2001137c 	.word	0x2001137c
 8001894:	40021000 	.word	0x40021000
 8001898:	48000800 	.word	0x48000800

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0ac      	sub	sp, #176	; 0xb0
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2288      	movs	r2, #136	; 0x88
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f006 fb5d 	bl	8007f7c <memset>
  if(huart->Instance==USART2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a25      	ldr	r2, [pc, #148]	; (800195c <HAL_UART_MspInit+0xc0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d143      	bne.n	8001954 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 f8fb 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e4:	f7ff fe98 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_UART_MspInit+0xc4>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_UART_MspInit+0xc4>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	6593      	str	r3, [r2, #88]	; 0x58
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_UART_MspInit+0xc4>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_UART_MspInit+0xc4>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_UART_MspInit+0xc4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_UART_MspInit+0xc4>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001918:	230c      	movs	r3, #12
 800191a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001930:	2307      	movs	r3, #7
 8001932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f001 f8a2 	bl	8002a88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2026      	movs	r0, #38	; 0x26
 800194a:	f000 faaa 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800194e:	2026      	movs	r0, #38	; 0x26
 8001950:	f000 fac3 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	37b0      	adds	r7, #176	; 0xb0
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004400 	.word	0x40004400
 8001960:	40021000 	.word	0x40021000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f958 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Channel4_IRQHandler+0x10>)
 80019be:	f000 ff84 	bl	80028ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000028c 	.word	0x2000028c

080019cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <USART2_IRQHandler+0x10>)
 80019d2:	f002 fe5f 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002d4 	.word	0x200002d4

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fa:	f006 fb11 	bl	8008020 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a22:	e7fe      	b.n	8001a22 <_exit+0x12>

08001a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00a      	b.n	8001a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a36:	f3af 8000 	nop.w
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <_read+0x12>
  }

  return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	605a      	str	r2, [r3, #4]
  return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_isatty>:

int _isatty(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f006 fa92 	bl	8008020 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20018000 	.word	0x20018000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	20011384 	.word	0x20011384
 8001b30:	20011500 	.word	0x20011500

08001b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff ffea 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	; (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f006 fa51 	bl	800802c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff f98b 	bl	8000ea4 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b9c:	0801dcc4 	.word	0x0801dcc4
  ldr r2, =_sbss
 8001ba0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ba4:	200114fc 	.word	0x200114fc

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_Init+0x3c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_Init+0x3c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f000 f962 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 f80f 	bl	8001bec <HAL_InitTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	e001      	b.n	8001bde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bda:	f7ff fd23 	bl	8001624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_InitTick+0x70>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f96d 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d809      	bhi.n	8001c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f937 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_InitTick+0x74>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e004      	b.n	8001c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e001      	b.n	8001c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000018 	.word	0x20000018
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	20000014 	.word	0x20000014

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000018 	.word	0x20000018
 8001c88:	20011388 	.word	0x20011388

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20011388 	.word	0x20011388

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000018 	.word	0x20000018

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0ac      	b.n	800207c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fa96 	bl	8002458 <DFSDM_GetChannelFromInstance>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a55      	ldr	r2, [pc, #340]	; (8002084 <HAL_DFSDM_ChannelInit+0x174>)
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e09f      	b.n	800207c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fc3f 	bl	80017c0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_DFSDM_ChannelInit+0x178>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a4f      	ldr	r2, [pc, #316]	; (8002088 <HAL_DFSDM_ChannelInit+0x178>)
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_DFSDM_ChannelInit+0x178>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d125      	bne.n	8001fa0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f5e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001f60:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4948      	ldr	r1, [pc, #288]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a46      	ldr	r2, [pc, #280]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f74:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001f78:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	493f      	ldr	r1, [pc, #252]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f9e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001fae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fbe:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fc4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 020f 	bic.w	r2, r2, #15
 8001fdc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002004:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6899      	ldr	r1, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f002 0207 	and.w	r2, r2, #7
 8002030:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800205c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f9f4 	bl	8002458 <DFSDM_GetChannelFromInstance>
 8002070:	4602      	mov	r2, r0
 8002072:	4904      	ldr	r1, [pc, #16]	; (8002084 <HAL_DFSDM_ChannelInit+0x174>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20011390 	.word	0x20011390
 8002088:	2001138c 	.word	0x2001138c
 800208c:	40016000 	.word	0x40016000

08002090 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0ca      	b.n	8002238 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a66      	ldr	r2, [pc, #408]	; (8002240 <HAL_DFSDM_FilterInit+0x1b0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d109      	bne.n	80020c0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d003      	beq.n	80020bc <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0bb      	b.n	8002238 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fac7 	bl	800166c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80020ec:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7a1b      	ldrb	r3, [r3, #8]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e007      	b.n	8002118 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002116:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7a5b      	ldrb	r3, [r3, #9]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e007      	b.n	8002142 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002150:	f023 0308 	bic.w	r3, r3, #8
 8002154:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d108      	bne.n	8002170 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7c1b      	ldrb	r3, [r3, #16]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0210 	orr.w	r2, r2, #16
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0210 	bic.w	r2, r2, #16
 8002198:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c5b      	ldrb	r3, [r3, #17]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0220 	orr.w	r2, r2, #32
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0220 	bic.w	r2, r2, #32
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80021d2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80021d6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021ea:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80021f2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7c1a      	ldrb	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40016100 	.word	0x40016100

08002244 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d02e      	beq.n	80022bc <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002264:	2bff      	cmp	r3, #255	; 0xff
 8002266:	d029      	beq.n	80022bc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10d      	bne.n	800229e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e00a      	b.n	80022b4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ba:	e001      	b.n	80022c0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	75fb      	strb	r3, [r7, #23]
 80022f0:	e064      	b.n	80023bc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002300:	d002      	beq.n	8002308 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
 8002306:	e059      	b.n	80023bc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10e      	bne.n	800232e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d002      	beq.n	800232e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	75fb      	strb	r3, [r7, #23]
 800232c:	e046      	b.n	80023bc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002344:	2b20      	cmp	r3, #32
 8002346:	d102      	bne.n	800234e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
 800234c:	e036      	b.n	80023bc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d004      	beq.n	8002362 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800235e:	2b03      	cmp	r3, #3
 8002360:	d12a      	bne.n	80023b8 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002378:	2b20      	cmp	r3, #32
 800237a:	d101      	bne.n	8002380 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800237e:	e000      	b.n	8002382 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002380:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	331c      	adds	r3, #28
 8002392:	4619      	mov	r1, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f000 f9b8 	bl	800270c <HAL_DMA_Start_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	22ff      	movs	r2, #255	; 0xff
 80023a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80023ae:	e005      	b.n	80023bc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f89d 	bl	80024f0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80023b6:	e001      	b.n	80023bc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08002419 	.word	0x08002419
 80023cc:	08002435 	.word	0x08002435
 80023d0:	080023fd 	.word	0x080023fd

080023d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7ff ffe2 	bl	80023d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7ff f888 	bl	800153c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2203      	movs	r2, #3
 8002446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff ffcd 	bl	80023e8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d102      	bne.n	800246e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e02b      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <DFSDM_GetChannelFromInstance+0x80>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d102      	bne.n	800247c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e024      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <DFSDM_GetChannelFromInstance+0x84>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d102      	bne.n	800248a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002484:	2302      	movs	r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e01d      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <DFSDM_GetChannelFromInstance+0x88>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d102      	bne.n	8002498 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002492:	2304      	movs	r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e016      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d102      	bne.n	80024a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80024a0:	2305      	movs	r3, #5
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e00f      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <DFSDM_GetChannelFromInstance+0x90>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d102      	bne.n	80024b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80024ae:	2306      	movs	r3, #6
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e008      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <DFSDM_GetChannelFromInstance+0x94>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80024bc:	2307      	movs	r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e001      	b.n	80024c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80024c2:	2303      	movs	r3, #3
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40016000 	.word	0x40016000
 80024d8:	40016020 	.word	0x40016020
 80024dc:	40016040 	.word	0x40016040
 80024e0:	40016080 	.word	0x40016080
 80024e4:	400160a0 	.word	0x400160a0
 80024e8:	400160c0 	.word	0x400160c0
 80024ec:	400160e0 	.word	0x400160e0

080024f0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d108      	bne.n	8002512 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e033      	b.n	800257a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002530:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002548:	2b03      	cmp	r3, #3
 800254a:	d116      	bne.n	800257a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0202 	orr.w	r2, r2, #2
 8002562:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <DFSDM_RegConvStart+0x84>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	e000      	b.n	8002576 <DFSDM_RegConvStart+0x86>
 8002574:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <DFSDM_RegConvStart+0x98>
 8002584:	2202      	movs	r2, #2
 8002586:	e000      	b.n	800258a <DFSDM_RegConvStart+0x9a>
 8002588:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e098      	b.n	80026e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <HAL_DMA_Init+0x150>)
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d80f      	bhi.n	80025da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_DMA_Init+0x154>)
 80025c2:	4413      	add	r3, r2
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_DMA_Init+0x158>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	009a      	lsls	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_DMA_Init+0x15c>)
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
 80025d8:	e00e      	b.n	80025f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_DMA_Init+0x160>)
 80025e2:	4413      	add	r3, r2
 80025e4:	4a43      	ldr	r2, [pc, #268]	; (80026f4 <HAL_DMA_Init+0x158>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	009a      	lsls	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_DMA_Init+0x164>)
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800261c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002652:	d039      	beq.n	80026c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_DMA_Init+0x15c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d11a      	bne.n	8002694 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_DMA_Init+0x168>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f003 031c 	and.w	r3, r3, #28
 800266a:	210f      	movs	r1, #15
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	4924      	ldr	r1, [pc, #144]	; (8002704 <HAL_DMA_Init+0x168>)
 8002674:	4013      	ands	r3, r2
 8002676:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_DMA_Init+0x168>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	f003 031c 	and.w	r3, r3, #28
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	491d      	ldr	r1, [pc, #116]	; (8002704 <HAL_DMA_Init+0x168>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
 8002692:	e019      	b.n	80026c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_DMA_Init+0x16c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f003 031c 	and.w	r3, r3, #28
 80026a0:	210f      	movs	r1, #15
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4917      	ldr	r1, [pc, #92]	; (8002708 <HAL_DMA_Init+0x16c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_DMA_Init+0x16c>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 031c 	and.w	r3, r3, #28
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	4911      	ldr	r1, [pc, #68]	; (8002708 <HAL_DMA_Init+0x16c>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40020407 	.word	0x40020407
 80026f0:	bffdfff8 	.word	0xbffdfff8
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	40020000 	.word	0x40020000
 80026fc:	bffdfbf8 	.word	0xbffdfbf8
 8002700:	40020400 	.word	0x40020400
 8002704:	400200a8 	.word	0x400200a8
 8002708:	400204a8 	.word	0x400204a8

0800270c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_DMA_Start_IT+0x20>
 8002728:	2302      	movs	r3, #2
 800272a:	e04b      	b.n	80027c4 <HAL_DMA_Start_IT+0xb8>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d13a      	bne.n	80027b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f95f 	bl	8002a28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 020e 	orr.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e00f      	b.n	80027a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0204 	bic.w	r2, r2, #4
 8002792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 020a 	orr.w	r2, r2, #10
 80027a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e005      	b.n	80027c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2204      	movs	r2, #4
 80027e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e022      	b.n	800283c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 020e 	bic.w	r2, r2, #14
 8002804:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f003 021c 	and.w	r2, r3, #28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d005      	beq.n	800286c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2204      	movs	r2, #4
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e029      	b.n	80028c0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 020e 	bic.w	r2, r2, #14
 800287a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f003 021c 	and.w	r2, r3, #28
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
    }
  }
  return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 031c 	and.w	r3, r3, #28
 80028ea:	2204      	movs	r2, #4
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d026      	beq.n	8002944 <HAL_DMA_IRQHandler+0x7a>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d021      	beq.n	8002944 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0204 	bic.w	r2, r2, #4
 800291c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 021c 	and.w	r2, r3, #28
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2104      	movs	r1, #4
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	2b00      	cmp	r3, #0
 8002938:	d071      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002942:	e06c      	b.n	8002a1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f003 031c 	and.w	r3, r3, #28
 800294c:	2202      	movs	r2, #2
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02e      	beq.n	80029b6 <HAL_DMA_IRQHandler+0xec>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d029      	beq.n	80029b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 020a 	bic.w	r2, r2, #10
 800297e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f003 021c 	and.w	r2, r3, #28
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2102      	movs	r1, #2
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d038      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029b4:	e033      	b.n	8002a1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f003 031c 	and.w	r3, r3, #28
 80029be:	2208      	movs	r2, #8
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02a      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x156>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d025      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 020e 	bic.w	r2, r2, #14
 80029e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f003 021c 	and.w	r2, r3, #28
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
}
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f003 021c 	and.w	r2, r3, #28
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d108      	bne.n	8002a6c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a6a:	e007      	b.n	8002a7c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	60da      	str	r2, [r3, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a96:	e17f      	b.n	8002d98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8171 	beq.w	8002d92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d005      	beq.n	8002ac8 <HAL_GPIO_Init+0x40>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d130      	bne.n	8002b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002afe:	2201      	movs	r2, #1
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 0201 	and.w	r2, r3, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d118      	bne.n	8002b68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f003 0201 	and.w	r2, r3, #1
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d017      	beq.n	8002ba4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d123      	bne.n	8002bf8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	08da      	lsrs	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	6939      	ldr	r1, [r7, #16]
 8002bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0203 	and.w	r2, r3, #3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80ac 	beq.w	8002d92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3a:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	4a5e      	ldr	r2, [pc, #376]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6613      	str	r3, [r2, #96]	; 0x60
 8002c46:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c52:	4a5a      	ldr	r2, [pc, #360]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c7c:	d025      	beq.n	8002cca <HAL_GPIO_Init+0x242>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <HAL_GPIO_Init+0x338>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d01f      	beq.n	8002cc6 <HAL_GPIO_Init+0x23e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4e      	ldr	r2, [pc, #312]	; (8002dc4 <HAL_GPIO_Init+0x33c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x23a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <HAL_GPIO_Init+0x340>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x236>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_GPIO_Init+0x344>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x232>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4b      	ldr	r2, [pc, #300]	; (8002dd0 <HAL_GPIO_Init+0x348>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x22e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_GPIO_Init+0x34c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x22a>
 8002cae:	2306      	movs	r3, #6
 8002cb0:	e00c      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e00a      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	e008      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e004      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x244>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	f002 0203 	and.w	r2, r2, #3
 8002cd2:	0092      	lsls	r2, r2, #2
 8002cd4:	4093      	lsls	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cdc:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d0e:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d38:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f ae78 	bne.w	8002a98 <HAL_GPIO_Init+0x10>
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	48000400 	.word	0x48000400
 8002dc4:	48000800 	.word	0x48000800
 8002dc8:	48000c00 	.word	0x48000c00
 8002dcc:	48001000 	.word	0x48001000
 8002dd0:	48001400 	.word	0x48001400
 8002dd4:	48001800 	.word	0x48001800
 8002dd8:	40010400 	.word	0x40010400

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40007000 	.word	0x40007000

08002e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e36:	d130      	bne.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e44:	d038      	beq.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2232      	movs	r2, #50	; 0x32
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e6c:	e002      	b.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	d102      	bne.n	8002e88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f2      	bne.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	d110      	bne.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e00f      	b.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d007      	beq.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eb0:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	20000010 	.word	0x20000010
 8002ed0:	431bde83 	.word	0x431bde83

08002ed4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e3ca      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee6:	4b97      	ldr	r3, [pc, #604]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef0:	4b94      	ldr	r3, [pc, #592]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80e4 	beq.w	80030d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4a>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	f040 808b 	bne.w	800302c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	f040 8087 	bne.w	800302c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f1e:	4b89      	ldr	r3, [pc, #548]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e3a2      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1a      	ldr	r2, [r3, #32]
 8002f3a:	4b82      	ldr	r3, [pc, #520]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <HAL_RCC_OscConfig+0x7c>
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4e:	e005      	b.n	8002f5c <HAL_RCC_OscConfig+0x88>
 8002f50:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d223      	bcs.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fd55 	bl	8003a14 <RCC_SetFlashLatencyFromMSIRange>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e383      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f74:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a72      	ldr	r2, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b70      	ldr	r3, [pc, #448]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	496d      	ldr	r1, [pc, #436]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f92:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	4968      	ldr	r1, [pc, #416]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
 8002fa6:	e025      	b.n	8002ff4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa8:	4b66      	ldr	r3, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4960      	ldr	r1, [pc, #384]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc6:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	495b      	ldr	r1, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd15 	bl	8003a14 <RCC_SetFlashLatencyFromMSIRange>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e343      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff4:	f000 fc4a 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b52      	ldr	r3, [pc, #328]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	4950      	ldr	r1, [pc, #320]	; (8003148 <HAL_RCC_OscConfig+0x274>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	4a4e      	ldr	r2, [pc, #312]	; (800314c <HAL_RCC_OscConfig+0x278>)
 8003012:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003014:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <HAL_RCC_OscConfig+0x27c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe fde7 	bl	8001bec <HAL_InitTick>
 800301e:	4603      	mov	r3, r0
 8003020:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d052      	beq.n	80030ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	e327      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d032      	beq.n	800309a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a42      	ldr	r2, [pc, #264]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003040:	f7fe fe24 	bl	8001c8c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003048:	f7fe fe20 	bl	8001c8c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e310      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a36      	ldr	r2, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4931      	ldr	r1, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	492c      	ldr	r1, [pc, #176]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	e01a      	b.n	80030d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800309a:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a6:	f7fe fdf1 	bl	8001c8c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ae:	f7fe fded 	bl	8001c8c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e2dd      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x1da>
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d074      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x21a>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d10e      	bne.n	8003106 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d10b      	bne.n	8003106 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d064      	beq.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d160      	bne.n	80031c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e2ba      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x24a>
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e026      	b.n	800316c <HAL_RCC_OscConfig+0x298>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003126:	d115      	bne.n	8003154 <HAL_RCC_OscConfig+0x280>
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800312e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a02      	ldr	r2, [pc, #8]	; (8003144 <HAL_RCC_OscConfig+0x270>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e014      	b.n	800316c <HAL_RCC_OscConfig+0x298>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	0800a10c 	.word	0x0800a10c
 800314c:	20000010 	.word	0x20000010
 8003150:	20000014 	.word	0x20000014
 8003154:	4ba0      	ldr	r3, [pc, #640]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a9f      	ldr	r2, [pc, #636]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b9d      	ldr	r3, [pc, #628]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a9c      	ldr	r2, [pc, #624]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fd8a 	bl	8001c8c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe fd86 	bl	8001c8c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e276      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318e:	4b92      	ldr	r3, [pc, #584]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x2a8>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fd76 	bl	8001c8c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe fd72 	bl	8001c8c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e262      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b6:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2d0>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d060      	beq.n	8003294 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_OscConfig+0x310>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d119      	bne.n	8003212 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d116      	bne.n	8003212 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e4:	4b7c      	ldr	r3, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x328>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e23f      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	4973      	ldr	r1, [pc, #460]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003210:	e040      	b.n	8003294 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d023      	beq.n	8003262 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321a:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fd31 	bl	8001c8c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322e:	f7fe fd2d 	bl	8001c8c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e21d      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003240:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	495f      	ldr	r1, [pc, #380]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
 8003260:	e018      	b.n	8003294 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5c      	ldr	r2, [pc, #368]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fe fd0d 	bl	8001c8c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe fd09 	bl	8001c8c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1f9      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03c      	beq.n	800331a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a8:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ae:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe fce8 	bl	8001c8c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fe fce4 	bl	8001c8c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e1d4      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ef      	beq.n	80032c0 <HAL_RCC_OscConfig+0x3ec>
 80032e0:	e01b      	b.n	800331a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	4a3b      	ldr	r2, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fe fccb 	bl	8001c8c <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fa:	f7fe fcc7 	bl	8001c8c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1b7      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ef      	bne.n	80032fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a6 	beq.w	8003474 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10d      	bne.n	8003354 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	; 0x58
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003350:	2301      	movs	r3, #1
 8003352:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_RCC_OscConfig+0x508>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d118      	bne.n	8003392 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCC_OscConfig+0x508>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_RCC_OscConfig+0x508>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336c:	f7fe fc8e 	bl	8001c8c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fe fc8a 	bl	8001c8c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e17a      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_RCC_OscConfig+0x508>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <HAL_RCC_OscConfig+0x4d8>
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033aa:	e029      	b.n	8003400 <HAL_RCC_OscConfig+0x52c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d115      	bne.n	80033e0 <HAL_RCC_OscConfig+0x50c>
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a03      	ldr	r2, [pc, #12]	; (80033d8 <HAL_RCC_OscConfig+0x504>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d4:	e014      	b.n	8003400 <HAL_RCC_OscConfig+0x52c>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	4b9c      	ldr	r3, [pc, #624]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a9b      	ldr	r2, [pc, #620]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f0:	4b98      	ldr	r3, [pc, #608]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a97      	ldr	r2, [pc, #604]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fc40 	bl	8001c8c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe fc3c 	bl	8001c8c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e12a      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ed      	beq.n	8003410 <HAL_RCC_OscConfig+0x53c>
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fc29 	bl	8001c8c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fc25 	bl	8001c8c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e113      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ed      	bne.n	800343e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b7a      	ldr	r3, [pc, #488]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	4a79      	ldr	r2, [pc, #484]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80fe 	beq.w	800367a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 80d0 	bne.w	8003628 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003488:	4b72      	ldr	r3, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0203 	and.w	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d130      	bne.n	80034fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	3b01      	subs	r3, #1
 80034a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d127      	bne.n	80034fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11f      	bne.n	80034fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c8:	2a07      	cmp	r2, #7
 80034ca:	bf14      	ite	ne
 80034cc:	2201      	movne	r2, #1
 80034ce:	2200      	moveq	r2, #0
 80034d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d113      	bne.n	80034fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d06e      	beq.n	80035dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d069      	beq.n	80035d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003504:	4b53      	ldr	r3, [pc, #332]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003510:	4b50      	ldr	r3, [pc, #320]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0ad      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003520:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4b      	ldr	r2, [pc, #300]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800352c:	f7fe fbae 	bl	8001c8c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fbaa 	bl	8001c8c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e09a      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003546:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003552:	4b40      	ldr	r3, [pc, #256]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b40      	ldr	r3, [pc, #256]	; (8003658 <HAL_RCC_OscConfig+0x784>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003562:	3a01      	subs	r2, #1
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	4311      	orrs	r1, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800356c:	0212      	lsls	r2, r2, #8
 800356e:	4311      	orrs	r1, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003574:	0852      	lsrs	r2, r2, #1
 8003576:	3a01      	subs	r2, #1
 8003578:	0552      	lsls	r2, r2, #21
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003580:	0852      	lsrs	r2, r2, #1
 8003582:	3a01      	subs	r2, #1
 8003584:	0652      	lsls	r2, r2, #25
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800358c:	0912      	lsrs	r2, r2, #4
 800358e:	0452      	lsls	r2, r2, #17
 8003590:	430a      	orrs	r2, r1
 8003592:	4930      	ldr	r1, [pc, #192]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003594:	4313      	orrs	r3, r2
 8003596:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003598:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035b0:	f7fe fb6c 	bl	8001c8c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fb68 	bl	8001c8c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e058      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d6:	e050      	b.n	800367a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e04f      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d148      	bne.n	800367a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003600:	f7fe fb44 	bl	8001c8c <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fb40 	bl	8001c8c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e030      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x734>
 8003626:	e028      	b.n	800367a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d023      	beq.n	8003676 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x780>)
 8003634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fe fb27 	bl	8001c8c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003640:	e00c      	b.n	800365c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003642:	f7fe fb23 	bl	8001c8c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d905      	bls.n	800365c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e013      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
 8003654:	40021000 	.word	0x40021000
 8003658:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_OscConfig+0x7b0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ec      	bne.n	8003642 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x7b0>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4905      	ldr	r1, [pc, #20]	; (8003684 <HAL_RCC_OscConfig+0x7b0>)
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_OscConfig+0x7b4>)
 8003670:	4013      	ands	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
 8003674:	e001      	b.n	800367a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	feeefffc 	.word	0xfeeefffc

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0e7      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b75      	ldr	r3, [pc, #468]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b72      	ldr	r3, [pc, #456]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4970      	ldr	r1, [pc, #448]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0cf      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	4b66      	ldr	r3, [pc, #408]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d908      	bls.n	80036fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4960      	ldr	r1, [pc, #384]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d04c      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003712:	4b5a      	ldr	r3, [pc, #360]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d121      	bne.n	8003762 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0a6      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d115      	bne.n	8003762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e09a      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003742:	4b4e      	ldr	r3, [pc, #312]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e08e      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e086      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b46      	ldr	r3, [pc, #280]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4943      	ldr	r1, [pc, #268]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fe fa8a 	bl	8001c8c <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fa86 	bl	8001c8c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e06e      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b3a      	ldr	r3, [pc, #232]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d010      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037bc:	429a      	cmp	r2, r3
 80037be:	d208      	bcs.n	80037d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	492b      	ldr	r1, [pc, #172]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d210      	bcs.n	8003802 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 0207 	bic.w	r2, r3, #7
 80037e8:	4923      	ldr	r1, [pc, #140]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCC_ClockConfig+0x1ec>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e036      	b.n	8003870 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4918      	ldr	r1, [pc, #96]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	4313      	orrs	r3, r2
 800381e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4910      	ldr	r1, [pc, #64]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003840:	f000 f824 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	490b      	ldr	r1, [pc, #44]	; (8003880 <HAL_RCC_ClockConfig+0x1f4>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1f8>)
 800385e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003860:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1fc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe f9c1 	bl	8001bec <HAL_InitTick>
 800386a:	4603      	mov	r3, r0
 800386c:	72fb      	strb	r3, [r7, #11]

  return status;
 800386e:	7afb      	ldrb	r3, [r7, #11]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40022000 	.word	0x40022000
 800387c:	40021000 	.word	0x40021000
 8003880:	0800a10c 	.word	0x0800a10c
 8003884:	20000010 	.word	0x20000010
 8003888:	20000014 	.word	0x20000014

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389a:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a4:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x34>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d121      	bne.n	80038fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d11e      	bne.n	80038fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038c0:	4b34      	ldr	r3, [pc, #208]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e005      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038dc:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d102      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_RCC_GetSysClockFreq+0x110>)
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e004      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d101      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d134      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0xa6>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d003      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0xac>
 8003930:	e005      	b.n	800393e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_RCC_GetSysClockFreq+0x110>)
 8003934:	617b      	str	r3, [r7, #20]
      break;
 8003936:	e005      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800393a:	617b      	str	r3, [r7, #20]
      break;
 800393c:	e002      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	617b      	str	r3, [r7, #20]
      break;
 8003942:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	3301      	adds	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	fb03 f202 	mul.w	r2, r3, r2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RCC_GetSysClockFreq+0x108>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	0e5b      	lsrs	r3, r3, #25
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	3301      	adds	r3, #1
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003984:	69bb      	ldr	r3, [r7, #24]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3724      	adds	r7, #36	; 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	0800a124 	.word	0x0800a124
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	007a1200 	.word	0x007a1200

080039a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000010 	.word	0x20000010

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039c0:	f7ff fff0 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4904      	ldr	r1, [pc, #16]	; (80039e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800a11c 	.word	0x0800a11c

080039e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039ec:	f7ff ffda 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0adb      	lsrs	r3, r3, #11
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4904      	ldr	r1, [pc, #16]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800a11c 	.word	0x0800a11c

08003a14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a20:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a2c:	f7ff f9ee 	bl	8002e0c <HAL_PWREx_GetVoltageRange>
 8003a30:	6178      	str	r0, [r7, #20]
 8003a32:	e014      	b.n	8003a5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	4a24      	ldr	r2, [pc, #144]	; (8003acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a4c:	f7ff f9de 	bl	8002e0c <HAL_PWREx_GetVoltageRange>
 8003a50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a64:	d10b      	bne.n	8003a7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d919      	bls.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a70:	d902      	bls.n	8003a78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a72:	2302      	movs	r3, #2
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e013      	b.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a78:	2301      	movs	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	e010      	b.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b80      	cmp	r3, #128	; 0x80
 8003a82:	d902      	bls.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a84:	2303      	movs	r3, #3
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	e00a      	b.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d102      	bne.n	8003a96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a90:	2302      	movs	r3, #2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e004      	b.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b70      	cmp	r3, #112	; 0x70
 8003a9a:	d101      	bne.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 0207 	bic.w	r2, r3, #7
 8003aa8:	4909      	ldr	r1, [pc, #36]	; (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d001      	beq.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40022000 	.word	0x40022000

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003adc:	2300      	movs	r3, #0
 8003ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d041      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003af8:	d02a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003afa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003afe:	d824      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b0a:	d81e      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b14:	d010      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b16:	e018      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b18:	4b86      	ldr	r3, [pc, #536]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a85      	ldr	r2, [pc, #532]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b24:	e015      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fabb 	bl	80040a8 <RCCEx_PLLSAI1_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b36:	e00c      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3320      	adds	r3, #32
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fba6 	bl	8004290 <RCCEx_PLLSAI2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b48:	e003      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b58:	4b76      	ldr	r3, [pc, #472]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b66:	4973      	ldr	r1, [pc, #460]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b6e:	e001      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d041      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b88:	d02a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b8e:	d824      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b9a:	d81e      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba4:	d010      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ba6:	e018      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ba8:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a61      	ldr	r2, [pc, #388]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bb4:	e015      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fa73 	bl	80040a8 <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bc6:	e00c      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3320      	adds	r3, #32
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fb5e 	bl	8004290 <RCCEx_PLLSAI2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10b      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003be8:	4b52      	ldr	r3, [pc, #328]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	494f      	ldr	r1, [pc, #316]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bfe:	e001      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a0 	beq.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c36:	6593      	str	r3, [r2, #88]	; 0x58
 8003c38:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c44:	2301      	movs	r3, #1
 8003c46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c48:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3a      	ldr	r2, [pc, #232]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c54:	f7fe f81a 	bl	8001c8c <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c5a:	e009      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fe f816 	bl	8001c8c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d902      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c6e:	e005      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ef      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d15c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c82:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d019      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003caa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ccc:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fd ffd5 	bl	8001c8c <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce4:	e00b      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fd ffd1 	bl	8001c8c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d902      	bls.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	74fb      	strb	r3, [r7, #19]
            break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ec      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d22:	4904      	ldr	r1, [pc, #16]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d2a:	e009      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d40:	7c7b      	ldrb	r3, [r7, #17]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d46:	4b9e      	ldr	r3, [pc, #632]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a9d      	ldr	r2, [pc, #628]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5e:	4b98      	ldr	r3, [pc, #608]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f023 0203 	bic.w	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	4994      	ldr	r1, [pc, #592]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d80:	4b8f      	ldr	r3, [pc, #572]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 020c 	bic.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	498c      	ldr	r1, [pc, #560]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003da2:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4983      	ldr	r1, [pc, #524]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dc4:	4b7e      	ldr	r3, [pc, #504]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	497b      	ldr	r1, [pc, #492]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003de6:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	4972      	ldr	r1, [pc, #456]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e08:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	496a      	ldr	r1, [pc, #424]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2a:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	4961      	ldr	r1, [pc, #388]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e4c:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	4959      	ldr	r1, [pc, #356]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	4950      	ldr	r1, [pc, #320]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e90:	4b4b      	ldr	r3, [pc, #300]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	4948      	ldr	r1, [pc, #288]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eb2:	4b43      	ldr	r3, [pc, #268]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	493f      	ldr	r1, [pc, #252]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d028      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed4:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee2:	4937      	ldr	r1, [pc, #220]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efe:	60d3      	str	r3, [r2, #12]
 8003f00:	e011      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f8c8 	bl	80040a8 <RCCEx_PLLSAI1_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d028      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	491f      	ldr	r1, [pc, #124]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f50:	d106      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f52:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5c:	60d3      	str	r3, [r2, #12]
 8003f5e:	e011      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 f899 	bl	80040a8 <RCCEx_PLLSAI1_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9e:	4908      	ldr	r1, [pc, #32]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fba:	60d3      	str	r3, [r2, #12]
 8003fbc:	e014      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f867 	bl	80040a8 <RCCEx_PLLSAI1_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004002:	4928      	ldr	r1, [pc, #160]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800400e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004012:	d10d      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f844 	bl	80040a8 <RCCEx_PLLSAI1_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d014      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	74bb      	strb	r3, [r7, #18]
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3320      	adds	r3, #32
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f925 	bl	8004290 <RCCEx_PLLSAI2_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406e:	490d      	ldr	r1, [pc, #52]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004092:	4904      	ldr	r1, [pc, #16]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800409a:	7cbb      	ldrb	r3, [r7, #18]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000

080040a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040b6:	4b75      	ldr	r3, [pc, #468]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d018      	beq.n	80040f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040c2:	4b72      	ldr	r3, [pc, #456]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0203 	and.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d10d      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
       ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040da:	4b6c      	ldr	r3, [pc, #432]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d047      	beq.n	800417e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	e044      	b.n	800417e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d018      	beq.n	800412e <RCCEx_PLLSAI1_Config+0x86>
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d825      	bhi.n	800414c <RCCEx_PLLSAI1_Config+0xa4>
 8004100:	2b01      	cmp	r3, #1
 8004102:	d002      	beq.n	800410a <RCCEx_PLLSAI1_Config+0x62>
 8004104:	2b02      	cmp	r3, #2
 8004106:	d009      	beq.n	800411c <RCCEx_PLLSAI1_Config+0x74>
 8004108:	e020      	b.n	800414c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800410a:	4b60      	ldr	r3, [pc, #384]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11d      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411a:	e01a      	b.n	8004152 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800411c:	4b5b      	ldr	r3, [pc, #364]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e013      	b.n	8004156 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800412e:	4b57      	ldr	r3, [pc, #348]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800413a:	4b54      	ldr	r3, [pc, #336]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800414a:	e006      	b.n	800415a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	e004      	b.n	800415c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800415a:	bf00      	nop
    }

    if(status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004162:	4b4a      	ldr	r3, [pc, #296]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	430b      	orrs	r3, r1
 8004178:	4944      	ldr	r1, [pc, #272]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d17d      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a40      	ldr	r2, [pc, #256]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800418e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fd fd7c 	bl	8001c8c <HAL_GetTick>
 8004194:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004196:	e009      	b.n	80041ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004198:	f7fd fd78 	bl	8001c8c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d902      	bls.n	80041ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	73fb      	strb	r3, [r7, #15]
        break;
 80041aa:	e005      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ef      	bne.n	8004198 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d160      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d111      	bne.n	80041e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c4:	4b31      	ldr	r3, [pc, #196]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	0211      	lsls	r1, r2, #8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	0912      	lsrs	r2, r2, #4
 80041dc:	0452      	lsls	r2, r2, #17
 80041de:	430a      	orrs	r2, r1
 80041e0:	492a      	ldr	r1, [pc, #168]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	610b      	str	r3, [r1, #16]
 80041e6:	e027      	b.n	8004238 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d112      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	0211      	lsls	r1, r2, #8
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6912      	ldr	r2, [r2, #16]
 8004204:	0852      	lsrs	r2, r2, #1
 8004206:	3a01      	subs	r2, #1
 8004208:	0552      	lsls	r2, r2, #21
 800420a:	430a      	orrs	r2, r1
 800420c:	491f      	ldr	r1, [pc, #124]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]
 8004212:	e011      	b.n	8004238 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800421c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6892      	ldr	r2, [r2, #8]
 8004224:	0211      	lsls	r1, r2, #8
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6952      	ldr	r2, [r2, #20]
 800422a:	0852      	lsrs	r2, r2, #1
 800422c:	3a01      	subs	r2, #1
 800422e:	0652      	lsls	r2, r2, #25
 8004230:	430a      	orrs	r2, r1
 8004232:	4916      	ldr	r1, [pc, #88]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a13      	ldr	r2, [pc, #76]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004242:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fd fd22 	bl	8001c8c <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800424a:	e009      	b.n	8004260 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800424c:	f7fd fd1e 	bl	8001c8c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d902      	bls.n	8004260 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	73fb      	strb	r3, [r7, #15]
          break;
 800425e:	e005      	b.n	800426c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ef      	beq.n	800424c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	4904      	ldr	r1, [pc, #16]	; (800428c <RCCEx_PLLSAI1_Config+0x1e4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000

08004290 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800429e:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0203 	and.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d10d      	bne.n	80042d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
       ||
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042c2:	4b61      	ldr	r3, [pc, #388]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
       ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d047      	beq.n	8004366 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e044      	b.n	8004366 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d018      	beq.n	8004316 <RCCEx_PLLSAI2_Config+0x86>
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d825      	bhi.n	8004334 <RCCEx_PLLSAI2_Config+0xa4>
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d002      	beq.n	80042f2 <RCCEx_PLLSAI2_Config+0x62>
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d009      	beq.n	8004304 <RCCEx_PLLSAI2_Config+0x74>
 80042f0:	e020      	b.n	8004334 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042f2:	4b55      	ldr	r3, [pc, #340]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d11d      	bne.n	800433a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004302:	e01a      	b.n	800433a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004314:	e013      	b.n	800433e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004316:	4b4c      	ldr	r3, [pc, #304]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004322:	4b49      	ldr	r3, [pc, #292]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004332:	e006      	b.n	8004342 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e004      	b.n	8004344 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004342:	bf00      	nop
    }

    if(status == HAL_OK)
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	3b01      	subs	r3, #1
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	430b      	orrs	r3, r1
 8004360:	4939      	ldr	r1, [pc, #228]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d167      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800436c:	4b36      	ldr	r3, [pc, #216]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a35      	ldr	r2, [pc, #212]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fd fc88 	bl	8001c8c <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800437e:	e009      	b.n	8004394 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004380:	f7fd fc84 	bl	8001c8c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d902      	bls.n	8004394 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	73fb      	strb	r3, [r7, #15]
        break;
 8004392:	e005      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004394:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ef      	bne.n	8004380 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d14a      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043ac:	4b26      	ldr	r3, [pc, #152]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	0211      	lsls	r1, r2, #8
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	0912      	lsrs	r2, r2, #4
 80043c4:	0452      	lsls	r2, r2, #17
 80043c6:	430a      	orrs	r2, r1
 80043c8:	491f      	ldr	r1, [pc, #124]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	614b      	str	r3, [r1, #20]
 80043ce:	e011      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6892      	ldr	r2, [r2, #8]
 80043e0:	0211      	lsls	r1, r2, #8
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6912      	ldr	r2, [r2, #16]
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	3a01      	subs	r2, #1
 80043ea:	0652      	lsls	r2, r2, #25
 80043ec:	430a      	orrs	r2, r1
 80043ee:	4916      	ldr	r1, [pc, #88]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043f4:	4b14      	ldr	r3, [pc, #80]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a13      	ldr	r2, [pc, #76]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fc44 	bl	8001c8c <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004406:	e009      	b.n	800441c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004408:	f7fd fc40 	bl	8001c8c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d902      	bls.n	800441c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	73fb      	strb	r3, [r7, #15]
          break;
 800441a:	e005      	b.n	8004428 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ef      	beq.n	8004408 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4904      	ldr	r1, [pc, #16]	; (8004448 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000

0800444c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e040      	b.n	80044e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fa14 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fec0 	bl	8005218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fc05 	bl	8004ca8 <UART_SetConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e01b      	b.n	80044e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 ff3f 	bl	800535c <UART_CheckIdleState>
 80044de:	4603      	mov	r3, r0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d178      	bne.n	80045f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Transmit+0x24>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e071      	b.n	80045f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2221      	movs	r2, #33	; 0x21
 800451c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451e:	f7fd fbb5 	bl	8001c8c <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d108      	bne.n	8004550 <HAL_UART_Transmit+0x68>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e003      	b.n	8004558 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004558:	e030      	b.n	80045bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 ffa1 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03c      	b.n	80045f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	b292      	uxth	r2, r2
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3302      	adds	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e008      	b.n	80045aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	b292      	uxth	r2, r2
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1c8      	bne.n	800455a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2140      	movs	r1, #64	; 0x40
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 ff6a 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e005      	b.n	80045f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004610:	2b20      	cmp	r3, #32
 8004612:	d137      	bne.n	8004684 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Receive_IT+0x24>
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e030      	b.n	8004686 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_UART_Receive_IT+0x94>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d01f      	beq.n	8004674 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	613b      	str	r3, [r7, #16]
   return(result);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	69f9      	ldr	r1, [r7, #28]
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	61bb      	str	r3, [r7, #24]
   return(result);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	461a      	mov	r2, r3
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 ff7e 	bl	800557c <UART_Start_Receive_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	e000      	b.n	8004686 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3728      	adds	r7, #40	; 0x28
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40008000 	.word	0x40008000

08004694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b0ba      	sub	sp, #232	; 0xe8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046be:	f640 030f 	movw	r3, #2063	; 0x80f
 80046c2:	4013      	ands	r3, r2
 80046c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d115      	bne.n	80046fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00f      	beq.n	80046fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 82ae 	beq.w	8004c4e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
      }
      return;
 80046fa:	e2a8      	b.n	8004c4e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8117 	beq.w	8004934 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_UART_IRQHandler+0x298>)
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 810a 	beq.w	8004934 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d011      	beq.n	8004750 <HAL_UART_IRQHandler+0xbc>
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004746:	f043 0201 	orr.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d011      	beq.n	8004780 <HAL_UART_IRQHandler+0xec>
 800475c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2202      	movs	r2, #2
 800476e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d011      	beq.n	80047b0 <HAL_UART_IRQHandler+0x11c>
 800478c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	f043 0202 	orr.w	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d017      	beq.n	80047ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2208      	movs	r2, #8
 80047da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e2:	f043 0208 	orr.w	r2, r3, #8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d012      	beq.n	800481e <HAL_UART_IRQHandler+0x18a>
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800480c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8214 	beq.w	8004c52 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d005      	beq.n	8004876 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d04f      	beq.n	8004916 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 ff46 	bl	8005708 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d141      	bne.n	800490e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1d9      	bne.n	800488a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <HAL_UART_IRQHandler+0x29c>)
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd ffac 	bl	8002848 <HAL_DMA_Abort_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	e00f      	b.n	8004926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9b8 	bl	8004c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e00b      	b.n	8004926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9b4 	bl	8004c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e007      	b.n	8004926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9b0 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004924:	e195      	b.n	8004c52 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004926:	bf00      	nop
    return;
 8004928:	e193      	b.n	8004c52 <HAL_UART_IRQHandler+0x5be>
 800492a:	bf00      	nop
 800492c:	04000120 	.word	0x04000120
 8004930:	080057d1 	.word	0x080057d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 814e 	bne.w	8004bda <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8147 	beq.w	8004bda <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8140 	beq.w	8004bda <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2210      	movs	r2, #16
 8004960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	f040 80b8 	bne.w	8004ae2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800497e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8167 	beq.w	8004c56 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800498e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004992:	429a      	cmp	r2, r3
 8004994:	f080 815f 	bcs.w	8004c56 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800499e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8086 	bne.w	8004ac0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1da      	bne.n	80049b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3308      	adds	r3, #8
 8004a04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e1      	bne.n	80049fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e3      	bne.n	8004a3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a90:	f023 0310 	bic.w	r3, r3, #16
 8004a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e4      	bne.n	8004a80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fd fe86 	bl	80027cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8d8 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ae0:	e0b9      	b.n	8004c56 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80ab 	beq.w	8004c5a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a6 	beq.w	8004c5a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e4      	bne.n	8004b0e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	623b      	str	r3, [r7, #32]
   return(result);
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b68:	633a      	str	r2, [r7, #48]	; 0x30
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e3      	bne.n	8004b44 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	69b9      	ldr	r1, [r7, #24]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e4      	bne.n	8004b90 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f85c 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bd8:	e03f      	b.n	8004c5a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00e      	beq.n	8004c04 <HAL_UART_IRQHandler+0x570>
 8004be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 ffe3 	bl	8005bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c02:	e02d      	b.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01c      	beq.n	8004c5e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
    }
    return;
 8004c2c:	e017      	b.n	8004c5e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d012      	beq.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
 8004c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fdd8 	bl	80057fc <UART_EndTransmit_IT>
    return;
 8004c4c:	e008      	b.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c4e:	bf00      	nop
 8004c50:	e006      	b.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004c52:	bf00      	nop
 8004c54:	e004      	b.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c56:	bf00      	nop
 8004c58:	e002      	b.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004c5e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c60:	37e8      	adds	r7, #232	; 0xe8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop

08004c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b08a      	sub	sp, #40	; 0x28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4ba4      	ldr	r3, [pc, #656]	; (8004f68 <UART_SetConfig+0x2c0>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a99      	ldr	r2, [pc, #612]	; (8004f6c <UART_SetConfig+0x2c4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d10:	4313      	orrs	r3, r2
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d24:	430a      	orrs	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a90      	ldr	r2, [pc, #576]	; (8004f70 <UART_SetConfig+0x2c8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d126      	bne.n	8004d80 <UART_SetConfig+0xd8>
 8004d32:	4b90      	ldr	r3, [pc, #576]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d81b      	bhi.n	8004d78 <UART_SetConfig+0xd0>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0xa0>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d69 	.word	0x08004d69
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d71 	.word	0x08004d71
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e116      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d66:	e112      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e10e      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e10a      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e106      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a7c      	ldr	r2, [pc, #496]	; (8004f78 <UART_SetConfig+0x2d0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d138      	bne.n	8004dfc <UART_SetConfig+0x154>
 8004d8a:	4b7a      	ldr	r3, [pc, #488]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d82d      	bhi.n	8004df4 <UART_SetConfig+0x14c>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0xf8>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08004df5 	.word	0x08004df5
 8004dac:	08004df5 	.word	0x08004df5
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004df5 	.word	0x08004df5
 8004db8:	08004df5 	.word	0x08004df5
 8004dbc:	08004df5 	.word	0x08004df5
 8004dc0:	08004ddd 	.word	0x08004ddd
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e0d8      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e0d4      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e0d0      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e0cc      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e0c8      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5e      	ldr	r2, [pc, #376]	; (8004f7c <UART_SetConfig+0x2d4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d125      	bne.n	8004e52 <UART_SetConfig+0x1aa>
 8004e06:	4b5b      	ldr	r3, [pc, #364]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d016      	beq.n	8004e42 <UART_SetConfig+0x19a>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d818      	bhi.n	8004e4a <UART_SetConfig+0x1a2>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d00a      	beq.n	8004e32 <UART_SetConfig+0x18a>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d814      	bhi.n	8004e4a <UART_SetConfig+0x1a2>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <UART_SetConfig+0x182>
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d008      	beq.n	8004e3a <UART_SetConfig+0x192>
 8004e28:	e00f      	b.n	8004e4a <UART_SetConfig+0x1a2>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e30:	e0ad      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e32:	2302      	movs	r3, #2
 8004e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e38:	e0a9      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e3a:	2304      	movs	r3, #4
 8004e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e40:	e0a5      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e42:	2308      	movs	r3, #8
 8004e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e48:	e0a1      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e4a:	2310      	movs	r3, #16
 8004e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e50:	e09d      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <UART_SetConfig+0x2d8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d125      	bne.n	8004ea8 <UART_SetConfig+0x200>
 8004e5c:	4b45      	ldr	r3, [pc, #276]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e66:	2bc0      	cmp	r3, #192	; 0xc0
 8004e68:	d016      	beq.n	8004e98 <UART_SetConfig+0x1f0>
 8004e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e6c:	d818      	bhi.n	8004ea0 <UART_SetConfig+0x1f8>
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d00a      	beq.n	8004e88 <UART_SetConfig+0x1e0>
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d814      	bhi.n	8004ea0 <UART_SetConfig+0x1f8>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <UART_SetConfig+0x1d8>
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d008      	beq.n	8004e90 <UART_SetConfig+0x1e8>
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0x1f8>
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e082      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e07e      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e07a      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e076      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e072      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <UART_SetConfig+0x2dc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d12a      	bne.n	8004f08 <UART_SetConfig+0x260>
 8004eb2:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec0:	d01a      	beq.n	8004ef8 <UART_SetConfig+0x250>
 8004ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec6:	d81b      	bhi.n	8004f00 <UART_SetConfig+0x258>
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d00c      	beq.n	8004ee8 <UART_SetConfig+0x240>
 8004ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed2:	d815      	bhi.n	8004f00 <UART_SetConfig+0x258>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0x238>
 8004ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004edc:	d008      	beq.n	8004ef0 <UART_SetConfig+0x248>
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x258>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e052      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e04e      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e04a      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e046      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e042      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <UART_SetConfig+0x2c4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d13a      	bne.n	8004f88 <UART_SetConfig+0x2e0>
 8004f12:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f20:	d01a      	beq.n	8004f58 <UART_SetConfig+0x2b0>
 8004f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0x2b8>
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2c:	d00c      	beq.n	8004f48 <UART_SetConfig+0x2a0>
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d815      	bhi.n	8004f60 <UART_SetConfig+0x2b8>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <UART_SetConfig+0x298>
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d008      	beq.n	8004f50 <UART_SetConfig+0x2a8>
 8004f3e:	e00f      	b.n	8004f60 <UART_SetConfig+0x2b8>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e022      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e01e      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e01a      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e016      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e012      	b.n	8004f8e <UART_SetConfig+0x2e6>
 8004f68:	efff69f3 	.word	0xefff69f3
 8004f6c:	40008000 	.word	0x40008000
 8004f70:	40013800 	.word	0x40013800
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40004400 	.word	0x40004400
 8004f7c:	40004800 	.word	0x40004800
 8004f80:	40004c00 	.word	0x40004c00
 8004f84:	40005000 	.word	0x40005000
 8004f88:	2310      	movs	r3, #16
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a9f      	ldr	r2, [pc, #636]	; (8005210 <UART_SetConfig+0x568>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d17a      	bne.n	800508e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d824      	bhi.n	8004fea <UART_SetConfig+0x342>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x300>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004feb 	.word	0x08004feb
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004feb 	.word	0x08004feb
 8004fb8:	08004fdb 	.word	0x08004fdb
 8004fbc:	08004feb 	.word	0x08004feb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004feb 	.word	0x08004feb
 8004fc8:	08004fe3 	.word	0x08004fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f7fe fcf6 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 8004fd0:	61f8      	str	r0, [r7, #28]
        break;
 8004fd2:	e010      	b.n	8004ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd4:	4b8f      	ldr	r3, [pc, #572]	; (8005214 <UART_SetConfig+0x56c>)
 8004fd6:	61fb      	str	r3, [r7, #28]
        break;
 8004fd8:	e00d      	b.n	8004ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fda:	f7fe fc57 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8004fde:	61f8      	str	r0, [r7, #28]
        break;
 8004fe0:	e009      	b.n	8004ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe6:	61fb      	str	r3, [r7, #28]
        break;
 8004fe8:	e005      	b.n	8004ff6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80fb 	beq.w	80051f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	429a      	cmp	r2, r3
 800500c:	d305      	bcc.n	800501a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	429a      	cmp	r2, r3
 8005018:	d903      	bls.n	8005022 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005020:	e0e8      	b.n	80051f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2200      	movs	r2, #0
 8005026:	461c      	mov	r4, r3
 8005028:	4615      	mov	r5, r2
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	022b      	lsls	r3, r5, #8
 8005034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005038:	0222      	lsls	r2, r4, #8
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	6849      	ldr	r1, [r1, #4]
 800503e:	0849      	lsrs	r1, r1, #1
 8005040:	2000      	movs	r0, #0
 8005042:	4688      	mov	r8, r1
 8005044:	4681      	mov	r9, r0
 8005046:	eb12 0a08 	adds.w	sl, r2, r8
 800504a:	eb43 0b09 	adc.w	fp, r3, r9
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	4650      	mov	r0, sl
 800505e:	4659      	mov	r1, fp
 8005060:	f7fb fda2 	bl	8000ba8 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4613      	mov	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005072:	d308      	bcc.n	8005086 <UART_SetConfig+0x3de>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507a:	d204      	bcs.n	8005086 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	e0b6      	b.n	80051f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800508c:	e0b2      	b.n	80051f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005096:	d15e      	bne.n	8005156 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800509c:	2b08      	cmp	r3, #8
 800509e:	d828      	bhi.n	80050f2 <UART_SetConfig+0x44a>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <UART_SetConfig+0x400>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	080050f3 	.word	0x080050f3
 80050b8:	080050e3 	.word	0x080050e3
 80050bc:	080050f3 	.word	0x080050f3
 80050c0:	080050f3 	.word	0x080050f3
 80050c4:	080050f3 	.word	0x080050f3
 80050c8:	080050eb 	.word	0x080050eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050cc:	f7fe fc76 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 80050d0:	61f8      	str	r0, [r7, #28]
        break;
 80050d2:	e014      	b.n	80050fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d4:	f7fe fc88 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 80050d8:	61f8      	str	r0, [r7, #28]
        break;
 80050da:	e010      	b.n	80050fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050dc:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <UART_SetConfig+0x56c>)
 80050de:	61fb      	str	r3, [r7, #28]
        break;
 80050e0:	e00d      	b.n	80050fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e2:	f7fe fbd3 	bl	800388c <HAL_RCC_GetSysClockFreq>
 80050e6:	61f8      	str	r0, [r7, #28]
        break;
 80050e8:	e009      	b.n	80050fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ee:	61fb      	str	r3, [r7, #28]
        break;
 80050f0:	e005      	b.n	80050fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d077      	beq.n	80051f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005a      	lsls	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b0f      	cmp	r3, #15
 800511e:	d916      	bls.n	800514e <UART_SetConfig+0x4a6>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005126:	d212      	bcs.n	800514e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f023 030f 	bic.w	r3, r3, #15
 8005130:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	b29a      	uxth	r2, r3
 800513e:	8afb      	ldrh	r3, [r7, #22]
 8005140:	4313      	orrs	r3, r2
 8005142:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	8afa      	ldrh	r2, [r7, #22]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	e052      	b.n	80051f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005154:	e04e      	b.n	80051f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800515a:	2b08      	cmp	r3, #8
 800515c:	d827      	bhi.n	80051ae <UART_SetConfig+0x506>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <UART_SetConfig+0x4bc>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005189 	.word	0x08005189
 8005168:	08005191 	.word	0x08005191
 800516c:	08005199 	.word	0x08005199
 8005170:	080051af 	.word	0x080051af
 8005174:	0800519f 	.word	0x0800519f
 8005178:	080051af 	.word	0x080051af
 800517c:	080051af 	.word	0x080051af
 8005180:	080051af 	.word	0x080051af
 8005184:	080051a7 	.word	0x080051a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fe fc18 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 800518c:	61f8      	str	r0, [r7, #28]
        break;
 800518e:	e014      	b.n	80051ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005190:	f7fe fc2a 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 8005194:	61f8      	str	r0, [r7, #28]
        break;
 8005196:	e010      	b.n	80051ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <UART_SetConfig+0x56c>)
 800519a:	61fb      	str	r3, [r7, #28]
        break;
 800519c:	e00d      	b.n	80051ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519e:	f7fe fb75 	bl	800388c <HAL_RCC_GetSysClockFreq>
 80051a2:	61f8      	str	r0, [r7, #28]
        break;
 80051a4:	e009      	b.n	80051ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051aa:	61fb      	str	r3, [r7, #28]
        break;
 80051ac:	e005      	b.n	80051ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051b8:	bf00      	nop
    }

    if (pclk != 0U)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d019      	beq.n	80051f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	085a      	lsrs	r2, r3, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	441a      	add	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	d909      	bls.n	80051ee <UART_SetConfig+0x546>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e0:	d205      	bcs.n	80051ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e002      	b.n	80051f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005200:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005204:	4618      	mov	r0, r3
 8005206:	3728      	adds	r7, #40	; 0x28
 8005208:	46bd      	mov	sp, r7
 800520a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520e:	bf00      	nop
 8005210:	40008000 	.word	0x40008000
 8005214:	00f42400 	.word	0x00f42400

08005218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01a      	beq.n	800532e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005316:	d10a      	bne.n	800532e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b098      	sub	sp, #96	; 0x60
 8005360:	af02      	add	r7, sp, #8
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800536c:	f7fc fc8e 	bl	8001c8c <HAL_GetTick>
 8005370:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b08      	cmp	r3, #8
 800537e:	d12e      	bne.n	80053de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005388:	2200      	movs	r2, #0
 800538a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f88c 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d021      	beq.n	80053de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ae:	653b      	str	r3, [r7, #80]	; 0x50
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e6      	bne.n	800539a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e062      	b.n	80054a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d149      	bne.n	8005480 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f856 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03c      	beq.n	8005480 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	623b      	str	r3, [r7, #32]
   return(result);
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800541a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	633b      	str	r3, [r7, #48]	; 0x30
 8005426:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800542a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	60fb      	str	r3, [r7, #12]
   return(result);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	617b      	str	r3, [r7, #20]
   return(result);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e011      	b.n	80054a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3758      	adds	r7, #88	; 0x58
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054bc:	e049      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d045      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fc fbe1 	bl	8001c8c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <UART_WaitOnFlagUntilTimeout+0x30>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e048      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d031      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d110      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2208      	movs	r2, #8
 8005502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f8ff 	bl	8005708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2208      	movs	r2, #8
 800550e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e029      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d111      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f8e5 	bl	8005708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00f      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0a6      	beq.n	80054be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557c:	b480      	push	{r7}
 800557e:	b097      	sub	sp, #92	; 0x5c
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d10e      	bne.n	80055ce <UART_Start_Receive_IT+0x52>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <UART_Start_Receive_IT+0x48>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055c2:	e02d      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	22ff      	movs	r2, #255	; 0xff
 80055c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055cc:	e028      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10d      	bne.n	80055f2 <UART_Start_Receive_IT+0x76>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <UART_Start_Receive_IT+0x6c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	22ff      	movs	r2, #255	; 0xff
 80055e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055e6:	e01b      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	227f      	movs	r2, #127	; 0x7f
 80055ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f0:	e016      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055fa:	d10d      	bne.n	8005618 <UART_Start_Receive_IT+0x9c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <UART_Start_Receive_IT+0x92>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	227f      	movs	r2, #127	; 0x7f
 8005608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800560c:	e008      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	223f      	movs	r2, #63	; 0x3f
 8005612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005616:	e003      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2222      	movs	r2, #34	; 0x22
 800562c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005650:	64ba      	str	r2, [r7, #72]	; 0x48
 8005652:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800565e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e5      	bne.n	8005630 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566c:	d107      	bne.n	800567e <UART_Start_Receive_IT+0x102>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <UART_Start_Receive_IT+0x184>)
 800567a:	669a      	str	r2, [r3, #104]	; 0x68
 800567c:	e002      	b.n	8005684 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a20      	ldr	r2, [pc, #128]	; (8005704 <UART_Start_Receive_IT+0x188>)
 8005682:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80056a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
 80056ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_Start_Receive_IT+0x110>
 80056be:	e018      	b.n	80056f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	613b      	str	r3, [r7, #16]
   return(result);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f043 0320 	orr.w	r3, r3, #32
 80056d4:	653b      	str	r3, [r7, #80]	; 0x50
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	69f9      	ldr	r1, [r7, #28]
 80056e4:	6a3a      	ldr	r2, [r7, #32]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e6      	bne.n	80056c0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	375c      	adds	r7, #92	; 0x5c
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	08005a0d 	.word	0x08005a0d
 8005704:	08005851 	.word	0x08005851

08005708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b095      	sub	sp, #84	; 0x54
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	643b      	str	r3, [r7, #64]	; 0x40
 8005730:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	61fb      	str	r3, [r7, #28]
   return(result);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	64bb      	str	r3, [r7, #72]	; 0x48
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e5      	bne.n	8005742 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	2b01      	cmp	r3, #1
 800577c:	d118      	bne.n	80057b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	60bb      	str	r3, [r7, #8]
   return(result);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	647b      	str	r3, [r7, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	613b      	str	r3, [r7, #16]
   return(result);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057c4:	bf00      	nop
 80057c6:	3754      	adds	r7, #84	; 0x54
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fa44 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	60bb      	str	r3, [r7, #8]
   return(result);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6979      	ldr	r1, [r7, #20]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	613b      	str	r3, [r7, #16]
   return(result);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e6      	bne.n	8005804 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fa10 	bl	8004c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005848:	bf00      	nop
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b09c      	sub	sp, #112	; 0x70
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800585e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005868:	2b22      	cmp	r3, #34	; 0x22
 800586a:	f040 80be 	bne.w	80059ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005874:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005882:	b2da      	uxtb	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	400a      	ands	r2, r1
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 80a3 	bne.w	80059fe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80058d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	667b      	str	r3, [r7, #100]	; 0x64
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800590a:	647a      	str	r2, [r7, #68]	; 0x44
 800590c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a34      	ldr	r2, [pc, #208]	; (8005a08 <UART_RxISR_8BIT+0x1b8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01f      	beq.n	800597c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	623b      	str	r3, [r7, #32]
   return(result);
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800595e:	663b      	str	r3, [r7, #96]	; 0x60
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
 800596a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800596e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	2b01      	cmp	r3, #1
 8005982:	d12e      	bne.n	80059e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	60fb      	str	r3, [r7, #12]
   return(result);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	617b      	str	r3, [r7, #20]
   return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d103      	bne.n	80059d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff f958 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059e0:	e00d      	b.n	80059fe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fdd4 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 80059e8:	e009      	b.n	80059fe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	8b1b      	ldrh	r3, [r3, #24]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	b292      	uxth	r2, r2
 80059fc:	831a      	strh	r2, [r3, #24]
}
 80059fe:	bf00      	nop
 8005a00:	3770      	adds	r7, #112	; 0x70
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40008000 	.word	0x40008000

08005a0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b09c      	sub	sp, #112	; 0x70
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a24:	2b22      	cmp	r3, #34	; 0x22
 8005a26:	f040 80be 	bne.w	8005ba6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005a3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	1c9a      	adds	r2, r3, #2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 80a3 	bne.w	8005bba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a88:	667b      	str	r3, [r7, #100]	; 0x64
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a92:	657b      	str	r3, [r7, #84]	; 0x54
 8005a94:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e6      	bne.n	8005a74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	663b      	str	r3, [r7, #96]	; 0x60
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ac6:	643a      	str	r2, [r7, #64]	; 0x40
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <UART_RxISR_16BIT+0x1b8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d01f      	beq.n	8005b38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d12e      	bne.n	8005b9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0310 	bic.w	r3, r3, #16
 8005b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	613b      	str	r3, [r7, #16]
   return(result);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d103      	bne.n	8005b8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff f87a 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b9c:	e00d      	b.n	8005bba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fcf6 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 8005ba4:	e009      	b.n	8005bba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	8b1b      	ldrh	r3, [r3, #24]
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	831a      	strh	r2, [r3, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	3770      	adds	r7, #112	; 0x70
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40008000 	.word	0x40008000

08005bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <arm_copy_f32>:
 8005bdc:	b4f0      	push	{r4, r5, r6, r7}
 8005bde:	0897      	lsrs	r7, r2, #2
 8005be0:	d01d      	beq.n	8005c1e <arm_copy_f32+0x42>
 8005be2:	f100 0410 	add.w	r4, r0, #16
 8005be6:	f101 0310 	add.w	r3, r1, #16
 8005bea:	463d      	mov	r5, r7
 8005bec:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8005bf0:	f843 6c10 	str.w	r6, [r3, #-16]
 8005bf4:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8005bf8:	f843 6c0c 	str.w	r6, [r3, #-12]
 8005bfc:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8005c00:	f843 6c08 	str.w	r6, [r3, #-8]
 8005c04:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8005c08:	f843 6c04 	str.w	r6, [r3, #-4]
 8005c0c:	3d01      	subs	r5, #1
 8005c0e:	f104 0410 	add.w	r4, r4, #16
 8005c12:	f103 0310 	add.w	r3, r3, #16
 8005c16:	d1e9      	bne.n	8005bec <arm_copy_f32+0x10>
 8005c18:	013f      	lsls	r7, r7, #4
 8005c1a:	4438      	add	r0, r7
 8005c1c:	4439      	add	r1, r7
 8005c1e:	f012 0203 	ands.w	r2, r2, #3
 8005c22:	d009      	beq.n	8005c38 <arm_copy_f32+0x5c>
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	600b      	str	r3, [r1, #0]
 8005c28:	3a01      	subs	r2, #1
 8005c2a:	d005      	beq.n	8005c38 <arm_copy_f32+0x5c>
 8005c2c:	6843      	ldr	r3, [r0, #4]
 8005c2e:	604b      	str	r3, [r1, #4]
 8005c30:	2a01      	cmp	r2, #1
 8005c32:	bf1c      	itt	ne
 8005c34:	6883      	ldrne	r3, [r0, #8]
 8005c36:	608b      	strne	r3, [r1, #8]
 8005c38:	bcf0      	pop	{r4, r5, r6, r7}
 8005c3a:	4770      	bx	lr

08005c3c <arm_mean_f32>:
 8005c3c:	b430      	push	{r4, r5}
 8005c3e:	088d      	lsrs	r5, r1, #2
 8005c40:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005cb4 <arm_mean_f32+0x78>
 8005c44:	d018      	beq.n	8005c78 <arm_mean_f32+0x3c>
 8005c46:	f100 0310 	add.w	r3, r0, #16
 8005c4a:	462c      	mov	r4, r5
 8005c4c:	ed53 5a04 	vldr	s11, [r3, #-16]
 8005c50:	ed13 6a03 	vldr	s12, [r3, #-12]
 8005c54:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005c58:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005c5c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005c60:	3c01      	subs	r4, #1
 8005c62:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c66:	f103 0310 	add.w	r3, r3, #16
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c72:	d1eb      	bne.n	8005c4c <arm_mean_f32+0x10>
 8005c74:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8005c78:	f011 0303 	ands.w	r3, r1, #3
 8005c7c:	d00f      	beq.n	8005c9e <arm_mean_f32+0x62>
 8005c7e:	ed90 7a00 	vldr	s14, [r0]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c88:	d009      	beq.n	8005c9e <arm_mean_f32+0x62>
 8005c8a:	ed90 7a01 	vldr	s14, [r0, #4]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c94:	bf1c      	itt	ne
 8005c96:	ed90 7a02 	vldrne	s14, [r0, #8]
 8005c9a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8005c9e:	ee07 1a10 	vmov	s14, r1
 8005ca2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005ca6:	bc30      	pop	{r4, r5}
 8005ca8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cac:	edc2 6a00 	vstr	s13, [r2]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <arm_max_f32>:
 8005cb8:	f101 3cff 	add.w	ip, r1, #4294967295
 8005cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8005cc4:	ecf7 7a01 	vldmia	r7!, {s15}
 8005cc8:	d060      	beq.n	8005d8c <arm_max_f32+0xd4>
 8005cca:	2400      	movs	r4, #0
 8005ccc:	3014      	adds	r0, #20
 8005cce:	4625      	mov	r5, r4
 8005cd0:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8005cd4:	ed10 7a04 	vldr	s14, [r0, #-16]
 8005cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce0:	bf48      	it	mi
 8005ce2:	eef0 7a47 	vmovmi.f32	s15, s14
 8005ce6:	ed10 7a03 	vldr	s14, [r0, #-12]
 8005cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cee:	bf48      	it	mi
 8005cf0:	1c65      	addmi	r5, r4, #1
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	bf48      	it	mi
 8005cf8:	eef0 7a47 	vmovmi.f32	s15, s14
 8005cfc:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d04:	bf48      	it	mi
 8005d06:	1ca5      	addmi	r5, r4, #2
 8005d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0c:	bf48      	it	mi
 8005d0e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d12:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d1a:	bf48      	it	mi
 8005d1c:	1ce5      	addmi	r5, r4, #3
 8005d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d22:	f104 0404 	add.w	r4, r4, #4
 8005d26:	bf44      	itt	mi
 8005d28:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d2c:	4625      	movmi	r5, r4
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	f100 0010 	add.w	r0, r0, #16
 8005d34:	d1ce      	bne.n	8005cd4 <arm_max_f32+0x1c>
 8005d36:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8005d3a:	f01c 0003 	ands.w	r0, ip, #3
 8005d3e:	d021      	beq.n	8005d84 <arm_max_f32+0xcc>
 8005d40:	ed97 7a00 	vldr	s14, [r7]
 8005d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4c:	bfc4      	itt	gt
 8005d4e:	eef0 7a47 	vmovgt.f32	s15, s14
 8005d52:	1a0d      	subgt	r5, r1, r0
 8005d54:	3801      	subs	r0, #1
 8005d56:	d015      	beq.n	8005d84 <arm_max_f32+0xcc>
 8005d58:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d64:	bf44      	itt	mi
 8005d66:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d6a:	1a0d      	submi	r5, r1, r0
 8005d6c:	2801      	cmp	r0, #1
 8005d6e:	d009      	beq.n	8005d84 <arm_max_f32+0xcc>
 8005d70:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	bfc4      	itt	gt
 8005d7e:	eef0 7a47 	vmovgt.f32	s15, s14
 8005d82:	4665      	movgt	r5, ip
 8005d84:	edc2 7a00 	vstr	s15, [r2]
 8005d88:	601d      	str	r5, [r3, #0]
 8005d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d8c:	4675      	mov	r5, lr
 8005d8e:	e7d4      	b.n	8005d3a <arm_max_f32+0x82>

08005d90 <arm_rfft_32_fast_init_f32>:
 8005d90:	b178      	cbz	r0, 8005db2 <arm_rfft_32_fast_init_f32+0x22>
 8005d92:	b430      	push	{r4, r5}
 8005d94:	4908      	ldr	r1, [pc, #32]	; (8005db8 <arm_rfft_32_fast_init_f32+0x28>)
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <arm_rfft_32_fast_init_f32+0x2c>)
 8005d98:	2310      	movs	r3, #16
 8005d9a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005d9e:	8003      	strh	r3, [r0, #0]
 8005da0:	2520      	movs	r5, #32
 8005da2:	2414      	movs	r4, #20
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <arm_rfft_32_fast_init_f32+0x30>)
 8005da6:	8205      	strh	r5, [r0, #16]
 8005da8:	8184      	strh	r4, [r0, #12]
 8005daa:	6143      	str	r3, [r0, #20]
 8005dac:	bc30      	pop	{r4, r5}
 8005dae:	2000      	movs	r0, #0
 8005db0:	4770      	bx	lr
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	4770      	bx	lr
 8005db8:	0800b104 	.word	0x0800b104
 8005dbc:	08010240 	.word	0x08010240
 8005dc0:	08018fc0 	.word	0x08018fc0

08005dc4 <arm_rfft_64_fast_init_f32>:
 8005dc4:	b178      	cbz	r0, 8005de6 <arm_rfft_64_fast_init_f32+0x22>
 8005dc6:	b430      	push	{r4, r5}
 8005dc8:	4908      	ldr	r1, [pc, #32]	; (8005dec <arm_rfft_64_fast_init_f32+0x28>)
 8005dca:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <arm_rfft_64_fast_init_f32+0x2c>)
 8005dcc:	2320      	movs	r3, #32
 8005dce:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005dd2:	8003      	strh	r3, [r0, #0]
 8005dd4:	2540      	movs	r5, #64	; 0x40
 8005dd6:	2430      	movs	r4, #48	; 0x30
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <arm_rfft_64_fast_init_f32+0x30>)
 8005dda:	8205      	strh	r5, [r0, #16]
 8005ddc:	8184      	strh	r4, [r0, #12]
 8005dde:	6143      	str	r3, [r0, #20]
 8005de0:	bc30      	pop	{r4, r5}
 8005de2:	2000      	movs	r0, #0
 8005de4:	4770      	bx	lr
 8005de6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dea:	4770      	bx	lr
 8005dec:	0800d25c 	.word	0x0800d25c
 8005df0:	08014ac0 	.word	0x08014ac0
 8005df4:	0801d840 	.word	0x0801d840

08005df8 <arm_rfft_256_fast_init_f32>:
 8005df8:	b180      	cbz	r0, 8005e1c <arm_rfft_256_fast_init_f32+0x24>
 8005dfa:	b430      	push	{r4, r5}
 8005dfc:	4909      	ldr	r1, [pc, #36]	; (8005e24 <arm_rfft_256_fast_init_f32+0x2c>)
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <arm_rfft_256_fast_init_f32+0x30>)
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005e06:	8003      	strh	r3, [r0, #0]
 8005e08:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005e0c:	24d0      	movs	r4, #208	; 0xd0
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <arm_rfft_256_fast_init_f32+0x34>)
 8005e10:	8205      	strh	r5, [r0, #16]
 8005e12:	8184      	strh	r4, [r0, #12]
 8005e14:	6143      	str	r3, [r0, #20]
 8005e16:	bc30      	pop	{r4, r5}
 8005e18:	2000      	movs	r0, #0
 8005e1a:	4770      	bx	lr
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	0800af64 	.word	0x0800af64
 8005e28:	0800fe40 	.word	0x0800fe40
 8005e2c:	08018bc0 	.word	0x08018bc0

08005e30 <arm_rfft_512_fast_init_f32>:
 8005e30:	b190      	cbz	r0, 8005e58 <arm_rfft_512_fast_init_f32+0x28>
 8005e32:	b430      	push	{r4, r5}
 8005e34:	490a      	ldr	r1, [pc, #40]	; (8005e60 <arm_rfft_512_fast_init_f32+0x30>)
 8005e36:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <arm_rfft_512_fast_init_f32+0x34>)
 8005e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e3c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005e40:	8003      	strh	r3, [r0, #0]
 8005e42:	f44f 7500 	mov.w	r5, #512	; 0x200
 8005e46:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <arm_rfft_512_fast_init_f32+0x38>)
 8005e4c:	8205      	strh	r5, [r0, #16]
 8005e4e:	8184      	strh	r4, [r0, #12]
 8005e50:	6143      	str	r3, [r0, #20]
 8005e52:	bc30      	pop	{r4, r5}
 8005e54:	2000      	movs	r0, #0
 8005e56:	4770      	bx	lr
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	0800ceec 	.word	0x0800ceec
 8005e64:	080142c0 	.word	0x080142c0
 8005e68:	0801d040 	.word	0x0801d040

08005e6c <arm_rfft_1024_fast_init_f32>:
 8005e6c:	b190      	cbz	r0, 8005e94 <arm_rfft_1024_fast_init_f32+0x28>
 8005e6e:	b430      	push	{r4, r5}
 8005e70:	490a      	ldr	r1, [pc, #40]	; (8005e9c <arm_rfft_1024_fast_init_f32+0x30>)
 8005e72:	4a0b      	ldr	r2, [pc, #44]	; (8005ea0 <arm_rfft_1024_fast_init_f32+0x34>)
 8005e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e78:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005e7c:	8003      	strh	r3, [r0, #0]
 8005e7e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8005e82:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <arm_rfft_1024_fast_init_f32+0x38>)
 8005e88:	8205      	strh	r5, [r0, #16]
 8005e8a:	8184      	strh	r4, [r0, #12]
 8005e8c:	6143      	str	r3, [r0, #20]
 8005e8e:	bc30      	pop	{r4, r5}
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	0800d2bc 	.word	0x0800d2bc
 8005ea0:	08014bc0 	.word	0x08014bc0
 8005ea4:	08015bc0 	.word	0x08015bc0

08005ea8 <arm_rfft_2048_fast_init_f32>:
 8005ea8:	b190      	cbz	r0, 8005ed0 <arm_rfft_2048_fast_init_f32+0x28>
 8005eaa:	b430      	push	{r4, r5}
 8005eac:	490a      	ldr	r1, [pc, #40]	; (8005ed8 <arm_rfft_2048_fast_init_f32+0x30>)
 8005eae:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <arm_rfft_2048_fast_init_f32+0x34>)
 8005eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005eb8:	8003      	strh	r3, [r0, #0]
 8005eba:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005ebe:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <arm_rfft_2048_fast_init_f32+0x38>)
 8005ec4:	8205      	strh	r5, [r0, #16]
 8005ec6:	8184      	strh	r4, [r0, #12]
 8005ec8:	6143      	str	r3, [r0, #20]
 8005eca:	bc30      	pop	{r4, r5}
 8005ecc:	2000      	movs	r0, #0
 8005ece:	4770      	bx	lr
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	0800a154 	.word	0x0800a154
 8005edc:	0800de40 	.word	0x0800de40
 8005ee0:	08016bc0 	.word	0x08016bc0

08005ee4 <arm_rfft_4096_fast_init_f32>:
 8005ee4:	b190      	cbz	r0, 8005f0c <arm_rfft_4096_fast_init_f32+0x28>
 8005ee6:	b430      	push	{r4, r5}
 8005ee8:	490a      	ldr	r1, [pc, #40]	; (8005f14 <arm_rfft_4096_fast_init_f32+0x30>)
 8005eea:	4a0b      	ldr	r2, [pc, #44]	; (8005f18 <arm_rfft_4096_fast_init_f32+0x34>)
 8005eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ef0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005ef4:	8003      	strh	r3, [r0, #0]
 8005ef6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8005efa:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <arm_rfft_4096_fast_init_f32+0x38>)
 8005f00:	8205      	strh	r5, [r0, #16]
 8005f02:	8184      	strh	r4, [r0, #12]
 8005f04:	6143      	str	r3, [r0, #20]
 8005f06:	bc30      	pop	{r4, r5}
 8005f08:	2000      	movs	r0, #0
 8005f0a:	4770      	bx	lr
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	0800b12c 	.word	0x0800b12c
 8005f18:	080102c0 	.word	0x080102c0
 8005f1c:	08019040 	.word	0x08019040

08005f20 <arm_rfft_fast_init_f32>:
 8005f20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005f24:	d01f      	beq.n	8005f66 <arm_rfft_fast_init_f32+0x46>
 8005f26:	d90b      	bls.n	8005f40 <arm_rfft_fast_init_f32+0x20>
 8005f28:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005f2c:	d019      	beq.n	8005f62 <arm_rfft_fast_init_f32+0x42>
 8005f2e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005f32:	d012      	beq.n	8005f5a <arm_rfft_fast_init_f32+0x3a>
 8005f34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f38:	d00d      	beq.n	8005f56 <arm_rfft_fast_init_f32+0x36>
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	4770      	bx	lr
 8005f40:	2940      	cmp	r1, #64	; 0x40
 8005f42:	d00c      	beq.n	8005f5e <arm_rfft_fast_init_f32+0x3e>
 8005f44:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005f48:	d003      	beq.n	8005f52 <arm_rfft_fast_init_f32+0x32>
 8005f4a:	2920      	cmp	r1, #32
 8005f4c:	d1f5      	bne.n	8005f3a <arm_rfft_fast_init_f32+0x1a>
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <arm_rfft_fast_init_f32+0x4c>)
 8005f50:	4718      	bx	r3
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <arm_rfft_fast_init_f32+0x50>)
 8005f54:	4718      	bx	r3
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <arm_rfft_fast_init_f32+0x54>)
 8005f58:	4718      	bx	r3
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <arm_rfft_fast_init_f32+0x58>)
 8005f5c:	4718      	bx	r3
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <arm_rfft_fast_init_f32+0x5c>)
 8005f60:	e7f6      	b.n	8005f50 <arm_rfft_fast_init_f32+0x30>
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <arm_rfft_fast_init_f32+0x60>)
 8005f64:	e7f4      	b.n	8005f50 <arm_rfft_fast_init_f32+0x30>
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <arm_rfft_fast_init_f32+0x64>)
 8005f68:	e7f2      	b.n	8005f50 <arm_rfft_fast_init_f32+0x30>
 8005f6a:	bf00      	nop
 8005f6c:	08005d91 	.word	0x08005d91
 8005f70:	08005df9 	.word	0x08005df9
 8005f74:	08005e6d 	.word	0x08005e6d
 8005f78:	08005ee5 	.word	0x08005ee5
 8005f7c:	08005dc5 	.word	0x08005dc5
 8005f80:	08005ea9 	.word	0x08005ea9
 8005f84:	08005e31 	.word	0x08005e31

08005f88 <stage_rfft_f32>:
 8005f88:	b410      	push	{r4}
 8005f8a:	edd1 7a00 	vldr	s15, [r1]
 8005f8e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005f92:	8804      	ldrh	r4, [r0, #0]
 8005f94:	6940      	ldr	r0, [r0, #20]
 8005f96:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005f9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f9e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8005fa2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005faa:	3c01      	subs	r4, #1
 8005fac:	ee26 7a84 	vmul.f32	s14, s13, s8
 8005fb0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005fb4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8005fb8:	ed82 7a00 	vstr	s14, [r2]
 8005fbc:	edc2 7a01 	vstr	s15, [r2, #4]
 8005fc0:	3010      	adds	r0, #16
 8005fc2:	3210      	adds	r2, #16
 8005fc4:	3b08      	subs	r3, #8
 8005fc6:	3110      	adds	r1, #16
 8005fc8:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005fcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8005fd0:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005fd4:	edd3 4a03 	vldr	s9, [r3, #12]
 8005fd8:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005fdc:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005fe0:	ee77 5a45 	vsub.f32	s11, s14, s10
 8005fe4:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005fe8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005fec:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005ff0:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005ff4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005ff8:	ee37 7a23 	vadd.f32	s14, s14, s7
 8005ffc:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006000:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006004:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006008:	ee37 7a06 	vadd.f32	s14, s14, s12
 800600c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006010:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006014:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006018:	3c01      	subs	r4, #1
 800601a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800601e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006022:	f1a3 0308 	sub.w	r3, r3, #8
 8006026:	f101 0108 	add.w	r1, r1, #8
 800602a:	f100 0008 	add.w	r0, r0, #8
 800602e:	f102 0208 	add.w	r2, r2, #8
 8006032:	d1c9      	bne.n	8005fc8 <stage_rfft_f32+0x40>
 8006034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop

0800603c <merge_rfft_f32>:
 800603c:	b410      	push	{r4}
 800603e:	edd1 7a00 	vldr	s15, [r1]
 8006042:	edd1 6a01 	vldr	s13, [r1, #4]
 8006046:	8804      	ldrh	r4, [r0, #0]
 8006048:	6940      	ldr	r0, [r0, #20]
 800604a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800604e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006052:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006056:	ee27 7a04 	vmul.f32	s14, s14, s8
 800605a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800605e:	3c01      	subs	r4, #1
 8006060:	ed82 7a00 	vstr	s14, [r2]
 8006064:	edc2 7a01 	vstr	s15, [r2, #4]
 8006068:	b3dc      	cbz	r4, 80060e2 <merge_rfft_f32+0xa6>
 800606a:	00e3      	lsls	r3, r4, #3
 800606c:	3b08      	subs	r3, #8
 800606e:	440b      	add	r3, r1
 8006070:	3010      	adds	r0, #16
 8006072:	3210      	adds	r2, #16
 8006074:	3110      	adds	r1, #16
 8006076:	ed11 5a02 	vldr	s10, [r1, #-8]
 800607a:	ed93 7a02 	vldr	s14, [r3, #8]
 800607e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006082:	edd3 4a03 	vldr	s9, [r3, #12]
 8006086:	ed51 7a01 	vldr	s15, [r1, #-4]
 800608a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800608e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006092:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006096:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800609a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800609e:	ee66 5a25 	vmul.f32	s11, s12, s11
 80060a2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80060a6:	ee37 7a63 	vsub.f32	s14, s14, s7
 80060aa:	ee66 6a85 	vmul.f32	s13, s13, s10
 80060ae:	ee26 6a05 	vmul.f32	s12, s12, s10
 80060b2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80060b6:	ee37 7a46 	vsub.f32	s14, s14, s12
 80060ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80060c2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80060c6:	3c01      	subs	r4, #1
 80060c8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80060cc:	ed42 7a01 	vstr	s15, [r2, #-4]
 80060d0:	f1a3 0308 	sub.w	r3, r3, #8
 80060d4:	f101 0108 	add.w	r1, r1, #8
 80060d8:	f100 0008 	add.w	r0, r0, #8
 80060dc:	f102 0208 	add.w	r2, r2, #8
 80060e0:	d1c9      	bne.n	8006076 <merge_rfft_f32+0x3a>
 80060e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <arm_rfft_fast_f32>:
 80060e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ec:	8a05      	ldrh	r5, [r0, #16]
 80060ee:	086d      	lsrs	r5, r5, #1
 80060f0:	8005      	strh	r5, [r0, #0]
 80060f2:	4604      	mov	r4, r0
 80060f4:	4616      	mov	r6, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	b14b      	cbz	r3, 800610e <arm_rfft_fast_f32+0x26>
 80060fa:	f7ff ff9f 	bl	800603c <merge_rfft_f32>
 80060fe:	462a      	mov	r2, r5
 8006100:	4631      	mov	r1, r6
 8006102:	4620      	mov	r0, r4
 8006104:	2301      	movs	r3, #1
 8006106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610a:	f000 bb33 	b.w	8006774 <arm_cfft_f32>
 800610e:	460f      	mov	r7, r1
 8006110:	461a      	mov	r2, r3
 8006112:	2301      	movs	r3, #1
 8006114:	f000 fb2e 	bl	8006774 <arm_cfft_f32>
 8006118:	4632      	mov	r2, r6
 800611a:	4639      	mov	r1, r7
 800611c:	4620      	mov	r0, r4
 800611e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	f7ff bf31 	b.w	8005f88 <stage_rfft_f32>
 8006126:	bf00      	nop

08006128 <arm_cfft_radix8by2_f32>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	ed2d 8b08 	vpush	{d8-d11}
 8006130:	4607      	mov	r7, r0
 8006132:	4608      	mov	r0, r1
 8006134:	f8b7 c000 	ldrh.w	ip, [r7]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800613e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006142:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006146:	f000 80b0 	beq.w	80062aa <arm_cfft_radix8by2_f32+0x182>
 800614a:	008c      	lsls	r4, r1, #2
 800614c:	3410      	adds	r4, #16
 800614e:	f100 0310 	add.w	r3, r0, #16
 8006152:	1906      	adds	r6, r0, r4
 8006154:	3210      	adds	r2, #16
 8006156:	4444      	add	r4, r8
 8006158:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800615c:	f108 0510 	add.w	r5, r8, #16
 8006160:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006164:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006168:	ed54 4a04 	vldr	s9, [r4, #-16]
 800616c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006170:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006174:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006178:	ed53 3a04 	vldr	s7, [r3, #-16]
 800617c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006180:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006184:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006188:	ed16 3a03 	vldr	s6, [r6, #-12]
 800618c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006190:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006194:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006198:	ed16 1a02 	vldr	s2, [r6, #-8]
 800619c:	ed56 1a01 	vldr	s3, [r6, #-4]
 80061a0:	ee73 ba82 	vadd.f32	s23, s7, s4
 80061a4:	ee37 ba22 	vadd.f32	s22, s14, s5
 80061a8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80061ac:	ee33 9a04 	vadd.f32	s18, s6, s8
 80061b0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80061b4:	ee75 aa00 	vadd.f32	s21, s10, s0
 80061b8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80061bc:	ee71 8a06 	vadd.f32	s17, s2, s12
 80061c0:	ed43 ba04 	vstr	s23, [r3, #-16]
 80061c4:	ed03 ba03 	vstr	s22, [r3, #-12]
 80061c8:	ed43 aa02 	vstr	s21, [r3, #-8]
 80061cc:	ed03 aa01 	vstr	s20, [r3, #-4]
 80061d0:	ed06 8a01 	vstr	s16, [r6, #-4]
 80061d4:	ed46 9a04 	vstr	s19, [r6, #-16]
 80061d8:	ed06 9a03 	vstr	s18, [r6, #-12]
 80061dc:	ed46 8a02 	vstr	s17, [r6, #-8]
 80061e0:	ee37 7a62 	vsub.f32	s14, s14, s5
 80061e4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80061e8:	ee34 4a43 	vsub.f32	s8, s8, s6
 80061ec:	ed52 6a03 	vldr	s13, [r2, #-12]
 80061f0:	ed12 3a04 	vldr	s6, [r2, #-16]
 80061f4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80061f8:	ee27 8a26 	vmul.f32	s16, s14, s13
 80061fc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006200:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006204:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006208:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800620c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006210:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006214:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006218:	ee37 7a63 	vsub.f32	s14, s14, s7
 800621c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006220:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006224:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006228:	ed05 7a03 	vstr	s14, [r5, #-12]
 800622c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006230:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006234:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006238:	ed12 7a01 	vldr	s14, [r2, #-4]
 800623c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006240:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006244:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006248:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800624c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006250:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006254:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006258:	ee25 4a25 	vmul.f32	s8, s10, s11
 800625c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006260:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006264:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006268:	ee26 7a07 	vmul.f32	s14, s12, s14
 800626c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006270:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006274:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006278:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800627c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006280:	3310      	adds	r3, #16
 8006282:	4563      	cmp	r3, ip
 8006284:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006288:	f106 0610 	add.w	r6, r6, #16
 800628c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006290:	f102 0210 	add.w	r2, r2, #16
 8006294:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006298:	ed04 7a01 	vstr	s14, [r4, #-4]
 800629c:	f105 0510 	add.w	r5, r5, #16
 80062a0:	f104 0410 	add.w	r4, r4, #16
 80062a4:	f47f af5c 	bne.w	8006160 <arm_cfft_radix8by2_f32+0x38>
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	b28c      	uxth	r4, r1
 80062ac:	4621      	mov	r1, r4
 80062ae:	2302      	movs	r3, #2
 80062b0:	f000 fd48 	bl	8006d44 <arm_radix8_butterfly_f32>
 80062b4:	ecbd 8b08 	vpop	{d8-d11}
 80062b8:	4621      	mov	r1, r4
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	4640      	mov	r0, r8
 80062be:	2302      	movs	r3, #2
 80062c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	f000 bd3e 	b.w	8006d44 <arm_radix8_butterfly_f32>

080062c8 <arm_cfft_radix8by4_f32>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ed2d 8b0a 	vpush	{d8-d12}
 80062d0:	b08d      	sub	sp, #52	; 0x34
 80062d2:	460d      	mov	r5, r1
 80062d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80062d6:	8801      	ldrh	r1, [r0, #0]
 80062d8:	6842      	ldr	r2, [r0, #4]
 80062da:	900a      	str	r0, [sp, #40]	; 0x28
 80062dc:	0849      	lsrs	r1, r1, #1
 80062de:	008b      	lsls	r3, r1, #2
 80062e0:	18ee      	adds	r6, r5, r3
 80062e2:	18f0      	adds	r0, r6, r3
 80062e4:	edd0 5a00 	vldr	s11, [r0]
 80062e8:	edd5 7a00 	vldr	s15, [r5]
 80062ec:	ed96 7a00 	vldr	s14, [r6]
 80062f0:	edd0 3a01 	vldr	s7, [r0, #4]
 80062f4:	ed96 4a01 	vldr	s8, [r6, #4]
 80062f8:	ed95 5a01 	vldr	s10, [r5, #4]
 80062fc:	9008      	str	r0, [sp, #32]
 80062fe:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006302:	18c7      	adds	r7, r0, r3
 8006304:	edd7 4a00 	vldr	s9, [r7]
 8006308:	ed97 3a01 	vldr	s6, [r7, #4]
 800630c:	9701      	str	r7, [sp, #4]
 800630e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006312:	462c      	mov	r4, r5
 8006314:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006318:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800631c:	ee16 ca90 	vmov	ip, s13
 8006320:	f844 cb08 	str.w	ip, [r4], #8
 8006324:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006328:	edd6 5a01 	vldr	s11, [r6, #4]
 800632c:	edd7 2a01 	vldr	s5, [r7, #4]
 8006330:	9404      	str	r4, [sp, #16]
 8006332:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006336:	ee74 3a27 	vadd.f32	s7, s8, s15
 800633a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800633e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006342:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006346:	0849      	lsrs	r1, r1, #1
 8006348:	f102 0e08 	add.w	lr, r2, #8
 800634c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006350:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006354:	9109      	str	r1, [sp, #36]	; 0x24
 8006356:	ee35 4a47 	vsub.f32	s8, s10, s14
 800635a:	f1a1 0902 	sub.w	r9, r1, #2
 800635e:	f8cd e00c 	str.w	lr, [sp, #12]
 8006362:	4631      	mov	r1, r6
 8006364:	ee13 ea90 	vmov	lr, s7
 8006368:	ee36 6a64 	vsub.f32	s12, s12, s9
 800636c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006370:	4604      	mov	r4, r0
 8006372:	edc5 5a01 	vstr	s11, [r5, #4]
 8006376:	ee37 7a05 	vadd.f32	s14, s14, s10
 800637a:	f841 eb08 	str.w	lr, [r1], #8
 800637e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006382:	ee16 ea10 	vmov	lr, s12
 8006386:	ed86 5a01 	vstr	s10, [r6, #4]
 800638a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800638e:	f844 eb08 	str.w	lr, [r4], #8
 8006392:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006396:	edc0 6a01 	vstr	s13, [r0, #4]
 800639a:	9405      	str	r4, [sp, #20]
 800639c:	4604      	mov	r4, r0
 800639e:	ee17 0a90 	vmov	r0, s15
 80063a2:	9106      	str	r1, [sp, #24]
 80063a4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80063a8:	f102 0110 	add.w	r1, r2, #16
 80063ac:	46bc      	mov	ip, r7
 80063ae:	9100      	str	r1, [sp, #0]
 80063b0:	f847 0b08 	str.w	r0, [r7], #8
 80063b4:	f102 0118 	add.w	r1, r2, #24
 80063b8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80063bc:	9102      	str	r1, [sp, #8]
 80063be:	ed8c 7a01 	vstr	s14, [ip, #4]
 80063c2:	9007      	str	r0, [sp, #28]
 80063c4:	f000 8134 	beq.w	8006630 <arm_cfft_radix8by4_f32+0x368>
 80063c8:	f102 0920 	add.w	r9, r2, #32
 80063cc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80063d0:	9a01      	ldr	r2, [sp, #4]
 80063d2:	f8dd a000 	ldr.w	sl, [sp]
 80063d6:	3b0c      	subs	r3, #12
 80063d8:	4683      	mov	fp, r0
 80063da:	4463      	add	r3, ip
 80063dc:	f105 0e10 	add.w	lr, r5, #16
 80063e0:	f1a4 010c 	sub.w	r1, r4, #12
 80063e4:	f104 0510 	add.w	r5, r4, #16
 80063e8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80063ec:	f1a2 040c 	sub.w	r4, r2, #12
 80063f0:	f106 0010 	add.w	r0, r6, #16
 80063f4:	3210      	adds	r2, #16
 80063f6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80063fa:	ed55 5a02 	vldr	s11, [r5, #-8]
 80063fe:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006402:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006406:	ed55 6a01 	vldr	s13, [r5, #-4]
 800640a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800640e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006412:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006416:	ee35 4a25 	vadd.f32	s8, s10, s11
 800641a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800641e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006422:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006426:	ee37 7a21 	vadd.f32	s14, s14, s3
 800642a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800642e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006432:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006436:	ed52 6a01 	vldr	s13, [r2, #-4]
 800643a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800643e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006442:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006446:	ee70 3a67 	vsub.f32	s7, s0, s15
 800644a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800644e:	ed94 7a02 	vldr	s14, [r4, #8]
 8006452:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006456:	ed91 ba02 	vldr	s22, [r1, #8]
 800645a:	edd3 9a02 	vldr	s19, [r3, #8]
 800645e:	edd4 2a01 	vldr	s5, [r4, #4]
 8006462:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006466:	ed93 5a01 	vldr	s10, [r3, #4]
 800646a:	edd1 0a01 	vldr	s1, [r1, #4]
 800646e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006472:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006476:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800647a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800647e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006482:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006486:	ed8c 7a02 	vstr	s14, [ip, #8]
 800648a:	ed91 7a01 	vldr	s14, [r1, #4]
 800648e:	edd3 8a01 	vldr	s17, [r3, #4]
 8006492:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006496:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800649a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800649e:	ee32 9a60 	vsub.f32	s18, s4, s1
 80064a2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80064a6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80064aa:	ed1a aa02 	vldr	s20, [sl, #-8]
 80064ae:	ee73 8a22 	vadd.f32	s17, s6, s5
 80064b2:	ee39 9a05 	vadd.f32	s18, s18, s10
 80064b6:	ee7a aac1 	vsub.f32	s21, s21, s2
 80064ba:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80064be:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80064c2:	ee69 ba07 	vmul.f32	s23, s18, s14
 80064c6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80064ca:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80064ce:	ee63 ca87 	vmul.f32	s25, s7, s14
 80064d2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80064d6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80064da:	ee68 8a87 	vmul.f32	s17, s17, s14
 80064de:	ee73 3aea 	vsub.f32	s7, s7, s21
 80064e2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80064e6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80064ea:	ee3b aaca 	vsub.f32	s20, s23, s20
 80064ee:	ee34 4a67 	vsub.f32	s8, s8, s15
 80064f2:	ee76 6acb 	vsub.f32	s13, s13, s22
 80064f6:	ee36 6a48 	vsub.f32	s12, s12, s16
 80064fa:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80064fe:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006502:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006506:	edc1 8a01 	vstr	s17, [r1, #4]
 800650a:	ed81 aa02 	vstr	s20, [r1, #8]
 800650e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006512:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006516:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800651a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800651e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006522:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006526:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800652a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800652e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006532:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006536:	ee24 4a26 	vmul.f32	s8, s8, s13
 800653a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800653e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006542:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006546:	ee36 6a44 	vsub.f32	s12, s12, s8
 800654a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800654e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006552:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006556:	ee75 6a60 	vsub.f32	s13, s10, s1
 800655a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800655e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006562:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006566:	ed05 6a01 	vstr	s12, [r5, #-4]
 800656a:	ed84 7a01 	vstr	s14, [r4, #4]
 800656e:	ed84 4a02 	vstr	s8, [r4, #8]
 8006572:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006576:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800657a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800657e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8006582:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006586:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800658a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800658e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006592:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006596:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800659a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800659e:	ee27 7a25 	vmul.f32	s14, s14, s11
 80065a2:	ee63 6a26 	vmul.f32	s13, s6, s13
 80065a6:	ee23 3a25 	vmul.f32	s6, s6, s11
 80065aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80065ae:	ee75 5a24 	vadd.f32	s11, s10, s9
 80065b2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80065b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80065ba:	f1bb 0b01 	subs.w	fp, fp, #1
 80065be:	ed42 5a02 	vstr	s11, [r2, #-8]
 80065c2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80065c6:	f10e 0e08 	add.w	lr, lr, #8
 80065ca:	ed83 3a02 	vstr	s6, [r3, #8]
 80065ce:	ed83 7a01 	vstr	s14, [r3, #4]
 80065d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80065d6:	f10a 0a08 	add.w	sl, sl, #8
 80065da:	f100 0008 	add.w	r0, r0, #8
 80065de:	f1a1 0108 	sub.w	r1, r1, #8
 80065e2:	f109 0910 	add.w	r9, r9, #16
 80065e6:	f105 0508 	add.w	r5, r5, #8
 80065ea:	f1a4 0408 	sub.w	r4, r4, #8
 80065ee:	f108 0818 	add.w	r8, r8, #24
 80065f2:	f102 0208 	add.w	r2, r2, #8
 80065f6:	f1a3 0308 	sub.w	r3, r3, #8
 80065fa:	f47f aefc 	bne.w	80063f6 <arm_cfft_radix8by4_f32+0x12e>
 80065fe:	9907      	ldr	r1, [sp, #28]
 8006600:	9800      	ldr	r0, [sp, #0]
 8006602:	00cb      	lsls	r3, r1, #3
 8006604:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006608:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800660c:	9100      	str	r1, [sp, #0]
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	4419      	add	r1, r3
 8006612:	9104      	str	r1, [sp, #16]
 8006614:	9903      	ldr	r1, [sp, #12]
 8006616:	4419      	add	r1, r3
 8006618:	9103      	str	r1, [sp, #12]
 800661a:	9906      	ldr	r1, [sp, #24]
 800661c:	4419      	add	r1, r3
 800661e:	9106      	str	r1, [sp, #24]
 8006620:	9905      	ldr	r1, [sp, #20]
 8006622:	441f      	add	r7, r3
 8006624:	4419      	add	r1, r3
 8006626:	9b02      	ldr	r3, [sp, #8]
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800662e:	9302      	str	r3, [sp, #8]
 8006630:	9904      	ldr	r1, [sp, #16]
 8006632:	9805      	ldr	r0, [sp, #20]
 8006634:	ed91 4a00 	vldr	s8, [r1]
 8006638:	edd0 6a00 	vldr	s13, [r0]
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	ed97 3a00 	vldr	s6, [r7]
 8006642:	edd3 7a00 	vldr	s15, [r3]
 8006646:	edd0 4a01 	vldr	s9, [r0, #4]
 800664a:	edd1 3a01 	vldr	s7, [r1, #4]
 800664e:	ed97 2a01 	vldr	s4, [r7, #4]
 8006652:	ed93 7a01 	vldr	s14, [r3, #4]
 8006656:	9a03      	ldr	r2, [sp, #12]
 8006658:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800665c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006660:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006664:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006668:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800666c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006670:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006674:	ed81 5a00 	vstr	s10, [r1]
 8006678:	ed93 5a01 	vldr	s10, [r3, #4]
 800667c:	edd7 4a01 	vldr	s9, [r7, #4]
 8006680:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006684:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006688:	ee35 5a24 	vadd.f32	s10, s10, s9
 800668c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006690:	ed81 5a01 	vstr	s10, [r1, #4]
 8006694:	edd2 1a00 	vldr	s3, [r2]
 8006698:	edd2 2a01 	vldr	s5, [r2, #4]
 800669c:	ee34 5a83 	vadd.f32	s10, s9, s6
 80066a0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80066a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80066a8:	ee64 4a21 	vmul.f32	s9, s8, s3
 80066ac:	ee24 4a22 	vmul.f32	s8, s8, s5
 80066b0:	ee65 2a22 	vmul.f32	s5, s10, s5
 80066b4:	ee25 5a21 	vmul.f32	s10, s10, s3
 80066b8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80066bc:	ee35 5a44 	vsub.f32	s10, s10, s8
 80066c0:	edc3 2a00 	vstr	s5, [r3]
 80066c4:	ed83 5a01 	vstr	s10, [r3, #4]
 80066c8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80066cc:	9b00      	ldr	r3, [sp, #0]
 80066ce:	ee36 6a43 	vsub.f32	s12, s12, s6
 80066d2:	ed93 4a01 	vldr	s8, [r3, #4]
 80066d6:	ed93 5a00 	vldr	s10, [r3]
 80066da:	9b02      	ldr	r3, [sp, #8]
 80066dc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80066e0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80066e4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80066e8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80066ec:	ee65 5a84 	vmul.f32	s11, s11, s8
 80066f0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80066f4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80066f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80066fc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006700:	ed80 6a01 	vstr	s12, [r0, #4]
 8006704:	edc0 5a00 	vstr	s11, [r0]
 8006708:	edd3 5a01 	vldr	s11, [r3, #4]
 800670c:	edd3 6a00 	vldr	s13, [r3]
 8006710:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006714:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006718:	ee27 6a26 	vmul.f32	s12, s14, s13
 800671c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006720:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006724:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006728:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800672c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006730:	ed87 7a01 	vstr	s14, [r7, #4]
 8006734:	edc7 7a00 	vstr	s15, [r7]
 8006738:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800673c:	4621      	mov	r1, r4
 800673e:	686a      	ldr	r2, [r5, #4]
 8006740:	2304      	movs	r3, #4
 8006742:	f000 faff 	bl	8006d44 <arm_radix8_butterfly_f32>
 8006746:	4630      	mov	r0, r6
 8006748:	4621      	mov	r1, r4
 800674a:	686a      	ldr	r2, [r5, #4]
 800674c:	2304      	movs	r3, #4
 800674e:	f000 faf9 	bl	8006d44 <arm_radix8_butterfly_f32>
 8006752:	9808      	ldr	r0, [sp, #32]
 8006754:	686a      	ldr	r2, [r5, #4]
 8006756:	4621      	mov	r1, r4
 8006758:	2304      	movs	r3, #4
 800675a:	f000 faf3 	bl	8006d44 <arm_radix8_butterfly_f32>
 800675e:	686a      	ldr	r2, [r5, #4]
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	4621      	mov	r1, r4
 8006764:	2304      	movs	r3, #4
 8006766:	b00d      	add	sp, #52	; 0x34
 8006768:	ecbd 8b0a 	vpop	{d8-d12}
 800676c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	f000 bae8 	b.w	8006d44 <arm_radix8_butterfly_f32>

08006774 <arm_cfft_f32>:
 8006774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006778:	2a01      	cmp	r2, #1
 800677a:	4606      	mov	r6, r0
 800677c:	4617      	mov	r7, r2
 800677e:	460c      	mov	r4, r1
 8006780:	4698      	mov	r8, r3
 8006782:	8805      	ldrh	r5, [r0, #0]
 8006784:	d056      	beq.n	8006834 <arm_cfft_f32+0xc0>
 8006786:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800678a:	d063      	beq.n	8006854 <arm_cfft_f32+0xe0>
 800678c:	d916      	bls.n	80067bc <arm_cfft_f32+0x48>
 800678e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006792:	d01a      	beq.n	80067ca <arm_cfft_f32+0x56>
 8006794:	d947      	bls.n	8006826 <arm_cfft_f32+0xb2>
 8006796:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800679a:	d05b      	beq.n	8006854 <arm_cfft_f32+0xe0>
 800679c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80067a0:	d105      	bne.n	80067ae <arm_cfft_f32+0x3a>
 80067a2:	2301      	movs	r3, #1
 80067a4:	6872      	ldr	r2, [r6, #4]
 80067a6:	4629      	mov	r1, r5
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 facb 	bl	8006d44 <arm_radix8_butterfly_f32>
 80067ae:	f1b8 0f00 	cmp.w	r8, #0
 80067b2:	d111      	bne.n	80067d8 <arm_cfft_f32+0x64>
 80067b4:	2f01      	cmp	r7, #1
 80067b6:	d016      	beq.n	80067e6 <arm_cfft_f32+0x72>
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067bc:	2d20      	cmp	r5, #32
 80067be:	d049      	beq.n	8006854 <arm_cfft_f32+0xe0>
 80067c0:	d935      	bls.n	800682e <arm_cfft_f32+0xba>
 80067c2:	2d40      	cmp	r5, #64	; 0x40
 80067c4:	d0ed      	beq.n	80067a2 <arm_cfft_f32+0x2e>
 80067c6:	2d80      	cmp	r5, #128	; 0x80
 80067c8:	d1f1      	bne.n	80067ae <arm_cfft_f32+0x3a>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff fcab 	bl	8006128 <arm_cfft_radix8by2_f32>
 80067d2:	f1b8 0f00 	cmp.w	r8, #0
 80067d6:	d0ed      	beq.n	80067b4 <arm_cfft_f32+0x40>
 80067d8:	68b2      	ldr	r2, [r6, #8]
 80067da:	89b1      	ldrh	r1, [r6, #12]
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 f841 	bl	8006864 <arm_bitreversal_32>
 80067e2:	2f01      	cmp	r7, #1
 80067e4:	d1e8      	bne.n	80067b8 <arm_cfft_f32+0x44>
 80067e6:	ee07 5a90 	vmov	s15, r5
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	d0de      	beq.n	80067b8 <arm_cfft_f32+0x44>
 80067fa:	f104 0108 	add.w	r1, r4, #8
 80067fe:	2300      	movs	r3, #0
 8006800:	3301      	adds	r3, #1
 8006802:	429d      	cmp	r5, r3
 8006804:	f101 0108 	add.w	r1, r1, #8
 8006808:	ed11 7a04 	vldr	s14, [r1, #-16]
 800680c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006810:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006814:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006818:	ed01 7a04 	vstr	s14, [r1, #-16]
 800681c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006820:	d1ee      	bne.n	8006800 <arm_cfft_f32+0x8c>
 8006822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006826:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800682a:	d0ba      	beq.n	80067a2 <arm_cfft_f32+0x2e>
 800682c:	e7bf      	b.n	80067ae <arm_cfft_f32+0x3a>
 800682e:	2d10      	cmp	r5, #16
 8006830:	d0cb      	beq.n	80067ca <arm_cfft_f32+0x56>
 8006832:	e7bc      	b.n	80067ae <arm_cfft_f32+0x3a>
 8006834:	b19d      	cbz	r5, 800685e <arm_cfft_f32+0xea>
 8006836:	f101 030c 	add.w	r3, r1, #12
 800683a:	2200      	movs	r2, #0
 800683c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006840:	3201      	adds	r2, #1
 8006842:	eef1 7a67 	vneg.f32	s15, s15
 8006846:	4295      	cmp	r5, r2
 8006848:	ed43 7a02 	vstr	s15, [r3, #-8]
 800684c:	f103 0308 	add.w	r3, r3, #8
 8006850:	d1f4      	bne.n	800683c <arm_cfft_f32+0xc8>
 8006852:	e798      	b.n	8006786 <arm_cfft_f32+0x12>
 8006854:	4621      	mov	r1, r4
 8006856:	4630      	mov	r0, r6
 8006858:	f7ff fd36 	bl	80062c8 <arm_cfft_radix8by4_f32>
 800685c:	e7a7      	b.n	80067ae <arm_cfft_f32+0x3a>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0aa      	beq.n	80067b8 <arm_cfft_f32+0x44>
 8006862:	e7b9      	b.n	80067d8 <arm_cfft_f32+0x64>

08006864 <arm_bitreversal_32>:
 8006864:	b1e9      	cbz	r1, 80068a2 <arm_bitreversal_32+0x3e>
 8006866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006868:	2500      	movs	r5, #0
 800686a:	f102 0e02 	add.w	lr, r2, #2
 800686e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006872:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006876:	08a4      	lsrs	r4, r4, #2
 8006878:	089b      	lsrs	r3, r3, #2
 800687a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800687e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006882:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006886:	00a6      	lsls	r6, r4, #2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800688e:	3304      	adds	r3, #4
 8006890:	1d34      	adds	r4, r6, #4
 8006892:	3502      	adds	r5, #2
 8006894:	58c6      	ldr	r6, [r0, r3]
 8006896:	5907      	ldr	r7, [r0, r4]
 8006898:	50c7      	str	r7, [r0, r3]
 800689a:	428d      	cmp	r5, r1
 800689c:	5106      	str	r6, [r0, r4]
 800689e:	d3e6      	bcc.n	800686e <arm_bitreversal_32+0xa>
 80068a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a2:	4770      	bx	lr

080068a4 <arm_cmplx_mag_f32>:
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	ed2d 8b02 	vpush	{d8}
 80068ac:	0897      	lsrs	r7, r2, #2
 80068ae:	b084      	sub	sp, #16
 80068b0:	d077      	beq.n	80069a2 <arm_cmplx_mag_f32+0xfe>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	f100 0420 	add.w	r4, r0, #32
 80068ba:	f101 0510 	add.w	r5, r1, #16
 80068be:	463e      	mov	r6, r7
 80068c0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80068c4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80068c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80068cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80068d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80068d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068dc:	f2c0 80c5 	blt.w	8006a6a <arm_cmplx_mag_f32+0x1c6>
 80068e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80068ec:	f100 80cb 	bmi.w	8006a86 <arm_cmplx_mag_f32+0x1e2>
 80068f0:	ed05 8a04 	vstr	s16, [r5, #-16]
 80068f4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80068f8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80068fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006900:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006904:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006908:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	f2c0 80a8 	blt.w	8006a64 <arm_cmplx_mag_f32+0x1c0>
 8006914:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006920:	f100 80a8 	bmi.w	8006a74 <arm_cmplx_mag_f32+0x1d0>
 8006924:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006928:	ed14 0a04 	vldr	s0, [r4, #-16]
 800692c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006930:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006934:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006938:	ee30 0a27 	vadd.f32	s0, s0, s15
 800693c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006944:	f2c0 808b 	blt.w	8006a5e <arm_cmplx_mag_f32+0x1ba>
 8006948:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800694c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006950:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006954:	f100 80a9 	bmi.w	8006aaa <arm_cmplx_mag_f32+0x206>
 8006958:	ed05 8a02 	vstr	s16, [r5, #-8]
 800695c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006960:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006964:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800696c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006970:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	db6e      	blt.n	8006a58 <arm_cmplx_mag_f32+0x1b4>
 800697a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800697e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006982:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006986:	f100 8087 	bmi.w	8006a98 <arm_cmplx_mag_f32+0x1f4>
 800698a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800698e:	3e01      	subs	r6, #1
 8006990:	f104 0420 	add.w	r4, r4, #32
 8006994:	f105 0510 	add.w	r5, r5, #16
 8006998:	d192      	bne.n	80068c0 <arm_cmplx_mag_f32+0x1c>
 800699a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800699e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80069a2:	f012 0203 	ands.w	r2, r2, #3
 80069a6:	d052      	beq.n	8006a4e <arm_cmplx_mag_f32+0x1aa>
 80069a8:	ed90 0a00 	vldr	s0, [r0]
 80069ac:	edd0 7a01 	vldr	s15, [r0, #4]
 80069b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80069b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069b8:	2300      	movs	r3, #0
 80069ba:	ee37 0a80 	vadd.f32	s0, s15, s0
 80069be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c6:	bfb8      	it	lt
 80069c8:	600b      	strlt	r3, [r1, #0]
 80069ca:	db08      	blt.n	80069de <arm_cmplx_mag_f32+0x13a>
 80069cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80069d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80069d8:	d479      	bmi.n	8006ace <arm_cmplx_mag_f32+0x22a>
 80069da:	ed81 8a00 	vstr	s16, [r1]
 80069de:	3a01      	subs	r2, #1
 80069e0:	d035      	beq.n	8006a4e <arm_cmplx_mag_f32+0x1aa>
 80069e2:	ed90 0a02 	vldr	s0, [r0, #8]
 80069e6:	edd0 7a03 	vldr	s15, [r0, #12]
 80069ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 80069ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069f2:	2300      	movs	r3, #0
 80069f4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80069f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a00:	bfb8      	it	lt
 8006a02:	604b      	strlt	r3, [r1, #4]
 8006a04:	db08      	blt.n	8006a18 <arm_cmplx_mag_f32+0x174>
 8006a06:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006a12:	d453      	bmi.n	8006abc <arm_cmplx_mag_f32+0x218>
 8006a14:	ed81 8a01 	vstr	s16, [r1, #4]
 8006a18:	2a01      	cmp	r2, #1
 8006a1a:	d018      	beq.n	8006a4e <arm_cmplx_mag_f32+0x1aa>
 8006a1c:	ed90 0a04 	vldr	s0, [r0, #16]
 8006a20:	edd0 7a05 	vldr	s15, [r0, #20]
 8006a24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006a28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3a:	db19      	blt.n	8006a70 <arm_cmplx_mag_f32+0x1cc>
 8006a3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006a48:	d44a      	bmi.n	8006ae0 <arm_cmplx_mag_f32+0x23c>
 8006a4a:	ed81 8a02 	vstr	s16, [r1, #8]
 8006a4e:	b004      	add	sp, #16
 8006a50:	ecbd 8b02 	vpop	{d8}
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a58:	f845 8c04 	str.w	r8, [r5, #-4]
 8006a5c:	e797      	b.n	800698e <arm_cmplx_mag_f32+0xea>
 8006a5e:	f845 8c08 	str.w	r8, [r5, #-8]
 8006a62:	e77b      	b.n	800695c <arm_cmplx_mag_f32+0xb8>
 8006a64:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006a68:	e75e      	b.n	8006928 <arm_cmplx_mag_f32+0x84>
 8006a6a:	f845 8c10 	str.w	r8, [r5, #-16]
 8006a6e:	e741      	b.n	80068f4 <arm_cmplx_mag_f32+0x50>
 8006a70:	608b      	str	r3, [r1, #8]
 8006a72:	e7ec      	b.n	8006a4e <arm_cmplx_mag_f32+0x1aa>
 8006a74:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006a78:	9001      	str	r0, [sp, #4]
 8006a7a:	f003 f967 	bl	8009d4c <sqrtf>
 8006a7e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006a82:	9801      	ldr	r0, [sp, #4]
 8006a84:	e74e      	b.n	8006924 <arm_cmplx_mag_f32+0x80>
 8006a86:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006a8a:	9001      	str	r0, [sp, #4]
 8006a8c:	f003 f95e 	bl	8009d4c <sqrtf>
 8006a90:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006a94:	9801      	ldr	r0, [sp, #4]
 8006a96:	e72b      	b.n	80068f0 <arm_cmplx_mag_f32+0x4c>
 8006a98:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006a9c:	9001      	str	r0, [sp, #4]
 8006a9e:	f003 f955 	bl	8009d4c <sqrtf>
 8006aa2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006aa6:	9801      	ldr	r0, [sp, #4]
 8006aa8:	e76f      	b.n	800698a <arm_cmplx_mag_f32+0xe6>
 8006aaa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006aae:	9001      	str	r0, [sp, #4]
 8006ab0:	f003 f94c 	bl	8009d4c <sqrtf>
 8006ab4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006ab8:	9801      	ldr	r0, [sp, #4]
 8006aba:	e74d      	b.n	8006958 <arm_cmplx_mag_f32+0xb4>
 8006abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	f003 f943 	bl	8009d4c <sqrtf>
 8006ac6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006aca:	9903      	ldr	r1, [sp, #12]
 8006acc:	e7a2      	b.n	8006a14 <arm_cmplx_mag_f32+0x170>
 8006ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad2:	9201      	str	r2, [sp, #4]
 8006ad4:	f003 f93a 	bl	8009d4c <sqrtf>
 8006ad8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006adc:	9903      	ldr	r1, [sp, #12]
 8006ade:	e77c      	b.n	80069da <arm_cmplx_mag_f32+0x136>
 8006ae0:	9101      	str	r1, [sp, #4]
 8006ae2:	f003 f933 	bl	8009d4c <sqrtf>
 8006ae6:	9901      	ldr	r1, [sp, #4]
 8006ae8:	e7af      	b.n	8006a4a <arm_cmplx_mag_f32+0x1a6>
 8006aea:	bf00      	nop

08006aec <arm_cos_f32>:
 8006aec:	eddf 7a21 	vldr	s15, [pc, #132]	; 8006b74 <arm_cos_f32+0x88>
 8006af0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006af4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006af8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006afc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006b08:	d504      	bpl.n	8006b14 <arm_cos_f32+0x28>
 8006b0a:	ee17 3a90 	vmov	r3, s15
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b18:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006b78 <arm_cos_f32+0x8c>
 8006b1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b20:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006b24:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006b28:	ee17 3a90 	vmov	r3, s15
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b32:	d21a      	bcs.n	8006b6a <arm_cos_f32+0x7e>
 8006b34:	ee07 3a90 	vmov	s15, r3
 8006b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3c:	1c59      	adds	r1, r3, #1
 8006b3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b42:	4a0e      	ldr	r2, [pc, #56]	; (8006b7c <arm_cos_f32+0x90>)
 8006b44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006b50:	ed93 7a00 	vldr	s14, [r3]
 8006b54:	edd2 6a00 	vldr	s13, [r2]
 8006b58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006b5c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b64:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006b68:	4770      	bx	lr
 8006b6a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006b6e:	2101      	movs	r1, #1
 8006b70:	2300      	movs	r3, #0
 8006b72:	e7e6      	b.n	8006b42 <arm_cos_f32+0x56>
 8006b74:	3e22f983 	.word	0x3e22f983
 8006b78:	44000000 	.word	0x44000000
 8006b7c:	0800d63c 	.word	0x0800d63c

08006b80 <arm_scale_f32>:
 8006b80:	b470      	push	{r4, r5, r6}
 8006b82:	0896      	lsrs	r6, r2, #2
 8006b84:	d025      	beq.n	8006bd2 <arm_scale_f32+0x52>
 8006b86:	f100 0410 	add.w	r4, r0, #16
 8006b8a:	f101 0310 	add.w	r3, r1, #16
 8006b8e:	4635      	mov	r5, r6
 8006b90:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006b94:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006b98:	3d01      	subs	r5, #1
 8006b9a:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006b9e:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006ba2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006ba6:	f104 0410 	add.w	r4, r4, #16
 8006baa:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006bae:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8006bb2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006bb6:	f103 0310 	add.w	r3, r3, #16
 8006bba:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006bbe:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006bc2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006bc6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006bca:	d1e1      	bne.n	8006b90 <arm_scale_f32+0x10>
 8006bcc:	0136      	lsls	r6, r6, #4
 8006bce:	4430      	add	r0, r6
 8006bd0:	4431      	add	r1, r6
 8006bd2:	f012 0203 	ands.w	r2, r2, #3
 8006bd6:	d015      	beq.n	8006c04 <arm_scale_f32+0x84>
 8006bd8:	edd0 7a00 	vldr	s15, [r0]
 8006bdc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006be0:	3a01      	subs	r2, #1
 8006be2:	edc1 7a00 	vstr	s15, [r1]
 8006be6:	d00d      	beq.n	8006c04 <arm_scale_f32+0x84>
 8006be8:	edd0 7a01 	vldr	s15, [r0, #4]
 8006bec:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006bf0:	2a01      	cmp	r2, #1
 8006bf2:	edc1 7a01 	vstr	s15, [r1, #4]
 8006bf6:	d005      	beq.n	8006c04 <arm_scale_f32+0x84>
 8006bf8:	edd0 7a02 	vldr	s15, [r0, #8]
 8006bfc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006c00:	ed81 0a02 	vstr	s0, [r1, #8]
 8006c04:	bc70      	pop	{r4, r5, r6}
 8006c06:	4770      	bx	lr

08006c08 <arm_offset_f32>:
 8006c08:	b470      	push	{r4, r5, r6}
 8006c0a:	0896      	lsrs	r6, r2, #2
 8006c0c:	d025      	beq.n	8006c5a <arm_offset_f32+0x52>
 8006c0e:	f100 0410 	add.w	r4, r0, #16
 8006c12:	f101 0310 	add.w	r3, r1, #16
 8006c16:	4635      	mov	r5, r6
 8006c18:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006c1c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c20:	3d01      	subs	r5, #1
 8006c22:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006c26:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006c2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c2e:	f104 0410 	add.w	r4, r4, #16
 8006c32:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006c36:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8006c3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c3e:	f103 0310 	add.w	r3, r3, #16
 8006c42:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006c46:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006c4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c4e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006c52:	d1e1      	bne.n	8006c18 <arm_offset_f32+0x10>
 8006c54:	0136      	lsls	r6, r6, #4
 8006c56:	4430      	add	r0, r6
 8006c58:	4431      	add	r1, r6
 8006c5a:	f012 0203 	ands.w	r2, r2, #3
 8006c5e:	d015      	beq.n	8006c8c <arm_offset_f32+0x84>
 8006c60:	edd0 7a00 	vldr	s15, [r0]
 8006c64:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	edc1 7a00 	vstr	s15, [r1]
 8006c6e:	d00d      	beq.n	8006c8c <arm_offset_f32+0x84>
 8006c70:	edd0 7a01 	vldr	s15, [r0, #4]
 8006c74:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c78:	2a01      	cmp	r2, #1
 8006c7a:	edc1 7a01 	vstr	s15, [r1, #4]
 8006c7e:	d005      	beq.n	8006c8c <arm_offset_f32+0x84>
 8006c80:	edd0 7a02 	vldr	s15, [r0, #8]
 8006c84:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006c88:	ed81 0a02 	vstr	s0, [r1, #8]
 8006c8c:	bc70      	pop	{r4, r5, r6}
 8006c8e:	4770      	bx	lr

08006c90 <arm_mult_f32>:
 8006c90:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8006c94:	b4f0      	push	{r4, r5, r6, r7}
 8006c96:	d033      	beq.n	8006d00 <arm_mult_f32+0x70>
 8006c98:	f100 0610 	add.w	r6, r0, #16
 8006c9c:	f101 0510 	add.w	r5, r1, #16
 8006ca0:	f102 0410 	add.w	r4, r2, #16
 8006ca4:	4667      	mov	r7, ip
 8006ca6:	ed15 7a04 	vldr	s14, [r5, #-16]
 8006caa:	ed56 7a04 	vldr	s15, [r6, #-16]
 8006cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cb2:	3f01      	subs	r7, #1
 8006cb4:	ed44 7a04 	vstr	s15, [r4, #-16]
 8006cb8:	ed15 7a03 	vldr	s14, [r5, #-12]
 8006cbc:	ed56 7a03 	vldr	s15, [r6, #-12]
 8006cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc4:	f106 0610 	add.w	r6, r6, #16
 8006cc8:	ed44 7a03 	vstr	s15, [r4, #-12]
 8006ccc:	ed15 7a02 	vldr	s14, [r5, #-8]
 8006cd0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8006cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cd8:	f105 0510 	add.w	r5, r5, #16
 8006cdc:	ed44 7a02 	vstr	s15, [r4, #-8]
 8006ce0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006ce4:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8006ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cec:	f104 0410 	add.w	r4, r4, #16
 8006cf0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8006cf4:	d1d7      	bne.n	8006ca6 <arm_mult_f32+0x16>
 8006cf6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8006cfa:	4420      	add	r0, r4
 8006cfc:	4421      	add	r1, r4
 8006cfe:	4422      	add	r2, r4
 8006d00:	f013 0303 	ands.w	r3, r3, #3
 8006d04:	d01b      	beq.n	8006d3e <arm_mult_f32+0xae>
 8006d06:	edd1 7a00 	vldr	s15, [r1]
 8006d0a:	ed90 7a00 	vldr	s14, [r0]
 8006d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d12:	3b01      	subs	r3, #1
 8006d14:	edc2 7a00 	vstr	s15, [r2]
 8006d18:	d011      	beq.n	8006d3e <arm_mult_f32+0xae>
 8006d1a:	edd0 7a01 	vldr	s15, [r0, #4]
 8006d1e:	ed91 7a01 	vldr	s14, [r1, #4]
 8006d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	edc2 7a01 	vstr	s15, [r2, #4]
 8006d2c:	d007      	beq.n	8006d3e <arm_mult_f32+0xae>
 8006d2e:	edd0 7a02 	vldr	s15, [r0, #8]
 8006d32:	ed91 7a02 	vldr	s14, [r1, #8]
 8006d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d3a:	edc2 7a02 	vstr	s15, [r2, #8]
 8006d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop

08006d44 <arm_radix8_butterfly_f32>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	ed2d 8b10 	vpush	{d8-d15}
 8006d4c:	b095      	sub	sp, #84	; 0x54
 8006d4e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8006d52:	4603      	mov	r3, r0
 8006d54:	3304      	adds	r3, #4
 8006d56:	ed9f bab9 	vldr	s22, [pc, #740]	; 800703c <arm_radix8_butterfly_f32+0x2f8>
 8006d5a:	9012      	str	r0, [sp, #72]	; 0x48
 8006d5c:	468b      	mov	fp, r1
 8006d5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d60:	4689      	mov	r9, r1
 8006d62:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d68:	960f      	str	r6, [sp, #60]	; 0x3c
 8006d6a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006d6e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006d72:	eb03 0508 	add.w	r5, r3, r8
 8006d76:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006d7a:	eb05 040e 	add.w	r4, r5, lr
 8006d7e:	0137      	lsls	r7, r6, #4
 8006d80:	eba6 030a 	sub.w	r3, r6, sl
 8006d84:	eb04 000e 	add.w	r0, r4, lr
 8006d88:	44b2      	add	sl, r6
 8006d8a:	1d3a      	adds	r2, r7, #4
 8006d8c:	9702      	str	r7, [sp, #8]
 8006d8e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006d92:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006d96:	ebae 0c06 	sub.w	ip, lr, r6
 8006d9a:	9703      	str	r7, [sp, #12]
 8006d9c:	eb03 0708 	add.w	r7, r3, r8
 8006da0:	9701      	str	r7, [sp, #4]
 8006da2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006da6:	9706      	str	r7, [sp, #24]
 8006da8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006daa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006dae:	f10e 0104 	add.w	r1, lr, #4
 8006db2:	4439      	add	r1, r7
 8006db4:	443a      	add	r2, r7
 8006db6:	0137      	lsls	r7, r6, #4
 8006db8:	00f6      	lsls	r6, r6, #3
 8006dba:	9704      	str	r7, [sp, #16]
 8006dbc:	9605      	str	r6, [sp, #20]
 8006dbe:	9f01      	ldr	r7, [sp, #4]
 8006dc0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006dc2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006dc6:	f04f 0c00 	mov.w	ip, #0
 8006dca:	edd4 6a00 	vldr	s13, [r4]
 8006dce:	edd7 1a00 	vldr	s3, [r7]
 8006dd2:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006dd6:	edd5 5a00 	vldr	s11, [r5]
 8006dda:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006dde:	ed90 6a00 	vldr	s12, [r0]
 8006de2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006de6:	ed93 3a00 	vldr	s6, [r3]
 8006dea:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006dee:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006df2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006df6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006dfa:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006dfe:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006e02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e06:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006e0a:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006e0e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006e12:	ed85 4a00 	vstr	s8, [r5]
 8006e16:	edd1 6a00 	vldr	s13, [r1]
 8006e1a:	ed94 9a01 	vldr	s18, [r4, #4]
 8006e1e:	edd3 2a01 	vldr	s5, [r3, #4]
 8006e22:	edd7 8a01 	vldr	s17, [r7, #4]
 8006e26:	edd6 0a00 	vldr	s1, [r6]
 8006e2a:	edd5 3a01 	vldr	s7, [r5, #4]
 8006e2e:	ed90 8a01 	vldr	s16, [r0, #4]
 8006e32:	ed92 7a00 	vldr	s14, [r2]
 8006e36:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006e3a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006e3e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006e42:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006e46:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006e4a:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006e4e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006e52:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006e56:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006e5a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006e5e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006e62:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006e66:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006e6a:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006e6e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006e72:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006e76:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006e7a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006e7e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006e82:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006e86:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006e8a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006e8e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006e92:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006e96:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006e9a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006e9e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006ea2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006ea6:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006eaa:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006eae:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006eb2:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006eb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006eba:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006ebe:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006ec2:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006ec6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006eca:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006ece:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006ed2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006ed6:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006eda:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006ede:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006ee2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006ee6:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006eea:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006eee:	44dc      	add	ip, fp
 8006ef0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006ef4:	45e1      	cmp	r9, ip
 8006ef6:	ed86 8a00 	vstr	s16, [r6]
 8006efa:	ed85 2a01 	vstr	s4, [r5, #4]
 8006efe:	4456      	add	r6, sl
 8006f00:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006f04:	4455      	add	r5, sl
 8006f06:	edc0 6a00 	vstr	s13, [r0]
 8006f0a:	ed82 1a00 	vstr	s2, [r2]
 8006f0e:	ed80 5a01 	vstr	s10, [r0, #4]
 8006f12:	4452      	add	r2, sl
 8006f14:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006f18:	4450      	add	r0, sl
 8006f1a:	edc7 2a00 	vstr	s5, [r7]
 8006f1e:	edc4 4a00 	vstr	s9, [r4]
 8006f22:	ed83 7a00 	vstr	s14, [r3]
 8006f26:	edc1 5a00 	vstr	s11, [r1]
 8006f2a:	edc7 3a01 	vstr	s7, [r7, #4]
 8006f2e:	4451      	add	r1, sl
 8006f30:	ed84 6a01 	vstr	s12, [r4, #4]
 8006f34:	4457      	add	r7, sl
 8006f36:	edc3 7a01 	vstr	s15, [r3, #4]
 8006f3a:	4454      	add	r4, sl
 8006f3c:	4453      	add	r3, sl
 8006f3e:	f63f af44 	bhi.w	8006dca <arm_radix8_butterfly_f32+0x86>
 8006f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f44:	2b07      	cmp	r3, #7
 8006f46:	f240 81b7 	bls.w	80072b8 <arm_radix8_butterfly_f32+0x574>
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f50:	9e05      	ldr	r6, [sp, #20]
 8006f52:	9a04      	ldr	r2, [sp, #16]
 8006f54:	f103 0c08 	add.w	ip, r3, #8
 8006f58:	9b02      	ldr	r3, [sp, #8]
 8006f5a:	3108      	adds	r1, #8
 8006f5c:	f108 0808 	add.w	r8, r8, #8
 8006f60:	1841      	adds	r1, r0, r1
 8006f62:	3608      	adds	r6, #8
 8006f64:	330c      	adds	r3, #12
 8006f66:	4604      	mov	r4, r0
 8006f68:	4444      	add	r4, r8
 8006f6a:	18c3      	adds	r3, r0, r3
 8006f6c:	9109      	str	r1, [sp, #36]	; 0x24
 8006f6e:	1981      	adds	r1, r0, r6
 8006f70:	f10e 0e08 	add.w	lr, lr, #8
 8006f74:	3208      	adds	r2, #8
 8006f76:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f78:	9107      	str	r1, [sp, #28]
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	f100 030c 	add.w	r3, r0, #12
 8006f84:	4474      	add	r4, lr
 8006f86:	f04f 0801 	mov.w	r8, #1
 8006f8a:	1882      	adds	r2, r0, r2
 8006f8c:	4461      	add	r1, ip
 8006f8e:	9305      	str	r3, [sp, #20]
 8006f90:	464b      	mov	r3, r9
 8006f92:	940a      	str	r4, [sp, #40]	; 0x28
 8006f94:	46c1      	mov	r9, r8
 8006f96:	9208      	str	r2, [sp, #32]
 8006f98:	46d8      	mov	r8, fp
 8006f9a:	9106      	str	r1, [sp, #24]
 8006f9c:	f04f 0e00 	mov.w	lr, #0
 8006fa0:	469b      	mov	fp, r3
 8006fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fa6:	449e      	add	lr, r3
 8006fa8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006fac:	441a      	add	r2, r3
 8006fae:	920e      	str	r2, [sp, #56]	; 0x38
 8006fb0:	441a      	add	r2, r3
 8006fb2:	18d4      	adds	r4, r2, r3
 8006fb4:	18e5      	adds	r5, r4, r3
 8006fb6:	18ee      	adds	r6, r5, r3
 8006fb8:	18f7      	adds	r7, r6, r3
 8006fba:	eb07 0c03 	add.w	ip, r7, r3
 8006fbe:	920d      	str	r2, [sp, #52]	; 0x34
 8006fc0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006fc4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006fc8:	910c      	str	r1, [sp, #48]	; 0x30
 8006fca:	4419      	add	r1, r3
 8006fcc:	9103      	str	r1, [sp, #12]
 8006fce:	4419      	add	r1, r3
 8006fd0:	18ca      	adds	r2, r1, r3
 8006fd2:	9202      	str	r2, [sp, #8]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	18d0      	adds	r0, r2, r3
 8006fd8:	ed92 ea01 	vldr	s28, [r2, #4]
 8006fdc:	9a02      	ldr	r2, [sp, #8]
 8006fde:	edd4 7a00 	vldr	s15, [r4]
 8006fe2:	edd2 da01 	vldr	s27, [r2, #4]
 8006fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fe8:	ed91 da01 	vldr	s26, [r1, #4]
 8006fec:	ed92 ca01 	vldr	s24, [r2, #4]
 8006ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ff2:	9903      	ldr	r1, [sp, #12]
 8006ff4:	edcd 7a03 	vstr	s15, [sp, #12]
 8006ff8:	edd2 7a00 	vldr	s15, [r2]
 8006ffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ffe:	edcd 7a02 	vstr	s15, [sp, #8]
 8007002:	edd2 7a00 	vldr	s15, [r2]
 8007006:	edd0 ea01 	vldr	s29, [r0, #4]
 800700a:	edd1 ca01 	vldr	s25, [r1, #4]
 800700e:	eddc ba00 	vldr	s23, [ip]
 8007012:	edd7 aa00 	vldr	s21, [r7]
 8007016:	ed96 aa00 	vldr	s20, [r6]
 800701a:	edd5 9a00 	vldr	s19, [r5]
 800701e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007022:	4403      	add	r3, r0
 8007024:	ed93 fa01 	vldr	s30, [r3, #4]
 8007028:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800702c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8007030:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007038:	46cc      	mov	ip, r9
 800703a:	e001      	b.n	8007040 <arm_radix8_butterfly_f32+0x2fc>
 800703c:	3f3504f3 	.word	0x3f3504f3
 8007040:	ed91 6a00 	vldr	s12, [r1]
 8007044:	ed93 5a00 	vldr	s10, [r3]
 8007048:	edd0 fa00 	vldr	s31, [r0]
 800704c:	edd4 7a00 	vldr	s15, [r4]
 8007050:	ed95 7a00 	vldr	s14, [r5]
 8007054:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007058:	ed17 3a01 	vldr	s6, [r7, #-4]
 800705c:	ed92 2a00 	vldr	s4, [r2]
 8007060:	ed96 0a00 	vldr	s0, [r6]
 8007064:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007068:	ee32 1a06 	vadd.f32	s2, s4, s12
 800706c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007070:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007074:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007078:	ee71 6a24 	vadd.f32	s13, s2, s9
 800707c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007080:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007088:	ed06 6a01 	vstr	s12, [r6, #-4]
 800708c:	edd4 8a01 	vldr	s17, [r4, #4]
 8007090:	ed92 9a01 	vldr	s18, [r2, #4]
 8007094:	edd7 0a00 	vldr	s1, [r7]
 8007098:	edd1 2a01 	vldr	s5, [r1, #4]
 800709c:	ed95 7a01 	vldr	s14, [r5, #4]
 80070a0:	ed93 6a01 	vldr	s12, [r3, #4]
 80070a4:	edd0 5a01 	vldr	s11, [r0, #4]
 80070a8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80070ac:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80070b0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80070b4:	ee78 fac7 	vsub.f32	s31, s17, s14
 80070b8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80070bc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80070c0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80070c4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80070c8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80070cc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80070d0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80070d4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80070d8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80070dc:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80070e0:	ee32 1a08 	vadd.f32	s2, s4, s16
 80070e4:	ee72 fa87 	vadd.f32	s31, s5, s14
 80070e8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80070ec:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80070f0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80070f4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80070f8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80070fc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007100:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007104:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8007108:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800710c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007110:	ee74 0a22 	vadd.f32	s1, s8, s5
 8007114:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007118:	ee74 2a62 	vsub.f32	s5, s8, s5
 800711c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007120:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007124:	ee73 8a09 	vadd.f32	s17, s6, s18
 8007128:	ee74 4a82 	vadd.f32	s9, s9, s4
 800712c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007130:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007134:	ee35 3a85 	vadd.f32	s6, s11, s10
 8007138:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800713c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007140:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007144:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007148:	ee30 7a68 	vsub.f32	s14, s0, s17
 800714c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007150:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007154:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007158:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800715c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007160:	eddd 1a02 	vldr	s3, [sp, #8]
 8007164:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007168:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800716c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007170:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007174:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007178:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800717c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007180:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007184:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007188:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800718c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007190:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007194:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007198:	ee22 2a08 	vmul.f32	s4, s4, s16
 800719c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80071a0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80071a4:	ee31 1a09 	vadd.f32	s2, s2, s18
 80071a8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80071ac:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80071b0:	ee74 0a60 	vsub.f32	s1, s8, s1
 80071b4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80071b8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80071bc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80071c0:	ee72 1a21 	vadd.f32	s3, s4, s3
 80071c4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80071c8:	ee38 2a89 	vadd.f32	s4, s17, s18
 80071cc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80071d0:	ee38 8a04 	vadd.f32	s16, s16, s8
 80071d4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80071d8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80071dc:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80071e0:	eddd 5a03 	vldr	s11, [sp, #12]
 80071e4:	edc6 fa00 	vstr	s31, [r6]
 80071e8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80071ec:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80071f0:	ee30 0a45 	vsub.f32	s0, s0, s10
 80071f4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80071f8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80071fc:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8007200:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007204:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007208:	ee25 6a86 	vmul.f32	s12, s11, s12
 800720c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8007210:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007214:	ee78 8a85 	vadd.f32	s17, s17, s10
 8007218:	ee36 6a67 	vsub.f32	s12, s12, s15
 800721c:	44c4      	add	ip, r8
 800721e:	45e3      	cmp	fp, ip
 8007220:	edc3 3a00 	vstr	s7, [r3]
 8007224:	edc3 6a01 	vstr	s13, [r3, #4]
 8007228:	4456      	add	r6, sl
 800722a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800722e:	edc7 0a00 	vstr	s1, [r7]
 8007232:	4453      	add	r3, sl
 8007234:	ed80 2a00 	vstr	s4, [r0]
 8007238:	edc0 2a01 	vstr	s5, [r0, #4]
 800723c:	4457      	add	r7, sl
 800723e:	edc2 1a00 	vstr	s3, [r2]
 8007242:	ed82 7a01 	vstr	s14, [r2, #4]
 8007246:	4450      	add	r0, sl
 8007248:	ed85 8a00 	vstr	s16, [r5]
 800724c:	ed85 0a01 	vstr	s0, [r5, #4]
 8007250:	4452      	add	r2, sl
 8007252:	edc1 4a00 	vstr	s9, [r1]
 8007256:	4455      	add	r5, sl
 8007258:	ed81 3a01 	vstr	s6, [r1, #4]
 800725c:	edc4 8a00 	vstr	s17, [r4]
 8007260:	ed84 6a01 	vstr	s12, [r4, #4]
 8007264:	4451      	add	r1, sl
 8007266:	4454      	add	r4, sl
 8007268:	f63f aeea 	bhi.w	8007040 <arm_radix8_butterfly_f32+0x2fc>
 800726c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726e:	3308      	adds	r3, #8
 8007270:	930b      	str	r3, [sp, #44]	; 0x2c
 8007272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007274:	3308      	adds	r3, #8
 8007276:	930a      	str	r3, [sp, #40]	; 0x28
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	3308      	adds	r3, #8
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	9b08      	ldr	r3, [sp, #32]
 8007280:	3308      	adds	r3, #8
 8007282:	9308      	str	r3, [sp, #32]
 8007284:	9b07      	ldr	r3, [sp, #28]
 8007286:	3308      	adds	r3, #8
 8007288:	9307      	str	r3, [sp, #28]
 800728a:	9b06      	ldr	r3, [sp, #24]
 800728c:	3308      	adds	r3, #8
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	9b05      	ldr	r3, [sp, #20]
 8007292:	3308      	adds	r3, #8
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	3308      	adds	r3, #8
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729e:	f109 0901 	add.w	r9, r9, #1
 80072a2:	454b      	cmp	r3, r9
 80072a4:	f47f ae7d 	bne.w	8006fa2 <arm_radix8_butterfly_f32+0x25e>
 80072a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	46d9      	mov	r9, fp
 80072b0:	9310      	str	r3, [sp, #64]	; 0x40
 80072b2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80072b6:	e554      	b.n	8006d62 <arm_radix8_butterfly_f32+0x1e>
 80072b8:	b015      	add	sp, #84	; 0x54
 80072ba:	ecbd 8b10 	vpop	{d8-d15}
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	bf00      	nop

080072c4 <__cvt>:
 80072c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	ec55 4b10 	vmov	r4, r5, d0
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	460e      	mov	r6, r1
 80072d0:	4619      	mov	r1, r3
 80072d2:	462b      	mov	r3, r5
 80072d4:	bfbb      	ittet	lt
 80072d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072da:	461d      	movlt	r5, r3
 80072dc:	2300      	movge	r3, #0
 80072de:	232d      	movlt	r3, #45	; 0x2d
 80072e0:	700b      	strb	r3, [r1, #0]
 80072e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072e8:	4691      	mov	r9, r2
 80072ea:	f023 0820 	bic.w	r8, r3, #32
 80072ee:	bfbc      	itt	lt
 80072f0:	4622      	movlt	r2, r4
 80072f2:	4614      	movlt	r4, r2
 80072f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072f8:	d005      	beq.n	8007306 <__cvt+0x42>
 80072fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072fe:	d100      	bne.n	8007302 <__cvt+0x3e>
 8007300:	3601      	adds	r6, #1
 8007302:	2102      	movs	r1, #2
 8007304:	e000      	b.n	8007308 <__cvt+0x44>
 8007306:	2103      	movs	r1, #3
 8007308:	ab03      	add	r3, sp, #12
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	ab02      	add	r3, sp, #8
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	ec45 4b10 	vmov	d0, r4, r5
 8007314:	4653      	mov	r3, sl
 8007316:	4632      	mov	r2, r6
 8007318:	f000 ff36 	bl	8008188 <_dtoa_r>
 800731c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007320:	4607      	mov	r7, r0
 8007322:	d102      	bne.n	800732a <__cvt+0x66>
 8007324:	f019 0f01 	tst.w	r9, #1
 8007328:	d022      	beq.n	8007370 <__cvt+0xac>
 800732a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800732e:	eb07 0906 	add.w	r9, r7, r6
 8007332:	d110      	bne.n	8007356 <__cvt+0x92>
 8007334:	783b      	ldrb	r3, [r7, #0]
 8007336:	2b30      	cmp	r3, #48	; 0x30
 8007338:	d10a      	bne.n	8007350 <__cvt+0x8c>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007346:	b918      	cbnz	r0, 8007350 <__cvt+0x8c>
 8007348:	f1c6 0601 	rsb	r6, r6, #1
 800734c:	f8ca 6000 	str.w	r6, [sl]
 8007350:	f8da 3000 	ldr.w	r3, [sl]
 8007354:	4499      	add	r9, r3
 8007356:	2200      	movs	r2, #0
 8007358:	2300      	movs	r3, #0
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f9 fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007362:	b108      	cbz	r0, 8007368 <__cvt+0xa4>
 8007364:	f8cd 900c 	str.w	r9, [sp, #12]
 8007368:	2230      	movs	r2, #48	; 0x30
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	454b      	cmp	r3, r9
 800736e:	d307      	bcc.n	8007380 <__cvt+0xbc>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007374:	1bdb      	subs	r3, r3, r7
 8007376:	4638      	mov	r0, r7
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	b004      	add	sp, #16
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	1c59      	adds	r1, r3, #1
 8007382:	9103      	str	r1, [sp, #12]
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e7f0      	b.n	800736a <__cvt+0xa6>

08007388 <__exponent>:
 8007388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800738a:	4603      	mov	r3, r0
 800738c:	2900      	cmp	r1, #0
 800738e:	bfb8      	it	lt
 8007390:	4249      	neglt	r1, r1
 8007392:	f803 2b02 	strb.w	r2, [r3], #2
 8007396:	bfb4      	ite	lt
 8007398:	222d      	movlt	r2, #45	; 0x2d
 800739a:	222b      	movge	r2, #43	; 0x2b
 800739c:	2909      	cmp	r1, #9
 800739e:	7042      	strb	r2, [r0, #1]
 80073a0:	dd2a      	ble.n	80073f8 <__exponent+0x70>
 80073a2:	f10d 0207 	add.w	r2, sp, #7
 80073a6:	4617      	mov	r7, r2
 80073a8:	260a      	movs	r6, #10
 80073aa:	4694      	mov	ip, r2
 80073ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80073b0:	fb06 1415 	mls	r4, r6, r5, r1
 80073b4:	3430      	adds	r4, #48	; 0x30
 80073b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80073ba:	460c      	mov	r4, r1
 80073bc:	2c63      	cmp	r4, #99	; 0x63
 80073be:	f102 32ff 	add.w	r2, r2, #4294967295
 80073c2:	4629      	mov	r1, r5
 80073c4:	dcf1      	bgt.n	80073aa <__exponent+0x22>
 80073c6:	3130      	adds	r1, #48	; 0x30
 80073c8:	f1ac 0402 	sub.w	r4, ip, #2
 80073cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80073d0:	1c41      	adds	r1, r0, #1
 80073d2:	4622      	mov	r2, r4
 80073d4:	42ba      	cmp	r2, r7
 80073d6:	d30a      	bcc.n	80073ee <__exponent+0x66>
 80073d8:	f10d 0209 	add.w	r2, sp, #9
 80073dc:	eba2 020c 	sub.w	r2, r2, ip
 80073e0:	42bc      	cmp	r4, r7
 80073e2:	bf88      	it	hi
 80073e4:	2200      	movhi	r2, #0
 80073e6:	4413      	add	r3, r2
 80073e8:	1a18      	subs	r0, r3, r0
 80073ea:	b003      	add	sp, #12
 80073ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80073f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80073f6:	e7ed      	b.n	80073d4 <__exponent+0x4c>
 80073f8:	2330      	movs	r3, #48	; 0x30
 80073fa:	3130      	adds	r1, #48	; 0x30
 80073fc:	7083      	strb	r3, [r0, #2]
 80073fe:	70c1      	strb	r1, [r0, #3]
 8007400:	1d03      	adds	r3, r0, #4
 8007402:	e7f1      	b.n	80073e8 <__exponent+0x60>

08007404 <_printf_float>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	ed2d 8b02 	vpush	{d8}
 800740c:	b08d      	sub	sp, #52	; 0x34
 800740e:	460c      	mov	r4, r1
 8007410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007414:	4616      	mov	r6, r2
 8007416:	461f      	mov	r7, r3
 8007418:	4605      	mov	r5, r0
 800741a:	f000 fdb7 	bl	8007f8c <_localeconv_r>
 800741e:	f8d0 a000 	ldr.w	sl, [r0]
 8007422:	4650      	mov	r0, sl
 8007424:	f7f8 ff24 	bl	8000270 <strlen>
 8007428:	2300      	movs	r3, #0
 800742a:	930a      	str	r3, [sp, #40]	; 0x28
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	f8d8 3000 	ldr.w	r3, [r8]
 8007434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007438:	3307      	adds	r3, #7
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	f103 0208 	add.w	r2, r3, #8
 8007442:	f8c8 2000 	str.w	r2, [r8]
 8007446:	e9d3 8900 	ldrd	r8, r9, [r3]
 800744a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800744e:	9307      	str	r3, [sp, #28]
 8007450:	f8cd 8018 	str.w	r8, [sp, #24]
 8007454:	ee08 0a10 	vmov	s16, r0
 8007458:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800745c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007460:	4b9e      	ldr	r3, [pc, #632]	; (80076dc <_printf_float+0x2d8>)
 8007462:	f04f 32ff 	mov.w	r2, #4294967295
 8007466:	f7f9 fb61 	bl	8000b2c <__aeabi_dcmpun>
 800746a:	bb88      	cbnz	r0, 80074d0 <_printf_float+0xcc>
 800746c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007470:	4b9a      	ldr	r3, [pc, #616]	; (80076dc <_printf_float+0x2d8>)
 8007472:	f04f 32ff 	mov.w	r2, #4294967295
 8007476:	f7f9 fb3b 	bl	8000af0 <__aeabi_dcmple>
 800747a:	bb48      	cbnz	r0, 80074d0 <_printf_float+0xcc>
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	4640      	mov	r0, r8
 8007482:	4649      	mov	r1, r9
 8007484:	f7f9 fb2a 	bl	8000adc <__aeabi_dcmplt>
 8007488:	b110      	cbz	r0, 8007490 <_printf_float+0x8c>
 800748a:	232d      	movs	r3, #45	; 0x2d
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007490:	4a93      	ldr	r2, [pc, #588]	; (80076e0 <_printf_float+0x2dc>)
 8007492:	4b94      	ldr	r3, [pc, #592]	; (80076e4 <_printf_float+0x2e0>)
 8007494:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007498:	bf94      	ite	ls
 800749a:	4690      	movls	r8, r2
 800749c:	4698      	movhi	r8, r3
 800749e:	2303      	movs	r3, #3
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	9b05      	ldr	r3, [sp, #20]
 80074a4:	f023 0304 	bic.w	r3, r3, #4
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	9700      	str	r7, [sp, #0]
 80074b0:	4633      	mov	r3, r6
 80074b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80074b4:	4621      	mov	r1, r4
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f9da 	bl	8007870 <_printf_common>
 80074bc:	3001      	adds	r0, #1
 80074be:	f040 8090 	bne.w	80075e2 <_printf_float+0x1de>
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	b00d      	add	sp, #52	; 0x34
 80074c8:	ecbd 8b02 	vpop	{d8}
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7f9 fb28 	bl	8000b2c <__aeabi_dcmpun>
 80074dc:	b140      	cbz	r0, 80074f0 <_printf_float+0xec>
 80074de:	464b      	mov	r3, r9
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfbc      	itt	lt
 80074e4:	232d      	movlt	r3, #45	; 0x2d
 80074e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074ea:	4a7f      	ldr	r2, [pc, #508]	; (80076e8 <_printf_float+0x2e4>)
 80074ec:	4b7f      	ldr	r3, [pc, #508]	; (80076ec <_printf_float+0x2e8>)
 80074ee:	e7d1      	b.n	8007494 <_printf_float+0x90>
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074f6:	9206      	str	r2, [sp, #24]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	d13f      	bne.n	800757c <_printf_float+0x178>
 80074fc:	2306      	movs	r3, #6
 80074fe:	6063      	str	r3, [r4, #4]
 8007500:	9b05      	ldr	r3, [sp, #20]
 8007502:	6861      	ldr	r1, [r4, #4]
 8007504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007508:	2300      	movs	r3, #0
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	ab0a      	add	r3, sp, #40	; 0x28
 800750e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007512:	ab09      	add	r3, sp, #36	; 0x24
 8007514:	ec49 8b10 	vmov	d0, r8, r9
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007520:	4628      	mov	r0, r5
 8007522:	f7ff fecf 	bl	80072c4 <__cvt>
 8007526:	9b06      	ldr	r3, [sp, #24]
 8007528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800752a:	2b47      	cmp	r3, #71	; 0x47
 800752c:	4680      	mov	r8, r0
 800752e:	d108      	bne.n	8007542 <_printf_float+0x13e>
 8007530:	1cc8      	adds	r0, r1, #3
 8007532:	db02      	blt.n	800753a <_printf_float+0x136>
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	4299      	cmp	r1, r3
 8007538:	dd41      	ble.n	80075be <_printf_float+0x1ba>
 800753a:	f1ab 0302 	sub.w	r3, fp, #2
 800753e:	fa5f fb83 	uxtb.w	fp, r3
 8007542:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007546:	d820      	bhi.n	800758a <_printf_float+0x186>
 8007548:	3901      	subs	r1, #1
 800754a:	465a      	mov	r2, fp
 800754c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007550:	9109      	str	r1, [sp, #36]	; 0x24
 8007552:	f7ff ff19 	bl	8007388 <__exponent>
 8007556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007558:	1813      	adds	r3, r2, r0
 800755a:	2a01      	cmp	r2, #1
 800755c:	4681      	mov	r9, r0
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	dc02      	bgt.n	8007568 <_printf_float+0x164>
 8007562:	6822      	ldr	r2, [r4, #0]
 8007564:	07d2      	lsls	r2, r2, #31
 8007566:	d501      	bpl.n	800756c <_printf_float+0x168>
 8007568:	3301      	adds	r3, #1
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007570:	2b00      	cmp	r3, #0
 8007572:	d09c      	beq.n	80074ae <_printf_float+0xaa>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757a:	e798      	b.n	80074ae <_printf_float+0xaa>
 800757c:	9a06      	ldr	r2, [sp, #24]
 800757e:	2a47      	cmp	r2, #71	; 0x47
 8007580:	d1be      	bne.n	8007500 <_printf_float+0xfc>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1bc      	bne.n	8007500 <_printf_float+0xfc>
 8007586:	2301      	movs	r3, #1
 8007588:	e7b9      	b.n	80074fe <_printf_float+0xfa>
 800758a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800758e:	d118      	bne.n	80075c2 <_printf_float+0x1be>
 8007590:	2900      	cmp	r1, #0
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	dd0b      	ble.n	80075ae <_printf_float+0x1aa>
 8007596:	6121      	str	r1, [r4, #16]
 8007598:	b913      	cbnz	r3, 80075a0 <_printf_float+0x19c>
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	07d0      	lsls	r0, r2, #31
 800759e:	d502      	bpl.n	80075a6 <_printf_float+0x1a2>
 80075a0:	3301      	adds	r3, #1
 80075a2:	440b      	add	r3, r1
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80075a8:	f04f 0900 	mov.w	r9, #0
 80075ac:	e7de      	b.n	800756c <_printf_float+0x168>
 80075ae:	b913      	cbnz	r3, 80075b6 <_printf_float+0x1b2>
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	07d2      	lsls	r2, r2, #31
 80075b4:	d501      	bpl.n	80075ba <_printf_float+0x1b6>
 80075b6:	3302      	adds	r3, #2
 80075b8:	e7f4      	b.n	80075a4 <_printf_float+0x1a0>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e7f2      	b.n	80075a4 <_printf_float+0x1a0>
 80075be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c4:	4299      	cmp	r1, r3
 80075c6:	db05      	blt.n	80075d4 <_printf_float+0x1d0>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	6121      	str	r1, [r4, #16]
 80075cc:	07d8      	lsls	r0, r3, #31
 80075ce:	d5ea      	bpl.n	80075a6 <_printf_float+0x1a2>
 80075d0:	1c4b      	adds	r3, r1, #1
 80075d2:	e7e7      	b.n	80075a4 <_printf_float+0x1a0>
 80075d4:	2900      	cmp	r1, #0
 80075d6:	bfd4      	ite	le
 80075d8:	f1c1 0202 	rsble	r2, r1, #2
 80075dc:	2201      	movgt	r2, #1
 80075de:	4413      	add	r3, r2
 80075e0:	e7e0      	b.n	80075a4 <_printf_float+0x1a0>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	055a      	lsls	r2, r3, #21
 80075e6:	d407      	bmi.n	80075f8 <_printf_float+0x1f4>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	4642      	mov	r2, r8
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	d12c      	bne.n	8007650 <_printf_float+0x24c>
 80075f6:	e764      	b.n	80074c2 <_printf_float+0xbe>
 80075f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075fc:	f240 80e0 	bls.w	80077c0 <_printf_float+0x3bc>
 8007600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	f7f9 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800760c:	2800      	cmp	r0, #0
 800760e:	d034      	beq.n	800767a <_printf_float+0x276>
 8007610:	4a37      	ldr	r2, [pc, #220]	; (80076f0 <_printf_float+0x2ec>)
 8007612:	2301      	movs	r3, #1
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f af51 	beq.w	80074c2 <_printf_float+0xbe>
 8007620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007624:	429a      	cmp	r2, r3
 8007626:	db02      	blt.n	800762e <_printf_float+0x22a>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	07d8      	lsls	r0, r3, #31
 800762c:	d510      	bpl.n	8007650 <_printf_float+0x24c>
 800762e:	ee18 3a10 	vmov	r3, s16
 8007632:	4652      	mov	r2, sl
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af41 	beq.w	80074c2 <_printf_float+0xbe>
 8007640:	f04f 0800 	mov.w	r8, #0
 8007644:	f104 091a 	add.w	r9, r4, #26
 8007648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764a:	3b01      	subs	r3, #1
 800764c:	4543      	cmp	r3, r8
 800764e:	dc09      	bgt.n	8007664 <_printf_float+0x260>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	f100 8107 	bmi.w	8007866 <_printf_float+0x462>
 8007658:	68e0      	ldr	r0, [r4, #12]
 800765a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765c:	4298      	cmp	r0, r3
 800765e:	bfb8      	it	lt
 8007660:	4618      	movlt	r0, r3
 8007662:	e730      	b.n	80074c6 <_printf_float+0xc2>
 8007664:	2301      	movs	r3, #1
 8007666:	464a      	mov	r2, r9
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f af27 	beq.w	80074c2 <_printf_float+0xbe>
 8007674:	f108 0801 	add.w	r8, r8, #1
 8007678:	e7e6      	b.n	8007648 <_printf_float+0x244>
 800767a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	dc39      	bgt.n	80076f4 <_printf_float+0x2f0>
 8007680:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <_printf_float+0x2ec>)
 8007682:	2301      	movs	r3, #1
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af19 	beq.w	80074c2 <_printf_float+0xbe>
 8007690:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007694:	4313      	orrs	r3, r2
 8007696:	d102      	bne.n	800769e <_printf_float+0x29a>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	07d9      	lsls	r1, r3, #31
 800769c:	d5d8      	bpl.n	8007650 <_printf_float+0x24c>
 800769e:	ee18 3a10 	vmov	r3, s16
 80076a2:	4652      	mov	r2, sl
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	f43f af09 	beq.w	80074c2 <_printf_float+0xbe>
 80076b0:	f04f 0900 	mov.w	r9, #0
 80076b4:	f104 0a1a 	add.w	sl, r4, #26
 80076b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ba:	425b      	negs	r3, r3
 80076bc:	454b      	cmp	r3, r9
 80076be:	dc01      	bgt.n	80076c4 <_printf_float+0x2c0>
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	e792      	b.n	80075ea <_printf_float+0x1e6>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4652      	mov	r2, sl
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f aef7 	beq.w	80074c2 <_printf_float+0xbe>
 80076d4:	f109 0901 	add.w	r9, r9, #1
 80076d8:	e7ee      	b.n	80076b8 <_printf_float+0x2b4>
 80076da:	bf00      	nop
 80076dc:	7fefffff 	.word	0x7fefffff
 80076e0:	0801d940 	.word	0x0801d940
 80076e4:	0801d944 	.word	0x0801d944
 80076e8:	0801d948 	.word	0x0801d948
 80076ec:	0801d94c 	.word	0x0801d94c
 80076f0:	0801d950 	.word	0x0801d950
 80076f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076f8:	429a      	cmp	r2, r3
 80076fa:	bfa8      	it	ge
 80076fc:	461a      	movge	r2, r3
 80076fe:	2a00      	cmp	r2, #0
 8007700:	4691      	mov	r9, r2
 8007702:	dc37      	bgt.n	8007774 <_printf_float+0x370>
 8007704:	f04f 0b00 	mov.w	fp, #0
 8007708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800770c:	f104 021a 	add.w	r2, r4, #26
 8007710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007712:	9305      	str	r3, [sp, #20]
 8007714:	eba3 0309 	sub.w	r3, r3, r9
 8007718:	455b      	cmp	r3, fp
 800771a:	dc33      	bgt.n	8007784 <_printf_float+0x380>
 800771c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007720:	429a      	cmp	r2, r3
 8007722:	db3b      	blt.n	800779c <_printf_float+0x398>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d438      	bmi.n	800779c <_printf_float+0x398>
 800772a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800772e:	eba2 0903 	sub.w	r9, r2, r3
 8007732:	9b05      	ldr	r3, [sp, #20]
 8007734:	1ad2      	subs	r2, r2, r3
 8007736:	4591      	cmp	r9, r2
 8007738:	bfa8      	it	ge
 800773a:	4691      	movge	r9, r2
 800773c:	f1b9 0f00 	cmp.w	r9, #0
 8007740:	dc35      	bgt.n	80077ae <_printf_float+0x3aa>
 8007742:	f04f 0800 	mov.w	r8, #0
 8007746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800774a:	f104 0a1a 	add.w	sl, r4, #26
 800774e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	eba3 0309 	sub.w	r3, r3, r9
 8007758:	4543      	cmp	r3, r8
 800775a:	f77f af79 	ble.w	8007650 <_printf_float+0x24c>
 800775e:	2301      	movs	r3, #1
 8007760:	4652      	mov	r2, sl
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f aeaa 	beq.w	80074c2 <_printf_float+0xbe>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	e7ec      	b.n	800774e <_printf_float+0x34a>
 8007774:	4613      	mov	r3, r2
 8007776:	4631      	mov	r1, r6
 8007778:	4642      	mov	r2, r8
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	d1c0      	bne.n	8007704 <_printf_float+0x300>
 8007782:	e69e      	b.n	80074c2 <_printf_float+0xbe>
 8007784:	2301      	movs	r3, #1
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	9205      	str	r2, [sp, #20]
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f ae97 	beq.w	80074c2 <_printf_float+0xbe>
 8007794:	9a05      	ldr	r2, [sp, #20]
 8007796:	f10b 0b01 	add.w	fp, fp, #1
 800779a:	e7b9      	b.n	8007710 <_printf_float+0x30c>
 800779c:	ee18 3a10 	vmov	r3, s16
 80077a0:	4652      	mov	r2, sl
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1be      	bne.n	800772a <_printf_float+0x326>
 80077ac:	e689      	b.n	80074c2 <_printf_float+0xbe>
 80077ae:	9a05      	ldr	r2, [sp, #20]
 80077b0:	464b      	mov	r3, r9
 80077b2:	4442      	add	r2, r8
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	d1c1      	bne.n	8007742 <_printf_float+0x33e>
 80077be:	e680      	b.n	80074c2 <_printf_float+0xbe>
 80077c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c2:	2a01      	cmp	r2, #1
 80077c4:	dc01      	bgt.n	80077ca <_printf_float+0x3c6>
 80077c6:	07db      	lsls	r3, r3, #31
 80077c8:	d53a      	bpl.n	8007840 <_printf_float+0x43c>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4642      	mov	r2, r8
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f ae74 	beq.w	80074c2 <_printf_float+0xbe>
 80077da:	ee18 3a10 	vmov	r3, s16
 80077de:	4652      	mov	r2, sl
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f ae6b 	beq.w	80074c2 <_printf_float+0xbe>
 80077ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80077f8:	f7f9 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fc:	b9d8      	cbnz	r0, 8007836 <_printf_float+0x432>
 80077fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007802:	f108 0201 	add.w	r2, r8, #1
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	d10e      	bne.n	800782e <_printf_float+0x42a>
 8007810:	e657      	b.n	80074c2 <_printf_float+0xbe>
 8007812:	2301      	movs	r3, #1
 8007814:	4652      	mov	r2, sl
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	f43f ae50 	beq.w	80074c2 <_printf_float+0xbe>
 8007822:	f108 0801 	add.w	r8, r8, #1
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	3b01      	subs	r3, #1
 800782a:	4543      	cmp	r3, r8
 800782c:	dcf1      	bgt.n	8007812 <_printf_float+0x40e>
 800782e:	464b      	mov	r3, r9
 8007830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007834:	e6da      	b.n	80075ec <_printf_float+0x1e8>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	f104 0a1a 	add.w	sl, r4, #26
 800783e:	e7f2      	b.n	8007826 <_printf_float+0x422>
 8007840:	2301      	movs	r3, #1
 8007842:	4642      	mov	r2, r8
 8007844:	e7df      	b.n	8007806 <_printf_float+0x402>
 8007846:	2301      	movs	r3, #1
 8007848:	464a      	mov	r2, r9
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae36 	beq.w	80074c2 <_printf_float+0xbe>
 8007856:	f108 0801 	add.w	r8, r8, #1
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800785e:	1a5b      	subs	r3, r3, r1
 8007860:	4543      	cmp	r3, r8
 8007862:	dcf0      	bgt.n	8007846 <_printf_float+0x442>
 8007864:	e6f8      	b.n	8007658 <_printf_float+0x254>
 8007866:	f04f 0800 	mov.w	r8, #0
 800786a:	f104 0919 	add.w	r9, r4, #25
 800786e:	e7f4      	b.n	800785a <_printf_float+0x456>

08007870 <_printf_common>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	4616      	mov	r6, r2
 8007876:	4699      	mov	r9, r3
 8007878:	688a      	ldr	r2, [r1, #8]
 800787a:	690b      	ldr	r3, [r1, #16]
 800787c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007880:	4293      	cmp	r3, r2
 8007882:	bfb8      	it	lt
 8007884:	4613      	movlt	r3, r2
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800788c:	4607      	mov	r7, r0
 800788e:	460c      	mov	r4, r1
 8007890:	b10a      	cbz	r2, 8007896 <_printf_common+0x26>
 8007892:	3301      	adds	r3, #1
 8007894:	6033      	str	r3, [r6, #0]
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	0699      	lsls	r1, r3, #26
 800789a:	bf42      	ittt	mi
 800789c:	6833      	ldrmi	r3, [r6, #0]
 800789e:	3302      	addmi	r3, #2
 80078a0:	6033      	strmi	r3, [r6, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	f015 0506 	ands.w	r5, r5, #6
 80078a8:	d106      	bne.n	80078b8 <_printf_common+0x48>
 80078aa:	f104 0a19 	add.w	sl, r4, #25
 80078ae:	68e3      	ldr	r3, [r4, #12]
 80078b0:	6832      	ldr	r2, [r6, #0]
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	dc26      	bgt.n	8007906 <_printf_common+0x96>
 80078b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078bc:	1e13      	subs	r3, r2, #0
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	bf18      	it	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	0692      	lsls	r2, r2, #26
 80078c6:	d42b      	bmi.n	8007920 <_printf_common+0xb0>
 80078c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078cc:	4649      	mov	r1, r9
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	3001      	adds	r0, #1
 80078d4:	d01e      	beq.n	8007914 <_printf_common+0xa4>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	f003 0306 	and.w	r3, r3, #6
 80078de:	2b04      	cmp	r3, #4
 80078e0:	bf02      	ittt	eq
 80078e2:	68e5      	ldreq	r5, [r4, #12]
 80078e4:	6833      	ldreq	r3, [r6, #0]
 80078e6:	1aed      	subeq	r5, r5, r3
 80078e8:	68a3      	ldr	r3, [r4, #8]
 80078ea:	bf0c      	ite	eq
 80078ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f0:	2500      	movne	r5, #0
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bfc4      	itt	gt
 80078f6:	1a9b      	subgt	r3, r3, r2
 80078f8:	18ed      	addgt	r5, r5, r3
 80078fa:	2600      	movs	r6, #0
 80078fc:	341a      	adds	r4, #26
 80078fe:	42b5      	cmp	r5, r6
 8007900:	d11a      	bne.n	8007938 <_printf_common+0xc8>
 8007902:	2000      	movs	r0, #0
 8007904:	e008      	b.n	8007918 <_printf_common+0xa8>
 8007906:	2301      	movs	r3, #1
 8007908:	4652      	mov	r2, sl
 800790a:	4649      	mov	r1, r9
 800790c:	4638      	mov	r0, r7
 800790e:	47c0      	blx	r8
 8007910:	3001      	adds	r0, #1
 8007912:	d103      	bne.n	800791c <_printf_common+0xac>
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791c:	3501      	adds	r5, #1
 800791e:	e7c6      	b.n	80078ae <_printf_common+0x3e>
 8007920:	18e1      	adds	r1, r4, r3
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	2030      	movs	r0, #48	; 0x30
 8007926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800792a:	4422      	add	r2, r4
 800792c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007934:	3302      	adds	r3, #2
 8007936:	e7c7      	b.n	80078c8 <_printf_common+0x58>
 8007938:	2301      	movs	r3, #1
 800793a:	4622      	mov	r2, r4
 800793c:	4649      	mov	r1, r9
 800793e:	4638      	mov	r0, r7
 8007940:	47c0      	blx	r8
 8007942:	3001      	adds	r0, #1
 8007944:	d0e6      	beq.n	8007914 <_printf_common+0xa4>
 8007946:	3601      	adds	r6, #1
 8007948:	e7d9      	b.n	80078fe <_printf_common+0x8e>
	...

0800794c <_printf_i>:
 800794c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	7e0f      	ldrb	r7, [r1, #24]
 8007952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007954:	2f78      	cmp	r7, #120	; 0x78
 8007956:	4691      	mov	r9, r2
 8007958:	4680      	mov	r8, r0
 800795a:	460c      	mov	r4, r1
 800795c:	469a      	mov	sl, r3
 800795e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007962:	d807      	bhi.n	8007974 <_printf_i+0x28>
 8007964:	2f62      	cmp	r7, #98	; 0x62
 8007966:	d80a      	bhi.n	800797e <_printf_i+0x32>
 8007968:	2f00      	cmp	r7, #0
 800796a:	f000 80d4 	beq.w	8007b16 <_printf_i+0x1ca>
 800796e:	2f58      	cmp	r7, #88	; 0x58
 8007970:	f000 80c0 	beq.w	8007af4 <_printf_i+0x1a8>
 8007974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800797c:	e03a      	b.n	80079f4 <_printf_i+0xa8>
 800797e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007982:	2b15      	cmp	r3, #21
 8007984:	d8f6      	bhi.n	8007974 <_printf_i+0x28>
 8007986:	a101      	add	r1, pc, #4	; (adr r1, 800798c <_printf_i+0x40>)
 8007988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079f9 	.word	0x080079f9
 8007994:	08007975 	.word	0x08007975
 8007998:	08007975 	.word	0x08007975
 800799c:	08007975 	.word	0x08007975
 80079a0:	08007975 	.word	0x08007975
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	08007975 	.word	0x08007975
 80079ac:	08007975 	.word	0x08007975
 80079b0:	08007975 	.word	0x08007975
 80079b4:	08007975 	.word	0x08007975
 80079b8:	08007afd 	.word	0x08007afd
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	08007ab7 	.word	0x08007ab7
 80079c4:	08007975 	.word	0x08007975
 80079c8:	08007975 	.word	0x08007975
 80079cc:	08007b1f 	.word	0x08007b1f
 80079d0:	08007975 	.word	0x08007975
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	08007975 	.word	0x08007975
 80079dc:	08007975 	.word	0x08007975
 80079e0:	08007abf 	.word	0x08007abf
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	602a      	str	r2, [r5, #0]
 80079ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f4:	2301      	movs	r3, #1
 80079f6:	e09f      	b.n	8007b38 <_printf_i+0x1ec>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	682b      	ldr	r3, [r5, #0]
 80079fc:	0607      	lsls	r7, r0, #24
 80079fe:	f103 0104 	add.w	r1, r3, #4
 8007a02:	6029      	str	r1, [r5, #0]
 8007a04:	d501      	bpl.n	8007a0a <_printf_i+0xbe>
 8007a06:	681e      	ldr	r6, [r3, #0]
 8007a08:	e003      	b.n	8007a12 <_printf_i+0xc6>
 8007a0a:	0646      	lsls	r6, r0, #25
 8007a0c:	d5fb      	bpl.n	8007a06 <_printf_i+0xba>
 8007a0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	da03      	bge.n	8007a1e <_printf_i+0xd2>
 8007a16:	232d      	movs	r3, #45	; 0x2d
 8007a18:	4276      	negs	r6, r6
 8007a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1e:	485a      	ldr	r0, [pc, #360]	; (8007b88 <_printf_i+0x23c>)
 8007a20:	230a      	movs	r3, #10
 8007a22:	e012      	b.n	8007a4a <_printf_i+0xfe>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	6820      	ldr	r0, [r4, #0]
 8007a28:	1d19      	adds	r1, r3, #4
 8007a2a:	6029      	str	r1, [r5, #0]
 8007a2c:	0605      	lsls	r5, r0, #24
 8007a2e:	d501      	bpl.n	8007a34 <_printf_i+0xe8>
 8007a30:	681e      	ldr	r6, [r3, #0]
 8007a32:	e002      	b.n	8007a3a <_printf_i+0xee>
 8007a34:	0641      	lsls	r1, r0, #25
 8007a36:	d5fb      	bpl.n	8007a30 <_printf_i+0xe4>
 8007a38:	881e      	ldrh	r6, [r3, #0]
 8007a3a:	4853      	ldr	r0, [pc, #332]	; (8007b88 <_printf_i+0x23c>)
 8007a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a3e:	bf0c      	ite	eq
 8007a40:	2308      	moveq	r3, #8
 8007a42:	230a      	movne	r3, #10
 8007a44:	2100      	movs	r1, #0
 8007a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a4a:	6865      	ldr	r5, [r4, #4]
 8007a4c:	60a5      	str	r5, [r4, #8]
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	bfa2      	ittt	ge
 8007a52:	6821      	ldrge	r1, [r4, #0]
 8007a54:	f021 0104 	bicge.w	r1, r1, #4
 8007a58:	6021      	strge	r1, [r4, #0]
 8007a5a:	b90e      	cbnz	r6, 8007a60 <_printf_i+0x114>
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d04b      	beq.n	8007af8 <_printf_i+0x1ac>
 8007a60:	4615      	mov	r5, r2
 8007a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a66:	fb03 6711 	mls	r7, r3, r1, r6
 8007a6a:	5dc7      	ldrb	r7, [r0, r7]
 8007a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a70:	4637      	mov	r7, r6
 8007a72:	42bb      	cmp	r3, r7
 8007a74:	460e      	mov	r6, r1
 8007a76:	d9f4      	bls.n	8007a62 <_printf_i+0x116>
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d10b      	bne.n	8007a94 <_printf_i+0x148>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07de      	lsls	r6, r3, #31
 8007a80:	d508      	bpl.n	8007a94 <_printf_i+0x148>
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	4299      	cmp	r1, r3
 8007a88:	bfde      	ittt	le
 8007a8a:	2330      	movle	r3, #48	; 0x30
 8007a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a94:	1b52      	subs	r2, r2, r5
 8007a96:	6122      	str	r2, [r4, #16]
 8007a98:	f8cd a000 	str.w	sl, [sp]
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	aa03      	add	r2, sp, #12
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	f7ff fee4 	bl	8007870 <_printf_common>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d14a      	bne.n	8007b42 <_printf_i+0x1f6>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b004      	add	sp, #16
 8007ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	f043 0320 	orr.w	r3, r3, #32
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	4833      	ldr	r0, [pc, #204]	; (8007b8c <_printf_i+0x240>)
 8007ac0:	2778      	movs	r7, #120	; 0x78
 8007ac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	6829      	ldr	r1, [r5, #0]
 8007aca:	061f      	lsls	r7, r3, #24
 8007acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ad0:	d402      	bmi.n	8007ad8 <_printf_i+0x18c>
 8007ad2:	065f      	lsls	r7, r3, #25
 8007ad4:	bf48      	it	mi
 8007ad6:	b2b6      	uxthmi	r6, r6
 8007ad8:	07df      	lsls	r7, r3, #31
 8007ada:	bf48      	it	mi
 8007adc:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae0:	6029      	str	r1, [r5, #0]
 8007ae2:	bf48      	it	mi
 8007ae4:	6023      	strmi	r3, [r4, #0]
 8007ae6:	b91e      	cbnz	r6, 8007af0 <_printf_i+0x1a4>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	f023 0320 	bic.w	r3, r3, #32
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	2310      	movs	r3, #16
 8007af2:	e7a7      	b.n	8007a44 <_printf_i+0xf8>
 8007af4:	4824      	ldr	r0, [pc, #144]	; (8007b88 <_printf_i+0x23c>)
 8007af6:	e7e4      	b.n	8007ac2 <_printf_i+0x176>
 8007af8:	4615      	mov	r5, r2
 8007afa:	e7bd      	b.n	8007a78 <_printf_i+0x12c>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	6826      	ldr	r6, [r4, #0]
 8007b00:	6961      	ldr	r1, [r4, #20]
 8007b02:	1d18      	adds	r0, r3, #4
 8007b04:	6028      	str	r0, [r5, #0]
 8007b06:	0635      	lsls	r5, r6, #24
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	d501      	bpl.n	8007b10 <_printf_i+0x1c4>
 8007b0c:	6019      	str	r1, [r3, #0]
 8007b0e:	e002      	b.n	8007b16 <_printf_i+0x1ca>
 8007b10:	0670      	lsls	r0, r6, #25
 8007b12:	d5fb      	bpl.n	8007b0c <_printf_i+0x1c0>
 8007b14:	8019      	strh	r1, [r3, #0]
 8007b16:	2300      	movs	r3, #0
 8007b18:	6123      	str	r3, [r4, #16]
 8007b1a:	4615      	mov	r5, r2
 8007b1c:	e7bc      	b.n	8007a98 <_printf_i+0x14c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	1d1a      	adds	r2, r3, #4
 8007b22:	602a      	str	r2, [r5, #0]
 8007b24:	681d      	ldr	r5, [r3, #0]
 8007b26:	6862      	ldr	r2, [r4, #4]
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7f8 fb50 	bl	80001d0 <memchr>
 8007b30:	b108      	cbz	r0, 8007b36 <_printf_i+0x1ea>
 8007b32:	1b40      	subs	r0, r0, r5
 8007b34:	6060      	str	r0, [r4, #4]
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b40:	e7aa      	b.n	8007a98 <_printf_i+0x14c>
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	462a      	mov	r2, r5
 8007b46:	4649      	mov	r1, r9
 8007b48:	4640      	mov	r0, r8
 8007b4a:	47d0      	blx	sl
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d0ad      	beq.n	8007aac <_printf_i+0x160>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	079b      	lsls	r3, r3, #30
 8007b54:	d413      	bmi.n	8007b7e <_printf_i+0x232>
 8007b56:	68e0      	ldr	r0, [r4, #12]
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	4298      	cmp	r0, r3
 8007b5c:	bfb8      	it	lt
 8007b5e:	4618      	movlt	r0, r3
 8007b60:	e7a6      	b.n	8007ab0 <_printf_i+0x164>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4632      	mov	r2, r6
 8007b66:	4649      	mov	r1, r9
 8007b68:	4640      	mov	r0, r8
 8007b6a:	47d0      	blx	sl
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d09d      	beq.n	8007aac <_printf_i+0x160>
 8007b70:	3501      	adds	r5, #1
 8007b72:	68e3      	ldr	r3, [r4, #12]
 8007b74:	9903      	ldr	r1, [sp, #12]
 8007b76:	1a5b      	subs	r3, r3, r1
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	dcf2      	bgt.n	8007b62 <_printf_i+0x216>
 8007b7c:	e7eb      	b.n	8007b56 <_printf_i+0x20a>
 8007b7e:	2500      	movs	r5, #0
 8007b80:	f104 0619 	add.w	r6, r4, #25
 8007b84:	e7f5      	b.n	8007b72 <_printf_i+0x226>
 8007b86:	bf00      	nop
 8007b88:	0801d952 	.word	0x0801d952
 8007b8c:	0801d963 	.word	0x0801d963

08007b90 <std>:
 8007b90:	2300      	movs	r3, #0
 8007b92:	b510      	push	{r4, lr}
 8007b94:	4604      	mov	r4, r0
 8007b96:	e9c0 3300 	strd	r3, r3, [r0]
 8007b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b9e:	6083      	str	r3, [r0, #8]
 8007ba0:	8181      	strh	r1, [r0, #12]
 8007ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ba4:	81c2      	strh	r2, [r0, #14]
 8007ba6:	6183      	str	r3, [r0, #24]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	2208      	movs	r2, #8
 8007bac:	305c      	adds	r0, #92	; 0x5c
 8007bae:	f000 f9e5 	bl	8007f7c <memset>
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <std+0x38>)
 8007bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <std+0x3c>)
 8007bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <std+0x40>)
 8007bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <std+0x44>)
 8007bc0:	6224      	str	r4, [r4, #32]
 8007bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08007dcd 	.word	0x08007dcd
 8007bcc:	08007def 	.word	0x08007def
 8007bd0:	08007e27 	.word	0x08007e27
 8007bd4:	08007e4b 	.word	0x08007e4b

08007bd8 <stdio_exit_handler>:
 8007bd8:	4a02      	ldr	r2, [pc, #8]	; (8007be4 <stdio_exit_handler+0xc>)
 8007bda:	4903      	ldr	r1, [pc, #12]	; (8007be8 <stdio_exit_handler+0x10>)
 8007bdc:	4803      	ldr	r0, [pc, #12]	; (8007bec <stdio_exit_handler+0x14>)
 8007bde:	f000 b869 	b.w	8007cb4 <_fwalk_sglue>
 8007be2:	bf00      	nop
 8007be4:	2000001c 	.word	0x2000001c
 8007be8:	080099f9 	.word	0x080099f9
 8007bec:	20000028 	.word	0x20000028

08007bf0 <cleanup_stdio>:
 8007bf0:	6841      	ldr	r1, [r0, #4]
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <cleanup_stdio+0x34>)
 8007bf4:	4299      	cmp	r1, r3
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	d001      	beq.n	8007c00 <cleanup_stdio+0x10>
 8007bfc:	f001 fefc 	bl	80099f8 <_fflush_r>
 8007c00:	68a1      	ldr	r1, [r4, #8]
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <cleanup_stdio+0x38>)
 8007c04:	4299      	cmp	r1, r3
 8007c06:	d002      	beq.n	8007c0e <cleanup_stdio+0x1e>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 fef5 	bl	80099f8 <_fflush_r>
 8007c0e:	68e1      	ldr	r1, [r4, #12]
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <cleanup_stdio+0x3c>)
 8007c12:	4299      	cmp	r1, r3
 8007c14:	d004      	beq.n	8007c20 <cleanup_stdio+0x30>
 8007c16:	4620      	mov	r0, r4
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f001 beec 	b.w	80099f8 <_fflush_r>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	200113b0 	.word	0x200113b0
 8007c28:	20011418 	.word	0x20011418
 8007c2c:	20011480 	.word	0x20011480

08007c30 <global_stdio_init.part.0>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <global_stdio_init.part.0+0x30>)
 8007c34:	4c0b      	ldr	r4, [pc, #44]	; (8007c64 <global_stdio_init.part.0+0x34>)
 8007c36:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <global_stdio_init.part.0+0x38>)
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2104      	movs	r1, #4
 8007c40:	f7ff ffa6 	bl	8007b90 <std>
 8007c44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c48:	2201      	movs	r2, #1
 8007c4a:	2109      	movs	r1, #9
 8007c4c:	f7ff ffa0 	bl	8007b90 <std>
 8007c50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c54:	2202      	movs	r2, #2
 8007c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5a:	2112      	movs	r1, #18
 8007c5c:	f7ff bf98 	b.w	8007b90 <std>
 8007c60:	200114e8 	.word	0x200114e8
 8007c64:	200113b0 	.word	0x200113b0
 8007c68:	08007bd9 	.word	0x08007bd9

08007c6c <__sfp_lock_acquire>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	; (8007c74 <__sfp_lock_acquire+0x8>)
 8007c6e:	f000 ba01 	b.w	8008074 <__retarget_lock_acquire_recursive>
 8007c72:	bf00      	nop
 8007c74:	200114f1 	.word	0x200114f1

08007c78 <__sfp_lock_release>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__sfp_lock_release+0x8>)
 8007c7a:	f000 b9fc 	b.w	8008076 <__retarget_lock_release_recursive>
 8007c7e:	bf00      	nop
 8007c80:	200114f1 	.word	0x200114f1

08007c84 <__sinit>:
 8007c84:	b510      	push	{r4, lr}
 8007c86:	4604      	mov	r4, r0
 8007c88:	f7ff fff0 	bl	8007c6c <__sfp_lock_acquire>
 8007c8c:	6a23      	ldr	r3, [r4, #32]
 8007c8e:	b11b      	cbz	r3, 8007c98 <__sinit+0x14>
 8007c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c94:	f7ff bff0 	b.w	8007c78 <__sfp_lock_release>
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <__sinit+0x28>)
 8007c9a:	6223      	str	r3, [r4, #32]
 8007c9c:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <__sinit+0x2c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f5      	bne.n	8007c90 <__sinit+0xc>
 8007ca4:	f7ff ffc4 	bl	8007c30 <global_stdio_init.part.0>
 8007ca8:	e7f2      	b.n	8007c90 <__sinit+0xc>
 8007caa:	bf00      	nop
 8007cac:	08007bf1 	.word	0x08007bf1
 8007cb0:	200114e8 	.word	0x200114e8

08007cb4 <_fwalk_sglue>:
 8007cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb8:	4607      	mov	r7, r0
 8007cba:	4688      	mov	r8, r1
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc8:	d505      	bpl.n	8007cd6 <_fwalk_sglue+0x22>
 8007cca:	6824      	ldr	r4, [r4, #0]
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	d1f7      	bne.n	8007cc0 <_fwalk_sglue+0xc>
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d907      	bls.n	8007cec <_fwalk_sglue+0x38>
 8007cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	d003      	beq.n	8007cec <_fwalk_sglue+0x38>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	47c0      	blx	r8
 8007cea:	4306      	orrs	r6, r0
 8007cec:	3568      	adds	r5, #104	; 0x68
 8007cee:	e7e9      	b.n	8007cc4 <_fwalk_sglue+0x10>

08007cf0 <iprintf>:
 8007cf0:	b40f      	push	{r0, r1, r2, r3}
 8007cf2:	b507      	push	{r0, r1, r2, lr}
 8007cf4:	4906      	ldr	r1, [pc, #24]	; (8007d10 <iprintf+0x20>)
 8007cf6:	ab04      	add	r3, sp, #16
 8007cf8:	6808      	ldr	r0, [r1, #0]
 8007cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfe:	6881      	ldr	r1, [r0, #8]
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	f001 fcd9 	bl	80096b8 <_vfiprintf_r>
 8007d06:	b003      	add	sp, #12
 8007d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d0c:	b004      	add	sp, #16
 8007d0e:	4770      	bx	lr
 8007d10:	20000074 	.word	0x20000074

08007d14 <_puts_r>:
 8007d14:	6a03      	ldr	r3, [r0, #32]
 8007d16:	b570      	push	{r4, r5, r6, lr}
 8007d18:	6884      	ldr	r4, [r0, #8]
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	460e      	mov	r6, r1
 8007d1e:	b90b      	cbnz	r3, 8007d24 <_puts_r+0x10>
 8007d20:	f7ff ffb0 	bl	8007c84 <__sinit>
 8007d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d26:	07db      	lsls	r3, r3, #31
 8007d28:	d405      	bmi.n	8007d36 <_puts_r+0x22>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	0598      	lsls	r0, r3, #22
 8007d2e:	d402      	bmi.n	8007d36 <_puts_r+0x22>
 8007d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d32:	f000 f99f 	bl	8008074 <__retarget_lock_acquire_recursive>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	0719      	lsls	r1, r3, #28
 8007d3a:	d513      	bpl.n	8007d64 <_puts_r+0x50>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	b18b      	cbz	r3, 8007d64 <_puts_r+0x50>
 8007d40:	3e01      	subs	r6, #1
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	b9e9      	cbnz	r1, 8007d8a <_puts_r+0x76>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	da2e      	bge.n	8007db0 <_puts_r+0x9c>
 8007d52:	4622      	mov	r2, r4
 8007d54:	210a      	movs	r1, #10
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 f87b 	bl	8007e52 <__swbuf_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d007      	beq.n	8007d70 <_puts_r+0x5c>
 8007d60:	250a      	movs	r5, #10
 8007d62:	e007      	b.n	8007d74 <_puts_r+0x60>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f8b0 	bl	8007ecc <__swsetup_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d0e7      	beq.n	8007d40 <_puts_r+0x2c>
 8007d70:	f04f 35ff 	mov.w	r5, #4294967295
 8007d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d76:	07da      	lsls	r2, r3, #31
 8007d78:	d405      	bmi.n	8007d86 <_puts_r+0x72>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	059b      	lsls	r3, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_puts_r+0x72>
 8007d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d82:	f000 f978 	bl	8008076 <__retarget_lock_release_recursive>
 8007d86:	4628      	mov	r0, r5
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da04      	bge.n	8007d98 <_puts_r+0x84>
 8007d8e:	69a2      	ldr	r2, [r4, #24]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	dc06      	bgt.n	8007da2 <_puts_r+0x8e>
 8007d94:	290a      	cmp	r1, #10
 8007d96:	d004      	beq.n	8007da2 <_puts_r+0x8e>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	7019      	strb	r1, [r3, #0]
 8007da0:	e7cf      	b.n	8007d42 <_puts_r+0x2e>
 8007da2:	4622      	mov	r2, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 f854 	bl	8007e52 <__swbuf_r>
 8007daa:	3001      	adds	r0, #1
 8007dac:	d1c9      	bne.n	8007d42 <_puts_r+0x2e>
 8007dae:	e7df      	b.n	8007d70 <_puts_r+0x5c>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	250a      	movs	r5, #10
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	701d      	strb	r5, [r3, #0]
 8007dba:	e7db      	b.n	8007d74 <_puts_r+0x60>

08007dbc <puts>:
 8007dbc:	4b02      	ldr	r3, [pc, #8]	; (8007dc8 <puts+0xc>)
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f7ff bfa7 	b.w	8007d14 <_puts_r>
 8007dc6:	bf00      	nop
 8007dc8:	20000074 	.word	0x20000074

08007dcc <__sread>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	f000 f900 	bl	8007fd8 <_read_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	bfab      	itete	ge
 8007ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dde:	89a3      	ldrhlt	r3, [r4, #12]
 8007de0:	181b      	addge	r3, r3, r0
 8007de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007de6:	bfac      	ite	ge
 8007de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dea:	81a3      	strhlt	r3, [r4, #12]
 8007dec:	bd10      	pop	{r4, pc}

08007dee <__swrite>:
 8007dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	461f      	mov	r7, r3
 8007df4:	898b      	ldrh	r3, [r1, #12]
 8007df6:	05db      	lsls	r3, r3, #23
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	d505      	bpl.n	8007e0c <__swrite+0x1e>
 8007e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e04:	2302      	movs	r3, #2
 8007e06:	2200      	movs	r2, #0
 8007e08:	f000 f8d4 	bl	8007fb4 <_lseek_r>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	4632      	mov	r2, r6
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e22:	f000 b8eb 	b.w	8007ffc <_write_r>

08007e26 <__sseek>:
 8007e26:	b510      	push	{r4, lr}
 8007e28:	460c      	mov	r4, r1
 8007e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2e:	f000 f8c1 	bl	8007fb4 <_lseek_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	bf15      	itete	ne
 8007e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e42:	81a3      	strheq	r3, [r4, #12]
 8007e44:	bf18      	it	ne
 8007e46:	81a3      	strhne	r3, [r4, #12]
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <__sclose>:
 8007e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4e:	f000 b8a1 	b.w	8007f94 <_close_r>

08007e52 <__swbuf_r>:
 8007e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e54:	460e      	mov	r6, r1
 8007e56:	4614      	mov	r4, r2
 8007e58:	4605      	mov	r5, r0
 8007e5a:	b118      	cbz	r0, 8007e64 <__swbuf_r+0x12>
 8007e5c:	6a03      	ldr	r3, [r0, #32]
 8007e5e:	b90b      	cbnz	r3, 8007e64 <__swbuf_r+0x12>
 8007e60:	f7ff ff10 	bl	8007c84 <__sinit>
 8007e64:	69a3      	ldr	r3, [r4, #24]
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	071a      	lsls	r2, r3, #28
 8007e6c:	d525      	bpl.n	8007eba <__swbuf_r+0x68>
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	b31b      	cbz	r3, 8007eba <__swbuf_r+0x68>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	6922      	ldr	r2, [r4, #16]
 8007e76:	1a98      	subs	r0, r3, r2
 8007e78:	6963      	ldr	r3, [r4, #20]
 8007e7a:	b2f6      	uxtb	r6, r6
 8007e7c:	4283      	cmp	r3, r0
 8007e7e:	4637      	mov	r7, r6
 8007e80:	dc04      	bgt.n	8007e8c <__swbuf_r+0x3a>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f001 fdb7 	bl	80099f8 <_fflush_r>
 8007e8a:	b9e0      	cbnz	r0, 8007ec6 <__swbuf_r+0x74>
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	6022      	str	r2, [r4, #0]
 8007e98:	701e      	strb	r6, [r3, #0]
 8007e9a:	6962      	ldr	r2, [r4, #20]
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d004      	beq.n	8007eac <__swbuf_r+0x5a>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	07db      	lsls	r3, r3, #31
 8007ea6:	d506      	bpl.n	8007eb6 <__swbuf_r+0x64>
 8007ea8:	2e0a      	cmp	r6, #10
 8007eaa:	d104      	bne.n	8007eb6 <__swbuf_r+0x64>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f001 fda2 	bl	80099f8 <_fflush_r>
 8007eb4:	b938      	cbnz	r0, 8007ec6 <__swbuf_r+0x74>
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f805 	bl	8007ecc <__swsetup_r>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d0d5      	beq.n	8007e72 <__swbuf_r+0x20>
 8007ec6:	f04f 37ff 	mov.w	r7, #4294967295
 8007eca:	e7f4      	b.n	8007eb6 <__swbuf_r+0x64>

08007ecc <__swsetup_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <__swsetup_r+0xac>)
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	b118      	cbz	r0, 8007ee0 <__swsetup_r+0x14>
 8007ed8:	6a03      	ldr	r3, [r0, #32]
 8007eda:	b90b      	cbnz	r3, 8007ee0 <__swsetup_r+0x14>
 8007edc:	f7ff fed2 	bl	8007c84 <__sinit>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee6:	0718      	lsls	r0, r3, #28
 8007ee8:	d422      	bmi.n	8007f30 <__swsetup_r+0x64>
 8007eea:	06d9      	lsls	r1, r3, #27
 8007eec:	d407      	bmi.n	8007efe <__swsetup_r+0x32>
 8007eee:	2309      	movs	r3, #9
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8007efc:	e034      	b.n	8007f68 <__swsetup_r+0x9c>
 8007efe:	0758      	lsls	r0, r3, #29
 8007f00:	d512      	bpl.n	8007f28 <__swsetup_r+0x5c>
 8007f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f04:	b141      	cbz	r1, 8007f18 <__swsetup_r+0x4c>
 8007f06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f0a:	4299      	cmp	r1, r3
 8007f0c:	d002      	beq.n	8007f14 <__swsetup_r+0x48>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 ff2c 	bl	8008d6c <_free_r>
 8007f14:	2300      	movs	r3, #0
 8007f16:	6363      	str	r3, [r4, #52]	; 0x34
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	2300      	movs	r3, #0
 8007f22:	6063      	str	r3, [r4, #4]
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f043 0308 	orr.w	r3, r3, #8
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	b94b      	cbnz	r3, 8007f48 <__swsetup_r+0x7c>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3e:	d003      	beq.n	8007f48 <__swsetup_r+0x7c>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f001 fda6 	bl	8009a94 <__smakebuf_r>
 8007f48:	89a0      	ldrh	r0, [r4, #12]
 8007f4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f4e:	f010 0301 	ands.w	r3, r0, #1
 8007f52:	d00a      	beq.n	8007f6a <__swsetup_r+0x9e>
 8007f54:	2300      	movs	r3, #0
 8007f56:	60a3      	str	r3, [r4, #8]
 8007f58:	6963      	ldr	r3, [r4, #20]
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	61a3      	str	r3, [r4, #24]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	b943      	cbnz	r3, 8007f74 <__swsetup_r+0xa8>
 8007f62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f66:	d1c4      	bne.n	8007ef2 <__swsetup_r+0x26>
 8007f68:	bd38      	pop	{r3, r4, r5, pc}
 8007f6a:	0781      	lsls	r1, r0, #30
 8007f6c:	bf58      	it	pl
 8007f6e:	6963      	ldrpl	r3, [r4, #20]
 8007f70:	60a3      	str	r3, [r4, #8]
 8007f72:	e7f4      	b.n	8007f5e <__swsetup_r+0x92>
 8007f74:	2000      	movs	r0, #0
 8007f76:	e7f7      	b.n	8007f68 <__swsetup_r+0x9c>
 8007f78:	20000074 	.word	0x20000074

08007f7c <memset>:
 8007f7c:	4402      	add	r2, r0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d100      	bne.n	8007f86 <memset+0xa>
 8007f84:	4770      	bx	lr
 8007f86:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8a:	e7f9      	b.n	8007f80 <memset+0x4>

08007f8c <_localeconv_r>:
 8007f8c:	4800      	ldr	r0, [pc, #0]	; (8007f90 <_localeconv_r+0x4>)
 8007f8e:	4770      	bx	lr
 8007f90:	20000168 	.word	0x20000168

08007f94 <_close_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d06      	ldr	r5, [pc, #24]	; (8007fb0 <_close_r+0x1c>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	f7f9 fd5d 	bl	8001a5e <_close>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_close_r+0x1a>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_close_r+0x1a>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	200114ec 	.word	0x200114ec

08007fb4 <_lseek_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	; (8007fd4 <_lseek_r+0x20>)
 8007fb8:	4604      	mov	r4, r0
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7f9 fd72 	bl	8001aac <_lseek>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_lseek_r+0x1e>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_lseek_r+0x1e>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	200114ec 	.word	0x200114ec

08007fd8 <_read_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	; (8007ff8 <_read_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7f9 fd1c 	bl	8001a24 <_read>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_read_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_read_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	200114ec 	.word	0x200114ec

08007ffc <_write_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_write_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7f9 faee 	bl	80015ec <_write>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_write_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_write_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	200114ec 	.word	0x200114ec

08008020 <__errno>:
 8008020:	4b01      	ldr	r3, [pc, #4]	; (8008028 <__errno+0x8>)
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000074 	.word	0x20000074

0800802c <__libc_init_array>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	4d0d      	ldr	r5, [pc, #52]	; (8008064 <__libc_init_array+0x38>)
 8008030:	4c0d      	ldr	r4, [pc, #52]	; (8008068 <__libc_init_array+0x3c>)
 8008032:	1b64      	subs	r4, r4, r5
 8008034:	10a4      	asrs	r4, r4, #2
 8008036:	2600      	movs	r6, #0
 8008038:	42a6      	cmp	r6, r4
 800803a:	d109      	bne.n	8008050 <__libc_init_array+0x24>
 800803c:	4d0b      	ldr	r5, [pc, #44]	; (800806c <__libc_init_array+0x40>)
 800803e:	4c0c      	ldr	r4, [pc, #48]	; (8008070 <__libc_init_array+0x44>)
 8008040:	f001 fff6 	bl	800a030 <_init>
 8008044:	1b64      	subs	r4, r4, r5
 8008046:	10a4      	asrs	r4, r4, #2
 8008048:	2600      	movs	r6, #0
 800804a:	42a6      	cmp	r6, r4
 800804c:	d105      	bne.n	800805a <__libc_init_array+0x2e>
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	f855 3b04 	ldr.w	r3, [r5], #4
 8008054:	4798      	blx	r3
 8008056:	3601      	adds	r6, #1
 8008058:	e7ee      	b.n	8008038 <__libc_init_array+0xc>
 800805a:	f855 3b04 	ldr.w	r3, [r5], #4
 800805e:	4798      	blx	r3
 8008060:	3601      	adds	r6, #1
 8008062:	e7f2      	b.n	800804a <__libc_init_array+0x1e>
 8008064:	0801dcbc 	.word	0x0801dcbc
 8008068:	0801dcbc 	.word	0x0801dcbc
 800806c:	0801dcbc 	.word	0x0801dcbc
 8008070:	0801dcc0 	.word	0x0801dcc0

08008074 <__retarget_lock_acquire_recursive>:
 8008074:	4770      	bx	lr

08008076 <__retarget_lock_release_recursive>:
 8008076:	4770      	bx	lr

08008078 <quorem>:
 8008078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	6903      	ldr	r3, [r0, #16]
 800807e:	690c      	ldr	r4, [r1, #16]
 8008080:	42a3      	cmp	r3, r4
 8008082:	4607      	mov	r7, r0
 8008084:	db7e      	blt.n	8008184 <quorem+0x10c>
 8008086:	3c01      	subs	r4, #1
 8008088:	f101 0814 	add.w	r8, r1, #20
 800808c:	f100 0514 	add.w	r5, r0, #20
 8008090:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800809a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800809e:	3301      	adds	r3, #1
 80080a0:	429a      	cmp	r2, r3
 80080a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80080ae:	d331      	bcc.n	8008114 <quorem+0x9c>
 80080b0:	f04f 0e00 	mov.w	lr, #0
 80080b4:	4640      	mov	r0, r8
 80080b6:	46ac      	mov	ip, r5
 80080b8:	46f2      	mov	sl, lr
 80080ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80080be:	b293      	uxth	r3, r2
 80080c0:	fb06 e303 	mla	r3, r6, r3, lr
 80080c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080c8:	0c1a      	lsrs	r2, r3, #16
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	ebaa 0303 	sub.w	r3, sl, r3
 80080d0:	f8dc a000 	ldr.w	sl, [ip]
 80080d4:	fa13 f38a 	uxtah	r3, r3, sl
 80080d8:	fb06 220e 	mla	r2, r6, lr, r2
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	9b00      	ldr	r3, [sp, #0]
 80080e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080e4:	b292      	uxth	r2, r2
 80080e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80080f2:	4581      	cmp	r9, r0
 80080f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f8:	f84c 3b04 	str.w	r3, [ip], #4
 80080fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008100:	d2db      	bcs.n	80080ba <quorem+0x42>
 8008102:	f855 300b 	ldr.w	r3, [r5, fp]
 8008106:	b92b      	cbnz	r3, 8008114 <quorem+0x9c>
 8008108:	9b01      	ldr	r3, [sp, #4]
 800810a:	3b04      	subs	r3, #4
 800810c:	429d      	cmp	r5, r3
 800810e:	461a      	mov	r2, r3
 8008110:	d32c      	bcc.n	800816c <quorem+0xf4>
 8008112:	613c      	str	r4, [r7, #16]
 8008114:	4638      	mov	r0, r7
 8008116:	f001 f9a5 	bl	8009464 <__mcmp>
 800811a:	2800      	cmp	r0, #0
 800811c:	db22      	blt.n	8008164 <quorem+0xec>
 800811e:	3601      	adds	r6, #1
 8008120:	4629      	mov	r1, r5
 8008122:	2000      	movs	r0, #0
 8008124:	f858 2b04 	ldr.w	r2, [r8], #4
 8008128:	f8d1 c000 	ldr.w	ip, [r1]
 800812c:	b293      	uxth	r3, r2
 800812e:	1ac3      	subs	r3, r0, r3
 8008130:	0c12      	lsrs	r2, r2, #16
 8008132:	fa13 f38c 	uxtah	r3, r3, ip
 8008136:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800813a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800813e:	b29b      	uxth	r3, r3
 8008140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008144:	45c1      	cmp	r9, r8
 8008146:	f841 3b04 	str.w	r3, [r1], #4
 800814a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800814e:	d2e9      	bcs.n	8008124 <quorem+0xac>
 8008150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008154:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008158:	b922      	cbnz	r2, 8008164 <quorem+0xec>
 800815a:	3b04      	subs	r3, #4
 800815c:	429d      	cmp	r5, r3
 800815e:	461a      	mov	r2, r3
 8008160:	d30a      	bcc.n	8008178 <quorem+0x100>
 8008162:	613c      	str	r4, [r7, #16]
 8008164:	4630      	mov	r0, r6
 8008166:	b003      	add	sp, #12
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	3b04      	subs	r3, #4
 8008170:	2a00      	cmp	r2, #0
 8008172:	d1ce      	bne.n	8008112 <quorem+0x9a>
 8008174:	3c01      	subs	r4, #1
 8008176:	e7c9      	b.n	800810c <quorem+0x94>
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	3b04      	subs	r3, #4
 800817c:	2a00      	cmp	r2, #0
 800817e:	d1f0      	bne.n	8008162 <quorem+0xea>
 8008180:	3c01      	subs	r4, #1
 8008182:	e7eb      	b.n	800815c <quorem+0xe4>
 8008184:	2000      	movs	r0, #0
 8008186:	e7ee      	b.n	8008166 <quorem+0xee>

08008188 <_dtoa_r>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	ed2d 8b04 	vpush	{d8-d9}
 8008190:	69c5      	ldr	r5, [r0, #28]
 8008192:	b093      	sub	sp, #76	; 0x4c
 8008194:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008198:	ec57 6b10 	vmov	r6, r7, d0
 800819c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081a0:	9107      	str	r1, [sp, #28]
 80081a2:	4604      	mov	r4, r0
 80081a4:	920a      	str	r2, [sp, #40]	; 0x28
 80081a6:	930d      	str	r3, [sp, #52]	; 0x34
 80081a8:	b975      	cbnz	r5, 80081c8 <_dtoa_r+0x40>
 80081aa:	2010      	movs	r0, #16
 80081ac:	f000 fe2a 	bl	8008e04 <malloc>
 80081b0:	4602      	mov	r2, r0
 80081b2:	61e0      	str	r0, [r4, #28]
 80081b4:	b920      	cbnz	r0, 80081c0 <_dtoa_r+0x38>
 80081b6:	4bae      	ldr	r3, [pc, #696]	; (8008470 <_dtoa_r+0x2e8>)
 80081b8:	21ef      	movs	r1, #239	; 0xef
 80081ba:	48ae      	ldr	r0, [pc, #696]	; (8008474 <_dtoa_r+0x2ec>)
 80081bc:	f001 fce6 	bl	8009b8c <__assert_func>
 80081c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081c4:	6005      	str	r5, [r0, #0]
 80081c6:	60c5      	str	r5, [r0, #12]
 80081c8:	69e3      	ldr	r3, [r4, #28]
 80081ca:	6819      	ldr	r1, [r3, #0]
 80081cc:	b151      	cbz	r1, 80081e4 <_dtoa_r+0x5c>
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	604a      	str	r2, [r1, #4]
 80081d2:	2301      	movs	r3, #1
 80081d4:	4093      	lsls	r3, r2
 80081d6:	608b      	str	r3, [r1, #8]
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 ff07 	bl	8008fec <_Bfree>
 80081de:	69e3      	ldr	r3, [r4, #28]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	1e3b      	subs	r3, r7, #0
 80081e6:	bfbb      	ittet	lt
 80081e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081ec:	9303      	strlt	r3, [sp, #12]
 80081ee:	2300      	movge	r3, #0
 80081f0:	2201      	movlt	r2, #1
 80081f2:	bfac      	ite	ge
 80081f4:	f8c8 3000 	strge.w	r3, [r8]
 80081f8:	f8c8 2000 	strlt.w	r2, [r8]
 80081fc:	4b9e      	ldr	r3, [pc, #632]	; (8008478 <_dtoa_r+0x2f0>)
 80081fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008202:	ea33 0308 	bics.w	r3, r3, r8
 8008206:	d11b      	bne.n	8008240 <_dtoa_r+0xb8>
 8008208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800820a:	f242 730f 	movw	r3, #9999	; 0x270f
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008214:	4333      	orrs	r3, r6
 8008216:	f000 8593 	beq.w	8008d40 <_dtoa_r+0xbb8>
 800821a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800821c:	b963      	cbnz	r3, 8008238 <_dtoa_r+0xb0>
 800821e:	4b97      	ldr	r3, [pc, #604]	; (800847c <_dtoa_r+0x2f4>)
 8008220:	e027      	b.n	8008272 <_dtoa_r+0xea>
 8008222:	4b97      	ldr	r3, [pc, #604]	; (8008480 <_dtoa_r+0x2f8>)
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	9800      	ldr	r0, [sp, #0]
 800822e:	b013      	add	sp, #76	; 0x4c
 8008230:	ecbd 8b04 	vpop	{d8-d9}
 8008234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008238:	4b90      	ldr	r3, [pc, #576]	; (800847c <_dtoa_r+0x2f4>)
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	3303      	adds	r3, #3
 800823e:	e7f3      	b.n	8008228 <_dtoa_r+0xa0>
 8008240:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008244:	2200      	movs	r2, #0
 8008246:	ec51 0b17 	vmov	r0, r1, d7
 800824a:	eeb0 8a47 	vmov.f32	s16, s14
 800824e:	eef0 8a67 	vmov.f32	s17, s15
 8008252:	2300      	movs	r3, #0
 8008254:	f7f8 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8008258:	4681      	mov	r9, r0
 800825a:	b160      	cbz	r0, 8008276 <_dtoa_r+0xee>
 800825c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800825e:	2301      	movs	r3, #1
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8568 	beq.w	8008d3a <_dtoa_r+0xbb2>
 800826a:	4b86      	ldr	r3, [pc, #536]	; (8008484 <_dtoa_r+0x2fc>)
 800826c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	3b01      	subs	r3, #1
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	e7da      	b.n	800822c <_dtoa_r+0xa4>
 8008276:	aa10      	add	r2, sp, #64	; 0x40
 8008278:	a911      	add	r1, sp, #68	; 0x44
 800827a:	4620      	mov	r0, r4
 800827c:	eeb0 0a48 	vmov.f32	s0, s16
 8008280:	eef0 0a68 	vmov.f32	s1, s17
 8008284:	f001 f994 	bl	80095b0 <__d2b>
 8008288:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800828c:	4682      	mov	sl, r0
 800828e:	2d00      	cmp	r5, #0
 8008290:	d07f      	beq.n	8008392 <_dtoa_r+0x20a>
 8008292:	ee18 3a90 	vmov	r3, s17
 8008296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800829a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800829e:	ec51 0b18 	vmov	r0, r1, d8
 80082a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80082ae:	4619      	mov	r1, r3
 80082b0:	2200      	movs	r2, #0
 80082b2:	4b75      	ldr	r3, [pc, #468]	; (8008488 <_dtoa_r+0x300>)
 80082b4:	f7f7 ffe8 	bl	8000288 <__aeabi_dsub>
 80082b8:	a367      	add	r3, pc, #412	; (adr r3, 8008458 <_dtoa_r+0x2d0>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	a367      	add	r3, pc, #412	; (adr r3, 8008460 <_dtoa_r+0x2d8>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ffe0 	bl	800028c <__adddf3>
 80082cc:	4606      	mov	r6, r0
 80082ce:	4628      	mov	r0, r5
 80082d0:	460f      	mov	r7, r1
 80082d2:	f7f8 f927 	bl	8000524 <__aeabi_i2d>
 80082d6:	a364      	add	r3, pc, #400	; (adr r3, 8008468 <_dtoa_r+0x2e0>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f7 ffd0 	bl	800028c <__adddf3>
 80082ec:	4606      	mov	r6, r0
 80082ee:	460f      	mov	r7, r1
 80082f0:	f7f8 fc32 	bl	8000b58 <__aeabi_d2iz>
 80082f4:	2200      	movs	r2, #0
 80082f6:	4683      	mov	fp, r0
 80082f8:	2300      	movs	r3, #0
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 fbed 	bl	8000adc <__aeabi_dcmplt>
 8008302:	b148      	cbz	r0, 8008318 <_dtoa_r+0x190>
 8008304:	4658      	mov	r0, fp
 8008306:	f7f8 f90d 	bl	8000524 <__aeabi_i2d>
 800830a:	4632      	mov	r2, r6
 800830c:	463b      	mov	r3, r7
 800830e:	f7f8 fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008312:	b908      	cbnz	r0, 8008318 <_dtoa_r+0x190>
 8008314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008318:	f1bb 0f16 	cmp.w	fp, #22
 800831c:	d857      	bhi.n	80083ce <_dtoa_r+0x246>
 800831e:	4b5b      	ldr	r3, [pc, #364]	; (800848c <_dtoa_r+0x304>)
 8008320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	ec51 0b18 	vmov	r0, r1, d8
 800832c:	f7f8 fbd6 	bl	8000adc <__aeabi_dcmplt>
 8008330:	2800      	cmp	r0, #0
 8008332:	d04e      	beq.n	80083d2 <_dtoa_r+0x24a>
 8008334:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008338:	2300      	movs	r3, #0
 800833a:	930c      	str	r3, [sp, #48]	; 0x30
 800833c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800833e:	1b5b      	subs	r3, r3, r5
 8008340:	1e5a      	subs	r2, r3, #1
 8008342:	bf45      	ittet	mi
 8008344:	f1c3 0301 	rsbmi	r3, r3, #1
 8008348:	9305      	strmi	r3, [sp, #20]
 800834a:	2300      	movpl	r3, #0
 800834c:	2300      	movmi	r3, #0
 800834e:	9206      	str	r2, [sp, #24]
 8008350:	bf54      	ite	pl
 8008352:	9305      	strpl	r3, [sp, #20]
 8008354:	9306      	strmi	r3, [sp, #24]
 8008356:	f1bb 0f00 	cmp.w	fp, #0
 800835a:	db3c      	blt.n	80083d6 <_dtoa_r+0x24e>
 800835c:	9b06      	ldr	r3, [sp, #24]
 800835e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008362:	445b      	add	r3, fp
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	2300      	movs	r3, #0
 8008368:	9308      	str	r3, [sp, #32]
 800836a:	9b07      	ldr	r3, [sp, #28]
 800836c:	2b09      	cmp	r3, #9
 800836e:	d868      	bhi.n	8008442 <_dtoa_r+0x2ba>
 8008370:	2b05      	cmp	r3, #5
 8008372:	bfc4      	itt	gt
 8008374:	3b04      	subgt	r3, #4
 8008376:	9307      	strgt	r3, [sp, #28]
 8008378:	9b07      	ldr	r3, [sp, #28]
 800837a:	f1a3 0302 	sub.w	r3, r3, #2
 800837e:	bfcc      	ite	gt
 8008380:	2500      	movgt	r5, #0
 8008382:	2501      	movle	r5, #1
 8008384:	2b03      	cmp	r3, #3
 8008386:	f200 8085 	bhi.w	8008494 <_dtoa_r+0x30c>
 800838a:	e8df f003 	tbb	[pc, r3]
 800838e:	3b2e      	.short	0x3b2e
 8008390:	5839      	.short	0x5839
 8008392:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008396:	441d      	add	r5, r3
 8008398:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800839c:	2b20      	cmp	r3, #32
 800839e:	bfc1      	itttt	gt
 80083a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80083a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80083ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80083b0:	bfd6      	itet	le
 80083b2:	f1c3 0320 	rsble	r3, r3, #32
 80083b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80083ba:	fa06 f003 	lslle.w	r0, r6, r3
 80083be:	f7f8 f8a1 	bl	8000504 <__aeabi_ui2d>
 80083c2:	2201      	movs	r2, #1
 80083c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80083c8:	3d01      	subs	r5, #1
 80083ca:	920e      	str	r2, [sp, #56]	; 0x38
 80083cc:	e76f      	b.n	80082ae <_dtoa_r+0x126>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e7b3      	b.n	800833a <_dtoa_r+0x1b2>
 80083d2:	900c      	str	r0, [sp, #48]	; 0x30
 80083d4:	e7b2      	b.n	800833c <_dtoa_r+0x1b4>
 80083d6:	9b05      	ldr	r3, [sp, #20]
 80083d8:	eba3 030b 	sub.w	r3, r3, fp
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	f1cb 0300 	rsb	r3, fp, #0
 80083e2:	9308      	str	r3, [sp, #32]
 80083e4:	2300      	movs	r3, #0
 80083e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083e8:	e7bf      	b.n	800836a <_dtoa_r+0x1e2>
 80083ea:	2300      	movs	r3, #0
 80083ec:	9309      	str	r3, [sp, #36]	; 0x24
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dc52      	bgt.n	800849a <_dtoa_r+0x312>
 80083f4:	2301      	movs	r3, #1
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	9304      	str	r3, [sp, #16]
 80083fa:	461a      	mov	r2, r3
 80083fc:	920a      	str	r2, [sp, #40]	; 0x28
 80083fe:	e00b      	b.n	8008418 <_dtoa_r+0x290>
 8008400:	2301      	movs	r3, #1
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x264>
 8008404:	2300      	movs	r3, #0
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840a:	445b      	add	r3, fp
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	3301      	adds	r3, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	bfb8      	it	lt
 8008416:	2301      	movlt	r3, #1
 8008418:	69e0      	ldr	r0, [r4, #28]
 800841a:	2100      	movs	r1, #0
 800841c:	2204      	movs	r2, #4
 800841e:	f102 0614 	add.w	r6, r2, #20
 8008422:	429e      	cmp	r6, r3
 8008424:	d93d      	bls.n	80084a2 <_dtoa_r+0x31a>
 8008426:	6041      	str	r1, [r0, #4]
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fd9f 	bl	8008f6c <_Balloc>
 800842e:	9000      	str	r0, [sp, #0]
 8008430:	2800      	cmp	r0, #0
 8008432:	d139      	bne.n	80084a8 <_dtoa_r+0x320>
 8008434:	4b16      	ldr	r3, [pc, #88]	; (8008490 <_dtoa_r+0x308>)
 8008436:	4602      	mov	r2, r0
 8008438:	f240 11af 	movw	r1, #431	; 0x1af
 800843c:	e6bd      	b.n	80081ba <_dtoa_r+0x32>
 800843e:	2301      	movs	r3, #1
 8008440:	e7e1      	b.n	8008406 <_dtoa_r+0x27e>
 8008442:	2501      	movs	r5, #1
 8008444:	2300      	movs	r3, #0
 8008446:	9307      	str	r3, [sp, #28]
 8008448:	9509      	str	r5, [sp, #36]	; 0x24
 800844a:	f04f 33ff 	mov.w	r3, #4294967295
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	2200      	movs	r2, #0
 8008454:	2312      	movs	r3, #18
 8008456:	e7d1      	b.n	80083fc <_dtoa_r+0x274>
 8008458:	636f4361 	.word	0x636f4361
 800845c:	3fd287a7 	.word	0x3fd287a7
 8008460:	8b60c8b3 	.word	0x8b60c8b3
 8008464:	3fc68a28 	.word	0x3fc68a28
 8008468:	509f79fb 	.word	0x509f79fb
 800846c:	3fd34413 	.word	0x3fd34413
 8008470:	0801d981 	.word	0x0801d981
 8008474:	0801d998 	.word	0x0801d998
 8008478:	7ff00000 	.word	0x7ff00000
 800847c:	0801d97d 	.word	0x0801d97d
 8008480:	0801d974 	.word	0x0801d974
 8008484:	0801d951 	.word	0x0801d951
 8008488:	3ff80000 	.word	0x3ff80000
 800848c:	0801da88 	.word	0x0801da88
 8008490:	0801d9f0 	.word	0x0801d9f0
 8008494:	2301      	movs	r3, #1
 8008496:	9309      	str	r3, [sp, #36]	; 0x24
 8008498:	e7d7      	b.n	800844a <_dtoa_r+0x2c2>
 800849a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	9304      	str	r3, [sp, #16]
 80084a0:	e7ba      	b.n	8008418 <_dtoa_r+0x290>
 80084a2:	3101      	adds	r1, #1
 80084a4:	0052      	lsls	r2, r2, #1
 80084a6:	e7ba      	b.n	800841e <_dtoa_r+0x296>
 80084a8:	69e3      	ldr	r3, [r4, #28]
 80084aa:	9a00      	ldr	r2, [sp, #0]
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	2b0e      	cmp	r3, #14
 80084b2:	f200 80a8 	bhi.w	8008606 <_dtoa_r+0x47e>
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	f000 80a5 	beq.w	8008606 <_dtoa_r+0x47e>
 80084bc:	f1bb 0f00 	cmp.w	fp, #0
 80084c0:	dd38      	ble.n	8008534 <_dtoa_r+0x3ac>
 80084c2:	4bc0      	ldr	r3, [pc, #768]	; (80087c4 <_dtoa_r+0x63c>)
 80084c4:	f00b 020f 	and.w	r2, fp, #15
 80084c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80084d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80084d8:	d019      	beq.n	800850e <_dtoa_r+0x386>
 80084da:	4bbb      	ldr	r3, [pc, #748]	; (80087c8 <_dtoa_r+0x640>)
 80084dc:	ec51 0b18 	vmov	r0, r1, d8
 80084e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084e4:	f7f8 f9b2 	bl	800084c <__aeabi_ddiv>
 80084e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084ec:	f008 080f 	and.w	r8, r8, #15
 80084f0:	2503      	movs	r5, #3
 80084f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80087c8 <_dtoa_r+0x640>
 80084f6:	f1b8 0f00 	cmp.w	r8, #0
 80084fa:	d10a      	bne.n	8008512 <_dtoa_r+0x38a>
 80084fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008500:	4632      	mov	r2, r6
 8008502:	463b      	mov	r3, r7
 8008504:	f7f8 f9a2 	bl	800084c <__aeabi_ddiv>
 8008508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800850c:	e02b      	b.n	8008566 <_dtoa_r+0x3de>
 800850e:	2502      	movs	r5, #2
 8008510:	e7ef      	b.n	80084f2 <_dtoa_r+0x36a>
 8008512:	f018 0f01 	tst.w	r8, #1
 8008516:	d008      	beq.n	800852a <_dtoa_r+0x3a2>
 8008518:	4630      	mov	r0, r6
 800851a:	4639      	mov	r1, r7
 800851c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008520:	f7f8 f86a 	bl	80005f8 <__aeabi_dmul>
 8008524:	3501      	adds	r5, #1
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800852e:	f109 0908 	add.w	r9, r9, #8
 8008532:	e7e0      	b.n	80084f6 <_dtoa_r+0x36e>
 8008534:	f000 809f 	beq.w	8008676 <_dtoa_r+0x4ee>
 8008538:	f1cb 0600 	rsb	r6, fp, #0
 800853c:	4ba1      	ldr	r3, [pc, #644]	; (80087c4 <_dtoa_r+0x63c>)
 800853e:	4fa2      	ldr	r7, [pc, #648]	; (80087c8 <_dtoa_r+0x640>)
 8008540:	f006 020f 	and.w	r2, r6, #15
 8008544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	ec51 0b18 	vmov	r0, r1, d8
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008558:	1136      	asrs	r6, r6, #4
 800855a:	2300      	movs	r3, #0
 800855c:	2502      	movs	r5, #2
 800855e:	2e00      	cmp	r6, #0
 8008560:	d17e      	bne.n	8008660 <_dtoa_r+0x4d8>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1d0      	bne.n	8008508 <_dtoa_r+0x380>
 8008566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008568:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8084 	beq.w	800867a <_dtoa_r+0x4f2>
 8008572:	4b96      	ldr	r3, [pc, #600]	; (80087cc <_dtoa_r+0x644>)
 8008574:	2200      	movs	r2, #0
 8008576:	4640      	mov	r0, r8
 8008578:	4649      	mov	r1, r9
 800857a:	f7f8 faaf 	bl	8000adc <__aeabi_dcmplt>
 800857e:	2800      	cmp	r0, #0
 8008580:	d07b      	beq.n	800867a <_dtoa_r+0x4f2>
 8008582:	9b04      	ldr	r3, [sp, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d078      	beq.n	800867a <_dtoa_r+0x4f2>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	dd39      	ble.n	8008602 <_dtoa_r+0x47a>
 800858e:	4b90      	ldr	r3, [pc, #576]	; (80087d0 <_dtoa_r+0x648>)
 8008590:	2200      	movs	r2, #0
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859e:	9e01      	ldr	r6, [sp, #4]
 80085a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085a4:	3501      	adds	r5, #1
 80085a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7f7 ffba 	bl	8000524 <__aeabi_i2d>
 80085b0:	4642      	mov	r2, r8
 80085b2:	464b      	mov	r3, r9
 80085b4:	f7f8 f820 	bl	80005f8 <__aeabi_dmul>
 80085b8:	4b86      	ldr	r3, [pc, #536]	; (80087d4 <_dtoa_r+0x64c>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	f7f7 fe66 	bl	800028c <__adddf3>
 80085c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	d158      	bne.n	8008680 <_dtoa_r+0x4f8>
 80085ce:	4b82      	ldr	r3, [pc, #520]	; (80087d8 <_dtoa_r+0x650>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fe57 	bl	8000288 <__aeabi_dsub>
 80085da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085de:	4680      	mov	r8, r0
 80085e0:	4689      	mov	r9, r1
 80085e2:	f7f8 fa99 	bl	8000b18 <__aeabi_dcmpgt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f040 8296 	bne.w	8008b18 <_dtoa_r+0x990>
 80085ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085f0:	4640      	mov	r0, r8
 80085f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f8 fa70 	bl	8000adc <__aeabi_dcmplt>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	f040 8289 	bne.w	8008b14 <_dtoa_r+0x98c>
 8008602:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008608:	2b00      	cmp	r3, #0
 800860a:	f2c0 814e 	blt.w	80088aa <_dtoa_r+0x722>
 800860e:	f1bb 0f0e 	cmp.w	fp, #14
 8008612:	f300 814a 	bgt.w	80088aa <_dtoa_r+0x722>
 8008616:	4b6b      	ldr	r3, [pc, #428]	; (80087c4 <_dtoa_r+0x63c>)
 8008618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800861c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	f280 80dc 	bge.w	80087e0 <_dtoa_r+0x658>
 8008628:	9b04      	ldr	r3, [sp, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f300 80d8 	bgt.w	80087e0 <_dtoa_r+0x658>
 8008630:	f040 826f 	bne.w	8008b12 <_dtoa_r+0x98a>
 8008634:	4b68      	ldr	r3, [pc, #416]	; (80087d8 <_dtoa_r+0x650>)
 8008636:	2200      	movs	r2, #0
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f7 ffdc 	bl	80005f8 <__aeabi_dmul>
 8008640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008644:	f7f8 fa5e 	bl	8000b04 <__aeabi_dcmpge>
 8008648:	9e04      	ldr	r6, [sp, #16]
 800864a:	4637      	mov	r7, r6
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 8245 	bne.w	8008adc <_dtoa_r+0x954>
 8008652:	9d00      	ldr	r5, [sp, #0]
 8008654:	2331      	movs	r3, #49	; 0x31
 8008656:	f805 3b01 	strb.w	r3, [r5], #1
 800865a:	f10b 0b01 	add.w	fp, fp, #1
 800865e:	e241      	b.n	8008ae4 <_dtoa_r+0x95c>
 8008660:	07f2      	lsls	r2, r6, #31
 8008662:	d505      	bpl.n	8008670 <_dtoa_r+0x4e8>
 8008664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008668:	f7f7 ffc6 	bl	80005f8 <__aeabi_dmul>
 800866c:	3501      	adds	r5, #1
 800866e:	2301      	movs	r3, #1
 8008670:	1076      	asrs	r6, r6, #1
 8008672:	3708      	adds	r7, #8
 8008674:	e773      	b.n	800855e <_dtoa_r+0x3d6>
 8008676:	2502      	movs	r5, #2
 8008678:	e775      	b.n	8008566 <_dtoa_r+0x3de>
 800867a:	9e04      	ldr	r6, [sp, #16]
 800867c:	465f      	mov	r7, fp
 800867e:	e792      	b.n	80085a6 <_dtoa_r+0x41e>
 8008680:	9900      	ldr	r1, [sp, #0]
 8008682:	4b50      	ldr	r3, [pc, #320]	; (80087c4 <_dtoa_r+0x63c>)
 8008684:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008688:	4431      	add	r1, r6
 800868a:	9102      	str	r1, [sp, #8]
 800868c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800868e:	eeb0 9a47 	vmov.f32	s18, s14
 8008692:	eef0 9a67 	vmov.f32	s19, s15
 8008696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800869a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800869e:	2900      	cmp	r1, #0
 80086a0:	d044      	beq.n	800872c <_dtoa_r+0x5a4>
 80086a2:	494e      	ldr	r1, [pc, #312]	; (80087dc <_dtoa_r+0x654>)
 80086a4:	2000      	movs	r0, #0
 80086a6:	f7f8 f8d1 	bl	800084c <__aeabi_ddiv>
 80086aa:	ec53 2b19 	vmov	r2, r3, d9
 80086ae:	f7f7 fdeb 	bl	8000288 <__aeabi_dsub>
 80086b2:	9d00      	ldr	r5, [sp, #0]
 80086b4:	ec41 0b19 	vmov	d9, r0, r1
 80086b8:	4649      	mov	r1, r9
 80086ba:	4640      	mov	r0, r8
 80086bc:	f7f8 fa4c 	bl	8000b58 <__aeabi_d2iz>
 80086c0:	4606      	mov	r6, r0
 80086c2:	f7f7 ff2f 	bl	8000524 <__aeabi_i2d>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f7 fddb 	bl	8000288 <__aeabi_dsub>
 80086d2:	3630      	adds	r6, #48	; 0x30
 80086d4:	f805 6b01 	strb.w	r6, [r5], #1
 80086d8:	ec53 2b19 	vmov	r2, r3, d9
 80086dc:	4680      	mov	r8, r0
 80086de:	4689      	mov	r9, r1
 80086e0:	f7f8 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d164      	bne.n	80087b2 <_dtoa_r+0x62a>
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	4937      	ldr	r1, [pc, #220]	; (80087cc <_dtoa_r+0x644>)
 80086ee:	2000      	movs	r0, #0
 80086f0:	f7f7 fdca 	bl	8000288 <__aeabi_dsub>
 80086f4:	ec53 2b19 	vmov	r2, r3, d9
 80086f8:	f7f8 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f040 80b6 	bne.w	800886e <_dtoa_r+0x6e6>
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	429d      	cmp	r5, r3
 8008706:	f43f af7c 	beq.w	8008602 <_dtoa_r+0x47a>
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <_dtoa_r+0x648>)
 800870c:	ec51 0b19 	vmov	r0, r1, d9
 8008710:	2200      	movs	r2, #0
 8008712:	f7f7 ff71 	bl	80005f8 <__aeabi_dmul>
 8008716:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <_dtoa_r+0x648>)
 8008718:	ec41 0b19 	vmov	d9, r0, r1
 800871c:	2200      	movs	r2, #0
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	f7f7 ff69 	bl	80005f8 <__aeabi_dmul>
 8008726:	4680      	mov	r8, r0
 8008728:	4689      	mov	r9, r1
 800872a:	e7c5      	b.n	80086b8 <_dtoa_r+0x530>
 800872c:	ec51 0b17 	vmov	r0, r1, d7
 8008730:	f7f7 ff62 	bl	80005f8 <__aeabi_dmul>
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	9d00      	ldr	r5, [sp, #0]
 8008738:	930f      	str	r3, [sp, #60]	; 0x3c
 800873a:	ec41 0b19 	vmov	d9, r0, r1
 800873e:	4649      	mov	r1, r9
 8008740:	4640      	mov	r0, r8
 8008742:	f7f8 fa09 	bl	8000b58 <__aeabi_d2iz>
 8008746:	4606      	mov	r6, r0
 8008748:	f7f7 feec 	bl	8000524 <__aeabi_i2d>
 800874c:	3630      	adds	r6, #48	; 0x30
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4640      	mov	r0, r8
 8008754:	4649      	mov	r1, r9
 8008756:	f7f7 fd97 	bl	8000288 <__aeabi_dsub>
 800875a:	f805 6b01 	strb.w	r6, [r5], #1
 800875e:	9b02      	ldr	r3, [sp, #8]
 8008760:	429d      	cmp	r5, r3
 8008762:	4680      	mov	r8, r0
 8008764:	4689      	mov	r9, r1
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	d124      	bne.n	80087b6 <_dtoa_r+0x62e>
 800876c:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <_dtoa_r+0x654>)
 800876e:	ec51 0b19 	vmov	r0, r1, d9
 8008772:	f7f7 fd8b 	bl	800028c <__adddf3>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	f7f8 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 8008782:	2800      	cmp	r0, #0
 8008784:	d173      	bne.n	800886e <_dtoa_r+0x6e6>
 8008786:	ec53 2b19 	vmov	r2, r3, d9
 800878a:	4914      	ldr	r1, [pc, #80]	; (80087dc <_dtoa_r+0x654>)
 800878c:	2000      	movs	r0, #0
 800878e:	f7f7 fd7b 	bl	8000288 <__aeabi_dsub>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f7f8 f99f 	bl	8000adc <__aeabi_dcmplt>
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f af2f 	beq.w	8008602 <_dtoa_r+0x47a>
 80087a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087a6:	1e6b      	subs	r3, r5, #1
 80087a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087ae:	2b30      	cmp	r3, #48	; 0x30
 80087b0:	d0f8      	beq.n	80087a4 <_dtoa_r+0x61c>
 80087b2:	46bb      	mov	fp, r7
 80087b4:	e04a      	b.n	800884c <_dtoa_r+0x6c4>
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <_dtoa_r+0x648>)
 80087b8:	f7f7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80087bc:	4680      	mov	r8, r0
 80087be:	4689      	mov	r9, r1
 80087c0:	e7bd      	b.n	800873e <_dtoa_r+0x5b6>
 80087c2:	bf00      	nop
 80087c4:	0801da88 	.word	0x0801da88
 80087c8:	0801da60 	.word	0x0801da60
 80087cc:	3ff00000 	.word	0x3ff00000
 80087d0:	40240000 	.word	0x40240000
 80087d4:	401c0000 	.word	0x401c0000
 80087d8:	40140000 	.word	0x40140000
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087e4:	9d00      	ldr	r5, [sp, #0]
 80087e6:	4642      	mov	r2, r8
 80087e8:	464b      	mov	r3, r9
 80087ea:	4630      	mov	r0, r6
 80087ec:	4639      	mov	r1, r7
 80087ee:	f7f8 f82d 	bl	800084c <__aeabi_ddiv>
 80087f2:	f7f8 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80087f6:	9001      	str	r0, [sp, #4]
 80087f8:	f7f7 fe94 	bl	8000524 <__aeabi_i2d>
 80087fc:	4642      	mov	r2, r8
 80087fe:	464b      	mov	r3, r9
 8008800:	f7f7 fefa 	bl	80005f8 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4630      	mov	r0, r6
 800880a:	4639      	mov	r1, r7
 800880c:	f7f7 fd3c 	bl	8000288 <__aeabi_dsub>
 8008810:	9e01      	ldr	r6, [sp, #4]
 8008812:	9f04      	ldr	r7, [sp, #16]
 8008814:	3630      	adds	r6, #48	; 0x30
 8008816:	f805 6b01 	strb.w	r6, [r5], #1
 800881a:	9e00      	ldr	r6, [sp, #0]
 800881c:	1bae      	subs	r6, r5, r6
 800881e:	42b7      	cmp	r7, r6
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	d134      	bne.n	8008890 <_dtoa_r+0x708>
 8008826:	f7f7 fd31 	bl	800028c <__adddf3>
 800882a:	4642      	mov	r2, r8
 800882c:	464b      	mov	r3, r9
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	f7f8 f971 	bl	8000b18 <__aeabi_dcmpgt>
 8008836:	b9c8      	cbnz	r0, 800886c <_dtoa_r+0x6e4>
 8008838:	4642      	mov	r2, r8
 800883a:	464b      	mov	r3, r9
 800883c:	4630      	mov	r0, r6
 800883e:	4639      	mov	r1, r7
 8008840:	f7f8 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 8008844:	b110      	cbz	r0, 800884c <_dtoa_r+0x6c4>
 8008846:	9b01      	ldr	r3, [sp, #4]
 8008848:	07db      	lsls	r3, r3, #31
 800884a:	d40f      	bmi.n	800886c <_dtoa_r+0x6e4>
 800884c:	4651      	mov	r1, sl
 800884e:	4620      	mov	r0, r4
 8008850:	f000 fbcc 	bl	8008fec <_Bfree>
 8008854:	2300      	movs	r3, #0
 8008856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008858:	702b      	strb	r3, [r5, #0]
 800885a:	f10b 0301 	add.w	r3, fp, #1
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008862:	2b00      	cmp	r3, #0
 8008864:	f43f ace2 	beq.w	800822c <_dtoa_r+0xa4>
 8008868:	601d      	str	r5, [r3, #0]
 800886a:	e4df      	b.n	800822c <_dtoa_r+0xa4>
 800886c:	465f      	mov	r7, fp
 800886e:	462b      	mov	r3, r5
 8008870:	461d      	mov	r5, r3
 8008872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008876:	2a39      	cmp	r2, #57	; 0x39
 8008878:	d106      	bne.n	8008888 <_dtoa_r+0x700>
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d1f7      	bne.n	8008870 <_dtoa_r+0x6e8>
 8008880:	9900      	ldr	r1, [sp, #0]
 8008882:	2230      	movs	r2, #48	; 0x30
 8008884:	3701      	adds	r7, #1
 8008886:	700a      	strb	r2, [r1, #0]
 8008888:	781a      	ldrb	r2, [r3, #0]
 800888a:	3201      	adds	r2, #1
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	e790      	b.n	80087b2 <_dtoa_r+0x62a>
 8008890:	4ba3      	ldr	r3, [pc, #652]	; (8008b20 <_dtoa_r+0x998>)
 8008892:	2200      	movs	r2, #0
 8008894:	f7f7 feb0 	bl	80005f8 <__aeabi_dmul>
 8008898:	2200      	movs	r2, #0
 800889a:	2300      	movs	r3, #0
 800889c:	4606      	mov	r6, r0
 800889e:	460f      	mov	r7, r1
 80088a0:	f7f8 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d09e      	beq.n	80087e6 <_dtoa_r+0x65e>
 80088a8:	e7d0      	b.n	800884c <_dtoa_r+0x6c4>
 80088aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	f000 80ca 	beq.w	8008a46 <_dtoa_r+0x8be>
 80088b2:	9a07      	ldr	r2, [sp, #28]
 80088b4:	2a01      	cmp	r2, #1
 80088b6:	f300 80ad 	bgt.w	8008a14 <_dtoa_r+0x88c>
 80088ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088bc:	2a00      	cmp	r2, #0
 80088be:	f000 80a5 	beq.w	8008a0c <_dtoa_r+0x884>
 80088c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088c6:	9e08      	ldr	r6, [sp, #32]
 80088c8:	9d05      	ldr	r5, [sp, #20]
 80088ca:	9a05      	ldr	r2, [sp, #20]
 80088cc:	441a      	add	r2, r3
 80088ce:	9205      	str	r2, [sp, #20]
 80088d0:	9a06      	ldr	r2, [sp, #24]
 80088d2:	2101      	movs	r1, #1
 80088d4:	441a      	add	r2, r3
 80088d6:	4620      	mov	r0, r4
 80088d8:	9206      	str	r2, [sp, #24]
 80088da:	f000 fc3d 	bl	8009158 <__i2b>
 80088de:	4607      	mov	r7, r0
 80088e0:	b165      	cbz	r5, 80088fc <_dtoa_r+0x774>
 80088e2:	9b06      	ldr	r3, [sp, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dd09      	ble.n	80088fc <_dtoa_r+0x774>
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	9a05      	ldr	r2, [sp, #20]
 80088ec:	bfa8      	it	ge
 80088ee:	462b      	movge	r3, r5
 80088f0:	1ad2      	subs	r2, r2, r3
 80088f2:	9205      	str	r2, [sp, #20]
 80088f4:	9a06      	ldr	r2, [sp, #24]
 80088f6:	1aed      	subs	r5, r5, r3
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	9306      	str	r3, [sp, #24]
 80088fc:	9b08      	ldr	r3, [sp, #32]
 80088fe:	b1f3      	cbz	r3, 800893e <_dtoa_r+0x7b6>
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80a3 	beq.w	8008a4e <_dtoa_r+0x8c6>
 8008908:	2e00      	cmp	r6, #0
 800890a:	dd10      	ble.n	800892e <_dtoa_r+0x7a6>
 800890c:	4639      	mov	r1, r7
 800890e:	4632      	mov	r2, r6
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fce1 	bl	80092d8 <__pow5mult>
 8008916:	4652      	mov	r2, sl
 8008918:	4601      	mov	r1, r0
 800891a:	4607      	mov	r7, r0
 800891c:	4620      	mov	r0, r4
 800891e:	f000 fc31 	bl	8009184 <__multiply>
 8008922:	4651      	mov	r1, sl
 8008924:	4680      	mov	r8, r0
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fb60 	bl	8008fec <_Bfree>
 800892c:	46c2      	mov	sl, r8
 800892e:	9b08      	ldr	r3, [sp, #32]
 8008930:	1b9a      	subs	r2, r3, r6
 8008932:	d004      	beq.n	800893e <_dtoa_r+0x7b6>
 8008934:	4651      	mov	r1, sl
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fcce 	bl	80092d8 <__pow5mult>
 800893c:	4682      	mov	sl, r0
 800893e:	2101      	movs	r1, #1
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fc09 	bl	8009158 <__i2b>
 8008946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008948:	2b00      	cmp	r3, #0
 800894a:	4606      	mov	r6, r0
 800894c:	f340 8081 	ble.w	8008a52 <_dtoa_r+0x8ca>
 8008950:	461a      	mov	r2, r3
 8008952:	4601      	mov	r1, r0
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fcbf 	bl	80092d8 <__pow5mult>
 800895a:	9b07      	ldr	r3, [sp, #28]
 800895c:	2b01      	cmp	r3, #1
 800895e:	4606      	mov	r6, r0
 8008960:	dd7a      	ble.n	8008a58 <_dtoa_r+0x8d0>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	6933      	ldr	r3, [r6, #16]
 8008968:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800896c:	6918      	ldr	r0, [r3, #16]
 800896e:	f000 fba5 	bl	80090bc <__hi0bits>
 8008972:	f1c0 0020 	rsb	r0, r0, #32
 8008976:	9b06      	ldr	r3, [sp, #24]
 8008978:	4418      	add	r0, r3
 800897a:	f010 001f 	ands.w	r0, r0, #31
 800897e:	f000 8094 	beq.w	8008aaa <_dtoa_r+0x922>
 8008982:	f1c0 0320 	rsb	r3, r0, #32
 8008986:	2b04      	cmp	r3, #4
 8008988:	f340 8085 	ble.w	8008a96 <_dtoa_r+0x90e>
 800898c:	9b05      	ldr	r3, [sp, #20]
 800898e:	f1c0 001c 	rsb	r0, r0, #28
 8008992:	4403      	add	r3, r0
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	9b06      	ldr	r3, [sp, #24]
 8008998:	4403      	add	r3, r0
 800899a:	4405      	add	r5, r0
 800899c:	9306      	str	r3, [sp, #24]
 800899e:	9b05      	ldr	r3, [sp, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd05      	ble.n	80089b0 <_dtoa_r+0x828>
 80089a4:	4651      	mov	r1, sl
 80089a6:	461a      	mov	r2, r3
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fcef 	bl	800938c <__lshift>
 80089ae:	4682      	mov	sl, r0
 80089b0:	9b06      	ldr	r3, [sp, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd05      	ble.n	80089c2 <_dtoa_r+0x83a>
 80089b6:	4631      	mov	r1, r6
 80089b8:	461a      	mov	r2, r3
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fce6 	bl	800938c <__lshift>
 80089c0:	4606      	mov	r6, r0
 80089c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d072      	beq.n	8008aae <_dtoa_r+0x926>
 80089c8:	4631      	mov	r1, r6
 80089ca:	4650      	mov	r0, sl
 80089cc:	f000 fd4a 	bl	8009464 <__mcmp>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	da6c      	bge.n	8008aae <_dtoa_r+0x926>
 80089d4:	2300      	movs	r3, #0
 80089d6:	4651      	mov	r1, sl
 80089d8:	220a      	movs	r2, #10
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 fb28 	bl	8009030 <__multadd>
 80089e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089e6:	4682      	mov	sl, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 81b0 	beq.w	8008d4e <_dtoa_r+0xbc6>
 80089ee:	2300      	movs	r3, #0
 80089f0:	4639      	mov	r1, r7
 80089f2:	220a      	movs	r2, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fb1b 	bl	8009030 <__multadd>
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4607      	mov	r7, r0
 8008a00:	f300 8096 	bgt.w	8008b30 <_dtoa_r+0x9a8>
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dc59      	bgt.n	8008abe <_dtoa_r+0x936>
 8008a0a:	e091      	b.n	8008b30 <_dtoa_r+0x9a8>
 8008a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a12:	e758      	b.n	80088c6 <_dtoa_r+0x73e>
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	1e5e      	subs	r6, r3, #1
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	42b3      	cmp	r3, r6
 8008a1c:	bfbf      	itttt	lt
 8008a1e:	9b08      	ldrlt	r3, [sp, #32]
 8008a20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a22:	9608      	strlt	r6, [sp, #32]
 8008a24:	1af3      	sublt	r3, r6, r3
 8008a26:	bfb4      	ite	lt
 8008a28:	18d2      	addlt	r2, r2, r3
 8008a2a:	1b9e      	subge	r6, r3, r6
 8008a2c:	9b04      	ldr	r3, [sp, #16]
 8008a2e:	bfbc      	itt	lt
 8008a30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a32:	2600      	movlt	r6, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfb7      	itett	lt
 8008a38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a40:	1a9d      	sublt	r5, r3, r2
 8008a42:	2300      	movlt	r3, #0
 8008a44:	e741      	b.n	80088ca <_dtoa_r+0x742>
 8008a46:	9e08      	ldr	r6, [sp, #32]
 8008a48:	9d05      	ldr	r5, [sp, #20]
 8008a4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a4c:	e748      	b.n	80088e0 <_dtoa_r+0x758>
 8008a4e:	9a08      	ldr	r2, [sp, #32]
 8008a50:	e770      	b.n	8008934 <_dtoa_r+0x7ac>
 8008a52:	9b07      	ldr	r3, [sp, #28]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	dc19      	bgt.n	8008a8c <_dtoa_r+0x904>
 8008a58:	9b02      	ldr	r3, [sp, #8]
 8008a5a:	b9bb      	cbnz	r3, 8008a8c <_dtoa_r+0x904>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a62:	b99b      	cbnz	r3, 8008a8c <_dtoa_r+0x904>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a6a:	0d1b      	lsrs	r3, r3, #20
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	b183      	cbz	r3, 8008a92 <_dtoa_r+0x90a>
 8008a70:	9b05      	ldr	r3, [sp, #20]
 8008a72:	3301      	adds	r3, #1
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	9b06      	ldr	r3, [sp, #24]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9306      	str	r3, [sp, #24]
 8008a7c:	f04f 0801 	mov.w	r8, #1
 8008a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f47f af6f 	bne.w	8008966 <_dtoa_r+0x7de>
 8008a88:	2001      	movs	r0, #1
 8008a8a:	e774      	b.n	8008976 <_dtoa_r+0x7ee>
 8008a8c:	f04f 0800 	mov.w	r8, #0
 8008a90:	e7f6      	b.n	8008a80 <_dtoa_r+0x8f8>
 8008a92:	4698      	mov	r8, r3
 8008a94:	e7f4      	b.n	8008a80 <_dtoa_r+0x8f8>
 8008a96:	d082      	beq.n	800899e <_dtoa_r+0x816>
 8008a98:	9a05      	ldr	r2, [sp, #20]
 8008a9a:	331c      	adds	r3, #28
 8008a9c:	441a      	add	r2, r3
 8008a9e:	9205      	str	r2, [sp, #20]
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	441d      	add	r5, r3
 8008aa6:	9206      	str	r2, [sp, #24]
 8008aa8:	e779      	b.n	800899e <_dtoa_r+0x816>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	e7f4      	b.n	8008a98 <_dtoa_r+0x910>
 8008aae:	9b04      	ldr	r3, [sp, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dc37      	bgt.n	8008b24 <_dtoa_r+0x99c>
 8008ab4:	9b07      	ldr	r3, [sp, #28]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	dd34      	ble.n	8008b24 <_dtoa_r+0x99c>
 8008aba:	9b04      	ldr	r3, [sp, #16]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	b963      	cbnz	r3, 8008adc <_dtoa_r+0x954>
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	2205      	movs	r2, #5
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fab2 	bl	8009030 <__multadd>
 8008acc:	4601      	mov	r1, r0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	4650      	mov	r0, sl
 8008ad2:	f000 fcc7 	bl	8009464 <__mcmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f73f adbb 	bgt.w	8008652 <_dtoa_r+0x4ca>
 8008adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ade:	9d00      	ldr	r5, [sp, #0]
 8008ae0:	ea6f 0b03 	mvn.w	fp, r3
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fa7e 	bl	8008fec <_Bfree>
 8008af0:	2f00      	cmp	r7, #0
 8008af2:	f43f aeab 	beq.w	800884c <_dtoa_r+0x6c4>
 8008af6:	f1b8 0f00 	cmp.w	r8, #0
 8008afa:	d005      	beq.n	8008b08 <_dtoa_r+0x980>
 8008afc:	45b8      	cmp	r8, r7
 8008afe:	d003      	beq.n	8008b08 <_dtoa_r+0x980>
 8008b00:	4641      	mov	r1, r8
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 fa72 	bl	8008fec <_Bfree>
 8008b08:	4639      	mov	r1, r7
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 fa6e 	bl	8008fec <_Bfree>
 8008b10:	e69c      	b.n	800884c <_dtoa_r+0x6c4>
 8008b12:	2600      	movs	r6, #0
 8008b14:	4637      	mov	r7, r6
 8008b16:	e7e1      	b.n	8008adc <_dtoa_r+0x954>
 8008b18:	46bb      	mov	fp, r7
 8008b1a:	4637      	mov	r7, r6
 8008b1c:	e599      	b.n	8008652 <_dtoa_r+0x4ca>
 8008b1e:	bf00      	nop
 8008b20:	40240000 	.word	0x40240000
 8008b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 80c8 	beq.w	8008cbc <_dtoa_r+0xb34>
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	dd05      	ble.n	8008b40 <_dtoa_r+0x9b8>
 8008b34:	4639      	mov	r1, r7
 8008b36:	462a      	mov	r2, r5
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fc27 	bl	800938c <__lshift>
 8008b3e:	4607      	mov	r7, r0
 8008b40:	f1b8 0f00 	cmp.w	r8, #0
 8008b44:	d05b      	beq.n	8008bfe <_dtoa_r+0xa76>
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fa0f 	bl	8008f6c <_Balloc>
 8008b4e:	4605      	mov	r5, r0
 8008b50:	b928      	cbnz	r0, 8008b5e <_dtoa_r+0x9d6>
 8008b52:	4b83      	ldr	r3, [pc, #524]	; (8008d60 <_dtoa_r+0xbd8>)
 8008b54:	4602      	mov	r2, r0
 8008b56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008b5a:	f7ff bb2e 	b.w	80081ba <_dtoa_r+0x32>
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	3202      	adds	r2, #2
 8008b62:	0092      	lsls	r2, r2, #2
 8008b64:	f107 010c 	add.w	r1, r7, #12
 8008b68:	300c      	adds	r0, #12
 8008b6a:	f001 f801 	bl	8009b70 <memcpy>
 8008b6e:	2201      	movs	r2, #1
 8008b70:	4629      	mov	r1, r5
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 fc0a 	bl	800938c <__lshift>
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b82:	4413      	add	r3, r2
 8008b84:	9308      	str	r3, [sp, #32]
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	46b8      	mov	r8, r7
 8008b8e:	9306      	str	r3, [sp, #24]
 8008b90:	4607      	mov	r7, r0
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	4631      	mov	r1, r6
 8008b96:	3b01      	subs	r3, #1
 8008b98:	4650      	mov	r0, sl
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	f7ff fa6c 	bl	8008078 <quorem>
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	9002      	str	r0, [sp, #8]
 8008ba4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ba8:	4650      	mov	r0, sl
 8008baa:	f000 fc5b 	bl	8009464 <__mcmp>
 8008bae:	463a      	mov	r2, r7
 8008bb0:	9005      	str	r0, [sp, #20]
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fc71 	bl	800949c <__mdiff>
 8008bba:	68c2      	ldr	r2, [r0, #12]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	bb02      	cbnz	r2, 8008c02 <_dtoa_r+0xa7a>
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f000 fc4e 	bl	8009464 <__mcmp>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4620      	mov	r0, r4
 8008bce:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd0:	f000 fa0c 	bl	8008fec <_Bfree>
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd8:	9d04      	ldr	r5, [sp, #16]
 8008bda:	ea43 0102 	orr.w	r1, r3, r2
 8008bde:	9b06      	ldr	r3, [sp, #24]
 8008be0:	4319      	orrs	r1, r3
 8008be2:	d110      	bne.n	8008c06 <_dtoa_r+0xa7e>
 8008be4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008be8:	d029      	beq.n	8008c3e <_dtoa_r+0xab6>
 8008bea:	9b05      	ldr	r3, [sp, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd02      	ble.n	8008bf6 <_dtoa_r+0xa6e>
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	f883 9000 	strb.w	r9, [r3]
 8008bfc:	e774      	b.n	8008ae8 <_dtoa_r+0x960>
 8008bfe:	4638      	mov	r0, r7
 8008c00:	e7ba      	b.n	8008b78 <_dtoa_r+0x9f0>
 8008c02:	2201      	movs	r2, #1
 8008c04:	e7e1      	b.n	8008bca <_dtoa_r+0xa42>
 8008c06:	9b05      	ldr	r3, [sp, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	db04      	blt.n	8008c16 <_dtoa_r+0xa8e>
 8008c0c:	9907      	ldr	r1, [sp, #28]
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	9906      	ldr	r1, [sp, #24]
 8008c12:	430b      	orrs	r3, r1
 8008c14:	d120      	bne.n	8008c58 <_dtoa_r+0xad0>
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	dded      	ble.n	8008bf6 <_dtoa_r+0xa6e>
 8008c1a:	4651      	mov	r1, sl
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 fbb4 	bl	800938c <__lshift>
 8008c24:	4631      	mov	r1, r6
 8008c26:	4682      	mov	sl, r0
 8008c28:	f000 fc1c 	bl	8009464 <__mcmp>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	dc03      	bgt.n	8008c38 <_dtoa_r+0xab0>
 8008c30:	d1e1      	bne.n	8008bf6 <_dtoa_r+0xa6e>
 8008c32:	f019 0f01 	tst.w	r9, #1
 8008c36:	d0de      	beq.n	8008bf6 <_dtoa_r+0xa6e>
 8008c38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c3c:	d1d8      	bne.n	8008bf0 <_dtoa_r+0xa68>
 8008c3e:	9a01      	ldr	r2, [sp, #4]
 8008c40:	2339      	movs	r3, #57	; 0x39
 8008c42:	7013      	strb	r3, [r2, #0]
 8008c44:	462b      	mov	r3, r5
 8008c46:	461d      	mov	r5, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c4e:	2a39      	cmp	r2, #57	; 0x39
 8008c50:	d06c      	beq.n	8008d2c <_dtoa_r+0xba4>
 8008c52:	3201      	adds	r2, #1
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	e747      	b.n	8008ae8 <_dtoa_r+0x960>
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	dd07      	ble.n	8008c6c <_dtoa_r+0xae4>
 8008c5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c60:	d0ed      	beq.n	8008c3e <_dtoa_r+0xab6>
 8008c62:	9a01      	ldr	r2, [sp, #4]
 8008c64:	f109 0301 	add.w	r3, r9, #1
 8008c68:	7013      	strb	r3, [r2, #0]
 8008c6a:	e73d      	b.n	8008ae8 <_dtoa_r+0x960>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	9a08      	ldr	r2, [sp, #32]
 8008c70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d043      	beq.n	8008d00 <_dtoa_r+0xb78>
 8008c78:	4651      	mov	r1, sl
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	220a      	movs	r2, #10
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 f9d6 	bl	8009030 <__multadd>
 8008c84:	45b8      	cmp	r8, r7
 8008c86:	4682      	mov	sl, r0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	f04f 020a 	mov.w	r2, #10
 8008c90:	4641      	mov	r1, r8
 8008c92:	4620      	mov	r0, r4
 8008c94:	d107      	bne.n	8008ca6 <_dtoa_r+0xb1e>
 8008c96:	f000 f9cb 	bl	8009030 <__multadd>
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	9304      	str	r3, [sp, #16]
 8008ca4:	e775      	b.n	8008b92 <_dtoa_r+0xa0a>
 8008ca6:	f000 f9c3 	bl	8009030 <__multadd>
 8008caa:	4639      	mov	r1, r7
 8008cac:	4680      	mov	r8, r0
 8008cae:	2300      	movs	r3, #0
 8008cb0:	220a      	movs	r2, #10
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 f9bc 	bl	8009030 <__multadd>
 8008cb8:	4607      	mov	r7, r0
 8008cba:	e7f0      	b.n	8008c9e <_dtoa_r+0xb16>
 8008cbc:	9b04      	ldr	r3, [sp, #16]
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	9d00      	ldr	r5, [sp, #0]
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	f7ff f9d7 	bl	8008078 <quorem>
 8008cca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	f805 9b01 	strb.w	r9, [r5], #1
 8008cd4:	1aea      	subs	r2, r5, r3
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	dd07      	ble.n	8008cec <_dtoa_r+0xb64>
 8008cdc:	4651      	mov	r1, sl
 8008cde:	2300      	movs	r3, #0
 8008ce0:	220a      	movs	r2, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f9a4 	bl	8009030 <__multadd>
 8008ce8:	4682      	mov	sl, r0
 8008cea:	e7ea      	b.n	8008cc2 <_dtoa_r+0xb3a>
 8008cec:	9b01      	ldr	r3, [sp, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfc8      	it	gt
 8008cf2:	461d      	movgt	r5, r3
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	bfd8      	it	le
 8008cf8:	2501      	movle	r5, #1
 8008cfa:	441d      	add	r5, r3
 8008cfc:	f04f 0800 	mov.w	r8, #0
 8008d00:	4651      	mov	r1, sl
 8008d02:	2201      	movs	r2, #1
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fb41 	bl	800938c <__lshift>
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	f000 fba9 	bl	8009464 <__mcmp>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	dc96      	bgt.n	8008c44 <_dtoa_r+0xabc>
 8008d16:	d102      	bne.n	8008d1e <_dtoa_r+0xb96>
 8008d18:	f019 0f01 	tst.w	r9, #1
 8008d1c:	d192      	bne.n	8008c44 <_dtoa_r+0xabc>
 8008d1e:	462b      	mov	r3, r5
 8008d20:	461d      	mov	r5, r3
 8008d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d26:	2a30      	cmp	r2, #48	; 0x30
 8008d28:	d0fa      	beq.n	8008d20 <_dtoa_r+0xb98>
 8008d2a:	e6dd      	b.n	8008ae8 <_dtoa_r+0x960>
 8008d2c:	9a00      	ldr	r2, [sp, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d189      	bne.n	8008c46 <_dtoa_r+0xabe>
 8008d32:	f10b 0b01 	add.w	fp, fp, #1
 8008d36:	2331      	movs	r3, #49	; 0x31
 8008d38:	e796      	b.n	8008c68 <_dtoa_r+0xae0>
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <_dtoa_r+0xbdc>)
 8008d3c:	f7ff ba99 	b.w	8008272 <_dtoa_r+0xea>
 8008d40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f47f aa6d 	bne.w	8008222 <_dtoa_r+0x9a>
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <_dtoa_r+0xbe0>)
 8008d4a:	f7ff ba92 	b.w	8008272 <_dtoa_r+0xea>
 8008d4e:	9b01      	ldr	r3, [sp, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	dcb5      	bgt.n	8008cc0 <_dtoa_r+0xb38>
 8008d54:	9b07      	ldr	r3, [sp, #28]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	f73f aeb1 	bgt.w	8008abe <_dtoa_r+0x936>
 8008d5c:	e7b0      	b.n	8008cc0 <_dtoa_r+0xb38>
 8008d5e:	bf00      	nop
 8008d60:	0801d9f0 	.word	0x0801d9f0
 8008d64:	0801d950 	.word	0x0801d950
 8008d68:	0801d974 	.word	0x0801d974

08008d6c <_free_r>:
 8008d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d6e:	2900      	cmp	r1, #0
 8008d70:	d044      	beq.n	8008dfc <_free_r+0x90>
 8008d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d76:	9001      	str	r0, [sp, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d7e:	bfb8      	it	lt
 8008d80:	18e4      	addlt	r4, r4, r3
 8008d82:	f000 f8e7 	bl	8008f54 <__malloc_lock>
 8008d86:	4a1e      	ldr	r2, [pc, #120]	; (8008e00 <_free_r+0x94>)
 8008d88:	9801      	ldr	r0, [sp, #4]
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	b933      	cbnz	r3, 8008d9c <_free_r+0x30>
 8008d8e:	6063      	str	r3, [r4, #4]
 8008d90:	6014      	str	r4, [r2, #0]
 8008d92:	b003      	add	sp, #12
 8008d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d98:	f000 b8e2 	b.w	8008f60 <__malloc_unlock>
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d908      	bls.n	8008db2 <_free_r+0x46>
 8008da0:	6825      	ldr	r5, [r4, #0]
 8008da2:	1961      	adds	r1, r4, r5
 8008da4:	428b      	cmp	r3, r1
 8008da6:	bf01      	itttt	eq
 8008da8:	6819      	ldreq	r1, [r3, #0]
 8008daa:	685b      	ldreq	r3, [r3, #4]
 8008dac:	1949      	addeq	r1, r1, r5
 8008dae:	6021      	streq	r1, [r4, #0]
 8008db0:	e7ed      	b.n	8008d8e <_free_r+0x22>
 8008db2:	461a      	mov	r2, r3
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	b10b      	cbz	r3, 8008dbc <_free_r+0x50>
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	d9fa      	bls.n	8008db2 <_free_r+0x46>
 8008dbc:	6811      	ldr	r1, [r2, #0]
 8008dbe:	1855      	adds	r5, r2, r1
 8008dc0:	42a5      	cmp	r5, r4
 8008dc2:	d10b      	bne.n	8008ddc <_free_r+0x70>
 8008dc4:	6824      	ldr	r4, [r4, #0]
 8008dc6:	4421      	add	r1, r4
 8008dc8:	1854      	adds	r4, r2, r1
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	6011      	str	r1, [r2, #0]
 8008dce:	d1e0      	bne.n	8008d92 <_free_r+0x26>
 8008dd0:	681c      	ldr	r4, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	6053      	str	r3, [r2, #4]
 8008dd6:	440c      	add	r4, r1
 8008dd8:	6014      	str	r4, [r2, #0]
 8008dda:	e7da      	b.n	8008d92 <_free_r+0x26>
 8008ddc:	d902      	bls.n	8008de4 <_free_r+0x78>
 8008dde:	230c      	movs	r3, #12
 8008de0:	6003      	str	r3, [r0, #0]
 8008de2:	e7d6      	b.n	8008d92 <_free_r+0x26>
 8008de4:	6825      	ldr	r5, [r4, #0]
 8008de6:	1961      	adds	r1, r4, r5
 8008de8:	428b      	cmp	r3, r1
 8008dea:	bf04      	itt	eq
 8008dec:	6819      	ldreq	r1, [r3, #0]
 8008dee:	685b      	ldreq	r3, [r3, #4]
 8008df0:	6063      	str	r3, [r4, #4]
 8008df2:	bf04      	itt	eq
 8008df4:	1949      	addeq	r1, r1, r5
 8008df6:	6021      	streq	r1, [r4, #0]
 8008df8:	6054      	str	r4, [r2, #4]
 8008dfa:	e7ca      	b.n	8008d92 <_free_r+0x26>
 8008dfc:	b003      	add	sp, #12
 8008dfe:	bd30      	pop	{r4, r5, pc}
 8008e00:	200114f4 	.word	0x200114f4

08008e04 <malloc>:
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <malloc+0xc>)
 8008e06:	4601      	mov	r1, r0
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	f000 b823 	b.w	8008e54 <_malloc_r>
 8008e0e:	bf00      	nop
 8008e10:	20000074 	.word	0x20000074

08008e14 <sbrk_aligned>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4e0e      	ldr	r6, [pc, #56]	; (8008e50 <sbrk_aligned+0x3c>)
 8008e18:	460c      	mov	r4, r1
 8008e1a:	6831      	ldr	r1, [r6, #0]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	b911      	cbnz	r1, 8008e26 <sbrk_aligned+0x12>
 8008e20:	f000 fe96 	bl	8009b50 <_sbrk_r>
 8008e24:	6030      	str	r0, [r6, #0]
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 fe91 	bl	8009b50 <_sbrk_r>
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	d00a      	beq.n	8008e48 <sbrk_aligned+0x34>
 8008e32:	1cc4      	adds	r4, r0, #3
 8008e34:	f024 0403 	bic.w	r4, r4, #3
 8008e38:	42a0      	cmp	r0, r4
 8008e3a:	d007      	beq.n	8008e4c <sbrk_aligned+0x38>
 8008e3c:	1a21      	subs	r1, r4, r0
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 fe86 	bl	8009b50 <_sbrk_r>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d101      	bne.n	8008e4c <sbrk_aligned+0x38>
 8008e48:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	200114f8 	.word	0x200114f8

08008e54 <_malloc_r>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	1ccd      	adds	r5, r1, #3
 8008e5a:	f025 0503 	bic.w	r5, r5, #3
 8008e5e:	3508      	adds	r5, #8
 8008e60:	2d0c      	cmp	r5, #12
 8008e62:	bf38      	it	cc
 8008e64:	250c      	movcc	r5, #12
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	4607      	mov	r7, r0
 8008e6a:	db01      	blt.n	8008e70 <_malloc_r+0x1c>
 8008e6c:	42a9      	cmp	r1, r5
 8008e6e:	d905      	bls.n	8008e7c <_malloc_r+0x28>
 8008e70:	230c      	movs	r3, #12
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	2600      	movs	r6, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f50 <_malloc_r+0xfc>
 8008e80:	f000 f868 	bl	8008f54 <__malloc_lock>
 8008e84:	f8d8 3000 	ldr.w	r3, [r8]
 8008e88:	461c      	mov	r4, r3
 8008e8a:	bb5c      	cbnz	r4, 8008ee4 <_malloc_r+0x90>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff ffc0 	bl	8008e14 <sbrk_aligned>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	4604      	mov	r4, r0
 8008e98:	d155      	bne.n	8008f46 <_malloc_r+0xf2>
 8008e9a:	f8d8 4000 	ldr.w	r4, [r8]
 8008e9e:	4626      	mov	r6, r4
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	d145      	bne.n	8008f30 <_malloc_r+0xdc>
 8008ea4:	2c00      	cmp	r4, #0
 8008ea6:	d048      	beq.n	8008f3a <_malloc_r+0xe6>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4638      	mov	r0, r7
 8008eae:	eb04 0903 	add.w	r9, r4, r3
 8008eb2:	f000 fe4d 	bl	8009b50 <_sbrk_r>
 8008eb6:	4581      	cmp	r9, r0
 8008eb8:	d13f      	bne.n	8008f3a <_malloc_r+0xe6>
 8008eba:	6821      	ldr	r1, [r4, #0]
 8008ebc:	1a6d      	subs	r5, r5, r1
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff ffa7 	bl	8008e14 <sbrk_aligned>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d037      	beq.n	8008f3a <_malloc_r+0xe6>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	442b      	add	r3, r5
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d038      	beq.n	8008f4a <_malloc_r+0xf6>
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	42a2      	cmp	r2, r4
 8008edc:	d12b      	bne.n	8008f36 <_malloc_r+0xe2>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	e00f      	b.n	8008f04 <_malloc_r+0xb0>
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	1b52      	subs	r2, r2, r5
 8008ee8:	d41f      	bmi.n	8008f2a <_malloc_r+0xd6>
 8008eea:	2a0b      	cmp	r2, #11
 8008eec:	d917      	bls.n	8008f1e <_malloc_r+0xca>
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	6025      	str	r5, [r4, #0]
 8008ef4:	bf18      	it	ne
 8008ef6:	6059      	strne	r1, [r3, #4]
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	bf08      	it	eq
 8008efc:	f8c8 1000 	streq.w	r1, [r8]
 8008f00:	5162      	str	r2, [r4, r5]
 8008f02:	604b      	str	r3, [r1, #4]
 8008f04:	4638      	mov	r0, r7
 8008f06:	f104 060b 	add.w	r6, r4, #11
 8008f0a:	f000 f829 	bl	8008f60 <__malloc_unlock>
 8008f0e:	f026 0607 	bic.w	r6, r6, #7
 8008f12:	1d23      	adds	r3, r4, #4
 8008f14:	1af2      	subs	r2, r6, r3
 8008f16:	d0ae      	beq.n	8008e76 <_malloc_r+0x22>
 8008f18:	1b9b      	subs	r3, r3, r6
 8008f1a:	50a3      	str	r3, [r4, r2]
 8008f1c:	e7ab      	b.n	8008e76 <_malloc_r+0x22>
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	6862      	ldr	r2, [r4, #4]
 8008f22:	d1dd      	bne.n	8008ee0 <_malloc_r+0x8c>
 8008f24:	f8c8 2000 	str.w	r2, [r8]
 8008f28:	e7ec      	b.n	8008f04 <_malloc_r+0xb0>
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	6864      	ldr	r4, [r4, #4]
 8008f2e:	e7ac      	b.n	8008e8a <_malloc_r+0x36>
 8008f30:	4634      	mov	r4, r6
 8008f32:	6876      	ldr	r6, [r6, #4]
 8008f34:	e7b4      	b.n	8008ea0 <_malloc_r+0x4c>
 8008f36:	4613      	mov	r3, r2
 8008f38:	e7cc      	b.n	8008ed4 <_malloc_r+0x80>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	603b      	str	r3, [r7, #0]
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f000 f80e 	bl	8008f60 <__malloc_unlock>
 8008f44:	e797      	b.n	8008e76 <_malloc_r+0x22>
 8008f46:	6025      	str	r5, [r4, #0]
 8008f48:	e7dc      	b.n	8008f04 <_malloc_r+0xb0>
 8008f4a:	605b      	str	r3, [r3, #4]
 8008f4c:	deff      	udf	#255	; 0xff
 8008f4e:	bf00      	nop
 8008f50:	200114f4 	.word	0x200114f4

08008f54 <__malloc_lock>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__malloc_lock+0x8>)
 8008f56:	f7ff b88d 	b.w	8008074 <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200114f0 	.word	0x200114f0

08008f60 <__malloc_unlock>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__malloc_unlock+0x8>)
 8008f62:	f7ff b888 	b.w	8008076 <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	200114f0 	.word	0x200114f0

08008f6c <_Balloc>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	69c6      	ldr	r6, [r0, #28]
 8008f70:	4604      	mov	r4, r0
 8008f72:	460d      	mov	r5, r1
 8008f74:	b976      	cbnz	r6, 8008f94 <_Balloc+0x28>
 8008f76:	2010      	movs	r0, #16
 8008f78:	f7ff ff44 	bl	8008e04 <malloc>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	61e0      	str	r0, [r4, #28]
 8008f80:	b920      	cbnz	r0, 8008f8c <_Balloc+0x20>
 8008f82:	4b18      	ldr	r3, [pc, #96]	; (8008fe4 <_Balloc+0x78>)
 8008f84:	4818      	ldr	r0, [pc, #96]	; (8008fe8 <_Balloc+0x7c>)
 8008f86:	216b      	movs	r1, #107	; 0x6b
 8008f88:	f000 fe00 	bl	8009b8c <__assert_func>
 8008f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f90:	6006      	str	r6, [r0, #0]
 8008f92:	60c6      	str	r6, [r0, #12]
 8008f94:	69e6      	ldr	r6, [r4, #28]
 8008f96:	68f3      	ldr	r3, [r6, #12]
 8008f98:	b183      	cbz	r3, 8008fbc <_Balloc+0x50>
 8008f9a:	69e3      	ldr	r3, [r4, #28]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fa2:	b9b8      	cbnz	r0, 8008fd4 <_Balloc+0x68>
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	fa01 f605 	lsl.w	r6, r1, r5
 8008faa:	1d72      	adds	r2, r6, #5
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fe0a 	bl	8009bc8 <_calloc_r>
 8008fb4:	b160      	cbz	r0, 8008fd0 <_Balloc+0x64>
 8008fb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fba:	e00e      	b.n	8008fda <_Balloc+0x6e>
 8008fbc:	2221      	movs	r2, #33	; 0x21
 8008fbe:	2104      	movs	r1, #4
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fe01 	bl	8009bc8 <_calloc_r>
 8008fc6:	69e3      	ldr	r3, [r4, #28]
 8008fc8:	60f0      	str	r0, [r6, #12]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e4      	bne.n	8008f9a <_Balloc+0x2e>
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	6802      	ldr	r2, [r0, #0]
 8008fd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fe0:	e7f7      	b.n	8008fd2 <_Balloc+0x66>
 8008fe2:	bf00      	nop
 8008fe4:	0801d981 	.word	0x0801d981
 8008fe8:	0801da01 	.word	0x0801da01

08008fec <_Bfree>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	69c6      	ldr	r6, [r0, #28]
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	b976      	cbnz	r6, 8009014 <_Bfree+0x28>
 8008ff6:	2010      	movs	r0, #16
 8008ff8:	f7ff ff04 	bl	8008e04 <malloc>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	61e8      	str	r0, [r5, #28]
 8009000:	b920      	cbnz	r0, 800900c <_Bfree+0x20>
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <_Bfree+0x3c>)
 8009004:	4809      	ldr	r0, [pc, #36]	; (800902c <_Bfree+0x40>)
 8009006:	218f      	movs	r1, #143	; 0x8f
 8009008:	f000 fdc0 	bl	8009b8c <__assert_func>
 800900c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009010:	6006      	str	r6, [r0, #0]
 8009012:	60c6      	str	r6, [r0, #12]
 8009014:	b13c      	cbz	r4, 8009026 <_Bfree+0x3a>
 8009016:	69eb      	ldr	r3, [r5, #28]
 8009018:	6862      	ldr	r2, [r4, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009020:	6021      	str	r1, [r4, #0]
 8009022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	0801d981 	.word	0x0801d981
 800902c:	0801da01 	.word	0x0801da01

08009030 <__multadd>:
 8009030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009034:	690d      	ldr	r5, [r1, #16]
 8009036:	4607      	mov	r7, r0
 8009038:	460c      	mov	r4, r1
 800903a:	461e      	mov	r6, r3
 800903c:	f101 0c14 	add.w	ip, r1, #20
 8009040:	2000      	movs	r0, #0
 8009042:	f8dc 3000 	ldr.w	r3, [ip]
 8009046:	b299      	uxth	r1, r3
 8009048:	fb02 6101 	mla	r1, r2, r1, r6
 800904c:	0c1e      	lsrs	r6, r3, #16
 800904e:	0c0b      	lsrs	r3, r1, #16
 8009050:	fb02 3306 	mla	r3, r2, r6, r3
 8009054:	b289      	uxth	r1, r1
 8009056:	3001      	adds	r0, #1
 8009058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800905c:	4285      	cmp	r5, r0
 800905e:	f84c 1b04 	str.w	r1, [ip], #4
 8009062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009066:	dcec      	bgt.n	8009042 <__multadd+0x12>
 8009068:	b30e      	cbz	r6, 80090ae <__multadd+0x7e>
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	42ab      	cmp	r3, r5
 800906e:	dc19      	bgt.n	80090a4 <__multadd+0x74>
 8009070:	6861      	ldr	r1, [r4, #4]
 8009072:	4638      	mov	r0, r7
 8009074:	3101      	adds	r1, #1
 8009076:	f7ff ff79 	bl	8008f6c <_Balloc>
 800907a:	4680      	mov	r8, r0
 800907c:	b928      	cbnz	r0, 800908a <__multadd+0x5a>
 800907e:	4602      	mov	r2, r0
 8009080:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <__multadd+0x84>)
 8009082:	480d      	ldr	r0, [pc, #52]	; (80090b8 <__multadd+0x88>)
 8009084:	21ba      	movs	r1, #186	; 0xba
 8009086:	f000 fd81 	bl	8009b8c <__assert_func>
 800908a:	6922      	ldr	r2, [r4, #16]
 800908c:	3202      	adds	r2, #2
 800908e:	f104 010c 	add.w	r1, r4, #12
 8009092:	0092      	lsls	r2, r2, #2
 8009094:	300c      	adds	r0, #12
 8009096:	f000 fd6b 	bl	8009b70 <memcpy>
 800909a:	4621      	mov	r1, r4
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff ffa5 	bl	8008fec <_Bfree>
 80090a2:	4644      	mov	r4, r8
 80090a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090a8:	3501      	adds	r5, #1
 80090aa:	615e      	str	r6, [r3, #20]
 80090ac:	6125      	str	r5, [r4, #16]
 80090ae:	4620      	mov	r0, r4
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b4:	0801d9f0 	.word	0x0801d9f0
 80090b8:	0801da01 	.word	0x0801da01

080090bc <__hi0bits>:
 80090bc:	0c03      	lsrs	r3, r0, #16
 80090be:	041b      	lsls	r3, r3, #16
 80090c0:	b9d3      	cbnz	r3, 80090f8 <__hi0bits+0x3c>
 80090c2:	0400      	lsls	r0, r0, #16
 80090c4:	2310      	movs	r3, #16
 80090c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090ca:	bf04      	itt	eq
 80090cc:	0200      	lsleq	r0, r0, #8
 80090ce:	3308      	addeq	r3, #8
 80090d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090d4:	bf04      	itt	eq
 80090d6:	0100      	lsleq	r0, r0, #4
 80090d8:	3304      	addeq	r3, #4
 80090da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090de:	bf04      	itt	eq
 80090e0:	0080      	lsleq	r0, r0, #2
 80090e2:	3302      	addeq	r3, #2
 80090e4:	2800      	cmp	r0, #0
 80090e6:	db05      	blt.n	80090f4 <__hi0bits+0x38>
 80090e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090ec:	f103 0301 	add.w	r3, r3, #1
 80090f0:	bf08      	it	eq
 80090f2:	2320      	moveq	r3, #32
 80090f4:	4618      	mov	r0, r3
 80090f6:	4770      	bx	lr
 80090f8:	2300      	movs	r3, #0
 80090fa:	e7e4      	b.n	80090c6 <__hi0bits+0xa>

080090fc <__lo0bits>:
 80090fc:	6803      	ldr	r3, [r0, #0]
 80090fe:	f013 0207 	ands.w	r2, r3, #7
 8009102:	d00c      	beq.n	800911e <__lo0bits+0x22>
 8009104:	07d9      	lsls	r1, r3, #31
 8009106:	d422      	bmi.n	800914e <__lo0bits+0x52>
 8009108:	079a      	lsls	r2, r3, #30
 800910a:	bf49      	itett	mi
 800910c:	085b      	lsrmi	r3, r3, #1
 800910e:	089b      	lsrpl	r3, r3, #2
 8009110:	6003      	strmi	r3, [r0, #0]
 8009112:	2201      	movmi	r2, #1
 8009114:	bf5c      	itt	pl
 8009116:	6003      	strpl	r3, [r0, #0]
 8009118:	2202      	movpl	r2, #2
 800911a:	4610      	mov	r0, r2
 800911c:	4770      	bx	lr
 800911e:	b299      	uxth	r1, r3
 8009120:	b909      	cbnz	r1, 8009126 <__lo0bits+0x2a>
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	2210      	movs	r2, #16
 8009126:	b2d9      	uxtb	r1, r3
 8009128:	b909      	cbnz	r1, 800912e <__lo0bits+0x32>
 800912a:	3208      	adds	r2, #8
 800912c:	0a1b      	lsrs	r3, r3, #8
 800912e:	0719      	lsls	r1, r3, #28
 8009130:	bf04      	itt	eq
 8009132:	091b      	lsreq	r3, r3, #4
 8009134:	3204      	addeq	r2, #4
 8009136:	0799      	lsls	r1, r3, #30
 8009138:	bf04      	itt	eq
 800913a:	089b      	lsreq	r3, r3, #2
 800913c:	3202      	addeq	r2, #2
 800913e:	07d9      	lsls	r1, r3, #31
 8009140:	d403      	bmi.n	800914a <__lo0bits+0x4e>
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	f102 0201 	add.w	r2, r2, #1
 8009148:	d003      	beq.n	8009152 <__lo0bits+0x56>
 800914a:	6003      	str	r3, [r0, #0]
 800914c:	e7e5      	b.n	800911a <__lo0bits+0x1e>
 800914e:	2200      	movs	r2, #0
 8009150:	e7e3      	b.n	800911a <__lo0bits+0x1e>
 8009152:	2220      	movs	r2, #32
 8009154:	e7e1      	b.n	800911a <__lo0bits+0x1e>
	...

08009158 <__i2b>:
 8009158:	b510      	push	{r4, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	2101      	movs	r1, #1
 800915e:	f7ff ff05 	bl	8008f6c <_Balloc>
 8009162:	4602      	mov	r2, r0
 8009164:	b928      	cbnz	r0, 8009172 <__i2b+0x1a>
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <__i2b+0x24>)
 8009168:	4805      	ldr	r0, [pc, #20]	; (8009180 <__i2b+0x28>)
 800916a:	f240 1145 	movw	r1, #325	; 0x145
 800916e:	f000 fd0d 	bl	8009b8c <__assert_func>
 8009172:	2301      	movs	r3, #1
 8009174:	6144      	str	r4, [r0, #20]
 8009176:	6103      	str	r3, [r0, #16]
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	0801d9f0 	.word	0x0801d9f0
 8009180:	0801da01 	.word	0x0801da01

08009184 <__multiply>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4691      	mov	r9, r2
 800918a:	690a      	ldr	r2, [r1, #16]
 800918c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009190:	429a      	cmp	r2, r3
 8009192:	bfb8      	it	lt
 8009194:	460b      	movlt	r3, r1
 8009196:	460c      	mov	r4, r1
 8009198:	bfbc      	itt	lt
 800919a:	464c      	movlt	r4, r9
 800919c:	4699      	movlt	r9, r3
 800919e:	6927      	ldr	r7, [r4, #16]
 80091a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	6861      	ldr	r1, [r4, #4]
 80091a8:	eb07 060a 	add.w	r6, r7, sl
 80091ac:	42b3      	cmp	r3, r6
 80091ae:	b085      	sub	sp, #20
 80091b0:	bfb8      	it	lt
 80091b2:	3101      	addlt	r1, #1
 80091b4:	f7ff feda 	bl	8008f6c <_Balloc>
 80091b8:	b930      	cbnz	r0, 80091c8 <__multiply+0x44>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b44      	ldr	r3, [pc, #272]	; (80092d0 <__multiply+0x14c>)
 80091be:	4845      	ldr	r0, [pc, #276]	; (80092d4 <__multiply+0x150>)
 80091c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80091c4:	f000 fce2 	bl	8009b8c <__assert_func>
 80091c8:	f100 0514 	add.w	r5, r0, #20
 80091cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091d0:	462b      	mov	r3, r5
 80091d2:	2200      	movs	r2, #0
 80091d4:	4543      	cmp	r3, r8
 80091d6:	d321      	bcc.n	800921c <__multiply+0x98>
 80091d8:	f104 0314 	add.w	r3, r4, #20
 80091dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091e0:	f109 0314 	add.w	r3, r9, #20
 80091e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091e8:	9202      	str	r2, [sp, #8]
 80091ea:	1b3a      	subs	r2, r7, r4
 80091ec:	3a15      	subs	r2, #21
 80091ee:	f022 0203 	bic.w	r2, r2, #3
 80091f2:	3204      	adds	r2, #4
 80091f4:	f104 0115 	add.w	r1, r4, #21
 80091f8:	428f      	cmp	r7, r1
 80091fa:	bf38      	it	cc
 80091fc:	2204      	movcc	r2, #4
 80091fe:	9201      	str	r2, [sp, #4]
 8009200:	9a02      	ldr	r2, [sp, #8]
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	429a      	cmp	r2, r3
 8009206:	d80c      	bhi.n	8009222 <__multiply+0x9e>
 8009208:	2e00      	cmp	r6, #0
 800920a:	dd03      	ble.n	8009214 <__multiply+0x90>
 800920c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009210:	2b00      	cmp	r3, #0
 8009212:	d05b      	beq.n	80092cc <__multiply+0x148>
 8009214:	6106      	str	r6, [r0, #16]
 8009216:	b005      	add	sp, #20
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	f843 2b04 	str.w	r2, [r3], #4
 8009220:	e7d8      	b.n	80091d4 <__multiply+0x50>
 8009222:	f8b3 a000 	ldrh.w	sl, [r3]
 8009226:	f1ba 0f00 	cmp.w	sl, #0
 800922a:	d024      	beq.n	8009276 <__multiply+0xf2>
 800922c:	f104 0e14 	add.w	lr, r4, #20
 8009230:	46a9      	mov	r9, r5
 8009232:	f04f 0c00 	mov.w	ip, #0
 8009236:	f85e 2b04 	ldr.w	r2, [lr], #4
 800923a:	f8d9 1000 	ldr.w	r1, [r9]
 800923e:	fa1f fb82 	uxth.w	fp, r2
 8009242:	b289      	uxth	r1, r1
 8009244:	fb0a 110b 	mla	r1, sl, fp, r1
 8009248:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800924c:	f8d9 2000 	ldr.w	r2, [r9]
 8009250:	4461      	add	r1, ip
 8009252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009256:	fb0a c20b 	mla	r2, sl, fp, ip
 800925a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800925e:	b289      	uxth	r1, r1
 8009260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009264:	4577      	cmp	r7, lr
 8009266:	f849 1b04 	str.w	r1, [r9], #4
 800926a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800926e:	d8e2      	bhi.n	8009236 <__multiply+0xb2>
 8009270:	9a01      	ldr	r2, [sp, #4]
 8009272:	f845 c002 	str.w	ip, [r5, r2]
 8009276:	9a03      	ldr	r2, [sp, #12]
 8009278:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800927c:	3304      	adds	r3, #4
 800927e:	f1b9 0f00 	cmp.w	r9, #0
 8009282:	d021      	beq.n	80092c8 <__multiply+0x144>
 8009284:	6829      	ldr	r1, [r5, #0]
 8009286:	f104 0c14 	add.w	ip, r4, #20
 800928a:	46ae      	mov	lr, r5
 800928c:	f04f 0a00 	mov.w	sl, #0
 8009290:	f8bc b000 	ldrh.w	fp, [ip]
 8009294:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009298:	fb09 220b 	mla	r2, r9, fp, r2
 800929c:	4452      	add	r2, sl
 800929e:	b289      	uxth	r1, r1
 80092a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092a4:	f84e 1b04 	str.w	r1, [lr], #4
 80092a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80092ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092b0:	f8be 1000 	ldrh.w	r1, [lr]
 80092b4:	fb09 110a 	mla	r1, r9, sl, r1
 80092b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80092bc:	4567      	cmp	r7, ip
 80092be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092c2:	d8e5      	bhi.n	8009290 <__multiply+0x10c>
 80092c4:	9a01      	ldr	r2, [sp, #4]
 80092c6:	50a9      	str	r1, [r5, r2]
 80092c8:	3504      	adds	r5, #4
 80092ca:	e799      	b.n	8009200 <__multiply+0x7c>
 80092cc:	3e01      	subs	r6, #1
 80092ce:	e79b      	b.n	8009208 <__multiply+0x84>
 80092d0:	0801d9f0 	.word	0x0801d9f0
 80092d4:	0801da01 	.word	0x0801da01

080092d8 <__pow5mult>:
 80092d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092dc:	4615      	mov	r5, r2
 80092de:	f012 0203 	ands.w	r2, r2, #3
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	d007      	beq.n	80092f8 <__pow5mult+0x20>
 80092e8:	4c25      	ldr	r4, [pc, #148]	; (8009380 <__pow5mult+0xa8>)
 80092ea:	3a01      	subs	r2, #1
 80092ec:	2300      	movs	r3, #0
 80092ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092f2:	f7ff fe9d 	bl	8009030 <__multadd>
 80092f6:	4607      	mov	r7, r0
 80092f8:	10ad      	asrs	r5, r5, #2
 80092fa:	d03d      	beq.n	8009378 <__pow5mult+0xa0>
 80092fc:	69f4      	ldr	r4, [r6, #28]
 80092fe:	b97c      	cbnz	r4, 8009320 <__pow5mult+0x48>
 8009300:	2010      	movs	r0, #16
 8009302:	f7ff fd7f 	bl	8008e04 <malloc>
 8009306:	4602      	mov	r2, r0
 8009308:	61f0      	str	r0, [r6, #28]
 800930a:	b928      	cbnz	r0, 8009318 <__pow5mult+0x40>
 800930c:	4b1d      	ldr	r3, [pc, #116]	; (8009384 <__pow5mult+0xac>)
 800930e:	481e      	ldr	r0, [pc, #120]	; (8009388 <__pow5mult+0xb0>)
 8009310:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009314:	f000 fc3a 	bl	8009b8c <__assert_func>
 8009318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800931c:	6004      	str	r4, [r0, #0]
 800931e:	60c4      	str	r4, [r0, #12]
 8009320:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009328:	b94c      	cbnz	r4, 800933e <__pow5mult+0x66>
 800932a:	f240 2171 	movw	r1, #625	; 0x271
 800932e:	4630      	mov	r0, r6
 8009330:	f7ff ff12 	bl	8009158 <__i2b>
 8009334:	2300      	movs	r3, #0
 8009336:	f8c8 0008 	str.w	r0, [r8, #8]
 800933a:	4604      	mov	r4, r0
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	f04f 0900 	mov.w	r9, #0
 8009342:	07eb      	lsls	r3, r5, #31
 8009344:	d50a      	bpl.n	800935c <__pow5mult+0x84>
 8009346:	4639      	mov	r1, r7
 8009348:	4622      	mov	r2, r4
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ff1a 	bl	8009184 <__multiply>
 8009350:	4639      	mov	r1, r7
 8009352:	4680      	mov	r8, r0
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff fe49 	bl	8008fec <_Bfree>
 800935a:	4647      	mov	r7, r8
 800935c:	106d      	asrs	r5, r5, #1
 800935e:	d00b      	beq.n	8009378 <__pow5mult+0xa0>
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	b938      	cbnz	r0, 8009374 <__pow5mult+0x9c>
 8009364:	4622      	mov	r2, r4
 8009366:	4621      	mov	r1, r4
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff ff0b 	bl	8009184 <__multiply>
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	f8c0 9000 	str.w	r9, [r0]
 8009374:	4604      	mov	r4, r0
 8009376:	e7e4      	b.n	8009342 <__pow5mult+0x6a>
 8009378:	4638      	mov	r0, r7
 800937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937e:	bf00      	nop
 8009380:	0801db50 	.word	0x0801db50
 8009384:	0801d981 	.word	0x0801d981
 8009388:	0801da01 	.word	0x0801da01

0800938c <__lshift>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	6849      	ldr	r1, [r1, #4]
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	4607      	mov	r7, r0
 800939e:	4691      	mov	r9, r2
 80093a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093a4:	f108 0601 	add.w	r6, r8, #1
 80093a8:	42b3      	cmp	r3, r6
 80093aa:	db0b      	blt.n	80093c4 <__lshift+0x38>
 80093ac:	4638      	mov	r0, r7
 80093ae:	f7ff fddd 	bl	8008f6c <_Balloc>
 80093b2:	4605      	mov	r5, r0
 80093b4:	b948      	cbnz	r0, 80093ca <__lshift+0x3e>
 80093b6:	4602      	mov	r2, r0
 80093b8:	4b28      	ldr	r3, [pc, #160]	; (800945c <__lshift+0xd0>)
 80093ba:	4829      	ldr	r0, [pc, #164]	; (8009460 <__lshift+0xd4>)
 80093bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80093c0:	f000 fbe4 	bl	8009b8c <__assert_func>
 80093c4:	3101      	adds	r1, #1
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	e7ee      	b.n	80093a8 <__lshift+0x1c>
 80093ca:	2300      	movs	r3, #0
 80093cc:	f100 0114 	add.w	r1, r0, #20
 80093d0:	f100 0210 	add.w	r2, r0, #16
 80093d4:	4618      	mov	r0, r3
 80093d6:	4553      	cmp	r3, sl
 80093d8:	db33      	blt.n	8009442 <__lshift+0xb6>
 80093da:	6920      	ldr	r0, [r4, #16]
 80093dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093e0:	f104 0314 	add.w	r3, r4, #20
 80093e4:	f019 091f 	ands.w	r9, r9, #31
 80093e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093f0:	d02b      	beq.n	800944a <__lshift+0xbe>
 80093f2:	f1c9 0e20 	rsb	lr, r9, #32
 80093f6:	468a      	mov	sl, r1
 80093f8:	2200      	movs	r2, #0
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009400:	4310      	orrs	r0, r2
 8009402:	f84a 0b04 	str.w	r0, [sl], #4
 8009406:	f853 2b04 	ldr.w	r2, [r3], #4
 800940a:	459c      	cmp	ip, r3
 800940c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009410:	d8f3      	bhi.n	80093fa <__lshift+0x6e>
 8009412:	ebac 0304 	sub.w	r3, ip, r4
 8009416:	3b15      	subs	r3, #21
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	3304      	adds	r3, #4
 800941e:	f104 0015 	add.w	r0, r4, #21
 8009422:	4584      	cmp	ip, r0
 8009424:	bf38      	it	cc
 8009426:	2304      	movcc	r3, #4
 8009428:	50ca      	str	r2, [r1, r3]
 800942a:	b10a      	cbz	r2, 8009430 <__lshift+0xa4>
 800942c:	f108 0602 	add.w	r6, r8, #2
 8009430:	3e01      	subs	r6, #1
 8009432:	4638      	mov	r0, r7
 8009434:	612e      	str	r6, [r5, #16]
 8009436:	4621      	mov	r1, r4
 8009438:	f7ff fdd8 	bl	8008fec <_Bfree>
 800943c:	4628      	mov	r0, r5
 800943e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009442:	f842 0f04 	str.w	r0, [r2, #4]!
 8009446:	3301      	adds	r3, #1
 8009448:	e7c5      	b.n	80093d6 <__lshift+0x4a>
 800944a:	3904      	subs	r1, #4
 800944c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009450:	f841 2f04 	str.w	r2, [r1, #4]!
 8009454:	459c      	cmp	ip, r3
 8009456:	d8f9      	bhi.n	800944c <__lshift+0xc0>
 8009458:	e7ea      	b.n	8009430 <__lshift+0xa4>
 800945a:	bf00      	nop
 800945c:	0801d9f0 	.word	0x0801d9f0
 8009460:	0801da01 	.word	0x0801da01

08009464 <__mcmp>:
 8009464:	b530      	push	{r4, r5, lr}
 8009466:	6902      	ldr	r2, [r0, #16]
 8009468:	690c      	ldr	r4, [r1, #16]
 800946a:	1b12      	subs	r2, r2, r4
 800946c:	d10e      	bne.n	800948c <__mcmp+0x28>
 800946e:	f100 0314 	add.w	r3, r0, #20
 8009472:	3114      	adds	r1, #20
 8009474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800947c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009484:	42a5      	cmp	r5, r4
 8009486:	d003      	beq.n	8009490 <__mcmp+0x2c>
 8009488:	d305      	bcc.n	8009496 <__mcmp+0x32>
 800948a:	2201      	movs	r2, #1
 800948c:	4610      	mov	r0, r2
 800948e:	bd30      	pop	{r4, r5, pc}
 8009490:	4283      	cmp	r3, r0
 8009492:	d3f3      	bcc.n	800947c <__mcmp+0x18>
 8009494:	e7fa      	b.n	800948c <__mcmp+0x28>
 8009496:	f04f 32ff 	mov.w	r2, #4294967295
 800949a:	e7f7      	b.n	800948c <__mcmp+0x28>

0800949c <__mdiff>:
 800949c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	460c      	mov	r4, r1
 80094a2:	4606      	mov	r6, r0
 80094a4:	4611      	mov	r1, r2
 80094a6:	4620      	mov	r0, r4
 80094a8:	4690      	mov	r8, r2
 80094aa:	f7ff ffdb 	bl	8009464 <__mcmp>
 80094ae:	1e05      	subs	r5, r0, #0
 80094b0:	d110      	bne.n	80094d4 <__mdiff+0x38>
 80094b2:	4629      	mov	r1, r5
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff fd59 	bl	8008f6c <_Balloc>
 80094ba:	b930      	cbnz	r0, 80094ca <__mdiff+0x2e>
 80094bc:	4b3a      	ldr	r3, [pc, #232]	; (80095a8 <__mdiff+0x10c>)
 80094be:	4602      	mov	r2, r0
 80094c0:	f240 2137 	movw	r1, #567	; 0x237
 80094c4:	4839      	ldr	r0, [pc, #228]	; (80095ac <__mdiff+0x110>)
 80094c6:	f000 fb61 	bl	8009b8c <__assert_func>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	bfa4      	itt	ge
 80094d6:	4643      	movge	r3, r8
 80094d8:	46a0      	movge	r8, r4
 80094da:	4630      	mov	r0, r6
 80094dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094e0:	bfa6      	itte	ge
 80094e2:	461c      	movge	r4, r3
 80094e4:	2500      	movge	r5, #0
 80094e6:	2501      	movlt	r5, #1
 80094e8:	f7ff fd40 	bl	8008f6c <_Balloc>
 80094ec:	b920      	cbnz	r0, 80094f8 <__mdiff+0x5c>
 80094ee:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <__mdiff+0x10c>)
 80094f0:	4602      	mov	r2, r0
 80094f2:	f240 2145 	movw	r1, #581	; 0x245
 80094f6:	e7e5      	b.n	80094c4 <__mdiff+0x28>
 80094f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094fc:	6926      	ldr	r6, [r4, #16]
 80094fe:	60c5      	str	r5, [r0, #12]
 8009500:	f104 0914 	add.w	r9, r4, #20
 8009504:	f108 0514 	add.w	r5, r8, #20
 8009508:	f100 0e14 	add.w	lr, r0, #20
 800950c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009514:	f108 0210 	add.w	r2, r8, #16
 8009518:	46f2      	mov	sl, lr
 800951a:	2100      	movs	r1, #0
 800951c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009524:	fa11 f88b 	uxtah	r8, r1, fp
 8009528:	b299      	uxth	r1, r3
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	eba8 0801 	sub.w	r8, r8, r1
 8009530:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009534:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009538:	fa1f f888 	uxth.w	r8, r8
 800953c:	1419      	asrs	r1, r3, #16
 800953e:	454e      	cmp	r6, r9
 8009540:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009544:	f84a 3b04 	str.w	r3, [sl], #4
 8009548:	d8e8      	bhi.n	800951c <__mdiff+0x80>
 800954a:	1b33      	subs	r3, r6, r4
 800954c:	3b15      	subs	r3, #21
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	3304      	adds	r3, #4
 8009554:	3415      	adds	r4, #21
 8009556:	42a6      	cmp	r6, r4
 8009558:	bf38      	it	cc
 800955a:	2304      	movcc	r3, #4
 800955c:	441d      	add	r5, r3
 800955e:	4473      	add	r3, lr
 8009560:	469e      	mov	lr, r3
 8009562:	462e      	mov	r6, r5
 8009564:	4566      	cmp	r6, ip
 8009566:	d30e      	bcc.n	8009586 <__mdiff+0xea>
 8009568:	f10c 0203 	add.w	r2, ip, #3
 800956c:	1b52      	subs	r2, r2, r5
 800956e:	f022 0203 	bic.w	r2, r2, #3
 8009572:	3d03      	subs	r5, #3
 8009574:	45ac      	cmp	ip, r5
 8009576:	bf38      	it	cc
 8009578:	2200      	movcc	r2, #0
 800957a:	4413      	add	r3, r2
 800957c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009580:	b17a      	cbz	r2, 80095a2 <__mdiff+0x106>
 8009582:	6107      	str	r7, [r0, #16]
 8009584:	e7a4      	b.n	80094d0 <__mdiff+0x34>
 8009586:	f856 8b04 	ldr.w	r8, [r6], #4
 800958a:	fa11 f288 	uxtah	r2, r1, r8
 800958e:	1414      	asrs	r4, r2, #16
 8009590:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009594:	b292      	uxth	r2, r2
 8009596:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800959a:	f84e 2b04 	str.w	r2, [lr], #4
 800959e:	1421      	asrs	r1, r4, #16
 80095a0:	e7e0      	b.n	8009564 <__mdiff+0xc8>
 80095a2:	3f01      	subs	r7, #1
 80095a4:	e7ea      	b.n	800957c <__mdiff+0xe0>
 80095a6:	bf00      	nop
 80095a8:	0801d9f0 	.word	0x0801d9f0
 80095ac:	0801da01 	.word	0x0801da01

080095b0 <__d2b>:
 80095b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095b4:	460f      	mov	r7, r1
 80095b6:	2101      	movs	r1, #1
 80095b8:	ec59 8b10 	vmov	r8, r9, d0
 80095bc:	4616      	mov	r6, r2
 80095be:	f7ff fcd5 	bl	8008f6c <_Balloc>
 80095c2:	4604      	mov	r4, r0
 80095c4:	b930      	cbnz	r0, 80095d4 <__d2b+0x24>
 80095c6:	4602      	mov	r2, r0
 80095c8:	4b24      	ldr	r3, [pc, #144]	; (800965c <__d2b+0xac>)
 80095ca:	4825      	ldr	r0, [pc, #148]	; (8009660 <__d2b+0xb0>)
 80095cc:	f240 310f 	movw	r1, #783	; 0x30f
 80095d0:	f000 fadc 	bl	8009b8c <__assert_func>
 80095d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095dc:	bb2d      	cbnz	r5, 800962a <__d2b+0x7a>
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	f1b8 0300 	subs.w	r3, r8, #0
 80095e4:	d026      	beq.n	8009634 <__d2b+0x84>
 80095e6:	4668      	mov	r0, sp
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	f7ff fd87 	bl	80090fc <__lo0bits>
 80095ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095f2:	b1e8      	cbz	r0, 8009630 <__d2b+0x80>
 80095f4:	f1c0 0320 	rsb	r3, r0, #32
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	430b      	orrs	r3, r1
 80095fe:	40c2      	lsrs	r2, r0
 8009600:	6163      	str	r3, [r4, #20]
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	61a3      	str	r3, [r4, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf14      	ite	ne
 800960c:	2202      	movne	r2, #2
 800960e:	2201      	moveq	r2, #1
 8009610:	6122      	str	r2, [r4, #16]
 8009612:	b1bd      	cbz	r5, 8009644 <__d2b+0x94>
 8009614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009618:	4405      	add	r5, r0
 800961a:	603d      	str	r5, [r7, #0]
 800961c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009620:	6030      	str	r0, [r6, #0]
 8009622:	4620      	mov	r0, r4
 8009624:	b003      	add	sp, #12
 8009626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800962a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800962e:	e7d6      	b.n	80095de <__d2b+0x2e>
 8009630:	6161      	str	r1, [r4, #20]
 8009632:	e7e7      	b.n	8009604 <__d2b+0x54>
 8009634:	a801      	add	r0, sp, #4
 8009636:	f7ff fd61 	bl	80090fc <__lo0bits>
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	6163      	str	r3, [r4, #20]
 800963e:	3020      	adds	r0, #32
 8009640:	2201      	movs	r2, #1
 8009642:	e7e5      	b.n	8009610 <__d2b+0x60>
 8009644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800964c:	6038      	str	r0, [r7, #0]
 800964e:	6918      	ldr	r0, [r3, #16]
 8009650:	f7ff fd34 	bl	80090bc <__hi0bits>
 8009654:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009658:	e7e2      	b.n	8009620 <__d2b+0x70>
 800965a:	bf00      	nop
 800965c:	0801d9f0 	.word	0x0801d9f0
 8009660:	0801da01 	.word	0x0801da01

08009664 <__sfputc_r>:
 8009664:	6893      	ldr	r3, [r2, #8]
 8009666:	3b01      	subs	r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	b410      	push	{r4}
 800966c:	6093      	str	r3, [r2, #8]
 800966e:	da08      	bge.n	8009682 <__sfputc_r+0x1e>
 8009670:	6994      	ldr	r4, [r2, #24]
 8009672:	42a3      	cmp	r3, r4
 8009674:	db01      	blt.n	800967a <__sfputc_r+0x16>
 8009676:	290a      	cmp	r1, #10
 8009678:	d103      	bne.n	8009682 <__sfputc_r+0x1e>
 800967a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967e:	f7fe bbe8 	b.w	8007e52 <__swbuf_r>
 8009682:	6813      	ldr	r3, [r2, #0]
 8009684:	1c58      	adds	r0, r3, #1
 8009686:	6010      	str	r0, [r2, #0]
 8009688:	7019      	strb	r1, [r3, #0]
 800968a:	4608      	mov	r0, r1
 800968c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009690:	4770      	bx	lr

08009692 <__sfputs_r>:
 8009692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009694:	4606      	mov	r6, r0
 8009696:	460f      	mov	r7, r1
 8009698:	4614      	mov	r4, r2
 800969a:	18d5      	adds	r5, r2, r3
 800969c:	42ac      	cmp	r4, r5
 800969e:	d101      	bne.n	80096a4 <__sfputs_r+0x12>
 80096a0:	2000      	movs	r0, #0
 80096a2:	e007      	b.n	80096b4 <__sfputs_r+0x22>
 80096a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a8:	463a      	mov	r2, r7
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7ff ffda 	bl	8009664 <__sfputc_r>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d1f3      	bne.n	800969c <__sfputs_r+0xa>
 80096b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096b8 <_vfiprintf_r>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	460d      	mov	r5, r1
 80096be:	b09d      	sub	sp, #116	; 0x74
 80096c0:	4614      	mov	r4, r2
 80096c2:	4698      	mov	r8, r3
 80096c4:	4606      	mov	r6, r0
 80096c6:	b118      	cbz	r0, 80096d0 <_vfiprintf_r+0x18>
 80096c8:	6a03      	ldr	r3, [r0, #32]
 80096ca:	b90b      	cbnz	r3, 80096d0 <_vfiprintf_r+0x18>
 80096cc:	f7fe fada 	bl	8007c84 <__sinit>
 80096d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	d405      	bmi.n	80096e2 <_vfiprintf_r+0x2a>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_vfiprintf_r+0x2a>
 80096dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096de:	f7fe fcc9 	bl	8008074 <__retarget_lock_acquire_recursive>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	071b      	lsls	r3, r3, #28
 80096e6:	d501      	bpl.n	80096ec <_vfiprintf_r+0x34>
 80096e8:	692b      	ldr	r3, [r5, #16]
 80096ea:	b99b      	cbnz	r3, 8009714 <_vfiprintf_r+0x5c>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7fe fbec 	bl	8007ecc <__swsetup_r>
 80096f4:	b170      	cbz	r0, 8009714 <_vfiprintf_r+0x5c>
 80096f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f8:	07dc      	lsls	r4, r3, #31
 80096fa:	d504      	bpl.n	8009706 <_vfiprintf_r+0x4e>
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	b01d      	add	sp, #116	; 0x74
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	0598      	lsls	r0, r3, #22
 800970a:	d4f7      	bmi.n	80096fc <_vfiprintf_r+0x44>
 800970c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800970e:	f7fe fcb2 	bl	8008076 <__retarget_lock_release_recursive>
 8009712:	e7f3      	b.n	80096fc <_vfiprintf_r+0x44>
 8009714:	2300      	movs	r3, #0
 8009716:	9309      	str	r3, [sp, #36]	; 0x24
 8009718:	2320      	movs	r3, #32
 800971a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800971e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009722:	2330      	movs	r3, #48	; 0x30
 8009724:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80098d8 <_vfiprintf_r+0x220>
 8009728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800972c:	f04f 0901 	mov.w	r9, #1
 8009730:	4623      	mov	r3, r4
 8009732:	469a      	mov	sl, r3
 8009734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009738:	b10a      	cbz	r2, 800973e <_vfiprintf_r+0x86>
 800973a:	2a25      	cmp	r2, #37	; 0x25
 800973c:	d1f9      	bne.n	8009732 <_vfiprintf_r+0x7a>
 800973e:	ebba 0b04 	subs.w	fp, sl, r4
 8009742:	d00b      	beq.n	800975c <_vfiprintf_r+0xa4>
 8009744:	465b      	mov	r3, fp
 8009746:	4622      	mov	r2, r4
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ffa1 	bl	8009692 <__sfputs_r>
 8009750:	3001      	adds	r0, #1
 8009752:	f000 80a9 	beq.w	80098a8 <_vfiprintf_r+0x1f0>
 8009756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009758:	445a      	add	r2, fp
 800975a:	9209      	str	r2, [sp, #36]	; 0x24
 800975c:	f89a 3000 	ldrb.w	r3, [sl]
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 80a1 	beq.w	80098a8 <_vfiprintf_r+0x1f0>
 8009766:	2300      	movs	r3, #0
 8009768:	f04f 32ff 	mov.w	r2, #4294967295
 800976c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009770:	f10a 0a01 	add.w	sl, sl, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800977c:	931a      	str	r3, [sp, #104]	; 0x68
 800977e:	4654      	mov	r4, sl
 8009780:	2205      	movs	r2, #5
 8009782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009786:	4854      	ldr	r0, [pc, #336]	; (80098d8 <_vfiprintf_r+0x220>)
 8009788:	f7f6 fd22 	bl	80001d0 <memchr>
 800978c:	9a04      	ldr	r2, [sp, #16]
 800978e:	b9d8      	cbnz	r0, 80097c8 <_vfiprintf_r+0x110>
 8009790:	06d1      	lsls	r1, r2, #27
 8009792:	bf44      	itt	mi
 8009794:	2320      	movmi	r3, #32
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	0713      	lsls	r3, r2, #28
 800979c:	bf44      	itt	mi
 800979e:	232b      	movmi	r3, #43	; 0x2b
 80097a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a4:	f89a 3000 	ldrb.w	r3, [sl]
 80097a8:	2b2a      	cmp	r3, #42	; 0x2a
 80097aa:	d015      	beq.n	80097d8 <_vfiprintf_r+0x120>
 80097ac:	9a07      	ldr	r2, [sp, #28]
 80097ae:	4654      	mov	r4, sl
 80097b0:	2000      	movs	r0, #0
 80097b2:	f04f 0c0a 	mov.w	ip, #10
 80097b6:	4621      	mov	r1, r4
 80097b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097bc:	3b30      	subs	r3, #48	; 0x30
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d94d      	bls.n	800985e <_vfiprintf_r+0x1a6>
 80097c2:	b1b0      	cbz	r0, 80097f2 <_vfiprintf_r+0x13a>
 80097c4:	9207      	str	r2, [sp, #28]
 80097c6:	e014      	b.n	80097f2 <_vfiprintf_r+0x13a>
 80097c8:	eba0 0308 	sub.w	r3, r0, r8
 80097cc:	fa09 f303 	lsl.w	r3, r9, r3
 80097d0:	4313      	orrs	r3, r2
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	46a2      	mov	sl, r4
 80097d6:	e7d2      	b.n	800977e <_vfiprintf_r+0xc6>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	1d19      	adds	r1, r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	9103      	str	r1, [sp, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bfbb      	ittet	lt
 80097e4:	425b      	neglt	r3, r3
 80097e6:	f042 0202 	orrlt.w	r2, r2, #2
 80097ea:	9307      	strge	r3, [sp, #28]
 80097ec:	9307      	strlt	r3, [sp, #28]
 80097ee:	bfb8      	it	lt
 80097f0:	9204      	strlt	r2, [sp, #16]
 80097f2:	7823      	ldrb	r3, [r4, #0]
 80097f4:	2b2e      	cmp	r3, #46	; 0x2e
 80097f6:	d10c      	bne.n	8009812 <_vfiprintf_r+0x15a>
 80097f8:	7863      	ldrb	r3, [r4, #1]
 80097fa:	2b2a      	cmp	r3, #42	; 0x2a
 80097fc:	d134      	bne.n	8009868 <_vfiprintf_r+0x1b0>
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	1d1a      	adds	r2, r3, #4
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	9203      	str	r2, [sp, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	bfb8      	it	lt
 800980a:	f04f 33ff 	movlt.w	r3, #4294967295
 800980e:	3402      	adds	r4, #2
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80098e8 <_vfiprintf_r+0x230>
 8009816:	7821      	ldrb	r1, [r4, #0]
 8009818:	2203      	movs	r2, #3
 800981a:	4650      	mov	r0, sl
 800981c:	f7f6 fcd8 	bl	80001d0 <memchr>
 8009820:	b138      	cbz	r0, 8009832 <_vfiprintf_r+0x17a>
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	eba0 000a 	sub.w	r0, r0, sl
 8009828:	2240      	movs	r2, #64	; 0x40
 800982a:	4082      	lsls	r2, r0
 800982c:	4313      	orrs	r3, r2
 800982e:	3401      	adds	r4, #1
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	4829      	ldr	r0, [pc, #164]	; (80098dc <_vfiprintf_r+0x224>)
 8009838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800983c:	2206      	movs	r2, #6
 800983e:	f7f6 fcc7 	bl	80001d0 <memchr>
 8009842:	2800      	cmp	r0, #0
 8009844:	d03f      	beq.n	80098c6 <_vfiprintf_r+0x20e>
 8009846:	4b26      	ldr	r3, [pc, #152]	; (80098e0 <_vfiprintf_r+0x228>)
 8009848:	bb1b      	cbnz	r3, 8009892 <_vfiprintf_r+0x1da>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	3307      	adds	r3, #7
 800984e:	f023 0307 	bic.w	r3, r3, #7
 8009852:	3308      	adds	r3, #8
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009858:	443b      	add	r3, r7
 800985a:	9309      	str	r3, [sp, #36]	; 0x24
 800985c:	e768      	b.n	8009730 <_vfiprintf_r+0x78>
 800985e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009862:	460c      	mov	r4, r1
 8009864:	2001      	movs	r0, #1
 8009866:	e7a6      	b.n	80097b6 <_vfiprintf_r+0xfe>
 8009868:	2300      	movs	r3, #0
 800986a:	3401      	adds	r4, #1
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	4619      	mov	r1, r3
 8009870:	f04f 0c0a 	mov.w	ip, #10
 8009874:	4620      	mov	r0, r4
 8009876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987a:	3a30      	subs	r2, #48	; 0x30
 800987c:	2a09      	cmp	r2, #9
 800987e:	d903      	bls.n	8009888 <_vfiprintf_r+0x1d0>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0c6      	beq.n	8009812 <_vfiprintf_r+0x15a>
 8009884:	9105      	str	r1, [sp, #20]
 8009886:	e7c4      	b.n	8009812 <_vfiprintf_r+0x15a>
 8009888:	fb0c 2101 	mla	r1, ip, r1, r2
 800988c:	4604      	mov	r4, r0
 800988e:	2301      	movs	r3, #1
 8009890:	e7f0      	b.n	8009874 <_vfiprintf_r+0x1bc>
 8009892:	ab03      	add	r3, sp, #12
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	462a      	mov	r2, r5
 8009898:	4b12      	ldr	r3, [pc, #72]	; (80098e4 <_vfiprintf_r+0x22c>)
 800989a:	a904      	add	r1, sp, #16
 800989c:	4630      	mov	r0, r6
 800989e:	f7fd fdb1 	bl	8007404 <_printf_float>
 80098a2:	4607      	mov	r7, r0
 80098a4:	1c78      	adds	r0, r7, #1
 80098a6:	d1d6      	bne.n	8009856 <_vfiprintf_r+0x19e>
 80098a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098aa:	07d9      	lsls	r1, r3, #31
 80098ac:	d405      	bmi.n	80098ba <_vfiprintf_r+0x202>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d402      	bmi.n	80098ba <_vfiprintf_r+0x202>
 80098b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098b6:	f7fe fbde 	bl	8008076 <__retarget_lock_release_recursive>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af1d 	bmi.w	80096fc <_vfiprintf_r+0x44>
 80098c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c4:	e71c      	b.n	8009700 <_vfiprintf_r+0x48>
 80098c6:	ab03      	add	r3, sp, #12
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	462a      	mov	r2, r5
 80098cc:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <_vfiprintf_r+0x22c>)
 80098ce:	a904      	add	r1, sp, #16
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7fe f83b 	bl	800794c <_printf_i>
 80098d6:	e7e4      	b.n	80098a2 <_vfiprintf_r+0x1ea>
 80098d8:	0801db5c 	.word	0x0801db5c
 80098dc:	0801db66 	.word	0x0801db66
 80098e0:	08007405 	.word	0x08007405
 80098e4:	08009693 	.word	0x08009693
 80098e8:	0801db62 	.word	0x0801db62

080098ec <__sflush_r>:
 80098ec:	898a      	ldrh	r2, [r1, #12]
 80098ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	0710      	lsls	r0, r2, #28
 80098f6:	460c      	mov	r4, r1
 80098f8:	d458      	bmi.n	80099ac <__sflush_r+0xc0>
 80098fa:	684b      	ldr	r3, [r1, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dc05      	bgt.n	800990c <__sflush_r+0x20>
 8009900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	dc02      	bgt.n	800990c <__sflush_r+0x20>
 8009906:	2000      	movs	r0, #0
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800990e:	2e00      	cmp	r6, #0
 8009910:	d0f9      	beq.n	8009906 <__sflush_r+0x1a>
 8009912:	2300      	movs	r3, #0
 8009914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009918:	682f      	ldr	r7, [r5, #0]
 800991a:	6a21      	ldr	r1, [r4, #32]
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	d032      	beq.n	8009986 <__sflush_r+0x9a>
 8009920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	075a      	lsls	r2, r3, #29
 8009926:	d505      	bpl.n	8009934 <__sflush_r+0x48>
 8009928:	6863      	ldr	r3, [r4, #4]
 800992a:	1ac0      	subs	r0, r0, r3
 800992c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800992e:	b10b      	cbz	r3, 8009934 <__sflush_r+0x48>
 8009930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009932:	1ac0      	subs	r0, r0, r3
 8009934:	2300      	movs	r3, #0
 8009936:	4602      	mov	r2, r0
 8009938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800993a:	6a21      	ldr	r1, [r4, #32]
 800993c:	4628      	mov	r0, r5
 800993e:	47b0      	blx	r6
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	d106      	bne.n	8009954 <__sflush_r+0x68>
 8009946:	6829      	ldr	r1, [r5, #0]
 8009948:	291d      	cmp	r1, #29
 800994a:	d82b      	bhi.n	80099a4 <__sflush_r+0xb8>
 800994c:	4a29      	ldr	r2, [pc, #164]	; (80099f4 <__sflush_r+0x108>)
 800994e:	410a      	asrs	r2, r1
 8009950:	07d6      	lsls	r6, r2, #31
 8009952:	d427      	bmi.n	80099a4 <__sflush_r+0xb8>
 8009954:	2200      	movs	r2, #0
 8009956:	6062      	str	r2, [r4, #4]
 8009958:	04d9      	lsls	r1, r3, #19
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	6022      	str	r2, [r4, #0]
 800995e:	d504      	bpl.n	800996a <__sflush_r+0x7e>
 8009960:	1c42      	adds	r2, r0, #1
 8009962:	d101      	bne.n	8009968 <__sflush_r+0x7c>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b903      	cbnz	r3, 800996a <__sflush_r+0x7e>
 8009968:	6560      	str	r0, [r4, #84]	; 0x54
 800996a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800996c:	602f      	str	r7, [r5, #0]
 800996e:	2900      	cmp	r1, #0
 8009970:	d0c9      	beq.n	8009906 <__sflush_r+0x1a>
 8009972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009976:	4299      	cmp	r1, r3
 8009978:	d002      	beq.n	8009980 <__sflush_r+0x94>
 800997a:	4628      	mov	r0, r5
 800997c:	f7ff f9f6 	bl	8008d6c <_free_r>
 8009980:	2000      	movs	r0, #0
 8009982:	6360      	str	r0, [r4, #52]	; 0x34
 8009984:	e7c0      	b.n	8009908 <__sflush_r+0x1c>
 8009986:	2301      	movs	r3, #1
 8009988:	4628      	mov	r0, r5
 800998a:	47b0      	blx	r6
 800998c:	1c41      	adds	r1, r0, #1
 800998e:	d1c8      	bne.n	8009922 <__sflush_r+0x36>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0c5      	beq.n	8009922 <__sflush_r+0x36>
 8009996:	2b1d      	cmp	r3, #29
 8009998:	d001      	beq.n	800999e <__sflush_r+0xb2>
 800999a:	2b16      	cmp	r3, #22
 800999c:	d101      	bne.n	80099a2 <__sflush_r+0xb6>
 800999e:	602f      	str	r7, [r5, #0]
 80099a0:	e7b1      	b.n	8009906 <__sflush_r+0x1a>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	e7ad      	b.n	8009908 <__sflush_r+0x1c>
 80099ac:	690f      	ldr	r7, [r1, #16]
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	d0a9      	beq.n	8009906 <__sflush_r+0x1a>
 80099b2:	0793      	lsls	r3, r2, #30
 80099b4:	680e      	ldr	r6, [r1, #0]
 80099b6:	bf08      	it	eq
 80099b8:	694b      	ldreq	r3, [r1, #20]
 80099ba:	600f      	str	r7, [r1, #0]
 80099bc:	bf18      	it	ne
 80099be:	2300      	movne	r3, #0
 80099c0:	eba6 0807 	sub.w	r8, r6, r7
 80099c4:	608b      	str	r3, [r1, #8]
 80099c6:	f1b8 0f00 	cmp.w	r8, #0
 80099ca:	dd9c      	ble.n	8009906 <__sflush_r+0x1a>
 80099cc:	6a21      	ldr	r1, [r4, #32]
 80099ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099d0:	4643      	mov	r3, r8
 80099d2:	463a      	mov	r2, r7
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b0      	blx	r6
 80099d8:	2800      	cmp	r0, #0
 80099da:	dc06      	bgt.n	80099ea <__sflush_r+0xfe>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	e78e      	b.n	8009908 <__sflush_r+0x1c>
 80099ea:	4407      	add	r7, r0
 80099ec:	eba8 0800 	sub.w	r8, r8, r0
 80099f0:	e7e9      	b.n	80099c6 <__sflush_r+0xda>
 80099f2:	bf00      	nop
 80099f4:	dfbffffe 	.word	0xdfbffffe

080099f8 <_fflush_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	690b      	ldr	r3, [r1, #16]
 80099fc:	4605      	mov	r5, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	b913      	cbnz	r3, 8009a08 <_fflush_r+0x10>
 8009a02:	2500      	movs	r5, #0
 8009a04:	4628      	mov	r0, r5
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	b118      	cbz	r0, 8009a12 <_fflush_r+0x1a>
 8009a0a:	6a03      	ldr	r3, [r0, #32]
 8009a0c:	b90b      	cbnz	r3, 8009a12 <_fflush_r+0x1a>
 8009a0e:	f7fe f939 	bl	8007c84 <__sinit>
 8009a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0f3      	beq.n	8009a02 <_fflush_r+0xa>
 8009a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a1c:	07d0      	lsls	r0, r2, #31
 8009a1e:	d404      	bmi.n	8009a2a <_fflush_r+0x32>
 8009a20:	0599      	lsls	r1, r3, #22
 8009a22:	d402      	bmi.n	8009a2a <_fflush_r+0x32>
 8009a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a26:	f7fe fb25 	bl	8008074 <__retarget_lock_acquire_recursive>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	f7ff ff5d 	bl	80098ec <__sflush_r>
 8009a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a34:	07da      	lsls	r2, r3, #31
 8009a36:	4605      	mov	r5, r0
 8009a38:	d4e4      	bmi.n	8009a04 <_fflush_r+0xc>
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	059b      	lsls	r3, r3, #22
 8009a3e:	d4e1      	bmi.n	8009a04 <_fflush_r+0xc>
 8009a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a42:	f7fe fb18 	bl	8008076 <__retarget_lock_release_recursive>
 8009a46:	e7dd      	b.n	8009a04 <_fflush_r+0xc>

08009a48 <__swhatbuf_r>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a50:	2900      	cmp	r1, #0
 8009a52:	b096      	sub	sp, #88	; 0x58
 8009a54:	4615      	mov	r5, r2
 8009a56:	461e      	mov	r6, r3
 8009a58:	da0d      	bge.n	8009a76 <__swhatbuf_r+0x2e>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a60:	f04f 0100 	mov.w	r1, #0
 8009a64:	bf0c      	ite	eq
 8009a66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009a6a:	2340      	movne	r3, #64	; 0x40
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	6031      	str	r1, [r6, #0]
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	b016      	add	sp, #88	; 0x58
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	466a      	mov	r2, sp
 8009a78:	f000 f848 	bl	8009b0c <_fstat_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	dbec      	blt.n	8009a5a <__swhatbuf_r+0x12>
 8009a80:	9901      	ldr	r1, [sp, #4]
 8009a82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009a86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009a8a:	4259      	negs	r1, r3
 8009a8c:	4159      	adcs	r1, r3
 8009a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a92:	e7eb      	b.n	8009a6c <__swhatbuf_r+0x24>

08009a94 <__smakebuf_r>:
 8009a94:	898b      	ldrh	r3, [r1, #12]
 8009a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a98:	079d      	lsls	r5, r3, #30
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	d507      	bpl.n	8009ab0 <__smakebuf_r+0x1c>
 8009aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	6123      	str	r3, [r4, #16]
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	6163      	str	r3, [r4, #20]
 8009aac:	b002      	add	sp, #8
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	ab01      	add	r3, sp, #4
 8009ab2:	466a      	mov	r2, sp
 8009ab4:	f7ff ffc8 	bl	8009a48 <__swhatbuf_r>
 8009ab8:	9900      	ldr	r1, [sp, #0]
 8009aba:	4605      	mov	r5, r0
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff f9c9 	bl	8008e54 <_malloc_r>
 8009ac2:	b948      	cbnz	r0, 8009ad8 <__smakebuf_r+0x44>
 8009ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac8:	059a      	lsls	r2, r3, #22
 8009aca:	d4ef      	bmi.n	8009aac <__smakebuf_r+0x18>
 8009acc:	f023 0303 	bic.w	r3, r3, #3
 8009ad0:	f043 0302 	orr.w	r3, r3, #2
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	e7e3      	b.n	8009aa0 <__smakebuf_r+0xc>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	6020      	str	r0, [r4, #0]
 8009adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	9b00      	ldr	r3, [sp, #0]
 8009ae4:	6163      	str	r3, [r4, #20]
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	6120      	str	r0, [r4, #16]
 8009aea:	b15b      	cbz	r3, 8009b04 <__smakebuf_r+0x70>
 8009aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009af0:	4630      	mov	r0, r6
 8009af2:	f000 f81d 	bl	8009b30 <_isatty_r>
 8009af6:	b128      	cbz	r0, 8009b04 <__smakebuf_r+0x70>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	431d      	orrs	r5, r3
 8009b08:	81a5      	strh	r5, [r4, #12]
 8009b0a:	e7cf      	b.n	8009aac <__smakebuf_r+0x18>

08009b0c <_fstat_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_fstat_r+0x20>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	4611      	mov	r1, r2
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	f7f7 ffac 	bl	8001a76 <_fstat>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d102      	bne.n	8009b28 <_fstat_r+0x1c>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b103      	cbz	r3, 8009b28 <_fstat_r+0x1c>
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	200114ec 	.word	0x200114ec

08009b30 <_isatty_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_isatty_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f7 ffab 	bl	8001a96 <_isatty>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_isatty_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_isatty_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	200114ec 	.word	0x200114ec

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f7 ffb4 	bl	8001ac8 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200114ec 	.word	0x200114ec

08009b70 <memcpy>:
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b78:	d100      	bne.n	8009b7c <memcpy+0xc>
 8009b7a:	4770      	bx	lr
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b86:	4291      	cmp	r1, r2
 8009b88:	d1f9      	bne.n	8009b7e <memcpy+0xe>
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <__assert_func>:
 8009b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b8e:	4614      	mov	r4, r2
 8009b90:	461a      	mov	r2, r3
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <__assert_func+0x2c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4605      	mov	r5, r0
 8009b98:	68d8      	ldr	r0, [r3, #12]
 8009b9a:	b14c      	cbz	r4, 8009bb0 <__assert_func+0x24>
 8009b9c:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <__assert_func+0x30>)
 8009b9e:	9100      	str	r1, [sp, #0]
 8009ba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba4:	4906      	ldr	r1, [pc, #24]	; (8009bc0 <__assert_func+0x34>)
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f000 f844 	bl	8009c34 <fiprintf>
 8009bac:	f000 f854 	bl	8009c58 <abort>
 8009bb0:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <__assert_func+0x38>)
 8009bb2:	461c      	mov	r4, r3
 8009bb4:	e7f3      	b.n	8009b9e <__assert_func+0x12>
 8009bb6:	bf00      	nop
 8009bb8:	20000074 	.word	0x20000074
 8009bbc:	0801db77 	.word	0x0801db77
 8009bc0:	0801db84 	.word	0x0801db84
 8009bc4:	0801dbb2 	.word	0x0801dbb2

08009bc8 <_calloc_r>:
 8009bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bca:	fba1 2402 	umull	r2, r4, r1, r2
 8009bce:	b94c      	cbnz	r4, 8009be4 <_calloc_r+0x1c>
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	9201      	str	r2, [sp, #4]
 8009bd4:	f7ff f93e 	bl	8008e54 <_malloc_r>
 8009bd8:	9a01      	ldr	r2, [sp, #4]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	b930      	cbnz	r0, 8009bec <_calloc_r+0x24>
 8009bde:	4628      	mov	r0, r5
 8009be0:	b003      	add	sp, #12
 8009be2:	bd30      	pop	{r4, r5, pc}
 8009be4:	220c      	movs	r2, #12
 8009be6:	6002      	str	r2, [r0, #0]
 8009be8:	2500      	movs	r5, #0
 8009bea:	e7f8      	b.n	8009bde <_calloc_r+0x16>
 8009bec:	4621      	mov	r1, r4
 8009bee:	f7fe f9c5 	bl	8007f7c <memset>
 8009bf2:	e7f4      	b.n	8009bde <_calloc_r+0x16>

08009bf4 <__ascii_mbtowc>:
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	b901      	cbnz	r1, 8009bfa <__ascii_mbtowc+0x6>
 8009bf8:	a901      	add	r1, sp, #4
 8009bfa:	b142      	cbz	r2, 8009c0e <__ascii_mbtowc+0x1a>
 8009bfc:	b14b      	cbz	r3, 8009c12 <__ascii_mbtowc+0x1e>
 8009bfe:	7813      	ldrb	r3, [r2, #0]
 8009c00:	600b      	str	r3, [r1, #0]
 8009c02:	7812      	ldrb	r2, [r2, #0]
 8009c04:	1e10      	subs	r0, r2, #0
 8009c06:	bf18      	it	ne
 8009c08:	2001      	movne	r0, #1
 8009c0a:	b002      	add	sp, #8
 8009c0c:	4770      	bx	lr
 8009c0e:	4610      	mov	r0, r2
 8009c10:	e7fb      	b.n	8009c0a <__ascii_mbtowc+0x16>
 8009c12:	f06f 0001 	mvn.w	r0, #1
 8009c16:	e7f8      	b.n	8009c0a <__ascii_mbtowc+0x16>

08009c18 <__ascii_wctomb>:
 8009c18:	b149      	cbz	r1, 8009c2e <__ascii_wctomb+0x16>
 8009c1a:	2aff      	cmp	r2, #255	; 0xff
 8009c1c:	bf85      	ittet	hi
 8009c1e:	238a      	movhi	r3, #138	; 0x8a
 8009c20:	6003      	strhi	r3, [r0, #0]
 8009c22:	700a      	strbls	r2, [r1, #0]
 8009c24:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c28:	bf98      	it	ls
 8009c2a:	2001      	movls	r0, #1
 8009c2c:	4770      	bx	lr
 8009c2e:	4608      	mov	r0, r1
 8009c30:	4770      	bx	lr
	...

08009c34 <fiprintf>:
 8009c34:	b40e      	push	{r1, r2, r3}
 8009c36:	b503      	push	{r0, r1, lr}
 8009c38:	4601      	mov	r1, r0
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	4805      	ldr	r0, [pc, #20]	; (8009c54 <fiprintf+0x20>)
 8009c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c42:	6800      	ldr	r0, [r0, #0]
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f7ff fd37 	bl	80096b8 <_vfiprintf_r>
 8009c4a:	b002      	add	sp, #8
 8009c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c50:	b003      	add	sp, #12
 8009c52:	4770      	bx	lr
 8009c54:	20000074 	.word	0x20000074

08009c58 <abort>:
 8009c58:	b508      	push	{r3, lr}
 8009c5a:	2006      	movs	r0, #6
 8009c5c:	f000 f82c 	bl	8009cb8 <raise>
 8009c60:	2001      	movs	r0, #1
 8009c62:	f7f7 fed5 	bl	8001a10 <_exit>

08009c66 <_raise_r>:
 8009c66:	291f      	cmp	r1, #31
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	d904      	bls.n	8009c7a <_raise_r+0x14>
 8009c70:	2316      	movs	r3, #22
 8009c72:	6003      	str	r3, [r0, #0]
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c7c:	b112      	cbz	r2, 8009c84 <_raise_r+0x1e>
 8009c7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c82:	b94b      	cbnz	r3, 8009c98 <_raise_r+0x32>
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 f831 	bl	8009cec <_getpid_r>
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c94:	f000 b818 	b.w	8009cc8 <_kill_r>
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d00a      	beq.n	8009cb2 <_raise_r+0x4c>
 8009c9c:	1c59      	adds	r1, r3, #1
 8009c9e:	d103      	bne.n	8009ca8 <_raise_r+0x42>
 8009ca0:	2316      	movs	r3, #22
 8009ca2:	6003      	str	r3, [r0, #0]
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	e7e7      	b.n	8009c78 <_raise_r+0x12>
 8009ca8:	2400      	movs	r4, #0
 8009caa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	4798      	blx	r3
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	e7e0      	b.n	8009c78 <_raise_r+0x12>
	...

08009cb8 <raise>:
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <raise+0xc>)
 8009cba:	4601      	mov	r1, r0
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f7ff bfd2 	b.w	8009c66 <_raise_r>
 8009cc2:	bf00      	nop
 8009cc4:	20000074 	.word	0x20000074

08009cc8 <_kill_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	; (8009ce8 <_kill_r+0x20>)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	f7f7 fe8b 	bl	80019f0 <_kill>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d102      	bne.n	8009ce4 <_kill_r+0x1c>
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	b103      	cbz	r3, 8009ce4 <_kill_r+0x1c>
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200114ec 	.word	0x200114ec

08009cec <_getpid_r>:
 8009cec:	f7f7 be78 	b.w	80019e0 <_getpid>

08009cf0 <log10f>:
 8009cf0:	b508      	push	{r3, lr}
 8009cf2:	ed2d 8b02 	vpush	{d8}
 8009cf6:	eeb0 8a40 	vmov.f32	s16, s0
 8009cfa:	f000 f84f 	bl	8009d9c <__ieee754_log10f>
 8009cfe:	eeb4 8a48 	vcmp.f32	s16, s16
 8009d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d06:	d60f      	bvs.n	8009d28 <log10f+0x38>
 8009d08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d10:	d80a      	bhi.n	8009d28 <log10f+0x38>
 8009d12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	d108      	bne.n	8009d2e <log10f+0x3e>
 8009d1c:	f7fe f980 	bl	8008020 <__errno>
 8009d20:	2322      	movs	r3, #34	; 0x22
 8009d22:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009d44 <log10f+0x54>
 8009d26:	6003      	str	r3, [r0, #0]
 8009d28:	ecbd 8b02 	vpop	{d8}
 8009d2c:	bd08      	pop	{r3, pc}
 8009d2e:	f7fe f977 	bl	8008020 <__errno>
 8009d32:	ecbd 8b02 	vpop	{d8}
 8009d36:	2321      	movs	r3, #33	; 0x21
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009d3e:	4802      	ldr	r0, [pc, #8]	; (8009d48 <log10f+0x58>)
 8009d40:	f000 b822 	b.w	8009d88 <nanf>
 8009d44:	ff800000 	.word	0xff800000
 8009d48:	0801dbb2 	.word	0x0801dbb2

08009d4c <sqrtf>:
 8009d4c:	b508      	push	{r3, lr}
 8009d4e:	ed2d 8b02 	vpush	{d8}
 8009d52:	eeb0 8a40 	vmov.f32	s16, s0
 8009d56:	f000 f81d 	bl	8009d94 <__ieee754_sqrtf>
 8009d5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8009d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d62:	d60c      	bvs.n	8009d7e <sqrtf+0x32>
 8009d64:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009d84 <sqrtf+0x38>
 8009d68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d70:	d505      	bpl.n	8009d7e <sqrtf+0x32>
 8009d72:	f7fe f955 	bl	8008020 <__errno>
 8009d76:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009d7a:	2321      	movs	r3, #33	; 0x21
 8009d7c:	6003      	str	r3, [r0, #0]
 8009d7e:	ecbd 8b02 	vpop	{d8}
 8009d82:	bd08      	pop	{r3, pc}
 8009d84:	00000000 	.word	0x00000000

08009d88 <nanf>:
 8009d88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d90 <nanf+0x8>
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	7fc00000 	.word	0x7fc00000

08009d94 <__ieee754_sqrtf>:
 8009d94:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009d98:	4770      	bx	lr
	...

08009d9c <__ieee754_log10f>:
 8009d9c:	b508      	push	{r3, lr}
 8009d9e:	ee10 2a10 	vmov	r2, s0
 8009da2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009da6:	ed2d 8b02 	vpush	{d8}
 8009daa:	d108      	bne.n	8009dbe <__ieee754_log10f+0x22>
 8009dac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009e34 <__ieee754_log10f+0x98>
 8009db0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8009e38 <__ieee754_log10f+0x9c>
 8009db4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009db8:	ecbd 8b02 	vpop	{d8}
 8009dbc:	bd08      	pop	{r3, pc}
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	da02      	bge.n	8009dc8 <__ieee754_log10f+0x2c>
 8009dc2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009dc6:	e7f3      	b.n	8009db0 <__ieee754_log10f+0x14>
 8009dc8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009dcc:	db02      	blt.n	8009dd4 <__ieee754_log10f+0x38>
 8009dce:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009dd2:	e7f1      	b.n	8009db8 <__ieee754_log10f+0x1c>
 8009dd4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009dd8:	bfbf      	itttt	lt
 8009dda:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8009e3c <__ieee754_log10f+0xa0>
 8009dde:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009de2:	f06f 0118 	mvnlt.w	r1, #24
 8009de6:	ee17 2a90 	vmovlt	r2, s15
 8009dea:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009dee:	bfa8      	it	ge
 8009df0:	2100      	movge	r1, #0
 8009df2:	3b7f      	subs	r3, #127	; 0x7f
 8009df4:	440b      	add	r3, r1
 8009df6:	0fd9      	lsrs	r1, r3, #31
 8009df8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8009dfc:	ee07 3a90 	vmov	s15, r3
 8009e00:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009e04:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8009e08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009e0c:	ee00 3a10 	vmov	s0, r3
 8009e10:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009e14:	f000 f81a 	bl	8009e4c <__ieee754_logf>
 8009e18:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009e40 <__ieee754_log10f+0xa4>
 8009e1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009e20:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009e44 <__ieee754_log10f+0xa8>
 8009e24:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009e28:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009e48 <__ieee754_log10f+0xac>
 8009e2c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009e30:	e7c2      	b.n	8009db8 <__ieee754_log10f+0x1c>
 8009e32:	bf00      	nop
 8009e34:	cc000000 	.word	0xcc000000
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	4c000000 	.word	0x4c000000
 8009e40:	3ede5bd9 	.word	0x3ede5bd9
 8009e44:	355427db 	.word	0x355427db
 8009e48:	3e9a2080 	.word	0x3e9a2080

08009e4c <__ieee754_logf>:
 8009e4c:	ee10 3a10 	vmov	r3, s0
 8009e50:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009e54:	d106      	bne.n	8009e64 <__ieee754_logf+0x18>
 8009e56:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8009ff0 <__ieee754_logf+0x1a4>
 8009e5a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8009ff4 <__ieee754_logf+0x1a8>
 8009e5e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009e62:	4770      	bx	lr
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da02      	bge.n	8009e6e <__ieee754_logf+0x22>
 8009e68:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009e6c:	e7f5      	b.n	8009e5a <__ieee754_logf+0xe>
 8009e6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e72:	db02      	blt.n	8009e7a <__ieee754_logf+0x2e>
 8009e74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e78:	4770      	bx	lr
 8009e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e7e:	bfb8      	it	lt
 8009e80:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8009ff8 <__ieee754_logf+0x1ac>
 8009e84:	485d      	ldr	r0, [pc, #372]	; (8009ffc <__ieee754_logf+0x1b0>)
 8009e86:	bfbe      	ittt	lt
 8009e88:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009e8c:	f06f 0118 	mvnlt.w	r1, #24
 8009e90:	ee17 3a90 	vmovlt	r3, s15
 8009e94:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009e98:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e9c:	4418      	add	r0, r3
 8009e9e:	bfa8      	it	ge
 8009ea0:	2100      	movge	r1, #0
 8009ea2:	3a7f      	subs	r2, #127	; 0x7f
 8009ea4:	440a      	add	r2, r1
 8009ea6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8009eaa:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8009eae:	4319      	orrs	r1, r3
 8009eb0:	ee00 1a10 	vmov	s0, r1
 8009eb4:	4952      	ldr	r1, [pc, #328]	; (800a000 <__ieee754_logf+0x1b4>)
 8009eb6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8009eba:	f103 000f 	add.w	r0, r3, #15
 8009ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ec2:	4001      	ands	r1, r0
 8009ec4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ec8:	bb89      	cbnz	r1, 8009f2e <__ieee754_logf+0xe2>
 8009eca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed2:	d10f      	bne.n	8009ef4 <__ieee754_logf+0xa8>
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	f000 8087 	beq.w	8009fe8 <__ieee754_logf+0x19c>
 8009eda:	ee07 2a90 	vmov	s15, r2
 8009ede:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800a004 <__ieee754_logf+0x1b8>
 8009ee2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a008 <__ieee754_logf+0x1bc>
 8009ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009eea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009eee:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009ef2:	4770      	bx	lr
 8009ef4:	eddf 6a45 	vldr	s13, [pc, #276]	; 800a00c <__ieee754_logf+0x1c0>
 8009ef8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009efc:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009f00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f08:	b912      	cbnz	r2, 8009f10 <__ieee754_logf+0xc4>
 8009f0a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009f0e:	4770      	bx	lr
 8009f10:	ee07 2a90 	vmov	s15, r2
 8009f14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a004 <__ieee754_logf+0x1b8>
 8009f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f1c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009f20:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009f24:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a008 <__ieee754_logf+0x1bc>
 8009f28:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009f2c:	4770      	bx	lr
 8009f2e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009f32:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009f36:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a010 <__ieee754_logf+0x1c4>
 8009f3a:	eddf 4a36 	vldr	s9, [pc, #216]	; 800a014 <__ieee754_logf+0x1c8>
 8009f3e:	4936      	ldr	r1, [pc, #216]	; (800a018 <__ieee754_logf+0x1cc>)
 8009f40:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009f44:	4419      	add	r1, r3
 8009f46:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8009f4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	ee07 2a90 	vmov	s15, r2
 8009f56:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009f5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009f5e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009f62:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a01c <__ieee754_logf+0x1d0>
 8009f66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009f6a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a020 <__ieee754_logf+0x1d4>
 8009f6e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009f72:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a024 <__ieee754_logf+0x1d8>
 8009f76:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009f7a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800a028 <__ieee754_logf+0x1dc>
 8009f7e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009f82:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800a02c <__ieee754_logf+0x1e0>
 8009f86:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009f8a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009f8e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009f92:	dd1a      	ble.n	8009fca <__ieee754_logf+0x17e>
 8009f94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009f98:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009f9c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fa4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009fa8:	b912      	cbnz	r2, 8009fb0 <__ieee754_logf+0x164>
 8009faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fae:	e7ac      	b.n	8009f0a <__ieee754_logf+0xbe>
 8009fb0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800a004 <__ieee754_logf+0x1b8>
 8009fb4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fbc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009fc0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a008 <__ieee754_logf+0x1bc>
 8009fc4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8009fc8:	4770      	bx	lr
 8009fca:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009fce:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009fd2:	b912      	cbnz	r2, 8009fda <__ieee754_logf+0x18e>
 8009fd4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009fd8:	4770      	bx	lr
 8009fda:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800a004 <__ieee754_logf+0x1b8>
 8009fde:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009fe2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009fe6:	e7eb      	b.n	8009fc0 <__ieee754_logf+0x174>
 8009fe8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009ff4 <__ieee754_logf+0x1a8>
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	cc000000 	.word	0xcc000000
 8009ff4:	00000000 	.word	0x00000000
 8009ff8:	4c000000 	.word	0x4c000000
 8009ffc:	004afb20 	.word	0x004afb20
 800a000:	007ffff0 	.word	0x007ffff0
 800a004:	3717f7d1 	.word	0x3717f7d1
 800a008:	3f317180 	.word	0x3f317180
 800a00c:	3eaaaaab 	.word	0x3eaaaaab
 800a010:	3e1cd04f 	.word	0x3e1cd04f
 800a014:	3e178897 	.word	0x3e178897
 800a018:	ffcf5c30 	.word	0xffcf5c30
 800a01c:	3e638e29 	.word	0x3e638e29
 800a020:	3ecccccd 	.word	0x3ecccccd
 800a024:	3e3a3325 	.word	0x3e3a3325
 800a028:	3e924925 	.word	0x3e924925
 800a02c:	3f2aaaab 	.word	0x3f2aaaab

0800a030 <_init>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr

0800a03c <_fini>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr
