
RockPaperScissors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cec  080090a0  080090a0  000190a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad8c  0800ad8c  0002080c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad8c  0800ad8c  0001ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad94  0800ad94  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad98  0800ad98  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000720  20000000  0800ad9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .AI_RAM       000000ec  20000720  0800b4bc  00020720  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003ec  2000080c  0800b5a8  0002080c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20000bf8  0800b5a8  00020bf8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 13 .comment      00000108  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cd93  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004460  00000000  00000000  0003d6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00009022  00000000  00000000  00041b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e28  00000000  00000000  0004ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c23  00000000  00000000  0004b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029bcb  00000000  00000000  0004c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001bc67  00000000  00000000  00076176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9ae0  00000000  00000000  00091ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003970  00000000  00000000  0018b8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  0018f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  0018f2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000000fa  00000000  00000000  0018f2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000080c 	.word	0x2000080c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800907c 	.word	0x0800907c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000810 	.word	0x20000810
 80001cc:	0800907c 	.word	0x0800907c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <rps_init>:
  for (int i = 0; i < len; i++) {
    normalized_data[i] = (in_data[i] - mean) / std;
  }
}

void rps_init(void) {
 8000f44:	b538      	push	{r3, r4, r5, lr}

  printf("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <rps_init+0x50>)
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f48:	4d13      	ldr	r5, [pc, #76]	; (8000f98 <rps_init+0x54>)
  printf("[NETWORK FIND] NN_NAME: %s\n", nn_name);

  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f4a:	4c14      	ldr	r4, [pc, #80]	; (8000f9c <rps_init+0x58>)
  printf("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f4c:	f006 f844 	bl	8006fd8 <puts>
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4608      	mov	r0, r1
 8000f54:	f002 fdc4 	bl	8003ae0 <ai_mnetwork_find>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	6028      	str	r0, [r5, #0]
  printf("[NETWORK FIND] NN_NAME: %s\n", nn_name);
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <rps_init+0x5c>)
 8000f5e:	f005 ffd5 	bl	8006f0c <iprintf>
  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f62:	4621      	mov	r1, r4
 8000f64:	6828      	ldr	r0, [r5, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f002 fdc8 	bl	8003afc <ai_mnetwork_create>
  printf("[NETWORK CREATION] err.type: 0x%02X, err.code: 0x%02X\n",
 8000f6c:	0a02      	lsrs	r2, r0, #8
 8000f6e:	b2c1      	uxtb	r1, r0
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <rps_init+0x60>)
 8000f72:	f005 ffcb 	bl	8006f0c <iprintf>
      ai_err.type, ai_err.code);

  bool success = ai_mnetwork_init(handle);
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	f002 fdea 	bl	8003b50 <ai_mnetwork_init>
 8000f7c:	4601      	mov	r1, r0
  printf("[NETWORK INITIALIZATION] %d\n", success);  // 0: Failure, 1; Success
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <rps_init+0x64>)
 8000f80:	f005 ffc4 	bl	8006f0c <iprintf>

  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8000f84:	2208      	movs	r2, #8
}
 8000f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <rps_init+0x68>)
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	f000 b925 	b.w	80011dc <dct2_2d_init_f32>
 8000f92:	bf00      	nop
 8000f94:	080090c8 	.word	0x080090c8
 8000f98:	20000850 	.word	0x20000850
 8000f9c:	2000084c 	.word	0x2000084c
 8000fa0:	080090e8 	.word	0x080090e8
 8000fa4:	08009104 	.word	0x08009104
 8000fa8:	0800913b 	.word	0x0800913b
 8000fac:	20000828 	.word	0x20000828

08000fb0 <adaptor_init>:
#include <amg8833.h>

I2C_HandleTypeDef *phi2c_;

void adaptor_init(I2C_HandleTypeDef *phi2c) {
  phi2c_ = phi2c;
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <adaptor_init+0x8>)
 8000fb2:	6018      	str	r0, [r3, #0]
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000854 	.word	0x20000854

08000fbc <i2c_write>:

void i2c_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t data) {
 8000fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buf[2];
  buf[0] = reg_addr;
  buf[1] = data;
  HAL_I2C_Master_Transmit(phi2c_, i2c_addr, buf, 2, 100);
 8000fbe:	2364      	movs	r3, #100	; 0x64
  buf[0] = reg_addr;
 8000fc0:	f88d 100c 	strb.w	r1, [sp, #12]
  HAL_I2C_Master_Transmit(phi2c_, i2c_addr, buf, 2, 100);
 8000fc4:	4601      	mov	r1, r0
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <i2c_write+0x28>)
 8000fc8:	9300      	str	r3, [sp, #0]
  buf[1] = data;
 8000fca:	f88d 200d 	strb.w	r2, [sp, #13]
  HAL_I2C_Master_Transmit(phi2c_, i2c_addr, buf, 2, 100);
 8000fce:	2302      	movs	r3, #2
 8000fd0:	aa03      	add	r2, sp, #12
 8000fd2:	6800      	ldr	r0, [r0, #0]
 8000fd4:	f000 ff90 	bl	8001ef8 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 fbcb 	bl	8001774 <HAL_Delay>
}
 8000fde:	b005      	add	sp, #20
 8000fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe4:	20000854 	.word	0x20000854

08000fe8 <set_moving_average>:

void set_moving_average(bool enable) {
 8000fe8:	b570      	push	{r4, r5, r6, lr}
  uint8_t reg_addr_sequence[5] = {AMG8833_1F_ADDR, AMG8833_1F_ADDR, AMG8833_1F_ADDR,
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <set_moving_average+0x54>)
      AMG8833_AVE_ADDR, AMG8833_1F_ADDR};
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <set_moving_average+0x58>)
  uint8_t disable_sequence[5] = {0x50, 0x45, 0x57, 0x00, 0x00};
 8000fee:	4915      	ldr	r1, [pc, #84]	; (8001044 <set_moving_average+0x5c>)
void set_moving_average(bool enable) {
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	4604      	mov	r4, r0
  uint8_t reg_addr_sequence[5] = {AMG8833_1F_ADDR, AMG8833_1F_ADDR, AMG8833_1F_ADDR,
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	9000      	str	r0, [sp, #0]
 8000ff8:	791b      	ldrb	r3, [r3, #4]
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8000ffa:	6810      	ldr	r0, [r2, #0]
 8000ffc:	7912      	ldrb	r2, [r2, #4]
  uint8_t reg_addr_sequence[5] = {AMG8833_1F_ADDR, AMG8833_1F_ADDR, AMG8833_1F_ADDR,
 8000ffe:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8001002:	f88d 200c 	strb.w	r2, [sp, #12]
 8001006:	ab02      	add	r3, sp, #8
  uint8_t disable_sequence[5] = {0x50, 0x45, 0x57, 0x00, 0x00};
 8001008:	aa04      	add	r2, sp, #16
  uint8_t *pSeq;

  if (enable) {
    pSeq = enable_sequence;
  } else {
    pSeq = disable_sequence;
 800100a:	2c00      	cmp	r4, #0
 800100c:	bf08      	it	eq
 800100e:	4613      	moveq	r3, r2
  uint8_t enable_sequence[5] = {0x50, 0x45, 0x57, 0x20, 0x00};
 8001010:	9002      	str	r0, [sp, #8]
  uint8_t disable_sequence[5] = {0x50, 0x45, 0x57, 0x00, 0x00};
 8001012:	6808      	ldr	r0, [r1, #0]
 8001014:	7909      	ldrb	r1, [r1, #4]
 8001016:	9004      	str	r0, [sp, #16]
 8001018:	f88d 1014 	strb.w	r1, [sp, #20]
  }

  for (int i = 0; i < sizeof(reg_addr_sequence); i++) {
 800101c:	466d      	mov	r5, sp
 800101e:	1e5e      	subs	r6, r3, #1
 8001020:	1d1c      	adds	r4, r3, #4
 8001022:	42a6      	cmp	r6, r4
 8001024:	d101      	bne.n	800102a <set_moving_average+0x42>
    i2c_write(AMG8833_DEV_ADDR, reg_addr_sequence[i], *(pSeq+i));
  }
}
 8001026:	b006      	add	sp, #24
 8001028:	bd70      	pop	{r4, r5, r6, pc}
    i2c_write(AMG8833_DEV_ADDR, reg_addr_sequence[i], *(pSeq+i));
 800102a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800102e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001032:	20d0      	movs	r0, #208	; 0xd0
 8001034:	f7ff ffc2 	bl	8000fbc <i2c_write>
  for (int i = 0; i < sizeof(reg_addr_sequence); i++) {
 8001038:	e7f3      	b.n	8001022 <set_moving_average+0x3a>
 800103a:	bf00      	nop
 800103c:	08009158 	.word	0x08009158
 8001040:	0800915e 	.word	0x0800915e
 8001044:	080090a0 	.word	0x080090a0

08001048 <read_registors>:

void read_registors(uint8_t reg_addr, uint8_t *buffer, uint8_t length) {
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t buf[1];
  buf[0] = reg_addr;
  HAL_I2C_Master_Transmit(phi2c_, AMG8833_DEV_ADDR, buf, 1, 100);
 800104a:	4e0b      	ldr	r6, [pc, #44]	; (8001078 <read_registors+0x30>)
void read_registors(uint8_t reg_addr, uint8_t *buffer, uint8_t length) {
 800104c:	b085      	sub	sp, #20
  HAL_I2C_Master_Transmit(phi2c_, AMG8833_DEV_ADDR, buf, 1, 100);
 800104e:	2764      	movs	r7, #100	; 0x64
void read_registors(uint8_t reg_addr, uint8_t *buffer, uint8_t length) {
 8001050:	460c      	mov	r4, r1
 8001052:	4615      	mov	r5, r2
  buf[0] = reg_addr;
 8001054:	f88d 000c 	strb.w	r0, [sp, #12]
  HAL_I2C_Master_Transmit(phi2c_, AMG8833_DEV_ADDR, buf, 1, 100);
 8001058:	aa03      	add	r2, sp, #12
 800105a:	6830      	ldr	r0, [r6, #0]
 800105c:	9700      	str	r7, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	21d0      	movs	r1, #208	; 0xd0
 8001062:	f000 ff49 	bl	8001ef8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(phi2c_, AMG8833_DEV_ADDR, buffer, length, 100);
 8001066:	6830      	ldr	r0, [r6, #0]
 8001068:	9700      	str	r7, [sp, #0]
 800106a:	462b      	mov	r3, r5
 800106c:	4622      	mov	r2, r4
 800106e:	21d0      	movs	r1, #208	; 0xd0
 8001070:	f000 ffd8 	bl	8002024 <HAL_I2C_Master_Receive>
}
 8001074:	b005      	add	sp, #20
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001078:	20000854 	.word	0x20000854
 800107c:	00000000 	.word	0x00000000

08001080 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	ed2d 8b04 	vpush	{d8-d9}
 8001088:	460d      	mov	r5, r1
 800108a:	b083      	sub	sp, #12
 800108c:	4604      	mov	r4, r0
  float32_t *pDataW = NULL;
  float32_t *pDataW_I = NULL;
  float32_t *pDataX = NULL;
  S->width = width;

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 800108e:	2300      	movs	r3, #0
  S->width = width;
 8001090:	f820 1b04 	strh.w	r1, [r0], #4
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8001094:	2201      	movs	r2, #1

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8001096:	fb05 f605 	mul.w	r6, r5, r5
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 800109a:	f002 fe75 	bl	8003d88 <arm_mat_init_f32>
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 800109e:	2104      	movs	r1, #4
 80010a0:	4630      	mov	r0, r6
 80010a2:	f005 f94b 	bl	800633c <calloc>
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 80010a6:	462a      	mov	r2, r5
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80010a8:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 80010aa:	4629      	mov	r1, r5
 80010ac:	f104 000c 	add.w	r0, r4, #12
 80010b0:	f002 fe6a 	bl	8003d88 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80010b4:	2104      	movs	r1, #4
 80010b6:	4630      	mov	r0, r6
 80010b8:	f005 f940 	bl	800633c <calloc>
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 80010bc:	462a      	mov	r2, r5
  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 80010be:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 80010c0:	4629      	mov	r1, r5
 80010c2:	f104 0014 	add.w	r0, r4, #20
 80010c6:	f002 fe5f 	bl	8003d88 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 80010ca:	2104      	movs	r1, #4
 80010cc:	4628      	mov	r0, r5
 80010ce:	f005 f935 	bl	800633c <calloc>
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 80010d2:	4629      	mov	r1, r5
  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 80010d4:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f104 001c 	add.w	r0, r4, #28
 80010dc:	f002 fe54 	bl	8003d88 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 80010e0:	2500      	movs	r5, #0
 80010e2:	8823      	ldrh	r3, [r4, #0]
 80010e4:	42ab      	cmp	r3, r5
 80010e6:	dd6a      	ble.n	80011be <dct2_init_f32+0x13e>
 80010e8:	006b      	lsls	r3, r5, #1
 80010ea:	462f      	mov	r7, r5
 80010ec:	9301      	str	r3, [sp, #4]
    for (int n = 0; n < S->width; n++) {
 80010ee:	2600      	movs	r6, #0
 80010f0:	e023      	b.n	800113a <dct2_init_f32+0xba>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 80010f2:	6923      	ldr	r3, [r4, #16]
 80010f4:	fb05 620a 	mla	r2, r5, sl, r6
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 80010f8:	4638      	mov	r0, r7
      S->W.pData[k * S->width + n] = arm_cos_f32(
 80010fa:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	a334      	add	r3, pc, #208	; (adr r3, 80011d4 <dct2_init_f32+0x154>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4680      	mov	r8, r0
 800110e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001112:	4689      	mov	r9, r1
 8001114:	f7ff fa06 	bl	8000524 <__aeabi_i2d>
 8001118:	460b      	mov	r3, r1
 800111a:	4602      	mov	r2, r0
 800111c:	4649      	mov	r1, r9
 800111e:	4640      	mov	r0, r8
 8001120:	f7ff fb94 	bl	800084c <__aeabi_ddiv>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001124:	f7ff fd40 	bl	8000ba8 <__aeabi_d2f>
 8001128:	ee00 0a10 	vmov	s0, r0
 800112c:	f002 fe30 	bl	8003d90 <arm_cos_f32>
 8001130:	9b01      	ldr	r3, [sp, #4]
 8001132:	ed8b 0a00 	vstr	s0, [fp]
    for (int n = 0; n < S->width; n++) {
 8001136:	3601      	adds	r6, #1
 8001138:	441f      	add	r7, r3
 800113a:	f8b4 a000 	ldrh.w	sl, [r4]
 800113e:	45b2      	cmp	sl, r6
 8001140:	dcd7      	bgt.n	80010f2 <dct2_init_f32+0x72>
  for (int k = 0; k < S->width; k++) {
 8001142:	3501      	adds	r5, #1
 8001144:	e7cd      	b.n	80010e2 <dct2_init_f32+0x62>
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8001146:	2d00      	cmp	r5, #0
  }

  for (int n = 0; n < S->width; n++) {
    for (int k = 0; k < S->width; k++) {
      S->W_I.pData[n * S->width + k] = c_k(k)
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001148:	4638      	mov	r0, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 800114a:	bf14      	ite	ne
 800114c:	eeb0 9a48 	vmovne.f32	s18, s16
 8001150:	eeb0 9a68 	vmoveq.f32	s18, s17
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001154:	f7ff f9e6 	bl	8000524 <__aeabi_i2d>
 8001158:	a31e      	add	r3, pc, #120	; (adr r3, 80011d4 <dct2_init_f32+0x154>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa4b 	bl	80005f8 <__aeabi_dmul>
 8001162:	4680      	mov	r8, r0
 8001164:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001168:	4689      	mov	r9, r1
 800116a:	f7ff f9db 	bl	8000524 <__aeabi_i2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4640      	mov	r0, r8
 8001174:	4649      	mov	r1, r9
 8001176:	f7ff fb69 	bl	800084c <__aeabi_ddiv>
 800117a:	f7ff fd15 	bl	8000ba8 <__aeabi_d2f>
 800117e:	ee00 0a10 	vmov	s0, r0
 8001182:	f002 fe05 	bl	8003d90 <arm_cos_f32>
      S->W_I.pData[n * S->width + k] = c_k(k)
 8001186:	8822      	ldrh	r2, [r4, #0]
 8001188:	69a3      	ldr	r3, [r4, #24]
 800118a:	fb06 5202 	mla	r2, r6, r2, r5
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 800118e:	ee20 0a09 	vmul.f32	s0, s0, s18
      S->W_I.pData[n * S->width + k] = c_k(k)
 8001192:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001196:	ed83 0a00 	vstr	s0, [r3]
    for (int k = 0; k < S->width; k++) {
 800119a:	3501      	adds	r5, #1
 800119c:	445f      	add	r7, fp
 800119e:	f8b4 a000 	ldrh.w	sl, [r4]
 80011a2:	45aa      	cmp	sl, r5
 80011a4:	dccf      	bgt.n	8001146 <dct2_init_f32+0xc6>
  for (int n = 0; n < S->width; n++) {
 80011a6:	3601      	adds	r6, #1
 80011a8:	8823      	ldrh	r3, [r4, #0]
 80011aa:	42b3      	cmp	r3, r6
 80011ac:	dd0b      	ble.n	80011c6 <dct2_init_f32+0x146>
 80011ae:	0073      	lsls	r3, r6, #1
 80011b0:	2700      	movs	r7, #0
 80011b2:	f103 0b01 	add.w	fp, r3, #1
    for (int k = 0; k < S->width; k++) {
 80011b6:	463d      	mov	r5, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80011b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80011bc:	e7ef      	b.n	800119e <dct2_init_f32+0x11e>
 80011be:	eddf 8a04 	vldr	s17, [pc, #16]	; 80011d0 <dct2_init_f32+0x150>
  for (int n = 0; n < S->width; n++) {
 80011c2:	2600      	movs	r6, #0
 80011c4:	e7f0      	b.n	80011a8 <dct2_init_f32+0x128>
    }
  }

}
 80011c6:	b003      	add	sp, #12
 80011c8:	ecbd 8b04 	vpop	{d8-d9}
 80011cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d0:	3f3504f3 	.word	0x3f3504f3
 80011d4:	54442d18 	.word	0x54442d18
 80011d8:	400921fb 	.word	0x400921fb

080011dc <dct2_2d_init_f32>:
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     height     DCT2 2D width.
 * @param[in]     width      DCT2 2D height.
 * @return        none.
 */
void dct2_2d_init_f32(dct2_instance_f32 *S, uint16_t height, uint16_t width) {
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4604      	mov	r4, r0
 80011e0:	460d      	mov	r5, r1
  dct2_init_f32(S, width);
 80011e2:	4611      	mov	r1, r2
 80011e4:	f7ff ff4c 	bl	8001080 <dct2_init_f32>
  S->height = height;
 80011e8:	8065      	strh	r5, [r4, #2]
}
 80011ea:	bd38      	pop	{r3, r4, r5, pc}

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b500      	push	{lr}
 80011ee:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f0:	2244      	movs	r2, #68	; 0x44
 80011f2:	2100      	movs	r1, #0
 80011f4:	a805      	add	r0, sp, #20
 80011f6:	f005 ffcf 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fa:	2214      	movs	r2, #20
 80011fc:	2100      	movs	r1, #0
 80011fe:	4668      	mov	r0, sp
 8001200:	f005 ffca 	bl	8007198 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001204:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001208:	f000 fff8 	bl	80021fc <HAL_PWREx_ControlVoltageScaling>
 800120c:	b108      	cbz	r0, 8001212 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	e7fe      	b.n	8001210 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001212:	2210      	movs	r2, #16
 8001214:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001218:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 800121e:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001222:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001226:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001232:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001234:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f001 f8a7 	bl	8002388 <HAL_RCC_OscConfig>
 800123a:	b108      	cbz	r0, 8001240 <SystemClock_Config+0x54>
 800123c:	b672      	cpsid	i
  while (1)
 800123e:	e7fe      	b.n	800123e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	220f      	movs	r2, #15
 8001246:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800124a:	2104      	movs	r1, #4
 800124c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001252:	f001 fb19 	bl	8002888 <HAL_RCC_ClockConfig>
 8001256:	b108      	cbz	r0, 800125c <SystemClock_Config+0x70>
 8001258:	b672      	cpsid	i
  while (1)
 800125a:	e7fe      	b.n	800125a <SystemClock_Config+0x6e>
}
 800125c:	b017      	add	sp, #92	; 0x5c
 800125e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001264 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <MX_USART2_UART_Init+0x34>)
{
 8001268:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800126a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800126e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001276:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	f002 fb52 	bl	800392e <HAL_UART_Init>
 800128a:	b108      	cbz	r0, 8001290 <MX_USART2_UART_Init+0x2c>
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <MX_USART2_UART_Init+0x2a>
}
 8001290:	bd08      	pop	{r3, pc}
 8001292:	bf00      	nop
 8001294:	20000954 	.word	0x20000954
 8001298:	40004400 	.word	0x40004400

0800129c <main>:
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80012a0:	f000 fa40 	bl	8001724 <HAL_Init>
  SystemClock_Config();
 80012a4:	f7ff ffa2 	bl	80011ec <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	2214      	movs	r2, #20
 80012aa:	2100      	movs	r1, #0
 80012ac:	eb0d 0002 	add.w	r0, sp, r2
 80012b0:	f005 ff72 	bl	8007198 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <main+0x160>)
 80012b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b8:	f042 0204 	orr.w	r2, r2, #4
 80012bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80012be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c0:	f002 0204 	and.w	r2, r2, #4
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012dc:	f042 0201 	orr.w	r2, r2, #1
 80012e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e4:	f002 0201 	and.w	r2, r2, #1
 80012e8:	9203      	str	r2, [sp, #12]
 80012ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012fe:	2120      	movs	r1, #32
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001306:	f000 fc33 	bl	8001b70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800130e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001314:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001318:	4839      	ldr	r0, [pc, #228]	; (8001400 <main+0x164>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800131c:	a905      	add	r1, sp, #20
 800131e:	f000 fb49 	bl	80019b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2501      	movs	r5, #1
 8001324:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001334:	f000 fb3e 	bl	80019b4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001338:	4832      	ldr	r0, [pc, #200]	; (8001404 <main+0x168>)
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <main+0x16c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800133c:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800133e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 8001342:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001344:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001346:	f000 fa8f 	bl	8001868 <HAL_CRC_Init>
 800134a:	b108      	cbz	r0, 8001350 <main+0xb4>
 800134c:	b672      	cpsid	i
  while (1)
 800134e:	e7fe      	b.n	800134e <main+0xb2>
  hi2c1.Instance = I2C1;
 8001350:	4c2e      	ldr	r4, [pc, #184]	; (800140c <main+0x170>)
  hi2c1.Init.Timing = 0x10909CEC;
 8001352:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <main+0x174>)
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <main+0x178>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800135c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001364:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10909CEC;
 8001366:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136a:	f000 fd73 	bl	8001e54 <HAL_I2C_Init>
 800136e:	4601      	mov	r1, r0
 8001370:	b108      	cbz	r0, 8001376 <main+0xda>
 8001372:	b672      	cpsid	i
  while (1)
 8001374:	e7fe      	b.n	8001374 <main+0xd8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001376:	4620      	mov	r0, r4
 8001378:	f000 feec 	bl	8002154 <HAL_I2CEx_ConfigAnalogFilter>
 800137c:	4601      	mov	r1, r0
 800137e:	b108      	cbz	r0, 8001384 <main+0xe8>
 8001380:	b672      	cpsid	i
  while (1)
 8001382:	e7fe      	b.n	8001382 <main+0xe6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001384:	4620      	mov	r0, r4
 8001386:	f000 ff0b 	bl	80021a0 <HAL_I2CEx_ConfigDigitalFilter>
 800138a:	b108      	cbz	r0, 8001390 <main+0xf4>
 800138c:	b672      	cpsid	i
  while (1)
 800138e:	e7fe      	b.n	800138e <main+0xf2>
  MX_USART2_UART_Init();
 8001390:	f7ff ff68 	bl	8001264 <MX_USART2_UART_Init>
  rps_init();
 8001394:	f7ff fdd6 	bl	8000f44 <rps_init>
  adaptor_init(&hi2c1);
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fe09 	bl	8000fb0 <adaptor_init>
  set_moving_average(true);
 800139e:	4628      	mov	r0, r5
 80013a0:	f7ff fe22 	bl	8000fe8 <set_moving_average>
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &cmd, 1);
 80013a4:	491c      	ldr	r1, [pc, #112]	; (8001418 <main+0x17c>)
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <main+0x180>)
    if (output_pixels) {
 80013a8:	4f1d      	ldr	r7, [pc, #116]	; (8001420 <main+0x184>)
      read_registors(AMG8833_T01L_ADDR, buffer,
 80013aa:	4c1e      	ldr	r4, [pc, #120]	; (8001424 <main+0x188>)
      HAL_UART_Transmit(&huart2, buffer, AMG8833_PIXEL_DATA_LENGTH, 3000);
 80013ac:	4e1b      	ldr	r6, [pc, #108]	; (800141c <main+0x180>)
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &cmd, 1);
 80013ae:	462a      	mov	r2, r5
 80013b0:	f002 fb4a 	bl	8003a48 <HAL_UART_Receive_IT>
    if (output_pixels) {
 80013b4:	783b      	ldrb	r3, [r7, #0]
 80013b6:	b16b      	cbz	r3, 80013d4 <main+0x138>
      read_registors(AMG8833_T01L_ADDR, buffer,
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	4610      	mov	r0, r2
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff fe43 	bl	8001048 <read_registors>
      HAL_UART_Transmit(&huart2, buffer, AMG8833_PIXEL_DATA_LENGTH, 3000);
 80013c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	4621      	mov	r1, r4
 80013ca:	4630      	mov	r0, r6
 80013cc:	f002 fa22 	bl	8003814 <HAL_UART_Transmit>
      output_pixels = false;
 80013d0:	2300      	movs	r3, #0
 80013d2:	703b      	strb	r3, [r7, #0]
    if (output_thermistor) {
 80013d4:	4d14      	ldr	r5, [pc, #80]	; (8001428 <main+0x18c>)
 80013d6:	782b      	ldrb	r3, [r5, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0eb      	beq.n	80013b4 <main+0x118>
      read_registors(AMG8833_TTHL_ADDR, buffer, 2);
 80013dc:	2202      	movs	r2, #2
 80013de:	4621      	mov	r1, r4
 80013e0:	200e      	movs	r0, #14
 80013e2:	f7ff fe31 	bl	8001048 <read_registors>
      HAL_UART_Transmit(&huart2, buffer, 2, 3000);
 80013e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013ea:	2202      	movs	r2, #2
 80013ec:	4621      	mov	r1, r4
 80013ee:	4630      	mov	r0, r6
 80013f0:	f002 fa10 	bl	8003814 <HAL_UART_Transmit>
      output_thermistor = false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	702b      	strb	r3, [r5, #0]
 80013f8:	e7dc      	b.n	80013b4 <main+0x118>
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800
 8001404:	200008dc 	.word	0x200008dc
 8001408:	40023000 	.word	0x40023000
 800140c:	20000900 	.word	0x20000900
 8001410:	40005400 	.word	0x40005400
 8001414:	10909cec 	.word	0x10909cec
 8001418:	200008d8 	.word	0x200008d8
 800141c:	20000954 	.word	0x20000954
 8001420:	200009d8 	.word	0x200009d8
 8001424:	20000858 	.word	0x20000858
 8001428:	200009d9 	.word	0x200009d9

0800142c <_write>:
int _write(int file, char *ptr, int len) {
 800142c:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 8001432:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <_write+0x14>)
 8001436:	b292      	uxth	r2, r2
 8001438:	f002 f9ec 	bl	8003814 <HAL_UART_Transmit>
}
 800143c:	4620      	mov	r0, r4
 800143e:	bd10      	pop	{r4, pc}
 8001440:	20000954 	.word	0x20000954

08001444 <HAL_UART_RxCpltCallback>:
  switch (cmd) {
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_UART_RxCpltCallback+0x28>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b70      	cmp	r3, #112	; 0x70
 800144a:	d005      	beq.n	8001458 <HAL_UART_RxCpltCallback+0x14>
 800144c:	2b74      	cmp	r3, #116	; 0x74
 800144e:	d00b      	beq.n	8001468 <HAL_UART_RxCpltCallback+0x24>
 8001450:	2b69      	cmp	r3, #105	; 0x69
 8001452:	d104      	bne.n	800145e <HAL_UART_RxCpltCallback+0x1a>
    run_inference = true;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_UART_RxCpltCallback+0x2c>)
 8001456:	e000      	b.n	800145a <HAL_UART_RxCpltCallback+0x16>
    output_pixels = true;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_UART_RxCpltCallback+0x30>)
    run_inference = true;
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *) &cmd, 1);
 800145e:	4903      	ldr	r1, [pc, #12]	; (800146c <HAL_UART_RxCpltCallback+0x28>)
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_RxCpltCallback+0x34>)
 8001462:	2201      	movs	r2, #1
 8001464:	f002 baf0 	b.w	8003a48 <HAL_UART_Receive_IT>
    output_thermistor = true;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_UART_RxCpltCallback+0x38>)
 800146a:	e7f6      	b.n	800145a <HAL_UART_RxCpltCallback+0x16>
 800146c:	200008d8 	.word	0x200008d8
 8001470:	200009da 	.word	0x200009da
 8001474:	200009d8 	.word	0x200009d8
 8001478:	20000954 	.word	0x20000954
 800147c:	200009d9 	.word	0x200009d9

08001480 <Error_Handler>:
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <Error_Handler+0x2>

08001484 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_MspInit+0x2c>)
 8001486:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	661a      	str	r2, [r3, #96]	; 0x60
 800148e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001490:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	f002 0201 	and.w	r2, r2, #1
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800149c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	b002      	add	sp, #8
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80014b4:	6802      	ldr	r2, [r0, #0]
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_CRC_MspInit+0x24>)
 80014b8:	429a      	cmp	r2, r3
{
 80014ba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80014bc:	d10a      	bne.n	80014d4 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014be:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80014c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014c8:	649a      	str	r2, [r3, #72]	; 0x48
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014d4:	b002      	add	sp, #8
 80014d6:	4770      	bx	lr
 80014d8:	40023000 	.word	0x40023000

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b510      	push	{r4, lr}
 80014de:	b0aa      	sub	sp, #168	; 0xa8
 80014e0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	2214      	movs	r2, #20
 80014e4:	2100      	movs	r1, #0
 80014e6:	a803      	add	r0, sp, #12
 80014e8:	f005 fe56 	bl	8007198 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	2288      	movs	r2, #136	; 0x88
 80014ee:	2100      	movs	r1, #0
 80014f0:	a808      	add	r0, sp, #32
 80014f2:	f005 fe51 	bl	8007198 <memset>
  if(hi2c->Instance==I2C1)
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_I2C_MspInit+0x7c>)
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d129      	bne.n	8001552 <HAL_I2C_MspInit+0x76>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014fe:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001502:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f001 fb90 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 8001508:	b108      	cbz	r0, 800150e <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 800150a:	f7ff ffb9 	bl	8001480 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4c13      	ldr	r4, [pc, #76]	; (800155c <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	4813      	ldr	r0, [pc, #76]	; (8001560 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64e3      	str	r3, [r4, #76]	; 0x4c
 800151a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001528:	2312      	movs	r3, #18
 800152a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2100      	movs	r1, #0
 8001530:	2303      	movs	r3, #3
 8001532:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001536:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f000 fa3a 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001540:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001546:	65a3      	str	r3, [r4, #88]	; 0x58
 8001548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800154a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001552:	b02a      	add	sp, #168	; 0xa8
 8001554:	bd10      	pop	{r4, pc}
 8001556:	bf00      	nop
 8001558:	40005400 	.word	0x40005400
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b0ab      	sub	sp, #172	; 0xac
 8001568:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	2214      	movs	r2, #20
 800156c:	2100      	movs	r1, #0
 800156e:	a803      	add	r0, sp, #12
 8001570:	f005 fe12 	bl	8007198 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	2288      	movs	r2, #136	; 0x88
 8001576:	2100      	movs	r1, #0
 8001578:	a808      	add	r0, sp, #32
 800157a:	f005 fe0d 	bl	8007198 <memset>
  if(huart->Instance==USART2)
 800157e:	6822      	ldr	r2, [r4, #0]
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_UART_MspInit+0xa4>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d13d      	bne.n	8001602 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001586:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800158a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	f001 fb4c 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	b108      	cbz	r0, 8001596 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001592:	f7ff ff75 	bl	8001480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_UART_MspInit+0xa8>)
 8001598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800159e:	659a      	str	r2, [r3, #88]	; 0x58
 80015a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015a2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	9302      	str	r3, [sp, #8]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2702      	movs	r7, #2
 80015c0:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c4:	2507      	movs	r5, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80015c6:	a903      	add	r1, sp, #12
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f000 f9ed 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 80015da:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80015e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e2:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f000 f9e1 	bl	80019b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015f2:	2026      	movs	r0, #38	; 0x26
 80015f4:	4622      	mov	r2, r4
 80015f6:	4621      	mov	r1, r4
 80015f8:	f000 f8e2 	bl	80017c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015fc:	2026      	movs	r0, #38	; 0x26
 80015fe:	f000 f911 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001602:	b02b      	add	sp, #172	; 0xac
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40021000 	.word	0x40021000

08001610 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler>

08001612 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler>

08001614 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler>

08001616 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler>

08001618 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler>

0800161a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 b896 	b.w	8001750 <HAL_IncTick>

08001624 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001624:	4801      	ldr	r0, [pc, #4]	; (800162c <USART2_IRQHandler+0x8>)
 8001626:	f001 bd1d 	b.w	8003064 <HAL_UART_IRQHandler>
 800162a:	bf00      	nop
 800162c:	20000954 	.word	0x20000954

08001630 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <_sbrk+0x30>)
 8001632:	6811      	ldr	r1, [r2, #0]
{
 8001634:	b510      	push	{r4, lr}
 8001636:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001638:	b909      	cbnz	r1, 800163e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <_sbrk+0x34>)
 800163c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	6810      	ldr	r0, [r2, #0]
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <_sbrk+0x38>)
 8001642:	4c0a      	ldr	r4, [pc, #40]	; (800166c <_sbrk+0x3c>)
 8001644:	4403      	add	r3, r0
 8001646:	1b09      	subs	r1, r1, r4
 8001648:	428b      	cmp	r3, r1
 800164a:	d906      	bls.n	800165a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800164c:	f005 fe18 	bl	8007280 <__errno>
 8001650:	230c      	movs	r3, #12
 8001652:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001654:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001658:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800165a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800165c:	e7fc      	b.n	8001658 <_sbrk+0x28>
 800165e:	bf00      	nop
 8001660:	200009dc 	.word	0x200009dc
 8001664:	20000bf8 	.word	0x20000bf8
 8001668:	20018000 	.word	0x20018000
 800166c:	00000800 	.word	0x00000800

08001670 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <SystemInit+0x10>)
 8001672:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001676:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001688:	f7ff fff2 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	; (80016c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <LoopForever+0xe>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	; (80016d0 <LoopForever+0x16>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b2:	f005 fdeb 	bl	800728c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016b6:	f7ff fdf1 	bl	800129c <main>

080016ba <LoopForever>:

LoopForever:
    b LoopForever
 80016ba:	e7fe      	b.n	80016ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000720 	.word	0x20000720
  ldr r2, =_sidata
 80016c8:	0800ad9c 	.word	0x0800ad9c
  ldr r2, =_sbss
 80016cc:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 80016d0:	20000bf8 	.word	0x20000bf8

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_InitTick+0x40>)
 80016dc:	781a      	ldrb	r2, [r3, #0]
{
 80016de:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80016e0:	b90a      	cbnz	r2, 80016e6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_InitTick+0x44>)
 80016f0:	6810      	ldr	r0, [r2, #0]
 80016f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80016f6:	f000 f8a3 	bl	8001840 <HAL_SYSTICK_Config>
 80016fa:	4604      	mov	r4, r0
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001700:	2d0f      	cmp	r5, #15
 8001702:	d8ee      	bhi.n	80016e2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	4602      	mov	r2, r0
 8001706:	4629      	mov	r1, r5
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f858 	bl	80017c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_InitTick+0x48>)
 8001712:	4620      	mov	r0, r4
 8001714:	601d      	str	r5, [r3, #0]
  return status;
 8001716:	e7e5      	b.n	80016e4 <HAL_InitTick+0xc>
 8001718:	20000004 	.word	0x20000004
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008

08001724 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_Init+0x28>)
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800172c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	f000 f833 	bl	800179c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff ffce 	bl	80016d8 <HAL_InitTick>
 800173c:	4604      	mov	r4, r0
 800173e:	b918      	cbnz	r0, 8001748 <HAL_Init+0x24>
    HAL_MspInit();
 8001740:	f7ff fea0 	bl	8001484 <HAL_MspInit>
}
 8001744:	4620      	mov	r0, r4
 8001746:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001748:	2401      	movs	r4, #1
 800174a:	e7fb      	b.n	8001744 <HAL_Init+0x20>
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_IncTick+0x10>)
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_IncTick+0x14>)
 8001754:	6811      	ldr	r1, [r2, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	440b      	add	r3, r1
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200009e0 	.word	0x200009e0
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001768:	4b01      	ldr	r3, [pc, #4]	; (8001770 <HAL_GetTick+0x8>)
 800176a:	6818      	ldr	r0, [r3, #0]
}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200009e0 	.word	0x200009e0

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b538      	push	{r3, r4, r5, lr}
 8001776:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff6 	bl	8001768 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800177e:	bf1c      	itt	ne
 8001780:	4b05      	ldrne	r3, [pc, #20]	; (8001798 <HAL_Delay+0x24>)
 8001782:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001784:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001786:	bf18      	it	ne
 8001788:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	f7ff ffed 	bl	8001768 <HAL_GetTick>
 800178e:	1b43      	subs	r3, r0, r5
 8001790:	42a3      	cmp	r3, r4
 8001792:	d3fa      	bcc.n	800178a <HAL_Delay+0x16>
  {
  }
}
 8001794:	bd38      	pop	{r3, r4, r5, pc}
 8001796:	bf00      	nop
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800179e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c2:	b530      	push	{r4, r5, lr}
 80017c4:	68dc      	ldr	r4, [r3, #12]
 80017c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	bf28      	it	cs
 80017d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017dc:	bf8c      	ite	hi
 80017de:	3c03      	subhi	r4, #3
 80017e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e2:	fa05 f303 	lsl.w	r3, r5, r3
 80017e6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ea:	40a5      	lsls	r5, r4
 80017ec:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80017f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	bfac      	ite	ge
 80017fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	4a08      	ldrlt	r2, [pc, #32]	; (8001820 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	bfb8      	it	lt
 8001806:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	b2db      	uxtb	r3, r3
 800180c:	bfaa      	itet	ge
 800180e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001818:	bd30      	pop	{r4, r5, pc}
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	e000ed14 	.word	0xe000ed14

08001824 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001824:	2800      	cmp	r0, #0
 8001826:	db07      	blt.n	8001838 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_NVIC_EnableIRQ+0x18>)
 800182a:	0941      	lsrs	r1, r0, #5
 800182c:	2301      	movs	r3, #1
 800182e:	f000 001f 	and.w	r0, r0, #31
 8001832:	4083      	lsls	r3, r0
 8001834:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	3801      	subs	r0, #1
 8001842:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001846:	d20b      	bcs.n	8001860 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	21f0      	movs	r1, #240	; 0xf0
 8001852:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001856:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001858:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001860:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001868:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800186a:	4604      	mov	r4, r0
 800186c:	b908      	cbnz	r0, 8001872 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001870:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001872:	7f43      	ldrb	r3, [r0, #29]
 8001874:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001878:	b913      	cbnz	r3, 8001880 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800187a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800187c:	f7ff fe1a 	bl	80014b4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001880:	2302      	movs	r3, #2
 8001882:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001884:	7923      	ldrb	r3, [r4, #4]
 8001886:	b9e3      	cbnz	r3, 80018c2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_CRC_Init+0x70>)
 800188c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	f022 0218 	bic.w	r2, r2, #24
 8001894:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001896:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001898:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800189a:	b9d2      	cbnz	r2, 80018d2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80018a0:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	6961      	ldr	r1, [r4, #20]
 80018a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69a1      	ldr	r1, [r4, #24]
 80018b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80018ba:	2301      	movs	r3, #1
 80018bc:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80018be:	2000      	movs	r0, #0
 80018c0:	e7d6      	b.n	8001870 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80018c2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80018c6:	4620      	mov	r0, r4
 80018c8:	f000 f808 	bl	80018dc <HAL_CRCEx_Polynomial_Set>
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d0e2      	beq.n	8001896 <HAL_CRC_Init+0x2e>
 80018d0:	e7cd      	b.n	800186e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80018d2:	6922      	ldr	r2, [r4, #16]
 80018d4:	e7e4      	b.n	80018a0 <HAL_CRC_Init+0x38>
 80018d6:	bf00      	nop
 80018d8:	04c11db7 	.word	0x04c11db7

080018dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018dc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018de:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018e0:	3b01      	subs	r3, #1
 80018e2:	d31c      	bcc.n	800191e <HAL_CRCEx_Polynomial_Set+0x42>
 80018e4:	fa21 f403 	lsr.w	r4, r1, r3
 80018e8:	07e4      	lsls	r4, r4, #31
 80018ea:	d5f9      	bpl.n	80018e0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80018ec:	2a10      	cmp	r2, #16
 80018ee:	d012      	beq.n	8001916 <HAL_CRCEx_Polynomial_Set+0x3a>
 80018f0:	d804      	bhi.n	80018fc <HAL_CRCEx_Polynomial_Set+0x20>
 80018f2:	b13a      	cbz	r2, 8001904 <HAL_CRCEx_Polynomial_Set+0x28>
 80018f4:	2a08      	cmp	r2, #8
 80018f6:	d010      	beq.n	800191a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80018f8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80018fa:	e00b      	b.n	8001914 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80018fc:	2a18      	cmp	r2, #24
 80018fe:	d1fb      	bne.n	80018f8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001900:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001902:	d8f9      	bhi.n	80018f8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001904:	6800      	ldr	r0, [r0, #0]
 8001906:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001908:	6883      	ldr	r3, [r0, #8]
 800190a:	f023 0318 	bic.w	r3, r3, #24
 800190e:	4313      	orrs	r3, r2
 8001910:	6083      	str	r3, [r0, #8]
 8001912:	2000      	movs	r0, #0
}
 8001914:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001916:	2b07      	cmp	r3, #7
 8001918:	e7f3      	b.n	8001902 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800191a:	2b0f      	cmp	r3, #15
 800191c:	e7f1      	b.n	8001902 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800191e:	2a00      	cmp	r2, #0
 8001920:	d1ea      	bne.n	80018f8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001922:	e7ef      	b.n	8001904 <HAL_CRCEx_Polynomial_Set+0x28>

08001924 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001924:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001928:	2a02      	cmp	r2, #2
{
 800192a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192c:	d006      	beq.n	800193c <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192e:	2204      	movs	r2, #4
 8001930:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 800193a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193c:	6802      	ldr	r2, [r0, #0]
 800193e:	6811      	ldr	r1, [r2, #0]
 8001940:	f021 010e 	bic.w	r1, r1, #14
 8001944:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001946:	6811      	ldr	r1, [r2, #0]
 8001948:	f021 0101 	bic.w	r1, r1, #1
 800194c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800194e:	e9d0 0210 	ldrd	r0, r2, [r0, #64]	; 0x40
 8001952:	2101      	movs	r1, #1
 8001954:	f002 021c 	and.w	r2, r2, #28
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	6042      	str	r2, [r0, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    return status;
 8001962:	2000      	movs	r0, #0
 8001964:	e7e6      	b.n	8001934 <HAL_DMA_Abort+0x10>

08001966 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001966:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001968:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800196c:	2a02      	cmp	r2, #2
 800196e:	d003      	beq.n	8001978 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001970:	2204      	movs	r2, #4
 8001972:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001974:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001976:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001978:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 800197a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197c:	6811      	ldr	r1, [r2, #0]
 800197e:	f021 010e 	bic.w	r1, r1, #14
 8001982:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001984:	6811      	ldr	r1, [r2, #0]
 8001986:	f021 0101 	bic.w	r1, r1, #1
 800198a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800198c:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8001990:	2101      	movs	r1, #1
 8001992:	f002 021c 	and.w	r2, r2, #28
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800199c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800199e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80019a2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80019a6:	b113      	cbz	r3, 80019ae <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80019a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019aa:	4620      	mov	r0, r4
 80019ac:	e7e3      	b.n	8001976 <HAL_DMA_Abort_IT+0x10>
 80019ae:	4618      	mov	r0, r3
 80019b0:	e7e1      	b.n	8001976 <HAL_DMA_Abort_IT+0x10>
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001b6c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019bc:	4c69      	ldr	r4, [pc, #420]	; (8001b64 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	680a      	ldr	r2, [r1, #0]
 80019c2:	fa32 f503 	lsrs.w	r5, r2, r3
 80019c6:	d102      	bne.n	80019ce <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80019c8:	b003      	add	sp, #12
 80019ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019ce:	f04f 0e01 	mov.w	lr, #1
 80019d2:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80019d6:	ea1e 0202 	ands.w	r2, lr, r2
 80019da:	f000 8090 	beq.w	8001afe <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019de:	684d      	ldr	r5, [r1, #4]
 80019e0:	f005 0603 	and.w	r6, r5, #3
 80019e4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019e8:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ec:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f8:	f200 8083 	bhi.w	8001b02 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 80019fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019fe:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a02:	68cf      	ldr	r7, [r1, #12]
 8001a04:	fa07 f708 	lsl.w	r7, r7, r8
 8001a08:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001a0c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a0e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a10:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001a18:	409f      	lsls	r7, r3
 8001a1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001a1e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a20:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a22:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a26:	688f      	ldr	r7, [r1, #8]
 8001a28:	fa07 f708 	lsl.w	r7, r7, r8
 8001a2c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001a32:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a34:	d071      	beq.n	8001b1a <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001a36:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a38:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a3c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a40:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a42:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001a46:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a48:	d059      	beq.n	8001afe <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001a4e:	f046 0601 	orr.w	r6, r6, #1
 8001a52:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001a56:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001a5a:	f023 0703 	bic.w	r7, r3, #3
 8001a5e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001a62:	f006 0601 	and.w	r6, r6, #1
 8001a66:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001a6a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a72:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a74:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a78:	f04f 0c0f 	mov.w	ip, #15
 8001a7c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a80:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a84:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a88:	d05f      	beq.n	8001b4a <HAL_GPIO_Init+0x196>
 8001a8a:	4e37      	ldr	r6, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x1b4>)
 8001a8c:	42b0      	cmp	r0, r6
 8001a8e:	d05e      	beq.n	8001b4e <HAL_GPIO_Init+0x19a>
 8001a90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a94:	42b0      	cmp	r0, r6
 8001a96:	d05c      	beq.n	8001b52 <HAL_GPIO_Init+0x19e>
 8001a98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a9c:	42b0      	cmp	r0, r6
 8001a9e:	d05a      	beq.n	8001b56 <HAL_GPIO_Init+0x1a2>
 8001aa0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001aa4:	42b0      	cmp	r0, r6
 8001aa6:	d058      	beq.n	8001b5a <HAL_GPIO_Init+0x1a6>
 8001aa8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001aac:	42b0      	cmp	r0, r6
 8001aae:	d056      	beq.n	8001b5e <HAL_GPIO_Init+0x1aa>
 8001ab0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ab4:	42b0      	cmp	r0, r6
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2606      	moveq	r6, #6
 8001aba:	2607      	movne	r6, #7
 8001abc:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ac0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac4:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001ac6:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001ac8:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aca:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001ace:	bf0c      	ite	eq
 8001ad0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ad2:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001ad4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001ad6:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001adc:	bf0c      	ite	eq
 8001ade:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ae0:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001ae2:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001ae4:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001aea:	bf0c      	ite	eq
 8001aec:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001aee:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001af0:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001af2:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af4:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001af6:	bf54      	ite	pl
 8001af8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001afa:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001afc:	6026      	str	r6, [r4, #0]
    position++;
 8001afe:	3301      	adds	r3, #1
 8001b00:	e75e      	b.n	80019c0 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b02:	2e03      	cmp	r6, #3
 8001b04:	d18c      	bne.n	8001a20 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001b06:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b08:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b0c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001b10:	409f      	lsls	r7, r3
 8001b12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001b16:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	e78d      	b.n	8001a36 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001b1a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001b1e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b22:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001b26:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001b2e:	f04f 0e0f 	mov.w	lr, #15
 8001b32:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001b36:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3a:	690f      	ldr	r7, [r1, #16]
 8001b3c:	fa07 f70b 	lsl.w	r7, r7, fp
 8001b40:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001b44:	f8ca 7020 	str.w	r7, [sl, #32]
 8001b48:	e775      	b.n	8001a36 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b4a:	2600      	movs	r6, #0
 8001b4c:	e7b6      	b.n	8001abc <HAL_GPIO_Init+0x108>
 8001b4e:	2601      	movs	r6, #1
 8001b50:	e7b4      	b.n	8001abc <HAL_GPIO_Init+0x108>
 8001b52:	2602      	movs	r6, #2
 8001b54:	e7b2      	b.n	8001abc <HAL_GPIO_Init+0x108>
 8001b56:	2603      	movs	r6, #3
 8001b58:	e7b0      	b.n	8001abc <HAL_GPIO_Init+0x108>
 8001b5a:	2604      	movs	r6, #4
 8001b5c:	e7ae      	b.n	8001abc <HAL_GPIO_Init+0x108>
 8001b5e:	2605      	movs	r6, #5
 8001b60:	e7ac      	b.n	8001abc <HAL_GPIO_Init+0x108>
 8001b62:	bf00      	nop
 8001b64:	40010400 	.word	0x40010400
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b70:	b10a      	cbz	r2, 8001b76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b72:	6181      	str	r1, [r0, #24]
 8001b74:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b76:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001b78:	4770      	bx	lr

08001b7a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b80:	bf44      	itt	mi
 8001b82:	2200      	movmi	r2, #0
 8001b84:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b8a:	bf5e      	ittt	pl
 8001b8c:	699a      	ldrpl	r2, [r3, #24]
 8001b8e:	f042 0201 	orrpl.w	r2, r2, #1
 8001b92:	619a      	strpl	r2, [r3, #24]
  }
}
 8001b94:	4770      	bx	lr
	...

08001b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b98:	b530      	push	{r4, r5, lr}
 8001b9a:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b9c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b9e:	432b      	orrs	r3, r5
 8001ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <I2C_TransferConfig+0x28>)
 8001ba6:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ba8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001bac:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bae:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bb6:	ea20 0002 	bic.w	r0, r0, r2
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bbe:	bd30      	pop	{r4, r5, pc}
 8001bc0:	03ff63ff 	.word	0x03ff63ff

08001bc4 <I2C_IsErrorOccurred>:
{
 8001bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bc8:	6803      	ldr	r3, [r0, #0]
 8001bca:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bcc:	f014 0410 	ands.w	r4, r4, #16
{
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	4688      	mov	r8, r1
 8001bd4:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bd6:	d078      	beq.n	8001cca <I2C_IsErrorOccurred+0x106>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd8:	2210      	movs	r2, #16
 8001bda:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	0690      	lsls	r0, r2, #26
 8001be8:	d436      	bmi.n	8001c58 <I2C_IsErrorOccurred+0x94>
 8001bea:	b10e      	cbz	r6, 8001bf0 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8001bec:	2404      	movs	r4, #4
 8001bee:	e039      	b.n	8001c64 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8001bf0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001bf4:	d0f6      	beq.n	8001be4 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff fdb7 	bl	8001768 <HAL_GetTick>
 8001bfa:	1bc0      	subs	r0, r0, r7
 8001bfc:	4540      	cmp	r0, r8
 8001bfe:	d802      	bhi.n	8001c06 <I2C_IsErrorOccurred+0x42>
 8001c00:	f1b8 0f00 	cmp.w	r8, #0
 8001c04:	d1ed      	bne.n	8001be2 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8001c0a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c0e:	6998      	ldr	r0, [r3, #24]
 8001c10:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8001c12:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c14:	d50a      	bpl.n	8001c2c <I2C_IsErrorOccurred+0x68>
 8001c16:	044c      	lsls	r4, r1, #17
 8001c18:	d408      	bmi.n	8001c2c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8001c1a:	2a20      	cmp	r2, #32
 8001c1c:	d006      	beq.n	8001c2c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c24:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001c26:	f7ff fd9f 	bl	8001768 <HAL_GetTick>
 8001c2a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	699c      	ldr	r4, [r3, #24]
 8001c30:	f014 0420 	ands.w	r4, r4, #32
 8001c34:	d1d5      	bne.n	8001be2 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c36:	f7ff fd97 	bl	8001768 <HAL_GetTick>
 8001c3a:	1bc0      	subs	r0, r0, r7
 8001c3c:	2819      	cmp	r0, #25
 8001c3e:	d9f5      	bls.n	8001c2c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c40:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001c42:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c46:	f043 0320 	orr.w	r3, r3, #32
 8001c4a:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8001c4c:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8001c56:	e7e9      	b.n	8001c2c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d1c7      	bne.n	8001bec <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001c60:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8001c62:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001c64:	682f      	ldr	r7, [r5, #0]
 8001c66:	69bb      	ldr	r3, [r7, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c68:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c6a:	bf41      	itttt	mi
 8001c6c:	f44f 7280 	movmi.w	r2, #256	; 0x100
 8001c70:	61fa      	strmi	r2, [r7, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001c72:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8001c76:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c78:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c7a:	bf41      	itttt	mi
 8001c7c:	f44f 6280 	movmi.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8001c80:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c84:	61fa      	strmi	r2, [r7, #28]
    status = HAL_ERROR;
 8001c86:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c88:	059b      	lsls	r3, r3, #22
 8001c8a:	d520      	bpl.n	8001cce <I2C_IsErrorOccurred+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c90:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c94:	61fb      	str	r3, [r7, #28]
    I2C_Flush_TXDR(hi2c);
 8001c96:	4628      	mov	r0, r5
 8001c98:	f7ff ff6f 	bl	8001b7a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ca2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001ca6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
    hi2c->ErrorCode |= error_code;
 8001cb0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cb2:	4323      	orrs	r3, r4
 8001cb4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001cc2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8001cc6:	2601      	movs	r6, #1
 8001cc8:	e003      	b.n	8001cd2 <I2C_IsErrorOccurred+0x10e>
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	4626      	mov	r6, r4
 8001ccc:	e7ca      	b.n	8001c64 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8001cce:	2e00      	cmp	r6, #0
 8001cd0:	d1e1      	bne.n	8001c96 <I2C_IsErrorOccurred+0xd2>
}
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001cd8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	079b      	lsls	r3, r3, #30
 8001ce6:	d501      	bpl.n	8001cec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ce8:	2000      	movs	r0, #0
}
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cec:	4632      	mov	r2, r6
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff67 	bl	8001bc4 <I2C_IsErrorOccurred>
 8001cf6:	b9a0      	cbnz	r0, 8001d22 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001cf8:	1c6a      	adds	r2, r5, #1
 8001cfa:	d0f1      	beq.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfc:	f7ff fd34 	bl	8001768 <HAL_GetTick>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	42a8      	cmp	r0, r5
 8001d04:	d801      	bhi.n	8001d0a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d1ea      	bne.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	2320      	movs	r3, #32
 8001d14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001d1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d22:	2001      	movs	r0, #1
 8001d24:	e7e1      	b.n	8001cea <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08001d26 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001d26:	b570      	push	{r4, r5, r6, lr}
 8001d28:	4604      	mov	r4, r0
 8001d2a:	460d      	mov	r5, r1
 8001d2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	075b      	lsls	r3, r3, #29
 8001d34:	d40e      	bmi.n	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	4632      	mov	r2, r6
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff ff42 	bl	8001bc4 <I2C_IsErrorOccurred>
 8001d40:	bb38      	cbnz	r0, 8001d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	0691      	lsls	r1, r2, #26
 8001d48:	d525      	bpl.n	8001d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	0752      	lsls	r2, r2, #29
 8001d4e:	d503      	bpl.n	8001d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001d50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d52:	b10a      	cbz	r2, 8001d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8001d54:	2000      	movs	r0, #0
}
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5e:	bf1c      	itt	ne
 8001d60:	2210      	movne	r2, #16
 8001d62:	61da      	strne	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d64:	f04f 0120 	mov.w	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d68:	bf18      	it	ne
 8001d6a:	2204      	movne	r2, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d76:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d7a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	e7df      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff fce7 	bl	8001768 <HAL_GetTick>
 8001d9a:	1b80      	subs	r0, r0, r6
 8001d9c:	42a8      	cmp	r0, r5
 8001d9e:	d801      	bhi.n	8001da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	d1c4      	bne.n	8001d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	2320      	movs	r3, #32
 8001dae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	e7eb      	b.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x68>

08001db6 <I2C_WaitOnFlagUntilTimeout>:
{
 8001db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dba:	9f06      	ldr	r7, [sp, #24]
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	4688      	mov	r8, r1
 8001dc0:	4616      	mov	r6, r2
 8001dc2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	6993      	ldr	r3, [r2, #24]
 8001dc8:	ea38 0303 	bics.w	r3, r8, r3
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	42b3      	cmp	r3, r6
 8001dd4:	d001      	beq.n	8001dda <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	e015      	b.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001dda:	1c6b      	adds	r3, r5, #1
 8001ddc:	d0f3      	beq.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dde:	f7ff fcc3 	bl	8001768 <HAL_GetTick>
 8001de2:	1bc0      	subs	r0, r0, r7
 8001de4:	42a8      	cmp	r0, r5
 8001de6:	d801      	bhi.n	8001dec <I2C_WaitOnFlagUntilTimeout+0x36>
 8001de8:	2d00      	cmp	r5, #0
 8001dea:	d1eb      	bne.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	2320      	movs	r3, #32
 8001df6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001e00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001e04:	2001      	movs	r0, #1
}
 8001e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e0a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001e0a:	b570      	push	{r4, r5, r6, lr}
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
 8001e10:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	069b      	lsls	r3, r3, #26
 8001e18:	d501      	bpl.n	8001e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001e1a:	2000      	movs	r0, #0
}
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1e:	4632      	mov	r2, r6
 8001e20:	4629      	mov	r1, r5
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7ff fece 	bl	8001bc4 <I2C_IsErrorOccurred>
 8001e28:	b990      	cbnz	r0, 8001e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2a:	f7ff fc9d 	bl	8001768 <HAL_GetTick>
 8001e2e:	1b80      	subs	r0, r0, r6
 8001e30:	42a8      	cmp	r0, r5
 8001e32:	d801      	bhi.n	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001e34:	2d00      	cmp	r5, #0
 8001e36:	d1ec      	bne.n	8001e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	2320      	movs	r3, #32
 8001e42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001e4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001e50:	2001      	movs	r0, #1
 8001e52:	e7e3      	b.n	8001e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001e54 <HAL_I2C_Init>:
{
 8001e54:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001e56:	4604      	mov	r4, r0
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d04a      	beq.n	8001ef2 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e64:	b91b      	cbnz	r3, 8001e6e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e6a:	f7ff fb37 	bl	80014dc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6e:	2324      	movs	r3, #36	; 0x24
 8001e70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e7e:	6862      	ldr	r2, [r4, #4]
 8001e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e84:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e8c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e92:	2901      	cmp	r1, #1
 8001e94:	d124      	bne.n	8001ee0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001eb4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eb6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ebc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ebe:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ece:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001ede:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ee0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ee4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ee6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ee8:	bf04      	itt	eq
 8001eea:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001eee:	605a      	streq	r2, [r3, #4]
 8001ef0:	e7d4      	b.n	8001e9c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	e7f3      	b.n	8001ede <HAL_I2C_Init+0x8a>
	...

08001ef8 <HAL_I2C_Master_Transmit>:
{
 8001ef8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001efc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001f02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f04:	2b20      	cmp	r3, #32
{
 8001f06:	4604      	mov	r4, r0
 8001f08:	460e      	mov	r6, r1
 8001f0a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0c:	f040 8086 	bne.w	800201c <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8001f10:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f000 8081 	beq.w	800201c <HAL_I2C_Master_Transmit+0x124>
 8001f1a:	f04f 0a01 	mov.w	sl, #1
 8001f1e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001f22:	f7ff fc21 	bl	8001768 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f26:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001f28:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f2a:	9000      	str	r0, [sp, #0]
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff ff3f 	bl	8001db6 <I2C_WaitOnFlagUntilTimeout>
 8001f38:	b118      	cbz	r0, 8001f42 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
}
 8001f3c:	b002      	add	sp, #8
 8001f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f42:	2321      	movs	r3, #33	; 0x21
 8001f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001f50:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001f56:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001f5e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_I2C_Master_Transmit+0x128>)
 8001f62:	d926      	bls.n	8001fb2 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f68:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f6e:	4631      	mov	r1, r6
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff fe11 	bl	8001b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f78:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	4639      	mov	r1, r7
 8001f7e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001f80:	b9fb      	cbnz	r3, 8001fc2 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f82:	f7ff ff42 	bl	8001e0a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d1d7      	bne.n	8001f3a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001f96:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001f9a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fa8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001fb0:	e7c4      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8001fb2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fb4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	e7d5      	b.n	8001f6e <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc2:	f7ff fe89 	bl	8001cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d1b7      	bne.n	8001f3a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fcc:	6822      	ldr	r2, [r4, #0]
 8001fce:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001fd2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001fd4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe2:	3a01      	subs	r2, #1
 8001fe4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001fe8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0c3      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x7e>
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	d1c1      	bne.n	8001f76 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff2:	9500      	str	r5, [sp, #0]
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff fedc 	bl	8001db6 <I2C_WaitOnFlagUntilTimeout>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d19b      	bne.n	8001f3a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d903      	bls.n	8002012 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800200e:	9000      	str	r0, [sp, #0]
 8002010:	e7ab      	b.n	8001f6a <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8002012:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002014:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002016:	b292      	uxth	r2, r2
 8002018:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201a:	e7ce      	b.n	8001fba <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 800201c:	2002      	movs	r0, #2
 800201e:	e78d      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x44>
 8002020:	80002000 	.word	0x80002000

08002024 <HAL_I2C_Master_Receive>:
{
 8002024:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002028:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800202a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800202e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002030:	2b20      	cmp	r3, #32
{
 8002032:	4604      	mov	r4, r0
 8002034:	460e      	mov	r6, r1
 8002036:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002038:	f040 8087 	bne.w	800214a <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 800203c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	f000 8082 	beq.w	800214a <HAL_I2C_Master_Receive+0x126>
 8002046:	f04f 0a01 	mov.w	sl, #1
 800204a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800204e:	f7ff fb8b 	bl	8001768 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002052:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002054:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002056:	9000      	str	r0, [sp, #0]
 8002058:	4652      	mov	r2, sl
 800205a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff fea9 	bl	8001db6 <I2C_WaitOnFlagUntilTimeout>
 8002064:	b118      	cbz	r0, 800206e <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8002066:	2001      	movs	r0, #1
}
 8002068:	b002      	add	sp, #8
 800206a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800206e:	2322      	movs	r3, #34	; 0x22
 8002070:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002074:	2310      	movs	r3, #16
 8002076:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800207c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002080:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002082:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002086:	b29b      	uxth	r3, r3
 8002088:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800208a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_I2C_Master_Receive+0x12c>)
 800208e:	d926      	bls.n	80020de <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002090:	22ff      	movs	r2, #255	; 0xff
 8002092:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002094:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800209a:	4631      	mov	r1, r6
 800209c:	4620      	mov	r0, r4
 800209e:	f7ff fd7b 	bl	8001b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	462a      	mov	r2, r5
 80020a8:	4639      	mov	r1, r7
 80020aa:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80020ac:	b9fb      	cbnz	r3, 80020ee <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ae:	f7ff feac 	bl	8001e0a <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d1d7      	bne.n	8002066 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	2120      	movs	r1, #32
 80020ba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80020c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80020c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80020dc:	e7c4      	b.n	8002068 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80020de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80020e2:	b292      	uxth	r2, r2
 80020e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	e7d5      	b.n	800209a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ee:	f7ff fe1a 	bl	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d1b7      	bne.n	8002066 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020fc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002100:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002102:	3301      	adds	r3, #1
 8002104:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002106:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002108:	3b01      	subs	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800210e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002110:	3a01      	subs	r2, #1
 8002112:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002114:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002116:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0c2      	beq.n	80020a2 <HAL_I2C_Master_Receive+0x7e>
 800211c:	2a00      	cmp	r2, #0
 800211e:	d1c0      	bne.n	80020a2 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002120:	9500      	str	r5, [sp, #0]
 8002122:	463b      	mov	r3, r7
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff fe45 	bl	8001db6 <I2C_WaitOnFlagUntilTimeout>
 800212c:	2800      	cmp	r0, #0
 800212e:	d19a      	bne.n	8002066 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d903      	bls.n	8002140 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002138:	22ff      	movs	r2, #255	; 0xff
 800213a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213c:	9000      	str	r0, [sp, #0]
 800213e:	e7aa      	b.n	8002096 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8002140:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002142:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002144:	b292      	uxth	r2, r2
 8002146:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002148:	e7cd      	b.n	80020e6 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 800214a:	2002      	movs	r0, #2
 800214c:	e78c      	b.n	8002068 <HAL_I2C_Master_Receive+0x44>
 800214e:	bf00      	nop
 8002150:	80002400 	.word	0x80002400

08002154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002154:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002156:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800215a:	2b20      	cmp	r3, #32
 800215c:	b2dc      	uxtb	r4, r3
 800215e:	d11d      	bne.n	800219c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002164:	2b01      	cmp	r3, #1
 8002166:	d019      	beq.n	800219c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	2324      	movs	r3, #36	; 0x24
 800216a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800216e:	6803      	ldr	r3, [r0, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4311      	orrs	r1, r2
 8002184:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002194:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002198:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800219a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800219c:	2002      	movs	r0, #2
 800219e:	e7fc      	b.n	800219a <HAL_I2CEx_ConfigAnalogFilter+0x46>

080021a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021a0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	b2dc      	uxtb	r4, r3
 80021aa:	d11c      	bne.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d018      	beq.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	2324      	movs	r3, #36	; 0x24
 80021b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ba:	6803      	ldr	r3, [r0, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021c6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ca:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ce:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80021da:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80021e2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80021e4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80021e6:	2002      	movs	r0, #2
 80021e8:	e7fc      	b.n	80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080021ec <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021ec:	4b02      	ldr	r3, [pc, #8]	; (80021f8 <HAL_PWREx_GetVoltageRange+0xc>)
 80021ee:	6818      	ldr	r0, [r3, #0]
#endif
}
 80021f0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021fe:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002200:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002208:	d11d      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800220a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220e:	d101      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002210:	2000      	movs	r0, #0
 8002212:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2132      	movs	r1, #50	; 0x32
 8002226:	434b      	muls	r3, r1
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002230:	6951      	ldr	r1, [r2, #20]
 8002232:	0549      	lsls	r1, r1, #21
 8002234:	d500      	bpl.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8002236:	b923      	cbnz	r3, 8002242 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002238:	6953      	ldr	r3, [r2, #20]
 800223a:	055b      	lsls	r3, r3, #21
 800223c:	d5e8      	bpl.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
}
 8002240:	4770      	bx	lr
        wait_loop_index--;
 8002242:	3b01      	subs	r3, #1
 8002244:	e7f4      	b.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800224a:	bf1f      	itttt	ne
 800224c:	6813      	ldrne	r3, [r2, #0]
 800224e:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8002252:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8002256:	6013      	strne	r3, [r2, #0]
 8002258:	e7da      	b.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x14>
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000
 8002260:	20000000 	.word	0x20000000
 8002264:	000f4240 	.word	0x000f4240

08002268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002268:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800226a:	4d1e      	ldr	r5, [pc, #120]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800226c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800226e:	00da      	lsls	r2, r3, #3
{
 8002270:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002272:	d518      	bpl.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff ffba 	bl	80021ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002278:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800227c:	d123      	bne.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800227e:	2c80      	cmp	r4, #128	; 0x80
 8002280:	d929      	bls.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002282:	2ca0      	cmp	r4, #160	; 0xa0
 8002284:	bf8c      	ite	hi
 8002286:	2402      	movhi	r4, #2
 8002288:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800228a:	4917      	ldr	r1, [pc, #92]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800228c:	680a      	ldr	r2, [r1, #0]
 800228e:	f022 0207 	bic.w	r2, r2, #7
 8002292:	4322      	orrs	r2, r4
 8002294:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002296:	6808      	ldr	r0, [r1, #0]
 8002298:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800229c:	1b00      	subs	r0, r0, r4
 800229e:	bf18      	it	ne
 80022a0:	2001      	movne	r0, #1
 80022a2:	b003      	add	sp, #12
 80022a4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	65ab      	str	r3, [r5, #88]	; 0x58
 80022ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80022b8:	f7ff ff98 	bl	80021ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80022bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	65ab      	str	r3, [r5, #88]	; 0x58
 80022c4:	e7d8      	b.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80022c6:	2c80      	cmp	r4, #128	; 0x80
 80022c8:	d807      	bhi.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80022ca:	d008      	beq.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80022cc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80022d0:	425c      	negs	r4, r3
 80022d2:	415c      	adcs	r4, r3
 80022d4:	e7d9      	b.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022d6:	2400      	movs	r4, #0
 80022d8:	e7d7      	b.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80022da:	2403      	movs	r4, #3
 80022dc:	e7d5      	b.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80022de:	2402      	movs	r4, #2
 80022e0:	e7d3      	b.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_GetSysClockFreq+0x8c>)
 80022ee:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022f2:	f012 020c 	ands.w	r2, r2, #12
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x18>
 80022f8:	2a0c      	cmp	r2, #12
 80022fa:	d115      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022fc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002300:	2901      	cmp	r1, #1
 8002302:	d118      	bne.n	8002336 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002304:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002306:	481d      	ldr	r0, [pc, #116]	; (800237c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002308:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800230a:	bf55      	itete	pl
 800230c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002310:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002312:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002316:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800231a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231e:	b34a      	cbz	r2, 8002374 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002320:	2a0c      	cmp	r2, #12
 8002322:	d009      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x4c>
 8002324:	2000      	movs	r0, #0
  return sysclockfreq;
 8002326:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002328:	2a04      	cmp	r2, #4
 800232a:	d022      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800232c:	2a08      	cmp	r2, #8
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	bf18      	it	ne
 8002332:	2000      	movne	r0, #0
 8002334:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002336:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800233e:	2a02      	cmp	r2, #2
 8002340:	d015      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x82>
 8002342:	490f      	ldr	r1, [pc, #60]	; (8002380 <HAL_RCC_GetSysClockFreq+0x94>)
 8002344:	2a03      	cmp	r2, #3
 8002346:	bf08      	it	eq
 8002348:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800234a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002352:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002354:	68d8      	ldr	r0, [r3, #12]
 8002356:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002360:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002362:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002364:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002368:	fbb2 f0f0 	udiv	r0, r2, r0
 800236c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 8002370:	e7eb      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002372:	4804      	ldr	r0, [pc, #16]	; (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	0800917c 	.word	0x0800917c
 8002380:	007a1200 	.word	0x007a1200
 8002384:	00f42400 	.word	0x00f42400

08002388 <HAL_RCC_OscConfig>:
{
 8002388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800238c:	4605      	mov	r5, r0
 800238e:	b918      	cbnz	r0, 8002398 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
}
 8002392:	b003      	add	sp, #12
 8002394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002398:	4c92      	ldr	r4, [pc, #584]	; (80025e4 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800239a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023aa:	d53d      	bpl.n	8002428 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ac:	b11e      	cbz	r6, 80023b6 <HAL_RCC_OscConfig+0x2e>
 80023ae:	2e0c      	cmp	r6, #12
 80023b0:	d166      	bne.n	8002480 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023b2:	2f01      	cmp	r7, #1
 80023b4:	d164      	bne.n	8002480 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	0798      	lsls	r0, r3, #30
 80023ba:	d502      	bpl.n	80023c2 <HAL_RCC_OscConfig+0x3a>
 80023bc:	69ab      	ldr	r3, [r5, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0e6      	beq.n	8002390 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	6a28      	ldr	r0, [r5, #32]
 80023c6:	0719      	lsls	r1, r3, #28
 80023c8:	bf56      	itet	pl
 80023ca:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80023ce:	6823      	ldrmi	r3, [r4, #0]
 80023d0:	091b      	lsrpl	r3, r3, #4
 80023d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d6:	4298      	cmp	r0, r3
 80023d8:	d93b      	bls.n	8002452 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023da:	f7ff ff45 	bl	8002268 <RCC_SetFlashLatencyFromMSIRange>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d1d6      	bne.n	8002390 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	6a2a      	ldr	r2, [r5, #32]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	4313      	orrs	r3, r2
 80023f4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f6:	6863      	ldr	r3, [r4, #4]
 80023f8:	69ea      	ldr	r2, [r5, #28]
 80023fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002402:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002404:	f7ff ff72 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8002408:	68a3      	ldr	r3, [r4, #8]
 800240a:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x260>)
 800240c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	40d8      	lsrs	r0, r3
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <HAL_RCC_OscConfig+0x264>)
 800241a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800241c:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <HAL_RCC_OscConfig+0x268>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	f7ff f95a 	bl	80016d8 <HAL_InitTick>
        if(status != HAL_OK)
 8002424:	2800      	cmp	r0, #0
 8002426:	d1b4      	bne.n	8002392 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002428:	682b      	ldr	r3, [r5, #0]
 800242a:	07d8      	lsls	r0, r3, #31
 800242c:	d45f      	bmi.n	80024ee <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	682b      	ldr	r3, [r5, #0]
 8002430:	0799      	lsls	r1, r3, #30
 8002432:	f100 809e 	bmi.w	8002572 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	0718      	lsls	r0, r3, #28
 800243a:	f100 80db 	bmi.w	80025f4 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	0759      	lsls	r1, r3, #29
 8002442:	f100 8101 	bmi.w	8002648 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002446:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 816a 	bne.w	8002722 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800244e:	2000      	movs	r0, #0
 8002450:	e79f      	b.n	8002392 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002460:	4303      	orrs	r3, r0
 8002462:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002464:	6863      	ldr	r3, [r4, #4]
 8002466:	69ea      	ldr	r2, [r5, #28]
 8002468:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002470:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002472:	2e00      	cmp	r6, #0
 8002474:	d1c6      	bne.n	8002404 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002476:	f7ff fef7 	bl	8002268 <RCC_SetFlashLatencyFromMSIRange>
 800247a:	2800      	cmp	r0, #0
 800247c:	d0c2      	beq.n	8002404 <HAL_RCC_OscConfig+0x7c>
 800247e:	e787      	b.n	8002390 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002480:	69ab      	ldr	r3, [r5, #24]
 8002482:	b31b      	cbz	r3, 80024cc <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800248c:	f7ff f96c 	bl	8001768 <HAL_GetTick>
 8002490:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	079a      	lsls	r2, r3, #30
 8002496:	d511      	bpl.n	80024bc <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	6023      	str	r3, [r4, #0]
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	6a2a      	ldr	r2, [r5, #32]
 80024a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024a8:	4313      	orrs	r3, r2
 80024aa:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ac:	6863      	ldr	r3, [r4, #4]
 80024ae:	69ea      	ldr	r2, [r5, #28]
 80024b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024b8:	6063      	str	r3, [r4, #4]
 80024ba:	e7b5      	b.n	8002428 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024bc:	f7ff f954 	bl	8001768 <HAL_GetTick>
 80024c0:	eba0 0008 	sub.w	r0, r0, r8
 80024c4:	2802      	cmp	r0, #2
 80024c6:	d9e4      	bls.n	8002492 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80024c8:	2003      	movs	r0, #3
 80024ca:	e762      	b.n	8002392 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024d4:	f7ff f948 	bl	8001768 <HAL_GetTick>
 80024d8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	079b      	lsls	r3, r3, #30
 80024de:	d5a3      	bpl.n	8002428 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e0:	f7ff f942 	bl	8001768 <HAL_GetTick>
 80024e4:	eba0 0008 	sub.w	r0, r0, r8
 80024e8:	2802      	cmp	r0, #2
 80024ea:	d9f6      	bls.n	80024da <HAL_RCC_OscConfig+0x152>
 80024ec:	e7ec      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ee:	2e08      	cmp	r6, #8
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_OscConfig+0x172>
 80024f2:	2e0c      	cmp	r6, #12
 80024f4:	d108      	bne.n	8002508 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024f6:	2f03      	cmp	r7, #3
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	039a      	lsls	r2, r3, #14
 80024fe:	d596      	bpl.n	800242e <HAL_RCC_OscConfig+0xa6>
 8002500:	686b      	ldr	r3, [r5, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d193      	bne.n	800242e <HAL_RCC_OscConfig+0xa6>
 8002506:	e743      	b.n	8002390 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	686b      	ldr	r3, [r5, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d110      	bne.n	8002532 <HAL_RCC_OscConfig+0x1aa>
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002516:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002518:	f7ff f926 	bl	8001768 <HAL_GetTick>
 800251c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	039b      	lsls	r3, r3, #14
 8002522:	d484      	bmi.n	800242e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff f920 	bl	8001768 <HAL_GetTick>
 8002528:	eba0 0008 	sub.w	r0, r0, r8
 800252c:	2864      	cmp	r0, #100	; 0x64
 800252e:	d9f6      	bls.n	800251e <HAL_RCC_OscConfig+0x196>
 8002530:	e7ca      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002536:	d104      	bne.n	8002542 <HAL_RCC_OscConfig+0x1ba>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253e:	6023      	str	r3, [r4, #0]
 8002540:	e7e6      	b.n	8002510 <HAL_RCC_OscConfig+0x188>
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002548:	6022      	str	r2, [r4, #0]
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002550:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e0      	bne.n	8002518 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002556:	f7ff f907 	bl	8001768 <HAL_GetTick>
 800255a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	0398      	lsls	r0, r3, #14
 8002560:	f57f af65 	bpl.w	800242e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff f900 	bl	8001768 <HAL_GetTick>
 8002568:	eba0 0008 	sub.w	r0, r0, r8
 800256c:	2864      	cmp	r0, #100	; 0x64
 800256e:	d9f5      	bls.n	800255c <HAL_RCC_OscConfig+0x1d4>
 8002570:	e7aa      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002572:	2e04      	cmp	r6, #4
 8002574:	d003      	beq.n	800257e <HAL_RCC_OscConfig+0x1f6>
 8002576:	2e0c      	cmp	r6, #12
 8002578:	d110      	bne.n	800259c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800257a:	2f02      	cmp	r7, #2
 800257c:	d10e      	bne.n	800259c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	0559      	lsls	r1, r3, #21
 8002582:	d503      	bpl.n	800258c <HAL_RCC_OscConfig+0x204>
 8002584:	68eb      	ldr	r3, [r5, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f43f af02 	beq.w	8002390 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	6863      	ldr	r3, [r4, #4]
 800258e:	692a      	ldr	r2, [r5, #16]
 8002590:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002594:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002598:	6063      	str	r3, [r4, #4]
 800259a:	e74c      	b.n	8002436 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	68eb      	ldr	r3, [r5, #12]
 800259e:	b17b      	cbz	r3, 80025c0 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025a8:	f7ff f8de 	bl	8001768 <HAL_GetTick>
 80025ac:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	055a      	lsls	r2, r3, #21
 80025b2:	d4eb      	bmi.n	800258c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7ff f8d8 	bl	8001768 <HAL_GetTick>
 80025b8:	1bc0      	subs	r0, r0, r7
 80025ba:	2802      	cmp	r0, #2
 80025bc:	d9f7      	bls.n	80025ae <HAL_RCC_OscConfig+0x226>
 80025be:	e783      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025c8:	f7ff f8ce 	bl	8001768 <HAL_GetTick>
 80025cc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	f57f af30 	bpl.w	8002436 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff f8c7 	bl	8001768 <HAL_GetTick>
 80025da:	1bc0      	subs	r0, r0, r7
 80025dc:	2802      	cmp	r0, #2
 80025de:	d9f6      	bls.n	80025ce <HAL_RCC_OscConfig+0x246>
 80025e0:	e772      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08009163 	.word	0x08009163
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f4:	696b      	ldr	r3, [r5, #20]
 80025f6:	b19b      	cbz	r3, 8002620 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80025f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002604:	f7ff f8b0 	bl	8001768 <HAL_GetTick>
 8002608:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800260e:	079a      	lsls	r2, r3, #30
 8002610:	f53f af15 	bmi.w	800243e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff f8a8 	bl	8001768 <HAL_GetTick>
 8002618:	1bc0      	subs	r0, r0, r7
 800261a:	2802      	cmp	r0, #2
 800261c:	d9f5      	bls.n	800260a <HAL_RCC_OscConfig+0x282>
 800261e:	e753      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002620:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800262c:	f7ff f89c 	bl	8001768 <HAL_GetTick>
 8002630:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002632:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002636:	079b      	lsls	r3, r3, #30
 8002638:	f57f af01 	bpl.w	800243e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff f894 	bl	8001768 <HAL_GetTick>
 8002640:	1bc0      	subs	r0, r0, r7
 8002642:	2802      	cmp	r0, #2
 8002644:	d9f5      	bls.n	8002632 <HAL_RCC_OscConfig+0x2aa>
 8002646:	e73f      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800264a:	00df      	lsls	r7, r3, #3
 800264c:	d429      	bmi.n	80026a2 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	65a3      	str	r3, [r4, #88]	; 0x58
 8002656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002660:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002664:	4f85      	ldr	r7, [pc, #532]	; (800287c <HAL_RCC_OscConfig+0x4f4>)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	05d8      	lsls	r0, r3, #23
 800266a:	d51d      	bpl.n	80026a8 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	68ab      	ldr	r3, [r5, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d12b      	bne.n	80026ca <HAL_RCC_OscConfig+0x342>
 8002672:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800267e:	f7ff f873 	bl	8001768 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002686:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002688:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800268c:	079a      	lsls	r2, r3, #30
 800268e:	d542      	bpl.n	8002716 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002690:	f1b8 0f00 	cmp.w	r8, #0
 8002694:	f43f aed7 	beq.w	8002446 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	65a3      	str	r3, [r4, #88]	; 0x58
 80026a0:	e6d1      	b.n	8002446 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	f04f 0800 	mov.w	r8, #0
 80026a6:	e7dd      	b.n	8002664 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80026b0:	f7ff f85a 	bl	8001768 <HAL_GetTick>
 80026b4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	05d9      	lsls	r1, r3, #23
 80026ba:	d4d7      	bmi.n	800266c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7ff f854 	bl	8001768 <HAL_GetTick>
 80026c0:	eba0 0009 	sub.w	r0, r0, r9
 80026c4:	2802      	cmp	r0, #2
 80026c6:	d9f6      	bls.n	80026b6 <HAL_RCC_OscConfig+0x32e>
 80026c8:	e6fe      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x354>
 80026ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80026da:	e7ca      	b.n	8002672 <HAL_RCC_OscConfig+0x2ea>
 80026dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80026e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80026ec:	f022 0204 	bic.w	r2, r2, #4
 80026f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1c2      	bne.n	800267e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80026f8:	f7ff f836 	bl	8001768 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002700:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002702:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002706:	079b      	lsls	r3, r3, #30
 8002708:	d5c2      	bpl.n	8002690 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff f82d 	bl	8001768 <HAL_GetTick>
 800270e:	1bc0      	subs	r0, r0, r7
 8002710:	4548      	cmp	r0, r9
 8002712:	d9f6      	bls.n	8002702 <HAL_RCC_OscConfig+0x37a>
 8002714:	e6d8      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7ff f827 	bl	8001768 <HAL_GetTick>
 800271a:	1bc0      	subs	r0, r0, r7
 800271c:	4548      	cmp	r0, r9
 800271e:	d9b3      	bls.n	8002688 <HAL_RCC_OscConfig+0x300>
 8002720:	e6d2      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002722:	2b02      	cmp	r3, #2
 8002724:	f040 808f 	bne.w	8002846 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002728:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800272c:	f003 0103 	and.w	r1, r3, #3
 8002730:	4291      	cmp	r1, r2
 8002732:	d124      	bne.n	800277e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002734:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002736:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800273a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002740:	d11d      	bne.n	800277e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002742:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002744:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002748:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800274c:	d117      	bne.n	800277e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800274e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002750:	3a07      	subs	r2, #7
 8002752:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002756:	bf18      	it	ne
 8002758:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800275a:	4291      	cmp	r1, r2
 800275c:	d10f      	bne.n	800277e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002760:	0852      	lsrs	r2, r2, #1
 8002762:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002766:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002768:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800276c:	d107      	bne.n	800277e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800276e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002770:	0852      	lsrs	r2, r2, #1
 8002772:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002776:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002778:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800277c:	d04a      	beq.n	8002814 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277e:	2e0c      	cmp	r6, #12
 8002780:	f43f ae06 	beq.w	8002390 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	015f      	lsls	r7, r3, #5
 8002788:	f53f ae02 	bmi.w	8002390 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	00de      	lsls	r6, r3, #3
 8002790:	f53f adfe 	bmi.w	8002390 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800279c:	f7fe ffe4 	bl	8001768 <HAL_GetTick>
 80027a0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	0198      	lsls	r0, r3, #6
 80027a6:	d42f      	bmi.n	8002808 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a8:	68e2      	ldr	r2, [r4, #12]
 80027aa:	4b35      	ldr	r3, [pc, #212]	; (8002880 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80027b0:	4313      	orrs	r3, r2
 80027b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80027b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80027ba:	3a01      	subs	r2, #1
 80027bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80027c0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80027c2:	0912      	lsrs	r2, r2, #4
 80027c4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80027c8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80027ca:	0852      	lsrs	r2, r2, #1
 80027cc:	3a01      	subs	r2, #1
 80027ce:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80027d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80027d4:	0852      	lsrs	r2, r2, #1
 80027d6:	3a01      	subs	r2, #1
 80027d8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80027dc:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e4:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ec:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80027ee:	f7fe ffbb 	bl	8001768 <HAL_GetTick>
 80027f2:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	0199      	lsls	r1, r3, #6
 80027f8:	f53f ae29 	bmi.w	800244e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe ffb4 	bl	8001768 <HAL_GetTick>
 8002800:	1b40      	subs	r0, r0, r5
 8002802:	2802      	cmp	r0, #2
 8002804:	d9f6      	bls.n	80027f4 <HAL_RCC_OscConfig+0x46c>
 8002806:	e65f      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe ffae 	bl	8001768 <HAL_GetTick>
 800280c:	1b80      	subs	r0, r0, r6
 800280e:	2802      	cmp	r0, #2
 8002810:	d9c7      	bls.n	80027a2 <HAL_RCC_OscConfig+0x41a>
 8002812:	e659      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	019a      	lsls	r2, r3, #6
 8002818:	f53f ae19 	bmi.w	800244e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002824:	68e3      	ldr	r3, [r4, #12]
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800282c:	f7fe ff9c 	bl	8001768 <HAL_GetTick>
 8002830:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	f53f ae0a 	bmi.w	800244e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe ff95 	bl	8001768 <HAL_GetTick>
 800283e:	1b40      	subs	r0, r0, r5
 8002840:	2802      	cmp	r0, #2
 8002842:	d9f6      	bls.n	8002832 <HAL_RCC_OscConfig+0x4aa>
 8002844:	e640      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002846:	2e0c      	cmp	r6, #12
 8002848:	f43f ada2 	beq.w	8002390 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002852:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002854:	f7fe ff88 	bl	8001768 <HAL_GetTick>
 8002858:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002862:	68e1      	ldr	r1, [r4, #12]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x4fc>)
 8002866:	400a      	ands	r2, r1
 8002868:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 800286a:	4618      	mov	r0, r3
 800286c:	e591      	b.n	8002392 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe ff7b 	bl	8001768 <HAL_GetTick>
 8002872:	1b40      	subs	r0, r0, r5
 8002874:	2802      	cmp	r0, #2
 8002876:	d9f0      	bls.n	800285a <HAL_RCC_OscConfig+0x4d2>
 8002878:	e626      	b.n	80024c8 <HAL_RCC_OscConfig+0x140>
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000
 8002880:	f99d808c 	.word	0xf99d808c
 8002884:	feeefffc 	.word	0xfeeefffc

08002888 <HAL_RCC_ClockConfig>:
{
 8002888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800288e:	4604      	mov	r4, r0
 8002890:	b910      	cbnz	r0, 8002898 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002892:	2001      	movs	r0, #1
}
 8002894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_RCC_ClockConfig+0x140>)
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d32c      	bcc.n	80028fe <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	6821      	ldr	r1, [r4, #0]
 80028a6:	0788      	lsls	r0, r1, #30
 80028a8:	d434      	bmi.n	8002914 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	07c9      	lsls	r1, r1, #31
 80028ac:	d43f      	bmi.n	800292e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ae:	6821      	ldr	r1, [r4, #0]
 80028b0:	078a      	lsls	r2, r1, #30
 80028b2:	d468      	bmi.n	8002986 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <HAL_RCC_ClockConfig+0x140>)
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	42ab      	cmp	r3, r5
 80028be:	d86f      	bhi.n	80029a0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	f011 0f04 	tst.w	r1, #4
 80028c4:	4d41      	ldr	r5, [pc, #260]	; (80029cc <HAL_RCC_ClockConfig+0x144>)
 80028c6:	d177      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	070b      	lsls	r3, r1, #28
 80028ca:	d506      	bpl.n	80028da <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028cc:	68ab      	ldr	r3, [r5, #8]
 80028ce:	6922      	ldr	r2, [r4, #16]
 80028d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80028d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028d8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028da:	f7ff fd07 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80028de:	68ab      	ldr	r3, [r5, #8]
 80028e0:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_ClockConfig+0x148>)
 80028e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80028e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	40d8      	lsrs	r0, r3
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_RCC_ClockConfig+0x14c>)
 80028f4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_RCC_ClockConfig+0x150>)
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	f7fe beed 	b.w	80016d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	f023 0307 	bic.w	r3, r3, #7
 8002904:	430b      	orrs	r3, r1
 8002906:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	428b      	cmp	r3, r1
 8002910:	d1bf      	bne.n	8002892 <HAL_RCC_ClockConfig+0xa>
 8002912:	e7c7      	b.n	80028a4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002914:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <HAL_RCC_ClockConfig+0x144>)
 8002916:	68a0      	ldr	r0, [r4, #8]
 8002918:	6893      	ldr	r3, [r2, #8]
 800291a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291e:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	bf81      	itttt	hi
 8002922:	6893      	ldrhi	r3, [r2, #8]
 8002924:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002928:	4303      	orrhi	r3, r0
 800292a:	6093      	strhi	r3, [r2, #8]
 800292c:	e7bd      	b.n	80028aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	4e26      	ldr	r6, [pc, #152]	; (80029cc <HAL_RCC_ClockConfig+0x144>)
 8002932:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002934:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002936:	d11a      	bne.n	800296e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002938:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293c:	d0a9      	beq.n	8002892 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293e:	68b3      	ldr	r3, [r6, #8]
 8002940:	f023 0303 	bic.w	r3, r3, #3
 8002944:	4313      	orrs	r3, r2
 8002946:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002948:	f7fe ff0e 	bl	8001768 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002950:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	68b3      	ldr	r3, [r6, #8]
 8002954:	6862      	ldr	r2, [r4, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800295e:	d0a6      	beq.n	80028ae <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe ff02 	bl	8001768 <HAL_GetTick>
 8002964:	1bc0      	subs	r0, r0, r7
 8002966:	4540      	cmp	r0, r8
 8002968:	d9f3      	bls.n	8002952 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800296a:	2003      	movs	r0, #3
 800296c:	e792      	b.n	8002894 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	2a02      	cmp	r2, #2
 8002970:	d102      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002972:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002976:	e7e1      	b.n	800293c <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002978:	b912      	cbnz	r2, 8002980 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297a:	f013 0f02 	tst.w	r3, #2
 800297e:	e7dd      	b.n	800293c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002980:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002984:	e7da      	b.n	800293c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_RCC_ClockConfig+0x144>)
 8002988:	68a0      	ldr	r0, [r4, #8]
 800298a:	6893      	ldr	r3, [r2, #8]
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002992:	bf3f      	itttt	cc
 8002994:	6893      	ldrcc	r3, [r2, #8]
 8002996:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800299a:	4303      	orrcc	r3, r0
 800299c:	6093      	strcc	r3, [r2, #8]
 800299e:	e789      	b.n	80028b4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a0:	6813      	ldr	r3, [r2, #0]
 80029a2:	f023 0307 	bic.w	r3, r3, #7
 80029a6:	432b      	orrs	r3, r5
 80029a8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	42ab      	cmp	r3, r5
 80029b2:	f47f af6e 	bne.w	8002892 <HAL_RCC_ClockConfig+0xa>
 80029b6:	e783      	b.n	80028c0 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	68ab      	ldr	r3, [r5, #8]
 80029ba:	68e2      	ldr	r2, [r4, #12]
 80029bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60ab      	str	r3, [r5, #8]
 80029c4:	e780      	b.n	80028c8 <HAL_RCC_ClockConfig+0x40>
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08009163 	.word	0x08009163
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000008 	.word	0x20000008

080029dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029de:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ea:	6810      	ldr	r0, [r2, #0]
 80029ec:	f003 031f 	and.w	r3, r3, #31
}
 80029f0:	40d8      	lsrs	r0, r3
 80029f2:	4770      	bx	lr
 80029f4:	40021000 	.word	0x40021000
 80029f8:	08009173 	.word	0x08009173
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a02:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a0e:	6810      	ldr	r0, [r2, #0]
 8002a10:	f003 031f 	and.w	r3, r3, #31
}
 8002a14:	40d8      	lsrs	r0, r3
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08009173 	.word	0x08009173
 8002a20:	20000000 	.word	0x20000000

08002a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a26:	4c42      	ldr	r4, [pc, #264]	; (8002b30 <RCCEx_PLLSAI1_Config+0x10c>)
 8002a28:	68e2      	ldr	r2, [r4, #12]
 8002a2a:	0793      	lsls	r3, r2, #30
{
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a30:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a32:	d029      	beq.n	8002a88 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a34:	68e2      	ldr	r2, [r4, #12]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	4282      	cmp	r2, r0
 8002a3c:	d13c      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x94>
       ||
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d03a      	beq.n	8002ab8 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a42:	68e3      	ldr	r3, [r4, #12]
       ||
 8002a44:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a46:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a4a:	3301      	adds	r3, #1
       ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d133      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a56:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fe fe86 	bl	8001768 <HAL_GetTick>
 8002a5c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	011a      	lsls	r2, r3, #4
 8002a62:	d432      	bmi.n	8002aca <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a64:	68aa      	ldr	r2, [r5, #8]
 8002a66:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002a68:	2e00      	cmp	r6, #0
 8002a6a:	d035      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a6c:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6e:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a70:	d14d      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a72:	6929      	ldr	r1, [r5, #16]
 8002a74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a78:	0849      	lsrs	r1, r1, #1
 8002a7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a7e:	3901      	subs	r1, #1
 8002a80:	4313      	orrs	r3, r2
 8002a82:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002a86:	e031      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8002a88:	2802      	cmp	r0, #2
 8002a8a:	d011      	beq.n	8002ab0 <RCCEx_PLLSAI1_Config+0x8c>
 8002a8c:	2803      	cmp	r0, #3
 8002a8e:	d015      	beq.n	8002abc <RCCEx_PLLSAI1_Config+0x98>
 8002a90:	2801      	cmp	r0, #1
 8002a92:	d111      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a94:	6822      	ldr	r2, [r4, #0]
 8002a96:	0797      	lsls	r7, r2, #30
 8002a98:	d51d      	bpl.n	8002ad6 <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a9a:	68e2      	ldr	r2, [r4, #12]
 8002a9c:	6869      	ldr	r1, [r5, #4]
 8002a9e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002aa2:	3901      	subs	r1, #1
 8002aa4:	ea42 0300 	orr.w	r3, r2, r0
 8002aa8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002aac:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002aae:	e7cf      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab0:	6822      	ldr	r2, [r4, #0]
 8002ab2:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab6:	d1f0      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e00c      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	0391      	lsls	r1, r2, #14
 8002ac0:	d4eb      	bmi.n	8002a9a <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002ac8:	e7f5      	b.n	8002ab6 <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aca:	f7fe fe4d 	bl	8001768 <HAL_GetTick>
 8002ace:	1bc0      	subs	r0, r0, r7
 8002ad0:	2802      	cmp	r0, #2
 8002ad2:	d9c4      	bls.n	8002a5e <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8002ad4:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad8:	6923      	ldr	r3, [r4, #16]
 8002ada:	68e9      	ldr	r1, [r5, #12]
 8002adc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	0909      	lsrs	r1, r1, #4
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aec:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002af4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002af6:	f7fe fe37 	bl	8001768 <HAL_GetTick>
 8002afa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	d510      	bpl.n	8002b24 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	69aa      	ldr	r2, [r5, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	6123      	str	r3, [r4, #16]
 8002b0a:	2000      	movs	r0, #0
  return status;
 8002b0c:	e7e3      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0e:	6969      	ldr	r1, [r5, #20]
 8002b10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b14:	0849      	lsrs	r1, r1, #1
 8002b16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b1a:	3901      	subs	r1, #1
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002b22:	e7e3      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b24:	f7fe fe20 	bl	8001768 <HAL_GetTick>
 8002b28:	1b80      	subs	r0, r0, r6
 8002b2a:	2802      	cmp	r0, #2
 8002b2c:	d9e6      	bls.n	8002afc <RCCEx_PLLSAI1_Config+0xd8>
 8002b2e:	e7d1      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0xb0>
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b36:	4c3b      	ldr	r4, [pc, #236]	; (8002c24 <RCCEx_PLLSAI2_Config+0xf0>)
 8002b38:	68e2      	ldr	r2, [r4, #12]
 8002b3a:	0793      	lsls	r3, r2, #30
{
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b40:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b42:	d026      	beq.n	8002b92 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b44:	68e2      	ldr	r2, [r4, #12]
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	4282      	cmp	r2, r0
 8002b4c:	d139      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8002b4e:	2a00      	cmp	r2, #0
 8002b50:	d037      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b52:	68e3      	ldr	r3, [r4, #12]
       ||
 8002b54:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b5a:	3301      	adds	r3, #1
       ||
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d130      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe fdfe 	bl	8001768 <HAL_GetTick>
 8002b6c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	009a      	lsls	r2, r3, #2
 8002b72:	d42f      	bmi.n	8002bd4 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b74:	68a9      	ldr	r1, [r5, #8]
 8002b76:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002b78:	b39e      	cbz	r6, 8002be2 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7a:	6963      	ldr	r3, [r4, #20]
 8002b7c:	692a      	ldr	r2, [r5, #16]
 8002b7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b82:	0852      	lsrs	r2, r2, #1
 8002b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002b90:	e031      	b.n	8002bf6 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d011      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x86>
 8002b96:	2803      	cmp	r0, #3
 8002b98:	d015      	beq.n	8002bc6 <RCCEx_PLLSAI2_Config+0x92>
 8002b9a:	2801      	cmp	r0, #1
 8002b9c:	d111      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9e:	6822      	ldr	r2, [r4, #0]
 8002ba0:	0797      	lsls	r7, r2, #30
 8002ba2:	d51d      	bpl.n	8002be0 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ba4:	68e2      	ldr	r2, [r4, #12]
 8002ba6:	6869      	ldr	r1, [r5, #4]
 8002ba8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002bac:	3901      	subs	r1, #1
 8002bae:	ea42 0300 	orr.w	r3, r2, r0
 8002bb2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002bb6:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002bb8:	e7d2      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bc0:	d1f0      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	e00c      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	0391      	lsls	r1, r2, #14
 8002bca:	d4eb      	bmi.n	8002ba4 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002bd2:	e7f5      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bd4:	f7fe fdc8 	bl	8001768 <HAL_GetTick>
 8002bd8:	1bc0      	subs	r0, r0, r7
 8002bda:	2802      	cmp	r0, #2
 8002bdc:	d9c7      	bls.n	8002b6e <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 8002bde:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be2:	6963      	ldr	r3, [r4, #20]
 8002be4:	68ea      	ldr	r2, [r5, #12]
 8002be6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bee:	0912      	lsrs	r2, r2, #4
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf6:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002c00:	f7fe fdb2 	bl	8001768 <HAL_GetTick>
 8002c04:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	d505      	bpl.n	8002c18 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c0c:	6963      	ldr	r3, [r4, #20]
 8002c0e:	696a      	ldr	r2, [r5, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	6163      	str	r3, [r4, #20]
 8002c14:	2000      	movs	r0, #0
  return status;
 8002c16:	e7e3      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c18:	f7fe fda6 	bl	8001768 <HAL_GetTick>
 8002c1c:	1b80      	subs	r0, r0, r6
 8002c1e:	2802      	cmp	r0, #2
 8002c20:	d9f1      	bls.n	8002c06 <RCCEx_PLLSAI2_Config+0xd2>
 8002c22:	e7dc      	b.n	8002bde <RCCEx_PLLSAI2_Config+0xaa>
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002c28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c2c:	6806      	ldr	r6, [r0, #0]
 8002c2e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002c32:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c34:	d009      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c36:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002c38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002c3c:	d022      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c3e:	d813      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c40:	b331      	cbz	r1, 8002c90 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002c42:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002c46:	d02a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c48:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	04d8      	lsls	r0, r3, #19
 8002c4e:	d509      	bpl.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002c50:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002c52:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002c56:	d02c      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002c58:	d826      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002c5a:	b381      	cbz	r1, 8002cbe <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002c5c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002c60:	d072      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002c62:	2601      	movs	r6, #1
 8002c64:	4635      	mov	r5, r6
 8002c66:	e039      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c68:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002c6c:	d1ec      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6e:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002c70:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002c72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002c80:	2600      	movs	r6, #0
 8002c82:	e7e2      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c84:	4a36      	ldr	r2, [pc, #216]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002c86:	68d3      	ldr	r3, [r2, #12]
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002c8e:	e7ee      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c90:	3004      	adds	r0, #4
 8002c92:	f7ff fec7 	bl	8002a24 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c96:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d1d6      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002c9c:	e7e7      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	3020      	adds	r0, #32
 8002ca2:	f7ff ff47 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 8002ca6:	e7f6      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ca8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002cac:	d1d9      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002cae:	4635      	mov	r5, r6
 8002cb0:	e009      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002cb4:	68d3      	ldr	r3, [r2, #12]
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	60d3      	str	r3, [r2, #12]
      break;
 8002cbc:	e7f7      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cbe:	1d20      	adds	r0, r4, #4
 8002cc0:	f7ff feb0 	bl	8002a24 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cc4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002cc6:	2d00      	cmp	r5, #0
 8002cc8:	d144      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002ccc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002cce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cd2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	0399      	lsls	r1, r3, #14
 8002ce0:	f140 815d 	bpl.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ce4:	4f1e      	ldr	r7, [pc, #120]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	00da      	lsls	r2, r3, #3
 8002cea:	d435      	bmi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cfe:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d02:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d06:	f8d9 3000 	ldr.w	r3, [r9]
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002d12:	f7fe fd29 	bl	8001768 <HAL_GetTick>
 8002d16:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d18:	f8d9 3000 	ldr.w	r3, [r9]
 8002d1c:	05db      	lsls	r3, r3, #23
 8002d1e:	d523      	bpl.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8002d20:	bb4d      	cbnz	r5, 8002d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d26:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002d2a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002d2e:	f040 810e 	bne.w	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d36:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d44:	4635      	mov	r5, r6
 8002d46:	e016      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f104 0020 	add.w	r0, r4, #32
 8002d4e:	f7ff fef1 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 8002d52:	e7b7      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002d54:	462e      	mov	r6, r5
 8002d56:	e7c1      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	f04f 0800 	mov.w	r8, #0
 8002d5c:	e7d1      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fe fcfe 	bl	8001768 <HAL_GetTick>
 8002d6c:	eba0 000a 	sub.w	r0, r0, sl
 8002d70:	2802      	cmp	r0, #2
 8002d72:	d9d1      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002d74:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002d76:	f1b8 0f00 	cmp.w	r8, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	07da      	lsls	r2, r3, #31
 8002d88:	d508      	bpl.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8a:	499b      	ldr	r1, [pc, #620]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002d8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002d8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d92:	f022 0203 	bic.w	r2, r2, #3
 8002d96:	4302      	orrs	r2, r0
 8002d98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9c:	079f      	lsls	r7, r3, #30
 8002d9e:	d508      	bpl.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da0:	4995      	ldr	r1, [pc, #596]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002da2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002da4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002da8:	f022 020c 	bic.w	r2, r2, #12
 8002dac:	4302      	orrs	r2, r0
 8002dae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db2:	075e      	lsls	r6, r3, #29
 8002db4:	d508      	bpl.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db6:	4990      	ldr	r1, [pc, #576]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002db8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002dba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dbe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002dc2:	4302      	orrs	r2, r0
 8002dc4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc8:	0718      	lsls	r0, r3, #28
 8002dca:	d508      	bpl.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dcc:	498a      	ldr	r1, [pc, #552]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002dce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002dd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dd4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002dd8:	4302      	orrs	r2, r0
 8002dda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dde:	06d9      	lsls	r1, r3, #27
 8002de0:	d508      	bpl.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de2:	4985      	ldr	r1, [pc, #532]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002de4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002de6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dee:	4302      	orrs	r2, r0
 8002df0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df4:	069a      	lsls	r2, r3, #26
 8002df6:	d508      	bpl.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df8:	497f      	ldr	r1, [pc, #508]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002dfa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002dfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e04:	4302      	orrs	r2, r0
 8002e06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e0a:	059f      	lsls	r7, r3, #22
 8002e0c:	d508      	bpl.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e0e:	497a      	ldr	r1, [pc, #488]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002e10:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002e12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e16:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002e1a:	4302      	orrs	r2, r0
 8002e1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e20:	055e      	lsls	r6, r3, #21
 8002e22:	d508      	bpl.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e24:	4974      	ldr	r1, [pc, #464]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002e26:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002e28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e2c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002e30:	4302      	orrs	r2, r0
 8002e32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e36:	0658      	lsls	r0, r3, #25
 8002e38:	d508      	bpl.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3a:	496f      	ldr	r1, [pc, #444]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002e3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002e3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e46:	4302      	orrs	r2, r0
 8002e48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e4c:	0619      	lsls	r1, r3, #24
 8002e4e:	d508      	bpl.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e50:	4969      	ldr	r1, [pc, #420]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e58:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002e5c:	4302      	orrs	r2, r0
 8002e5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e62:	05da      	lsls	r2, r3, #23
 8002e64:	d508      	bpl.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e66:	4964      	ldr	r1, [pc, #400]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e6e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002e72:	4302      	orrs	r2, r0
 8002e74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e78:	049b      	lsls	r3, r3, #18
 8002e7a:	d510      	bpl.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7c:	4a5e      	ldr	r2, [pc, #376]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002e7e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002e80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e84:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e88:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e8a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e92:	f040 8086 	bne.w	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e96:	68d3      	ldr	r3, [r2, #12]
 8002e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	031f      	lsls	r7, r3, #12
 8002ea2:	d50f      	bpl.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ea4:	4a54      	ldr	r2, [pc, #336]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002ea6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002ea8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002eac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002eb0:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eb2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eba:	d17e      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ebc:	68d3      	ldr	r3, [r2, #12]
 8002ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	035e      	lsls	r6, r3, #13
 8002ec8:	d50f      	bpl.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eca:	4a4b      	ldr	r2, [pc, #300]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002ecc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ed2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002ed6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ed8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ee0:	d176      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee2:	68d3      	ldr	r3, [r2, #12]
 8002ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	0458      	lsls	r0, r3, #17
 8002eee:	d512      	bpl.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef0:	4941      	ldr	r1, [pc, #260]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002ef2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002ef4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ef8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002efc:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002efe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f06:	d16e      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f08:	2102      	movs	r1, #2
 8002f0a:	1d20      	adds	r0, r4, #4
 8002f0c:	f7ff fd8a 	bl	8002a24 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002f10:	2800      	cmp	r0, #0
 8002f12:	bf18      	it	ne
 8002f14:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	0411      	lsls	r1, r2, #16
 8002f1a:	d508      	bpl.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f1c:	4936      	ldr	r1, [pc, #216]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002f1e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002f20:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f28:	4303      	orrs	r3, r0
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f2e:	03d3      	lsls	r3, r2, #15
 8002f30:	d509      	bpl.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f32:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002f34:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002f38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f40:	430b      	orrs	r3, r1
 8002f42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002f46:	4628      	mov	r0, r5
 8002f48:	b002      	add	sp, #8
 8002f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	f43f aeef 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f68:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f70:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002f76:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f7a:	f57f aeda 	bpl.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fbf3 	bl	8001768 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002f86:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f8c:	0799      	lsls	r1, r3, #30
 8002f8e:	f53f aed0 	bmi.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fbe9 	bl	8001768 <HAL_GetTick>
 8002f96:	1b40      	subs	r0, r0, r5
 8002f98:	4548      	cmp	r0, r9
 8002f9a:	d9f5      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f9c:	e6ea      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f9e:	4635      	mov	r5, r6
 8002fa0:	e6f0      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fa2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002fa6:	f47f af7a 	bne.w	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002faa:	2101      	movs	r1, #1
 8002fac:	1d20      	adds	r0, r4, #4
 8002fae:	f7ff fd39 	bl	8002a24 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	bf18      	it	ne
 8002fb6:	4605      	movne	r5, r0
 8002fb8:	e771      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002fbe:	d181      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	1d20      	adds	r0, r4, #4
 8002fc4:	f7ff fd2e 	bl	8002a24 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	bf18      	it	ne
 8002fcc:	4605      	movne	r5, r0
 8002fce:	e779      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fd0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002fd4:	d189      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	1d20      	adds	r0, r4, #4
 8002fda:	f7ff fd23 	bl	8002a24 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	bf18      	it	ne
 8002fe2:	4605      	movne	r5, r0
 8002fe4:	e781      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fe6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002fea:	d194      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fec:	2102      	movs	r1, #2
 8002fee:	f104 0020 	add.w	r0, r4, #32
 8002ff2:	f7ff fd9f 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 8002ff6:	e78b      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002ff8:	40021000 	.word	0x40021000

08002ffc <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ffc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	e852 3f00 	ldrex	r3, [r2]
 8003002:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800300a:	6802      	ldr	r2, [r0, #0]
 800300c:	2900      	cmp	r1, #0
 800300e:	d1f5      	bne.n	8002ffc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	f102 0308 	add.w	r3, r2, #8
 8003014:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003018:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	f102 0c08 	add.w	ip, r2, #8
 8003020:	e84c 3100 	strex	r1, r3, [ip]
 8003024:	2900      	cmp	r1, #0
 8003026:	d1f3      	bne.n	8003010 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003028:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003032:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	e842 3100 	strex	r1, r3, [r2]
 800303a:	2900      	cmp	r1, #0
 800303c:	d1f7      	bne.n	800302e <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800303e:	2320      	movs	r3, #32
 8003040:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003042:	2300      	movs	r3, #0
 8003044:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003046:	6643      	str	r3, [r0, #100]	; 0x64
}
 8003048:	4770      	bx	lr

0800304a <HAL_UART_TxCpltCallback>:
 800304a:	4770      	bx	lr

0800304c <HAL_UART_ErrorCallback>:
 800304c:	4770      	bx	lr

0800304e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800304e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003050:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003058:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305c:	f7ff fff6 	bl	800304c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003060:	bd08      	pop	{r3, pc}

08003062 <HAL_UARTEx_RxEventCallback>:
}
 8003062:	4770      	bx	lr

08003064 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003064:	6803      	ldr	r3, [r0, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003068:	6819      	ldr	r1, [r3, #0]
{
 800306a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800306c:	f640 060f 	movw	r6, #2063	; 0x80f
 8003070:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003072:	689d      	ldr	r5, [r3, #8]
{
 8003074:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003076:	d10b      	bne.n	8003090 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003078:	0696      	lsls	r6, r2, #26
 800307a:	f140 8088 	bpl.w	800318e <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800307e:	068e      	lsls	r6, r1, #26
 8003080:	f140 8085 	bpl.w	800318e <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 8003084:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003086:	2b00      	cmp	r3, #0
 8003088:	d07b      	beq.n	8003182 <HAL_UART_IRQHandler+0x11e>
}
 800308a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800308e:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003090:	4e95      	ldr	r6, [pc, #596]	; (80032e8 <HAL_UART_IRQHandler+0x284>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003092:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003096:	400e      	ands	r6, r1
 8003098:	4306      	orrs	r6, r0
 800309a:	d078      	beq.n	800318e <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800309c:	07d5      	lsls	r5, r2, #31
 800309e:	d509      	bpl.n	80030b4 <HAL_UART_IRQHandler+0x50>
 80030a0:	05ce      	lsls	r6, r1, #23
 80030a2:	d507      	bpl.n	80030b4 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030a4:	2501      	movs	r5, #1
 80030a6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030a8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80030ac:	f045 0501 	orr.w	r5, r5, #1
 80030b0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030b4:	0795      	lsls	r5, r2, #30
 80030b6:	d508      	bpl.n	80030ca <HAL_UART_IRQHandler+0x66>
 80030b8:	b138      	cbz	r0, 80030ca <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ba:	2502      	movs	r5, #2
 80030bc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030be:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80030c2:	f045 0504 	orr.w	r5, r5, #4
 80030c6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ca:	0756      	lsls	r6, r2, #29
 80030cc:	d508      	bpl.n	80030e0 <HAL_UART_IRQHandler+0x7c>
 80030ce:	b138      	cbz	r0, 80030e0 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030d0:	2504      	movs	r5, #4
 80030d2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030d4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80030d8:	f045 0502 	orr.w	r5, r5, #2
 80030dc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030e0:	0715      	lsls	r5, r2, #28
 80030e2:	d50b      	bpl.n	80030fc <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e4:	f001 0520 	and.w	r5, r1, #32
 80030e8:	4305      	orrs	r5, r0
 80030ea:	d007      	beq.n	80030fc <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ec:	2008      	movs	r0, #8
 80030ee:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80030f4:	f040 0008 	orr.w	r0, r0, #8
 80030f8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030fc:	0516      	lsls	r6, r2, #20
 80030fe:	d50a      	bpl.n	8003116 <HAL_UART_IRQHandler+0xb2>
 8003100:	014d      	lsls	r5, r1, #5
 8003102:	d508      	bpl.n	8003116 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003104:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003108:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800310a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800310e:	f043 0320 	orr.w	r3, r3, #32
 8003112:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003116:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d031      	beq.n	8003182 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800311e:	0690      	lsls	r0, r2, #26
 8003120:	d505      	bpl.n	800312e <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003122:	068a      	lsls	r2, r1, #26
 8003124:	d503      	bpl.n	800312e <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8003126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003128:	b10b      	cbz	r3, 800312e <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800312a:	4620      	mov	r0, r4
 800312c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800312e:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8003130:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003134:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003136:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8003142:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003144:	d01e      	beq.n	8003184 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 8003146:	f7ff ff59 	bl	8002ffc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314a:	68b3      	ldr	r3, [r6, #8]
 800314c:	065b      	lsls	r3, r3, #25
 800314e:	d515      	bpl.n	800317c <HAL_UART_IRQHandler+0x118>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003150:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	f102 0308 	add.w	r3, r2, #8
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	3208      	adds	r2, #8
 8003160:	e842 3100 	strex	r1, r3, [r2]
 8003164:	2900      	cmp	r1, #0
 8003166:	d1f3      	bne.n	8003150 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 8003168:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800316a:	b138      	cbz	r0, 800317c <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800316c:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_UART_IRQHandler+0x288>)
 800316e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003170:	f7fe fbf9 	bl	8001966 <HAL_DMA_Abort_IT>
 8003174:	b128      	cbz	r0, 8003182 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003176:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003178:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800317a:	e786      	b.n	800308a <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 800317c:	4620      	mov	r0, r4
 800317e:	f7ff ff65 	bl	800304c <HAL_UART_ErrorCallback>
}
 8003182:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003184:	f7ff ff62 	bl	800304c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800318c:	e7f9      	b.n	8003182 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003190:	2801      	cmp	r0, #1
 8003192:	d17e      	bne.n	8003292 <HAL_UART_IRQHandler+0x22e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003194:	06d6      	lsls	r6, r2, #27
 8003196:	d57c      	bpl.n	8003292 <HAL_UART_IRQHandler+0x22e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003198:	06c8      	lsls	r0, r1, #27
 800319a:	d57a      	bpl.n	8003292 <HAL_UART_IRQHandler+0x22e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800319c:	2210      	movs	r2, #16
 800319e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	0651      	lsls	r1, r2, #25
 80031a4:	d546      	bpl.n	8003234 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031a6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80031a8:	6811      	ldr	r1, [r2, #0]
 80031aa:	684a      	ldr	r2, [r1, #4]
 80031ac:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80031ae:	2a00      	cmp	r2, #0
 80031b0:	d0e7      	beq.n	8003182 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031b2:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 80031b6:	4290      	cmp	r0, r2
 80031b8:	d9e3      	bls.n	8003182 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 80031ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031be:	680a      	ldr	r2, [r1, #0]
 80031c0:	0692      	lsls	r2, r2, #26
 80031c2:	d42d      	bmi.n	8003220 <HAL_UART_IRQHandler+0x1bc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	e843 2100 	strex	r1, r2, [r3]
 80031d0:	2900      	cmp	r1, #0
 80031d2:	d1f7      	bne.n	80031c4 <HAL_UART_IRQHandler+0x160>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	f103 0208 	add.w	r2, r3, #8
 80031d8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	f103 0008 	add.w	r0, r3, #8
 80031e4:	e840 2100 	strex	r1, r2, [r0]
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d1f3      	bne.n	80031d4 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	f103 0208 	add.w	r2, r3, #8
 80031f0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	f103 0008 	add.w	r0, r3, #8
 80031fc:	e840 2100 	strex	r1, r2, [r0]
 8003200:	2900      	cmp	r1, #0
 8003202:	d1f3      	bne.n	80031ec <HAL_UART_IRQHandler+0x188>
          huart->RxState = HAL_UART_STATE_READY;
 8003204:	2220      	movs	r2, #32
 8003206:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003208:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	e843 2100 	strex	r1, r2, [r3]
 8003216:	2900      	cmp	r1, #0
 8003218:	d1f7      	bne.n	800320a <HAL_UART_IRQHandler+0x1a6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800321a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800321c:	f7fe fb82 	bl	8001924 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003220:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003224:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003228:	1ac9      	subs	r1, r1, r3
 800322a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff ff18 	bl	8003062 <HAL_UARTEx_RxEventCallback>
 8003232:	e7a6      	b.n	8003182 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003234:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8003238:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800323c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8003240:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003242:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003244:	2800      	cmp	r0, #0
 8003246:	d09c      	beq.n	8003182 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003248:	1a89      	subs	r1, r1, r2
 800324a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800324c:	2900      	cmp	r1, #0
 800324e:	d098      	beq.n	8003182 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003254:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	e843 2000 	strex	r0, r2, [r3]
 800325c:	2800      	cmp	r0, #0
 800325e:	d1f7      	bne.n	8003250 <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	f103 0208 	add.w	r2, r3, #8
 8003264:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003268:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326c:	f103 0508 	add.w	r5, r3, #8
 8003270:	e845 2000 	strex	r0, r2, [r5]
 8003274:	2800      	cmp	r0, #0
 8003276:	d1f3      	bne.n	8003260 <HAL_UART_IRQHandler+0x1fc>
        huart->RxState = HAL_UART_STATE_READY;
 8003278:	2220      	movs	r2, #32
 800327a:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 800327c:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003284:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	e843 2000 	strex	r0, r2, [r3]
 800328c:	2800      	cmp	r0, #0
 800328e:	d1f7      	bne.n	8003280 <HAL_UART_IRQHandler+0x21c>
 8003290:	e7cc      	b.n	800322c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003292:	02d6      	lsls	r6, r2, #11
 8003294:	d509      	bpl.n	80032aa <HAL_UART_IRQHandler+0x246>
 8003296:	0268      	lsls	r0, r5, #9
 8003298:	d507      	bpl.n	80032aa <HAL_UART_IRQHandler+0x246>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800329a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800329e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80032a6:	f000 bbf7 	b.w	8003a98 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032aa:	0616      	lsls	r6, r2, #24
 80032ac:	d507      	bpl.n	80032be <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032ae:	060d      	lsls	r5, r1, #24
 80032b0:	d505      	bpl.n	80032be <HAL_UART_IRQHandler+0x25a>
    if (huart->TxISR != NULL)
 80032b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f43f af64 	beq.w	8003182 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 80032ba:	4620      	mov	r0, r4
 80032bc:	e6e5      	b.n	800308a <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032be:	0650      	lsls	r0, r2, #25
 80032c0:	f57f af5f 	bpl.w	8003182 <HAL_UART_IRQHandler+0x11e>
 80032c4:	064a      	lsls	r2, r1, #25
 80032c6:	f57f af5c 	bpl.w	8003182 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	e843 2100 	strex	r1, r2, [r3]
 80032d6:	2900      	cmp	r1, #0
 80032d8:	d1f7      	bne.n	80032ca <HAL_UART_IRQHandler+0x266>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032da:	2320      	movs	r3, #32
 80032dc:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032de:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032e0:	4620      	mov	r0, r4
 80032e2:	f7ff feb2 	bl	800304a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032e6:	e74c      	b.n	8003182 <HAL_UART_IRQHandler+0x11e>
 80032e8:	04000120 	.word	0x04000120
 80032ec:	0800304f 	.word	0x0800304f

080032f0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032f0:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032f2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032f4:	2922      	cmp	r1, #34	; 0x22
{
 80032f6:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80032f8:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032fc:	d142      	bne.n	8003384 <UART_RxISR_8BIT+0x94>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032fe:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003300:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003302:	400b      	ands	r3, r1
 8003304:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8003306:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003308:	3301      	adds	r3, #1
 800330a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800330c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003310:	3b01      	subs	r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003318:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800331c:	b29b      	uxth	r3, r3
 800331e:	bb6b      	cbnz	r3, 800337c <UART_RxISR_8BIT+0x8c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003320:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	e852 3f00 	ldrex	r3, [r2]
 8003326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	2900      	cmp	r1, #0
 8003332:	d1f5      	bne.n	8003320 <UART_RxISR_8BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f103 0208 	add.w	r2, r3, #8
 8003338:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	f103 0c08 	add.w	ip, r3, #8
 8003344:	e84c 2100 	strex	r1, r2, [ip]
 8003348:	2900      	cmp	r1, #0
 800334a:	d1f3      	bne.n	8003334 <UART_RxISR_8BIT+0x44>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800334c:	2220      	movs	r2, #32
 800334e:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8003352:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003354:	2a01      	cmp	r2, #1
 8003356:	d112      	bne.n	800337e <UART_RxISR_8BIT+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	e843 2100 	strex	r1, r2, [r3]
 8003366:	2900      	cmp	r1, #0
 8003368:	d1f7      	bne.n	800335a <UART_RxISR_8BIT+0x6a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800336a:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003370:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003372:	bf44      	itt	mi
 8003374:	2210      	movmi	r2, #16
 8003376:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003378:	f7ff fe73 	bl	8003062 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800337c:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800337e:	f7fe f861 	bl	8001444 <HAL_UART_RxCpltCallback>
 8003382:	e7fb      	b.n	800337c <UART_RxISR_8BIT+0x8c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003384:	8b13      	ldrh	r3, [r2, #24]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f043 0308 	orr.w	r3, r3, #8
 800338c:	8313      	strh	r3, [r2, #24]
}
 800338e:	e7f5      	b.n	800337c <UART_RxISR_8BIT+0x8c>

08003390 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003390:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8003392:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003396:	2a22      	cmp	r2, #34	; 0x22
{
 8003398:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800339a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800339c:	d13f      	bne.n	800341e <UART_RxISR_16BIT+0x8e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800339e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80033a0:	4011      	ands	r1, r2
 80033a2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80033a4:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80033a8:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80033aa:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80033ae:	3a01      	subs	r2, #1
 80033b0:	b292      	uxth	r2, r2
 80033b2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80033b6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80033ba:	b292      	uxth	r2, r2
 80033bc:	bb5a      	cbnz	r2, 8003416 <UART_RxISR_16BIT+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	e843 2100 	strex	r1, r2, [r3]
 80033ca:	2900      	cmp	r1, #0
 80033cc:	d1f7      	bne.n	80033be <UART_RxISR_16BIT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	e852 2f00 	ldrex	r2, [r2]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	f103 0c08 	add.w	ip, r3, #8
 80033de:	e84c 2100 	strex	r1, r2, [ip]
 80033e2:	2900      	cmp	r1, #0
 80033e4:	d1f3      	bne.n	80033ce <UART_RxISR_16BIT+0x3e>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033e6:	2220      	movs	r2, #32
 80033e8:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ea:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 80033ec:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ee:	2a01      	cmp	r2, #1
 80033f0:	d112      	bne.n	8003418 <UART_RxISR_16BIT+0x88>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	e843 2100 	strex	r1, r2, [r3]
 8003400:	2900      	cmp	r1, #0
 8003402:	d1f7      	bne.n	80033f4 <UART_RxISR_16BIT+0x64>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003404:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003406:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800340a:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800340c:	bf44      	itt	mi
 800340e:	2210      	movmi	r2, #16
 8003410:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003412:	f7ff fe26 	bl	8003062 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003416:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8003418:	f7fe f814 	bl	8001444 <HAL_UART_RxCpltCallback>
 800341c:	e7fb      	b.n	8003416 <UART_RxISR_16BIT+0x86>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800341e:	8b1a      	ldrh	r2, [r3, #24]
 8003420:	b292      	uxth	r2, r2
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	831a      	strh	r2, [r3, #24]
}
 8003428:	e7f5      	b.n	8003416 <UART_RxISR_16BIT+0x86>
	...

0800342c <UART_SetConfig>:
{
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003430:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003432:	6921      	ldr	r1, [r4, #16]
 8003434:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003436:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003438:	69c0      	ldr	r0, [r0, #28]
 800343a:	430a      	orrs	r2, r1
 800343c:	6961      	ldr	r1, [r4, #20]
 800343e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003440:	498f      	ldr	r1, [pc, #572]	; (8003680 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003442:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003444:	4029      	ands	r1, r5
 8003446:	430a      	orrs	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68e1      	ldr	r1, [r4, #12]
 800344e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003456:	4a8b      	ldr	r2, [pc, #556]	; (8003684 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003458:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800345a:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800345c:	bf1c      	itt	ne
 800345e:	6a22      	ldrne	r2, [r4, #32]
 8003460:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800346c:	4a86      	ldr	r2, [pc, #536]	; (8003688 <UART_SetConfig+0x25c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d117      	bne.n	80034a2 <UART_SetConfig+0x76>
 8003472:	4b86      	ldr	r3, [pc, #536]	; (800368c <UART_SetConfig+0x260>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	3b01      	subs	r3, #1
 800347e:	2b02      	cmp	r3, #2
 8003480:	f200 80cf 	bhi.w	8003622 <UART_SetConfig+0x1f6>
 8003484:	4a82      	ldr	r2, [pc, #520]	; (8003690 <UART_SetConfig+0x264>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003488:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800348c:	f040 8099 	bne.w	80035c2 <UART_SetConfig+0x196>
    switch (clocksource)
 8003490:	2b08      	cmp	r3, #8
 8003492:	d822      	bhi.n	80034da <UART_SetConfig+0xae>
 8003494:	e8df f003 	tbb	[pc, r3]
 8003498:	2193c8d9 	.word	0x2193c8d9
 800349c:	212121ce 	.word	0x212121ce
 80034a0:	dd          	.byte	0xdd
 80034a1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a2:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <UART_SetConfig+0x268>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <UART_SetConfig+0x8a>
 80034a8:	4b78      	ldr	r3, [pc, #480]	; (800368c <UART_SetConfig+0x260>)
 80034aa:	4a7b      	ldr	r2, [pc, #492]	; (8003698 <UART_SetConfig+0x26c>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	e7e7      	b.n	8003486 <UART_SetConfig+0x5a>
 80034b6:	4a79      	ldr	r2, [pc, #484]	; (800369c <UART_SetConfig+0x270>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d119      	bne.n	80034f0 <UART_SetConfig+0xc4>
 80034bc:	4b73      	ldr	r3, [pc, #460]	; (800368c <UART_SetConfig+0x260>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	f000 80b7 	beq.w	800363a <UART_SetConfig+0x20e>
 80034cc:	d807      	bhi.n	80034de <UART_SetConfig+0xb2>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80b8 	beq.w	8003644 <UART_SetConfig+0x218>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	f000 80aa 	beq.w	800362e <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034da:	2001      	movs	r0, #1
 80034dc:	e04e      	b.n	800357c <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034de:	2b30      	cmp	r3, #48	; 0x30
 80034e0:	d1fb      	bne.n	80034da <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034e6:	f000 80b4 	beq.w	8003652 <UART_SetConfig+0x226>
 80034ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80034ee:	e083      	b.n	80035f8 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f0:	4a6b      	ldr	r2, [pc, #428]	; (80036a0 <UART_SetConfig+0x274>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10f      	bne.n	8003516 <UART_SetConfig+0xea>
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <UART_SetConfig+0x260>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	f000 809a 	beq.w	800363a <UART_SetConfig+0x20e>
 8003506:	d804      	bhi.n	8003512 <UART_SetConfig+0xe6>
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 809b 	beq.w	8003644 <UART_SetConfig+0x218>
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	e7e1      	b.n	80034d6 <UART_SetConfig+0xaa>
 8003512:	2bc0      	cmp	r3, #192	; 0xc0
 8003514:	e7e4      	b.n	80034e0 <UART_SetConfig+0xb4>
 8003516:	4a63      	ldr	r2, [pc, #396]	; (80036a4 <UART_SetConfig+0x278>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d112      	bne.n	8003542 <UART_SetConfig+0x116>
 800351c:	4b5b      	ldr	r3, [pc, #364]	; (800368c <UART_SetConfig+0x260>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352a:	f000 8086 	beq.w	800363a <UART_SetConfig+0x20e>
 800352e:	d805      	bhi.n	800353c <UART_SetConfig+0x110>
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8087 	beq.w	8003644 <UART_SetConfig+0x218>
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	e7cc      	b.n	80034d6 <UART_SetConfig+0xaa>
 800353c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003540:	e7ce      	b.n	80034e0 <UART_SetConfig+0xb4>
 8003542:	4a50      	ldr	r2, [pc, #320]	; (8003684 <UART_SetConfig+0x258>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d1c8      	bne.n	80034da <UART_SetConfig+0xae>
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <UART_SetConfig+0x260>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	d015      	beq.n	8003584 <UART_SetConfig+0x158>
 8003558:	d806      	bhi.n	8003568 <UART_SetConfig+0x13c>
 800355a:	b15b      	cbz	r3, 8003574 <UART_SetConfig+0x148>
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d1bb      	bne.n	80034da <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe fec3 	bl	80022ec <HAL_RCC_GetSysClockFreq>
        break;
 8003566:	e007      	b.n	8003578 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800356c:	d1b5      	bne.n	80034da <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 800356e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003572:	e008      	b.n	8003586 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003574:	f7ff fa32 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003578:	b928      	cbnz	r0, 8003586 <UART_SetConfig+0x15a>
 800357a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800357c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800357e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8003582:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4848      	ldr	r0, [pc, #288]	; (80036a8 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800358c:	4283      	cmp	r3, r0
 800358e:	d8a4      	bhi.n	80034da <UART_SetConfig+0xae>
 8003590:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003594:	d8a1      	bhi.n	80034da <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003596:	0851      	lsrs	r1, r2, #1
 8003598:	2500      	movs	r5, #0
 800359a:	468c      	mov	ip, r1
 800359c:	f44f 7680 	mov.w	r6, #256	; 0x100
 80035a0:	4629      	mov	r1, r5
 80035a2:	fbe0 c106 	umlal	ip, r1, r0, r6
 80035a6:	462b      	mov	r3, r5
 80035a8:	4660      	mov	r0, ip
 80035aa:	f7fd fb4d 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <UART_SetConfig+0x280>)
 80035b0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d890      	bhi.n	80034da <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	60d8      	str	r0, [r3, #12]
 80035bc:	e7dd      	b.n	800357a <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 80035be:	483a      	ldr	r0, [pc, #232]	; (80036a8 <UART_SetConfig+0x27c>)
 80035c0:	e047      	b.n	8003652 <UART_SetConfig+0x226>
    switch (clocksource)
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d889      	bhi.n	80034da <UART_SetConfig+0xae>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x1a0>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	08003617 	.word	0x08003617
 80035d4:	08003641 	.word	0x08003641
 80035d8:	080034db 	.word	0x080034db
 80035dc:	0800361d 	.word	0x0800361d
 80035e0:	080034db 	.word	0x080034db
 80035e4:	080034db 	.word	0x080034db
 80035e8:	080034db 	.word	0x080034db
 80035ec:	080034eb 	.word	0x080034eb
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7ff f9f4 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d0c0      	beq.n	800357a <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f8:	6862      	ldr	r2, [r4, #4]
 80035fa:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80035fe:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003602:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003606:	f1a3 0110 	sub.w	r1, r3, #16
 800360a:	4291      	cmp	r1, r2
 800360c:	f63f af65 	bhi.w	80034da <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	60d3      	str	r3, [r2, #12]
 8003614:	e7b1      	b.n	800357a <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003616:	f7ff f9f3 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
        break;
 800361a:	e7eb      	b.n	80035f4 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 800361c:	f7fe fe66 	bl	80022ec <HAL_RCC_GetSysClockFreq>
        break;
 8003620:	e7e8      	b.n	80035f4 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003622:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003626:	d1f6      	bne.n	8003616 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff f9ea 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
        break;
 800362c:	e00f      	b.n	800364e <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003632:	d1f3      	bne.n	800361c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003634:	f7fe fe5a 	bl	80022ec <HAL_RCC_GetSysClockFreq>
        break;
 8003638:	e009      	b.n	800364e <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800363e:	d0be      	beq.n	80035be <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4819      	ldr	r0, [pc, #100]	; (80036a8 <UART_SetConfig+0x27c>)
 8003642:	e7d9      	b.n	80035f8 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003644:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003648:	d1d2      	bne.n	80035f0 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800364a:	f7ff f9c7 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800364e:	2800      	cmp	r0, #0
 8003650:	d093      	beq.n	800357a <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003652:	6862      	ldr	r2, [r4, #4]
 8003654:	0853      	lsrs	r3, r2, #1
 8003656:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800365a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003662:	f1a3 0110 	sub.w	r1, r3, #16
 8003666:	4291      	cmp	r1, r2
 8003668:	f63f af37 	bhi.w	80034da <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366c:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003670:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003672:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003674:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
 800367c:	e77d      	b.n	800357a <UART_SetConfig+0x14e>
 800367e:	bf00      	nop
 8003680:	efff69f3 	.word	0xefff69f3
 8003684:	40008000 	.word	0x40008000
 8003688:	40013800 	.word	0x40013800
 800368c:	40021000 	.word	0x40021000
 8003690:	080091ac 	.word	0x080091ac
 8003694:	40004400 	.word	0x40004400
 8003698:	080091af 	.word	0x080091af
 800369c:	40004800 	.word	0x40004800
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	40005000 	.word	0x40005000
 80036a8:	00f42400 	.word	0x00f42400
 80036ac:	000ffcff 	.word	0x000ffcff

080036b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036b2:	07da      	lsls	r2, r3, #31
{
 80036b4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036b6:	d506      	bpl.n	80036c6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b8:	6801      	ldr	r1, [r0, #0]
 80036ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80036bc:	684a      	ldr	r2, [r1, #4]
 80036be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036c2:	4322      	orrs	r2, r4
 80036c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036c6:	079c      	lsls	r4, r3, #30
 80036c8:	d506      	bpl.n	80036d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	6801      	ldr	r1, [r0, #0]
 80036cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80036ce:	684a      	ldr	r2, [r1, #4]
 80036d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036d4:	4322      	orrs	r2, r4
 80036d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d8:	0759      	lsls	r1, r3, #29
 80036da:	d506      	bpl.n	80036ea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036dc:	6801      	ldr	r1, [r0, #0]
 80036de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80036e0:	684a      	ldr	r2, [r1, #4]
 80036e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036e6:	4322      	orrs	r2, r4
 80036e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ea:	071a      	lsls	r2, r3, #28
 80036ec:	d506      	bpl.n	80036fc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ee:	6801      	ldr	r1, [r0, #0]
 80036f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80036f2:	684a      	ldr	r2, [r1, #4]
 80036f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f8:	4322      	orrs	r2, r4
 80036fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036fc:	06dc      	lsls	r4, r3, #27
 80036fe:	d506      	bpl.n	800370e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003700:	6801      	ldr	r1, [r0, #0]
 8003702:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003704:	688a      	ldr	r2, [r1, #8]
 8003706:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800370a:	4322      	orrs	r2, r4
 800370c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800370e:	0699      	lsls	r1, r3, #26
 8003710:	d506      	bpl.n	8003720 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003712:	6801      	ldr	r1, [r0, #0]
 8003714:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003716:	688a      	ldr	r2, [r1, #8]
 8003718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371c:	4322      	orrs	r2, r4
 800371e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003720:	065a      	lsls	r2, r3, #25
 8003722:	d50f      	bpl.n	8003744 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003724:	6801      	ldr	r1, [r0, #0]
 8003726:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003728:	684a      	ldr	r2, [r1, #4]
 800372a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800372e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003730:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003734:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003736:	d105      	bne.n	8003744 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003738:	684a      	ldr	r2, [r1, #4]
 800373a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800373c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003740:	4322      	orrs	r2, r4
 8003742:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	d506      	bpl.n	8003756 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003748:	6802      	ldr	r2, [r0, #0]
 800374a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800374c:	6853      	ldr	r3, [r2, #4]
 800374e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003752:	430b      	orrs	r3, r1
 8003754:	6053      	str	r3, [r2, #4]
}
 8003756:	bd10      	pop	{r4, pc}

08003758 <UART_WaitOnFlagUntilTimeout>:
{
 8003758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800375c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003760:	4604      	mov	r4, r0
 8003762:	460e      	mov	r6, r1
 8003764:	4615      	mov	r5, r2
 8003766:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	69d3      	ldr	r3, [r2, #28]
 800376c:	ea36 0303 	bics.w	r3, r6, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	42ab      	cmp	r3, r5
 8003778:	d001      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800377a:	2000      	movs	r0, #0
 800377c:	e025      	b.n	80037ca <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800377e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003782:	d0f2      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fd fff0 	bl	8001768 <HAL_GetTick>
 8003788:	1bc0      	subs	r0, r0, r7
 800378a:	4540      	cmp	r0, r8
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	d802      	bhi.n	8003796 <UART_WaitOnFlagUntilTimeout+0x3e>
 8003790:	f1b8 0f00 	cmp.w	r8, #0
 8003794:	d11b      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	e840 3200 	strex	r2, r3, [r0]
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d1f7      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	f100 0308 	add.w	r3, r0, #8
 80037aa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	f100 0108 	add.w	r1, r0, #8
 80037b6:	e841 3200 	strex	r2, r3, [r1]
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d1f3      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80037be:	2320      	movs	r3, #32
 80037c0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037c2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80037c4:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80037c8:	2003      	movs	r0, #3
}
 80037ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ce:	6803      	ldr	r3, [r0, #0]
 80037d0:	075a      	lsls	r2, r3, #29
 80037d2:	d5c9      	bpl.n	8003768 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d4:	69c3      	ldr	r3, [r0, #28]
 80037d6:	051b      	lsls	r3, r3, #20
 80037d8:	d5c6      	bpl.n	8003768 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037de:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	e840 3200 	strex	r2, r3, [r0]
 80037ec:	2a00      	cmp	r2, #0
 80037ee:	d1f7      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	f100 0308 	add.w	r3, r0, #8
 80037f4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	f100 0108 	add.w	r1, r0, #8
 8003800:	e841 3200 	strex	r2, r3, [r1]
 8003804:	2a00      	cmp	r2, #0
 8003806:	d1f3      	bne.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8003808:	2320      	movs	r3, #32
 800380a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800380c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8003812:	e7d7      	b.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>

08003814 <HAL_UART_Transmit>:
{
 8003814:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003818:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800381a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800381c:	2b20      	cmp	r3, #32
{
 800381e:	4604      	mov	r4, r0
 8003820:	460e      	mov	r6, r1
 8003822:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003824:	d14e      	bne.n	80038c4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8003826:	2900      	cmp	r1, #0
 8003828:	d04a      	beq.n	80038c0 <HAL_UART_Transmit+0xac>
 800382a:	2a00      	cmp	r2, #0
 800382c:	d048      	beq.n	80038c0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800382e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003832:	2b01      	cmp	r3, #1
 8003834:	d046      	beq.n	80038c4 <HAL_UART_Transmit+0xb0>
 8003836:	2301      	movs	r3, #1
 8003838:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003844:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003846:	f7fd ff8f 	bl	8001768 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 800384c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003854:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003856:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385a:	d103      	bne.n	8003864 <HAL_UART_Transmit+0x50>
 800385c:	6922      	ldr	r2, [r4, #16]
 800385e:	b90a      	cbnz	r2, 8003864 <HAL_UART_Transmit+0x50>
 8003860:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003862:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003864:	2200      	movs	r2, #0
 8003866:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800386a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003872:	b292      	uxth	r2, r2
 8003874:	b93a      	cbnz	r2, 8003886 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	2140      	movs	r1, #64	; 0x40
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff ff6d 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 800387e:	b950      	cbnz	r0, 8003896 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003880:	2320      	movs	r3, #32
 8003882:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003884:	e008      	b.n	8003898 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	2200      	movs	r2, #0
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	4620      	mov	r0, r4
 800388c:	9303      	str	r3, [sp, #12]
 800388e:	f7ff ff63 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003892:	9b03      	ldr	r3, [sp, #12]
 8003894:	b118      	cbz	r0, 800389e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8003896:	2003      	movs	r0, #3
}
 8003898:	b004      	add	sp, #16
 800389a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80038a0:	b95e      	cbnz	r6, 80038ba <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80038a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038aa:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80038ac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80038b0:	3a01      	subs	r2, #1
 80038b2:	b292      	uxth	r2, r2
 80038b4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80038b8:	e7d7      	b.n	800386a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ba:	f816 2b01 	ldrb.w	r2, [r6], #1
 80038be:	e7f4      	b.n	80038aa <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80038c0:	2001      	movs	r0, #1
 80038c2:	e7e9      	b.n	8003898 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80038c4:	2002      	movs	r0, #2
 80038c6:	e7e7      	b.n	8003898 <HAL_UART_Transmit+0x84>

080038c8 <UART_CheckIdleState>:
{
 80038c8:	b530      	push	{r4, r5, lr}
 80038ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	2500      	movs	r5, #0
{
 80038ce:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80038d4:	f7fd ff48 	bl	8001768 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80038de:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038e0:	d415      	bmi.n	800390e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	0752      	lsls	r2, r2, #29
 80038e8:	d509      	bpl.n	80038fe <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ea:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80038ee:	9200      	str	r2, [sp, #0]
 80038f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038f4:	2200      	movs	r2, #0
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff ff2e 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80038fc:	b9a0      	cbnz	r0, 8003928 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003902:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003904:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003908:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800390c:	e00d      	b.n	800392a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800390e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003912:	9200      	str	r2, [sp, #0]
 8003914:	9003      	str	r0, [sp, #12]
 8003916:	462a      	mov	r2, r5
 8003918:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff ff1b 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	2800      	cmp	r0, #0
 8003926:	d0dc      	beq.n	80038e2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003928:	2003      	movs	r0, #3
}
 800392a:	b005      	add	sp, #20
 800392c:	bd30      	pop	{r4, r5, pc}

0800392e <HAL_UART_Init>:
{
 800392e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003930:	4604      	mov	r4, r0
 8003932:	b340      	cbz	r0, 8003986 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003934:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003936:	b91b      	cbnz	r3, 8003940 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003938:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800393c:	f7fd fe12 	bl	8001564 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003940:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003942:	2324      	movs	r3, #36	; 0x24
 8003944:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff fd6c 	bl	800342c <UART_SetConfig>
 8003954:	2801      	cmp	r0, #1
 8003956:	d016      	beq.n	8003986 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800395a:	b113      	cbz	r3, 8003962 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff fea7 	bl	80036b0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003972:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800397a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800397c:	601a      	str	r2, [r3, #0]
}
 800397e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003982:	f7ff bfa1 	b.w	80038c8 <UART_CheckIdleState>
}
 8003986:	2001      	movs	r0, #1
 8003988:	bd10      	pop	{r4, pc}
	...

0800398c <UART_Start_Receive_IT>:
{
 800398c:	b510      	push	{r4, lr}
  huart->RxXferSize  = Size;
 800398e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8003992:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  UART_MASK_COMPUTATION(huart);
 8003996:	6882      	ldr	r2, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8003998:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 800399a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800399c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  huart->RxISR       = NULL;
 80039a0:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80039a2:	d132      	bne.n	8003a0a <UART_Start_Receive_IT+0x7e>
 80039a4:	6903      	ldr	r3, [r0, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80039ac:	bf18      	it	ne
 80039ae:	23ff      	movne	r3, #255	; 0xff
 80039b0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ba:	2322      	movs	r3, #34	; 0x22
 80039bc:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	f102 0308 	add.w	r3, r2, #8
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	3208      	adds	r2, #8
 80039ce:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80039d2:	6802      	ldr	r2, [r0, #0]
 80039d4:	2900      	cmp	r1, #0
 80039d6:	d1f2      	bne.n	80039be <UART_Start_Receive_IT+0x32>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	6883      	ldr	r3, [r0, #8]
 80039da:	6901      	ldr	r1, [r0, #16]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d123      	bne.n	8003a2a <UART_Start_Receive_IT+0x9e>
    huart->RxISR = UART_RxISR_8BIT;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <UART_Start_Receive_IT+0xb4>)
 80039e4:	4c17      	ldr	r4, [pc, #92]	; (8003a44 <UART_Start_Receive_IT+0xb8>)
 80039e6:	2900      	cmp	r1, #0
 80039e8:	bf18      	it	ne
 80039ea:	4623      	movne	r3, r4
 80039ec:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80039ee:	2300      	movs	r3, #0
 80039f0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039f4:	b1d9      	cbz	r1, 8003a2e <UART_Start_Receive_IT+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	e842 3100 	strex	r1, r3, [r2]
 8003a02:	2900      	cmp	r1, #0
 8003a04:	d1f7      	bne.n	80039f6 <UART_Start_Receive_IT+0x6a>
}
 8003a06:	2000      	movs	r0, #0
 8003a08:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003a0a:	b92a      	cbnz	r2, 8003a18 <UART_Start_Receive_IT+0x8c>
 8003a0c:	6903      	ldr	r3, [r0, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	237f      	movne	r3, #127	; 0x7f
 8003a14:	23ff      	moveq	r3, #255	; 0xff
 8003a16:	e7cb      	b.n	80039b0 <UART_Start_Receive_IT+0x24>
 8003a18:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003a1c:	d1c8      	bne.n	80039b0 <UART_Start_Receive_IT+0x24>
 8003a1e:	6903      	ldr	r3, [r0, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	237f      	moveq	r3, #127	; 0x7f
 8003a26:	233f      	movne	r3, #63	; 0x3f
 8003a28:	e7c2      	b.n	80039b0 <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <UART_Start_Receive_IT+0xb8>)
 8003a2c:	e7de      	b.n	80039ec <UART_Start_Receive_IT+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a32:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	e842 3100 	strex	r1, r3, [r2]
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	d1f7      	bne.n	8003a2e <UART_Start_Receive_IT+0xa2>
 8003a3e:	e7e2      	b.n	8003a06 <UART_Start_Receive_IT+0x7a>
 8003a40:	08003391 	.word	0x08003391
 8003a44:	080032f1 	.word	0x080032f1

08003a48 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a48:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003a4a:	2b20      	cmp	r3, #32
{
 8003a4c:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4e:	d11f      	bne.n	8003a90 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8003a50:	b1d9      	cbz	r1, 8003a8a <HAL_UART_Receive_IT+0x42>
 8003a52:	b1d2      	cbz	r2, 8003a8a <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8003a54:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d019      	beq.n	8003a90 <HAL_UART_Receive_IT+0x48>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a64:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_UART_Receive_IT+0x4c>)
 8003a6a:	429c      	cmp	r4, r3
 8003a6c:	d00a      	beq.n	8003a84 <HAL_UART_Receive_IT+0x3c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	d507      	bpl.n	8003a84 <HAL_UART_Receive_IT+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	e844 3500 	strex	r5, r3, [r4]
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	d1f7      	bne.n	8003a74 <HAL_UART_Receive_IT+0x2c>
}
 8003a84:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a86:	f7ff bf81 	b.w	800398c <UART_Start_Receive_IT>
      return HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
}
 8003a8c:	bc30      	pop	{r4, r5}
 8003a8e:	4770      	bx	lr
    return HAL_BUSY;
 8003a90:	2002      	movs	r0, #2
 8003a92:	e7fb      	b.n	8003a8c <HAL_UART_Receive_IT+0x44>
 8003a94:	40008000 	.word	0x40008000

08003a98 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a98:	4770      	bx	lr
	...

08003a9c <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <ai_mnetwork_handle+0x18>)
 8003a9e:	b120      	cbz	r0, 8003aaa <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003aa0:	4298      	cmp	r0, r3
 8003aa2:	bf0c      	ite	eq
 8003aa4:	4618      	moveq	r0, r3
 8003aa6:	2000      	movne	r0, #0
 8003aa8:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003aaa:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	bf08      	it	eq
 8003ab0:	4618      	moveq	r0, r3
}
 8003ab2:	4770      	bx	lr
 8003ab4:	200009e4 	.word	0x200009e4

08003ab8 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003ab8:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003aba:	4604      	mov	r4, r0
 8003abc:	b160      	cbz	r0, 8003ad8 <ai_mnetwork_is_valid.constprop.0+0x20>
 8003abe:	f7fc fbd7 	bl	8000270 <strlen>
 8003ac2:	2807      	cmp	r0, #7
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	d107      	bne.n	8003ad8 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003ac8:	4804      	ldr	r0, [pc, #16]	; (8003adc <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003aca:	4621      	mov	r1, r4
 8003acc:	f003 fb6c 	bl	80071a8 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003ad0:	fab0 f080 	clz	r0, r0
 8003ad4:	0940      	lsrs	r0, r0, #5
}
 8003ad6:	bd10      	pop	{r4, pc}
    return false;
 8003ad8:	2000      	movs	r0, #0
 8003ada:	e7fc      	b.n	8003ad6 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003adc:	080091bc 	.word	0x080091bc

08003ae0 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003ae4:	f7ff ffe8 	bl	8003ab8 <ai_mnetwork_is_valid.constprop.0>
 8003ae8:	b920      	cbnz	r0, 8003af4 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003aea:	2c00      	cmp	r4, #0
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <ai_mnetwork_find+0x18>)
 8003aee:	bf18      	it	ne
 8003af0:	2000      	movne	r0, #0
}
 8003af2:	bd10      	pop	{r4, pc}
            return entry->name;
 8003af4:	4800      	ldr	r0, [pc, #0]	; (8003af8 <ai_mnetwork_find+0x18>)
 8003af6:	e7fc      	b.n	8003af2 <ai_mnetwork_find+0x12>
 8003af8:	080091bc 	.word	0x080091bc

08003afc <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003afe:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003b00:	2000      	movs	r0, #0
{
 8003b02:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003b04:	f7ff ffca 	bl	8003a9c <ai_mnetwork_handle>
{
 8003b08:	460d      	mov	r5, r1

    if (!inst) {
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	b1e0      	cbz	r0, 8003b48 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f7ff ffd2 	bl	8003ab8 <ai_mnetwork_is_valid.constprop.0>
 8003b14:	9901      	ldr	r1, [sp, #4]
 8003b16:	b910      	cbnz	r0, 8003b1e <ai_mnetwork_create+0x22>
 8003b18:	2214      	movs	r2, #20
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	e00d      	b.n	8003b3a <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f000 f886 	bl	8003c30 <ai_network_create>
 8003b24:	b2c2      	uxtb	r2, r0
 8003b26:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003b2a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003b2e:	d104      	bne.n	8003b3a <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003b30:	4906      	ldr	r1, [pc, #24]	; (8003b4c <ai_mnetwork_create+0x50>)
 8003b32:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003b34:	6829      	ldr	r1, [r5, #0]
 8003b36:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003b38:	602c      	str	r4, [r5, #0]
        return err;
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f362 0007 	bfi	r0, r2, #0, #8
 8003b40:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003b44:	b002      	add	sp, #8
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	2231      	movs	r2, #49	; 0x31
 8003b4a:	e7e6      	b.n	8003b1a <ai_mnetwork_create+0x1e>
 8003b4c:	080091c4 	.word	0x080091c4

08003b50 <ai_mnetwork_init>:
        return err;
}

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003b50:	b530      	push	{r4, r5, lr}
 8003b52:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003b54:	f7ff ffa2 	bl	8003a9c <ai_mnetwork_handle>
    if (inn) {
 8003b58:	4604      	mov	r4, r0
 8003b5a:	b168      	cbz	r0, 8003b78 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003b5c:	6803      	ldr	r3, [r0, #0]
 8003b5e:	4668      	mov	r0, sp
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003b64:	2500      	movs	r5, #0
 8003b66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003b6a:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003b6c:	42aa      	cmp	r2, r5
 8003b6e:	dc05      	bgt.n	8003b7c <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	6860      	ldr	r0, [r4, #4]
 8003b74:	4669      	mov	r1, sp
 8003b76:	4798      	blx	r3
    }
    else
        return false;
}
 8003b78:	b00f      	add	sp, #60	; 0x3c
 8003b7a:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	4629      	mov	r1, r5
 8003b80:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8003b84:	a803      	add	r0, sp, #12
 8003b86:	f000 f98b 	bl	8003ea0 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003b8a:	3501      	adds	r5, #1
 8003b8c:	e7eb      	b.n	8003b66 <ai_mnetwork_init+0x16>
	...

08003b90 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	b0a2      	sub	sp, #136	; 0x88
 8003b94:	4606      	mov	r6, r0
 8003b96:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8003b98:	f000 fb7c 	bl	8004294 <ai_platform_context_acquire>
 8003b9c:	4604      	mov	r4, r0

  if (report && net_ctx)
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	d035      	beq.n	8003c0e <ai_network_get_report+0x7e>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d030      	beq.n	8003c08 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 8003ba6:	2278      	movs	r2, #120	; 0x78
 8003ba8:	2100      	movs	r1, #0
 8003baa:	a804      	add	r0, sp, #16
 8003bac:	f003 faf4 	bl	8007198 <memset>
 8003bb0:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <ai_network_get_report+0x84>)
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <ai_network_get_report+0x88>)
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <ai_network_get_report+0x8c>)
 8003bba:	9302      	str	r3, [sp, #8]
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <ai_network_get_report+0x90>)
 8003bbe:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8003bc0:	f000 fa4c 	bl	800405c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8003bc4:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003bc6:	f000 fa81 	bl	80040cc <ai_platform_runtime_get_version>
    ai_network_report r = {
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <ai_network_get_report+0x94>)
 8003bcc:	9306      	str	r3, [sp, #24]
 8003bce:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003bd2:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003bd6:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8003bd8:	f000 fac4 	bl	8004164 <ai_platform_api_get_version>
 8003bdc:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003bde:	f000 fb0d 	bl	80041fc <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8003be2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8003be6:	2300      	movs	r3, #0
 8003be8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003bec:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <ai_network_get_report+0x98>)
 8003bf0:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003bf2:	4669      	mov	r1, sp
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f000 fc01 	bl	80043fc <ai_platform_api_get_network_report>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	b120      	cbz	r0, 8003c08 <ai_network_get_report+0x78>

    *report = r;
 8003bfe:	2288      	movs	r2, #136	; 0x88
 8003c00:	4669      	mov	r1, sp
 8003c02:	4628      	mov	r0, r5
 8003c04:	f003 fb68 	bl	80072d8 <memcpy>
    return true;
  }
  return false;
}
 8003c08:	4620      	mov	r0, r4
 8003c0a:	b022      	add	sp, #136	; 0x88
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8003c0e:	462c      	mov	r4, r5
 8003c10:	e7fa      	b.n	8003c08 <ai_network_get_report+0x78>
 8003c12:	bf00      	nop
 8003c14:	080091bc 	.word	0x080091bc
 8003c18:	080091f0 	.word	0x080091f0
 8003c1c:	08009211 	.word	0x08009211
 8003c20:	0800922a 	.word	0x0800922a
 8003c24:	0800913a 	.word	0x0800913a
 8003c28:	a1facade 	.word	0xa1facade

08003c2c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003c2c:	f000 bb72 	b.w	8004314 <ai_platform_network_get_error>

08003c30 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003c30:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003c32:	2305      	movs	r3, #5
 8003c34:	2200      	movs	r2, #0
 8003c36:	e9cd 3200 	strd	r3, r2, [sp]
 8003c3a:	4a03      	ldr	r2, [pc, #12]	; (8003c48 <ai_network_create+0x18>)
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f000 fe9b 	bl	8004978 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003c42:	b003      	add	sp, #12
 8003c44:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c48:	20000488 	.word	0x20000488

08003c4c <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8003c4c:	f000 bf6a 	b.w	8004b24 <ai_platform_network_destroy>

08003c50 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	4607      	mov	r7, r0
 8003c56:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003c58:	f000 ffd0 	bl	8004bfc <ai_platform_network_init>
  if (!net_ctx) return false;
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d050      	beq.n	8003d04 <ai_network_init+0xb4>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8003c62:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003d44 <ai_network_init+0xf4>
 8003c66:	4632      	mov	r2, r6
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f000 f92c 	bl	8003ec8 <ai_platform_get_weights_map>
 8003c70:	4605      	mov	r5, r0
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d048      	beq.n	8003d08 <ai_network_init+0xb8>
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c76:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <ai_network_init+0xd0>)
 8003c78:	6813      	ldr	r3, [r2, #0]
 8003c7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c7e:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8003c80:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8003c84:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <ai_network_init+0xd4>)
 8003c8a:	6811      	ldr	r1, [r2, #0]
 8003c8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003c90:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 8003c92:	f503 6158 	add.w	r1, r3, #3456	; 0xd80
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 8003c96:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <ai_network_init+0xd8>)
 8003c9c:	6811      	ldr	r1, [r2, #0]
 8003c9e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003ca2:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 8003ca4:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8003ca8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <ai_network_init+0xdc>)
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 8003cae:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cb2:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 8003cb4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003cb8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003cbc:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8003cbe:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003d48 <ai_network_init+0xf8>
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f000 f952 	bl	8003f70 <ai_platform_get_activations_map>
 8003ccc:	4606      	mov	r6, r0
 8003cce:	b308      	cbz	r0, 8003d14 <ai_network_init+0xc4>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <ai_network_init+0xe0>)
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003cd6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <ai_network_init+0xe4>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003cdc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8003ce0:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <ai_network_init+0xe8>)
 8003ce2:	f103 010c 	add.w	r1, r3, #12
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8003ce6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003cea:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <ai_network_init+0xec>)
 8003cec:	336c      	adds	r3, #108	; 0x6c
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003cee:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003cf2:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <ai_network_init+0xf0>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003cf4:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	f001 f86d 	bl	8004dd8 <ai_platform_network_post_init>
 8003cfe:	4030      	ands	r0, r6
 8003d00:	4005      	ands	r5, r0
 8003d02:	b2e8      	uxtb	r0, r5

  return ok;
}
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003d08:	2212      	movs	r2, #18
 8003d0a:	2130      	movs	r1, #48	; 0x30
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 fb6f 	bl	80043f0 <ai_platform_network_set_error>
  return false;
 8003d12:	e7d4      	b.n	8003cbe <ai_network_init+0x6e>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003d14:	2213      	movs	r2, #19
 8003d16:	2130      	movs	r1, #48	; 0x30
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 fb69 	bl	80043f0 <ai_platform_network_set_error>
  return false;
 8003d1e:	e7eb      	b.n	8003cf8 <ai_network_init+0xa8>
 8003d20:	2000042c 	.word	0x2000042c
 8003d24:	200003b8 	.word	0x200003b8
 8003d28:	20000340 	.word	0x20000340
 8003d2c:	200002cc 	.word	0x200002cc
 8003d30:	200004f0 	.word	0x200004f0
 8003d34:	20000314 	.word	0x20000314
 8003d38:	2000038c 	.word	0x2000038c
 8003d3c:	20000400 	.word	0x20000400
 8003d40:	20000478 	.word	0x20000478
 8003d44:	20000aa8 	.word	0x20000aa8
 8003d48:	20000aa4 	.word	0x20000aa4

08003d4c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003d4c:	f001 b8cc 	b.w	8004ee8 <ai_platform_network_process>

08003d50 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8003d50:	2200      	movs	r2, #0
 8003d52:	f001 b8c9 	b.w	8004ee8 <ai_platform_network_process>
	...

08003d58 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8003d58:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8003d5a:	4603      	mov	r3, r0
{
 8003d5c:	b085      	sub	sp, #20
  if (!params) return false;
 8003d5e:	b170      	cbz	r0, 8003d7e <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003d60:	4c08      	ldr	r4, [pc, #32]	; (8003d84 <ai_network_data_params_get+0x2c>)
 8003d62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d66:	466a      	mov	r2, sp
 8003d68:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003d6c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003d70:	ad02      	add	r5, sp, #8
 8003d72:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003d76:	4629      	mov	r1, r5
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f94d 	bl	8004018 <ai_platform_bind_network_params>
}
 8003d7e:	b005      	add	sp, #20
 8003d80:	bd30      	pop	{r4, r5, pc}
 8003d82:	bf00      	nop
 8003d84:	080090a8 	.word	0x080090a8

08003d88 <arm_mat_init_f32>:
 8003d88:	8001      	strh	r1, [r0, #0]
 8003d8a:	8042      	strh	r2, [r0, #2]
 8003d8c:	6043      	str	r3, [r0, #4]
 8003d8e:	4770      	bx	lr

08003d90 <arm_cos_f32>:
 8003d90:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003e18 <arm_cos_f32+0x88>
 8003d94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003d98:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8003d9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003da0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003dac:	d504      	bpl.n	8003db8 <arm_cos_f32+0x28>
 8003dae:	ee17 3a90 	vmov	r3, s15
 8003db2:	3b01      	subs	r3, #1
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dbc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003e1c <arm_cos_f32+0x8c>
 8003dc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003dc4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003dc8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003dcc:	ee17 3a90 	vmov	r3, s15
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd6:	d21a      	bcs.n	8003e0e <arm_cos_f32+0x7e>
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <arm_cos_f32+0x90>)
 8003de8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003dec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003df0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003df4:	ed93 7a00 	vldr	s14, [r3]
 8003df8:	edd2 6a00 	vldr	s13, [r2]
 8003dfc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003e00:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e08:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003e0c:	4770      	bx	lr
 8003e0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003e12:	2101      	movs	r1, #1
 8003e14:	2300      	movs	r3, #0
 8003e16:	e7e6      	b.n	8003de6 <arm_cos_f32+0x56>
 8003e18:	3e22f983 	.word	0x3e22f983
 8003e1c:	44000000 	.word	0x44000000
 8003e20:	0800a1f0 	.word	0x0800a1f0

08003e24 <ai_buffer_get_size>:
 8003e24:	b378      	cbz	r0, 8003e86 <ai_buffer_get_size+0x62>
 8003e26:	b410      	push	{r4}
 8003e28:	6803      	ldr	r3, [r0, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <ai_buffer_get_size+0x64>)
 8003e2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d01e      	beq.n	8003e76 <ai_buffer_get_size+0x52>
 8003e38:	6984      	ldr	r4, [r0, #24]
 8003e3a:	6862      	ldr	r2, [r4, #4]
 8003e3c:	7d03      	ldrb	r3, [r0, #20]
 8003e3e:	6941      	ldr	r1, [r0, #20]
 8003e40:	f1a3 0301 	sub.w	r3, r3, #1
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003e4e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8003e52:	da0b      	bge.n	8003e6c <ai_buffer_get_size+0x48>
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d102      	bne.n	8003e5e <ai_buffer_get_size+0x3a>
 8003e58:	2802      	cmp	r0, #2
 8003e5a:	d007      	beq.n	8003e6c <ai_buffer_get_size+0x48>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003e62:	3301      	adds	r3, #1
 8003e64:	4298      	cmp	r0, r3
 8003e66:	fb01 f202 	mul.w	r2, r1, r2
 8003e6a:	d1f3      	bne.n	8003e54 <ai_buffer_get_size+0x30>
 8003e6c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d0de      	beq.n	8003e38 <ai_buffer_get_size+0x14>
 8003e7a:	6984      	ldr	r4, [r0, #24]
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	331f      	adds	r3, #31
 8003e80:	f023 021f 	bic.w	r2, r3, #31
 8003e84:	e7da      	b.n	8003e3c <ai_buffer_get_size+0x18>
 8003e86:	4770      	bx	lr
 8003e88:	000400c0 	.word	0x000400c0

08003e8c <ai_buffer_array_sane>:
 8003e8c:	b138      	cbz	r0, 8003e9e <ai_buffer_array_sane+0x12>
 8003e8e:	6843      	ldr	r3, [r0, #4]
 8003e90:	b123      	cbz	r3, 8003e9c <ai_buffer_array_sane+0x10>
 8003e92:	8840      	ldrh	r0, [r0, #2]
 8003e94:	3800      	subs	r0, #0
 8003e96:	bf18      	it	ne
 8003e98:	2001      	movne	r0, #1
 8003e9a:	4770      	bx	lr
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	4770      	bx	lr

08003ea0 <ai_buffer_array_item_set_address>:
 8003ea0:	b150      	cbz	r0, 8003eb8 <ai_buffer_array_item_set_address+0x18>
 8003ea2:	6843      	ldr	r3, [r0, #4]
 8003ea4:	b14b      	cbz	r3, 8003eba <ai_buffer_array_item_set_address+0x1a>
 8003ea6:	8840      	ldrh	r0, [r0, #2]
 8003ea8:	b900      	cbnz	r0, 8003eac <ai_buffer_array_item_set_address+0xc>
 8003eaa:	4770      	bx	lr
 8003eac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003eb0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	604a      	str	r2, [r1, #4]
 8003eb8:	4770      	bx	lr
 8003eba:	4618      	mov	r0, r3
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop

08003ec0 <_ai_platform_acquire_crc>:
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	4770      	bx	lr

08003ec4 <_ai_platform_release_crc>:
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop

08003ec8 <ai_platform_get_weights_map>:
 8003ec8:	2a00      	cmp	r2, #0
 8003eca:	d037      	beq.n	8003f3c <ai_platform_get_weights_map+0x74>
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	4604      	mov	r4, r0
 8003ed0:	b1a0      	cbz	r0, 8003efc <ai_platform_get_weights_map+0x34>
 8003ed2:	460f      	mov	r7, r1
 8003ed4:	b191      	cbz	r1, 8003efc <ai_platform_get_weights_map+0x34>
 8003ed6:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <ai_platform_get_weights_map+0xa4>)
 8003ed8:	6810      	ldr	r0, [r2, #0]
 8003eda:	4298      	cmp	r0, r3
 8003edc:	4615      	mov	r5, r2
 8003ede:	d00f      	beq.n	8003f00 <ai_platform_get_weights_map+0x38>
 8003ee0:	6855      	ldr	r5, [r2, #4]
 8003ee2:	b15d      	cbz	r5, 8003efc <ai_platform_get_weights_map+0x34>
 8003ee4:	682e      	ldr	r6, [r5, #0]
 8003ee6:	429e      	cmp	r6, r3
 8003ee8:	d02a      	beq.n	8003f40 <ai_platform_get_weights_map+0x78>
 8003eea:	f1a1 0001 	sub.w	r0, r1, #1
 8003eee:	6025      	str	r5, [r4, #0]
 8003ef0:	fab0 f080 	clz	r0, r0
 8003ef4:	0940      	lsrs	r0, r0, #5
 8003ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef8:	42a7      	cmp	r7, r4
 8003efa:	d034      	beq.n	8003f66 <ai_platform_get_weights_map+0x9e>
 8003efc:	2000      	movs	r0, #0
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f00:	1d10      	adds	r0, r2, #4
 8003f02:	f7ff ffc3 	bl	8003e8c <ai_buffer_array_sane>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d0f8      	beq.n	8003efc <ai_platform_get_weights_map+0x34>
 8003f0a:	88eb      	ldrh	r3, [r5, #6]
 8003f0c:	429f      	cmp	r7, r3
 8003f0e:	d1f5      	bne.n	8003efc <ai_platform_get_weights_map+0x34>
 8003f10:	f04f 0e00 	mov.w	lr, #0
 8003f14:	1f23      	subs	r3, r4, #4
 8003f16:	4670      	mov	r0, lr
 8003f18:	68aa      	ldr	r2, [r5, #8]
 8003f1a:	eb02 0c0e 	add.w	ip, r2, lr
 8003f1e:	f10e 0e1c 	add.w	lr, lr, #28
 8003f22:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003f26:	b124      	cbz	r4, 8003f32 <ai_platform_get_weights_map+0x6a>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	4287      	cmp	r7, r0
 8003f2c:	f843 4f04 	str.w	r4, [r3, #4]!
 8003f30:	d1f2      	bne.n	8003f18 <ai_platform_get_weights_map+0x50>
 8003f32:	1a38      	subs	r0, r7, r0
 8003f34:	fab0 f080 	clz	r0, r0
 8003f38:	0940      	lsrs	r0, r0, #5
 8003f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4770      	bx	lr
 8003f40:	1f23      	subs	r3, r4, #4
 8003f42:	4628      	mov	r0, r5
 8003f44:	2400      	movs	r4, #0
 8003f46:	e000      	b.n	8003f4a <ai_platform_get_weights_map+0x82>
 8003f48:	4614      	mov	r4, r2
 8003f4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003f4e:	42b2      	cmp	r2, r6
 8003f50:	d0d2      	beq.n	8003ef8 <ai_platform_get_weights_map+0x30>
 8003f52:	f843 2f04 	str.w	r2, [r3, #4]!
 8003f56:	1c62      	adds	r2, r4, #1
 8003f58:	4297      	cmp	r7, r2
 8003f5a:	d1f5      	bne.n	8003f48 <ai_platform_get_weights_map+0x80>
 8003f5c:	3402      	adds	r4, #2
 8003f5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003f62:	42b3      	cmp	r3, r6
 8003f64:	d1ca      	bne.n	8003efc <ai_platform_get_weights_map+0x34>
 8003f66:	2001      	movs	r0, #1
 8003f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	a1facade 	.word	0xa1facade

08003f70 <ai_platform_get_activations_map>:
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d038      	beq.n	8003fe6 <ai_platform_get_activations_map+0x76>
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	b1a0      	cbz	r0, 8003fa4 <ai_platform_get_activations_map+0x34>
 8003f7a:	460f      	mov	r7, r1
 8003f7c:	b191      	cbz	r1, 8003fa4 <ai_platform_get_activations_map+0x34>
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <ai_platform_get_activations_map+0xa4>)
 8003f80:	6810      	ldr	r0, [r2, #0]
 8003f82:	4298      	cmp	r0, r3
 8003f84:	4615      	mov	r5, r2
 8003f86:	d00f      	beq.n	8003fa8 <ai_platform_get_activations_map+0x38>
 8003f88:	6a15      	ldr	r5, [r2, #32]
 8003f8a:	b15d      	cbz	r5, 8003fa4 <ai_platform_get_activations_map+0x34>
 8003f8c:	682e      	ldr	r6, [r5, #0]
 8003f8e:	429e      	cmp	r6, r3
 8003f90:	d02b      	beq.n	8003fea <ai_platform_get_activations_map+0x7a>
 8003f92:	f1a1 0001 	sub.w	r0, r1, #1
 8003f96:	6025      	str	r5, [r4, #0]
 8003f98:	fab0 f080 	clz	r0, r0
 8003f9c:	0940      	lsrs	r0, r0, #5
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	42a7      	cmp	r7, r4
 8003fa2:	d035      	beq.n	8004010 <ai_platform_get_activations_map+0xa0>
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa8:	f102 000c 	add.w	r0, r2, #12
 8003fac:	f7ff ff6e 	bl	8003e8c <ai_buffer_array_sane>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d0f7      	beq.n	8003fa4 <ai_platform_get_activations_map+0x34>
 8003fb4:	89eb      	ldrh	r3, [r5, #14]
 8003fb6:	429f      	cmp	r7, r3
 8003fb8:	d1f4      	bne.n	8003fa4 <ai_platform_get_activations_map+0x34>
 8003fba:	f04f 0e00 	mov.w	lr, #0
 8003fbe:	1f23      	subs	r3, r4, #4
 8003fc0:	4670      	mov	r0, lr
 8003fc2:	692a      	ldr	r2, [r5, #16]
 8003fc4:	eb02 0c0e 	add.w	ip, r2, lr
 8003fc8:	f10e 0e1c 	add.w	lr, lr, #28
 8003fcc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003fd0:	b124      	cbz	r4, 8003fdc <ai_platform_get_activations_map+0x6c>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	4287      	cmp	r7, r0
 8003fd6:	f843 4f04 	str.w	r4, [r3, #4]!
 8003fda:	d1f2      	bne.n	8003fc2 <ai_platform_get_activations_map+0x52>
 8003fdc:	1a38      	subs	r0, r7, r0
 8003fde:	fab0 f080 	clz	r0, r0
 8003fe2:	0940      	lsrs	r0, r0, #5
 8003fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4770      	bx	lr
 8003fea:	1f23      	subs	r3, r4, #4
 8003fec:	4628      	mov	r0, r5
 8003fee:	2400      	movs	r4, #0
 8003ff0:	e000      	b.n	8003ff4 <ai_platform_get_activations_map+0x84>
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003ff8:	42b2      	cmp	r2, r6
 8003ffa:	d0d1      	beq.n	8003fa0 <ai_platform_get_activations_map+0x30>
 8003ffc:	f843 2f04 	str.w	r2, [r3, #4]!
 8004000:	1c62      	adds	r2, r4, #1
 8004002:	4297      	cmp	r7, r2
 8004004:	d1f5      	bne.n	8003ff2 <ai_platform_get_activations_map+0x82>
 8004006:	3402      	adds	r4, #2
 8004008:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800400c:	42b3      	cmp	r3, r6
 800400e:	d1c9      	bne.n	8003fa4 <ai_platform_get_activations_map+0x34>
 8004010:	2001      	movs	r0, #1
 8004012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004014:	a1facade 	.word	0xa1facade

08004018 <ai_platform_bind_network_params>:
 8004018:	b1a0      	cbz	r0, 8004044 <ai_platform_bind_network_params+0x2c>
 800401a:	b1b1      	cbz	r1, 800404a <ai_platform_bind_network_params+0x32>
 800401c:	b1c2      	cbz	r2, 8004050 <ai_platform_bind_network_params+0x38>
 800401e:	b410      	push	{r4}
 8004020:	4603      	mov	r3, r0
 8004022:	4c0d      	ldr	r4, [pc, #52]	; (8004058 <ai_platform_bind_network_params+0x40>)
 8004024:	f843 4b04 	str.w	r4, [r3], #4
 8004028:	f100 0c0c 	add.w	ip, r0, #12
 800402c:	c903      	ldmia	r1, {r0, r1}
 800402e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004036:	e88c 0003 	stmia.w	ip, {r0, r1}
 800403a:	2301      	movs	r3, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	4603      	mov	r3, r0
 8004046:	4618      	mov	r0, r3
 8004048:	4770      	bx	lr
 800404a:	460b      	mov	r3, r1
 800404c:	4618      	mov	r0, r3
 800404e:	4770      	bx	lr
 8004050:	4613      	mov	r3, r2
 8004052:	4618      	mov	r0, r3
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	a1facade 	.word	0xa1facade

0800405c <ai_platform_runtime_get_revision>:
 800405c:	b508      	push	{r3, lr}
 800405e:	f7ff ff2f 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <ai_platform_runtime_get_revision+0x58>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d010      	beq.n	8004092 <ai_platform_runtime_get_revision+0x36>
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <ai_platform_runtime_get_revision+0x5c>)
 8004072:	2301      	movs	r3, #1
 8004074:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004078:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1fb      	bne.n	8004078 <ai_platform_runtime_get_revision+0x1c>
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <ai_platform_runtime_get_revision+0x60>)
 8004082:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004086:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <ai_platform_runtime_get_revision+0x64>)
 800408c:	429a      	cmp	r2, r3
 800408e:	d00c      	beq.n	80040aa <ai_platform_runtime_get_revision+0x4e>
 8004090:	e7fe      	b.n	8004090 <ai_platform_runtime_get_revision+0x34>
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <ai_platform_runtime_get_revision+0x68>)
 8004094:	2301      	movs	r3, #1
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	6893      	ldr	r3, [r2, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1fc      	bne.n	8004098 <ai_platform_runtime_get_revision+0x3c>
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <ai_platform_runtime_get_revision+0x60>)
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <ai_platform_runtime_get_revision+0x64>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d103      	bne.n	80040b2 <ai_platform_runtime_get_revision+0x56>
 80040aa:	f7ff ff0b 	bl	8003ec4 <_ai_platform_release_crc>
 80040ae:	4806      	ldr	r0, [pc, #24]	; (80040c8 <ai_platform_runtime_get_revision+0x6c>)
 80040b0:	bd08      	pop	{r3, pc}
 80040b2:	e7fe      	b.n	80040b2 <ai_platform_runtime_get_revision+0x56>
 80040b4:	e0042000 	.word	0xe0042000
 80040b8:	58024000 	.word	0x58024000
 80040bc:	f407a5c2 	.word	0xf407a5c2
 80040c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80040c4:	40023000 	.word	0x40023000
 80040c8:	0800a9f4 	.word	0x0800a9f4

080040cc <ai_platform_runtime_get_version>:
 80040cc:	b500      	push	{lr}
 80040ce:	b083      	sub	sp, #12
 80040d0:	f7ff fef6 	bl	8003ec0 <_ai_platform_acquire_crc>
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <ai_platform_runtime_get_version+0x80>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e0:	d010      	beq.n	8004104 <ai_platform_runtime_get_version+0x38>
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <ai_platform_runtime_get_version+0x84>)
 80040e4:	2301      	movs	r3, #1
 80040e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80040ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1fb      	bne.n	80040ea <ai_platform_runtime_get_version+0x1e>
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <ai_platform_runtime_get_version+0x88>)
 80040f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80040f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <ai_platform_runtime_get_version+0x8c>)
 80040fe:	429a      	cmp	r2, r3
 8004100:	d00c      	beq.n	800411c <ai_platform_runtime_get_version+0x50>
 8004102:	e7fe      	b.n	8004102 <ai_platform_runtime_get_version+0x36>
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <ai_platform_runtime_get_version+0x90>)
 8004106:	2301      	movs	r3, #1
 8004108:	6093      	str	r3, [r2, #8]
 800410a:	6893      	ldr	r3, [r2, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1fc      	bne.n	800410a <ai_platform_runtime_get_version+0x3e>
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <ai_platform_runtime_get_version+0x88>)
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <ai_platform_runtime_get_version+0x8c>)
 8004118:	429a      	cmp	r2, r3
 800411a:	d115      	bne.n	8004148 <ai_platform_runtime_get_version+0x7c>
 800411c:	f7ff fed2 	bl	8003ec4 <_ai_platform_release_crc>
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <ai_platform_runtime_get_version+0x94>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2000      	movs	r0, #0
 8004126:	b2da      	uxtb	r2, r3
 8004128:	f362 0007 	bfi	r0, r2, #0, #8
 800412c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004130:	f362 200f 	bfi	r0, r2, #8, #8
 8004134:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004138:	f362 4017 	bfi	r0, r2, #16, #8
 800413c:	0e1b      	lsrs	r3, r3, #24
 800413e:	f363 601f 	bfi	r0, r3, #24, #8
 8004142:	b003      	add	sp, #12
 8004144:	f85d fb04 	ldr.w	pc, [sp], #4
 8004148:	e7fe      	b.n	8004148 <ai_platform_runtime_get_version+0x7c>
 800414a:	bf00      	nop
 800414c:	e0042000 	.word	0xe0042000
 8004150:	58024000 	.word	0x58024000
 8004154:	f407a5c2 	.word	0xf407a5c2
 8004158:	b5e8b5cd 	.word	0xb5e8b5cd
 800415c:	40023000 	.word	0x40023000
 8004160:	0800a9f8 	.word	0x0800a9f8

08004164 <ai_platform_api_get_version>:
 8004164:	b500      	push	{lr}
 8004166:	b083      	sub	sp, #12
 8004168:	f7ff feaa 	bl	8003ec0 <_ai_platform_acquire_crc>
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <ai_platform_api_get_version+0x80>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d010      	beq.n	800419c <ai_platform_api_get_version+0x38>
 800417a:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <ai_platform_api_get_version+0x84>)
 800417c:	2301      	movs	r3, #1
 800417e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004182:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1fb      	bne.n	8004182 <ai_platform_api_get_version+0x1e>
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <ai_platform_api_get_version+0x88>)
 800418c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004190:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004194:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <ai_platform_api_get_version+0x8c>)
 8004196:	429a      	cmp	r2, r3
 8004198:	d00c      	beq.n	80041b4 <ai_platform_api_get_version+0x50>
 800419a:	e7fe      	b.n	800419a <ai_platform_api_get_version+0x36>
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <ai_platform_api_get_version+0x90>)
 800419e:	2301      	movs	r3, #1
 80041a0:	6093      	str	r3, [r2, #8]
 80041a2:	6893      	ldr	r3, [r2, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1fc      	bne.n	80041a2 <ai_platform_api_get_version+0x3e>
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <ai_platform_api_get_version+0x88>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <ai_platform_api_get_version+0x8c>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d115      	bne.n	80041e0 <ai_platform_api_get_version+0x7c>
 80041b4:	f7ff fe86 	bl	8003ec4 <_ai_platform_release_crc>
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <ai_platform_api_get_version+0x94>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2000      	movs	r0, #0
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	f362 0007 	bfi	r0, r2, #0, #8
 80041c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80041c8:	f362 200f 	bfi	r0, r2, #8, #8
 80041cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80041d0:	f362 4017 	bfi	r0, r2, #16, #8
 80041d4:	0e1b      	lsrs	r3, r3, #24
 80041d6:	f363 601f 	bfi	r0, r3, #24, #8
 80041da:	b003      	add	sp, #12
 80041dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80041e0:	e7fe      	b.n	80041e0 <ai_platform_api_get_version+0x7c>
 80041e2:	bf00      	nop
 80041e4:	e0042000 	.word	0xe0042000
 80041e8:	58024000 	.word	0x58024000
 80041ec:	f407a5c2 	.word	0xf407a5c2
 80041f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80041f4:	40023000 	.word	0x40023000
 80041f8:	0800a9fc 	.word	0x0800a9fc

080041fc <ai_platform_interface_api_get_version>:
 80041fc:	b500      	push	{lr}
 80041fe:	b083      	sub	sp, #12
 8004200:	f7ff fe5e 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <ai_platform_interface_api_get_version+0x80>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004210:	d010      	beq.n	8004234 <ai_platform_interface_api_get_version+0x38>
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <ai_platform_interface_api_get_version+0x84>)
 8004214:	2301      	movs	r3, #1
 8004216:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800421a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1fb      	bne.n	800421a <ai_platform_interface_api_get_version+0x1e>
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <ai_platform_interface_api_get_version+0x88>)
 8004224:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004228:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800422c:	4b16      	ldr	r3, [pc, #88]	; (8004288 <ai_platform_interface_api_get_version+0x8c>)
 800422e:	429a      	cmp	r2, r3
 8004230:	d00c      	beq.n	800424c <ai_platform_interface_api_get_version+0x50>
 8004232:	e7fe      	b.n	8004232 <ai_platform_interface_api_get_version+0x36>
 8004234:	4a15      	ldr	r2, [pc, #84]	; (800428c <ai_platform_interface_api_get_version+0x90>)
 8004236:	2301      	movs	r3, #1
 8004238:	6093      	str	r3, [r2, #8]
 800423a:	6893      	ldr	r3, [r2, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1fc      	bne.n	800423a <ai_platform_interface_api_get_version+0x3e>
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <ai_platform_interface_api_get_version+0x88>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <ai_platform_interface_api_get_version+0x8c>)
 8004248:	429a      	cmp	r2, r3
 800424a:	d115      	bne.n	8004278 <ai_platform_interface_api_get_version+0x7c>
 800424c:	f7ff fe3a 	bl	8003ec4 <_ai_platform_release_crc>
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <ai_platform_interface_api_get_version+0x94>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2000      	movs	r0, #0
 8004256:	b2da      	uxtb	r2, r3
 8004258:	f362 0007 	bfi	r0, r2, #0, #8
 800425c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004260:	f362 200f 	bfi	r0, r2, #8, #8
 8004264:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004268:	f362 4017 	bfi	r0, r2, #16, #8
 800426c:	0e1b      	lsrs	r3, r3, #24
 800426e:	f363 601f 	bfi	r0, r3, #24, #8
 8004272:	b003      	add	sp, #12
 8004274:	f85d fb04 	ldr.w	pc, [sp], #4
 8004278:	e7fe      	b.n	8004278 <ai_platform_interface_api_get_version+0x7c>
 800427a:	bf00      	nop
 800427c:	e0042000 	.word	0xe0042000
 8004280:	58024000 	.word	0x58024000
 8004284:	f407a5c2 	.word	0xf407a5c2
 8004288:	b5e8b5cd 	.word	0xb5e8b5cd
 800428c:	40023000 	.word	0x40023000
 8004290:	0800aa00 	.word	0x0800aa00

08004294 <ai_platform_context_acquire>:
 8004294:	b510      	push	{r4, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	b120      	cbz	r0, 80042a4 <ai_platform_context_acquire+0x10>
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <ai_platform_context_acquire+0x68>)
 800429c:	6802      	ldr	r2, [r0, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf18      	it	ne
 80042a2:	2400      	movne	r4, #0
 80042a4:	f7ff fe0c 	bl	8003ec0 <_ai_platform_acquire_crc>
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <ai_platform_context_acquire+0x6c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d010      	beq.n	80042d8 <ai_platform_context_acquire+0x44>
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <ai_platform_context_acquire+0x70>)
 80042b8:	2301      	movs	r3, #1
 80042ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80042be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1fb      	bne.n	80042be <ai_platform_context_acquire+0x2a>
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <ai_platform_context_acquire+0x74>)
 80042c8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80042cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <ai_platform_context_acquire+0x78>)
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d00c      	beq.n	80042f0 <ai_platform_context_acquire+0x5c>
 80042d6:	e7fe      	b.n	80042d6 <ai_platform_context_acquire+0x42>
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <ai_platform_context_acquire+0x7c>)
 80042da:	2301      	movs	r3, #1
 80042dc:	6093      	str	r3, [r2, #8]
 80042de:	6893      	ldr	r3, [r2, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1fc      	bne.n	80042de <ai_platform_context_acquire+0x4a>
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <ai_platform_context_acquire+0x74>)
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <ai_platform_context_acquire+0x78>)
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d103      	bne.n	80042f8 <ai_platform_context_acquire+0x64>
 80042f0:	f7ff fde8 	bl	8003ec4 <_ai_platform_release_crc>
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd10      	pop	{r4, pc}
 80042f8:	e7fe      	b.n	80042f8 <ai_platform_context_acquire+0x64>
 80042fa:	bf00      	nop
 80042fc:	a1c00100 	.word	0xa1c00100
 8004300:	e0042000 	.word	0xe0042000
 8004304:	58024000 	.word	0x58024000
 8004308:	f407a5c2 	.word	0xf407a5c2
 800430c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004310:	40023000 	.word	0x40023000

08004314 <ai_platform_network_get_error>:
 8004314:	b510      	push	{r4, lr}
 8004316:	b1f0      	cbz	r0, 8004356 <ai_platform_network_get_error+0x42>
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <ai_platform_network_get_error+0xc4>)
 800431a:	6802      	ldr	r2, [r0, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	4604      	mov	r4, r0
 8004320:	d119      	bne.n	8004356 <ai_platform_network_get_error+0x42>
 8004322:	f7ff fdcd 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <ai_platform_network_get_error+0xc8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d03c      	beq.n	80043ae <ai_platform_network_get_error+0x9a>
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <ai_platform_network_get_error+0xcc>)
 8004336:	2301      	movs	r3, #1
 8004338:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800433c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1fb      	bne.n	800433c <ai_platform_network_get_error+0x28>
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <ai_platform_network_get_error+0xd0>)
 8004346:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800434a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <ai_platform_network_get_error+0xd4>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d038      	beq.n	80043c6 <ai_platform_network_get_error+0xb2>
 8004354:	e7fe      	b.n	8004354 <ai_platform_network_get_error+0x40>
 8004356:	f7ff fdb3 	bl	8003ec0 <_ai_platform_acquire_crc>
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <ai_platform_network_get_error+0xc8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d010      	beq.n	800438a <ai_platform_network_get_error+0x76>
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <ai_platform_network_get_error+0xcc>)
 800436a:	2301      	movs	r3, #1
 800436c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004370:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1fb      	bne.n	8004370 <ai_platform_network_get_error+0x5c>
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <ai_platform_network_get_error+0xd0>)
 800437a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800437e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004382:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <ai_platform_network_get_error+0xd4>)
 8004384:	429a      	cmp	r2, r3
 8004386:	d00d      	beq.n	80043a4 <ai_platform_network_get_error+0x90>
 8004388:	e7fe      	b.n	8004388 <ai_platform_network_get_error+0x74>
 800438a:	4a18      	ldr	r2, [pc, #96]	; (80043ec <ai_platform_network_get_error+0xd8>)
 800438c:	2301      	movs	r3, #1
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	6893      	ldr	r3, [r2, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1fc      	bne.n	8004390 <ai_platform_network_get_error+0x7c>
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <ai_platform_network_get_error+0xd0>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <ai_platform_network_get_error+0xd4>)
 800439e:	429a      	cmp	r2, r3
 80043a0:	d000      	beq.n	80043a4 <ai_platform_network_get_error+0x90>
 80043a2:	e7fe      	b.n	80043a2 <ai_platform_network_get_error+0x8e>
 80043a4:	f7ff fd8e 	bl	8003ec4 <_ai_platform_release_crc>
 80043a8:	f241 0010 	movw	r0, #4112	; 0x1010
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <ai_platform_network_get_error+0xd8>)
 80043b0:	2301      	movs	r3, #1
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	6893      	ldr	r3, [r2, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1fc      	bne.n	80043b4 <ai_platform_network_get_error+0xa0>
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <ai_platform_network_get_error+0xd0>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <ai_platform_network_get_error+0xd4>)
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d107      	bne.n	80043d6 <ai_platform_network_get_error+0xc2>
 80043c6:	f7ff fd7d 	bl	8003ec4 <_ai_platform_release_crc>
 80043ca:	f104 0010 	add.w	r0, r4, #16
 80043ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d2:	f001 b80f 	b.w	80053f4 <core_get_error>
 80043d6:	e7fe      	b.n	80043d6 <ai_platform_network_get_error+0xc2>
 80043d8:	a1c00100 	.word	0xa1c00100
 80043dc:	e0042000 	.word	0xe0042000
 80043e0:	58024000 	.word	0x58024000
 80043e4:	f407a5c2 	.word	0xf407a5c2
 80043e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80043ec:	40023000 	.word	0x40023000

080043f0 <ai_platform_network_set_error>:
 80043f0:	b110      	cbz	r0, 80043f8 <ai_platform_network_set_error+0x8>
 80043f2:	3010      	adds	r0, #16
 80043f4:	f001 b804 	b.w	8005400 <core_set_error>
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <ai_platform_api_get_network_report>:
 80043fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004400:	b087      	sub	sp, #28
 8004402:	b1f8      	cbz	r0, 8004444 <ai_platform_api_get_network_report+0x48>
 8004404:	4b95      	ldr	r3, [pc, #596]	; (800465c <ai_platform_api_get_network_report+0x260>)
 8004406:	6802      	ldr	r2, [r0, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	4607      	mov	r7, r0
 800440c:	d11a      	bne.n	8004444 <ai_platform_api_get_network_report+0x48>
 800440e:	468b      	mov	fp, r1
 8004410:	f7ff fd56 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004414:	4b92      	ldr	r3, [pc, #584]	; (8004660 <ai_platform_api_get_network_report+0x264>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d03e      	beq.n	80044a0 <ai_platform_api_get_network_report+0xa4>
 8004422:	4a90      	ldr	r2, [pc, #576]	; (8004664 <ai_platform_api_get_network_report+0x268>)
 8004424:	2301      	movs	r3, #1
 8004426:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800442a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1fb      	bne.n	800442a <ai_platform_api_get_network_report+0x2e>
 8004432:	4b8d      	ldr	r3, [pc, #564]	; (8004668 <ai_platform_api_get_network_report+0x26c>)
 8004434:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004438:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800443c:	4b8b      	ldr	r3, [pc, #556]	; (800466c <ai_platform_api_get_network_report+0x270>)
 800443e:	429a      	cmp	r2, r3
 8004440:	d03a      	beq.n	80044b8 <ai_platform_api_get_network_report+0xbc>
 8004442:	e7fe      	b.n	8004442 <ai_platform_api_get_network_report+0x46>
 8004444:	f7ff fd3c 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004448:	4b85      	ldr	r3, [pc, #532]	; (8004660 <ai_platform_api_get_network_report+0x264>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d010      	beq.n	8004478 <ai_platform_api_get_network_report+0x7c>
 8004456:	4a83      	ldr	r2, [pc, #524]	; (8004664 <ai_platform_api_get_network_report+0x268>)
 8004458:	2301      	movs	r3, #1
 800445a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800445e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1fb      	bne.n	800445e <ai_platform_api_get_network_report+0x62>
 8004466:	4b80      	ldr	r3, [pc, #512]	; (8004668 <ai_platform_api_get_network_report+0x26c>)
 8004468:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800446c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004470:	4b7e      	ldr	r3, [pc, #504]	; (800466c <ai_platform_api_get_network_report+0x270>)
 8004472:	429a      	cmp	r2, r3
 8004474:	d00d      	beq.n	8004492 <ai_platform_api_get_network_report+0x96>
 8004476:	e7fe      	b.n	8004476 <ai_platform_api_get_network_report+0x7a>
 8004478:	4a7d      	ldr	r2, [pc, #500]	; (8004670 <ai_platform_api_get_network_report+0x274>)
 800447a:	2301      	movs	r3, #1
 800447c:	6093      	str	r3, [r2, #8]
 800447e:	6893      	ldr	r3, [r2, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1fc      	bne.n	800447e <ai_platform_api_get_network_report+0x82>
 8004484:	4b78      	ldr	r3, [pc, #480]	; (8004668 <ai_platform_api_get_network_report+0x26c>)
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4b78      	ldr	r3, [pc, #480]	; (800466c <ai_platform_api_get_network_report+0x270>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d000      	beq.n	8004492 <ai_platform_api_get_network_report+0x96>
 8004490:	e7fe      	b.n	8004490 <ai_platform_api_get_network_report+0x94>
 8004492:	f7ff fd17 	bl	8003ec4 <_ai_platform_release_crc>
 8004496:	2400      	movs	r4, #0
 8004498:	4620      	mov	r0, r4
 800449a:	b007      	add	sp, #28
 800449c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a0:	4a73      	ldr	r2, [pc, #460]	; (8004670 <ai_platform_api_get_network_report+0x274>)
 80044a2:	2301      	movs	r3, #1
 80044a4:	6093      	str	r3, [r2, #8]
 80044a6:	6893      	ldr	r3, [r2, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1fc      	bne.n	80044a6 <ai_platform_api_get_network_report+0xaa>
 80044ac:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <ai_platform_api_get_network_report+0x26c>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	4b6e      	ldr	r3, [pc, #440]	; (800466c <ai_platform_api_get_network_report+0x270>)
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d112      	bne.n	80044de <ai_platform_api_get_network_report+0xe2>
 80044b8:	f7ff fd04 	bl	8003ec4 <_ai_platform_release_crc>
 80044bc:	f1bb 0f00 	cmp.w	fp, #0
 80044c0:	d0e9      	beq.n	8004496 <ai_platform_api_get_network_report+0x9a>
 80044c2:	2400      	movs	r4, #0
 80044c4:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	b14b      	cbz	r3, 80044e0 <ai_platform_api_get_network_report+0xe4>
 80044cc:	3401      	adds	r4, #1
 80044ce:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d003      	beq.n	80044e0 <ai_platform_api_get_network_report+0xe4>
 80044d8:	b112      	cbz	r2, 80044e0 <ai_platform_api_get_network_report+0xe4>
 80044da:	4613      	mov	r3, r2
 80044dc:	e7f5      	b.n	80044ca <ai_platform_api_get_network_report+0xce>
 80044de:	e7fe      	b.n	80044de <ai_platform_api_get_network_report+0xe2>
 80044e0:	2c00      	cmp	r4, #0
 80044e2:	f000 819e 	beq.w	8004822 <ai_platform_api_get_network_report+0x426>
 80044e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d04e      	beq.n	800458a <ai_platform_api_get_network_report+0x18e>
 80044ec:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80044f0:	f1b9 0f00 	cmp.w	r9, #0
 80044f4:	d049      	beq.n	800458a <ai_platform_api_get_network_report+0x18e>
 80044f6:	f04f 0a00 	mov.w	sl, #0
 80044fa:	e9cd 7b00 	strd	r7, fp, [sp]
 80044fe:	4655      	mov	r5, sl
 8004500:	e016      	b.n	8004530 <ai_platform_api_get_network_report+0x134>
 8004502:	2101      	movs	r1, #1
 8004504:	f847 100e 	str.w	r1, [r7, lr]
 8004508:	69b1      	ldr	r1, [r6, #24]
 800450a:	6849      	ldr	r1, [r1, #4]
 800450c:	60a3      	str	r3, [r4, #8]
 800450e:	f04f 0301 	mov.w	r3, #1
 8004512:	7523      	strb	r3, [r4, #20]
 8004514:	2300      	movs	r3, #0
 8004516:	60e3      	str	r3, [r4, #12]
 8004518:	6963      	ldr	r3, [r4, #20]
 800451a:	6121      	str	r1, [r4, #16]
 800451c:	e9c4 0200 	strd	r0, r2, [r4]
 8004520:	f368 231f 	bfi	r3, r8, #8, #24
 8004524:	f8c4 b018 	str.w	fp, [r4, #24]
 8004528:	3501      	adds	r5, #1
 800452a:	f10a 0a1c 	add.w	sl, sl, #28
 800452e:	6163      	str	r3, [r4, #20]
 8004530:	f8b9 3000 	ldrh.w	r3, [r9]
 8004534:	42ab      	cmp	r3, r5
 8004536:	b2aa      	uxth	r2, r5
 8004538:	d933      	bls.n	80045a2 <ai_platform_api_get_network_report+0x1a6>
 800453a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800453e:	b383      	cbz	r3, 80045a2 <ai_platform_api_get_network_report+0x1a6>
 8004540:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004544:	b36e      	cbz	r6, 80045a2 <ai_platform_api_get_network_report+0x1a6>
 8004546:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800454a:	69b2      	ldr	r2, [r6, #24]
 800454c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8004550:	6810      	ldr	r0, [r2, #0]
 8004552:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004556:	68b3      	ldr	r3, [r6, #8]
 8004558:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800455c:	f001 fe18 	bl	8006190 <ai_array_to_buffer_fmt>
 8004560:	69b1      	ldr	r1, [r6, #24]
 8004562:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004566:	688a      	ldr	r2, [r1, #8]
 8004568:	4454      	add	r4, sl
 800456a:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0cb      	beq.n	800450a <ai_platform_api_get_network_report+0x10e>
 8004572:	2100      	movs	r1, #0
 8004574:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004578:	6831      	ldr	r1, [r6, #0]
 800457a:	6059      	str	r1, [r3, #4]
 800457c:	b111      	cbz	r1, 8004584 <ai_platform_api_get_network_report+0x188>
 800457e:	8849      	ldrh	r1, [r1, #2]
 8004580:	2900      	cmp	r1, #0
 8004582:	d1be      	bne.n	8004502 <ai_platform_api_get_network_report+0x106>
 8004584:	69b1      	ldr	r1, [r6, #24]
 8004586:	2300      	movs	r3, #0
 8004588:	e7bf      	b.n	800450a <ai_platform_api_get_network_report+0x10e>
 800458a:	2400      	movs	r4, #0
 800458c:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 8004590:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 8004594:	2218      	movs	r2, #24
 8004596:	2112      	movs	r1, #18
 8004598:	f107 0010 	add.w	r0, r7, #16
 800459c:	f000 ff30 	bl	8005400 <core_set_error>
 80045a0:	e77a      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 80045a2:	e9dd 7b00 	ldrd	r7, fp, [sp]
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	d0ef      	beq.n	800458a <ai_platform_api_get_network_report+0x18e>
 80045aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 80045b4:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 80045b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	f240 8125 	bls.w	800480a <ai_platform_api_get_network_report+0x40e>
 80045c0:	f04f 0a00 	mov.w	sl, #0
 80045c4:	e9cd 7b00 	strd	r7, fp, [sp]
 80045c8:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80045cc:	4655      	mov	r5, sl
 80045ce:	e016      	b.n	80045fe <ai_platform_api_get_network_report+0x202>
 80045d0:	2101      	movs	r1, #1
 80045d2:	f847 100e 	str.w	r1, [r7, lr]
 80045d6:	69b1      	ldr	r1, [r6, #24]
 80045d8:	6849      	ldr	r1, [r1, #4]
 80045da:	60a3      	str	r3, [r4, #8]
 80045dc:	f04f 0301 	mov.w	r3, #1
 80045e0:	7523      	strb	r3, [r4, #20]
 80045e2:	2300      	movs	r3, #0
 80045e4:	60e3      	str	r3, [r4, #12]
 80045e6:	6963      	ldr	r3, [r4, #20]
 80045e8:	6121      	str	r1, [r4, #16]
 80045ea:	e9c4 0200 	strd	r0, r2, [r4]
 80045ee:	f368 231f 	bfi	r3, r8, #8, #24
 80045f2:	f8c4 b018 	str.w	fp, [r4, #24]
 80045f6:	3501      	adds	r5, #1
 80045f8:	f10a 0a1c 	add.w	sl, sl, #28
 80045fc:	6163      	str	r3, [r4, #20]
 80045fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004602:	42ab      	cmp	r3, r5
 8004604:	b2aa      	uxth	r2, r5
 8004606:	d935      	bls.n	8004674 <ai_platform_api_get_network_report+0x278>
 8004608:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d031      	beq.n	8004674 <ai_platform_api_get_network_report+0x278>
 8004610:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004614:	b376      	cbz	r6, 8004674 <ai_platform_api_get_network_report+0x278>
 8004616:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800461a:	69b2      	ldr	r2, [r6, #24]
 800461c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8004620:	6810      	ldr	r0, [r2, #0]
 8004622:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004626:	68b3      	ldr	r3, [r6, #8]
 8004628:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800462c:	f001 fdb0 	bl	8006190 <ai_array_to_buffer_fmt>
 8004630:	69b1      	ldr	r1, [r6, #24]
 8004632:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004636:	688a      	ldr	r2, [r1, #8]
 8004638:	4454      	add	r4, sl
 800463a:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0ca      	beq.n	80045d8 <ai_platform_api_get_network_report+0x1dc>
 8004642:	2100      	movs	r1, #0
 8004644:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004648:	6831      	ldr	r1, [r6, #0]
 800464a:	6059      	str	r1, [r3, #4]
 800464c:	b111      	cbz	r1, 8004654 <ai_platform_api_get_network_report+0x258>
 800464e:	8849      	ldrh	r1, [r1, #2]
 8004650:	2900      	cmp	r1, #0
 8004652:	d1bd      	bne.n	80045d0 <ai_platform_api_get_network_report+0x1d4>
 8004654:	69b1      	ldr	r1, [r6, #24]
 8004656:	2300      	movs	r3, #0
 8004658:	e7be      	b.n	80045d8 <ai_platform_api_get_network_report+0x1dc>
 800465a:	bf00      	nop
 800465c:	a1c00100 	.word	0xa1c00100
 8004660:	e0042000 	.word	0xe0042000
 8004664:	58024000 	.word	0x58024000
 8004668:	f407a5c2 	.word	0xf407a5c2
 800466c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004670:	40023000 	.word	0x40023000
 8004674:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8004678:	2a00      	cmp	r2, #0
 800467a:	f000 80c6 	beq.w	800480a <ai_platform_api_get_network_report+0x40e>
 800467e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004682:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 800468c:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 8004690:	4630      	mov	r0, r6
 8004692:	f7ff fbfb 	bl	8003e8c <ai_buffer_array_sane>
 8004696:	4604      	mov	r4, r0
 8004698:	b938      	cbnz	r0, 80046aa <ai_platform_api_get_network_report+0x2ae>
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff fbf6 	bl	8003e8c <ai_buffer_array_sane>
 80046a0:	b118      	cbz	r0, 80046aa <ai_platform_api_get_network_report+0x2ae>
 80046a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f040 80c5 	bne.w	8004834 <ai_platform_api_get_network_report+0x438>
 80046aa:	f107 081c 	add.w	r8, r7, #28
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff fbec 	bl	8003e8c <ai_buffer_array_sane>
 80046b4:	4604      	mov	r4, r0
 80046b6:	b938      	cbnz	r0, 80046c8 <ai_platform_api_get_network_report+0x2cc>
 80046b8:	4640      	mov	r0, r8
 80046ba:	f7ff fbe7 	bl	8003e8c <ai_buffer_array_sane>
 80046be:	b118      	cbz	r0, 80046c8 <ai_platform_api_get_network_report+0x2cc>
 80046c0:	8bfb      	ldrh	r3, [r7, #30]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 80bd 	bne.w	8004842 <ai_platform_api_get_network_report+0x446>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 80046ce:	f7ff fbf7 	bl	8003ec0 <_ai_platform_acquire_crc>
 80046d2:	4ba0      	ldr	r3, [pc, #640]	; (8004954 <ai_platform_api_get_network_report+0x558>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d010      	beq.n	8004702 <ai_platform_api_get_network_report+0x306>
 80046e0:	4a9d      	ldr	r2, [pc, #628]	; (8004958 <ai_platform_api_get_network_report+0x55c>)
 80046e2:	2301      	movs	r3, #1
 80046e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80046e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1fb      	bne.n	80046e8 <ai_platform_api_get_network_report+0x2ec>
 80046f0:	4b9a      	ldr	r3, [pc, #616]	; (800495c <ai_platform_api_get_network_report+0x560>)
 80046f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80046f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80046fa:	4b99      	ldr	r3, [pc, #612]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d00d      	beq.n	800471c <ai_platform_api_get_network_report+0x320>
 8004700:	e7fe      	b.n	8004700 <ai_platform_api_get_network_report+0x304>
 8004702:	4a98      	ldr	r2, [pc, #608]	; (8004964 <ai_platform_api_get_network_report+0x568>)
 8004704:	2301      	movs	r3, #1
 8004706:	6093      	str	r3, [r2, #8]
 8004708:	6893      	ldr	r3, [r2, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1fc      	bne.n	8004708 <ai_platform_api_get_network_report+0x30c>
 800470e:	4b93      	ldr	r3, [pc, #588]	; (800495c <ai_platform_api_get_network_report+0x560>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 8004716:	429a      	cmp	r2, r3
 8004718:	f040 808a 	bne.w	8004830 <ai_platform_api_get_network_report+0x434>
 800471c:	f7ff fbd2 	bl	8003ec4 <_ai_platform_release_crc>
 8004720:	4b91      	ldr	r3, [pc, #580]	; (8004968 <ai_platform_api_get_network_report+0x56c>)
 8004722:	f8cb 3010 	str.w	r3, [fp, #16]
 8004726:	f7ff fbcb 	bl	8003ec0 <_ai_platform_acquire_crc>
 800472a:	4b8a      	ldr	r3, [pc, #552]	; (8004954 <ai_platform_api_get_network_report+0x558>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	d010      	beq.n	800475a <ai_platform_api_get_network_report+0x35e>
 8004738:	4b87      	ldr	r3, [pc, #540]	; (8004958 <ai_platform_api_get_network_report+0x55c>)
 800473a:	2201      	movs	r2, #1
 800473c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004740:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8004744:	2a00      	cmp	r2, #0
 8004746:	d1fb      	bne.n	8004740 <ai_platform_api_get_network_report+0x344>
 8004748:	4a84      	ldr	r2, [pc, #528]	; (800495c <ai_platform_api_get_network_report+0x560>)
 800474a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800474e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004752:	4b83      	ldr	r3, [pc, #524]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 8004754:	429a      	cmp	r2, r3
 8004756:	d00c      	beq.n	8004772 <ai_platform_api_get_network_report+0x376>
 8004758:	e7fe      	b.n	8004758 <ai_platform_api_get_network_report+0x35c>
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <ai_platform_api_get_network_report+0x568>)
 800475c:	2201      	movs	r2, #1
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	2a00      	cmp	r2, #0
 8004764:	d1fc      	bne.n	8004760 <ai_platform_api_get_network_report+0x364>
 8004766:	4a7d      	ldr	r2, [pc, #500]	; (800495c <ai_platform_api_get_network_report+0x560>)
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b7c      	ldr	r3, [pc, #496]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 800476e:	429a      	cmp	r2, r3
 8004770:	d15f      	bne.n	8004832 <ai_platform_api_get_network_report+0x436>
 8004772:	f7ff fba7 	bl	8003ec4 <_ai_platform_release_crc>
 8004776:	f44f 7384 	mov.w	r3, #264	; 0x108
 800477a:	f8cb 3014 	str.w	r3, [fp, #20]
 800477e:	f7ff fb9f 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004782:	4b74      	ldr	r3, [pc, #464]	; (8004954 <ai_platform_api_get_network_report+0x558>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d010      	beq.n	80047b2 <ai_platform_api_get_network_report+0x3b6>
 8004790:	4b71      	ldr	r3, [pc, #452]	; (8004958 <ai_platform_api_get_network_report+0x55c>)
 8004792:	2201      	movs	r2, #1
 8004794:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004798:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800479c:	2a00      	cmp	r2, #0
 800479e:	d1fb      	bne.n	8004798 <ai_platform_api_get_network_report+0x39c>
 80047a0:	4a6e      	ldr	r2, [pc, #440]	; (800495c <ai_platform_api_get_network_report+0x560>)
 80047a2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80047a6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80047aa:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d00c      	beq.n	80047ca <ai_platform_api_get_network_report+0x3ce>
 80047b0:	e7fe      	b.n	80047b0 <ai_platform_api_get_network_report+0x3b4>
 80047b2:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <ai_platform_api_get_network_report+0x568>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	2a00      	cmp	r2, #0
 80047bc:	d1fc      	bne.n	80047b8 <ai_platform_api_get_network_report+0x3bc>
 80047be:	4a67      	ldr	r2, [pc, #412]	; (800495c <ai_platform_api_get_network_report+0x560>)
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b66      	ldr	r3, [pc, #408]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d142      	bne.n	8004850 <ai_platform_api_get_network_report+0x454>
 80047ca:	f7ff fb7b 	bl	8003ec4 <_ai_platform_release_crc>
 80047ce:	f240 2301 	movw	r3, #513	; 0x201
 80047d2:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 80047d6:	f7ff fb73 	bl	8003ec0 <_ai_platform_acquire_crc>
 80047da:	4b5e      	ldr	r3, [pc, #376]	; (8004954 <ai_platform_api_get_network_report+0x558>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d034      	beq.n	8004852 <ai_platform_api_get_network_report+0x456>
 80047e8:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <ai_platform_api_get_network_report+0x55c>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80047f0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	d1fb      	bne.n	80047f0 <ai_platform_api_get_network_report+0x3f4>
 80047f8:	4a58      	ldr	r2, [pc, #352]	; (800495c <ai_platform_api_get_network_report+0x560>)
 80047fa:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80047fe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004802:	4b57      	ldr	r3, [pc, #348]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d030      	beq.n	800486a <ai_platform_api_get_network_report+0x46e>
 8004808:	e7fe      	b.n	8004808 <ai_platform_api_get_network_report+0x40c>
 800480a:	2400      	movs	r4, #0
 800480c:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 8004810:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 8004814:	2218      	movs	r2, #24
 8004816:	2113      	movs	r1, #19
 8004818:	f107 0010 	add.w	r0, r7, #16
 800481c:	f000 fdf0 	bl	8005400 <core_set_error>
 8004820:	e63a      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 8004822:	2218      	movs	r2, #24
 8004824:	2111      	movs	r1, #17
 8004826:	f107 0010 	add.w	r0, r7, #16
 800482a:	f000 fde9 	bl	8005400 <core_set_error>
 800482e:	e633      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 8004830:	e7fe      	b.n	8004830 <ai_platform_api_get_network_report+0x434>
 8004832:	e7fe      	b.n	8004832 <ai_platform_api_get_network_report+0x436>
 8004834:	2213      	movs	r2, #19
 8004836:	2111      	movs	r1, #17
 8004838:	f107 0010 	add.w	r0, r7, #16
 800483c:	f000 fde0 	bl	8005400 <core_set_error>
 8004840:	e62a      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 8004842:	2212      	movs	r2, #18
 8004844:	2111      	movs	r1, #17
 8004846:	f107 0010 	add.w	r0, r7, #16
 800484a:	f000 fdd9 	bl	8005400 <core_set_error>
 800484e:	e623      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 8004850:	e7fe      	b.n	8004850 <ai_platform_api_get_network_report+0x454>
 8004852:	4b44      	ldr	r3, [pc, #272]	; (8004964 <ai_platform_api_get_network_report+0x568>)
 8004854:	2201      	movs	r2, #1
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	2a00      	cmp	r2, #0
 800485c:	d1fc      	bne.n	8004858 <ai_platform_api_get_network_report+0x45c>
 800485e:	4a3f      	ldr	r2, [pc, #252]	; (800495c <ai_platform_api_get_network_report+0x560>)
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b3e      	ldr	r3, [pc, #248]	; (8004960 <ai_platform_api_get_network_report+0x564>)
 8004866:	429a      	cmp	r2, r3
 8004868:	d14a      	bne.n	8004900 <ai_platform_api_get_network_report+0x504>
 800486a:	f7ff fb2b 	bl	8003ec4 <_ai_platform_release_crc>
 800486e:	f240 5301 	movw	r3, #1281	; 0x501
 8004872:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8004876:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004878:	f001 fd36 	bl	80062e8 <ai_platform_version_get>
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <ai_platform_api_get_network_report+0x570>)
 800487e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8004882:	f8cb 0020 	str.w	r0, [fp, #32]
 8004886:	429a      	cmp	r2, r3
 8004888:	d10d      	bne.n	80048a6 <ai_platform_api_get_network_report+0x4aa>
 800488a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800488e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8004892:	e882 0003 	stmia.w	r2, {r0, r1}
 8004896:	e898 0003 	ldmia.w	r8, {r0, r1}
 800489a:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 800489e:	e883 0003 	stmia.w	r3, {r0, r1}
 80048a2:	2401      	movs	r4, #1
 80048a4:	e5f8      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 80048a6:	4a32      	ldr	r2, [pc, #200]	; (8004970 <ai_platform_api_get_network_report+0x574>)
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <ai_platform_api_get_network_report+0x578>)
 80048aa:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 80048ae:	2000      	movs	r0, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	f240 4201 	movw	r2, #1025	; 0x401
 80048b6:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 80048ba:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 80048be:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 80048c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048c4:	f10d 0908 	add.w	r9, sp, #8
 80048c8:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 80048cc:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 80048d0:	46a6      	mov	lr, r4
 80048d2:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 80048d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80048da:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 80048de:	46ac      	mov	ip, r5
 80048e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80048e4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80048e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80048ec:	4630      	mov	r0, r6
 80048ee:	f7ff facd 	bl	8003e8c <ai_buffer_array_sane>
 80048f2:	b990      	cbnz	r0, 800491a <ai_platform_api_get_network_report+0x51e>
 80048f4:	4640      	mov	r0, r8
 80048f6:	f7ff fac9 	bl	8003e8c <ai_buffer_array_sane>
 80048fa:	b910      	cbnz	r0, 8004902 <ai_platform_api_get_network_report+0x506>
 80048fc:	2401      	movs	r4, #1
 80048fe:	e5cb      	b.n	8004498 <ai_platform_api_get_network_report+0x9c>
 8004900:	e7fe      	b.n	8004900 <ai_platform_api_get_network_report+0x504>
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff fac2 	bl	8003e8c <ai_buffer_array_sane>
 8004908:	b198      	cbz	r0, 8004932 <ai_platform_api_get_network_report+0x536>
 800490a:	6a3d      	ldr	r5, [r7, #32]
 800490c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800490e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004918:	e7f0      	b.n	80048fc <ai_platform_api_get_network_report+0x500>
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff fab6 	bl	8003e8c <ai_buffer_array_sane>
 8004920:	b178      	cbz	r0, 8004942 <ai_platform_api_get_network_report+0x546>
 8004922:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8004924:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004928:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800492c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004930:	e7e0      	b.n	80048f4 <ai_platform_api_get_network_report+0x4f8>
 8004932:	4605      	mov	r5, r0
 8004934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800493c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004940:	deff      	udf	#255	; 0xff
 8004942:	4604      	mov	r4, r0
 8004944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004948:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800494c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004950:	deff      	udf	#255	; 0xff
 8004952:	bf00      	nop
 8004954:	e0042000 	.word	0xe0042000
 8004958:	58024000 	.word	0x58024000
 800495c:	f407a5c2 	.word	0xf407a5c2
 8004960:	b5e8b5cd 	.word	0xb5e8b5cd
 8004964:	40023000 	.word	0x40023000
 8004968:	0800a9f4 	.word	0x0800a9f4
 800496c:	a1facade 	.word	0xa1facade
 8004970:	00040440 	.word	0x00040440
 8004974:	080090b8 	.word	0x080090b8

08004978 <ai_platform_network_create>:
 8004978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800497c:	b083      	sub	sp, #12
 800497e:	4606      	mov	r6, r0
 8004980:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004984:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004988:	4615      	mov	r5, r2
 800498a:	461f      	mov	r7, r3
 800498c:	f7ff fa98 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004990:	b188      	cbz	r0, 80049b6 <ai_platform_network_create+0x3e>
 8004992:	4a5d      	ldr	r2, [pc, #372]	; (8004b08 <ai_platform_network_create+0x190>)
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800499a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800499e:	4603      	mov	r3, r0
 80049a0:	d00e      	beq.n	80049c0 <ai_platform_network_create+0x48>
 80049a2:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <ai_platform_network_create+0x194>)
 80049a4:	2118      	movs	r1, #24
 80049a6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80049aa:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80049ae:	2918      	cmp	r1, #24
 80049b0:	d018      	beq.n	80049e4 <ai_platform_network_create+0x6c>
 80049b2:	f7ff fa87 	bl	8003ec4 <_ai_platform_release_crc>
 80049b6:	f244 1033 	movw	r0, #16691	; 0x4133
 80049ba:	b003      	add	sp, #12
 80049bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049c0:	4a53      	ldr	r2, [pc, #332]	; (8004b10 <ai_platform_network_create+0x198>)
 80049c2:	2101      	movs	r1, #1
 80049c4:	6091      	str	r1, [r2, #8]
 80049c6:	2114      	movs	r1, #20
 80049c8:	e001      	b.n	80049ce <ai_platform_network_create+0x56>
 80049ca:	3901      	subs	r1, #1
 80049cc:	d002      	beq.n	80049d4 <ai_platform_network_create+0x5c>
 80049ce:	6894      	ldr	r4, [r2, #8]
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d1fa      	bne.n	80049ca <ai_platform_network_create+0x52>
 80049d4:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <ai_platform_network_create+0x198>)
 80049d6:	6891      	ldr	r1, [r2, #8]
 80049d8:	b911      	cbnz	r1, 80049e0 <ai_platform_network_create+0x68>
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	3201      	adds	r2, #1
 80049de:	d008      	beq.n	80049f2 <ai_platform_network_create+0x7a>
 80049e0:	4618      	mov	r0, r3
 80049e2:	e7e6      	b.n	80049b2 <ai_platform_network_create+0x3a>
 80049e4:	2101      	movs	r1, #1
 80049e6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80049ea:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80049ee:	2900      	cmp	r1, #0
 80049f0:	d1fb      	bne.n	80049ea <ai_platform_network_create+0x72>
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fa66 	bl	8003ec4 <_ai_platform_release_crc>
 80049f8:	f7ff fa62 	bl	8003ec0 <_ai_platform_acquire_crc>
 80049fc:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <ai_platform_network_create+0x190>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d010      	beq.n	8004a2c <ai_platform_network_create+0xb4>
 8004a0a:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <ai_platform_network_create+0x194>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004a12:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d1fb      	bne.n	8004a12 <ai_platform_network_create+0x9a>
 8004a1a:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <ai_platform_network_create+0x19c>)
 8004a1c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004a20:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004a24:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <ai_platform_network_create+0x1a0>)
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d00c      	beq.n	8004a44 <ai_platform_network_create+0xcc>
 8004a2a:	e7fe      	b.n	8004a2a <ai_platform_network_create+0xb2>
 8004a2c:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <ai_platform_network_create+0x198>)
 8004a2e:	2301      	movs	r3, #1
 8004a30:	6093      	str	r3, [r2, #8]
 8004a32:	6893      	ldr	r3, [r2, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1fc      	bne.n	8004a32 <ai_platform_network_create+0xba>
 8004a38:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <ai_platform_network_create+0x19c>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <ai_platform_network_create+0x1a0>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d122      	bne.n	8004a8a <ai_platform_network_create+0x112>
 8004a44:	f7ff fa3e 	bl	8003ec4 <_ai_platform_release_crc>
 8004a48:	b38e      	cbz	r6, 8004aae <ai_platform_network_create+0x136>
 8004a4a:	4b34      	ldr	r3, [pc, #208]	; (8004b1c <ai_platform_network_create+0x1a4>)
 8004a4c:	602b      	str	r3, [r5, #0]
 8004a4e:	6035      	str	r5, [r6, #0]
 8004a50:	f000 fcce 	bl	80053f0 <core_init>
 8004a54:	b1d0      	cbz	r0, 8004a8c <ai_platform_network_create+0x114>
 8004a56:	f7ff fa33 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <ai_platform_network_create+0x190>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d025      	beq.n	8004ab4 <ai_platform_network_create+0x13c>
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <ai_platform_network_create+0x194>)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1fb      	bne.n	8004a70 <ai_platform_network_create+0xf8>
 8004a78:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <ai_platform_network_create+0x19c>)
 8004a7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <ai_platform_network_create+0x1a0>)
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d022      	beq.n	8004ace <ai_platform_network_create+0x156>
 8004a88:	e7fe      	b.n	8004a88 <ai_platform_network_create+0x110>
 8004a8a:	e7fe      	b.n	8004a8a <ai_platform_network_create+0x112>
 8004a8c:	2430      	movs	r4, #48	; 0x30
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	2610      	movs	r6, #16
 8004a94:	464a      	mov	r2, r9
 8004a96:	4641      	mov	r1, r8
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f001 fc1f 	bl	80062dc <ai_version_get>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f364 0007 	bfi	r0, r4, #0, #8
 8004aa6:	64ab      	str	r3, [r5, #72]	; 0x48
 8004aa8:	f366 201f 	bfi	r0, r6, #8, #24
 8004aac:	e785      	b.n	80049ba <ai_platform_network_create+0x42>
 8004aae:	f241 0010 	movw	r0, #4112	; 0x1010
 8004ab2:	e782      	b.n	80049ba <ai_platform_network_create+0x42>
 8004ab4:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <ai_platform_network_create+0x198>)
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	6093      	str	r3, [r2, #8]
 8004aba:	6893      	ldr	r3, [r2, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1fc      	bne.n	8004aba <ai_platform_network_create+0x142>
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <ai_platform_network_create+0x19c>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <ai_platform_network_create+0x1a0>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d000      	beq.n	8004ace <ai_platform_network_create+0x156>
 8004acc:	e7fe      	b.n	8004acc <ai_platform_network_create+0x154>
 8004ace:	f7ff f9f9 	bl	8003ec4 <_ai_platform_release_crc>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f001 fc00 	bl	80062dc <ai_version_get>
 8004adc:	2200      	movs	r2, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	2105      	movs	r1, #5
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f001 fbfa 	bl	80062dc <ai_version_get>
 8004ae8:	4284      	cmp	r4, r0
 8004aea:	d001      	beq.n	8004af0 <ai_platform_network_create+0x178>
 8004aec:	2401      	movs	r4, #1
 8004aee:	e7ce      	b.n	8004a8e <ai_platform_network_create+0x116>
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <ai_platform_network_create+0x1a8>)
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	a801      	add	r0, sp, #4
 8004af6:	f000 fc8f 	bl	8005418 <ai_check_custom_types>
 8004afa:	b110      	cbz	r0, 8004b02 <ai_platform_network_create+0x18a>
 8004afc:	2600      	movs	r6, #0
 8004afe:	4634      	mov	r4, r6
 8004b00:	e7c8      	b.n	8004a94 <ai_platform_network_create+0x11c>
 8004b02:	2402      	movs	r4, #2
 8004b04:	e7c3      	b.n	8004a8e <ai_platform_network_create+0x116>
 8004b06:	bf00      	nop
 8004b08:	e0042000 	.word	0xe0042000
 8004b0c:	58024000 	.word	0x58024000
 8004b10:	40023000 	.word	0x40023000
 8004b14:	f407a5c2 	.word	0xf407a5c2
 8004b18:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b1c:	a1c00100 	.word	0xa1c00100
 8004b20:	84048403 	.word	0x84048403

08004b24 <ai_platform_network_destroy>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4604      	mov	r4, r0
 8004b28:	b1e8      	cbz	r0, 8004b66 <ai_platform_network_destroy+0x42>
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <ai_platform_network_destroy+0xc0>)
 8004b2c:	6802      	ldr	r2, [r0, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d119      	bne.n	8004b66 <ai_platform_network_destroy+0x42>
 8004b32:	f7ff f9c5 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <ai_platform_network_destroy+0xc4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d03b      	beq.n	8004bbc <ai_platform_network_destroy+0x98>
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <ai_platform_network_destroy+0xc8>)
 8004b46:	2301      	movs	r3, #1
 8004b48:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1fb      	bne.n	8004b4c <ai_platform_network_destroy+0x28>
 8004b54:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <ai_platform_network_destroy+0xcc>)
 8004b56:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b5e:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <ai_platform_network_destroy+0xd0>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d037      	beq.n	8004bd4 <ai_platform_network_destroy+0xb0>
 8004b64:	e7fe      	b.n	8004b64 <ai_platform_network_destroy+0x40>
 8004b66:	f7ff f9ab 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <ai_platform_network_destroy+0xc4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d010      	beq.n	8004b9a <ai_platform_network_destroy+0x76>
 8004b78:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <ai_platform_network_destroy+0xc8>)
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1fb      	bne.n	8004b80 <ai_platform_network_destroy+0x5c>
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <ai_platform_network_destroy+0xcc>)
 8004b8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b92:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <ai_platform_network_destroy+0xd0>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d00d      	beq.n	8004bb4 <ai_platform_network_destroy+0x90>
 8004b98:	e7fe      	b.n	8004b98 <ai_platform_network_destroy+0x74>
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <ai_platform_network_destroy+0xd4>)
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	6093      	str	r3, [r2, #8]
 8004ba0:	6893      	ldr	r3, [r2, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1fc      	bne.n	8004ba0 <ai_platform_network_destroy+0x7c>
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <ai_platform_network_destroy+0xcc>)
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <ai_platform_network_destroy+0xd0>)
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d000      	beq.n	8004bb4 <ai_platform_network_destroy+0x90>
 8004bb2:	e7fe      	b.n	8004bb2 <ai_platform_network_destroy+0x8e>
 8004bb4:	f7ff f986 	bl	8003ec4 <_ai_platform_release_crc>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <ai_platform_network_destroy+0xd4>)
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	6093      	str	r3, [r2, #8]
 8004bc2:	6893      	ldr	r3, [r2, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1fc      	bne.n	8004bc2 <ai_platform_network_destroy+0x9e>
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <ai_platform_network_destroy+0xcc>)
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <ai_platform_network_destroy+0xd0>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d106      	bne.n	8004be2 <ai_platform_network_destroy+0xbe>
 8004bd4:	f7ff f976 	bl	8003ec4 <_ai_platform_release_crc>
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 fcb3 	bl	8005544 <ai_layers_destroy_all>
 8004bde:	2000      	movs	r0, #0
 8004be0:	bd10      	pop	{r4, pc}
 8004be2:	e7fe      	b.n	8004be2 <ai_platform_network_destroy+0xbe>
 8004be4:	a1c00100 	.word	0xa1c00100
 8004be8:	e0042000 	.word	0xe0042000
 8004bec:	58024000 	.word	0x58024000
 8004bf0:	f407a5c2 	.word	0xf407a5c2
 8004bf4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004bf8:	40023000 	.word	0x40023000

08004bfc <ai_platform_network_init>:
 8004bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c00:	b1f8      	cbz	r0, 8004c42 <ai_platform_network_init+0x46>
 8004c02:	4b6e      	ldr	r3, [pc, #440]	; (8004dbc <ai_platform_network_init+0x1c0>)
 8004c04:	6802      	ldr	r2, [r0, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	4604      	mov	r4, r0
 8004c0a:	d11a      	bne.n	8004c42 <ai_platform_network_init+0x46>
 8004c0c:	460e      	mov	r6, r1
 8004c0e:	f7ff f957 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004c12:	4b6b      	ldr	r3, [pc, #428]	; (8004dc0 <ai_platform_network_init+0x1c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1e:	d03d      	beq.n	8004c9c <ai_platform_network_init+0xa0>
 8004c20:	4a68      	ldr	r2, [pc, #416]	; (8004dc4 <ai_platform_network_init+0x1c8>)
 8004c22:	2301      	movs	r3, #1
 8004c24:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c28:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1fb      	bne.n	8004c28 <ai_platform_network_init+0x2c>
 8004c30:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <ai_platform_network_init+0x1cc>)
 8004c32:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c3a:	4b64      	ldr	r3, [pc, #400]	; (8004dcc <ai_platform_network_init+0x1d0>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d039      	beq.n	8004cb4 <ai_platform_network_init+0xb8>
 8004c40:	e7fe      	b.n	8004c40 <ai_platform_network_init+0x44>
 8004c42:	f7ff f93d 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004c46:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <ai_platform_network_init+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d010      	beq.n	8004c76 <ai_platform_network_init+0x7a>
 8004c54:	4a5b      	ldr	r2, [pc, #364]	; (8004dc4 <ai_platform_network_init+0x1c8>)
 8004c56:	2301      	movs	r3, #1
 8004c58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1fb      	bne.n	8004c5c <ai_platform_network_init+0x60>
 8004c64:	4b58      	ldr	r3, [pc, #352]	; (8004dc8 <ai_platform_network_init+0x1cc>)
 8004c66:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c6e:	4b57      	ldr	r3, [pc, #348]	; (8004dcc <ai_platform_network_init+0x1d0>)
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d00d      	beq.n	8004c90 <ai_platform_network_init+0x94>
 8004c74:	e7fe      	b.n	8004c74 <ai_platform_network_init+0x78>
 8004c76:	4a56      	ldr	r2, [pc, #344]	; (8004dd0 <ai_platform_network_init+0x1d4>)
 8004c78:	2301      	movs	r3, #1
 8004c7a:	6093      	str	r3, [r2, #8]
 8004c7c:	6893      	ldr	r3, [r2, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1fc      	bne.n	8004c7c <ai_platform_network_init+0x80>
 8004c82:	4b51      	ldr	r3, [pc, #324]	; (8004dc8 <ai_platform_network_init+0x1cc>)
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	4b50      	ldr	r3, [pc, #320]	; (8004dcc <ai_platform_network_init+0x1d0>)
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d000      	beq.n	8004c90 <ai_platform_network_init+0x94>
 8004c8e:	e7fe      	b.n	8004c8e <ai_platform_network_init+0x92>
 8004c90:	f7ff f918 	bl	8003ec4 <_ai_platform_release_crc>
 8004c94:	2600      	movs	r6, #0
 8004c96:	4630      	mov	r0, r6
 8004c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9c:	4a4c      	ldr	r2, [pc, #304]	; (8004dd0 <ai_platform_network_init+0x1d4>)
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	6093      	str	r3, [r2, #8]
 8004ca2:	6893      	ldr	r3, [r2, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1fc      	bne.n	8004ca2 <ai_platform_network_init+0xa6>
 8004ca8:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <ai_platform_network_init+0x1cc>)
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <ai_platform_network_init+0x1d0>)
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d11c      	bne.n	8004cee <ai_platform_network_init+0xf2>
 8004cb4:	f7ff f906 	bl	8003ec4 <_ai_platform_release_crc>
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	d06f      	beq.n	8004d9c <ai_platform_network_init+0x1a0>
 8004cbc:	4b45      	ldr	r3, [pc, #276]	; (8004dd4 <ai_platform_network_init+0x1d8>)
 8004cbe:	6832      	ldr	r2, [r6, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d115      	bne.n	8004cf0 <ai_platform_network_init+0xf4>
 8004cc4:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004cc8:	6933      	ldr	r3, [r6, #16]
 8004cca:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8004cce:	89f7      	ldrh	r7, [r6, #14]
 8004cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cd2:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	84e7      	strh	r7, [r4, #38]	; 0x26
 8004cda:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004cde:	60e3      	str	r3, [r4, #12]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	4626      	mov	r6, r4
 8004ce4:	f000 fbc2 	bl	800546c <ai_layers_init_all>
 8004ce8:	4630      	mov	r0, r6
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	e7fe      	b.n	8004cee <ai_platform_network_init+0xf2>
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	4635      	mov	r5, r6
 8004cf6:	6876      	ldr	r6, [r6, #4]
 8004cf8:	f7ff f894 	bl	8003e24 <ai_buffer_get_size>
 8004cfc:	f105 081c 	add.w	r8, r5, #28
 8004d00:	4681      	mov	r9, r0
 8004d02:	2101      	movs	r1, #1
 8004d04:	4640      	mov	r0, r8
 8004d06:	6a2f      	ldr	r7, [r5, #32]
 8004d08:	f7ff f88c 	bl	8003e24 <ai_buffer_get_size>
 8004d0c:	f1b9 0f00 	cmp.w	r9, #0
 8004d10:	d025      	beq.n	8004d5e <ai_platform_network_init+0x162>
 8004d12:	2201      	movs	r2, #1
 8004d14:	4696      	mov	lr, r2
 8004d16:	bb30      	cbnz	r0, 8004d66 <ai_platform_network_init+0x16a>
 8004d18:	4680      	mov	r8, r0
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	b376      	cbz	r6, 8004d7c <ai_platform_network_init+0x180>
 8004d1e:	8be3      	ldrh	r3, [r4, #30]
 8004d20:	4573      	cmp	r3, lr
 8004d22:	d323      	bcc.n	8004d6c <ai_platform_network_init+0x170>
 8004d24:	b142      	cbz	r2, 8004d38 <ai_platform_network_init+0x13c>
 8004d26:	46ac      	mov	ip, r5
 8004d28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004d2c:	6a25      	ldr	r5, [r4, #32]
 8004d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d30:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004d34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004d38:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004d3a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004d3e:	2600      	movs	r6, #0
 8004d40:	42bb      	cmp	r3, r7
 8004d42:	83a6      	strh	r6, [r4, #28]
 8004d44:	d323      	bcc.n	8004d8e <ai_platform_network_init+0x192>
 8004d46:	b37f      	cbz	r7, 8004da8 <ai_platform_network_init+0x1ac>
 8004d48:	46c4      	mov	ip, r8
 8004d4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004d4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d52:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004d56:	46b6      	mov	lr, r6
 8004d58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004d5c:	e7bb      	b.n	8004cd6 <ai_platform_network_init+0xda>
 8004d5e:	464a      	mov	r2, r9
 8004d60:	46ce      	mov	lr, r9
 8004d62:	464d      	mov	r5, r9
 8004d64:	e7d7      	b.n	8004d16 <ai_platform_network_init+0x11a>
 8004d66:	b30f      	cbz	r7, 8004dac <ai_platform_network_init+0x1b0>
 8004d68:	2701      	movs	r7, #1
 8004d6a:	e7d7      	b.n	8004d1c <ai_platform_network_init+0x120>
 8004d6c:	2212      	movs	r2, #18
 8004d6e:	2116      	movs	r1, #22
 8004d70:	f104 0010 	add.w	r0, r4, #16
 8004d74:	f000 fb44 	bl	8005400 <core_set_error>
 8004d78:	2600      	movs	r6, #0
 8004d7a:	e78c      	b.n	8004c96 <ai_platform_network_init+0x9a>
 8004d7c:	f1b9 0f00 	cmp.w	r9, #0
 8004d80:	d0cd      	beq.n	8004d1e <ai_platform_network_init+0x122>
 8004d82:	2110      	movs	r1, #16
 8004d84:	2212      	movs	r2, #18
 8004d86:	1860      	adds	r0, r4, r1
 8004d88:	f000 fb3a 	bl	8005400 <core_set_error>
 8004d8c:	e783      	b.n	8004c96 <ai_platform_network_init+0x9a>
 8004d8e:	2213      	movs	r2, #19
 8004d90:	2116      	movs	r1, #22
 8004d92:	f104 0010 	add.w	r0, r4, #16
 8004d96:	f000 fb33 	bl	8005400 <core_set_error>
 8004d9a:	e77c      	b.n	8004c96 <ai_platform_network_init+0x9a>
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	2211      	movs	r2, #17
 8004da0:	1860      	adds	r0, r4, r1
 8004da2:	f000 fb2d 	bl	8005400 <core_set_error>
 8004da6:	e776      	b.n	8004c96 <ai_platform_network_init+0x9a>
 8004da8:	46be      	mov	lr, r7
 8004daa:	e794      	b.n	8004cd6 <ai_platform_network_init+0xda>
 8004dac:	2110      	movs	r1, #16
 8004dae:	2213      	movs	r2, #19
 8004db0:	1860      	adds	r0, r4, r1
 8004db2:	f000 fb25 	bl	8005400 <core_set_error>
 8004db6:	463e      	mov	r6, r7
 8004db8:	e76d      	b.n	8004c96 <ai_platform_network_init+0x9a>
 8004dba:	bf00      	nop
 8004dbc:	a1c00100 	.word	0xa1c00100
 8004dc0:	e0042000 	.word	0xe0042000
 8004dc4:	58024000 	.word	0x58024000
 8004dc8:	f407a5c2 	.word	0xf407a5c2
 8004dcc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004dd0:	40023000 	.word	0x40023000
 8004dd4:	a1facade 	.word	0xa1facade

08004dd8 <ai_platform_network_post_init>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	b1f0      	cbz	r0, 8004e1a <ai_platform_network_post_init+0x42>
 8004ddc:	4b3c      	ldr	r3, [pc, #240]	; (8004ed0 <ai_platform_network_post_init+0xf8>)
 8004dde:	6802      	ldr	r2, [r0, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	4604      	mov	r4, r0
 8004de4:	d119      	bne.n	8004e1a <ai_platform_network_post_init+0x42>
 8004de6:	f7ff f86b 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004dea:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <ai_platform_network_post_init+0xfc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df6:	d03b      	beq.n	8004e70 <ai_platform_network_post_init+0x98>
 8004df8:	4a37      	ldr	r2, [pc, #220]	; (8004ed8 <ai_platform_network_post_init+0x100>)
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e00:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1fb      	bne.n	8004e00 <ai_platform_network_post_init+0x28>
 8004e08:	4b34      	ldr	r3, [pc, #208]	; (8004edc <ai_platform_network_post_init+0x104>)
 8004e0a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e12:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <ai_platform_network_post_init+0x108>)
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d037      	beq.n	8004e88 <ai_platform_network_post_init+0xb0>
 8004e18:	e7fe      	b.n	8004e18 <ai_platform_network_post_init+0x40>
 8004e1a:	f7ff f851 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004e1e:	4b2d      	ldr	r3, [pc, #180]	; (8004ed4 <ai_platform_network_post_init+0xfc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d010      	beq.n	8004e4e <ai_platform_network_post_init+0x76>
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <ai_platform_network_post_init+0x100>)
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1fb      	bne.n	8004e34 <ai_platform_network_post_init+0x5c>
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <ai_platform_network_post_init+0x104>)
 8004e3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004e42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <ai_platform_network_post_init+0x108>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d00d      	beq.n	8004e68 <ai_platform_network_post_init+0x90>
 8004e4c:	e7fe      	b.n	8004e4c <ai_platform_network_post_init+0x74>
 8004e4e:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <ai_platform_network_post_init+0x10c>)
 8004e50:	2301      	movs	r3, #1
 8004e52:	6093      	str	r3, [r2, #8]
 8004e54:	6893      	ldr	r3, [r2, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1fc      	bne.n	8004e54 <ai_platform_network_post_init+0x7c>
 8004e5a:	4b20      	ldr	r3, [pc, #128]	; (8004edc <ai_platform_network_post_init+0x104>)
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <ai_platform_network_post_init+0x108>)
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d000      	beq.n	8004e68 <ai_platform_network_post_init+0x90>
 8004e66:	e7fe      	b.n	8004e66 <ai_platform_network_post_init+0x8e>
 8004e68:	f7ff f82c 	bl	8003ec4 <_ai_platform_release_crc>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <ai_platform_network_post_init+0x10c>)
 8004e72:	2301      	movs	r3, #1
 8004e74:	6093      	str	r3, [r2, #8]
 8004e76:	6893      	ldr	r3, [r2, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1fc      	bne.n	8004e76 <ai_platform_network_post_init+0x9e>
 8004e7c:	4b17      	ldr	r3, [pc, #92]	; (8004edc <ai_platform_network_post_init+0x104>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <ai_platform_network_post_init+0x108>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d11a      	bne.n	8004ebe <ai_platform_network_post_init+0xe6>
 8004e88:	f7ff f81c 	bl	8003ec4 <_ai_platform_release_crc>
 8004e8c:	68e3      	ldr	r3, [r4, #12]
 8004e8e:	f013 0502 	ands.w	r5, r3, #2
 8004e92:	d015      	beq.n	8004ec0 <ai_platform_network_post_init+0xe8>
 8004e94:	4620      	mov	r0, r4
 8004e96:	f000 faf7 	bl	8005488 <ai_layers_post_init_all>
 8004e9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e9c:	b16b      	cbz	r3, 8004eba <ai_platform_network_post_init+0xe2>
 8004e9e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004ea0:	e007      	b.n	8004eb2 <ai_platform_network_post_init+0xda>
 8004ea2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004ea6:	4798      	blx	r3
 8004ea8:	692b      	ldr	r3, [r5, #16]
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	d005      	beq.n	8004eba <ai_platform_network_post_init+0xe2>
 8004eae:	b123      	cbz	r3, 8004eba <ai_platform_network_post_init+0xe2>
 8004eb0:	461d      	mov	r5, r3
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	d1f3      	bne.n	8004ea2 <ai_platform_network_post_init+0xca>
 8004eba:	2001      	movs	r0, #1
 8004ebc:	bd38      	pop	{r3, r4, r5, pc}
 8004ebe:	e7fe      	b.n	8004ebe <ai_platform_network_post_init+0xe6>
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	2111      	movs	r1, #17
 8004ec4:	18a0      	adds	r0, r4, r2
 8004ec6:	f000 fa9b 	bl	8005400 <core_set_error>
 8004eca:	4628      	mov	r0, r5
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
 8004ece:	bf00      	nop
 8004ed0:	a1c00100 	.word	0xa1c00100
 8004ed4:	e0042000 	.word	0xe0042000
 8004ed8:	58024000 	.word	0x58024000
 8004edc:	f407a5c2 	.word	0xf407a5c2
 8004ee0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ee4:	40023000 	.word	0x40023000

08004ee8 <ai_platform_network_process>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	460e      	mov	r6, r1
 8004eee:	b085      	sub	sp, #20
 8004ef0:	4693      	mov	fp, r2
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	b120      	cbz	r0, 8004f00 <ai_platform_network_process+0x18>
 8004ef6:	4bb8      	ldr	r3, [pc, #736]	; (80051d8 <ai_platform_network_process+0x2f0>)
 8004ef8:	6802      	ldr	r2, [r0, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	bf18      	it	ne
 8004efe:	2500      	movne	r5, #0
 8004f00:	f7fe ffde 	bl	8003ec0 <_ai_platform_acquire_crc>
 8004f04:	4bb5      	ldr	r3, [pc, #724]	; (80051dc <ai_platform_network_process+0x2f4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f10:	d010      	beq.n	8004f34 <ai_platform_network_process+0x4c>
 8004f12:	4ab3      	ldr	r2, [pc, #716]	; (80051e0 <ai_platform_network_process+0x2f8>)
 8004f14:	2301      	movs	r3, #1
 8004f16:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f1a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1fb      	bne.n	8004f1a <ai_platform_network_process+0x32>
 8004f22:	4bb0      	ldr	r3, [pc, #704]	; (80051e4 <ai_platform_network_process+0x2fc>)
 8004f24:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f2c:	4bae      	ldr	r3, [pc, #696]	; (80051e8 <ai_platform_network_process+0x300>)
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d00d      	beq.n	8004f4e <ai_platform_network_process+0x66>
 8004f32:	e7fe      	b.n	8004f32 <ai_platform_network_process+0x4a>
 8004f34:	4aad      	ldr	r2, [pc, #692]	; (80051ec <ai_platform_network_process+0x304>)
 8004f36:	2301      	movs	r3, #1
 8004f38:	6093      	str	r3, [r2, #8]
 8004f3a:	6893      	ldr	r3, [r2, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1fc      	bne.n	8004f3a <ai_platform_network_process+0x52>
 8004f40:	4ba8      	ldr	r3, [pc, #672]	; (80051e4 <ai_platform_network_process+0x2fc>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	4ba8      	ldr	r3, [pc, #672]	; (80051e8 <ai_platform_network_process+0x300>)
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	f040 812c 	bne.w	80051a6 <ai_platform_network_process+0x2be>
 8004f4e:	f7fe ffb9 	bl	8003ec4 <_ai_platform_release_crc>
 8004f52:	2d00      	cmp	r5, #0
 8004f54:	f000 8154 	beq.w	8005200 <ai_platform_network_process+0x318>
 8004f58:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8124 	beq.w	80051a8 <ai_platform_network_process+0x2c0>
 8004f60:	68eb      	ldr	r3, [r5, #12]
 8004f62:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2700      	movs	r7, #0
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	616f      	str	r7, [r5, #20]
 8004f70:	f040 813e 	bne.w	80051f0 <ai_platform_network_process+0x308>
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	f000 811d 	beq.w	80051b4 <ai_platform_network_process+0x2cc>
 8004f7a:	f1ba 0f00 	cmp.w	sl, #0
 8004f7e:	f000 8119 	beq.w	80051b4 <ai_platform_network_process+0x2cc>
 8004f82:	f8ba 3000 	ldrh.w	r3, [sl]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8114 	beq.w	80051b4 <ai_platform_network_process+0x2cc>
 8004f8c:	69b3      	ldr	r3, [r6, #24]
 8004f8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004f98:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d072      	beq.n	8005086 <ai_platform_network_process+0x19e>
 8004fa0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	d06e      	beq.n	8005086 <ai_platform_network_process+0x19e>
 8004fa8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004fac:	f8d3 9000 	ldr.w	r9, [r3]
 8004fb0:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004fb4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004fb8:	f000 81de 	beq.w	8005378 <ai_platform_network_process+0x490>
 8004fbc:	69a3      	ldr	r3, [r4, #24]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	685d      	ldr	r5, [r3, #4]
 8004fc4:	f7fe ff2e 	bl	8003e24 <ai_buffer_get_size>
 8004fc8:	4285      	cmp	r5, r0
 8004fca:	f0c0 811b 	bcc.w	8005204 <ai_platform_network_process+0x31c>
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	69b1      	ldr	r1, [r6, #24]
 8004fd2:	68c2      	ldr	r2, [r0, #12]
 8004fd4:	68cb      	ldr	r3, [r1, #12]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	f040 8114 	bne.w	8005204 <ai_platform_network_process+0x31c>
 8004fdc:	6882      	ldr	r2, [r0, #8]
 8004fde:	688b      	ldr	r3, [r1, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	f040 810f 	bne.w	8005204 <ai_platform_network_process+0x31c>
 8004fe6:	6842      	ldr	r2, [r0, #4]
 8004fe8:	684b      	ldr	r3, [r1, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	f040 810a 	bne.w	8005204 <ai_platform_network_process+0x31c>
 8004ff0:	69a3      	ldr	r3, [r4, #24]
 8004ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ff6:	f001 f95f 	bl	80062b8 <ai_array_get_data_byte_size>
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f001 f985 	bl	800630c <get_tensor_byte_size>
 8005002:	4285      	cmp	r5, r0
 8005004:	f0c0 80fe 	bcc.w	8005204 <ai_platform_network_process+0x31c>
 8005008:	69a3      	ldr	r3, [r4, #24]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	f001 f8c0 	bl	8006190 <ai_array_to_buffer_fmt>
 8005010:	6833      	ldr	r3, [r6, #0]
 8005012:	4058      	eors	r0, r3
 8005014:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005018:	f040 81b9 	bne.w	800538e <ai_platform_network_process+0x4a6>
 800501c:	6873      	ldr	r3, [r6, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 81ac 	beq.w	800537c <ai_platform_network_process+0x494>
 8005024:	69b3      	ldr	r3, [r6, #24]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 819c 	beq.w	8005366 <ai_platform_network_process+0x47e>
 800502e:	9a01      	ldr	r2, [sp, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	bf38      	it	cc
 8005034:	461a      	movcc	r2, r3
 8005036:	4620      	mov	r0, r4
 8005038:	9201      	str	r2, [sp, #4]
 800503a:	f001 f967 	bl	800630c <get_tensor_byte_size>
 800503e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005042:	69b3      	ldr	r3, [r6, #24]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	fb00 f303 	mul.w	r3, r0, r3
 800504a:	f8c8 300c 	str.w	r3, [r8, #12]
 800504e:	6871      	ldr	r1, [r6, #4]
 8005050:	f8c8 1004 	str.w	r1, [r8, #4]
 8005054:	440b      	add	r3, r1
 8005056:	f849 300b 	str.w	r3, [r9, fp]
 800505a:	69a0      	ldr	r0, [r4, #24]
 800505c:	6803      	ldr	r3, [r0, #0]
 800505e:	009a      	lsls	r2, r3, #2
 8005060:	f107 0701 	add.w	r7, r7, #1
 8005064:	f106 061c 	add.w	r6, r6, #28
 8005068:	f100 80af 	bmi.w	80051ca <ai_platform_network_process+0x2e2>
 800506c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	4419      	add	r1, r3
 8005074:	6081      	str	r1, [r0, #8]
 8005076:	69a3      	ldr	r3, [r4, #24]
 8005078:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005082:	42bb      	cmp	r3, r7
 8005084:	d888      	bhi.n	8004f98 <ai_platform_network_process+0xb0>
 8005086:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800508a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800508c:	f1bb 0f00 	cmp.w	fp, #0
 8005090:	f000 8186 	beq.w	80053a0 <ai_platform_network_process+0x4b8>
 8005094:	2a01      	cmp	r2, #1
 8005096:	f240 815e 	bls.w	8005356 <ai_platform_network_process+0x46e>
 800509a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800509e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8157 	beq.w	8005356 <ai_platform_network_process+0x46e>
 80050a8:	465e      	mov	r6, fp
 80050aa:	2700      	movs	r7, #0
 80050ac:	462c      	mov	r4, r5
 80050ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80b4 	beq.w	8005220 <ai_platform_network_process+0x338>
 80050b8:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80050bc:	2d00      	cmp	r5, #0
 80050be:	f000 80af 	beq.w	8005220 <ai_platform_network_process+0x338>
 80050c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80050c6:	f8d3 8000 	ldr.w	r8, [r3]
 80050ca:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80050ce:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80050d2:	f000 8171 	beq.w	80053b8 <ai_platform_network_process+0x4d0>
 80050d6:	69ab      	ldr	r3, [r5, #24]
 80050d8:	2101      	movs	r1, #1
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	4630      	mov	r0, r6
 80050e0:	f7fe fea0 	bl	8003e24 <ai_buffer_get_size>
 80050e4:	9b02      	ldr	r3, [sp, #8]
 80050e6:	4283      	cmp	r3, r0
 80050e8:	f0c0 8134 	bcc.w	8005354 <ai_platform_network_process+0x46c>
 80050ec:	68e8      	ldr	r0, [r5, #12]
 80050ee:	69b1      	ldr	r1, [r6, #24]
 80050f0:	68c2      	ldr	r2, [r0, #12]
 80050f2:	68cb      	ldr	r3, [r1, #12]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	f040 812d 	bne.w	8005354 <ai_platform_network_process+0x46c>
 80050fa:	6882      	ldr	r2, [r0, #8]
 80050fc:	688b      	ldr	r3, [r1, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	f040 8128 	bne.w	8005354 <ai_platform_network_process+0x46c>
 8005104:	6842      	ldr	r2, [r0, #4]
 8005106:	684b      	ldr	r3, [r1, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	f040 8123 	bne.w	8005354 <ai_platform_network_process+0x46c>
 800510e:	69ab      	ldr	r3, [r5, #24]
 8005110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005114:	f001 f8d0 	bl	80062b8 <ai_array_get_data_byte_size>
 8005118:	9002      	str	r0, [sp, #8]
 800511a:	4628      	mov	r0, r5
 800511c:	f001 f8f6 	bl	800630c <get_tensor_byte_size>
 8005120:	9b02      	ldr	r3, [sp, #8]
 8005122:	4283      	cmp	r3, r0
 8005124:	f0c0 8116 	bcc.w	8005354 <ai_platform_network_process+0x46c>
 8005128:	69ab      	ldr	r3, [r5, #24]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	f001 f830 	bl	8006190 <ai_array_to_buffer_fmt>
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	4058      	eors	r0, r3
 8005134:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005138:	f040 8136 	bne.w	80053a8 <ai_platform_network_process+0x4c0>
 800513c:	6873      	ldr	r3, [r6, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 814d 	beq.w	80053de <ai_platform_network_process+0x4f6>
 8005144:	69b3      	ldr	r3, [r6, #24]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 813f 	beq.w	80053cc <ai_platform_network_process+0x4e4>
 800514e:	9a01      	ldr	r2, [sp, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	bf38      	it	cc
 8005154:	461a      	movcc	r2, r3
 8005156:	4628      	mov	r0, r5
 8005158:	9201      	str	r2, [sp, #4]
 800515a:	f001 f8d7 	bl	800630c <get_tensor_byte_size>
 800515e:	f8ca 0008 	str.w	r0, [sl, #8]
 8005162:	69b3      	ldr	r3, [r6, #24]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	fb00 f303 	mul.w	r3, r0, r3
 800516a:	f8ca 300c 	str.w	r3, [sl, #12]
 800516e:	6871      	ldr	r1, [r6, #4]
 8005170:	f8ca 1004 	str.w	r1, [sl, #4]
 8005174:	440b      	add	r3, r1
 8005176:	f848 300b 	str.w	r3, [r8, fp]
 800517a:	69a8      	ldr	r0, [r5, #24]
 800517c:	6803      	ldr	r3, [r0, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	f107 0701 	add.w	r7, r7, #1
 8005184:	f106 061c 	add.w	r6, r6, #28
 8005188:	d445      	bmi.n	8005216 <ai_platform_network_process+0x32e>
 800518a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	4419      	add	r1, r3
 8005192:	6081      	str	r1, [r0, #8]
 8005194:	69ab      	ldr	r3, [r5, #24]
 8005196:	f8da 2004 	ldr.w	r2, [sl, #4]
 800519a:	60da      	str	r2, [r3, #12]
 800519c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80051a0:	429f      	cmp	r7, r3
 80051a2:	d384      	bcc.n	80050ae <ai_platform_network_process+0x1c6>
 80051a4:	e03c      	b.n	8005220 <ai_platform_network_process+0x338>
 80051a6:	e7fe      	b.n	80051a6 <ai_platform_network_process+0x2be>
 80051a8:	68ea      	ldr	r2, [r5, #12]
 80051aa:	616b      	str	r3, [r5, #20]
 80051ac:	f002 0203 	and.w	r2, r2, #3
 80051b0:	2a03      	cmp	r2, #3
 80051b2:	d11d      	bne.n	80051f0 <ai_platform_network_process+0x308>
 80051b4:	2217      	movs	r2, #23
 80051b6:	2112      	movs	r1, #18
 80051b8:	f105 0010 	add.w	r0, r5, #16
 80051bc:	f000 f920 	bl	8005400 <core_set_error>
 80051c0:	2400      	movs	r4, #0
 80051c2:	4620      	mov	r0, r4
 80051c4:	b005      	add	sp, #20
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80051ce:	429f      	cmp	r7, r3
 80051d0:	f4ff aee2 	bcc.w	8004f98 <ai_platform_network_process+0xb0>
 80051d4:	e757      	b.n	8005086 <ai_platform_network_process+0x19e>
 80051d6:	bf00      	nop
 80051d8:	a1c00100 	.word	0xa1c00100
 80051dc:	e0042000 	.word	0xe0042000
 80051e0:	58024000 	.word	0x58024000
 80051e4:	f407a5c2 	.word	0xf407a5c2
 80051e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80051ec:	40023000 	.word	0x40023000
 80051f0:	2230      	movs	r2, #48	; 0x30
 80051f2:	2111      	movs	r1, #17
 80051f4:	f105 0010 	add.w	r0, r5, #16
 80051f8:	f000 f902 	bl	8005400 <core_set_error>
 80051fc:	2400      	movs	r4, #0
 80051fe:	e7e0      	b.n	80051c2 <ai_platform_network_process+0x2da>
 8005200:	462c      	mov	r4, r5
 8005202:	e7de      	b.n	80051c2 <ai_platform_network_process+0x2da>
 8005204:	9d02      	ldr	r5, [sp, #8]
 8005206:	2218      	movs	r2, #24
 8005208:	2112      	movs	r1, #18
 800520a:	f105 0010 	add.w	r0, r5, #16
 800520e:	f000 f8f7 	bl	8005400 <core_set_error>
 8005212:	2400      	movs	r4, #0
 8005214:	e7d5      	b.n	80051c2 <ai_platform_network_process+0x2da>
 8005216:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800521a:	429f      	cmp	r7, r3
 800521c:	f4ff af47 	bcc.w	80050ae <ai_platform_network_process+0x1c6>
 8005220:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005224:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005226:	82a3      	strh	r3, [r4, #20]
 8005228:	4625      	mov	r5, r4
 800522a:	2a00      	cmp	r2, #0
 800522c:	f040 808c 	bne.w	8005348 <ai_platform_network_process+0x460>
 8005230:	4616      	mov	r6, r2
 8005232:	4617      	mov	r7, r2
 8005234:	8aec      	ldrh	r4, [r5, #22]
 8005236:	429c      	cmp	r4, r3
 8005238:	bf38      	it	cc
 800523a:	46ab      	movcc	fp, r5
 800523c:	d2c1      	bcs.n	80051c2 <ai_platform_network_process+0x2da>
 800523e:	2e00      	cmp	r6, #0
 8005240:	d030      	beq.n	80052a4 <ai_platform_network_process+0x3bc>
 8005242:	f04f 0800 	mov.w	r8, #0
 8005246:	e014      	b.n	8005272 <ai_platform_network_process+0x38a>
 8005248:	6882      	ldr	r2, [r0, #8]
 800524a:	68c5      	ldr	r5, [r0, #12]
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	1b52      	subs	r2, r2, r5
 8005250:	4413      	add	r3, r2
 8005252:	6083      	str	r3, [r0, #8]
 8005254:	698b      	ldr	r3, [r1, #24]
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800525e:	f859 200a 	ldr.w	r2, [r9, sl]
 8005262:	440b      	add	r3, r1
 8005264:	4293      	cmp	r3, r2
 8005266:	bf24      	itt	cs
 8005268:	68e3      	ldrcs	r3, [r4, #12]
 800526a:	1ad3      	subcs	r3, r2, r3
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	f108 0801 	add.w	r8, r8, #1
 8005272:	8833      	ldrh	r3, [r6, #0]
 8005274:	4543      	cmp	r3, r8
 8005276:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800527a:	d913      	bls.n	80052a4 <ai_platform_network_process+0x3bc>
 800527c:	6873      	ldr	r3, [r6, #4]
 800527e:	b18b      	cbz	r3, 80052a4 <ai_platform_network_process+0x3bc>
 8005280:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005284:	b171      	cbz	r1, 80052a4 <ai_platform_network_process+0x3bc>
 8005286:	6988      	ldr	r0, [r1, #24]
 8005288:	68b2      	ldr	r2, [r6, #8]
 800528a:	6803      	ldr	r3, [r0, #0]
 800528c:	f8d2 9000 	ldr.w	r9, [r2]
 8005290:	009d      	lsls	r5, r3, #2
 8005292:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005296:	d5d7      	bpl.n	8005248 <ai_platform_network_process+0x360>
 8005298:	6881      	ldr	r1, [r0, #8]
 800529a:	68a2      	ldr	r2, [r4, #8]
 800529c:	6860      	ldr	r0, [r4, #4]
 800529e:	f000 fef1 	bl	8006084 <st_int8_copy>
 80052a2:	e7da      	b.n	800525a <ai_platform_network_process+0x372>
 80052a4:	4658      	mov	r0, fp
 80052a6:	f000 f903 	bl	80054b0 <ai_layers_forward_all>
 80052aa:	2f00      	cmp	r7, #0
 80052ac:	d03d      	beq.n	800532a <ai_platform_network_process+0x442>
 80052ae:	2400      	movs	r4, #0
 80052b0:	e016      	b.n	80052e0 <ai_platform_network_process+0x3f8>
 80052b2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80052b6:	f859 100a 	ldr.w	r1, [r9, sl]
 80052ba:	4413      	add	r3, r2
 80052bc:	428b      	cmp	r3, r1
 80052be:	bf24      	itt	cs
 80052c0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80052c4:	1acb      	subcs	r3, r1, r3
 80052c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80052ca:	6981      	ldr	r1, [r0, #24]
 80052cc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80052d0:	1b52      	subs	r2, r2, r5
 80052d2:	4413      	add	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
 80052d6:	6983      	ldr	r3, [r0, #24]
 80052d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	3401      	adds	r4, #1
 80052e0:	883b      	ldrh	r3, [r7, #0]
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	d921      	bls.n	800532a <ai_platform_network_process+0x442>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	b1fb      	cbz	r3, 800532a <ai_platform_network_process+0x442>
 80052ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80052ee:	b1e0      	cbz	r0, 800532a <ai_platform_network_process+0x442>
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	6983      	ldr	r3, [r0, #24]
 80052f4:	f8d2 9000 	ldr.w	r9, [r2]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005300:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005304:	d5d5      	bpl.n	80052b2 <ai_platform_network_process+0x3ca>
 8005306:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800530a:	6898      	ldr	r0, [r3, #8]
 800530c:	f000 feba 	bl	8006084 <st_int8_copy>
 8005310:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005314:	f859 200a 	ldr.w	r2, [r9, sl]
 8005318:	440b      	add	r3, r1
 800531a:	4293      	cmp	r3, r2
 800531c:	bf24      	itt	cs
 800531e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005322:	1ad3      	subcs	r3, r2, r3
 8005324:	f8c8 3004 	str.w	r3, [r8, #4]
 8005328:	e7d9      	b.n	80052de <ai_platform_network_process+0x3f6>
 800532a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800532e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005332:	3401      	adds	r4, #1
 8005334:	b2a4      	uxth	r4, r4
 8005336:	42a3      	cmp	r3, r4
 8005338:	f8ab 4016 	strh.w	r4, [fp, #22]
 800533c:	f63f af7f 	bhi.w	800523e <ai_platform_network_process+0x356>
 8005340:	4620      	mov	r0, r4
 8005342:	b005      	add	sp, #20
 8005344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005348:	2a01      	cmp	r2, #1
 800534a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800534c:	d03c      	beq.n	80053c8 <ai_platform_network_process+0x4e0>
 800534e:	f106 070c 	add.w	r7, r6, #12
 8005352:	e76f      	b.n	8005234 <ai_platform_network_process+0x34c>
 8005354:	4625      	mov	r5, r4
 8005356:	2218      	movs	r2, #24
 8005358:	2113      	movs	r1, #19
 800535a:	f105 0010 	add.w	r0, r5, #16
 800535e:	f000 f84f 	bl	8005400 <core_set_error>
 8005362:	2400      	movs	r4, #0
 8005364:	e72d      	b.n	80051c2 <ai_platform_network_process+0x2da>
 8005366:	9d02      	ldr	r5, [sp, #8]
 8005368:	4604      	mov	r4, r0
 800536a:	2221      	movs	r2, #33	; 0x21
 800536c:	2112      	movs	r1, #18
 800536e:	f105 0010 	add.w	r0, r5, #16
 8005372:	f000 f845 	bl	8005400 <core_set_error>
 8005376:	e724      	b.n	80051c2 <ai_platform_network_process+0x2da>
 8005378:	9d02      	ldr	r5, [sp, #8]
 800537a:	e71b      	b.n	80051b4 <ai_platform_network_process+0x2cc>
 800537c:	9d02      	ldr	r5, [sp, #8]
 800537e:	4604      	mov	r4, r0
 8005380:	2217      	movs	r2, #23
 8005382:	2112      	movs	r1, #18
 8005384:	f105 0010 	add.w	r0, r5, #16
 8005388:	f000 f83a 	bl	8005400 <core_set_error>
 800538c:	e719      	b.n	80051c2 <ai_platform_network_process+0x2da>
 800538e:	9d02      	ldr	r5, [sp, #8]
 8005390:	2219      	movs	r2, #25
 8005392:	2112      	movs	r1, #18
 8005394:	f105 0010 	add.w	r0, r5, #16
 8005398:	f000 f832 	bl	8005400 <core_set_error>
 800539c:	2400      	movs	r4, #0
 800539e:	e710      	b.n	80051c2 <ai_platform_network_process+0x2da>
 80053a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80053a4:	82ab      	strh	r3, [r5, #20]
 80053a6:	e740      	b.n	800522a <ai_platform_network_process+0x342>
 80053a8:	f104 0010 	add.w	r0, r4, #16
 80053ac:	2219      	movs	r2, #25
 80053ae:	2113      	movs	r1, #19
 80053b0:	f000 f826 	bl	8005400 <core_set_error>
 80053b4:	2400      	movs	r4, #0
 80053b6:	e704      	b.n	80051c2 <ai_platform_network_process+0x2da>
 80053b8:	f104 0010 	add.w	r0, r4, #16
 80053bc:	2217      	movs	r2, #23
 80053be:	2113      	movs	r1, #19
 80053c0:	f000 f81e 	bl	8005400 <core_set_error>
 80053c4:	4654      	mov	r4, sl
 80053c6:	e6fc      	b.n	80051c2 <ai_platform_network_process+0x2da>
 80053c8:	2700      	movs	r7, #0
 80053ca:	e733      	b.n	8005234 <ai_platform_network_process+0x34c>
 80053cc:	4625      	mov	r5, r4
 80053ce:	2221      	movs	r2, #33	; 0x21
 80053d0:	4604      	mov	r4, r0
 80053d2:	2113      	movs	r1, #19
 80053d4:	f105 0010 	add.w	r0, r5, #16
 80053d8:	f000 f812 	bl	8005400 <core_set_error>
 80053dc:	e6f1      	b.n	80051c2 <ai_platform_network_process+0x2da>
 80053de:	4625      	mov	r5, r4
 80053e0:	2217      	movs	r2, #23
 80053e2:	4604      	mov	r4, r0
 80053e4:	2113      	movs	r1, #19
 80053e6:	f105 0010 	add.w	r0, r5, #16
 80053ea:	f000 f809 	bl	8005400 <core_set_error>
 80053ee:	e6e8      	b.n	80051c2 <ai_platform_network_process+0x2da>

080053f0 <core_init>:
 80053f0:	2001      	movs	r0, #1
 80053f2:	4770      	bx	lr

080053f4 <core_get_error>:
 80053f4:	4603      	mov	r3, r0
 80053f6:	2200      	movs	r2, #0
 80053f8:	6800      	ldr	r0, [r0, #0]
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop

08005400 <core_set_error>:
 8005400:	4603      	mov	r3, r0
 8005402:	7800      	ldrb	r0, [r0, #0]
 8005404:	b108      	cbz	r0, 800540a <core_set_error+0xa>
 8005406:	2000      	movs	r0, #0
 8005408:	4770      	bx	lr
 800540a:	7019      	strb	r1, [r3, #0]
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	f362 211f 	bfi	r1, r2, #8, #24
 8005412:	2001      	movs	r0, #1
 8005414:	6019      	str	r1, [r3, #0]
 8005416:	4770      	bx	lr

08005418 <ai_check_custom_types>:
 8005418:	b082      	sub	sp, #8
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <ai_check_custom_types+0x50>)
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	b118      	cbz	r0, 8005428 <ai_check_custom_types+0x10>
 8005420:	7803      	ldrb	r3, [r0, #0]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d002      	beq.n	800542c <ai_check_custom_types+0x14>
 8005426:	2000      	movs	r0, #0
 8005428:	b002      	add	sp, #8
 800542a:	4770      	bx	lr
 800542c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <ai_check_custom_types+0x26>
 8005434:	2001      	movs	r0, #1
 8005436:	f080 0001 	eor.w	r0, r0, #1
 800543a:	b002      	add	sp, #8
 800543c:	4770      	bx	lr
 800543e:	7842      	ldrb	r2, [r0, #1]
 8005440:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005444:	429a      	cmp	r2, r3
 8005446:	f100 0001 	add.w	r0, r0, #1
 800544a:	d1f3      	bne.n	8005434 <ai_check_custom_types+0x1c>
 800544c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005450:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005454:	429a      	cmp	r2, r3
 8005456:	d1ed      	bne.n	8005434 <ai_check_custom_types+0x1c>
 8005458:	7842      	ldrb	r2, [r0, #1]
 800545a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d1e8      	bne.n	8005434 <ai_check_custom_types+0x1c>
 8005462:	2000      	movs	r0, #0
 8005464:	e7e7      	b.n	8005436 <ai_check_custom_types+0x1e>
 8005466:	bf00      	nop
 8005468:	84048403 	.word	0x84048403

0800546c <ai_layers_init_all>:
 800546c:	4601      	mov	r1, r0
 800546e:	2000      	movs	r0, #0
 8005470:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005472:	b143      	cbz	r3, 8005486 <ai_layers_init_all+0x1a>
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	60d9      	str	r1, [r3, #12]
 8005478:	429a      	cmp	r2, r3
 800547a:	f100 0001 	add.w	r0, r0, #1
 800547e:	d002      	beq.n	8005486 <ai_layers_init_all+0x1a>
 8005480:	b10a      	cbz	r2, 8005486 <ai_layers_init_all+0x1a>
 8005482:	4613      	mov	r3, r2
 8005484:	e7f5      	b.n	8005472 <ai_layers_init_all+0x6>
 8005486:	4770      	bx	lr

08005488 <ai_layers_post_init_all>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800548c:	2500      	movs	r5, #0
 800548e:	b16c      	cbz	r4, 80054ac <ai_layers_post_init_all+0x24>
 8005490:	6863      	ldr	r3, [r4, #4]
 8005492:	07db      	lsls	r3, r3, #31
 8005494:	d504      	bpl.n	80054a0 <ai_layers_post_init_all+0x18>
 8005496:	6a23      	ldr	r3, [r4, #32]
 8005498:	4620      	mov	r0, r4
 800549a:	b10b      	cbz	r3, 80054a0 <ai_layers_post_init_all+0x18>
 800549c:	4798      	blx	r3
 800549e:	3501      	adds	r5, #1
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	d002      	beq.n	80054ac <ai_layers_post_init_all+0x24>
 80054a6:	b10b      	cbz	r3, 80054ac <ai_layers_post_init_all+0x24>
 80054a8:	461c      	mov	r4, r3
 80054aa:	e7f0      	b.n	800548e <ai_layers_post_init_all+0x6>
 80054ac:	4628      	mov	r0, r5
 80054ae:	bd38      	pop	{r3, r4, r5, pc}

080054b0 <ai_layers_forward_all>:
 80054b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80054b8:	4604      	mov	r4, r0
 80054ba:	f1b8 0f00 	cmp.w	r8, #0
 80054be:	d02b      	beq.n	8005518 <ai_layers_forward_all+0x68>
 80054c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80054c2:	6381      	str	r1, [r0, #56]	; 0x38
 80054c4:	b321      	cbz	r1, 8005510 <ai_layers_forward_all+0x60>
 80054c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054c8:	2001      	movs	r0, #1
 80054ca:	47c0      	blx	r8
 80054cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80054ce:	b1fe      	cbz	r6, 8005510 <ai_layers_forward_all+0x60>
 80054d0:	2700      	movs	r7, #0
 80054d2:	4631      	mov	r1, r6
 80054d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054d6:	2002      	movs	r0, #2
 80054d8:	47c0      	blx	r8
 80054da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80054dc:	4628      	mov	r0, r5
 80054de:	696b      	ldr	r3, [r5, #20]
 80054e0:	4798      	blx	r3
 80054e2:	692e      	ldr	r6, [r5, #16]
 80054e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054e8:	42b5      	cmp	r5, r6
 80054ea:	f04f 0003 	mov.w	r0, #3
 80054ee:	d007      	beq.n	8005500 <ai_layers_forward_all+0x50>
 80054f0:	47c0      	blx	r8
 80054f2:	3701      	adds	r7, #1
 80054f4:	63a6      	str	r6, [r4, #56]	; 0x38
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	d1eb      	bne.n	80054d2 <ai_layers_forward_all+0x22>
 80054fa:	4638      	mov	r0, r7
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	2003      	movs	r0, #3
 8005502:	47c0      	blx	r8
 8005504:	2300      	movs	r3, #0
 8005506:	3701      	adds	r7, #1
 8005508:	63a3      	str	r3, [r4, #56]	; 0x38
 800550a:	4638      	mov	r0, r7
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	2700      	movs	r7, #0
 8005512:	4638      	mov	r0, r7
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800551a:	6385      	str	r5, [r0, #56]	; 0x38
 800551c:	2d00      	cmp	r5, #0
 800551e:	d0f7      	beq.n	8005510 <ai_layers_forward_all+0x60>
 8005520:	4647      	mov	r7, r8
 8005522:	696b      	ldr	r3, [r5, #20]
 8005524:	4628      	mov	r0, r5
 8005526:	4798      	blx	r3
 8005528:	462b      	mov	r3, r5
 800552a:	692d      	ldr	r5, [r5, #16]
 800552c:	429d      	cmp	r5, r3
 800552e:	d004      	beq.n	800553a <ai_layers_forward_all+0x8a>
 8005530:	63a5      	str	r5, [r4, #56]	; 0x38
 8005532:	3701      	adds	r7, #1
 8005534:	2d00      	cmp	r5, #0
 8005536:	d1f4      	bne.n	8005522 <ai_layers_forward_all+0x72>
 8005538:	e7df      	b.n	80054fa <ai_layers_forward_all+0x4a>
 800553a:	2300      	movs	r3, #0
 800553c:	63a3      	str	r3, [r4, #56]	; 0x38
 800553e:	3701      	adds	r7, #1
 8005540:	e7db      	b.n	80054fa <ai_layers_forward_all+0x4a>
 8005542:	bf00      	nop

08005544 <ai_layers_destroy_all>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005548:	2500      	movs	r5, #0
 800554a:	b16c      	cbz	r4, 8005568 <ai_layers_destroy_all+0x24>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	075b      	lsls	r3, r3, #29
 8005550:	d504      	bpl.n	800555c <ai_layers_destroy_all+0x18>
 8005552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005554:	4620      	mov	r0, r4
 8005556:	b10b      	cbz	r3, 800555c <ai_layers_destroy_all+0x18>
 8005558:	4798      	blx	r3
 800555a:	3501      	adds	r5, #1
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	42a3      	cmp	r3, r4
 8005560:	d002      	beq.n	8005568 <ai_layers_destroy_all+0x24>
 8005562:	b10b      	cbz	r3, 8005568 <ai_layers_destroy_all+0x24>
 8005564:	461c      	mov	r4, r3
 8005566:	e7f0      	b.n	800554a <ai_layers_destroy_all+0x6>
 8005568:	4628      	mov	r0, r5
 800556a:	bd38      	pop	{r3, r4, r5, pc}

0800556c <forward_dense>:
 800556c:	6983      	ldr	r3, [r0, #24]
 800556e:	881a      	ldrh	r2, [r3, #0]
 8005570:	2a00      	cmp	r2, #0
 8005572:	f000 8181 	beq.w	8005878 <forward_dense+0x30c>
 8005576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	ed2d 8b02 	vpush	{d8}
 800557e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005582:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005586:	b095      	sub	sp, #84	; 0x54
 8005588:	b105      	cbz	r5, 800558c <forward_dense+0x20>
 800558a:	682d      	ldr	r5, [r5, #0]
 800558c:	2a01      	cmp	r2, #1
 800558e:	f000 828f 	beq.w	8005ab0 <forward_dense+0x544>
 8005592:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8005596:	b106      	cbz	r6, 800559a <forward_dense+0x2e>
 8005598:	6836      	ldr	r6, [r6, #0]
 800559a:	2a02      	cmp	r2, #2
 800559c:	f000 816e 	beq.w	800587c <forward_dense+0x310>
 80055a0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80055a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8274 	beq.w	8005a94 <forward_dense+0x528>
 80055ac:	4619      	mov	r1, r3
 80055ae:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80055b2:	6809      	ldr	r1, [r1, #0]
 80055b4:	910d      	str	r1, [sp, #52]	; 0x34
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	f240 826e 	bls.w	8005a98 <forward_dense+0x52c>
 80055bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80055c2:	460b      	mov	r3, r1
 80055c4:	68e8      	ldr	r0, [r5, #12]
 80055c6:	68f7      	ldr	r7, [r6, #12]
 80055c8:	6840      	ldr	r0, [r0, #4]
 80055ca:	6999      	ldr	r1, [r3, #24]
 80055cc:	9013      	str	r0, [sp, #76]	; 0x4c
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	9012      	str	r0, [sp, #72]	; 0x48
 80055d4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80055d8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80055dc:	fb00 f404 	mul.w	r4, r0, r4
 80055e0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80055e4:	fa4e f000 	asr.w	r0, lr, r0
 80055e8:	2a03      	cmp	r2, #3
 80055ea:	9010      	str	r0, [sp, #64]	; 0x40
 80055ec:	f000 825d 	beq.w	8005aaa <forward_dense+0x53e>
 80055f0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80055f4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80055f8:	2a00      	cmp	r2, #0
 80055fa:	f000 8246 	beq.w	8005a8a <forward_dense+0x51e>
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	2a00      	cmp	r2, #0
 8005602:	f000 8242 	beq.w	8005a8a <forward_dense+0x51e>
 8005606:	2b04      	cmp	r3, #4
 8005608:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800560c:	f000 822c 	beq.w	8005a68 <forward_dense+0x4fc>
 8005610:	2b08      	cmp	r3, #8
 8005612:	f000 8229 	beq.w	8005a68 <forward_dense+0x4fc>
 8005616:	f04f 0b00 	mov.w	fp, #0
 800561a:	69b2      	ldr	r2, [r6, #24]
 800561c:	69ab      	ldr	r3, [r5, #24]
 800561e:	6891      	ldr	r1, [r2, #8]
 8005620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	6952      	ldr	r2, [r2, #20]
 8005626:	9106      	str	r1, [sp, #24]
 8005628:	fb07 f404 	mul.w	r4, r7, r4
 800562c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005630:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005632:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005636:	4281      	cmp	r1, r0
 8005638:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800563c:	900e      	str	r0, [sp, #56]	; 0x38
 800563e:	940c      	str	r4, [sp, #48]	; 0x30
 8005640:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005644:	f080 8113 	bcs.w	800586e <forward_dense+0x302>
 8005648:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800564a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8005898 <forward_dense+0x32c>
 800564e:	f021 0201 	bic.w	r2, r1, #1
 8005652:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005656:	9204      	str	r2, [sp, #16]
 8005658:	f001 0201 	and.w	r2, r1, #1
 800565c:	08c8      	lsrs	r0, r1, #3
 800565e:	9208      	str	r2, [sp, #32]
 8005660:	008a      	lsls	r2, r1, #2
 8005662:	f001 0a07 	and.w	sl, r1, #7
 8005666:	920f      	str	r2, [sp, #60]	; 0x3c
 8005668:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800566c:	3320      	adds	r3, #32
 800566e:	465c      	mov	r4, fp
 8005670:	9007      	str	r0, [sp, #28]
 8005672:	46cb      	mov	fp, r9
 8005674:	9205      	str	r2, [sp, #20]
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	46c1      	mov	r9, r8
 800567a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800567e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	9b02      	ldr	r3, [sp, #8]
 8005686:	3b20      	subs	r3, #32
 8005688:	930a      	str	r3, [sp, #40]	; 0x28
 800568a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800568c:	b10b      	cbz	r3, 8005692 <forward_dense+0x126>
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2c00      	cmp	r4, #0
 8005694:	f000 81da 	beq.w	8005a4c <forward_dense+0x4e0>
 8005698:	9910      	ldr	r1, [sp, #64]	; 0x40
 800569a:	2904      	cmp	r1, #4
 800569c:	9906      	ldr	r1, [sp, #24]
 800569e:	f000 80fd 	beq.w	800589c <forward_dense+0x330>
 80056a2:	4549      	cmp	r1, r9
 80056a4:	f080 80d2 	bcs.w	800584c <forward_dense+0x2e0>
 80056a8:	460f      	mov	r7, r1
 80056aa:	9907      	ldr	r1, [sp, #28]
 80056ac:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80056b0:	f8dd a014 	ldr.w	sl, [sp, #20]
 80056b4:	1c4e      	adds	r6, r1, #1
 80056b6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80056ba:	4694      	mov	ip, r2
 80056bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056be:	468e      	mov	lr, r1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80de 	beq.w	8005882 <forward_dense+0x316>
 80056c6:	ecf3 2a01 	vldmia	r3!, {s5}
 80056ca:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005898 <forward_dense+0x32c>
 80056ce:	f1be 0f00 	cmp.w	lr, #0
 80056d2:	f000 80de 	beq.w	8005892 <forward_dense+0x326>
 80056d6:	f10c 0108 	add.w	r1, ip, #8
 80056da:	4640      	mov	r0, r8
 80056dc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80056e0:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80056e4:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80056e8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80056ec:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80056f0:	ed10 5a04 	vldr	s10, [r0, #-16]
 80056f4:	ed50 5a03 	vldr	s11, [r0, #-12]
 80056f8:	ed10 6a02 	vldr	s12, [r0, #-8]
 80056fc:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005700:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005704:	edd5 7a00 	vldr	s15, [r5]
 8005708:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800570c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005710:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005714:	ed95 3a00 	vldr	s6, [r5]
 8005718:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800571c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005720:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005724:	3108      	adds	r1, #8
 8005726:	edd5 3a00 	vldr	s7, [r5]
 800572a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800572e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005732:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005736:	3020      	adds	r0, #32
 8005738:	ed95 4a00 	vldr	s8, [r5]
 800573c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005740:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005744:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005748:	edd5 4a00 	vldr	s9, [r5]
 800574c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005750:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005754:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005758:	ed95 5a00 	vldr	s10, [r5]
 800575c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005760:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005764:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005768:	edd5 5a00 	vldr	s11, [r5]
 800576c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005770:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005774:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005778:	428e      	cmp	r6, r1
 800577a:	ed95 6a00 	vldr	s12, [r5]
 800577e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005786:	d1a9      	bne.n	80056dc <forward_dense+0x170>
 8005788:	f1a6 0108 	sub.w	r1, r6, #8
 800578c:	4650      	mov	r0, sl
 800578e:	2a00      	cmp	r2, #0
 8005790:	d04a      	beq.n	8005828 <forward_dense+0x2bc>
 8005792:	780d      	ldrb	r5, [r1, #0]
 8005794:	edd0 6a00 	vldr	s13, [r0]
 8005798:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800579c:	edd5 7a00 	vldr	s15, [r5]
 80057a0:	2a01      	cmp	r2, #1
 80057a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057a6:	d03f      	beq.n	8005828 <forward_dense+0x2bc>
 80057a8:	784d      	ldrb	r5, [r1, #1]
 80057aa:	edd0 6a01 	vldr	s13, [r0, #4]
 80057ae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057b2:	edd5 7a00 	vldr	s15, [r5]
 80057b6:	2a02      	cmp	r2, #2
 80057b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057bc:	d034      	beq.n	8005828 <forward_dense+0x2bc>
 80057be:	788d      	ldrb	r5, [r1, #2]
 80057c0:	edd0 6a02 	vldr	s13, [r0, #8]
 80057c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057c8:	edd5 7a00 	vldr	s15, [r5]
 80057cc:	2a03      	cmp	r2, #3
 80057ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057d2:	d029      	beq.n	8005828 <forward_dense+0x2bc>
 80057d4:	78cd      	ldrb	r5, [r1, #3]
 80057d6:	edd0 6a03 	vldr	s13, [r0, #12]
 80057da:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057de:	edd5 7a00 	vldr	s15, [r5]
 80057e2:	2a04      	cmp	r2, #4
 80057e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057e8:	d01e      	beq.n	8005828 <forward_dense+0x2bc>
 80057ea:	790d      	ldrb	r5, [r1, #4]
 80057ec:	edd0 6a04 	vldr	s13, [r0, #16]
 80057f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80057f4:	edd5 7a00 	vldr	s15, [r5]
 80057f8:	2a05      	cmp	r2, #5
 80057fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80057fe:	d013      	beq.n	8005828 <forward_dense+0x2bc>
 8005800:	794d      	ldrb	r5, [r1, #5]
 8005802:	edd0 6a05 	vldr	s13, [r0, #20]
 8005806:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800580a:	edd5 7a00 	vldr	s15, [r5]
 800580e:	2a06      	cmp	r2, #6
 8005810:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005814:	d008      	beq.n	8005828 <forward_dense+0x2bc>
 8005816:	7989      	ldrb	r1, [r1, #6]
 8005818:	edd0 7a06 	vldr	s15, [r0, #24]
 800581c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005820:	edd1 6a00 	vldr	s13, [r1]
 8005824:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005828:	44dc      	add	ip, fp
 800582a:	445e      	add	r6, fp
 800582c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005830:	eca7 7a01 	vstmia	r7!, {s14}
 8005834:	454f      	cmp	r7, r9
 8005836:	f4ff af43 	bcc.w	80056c0 <forward_dense+0x154>
 800583a:	9a06      	ldr	r2, [sp, #24]
 800583c:	eba9 0302 	sub.w	r3, r9, r2
 8005840:	3b01      	subs	r3, #1
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	3304      	adds	r3, #4
 8005848:	18d3      	adds	r3, r2, r3
 800584a:	9306      	str	r3, [sp, #24]
 800584c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800584e:	9a05      	ldr	r2, [sp, #20]
 8005850:	4499      	add	r9, r3
 8005852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005854:	441a      	add	r2, r3
 8005856:	9205      	str	r2, [sp, #20]
 8005858:	9a02      	ldr	r2, [sp, #8]
 800585a:	441a      	add	r2, r3
 800585c:	9202      	str	r2, [sp, #8]
 800585e:	9a04      	ldr	r2, [sp, #16]
 8005860:	441a      	add	r2, r3
 8005862:	9204      	str	r2, [sp, #16]
 8005864:	9b06      	ldr	r3, [sp, #24]
 8005866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005868:	4293      	cmp	r3, r2
 800586a:	f4ff af08 	bcc.w	800567e <forward_dense+0x112>
 800586e:	b015      	add	sp, #84	; 0x54
 8005870:	ecbd 8b02 	vpop	{d8}
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	6853      	ldr	r3, [r2, #4]
 800587a:	deff      	udf	#255	; 0xff
 800587c:	2300      	movs	r3, #0
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	deff      	udf	#255	; 0xff
 8005882:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005898 <forward_dense+0x32c>
 8005886:	eef0 2a48 	vmov.f32	s5, s16
 800588a:	f1be 0f00 	cmp.w	lr, #0
 800588e:	f47f af22 	bne.w	80056d6 <forward_dense+0x16a>
 8005892:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005894:	4661      	mov	r1, ip
 8005896:	e77a      	b.n	800578e <forward_dense+0x222>
 8005898:	00000000 	.word	0x00000000
 800589c:	4549      	cmp	r1, r9
 800589e:	d2d5      	bcs.n	800584c <forward_dense+0x2e0>
 80058a0:	9807      	ldr	r0, [sp, #28]
 80058a2:	9103      	str	r1, [sp, #12]
 80058a4:	9904      	ldr	r1, [sp, #16]
 80058a6:	f100 0c01 	add.w	ip, r0, #1
 80058aa:	3901      	subs	r1, #1
 80058ac:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80058b0:	9109      	str	r1, [sp, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80b2 	beq.w	8005a1c <forward_dense+0x4b0>
 80058b8:	9907      	ldr	r1, [sp, #28]
 80058ba:	ecf3 2a01 	vldmia	r3!, {s5}
 80058be:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8005898 <forward_dense+0x32c>
 80058c2:	2900      	cmp	r1, #0
 80058c4:	f000 80b2 	beq.w	8005a2c <forward_dense+0x4c0>
 80058c8:	9902      	ldr	r1, [sp, #8]
 80058ca:	1d10      	adds	r0, r2, #4
 80058cc:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80058d0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80058d4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80058d8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80058dc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80058e0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80058e4:	ed11 5a04 	vldr	s10, [r1, #-16]
 80058e8:	ed51 5a03 	vldr	s11, [r1, #-12]
 80058ec:	ed11 6a02 	vldr	s12, [r1, #-8]
 80058f0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80058f4:	f006 070f 	and.w	r7, r6, #15
 80058f8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80058fc:	edd7 7a00 	vldr	s15, [r7]
 8005900:	0936      	lsrs	r6, r6, #4
 8005902:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005906:	ed96 3a00 	vldr	s6, [r6]
 800590a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800590e:	092e      	lsrs	r6, r5, #4
 8005910:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005914:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005918:	f005 050f 	and.w	r5, r5, #15
 800591c:	edd6 3a00 	vldr	s7, [r6]
 8005920:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005924:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005928:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800592c:	0937      	lsrs	r7, r6, #4
 800592e:	ed95 4a00 	vldr	s8, [r5]
 8005932:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8005936:	eee4 7a24 	vfma.f32	s15, s8, s9
 800593a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800593e:	f006 060f 	and.w	r6, r6, #15
 8005942:	edd7 4a00 	vldr	s9, [r7]
 8005946:	eee4 7a85 	vfma.f32	s15, s9, s10
 800594a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800594e:	3004      	adds	r0, #4
 8005950:	ed96 5a00 	vldr	s10, [r6]
 8005954:	092e      	lsrs	r6, r5, #4
 8005956:	eee5 7a25 	vfma.f32	s15, s10, s11
 800595a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800595e:	f005 050f 	and.w	r5, r5, #15
 8005962:	edd6 5a00 	vldr	s11, [r6]
 8005966:	eee5 7a86 	vfma.f32	s15, s11, s12
 800596a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800596e:	4584      	cmp	ip, r0
 8005970:	ed95 6a00 	vldr	s12, [r5]
 8005974:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005978:	f101 0120 	add.w	r1, r1, #32
 800597c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005980:	d1a4      	bne.n	80058cc <forward_dense+0x360>
 8005982:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005986:	f1ac 0804 	sub.w	r8, ip, #4
 800598a:	9904      	ldr	r1, [sp, #16]
 800598c:	458e      	cmp	lr, r1
 800598e:	d22a      	bcs.n	80059e6 <forward_dense+0x47a>
 8005990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005992:	eba1 070e 	sub.w	r7, r1, lr
 8005996:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800599a:	f10e 0008 	add.w	r0, lr, #8
 800599e:	f108 36ff 	add.w	r6, r8, #4294967295
 80059a2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80059a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059aa:	ed50 5a01 	vldr	s11, [r0, #-4]
 80059ae:	ed50 6a02 	vldr	s13, [r0, #-8]
 80059b2:	f001 050f 	and.w	r5, r1, #15
 80059b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80059ba:	edd5 7a00 	vldr	s15, [r5]
 80059be:	0909      	lsrs	r1, r1, #4
 80059c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80059c4:	ed91 6a00 	vldr	s12, [r1]
 80059c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80059cc:	42b7      	cmp	r7, r6
 80059ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80059d2:	f100 0008 	add.w	r0, r0, #8
 80059d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059da:	d1e4      	bne.n	80059a6 <forward_dense+0x43a>
 80059dc:	f10a 0a01 	add.w	sl, sl, #1
 80059e0:	44d0      	add	r8, sl
 80059e2:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80059e6:	9908      	ldr	r1, [sp, #32]
 80059e8:	b321      	cbz	r1, 8005a34 <forward_dense+0x4c8>
 80059ea:	f898 1000 	ldrb.w	r1, [r8]
 80059ee:	edde 7a00 	vldr	s15, [lr]
 80059f2:	0909      	lsrs	r1, r1, #4
 80059f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80059f8:	edd1 6a00 	vldr	s13, [r1]
 80059fc:	9903      	ldr	r1, [sp, #12]
 80059fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a02:	445a      	add	r2, fp
 8005a04:	44dc      	add	ip, fp
 8005a06:	ee72 2a87 	vadd.f32	s5, s5, s14
 8005a0a:	ece1 2a01 	vstmia	r1!, {s5}
 8005a0e:	4589      	cmp	r9, r1
 8005a10:	9103      	str	r1, [sp, #12]
 8005a12:	f67f af12 	bls.w	800583a <forward_dense+0x2ce>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f47f af4e 	bne.w	80058b8 <forward_dense+0x34c>
 8005a1c:	9907      	ldr	r1, [sp, #28]
 8005a1e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8005898 <forward_dense+0x32c>
 8005a22:	eef0 2a48 	vmov.f32	s5, s16
 8005a26:	2900      	cmp	r1, #0
 8005a28:	f47f af4e 	bne.w	80058c8 <forward_dense+0x35c>
 8005a2c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005a30:	4690      	mov	r8, r2
 8005a32:	e7aa      	b.n	800598a <forward_dense+0x41e>
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005a3a:	445a      	add	r2, fp
 8005a3c:	eca1 7a01 	vstmia	r1!, {s14}
 8005a40:	4549      	cmp	r1, r9
 8005a42:	9103      	str	r1, [sp, #12]
 8005a44:	44dc      	add	ip, fp
 8005a46:	f4ff af34 	bcc.w	80058b2 <forward_dense+0x346>
 8005a4a:	e6f6      	b.n	800583a <forward_dense+0x2ce>
 8005a4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005a4e:	9d06      	ldr	r5, [sp, #24]
 8005a50:	9101      	str	r1, [sp, #4]
 8005a52:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a54:	9100      	str	r1, [sp, #0]
 8005a56:	4628      	mov	r0, r5
 8005a58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a5a:	f000 f9ef 	bl	8005e3c <forward_lite_dense_if32of32wf32>
 8005a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a60:	462b      	mov	r3, r5
 8005a62:	4413      	add	r3, r2
 8005a64:	9306      	str	r3, [sp, #24]
 8005a66:	e6f1      	b.n	800584c <forward_dense+0x2e0>
 8005a68:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005a6c:	f1b9 0f00 	cmp.w	r9, #0
 8005a70:	d016      	beq.n	8005aa0 <forward_dense+0x534>
 8005a72:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a76:	f000 fbf7 	bl	8006268 <ai_array_get_byte_size>
 8005a7a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4659      	mov	r1, fp
 8005a82:	4640      	mov	r0, r8
 8005a84:	f000 fafe 	bl	8006084 <st_int8_copy>
 8005a88:	e5c7      	b.n	800561a <forward_dense+0xae>
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d00a      	beq.n	8005aa4 <forward_dense+0x538>
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	e5bd      	b.n	8005610 <forward_dense+0xa4>
 8005a94:	930d      	str	r3, [sp, #52]	; 0x34
 8005a96:	e595      	b.n	80055c4 <forward_dense+0x58>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	e591      	b.n	80055c4 <forward_dense+0x58>
 8005aa0:	46c3      	mov	fp, r8
 8005aa2:	e5ba      	b.n	800561a <forward_dense+0xae>
 8005aa4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005aa8:	e5b7      	b.n	800561a <forward_dense+0xae>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	deff      	udf	#255	; 0xff
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	deff      	udf	#255	; 0xff
 8005ab6:	bf00      	nop

08005ab8 <forward_relu>:
 8005ab8:	6982      	ldr	r2, [r0, #24]
 8005aba:	8813      	ldrh	r3, [r2, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d05b      	beq.n	8005b78 <forward_relu+0xc0>
 8005ac0:	6851      	ldr	r1, [r2, #4]
 8005ac2:	684a      	ldr	r2, [r1, #4]
 8005ac4:	b102      	cbz	r2, 8005ac8 <forward_relu+0x10>
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f000 8123 	beq.w	8005d14 <forward_relu+0x25c>
 8005ace:	b470      	push	{r4, r5, r6}
 8005ad0:	6909      	ldr	r1, [r1, #16]
 8005ad2:	b101      	cbz	r1, 8005ad6 <forward_relu+0x1e>
 8005ad4:	6809      	ldr	r1, [r1, #0]
 8005ad6:	69c6      	ldr	r6, [r0, #28]
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	f000 8097 	beq.w	8005c0c <forward_relu+0x154>
 8005ade:	6873      	ldr	r3, [r6, #4]
 8005ae0:	6988      	ldr	r0, [r1, #24]
 8005ae2:	6991      	ldr	r1, [r2, #24]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f000 80c1 	beq.w	8005c6c <forward_relu+0x1b4>
 8005aea:	6893      	ldr	r3, [r2, #8]
 8005aec:	6880      	ldr	r0, [r0, #8]
 8005aee:	688c      	ldr	r4, [r1, #8]
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f000 80f2 	beq.w	8005cda <forward_relu+0x222>
 8005af6:	68d5      	ldr	r5, [r2, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005afe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b02:	42ab      	cmp	r3, r5
 8005b04:	fb01 f202 	mul.w	r2, r1, r2
 8005b08:	d1f9      	bne.n	8005afe <forward_relu+0x46>
 8005b0a:	68b3      	ldr	r3, [r6, #8]
 8005b0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b10:	edd3 6a00 	vldr	s13, [r3]
 8005b14:	ed93 6a01 	vldr	s12, [r3, #4]
 8005b18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005b1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005b20:	3a01      	subs	r2, #1
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b2a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005b2e:	d425      	bmi.n	8005b7c <forward_relu+0xc4>
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d81f      	bhi.n	8005b74 <forward_relu+0xbc>
 8005b34:	1d1a      	adds	r2, r3, #4
 8005b36:	1d01      	adds	r1, r0, #4
 8005b38:	e00d      	b.n	8005b56 <forward_relu+0x9e>
 8005b3a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b42:	db03      	blt.n	8005b4c <forward_relu+0x94>
 8005b44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b4c:	3b08      	subs	r3, #8
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	ed61 7a01 	vstmdb	r1!, {s15}
 8005b54:	d80e      	bhi.n	8005b74 <forward_relu+0xbc>
 8005b56:	4613      	mov	r3, r2
 8005b58:	ed72 7a01 	vldmdb	r2!, {s15}
 8005b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b64:	d9e9      	bls.n	8005b3a <forward_relu+0x82>
 8005b66:	3b08      	subs	r3, #8
 8005b68:	eef0 7a47 	vmov.f32	s15, s14
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005b72:	d9f0      	bls.n	8005b56 <forward_relu+0x9e>
 8005b74:	bc70      	pop	{r4, r5, r6}
 8005b76:	4770      	bx	lr
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	deff      	udf	#255	; 0xff
 8005b7c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	d11f      	bne.n	8005bc6 <forward_relu+0x10e>
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d8f4      	bhi.n	8005b74 <forward_relu+0xbc>
 8005b8a:	1b1c      	subs	r4, r3, r4
 8005b8c:	f024 0403 	bic.w	r4, r4, #3
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	2500      	movs	r5, #0
 8005b94:	1b1b      	subs	r3, r3, r4
 8005b96:	1d01      	adds	r1, r0, #4
 8005b98:	ed72 7a01 	vldmdb	r2!, {s15}
 8005b9c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba4:	dc0a      	bgt.n	8005bbc <forward_relu+0x104>
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005bac:	d0e2      	beq.n	8005b74 <forward_relu+0xbc>
 8005bae:	ed72 7a01 	vldmdb	r2!, {s15}
 8005bb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bba:	ddf4      	ble.n	8005ba6 <forward_relu+0xee>
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	ed61 7a01 	vstmdb	r1!, {s15}
 8005bc2:	d1e9      	bne.n	8005b98 <forward_relu+0xe0>
 8005bc4:	e7d6      	b.n	8005b74 <forward_relu+0xbc>
 8005bc6:	429c      	cmp	r4, r3
 8005bc8:	d8d4      	bhi.n	8005b74 <forward_relu+0xbc>
 8005bca:	1b1c      	subs	r4, r3, r4
 8005bcc:	f024 0403 	bic.w	r4, r4, #3
 8005bd0:	1d1a      	adds	r2, r3, #4
 8005bd2:	1d01      	adds	r1, r0, #4
 8005bd4:	1b1b      	subs	r3, r3, r4
 8005bd6:	ed72 7a01 	vldmdb	r2!, {s15}
 8005bda:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be2:	db0e      	blt.n	8005c02 <forward_relu+0x14a>
 8005be4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005be8:	4293      	cmp	r3, r2
 8005bea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005bee:	ed61 7a01 	vstmdb	r1!, {s15}
 8005bf2:	d0bf      	beq.n	8005b74 <forward_relu+0xbc>
 8005bf4:	ed72 7a01 	vldmdb	r2!, {s15}
 8005bf8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c00:	daf0      	bge.n	8005be4 <forward_relu+0x12c>
 8005c02:	4293      	cmp	r3, r2
 8005c04:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c08:	d1e5      	bne.n	8005bd6 <forward_relu+0x11e>
 8005c0a:	e7b3      	b.n	8005b74 <forward_relu+0xbc>
 8005c0c:	6893      	ldr	r3, [r2, #8]
 8005c0e:	6989      	ldr	r1, [r1, #24]
 8005c10:	6990      	ldr	r0, [r2, #24]
 8005c12:	6889      	ldr	r1, [r1, #8]
 8005c14:	6884      	ldr	r4, [r0, #8]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	d075      	beq.n	8005d06 <forward_relu+0x24e>
 8005c1a:	68d5      	ldr	r5, [r2, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005c22:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005c26:	429d      	cmp	r5, r3
 8005c28:	fb00 f202 	mul.w	r2, r0, r2
 8005c2c:	d1f9      	bne.n	8005c22 <forward_relu+0x16a>
 8005c2e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005c32:	3b01      	subs	r3, #1
 8005c34:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005c38:	4294      	cmp	r4, r2
 8005c3a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005c3e:	d899      	bhi.n	8005b74 <forward_relu+0xbc>
 8005c40:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005d1c <forward_relu+0x264>
 8005c44:	3204      	adds	r2, #4
 8005c46:	3104      	adds	r1, #4
 8005c48:	4613      	mov	r3, r2
 8005c4a:	ed72 7a01 	vldmdb	r2!, {s15}
 8005c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	f1a3 0308 	sub.w	r3, r3, #8
 8005c5a:	bfb8      	it	lt
 8005c5c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005c60:	429c      	cmp	r4, r3
 8005c62:	ed61 7a01 	vstmdb	r1!, {s15}
 8005c66:	d9ef      	bls.n	8005c48 <forward_relu+0x190>
 8005c68:	bc70      	pop	{r4, r5, r6}
 8005c6a:	4770      	bx	lr
 8005c6c:	688c      	ldr	r4, [r1, #8]
 8005c6e:	6891      	ldr	r1, [r2, #8]
 8005c70:	6880      	ldr	r0, [r0, #8]
 8005c72:	0a09      	lsrs	r1, r1, #8
 8005c74:	d049      	beq.n	8005d0a <forward_relu+0x252>
 8005c76:	68d5      	ldr	r5, [r2, #12]
 8005c78:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005c7c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005c80:	42aa      	cmp	r2, r5
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	d1f9      	bne.n	8005c7c <forward_relu+0x1c4>
 8005c88:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005c8c:	3a01      	subs	r2, #1
 8005c8e:	68b1      	ldr	r1, [r6, #8]
 8005c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c94:	429c      	cmp	r4, r3
 8005c96:	ed91 7a00 	vldr	s14, [r1]
 8005c9a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005c9e:	f63f af69 	bhi.w	8005b74 <forward_relu+0xbc>
 8005ca2:	2500      	movs	r5, #0
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	1d02      	adds	r2, r0, #4
 8005ca8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	f1a3 0104 	sub.w	r1, r3, #4
 8005cb8:	f1a3 0308 	sub.w	r3, r3, #8
 8005cbc:	d406      	bmi.n	8005ccc <forward_relu+0x214>
 8005cbe:	429c      	cmp	r4, r3
 8005cc0:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005cc4:	f63f af56 	bhi.w	8005b74 <forward_relu+0xbc>
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e7ed      	b.n	8005ca8 <forward_relu+0x1f0>
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	ed62 7a01 	vstmdb	r2!, {s15}
 8005cd2:	f63f af4f 	bhi.w	8005b74 <forward_relu+0xbc>
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e7e6      	b.n	8005ca8 <forward_relu+0x1f0>
 8005cda:	68b3      	ldr	r3, [r6, #8]
 8005cdc:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ce0:	edd3 6a00 	vldr	s13, [r3]
 8005ce4:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ce8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf0:	d401      	bmi.n	8005cf6 <forward_relu+0x23e>
 8005cf2:	4623      	mov	r3, r4
 8005cf4:	e71e      	b.n	8005b34 <forward_relu+0x7c>
 8005cf6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	4623      	mov	r3, r4
 8005d00:	f47f af63 	bne.w	8005bca <forward_relu+0x112>
 8005d04:	e741      	b.n	8005b8a <forward_relu+0xd2>
 8005d06:	4622      	mov	r2, r4
 8005d08:	e79a      	b.n	8005c40 <forward_relu+0x188>
 8005d0a:	68b2      	ldr	r2, [r6, #8]
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	ed92 7a00 	vldr	s14, [r2]
 8005d12:	e7c6      	b.n	8005ca2 <forward_relu+0x1ea>
 8005d14:	2300      	movs	r3, #0
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	deff      	udf	#255	; 0xff
 8005d1a:	bf00      	nop
 8005d1c:	00000000 	.word	0x00000000

08005d20 <forward_sm>:
 8005d20:	6982      	ldr	r2, [r0, #24]
 8005d22:	8813      	ldrh	r3, [r2, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d07c      	beq.n	8005e22 <forward_sm+0x102>
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	ed2d 8b04 	vpush	{d8-d9}
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	6854      	ldr	r4, [r2, #4]
 8005d34:	b085      	sub	sp, #20
 8005d36:	b104      	cbz	r4, 8005d3a <forward_sm+0x1a>
 8005d38:	6824      	ldr	r4, [r4, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d076      	beq.n	8005e2c <forward_sm+0x10c>
 8005d3e:	6913      	ldr	r3, [r2, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d076      	beq.n	8005e32 <forward_sm+0x112>
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	68a3      	ldr	r3, [r4, #8]
 8005d48:	68e0      	ldr	r0, [r4, #12]
 8005d4a:	68f2      	ldr	r2, [r6, #12]
 8005d4c:	6845      	ldr	r5, [r0, #4]
 8005d4e:	6857      	ldr	r7, [r2, #4]
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	d068      	beq.n	8005e26 <forward_sm+0x106>
 8005d54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	fb01 f202 	mul.w	r2, r1, r2
 8005d64:	d1f9      	bne.n	8005d5a <forward_sm+0x3a>
 8005d66:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8005d6a:	69a2      	ldr	r2, [r4, #24]
 8005d6c:	69b3      	ldr	r3, [r6, #24]
 8005d6e:	6892      	ldr	r2, [r2, #8]
 8005d70:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8005d74:	eb02 0309 	add.w	r3, r2, r9
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	d24c      	bcs.n	8005e18 <forward_sm+0xf8>
 8005d7e:	00bb      	lsls	r3, r7, #2
 8005d80:	9303      	str	r3, [sp, #12]
 8005d82:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8005d86:	00ab      	lsls	r3, r5, #2
 8005d88:	2d01      	cmp	r5, #1
 8005d8a:	ed92 8a00 	vldr	s16, [r2]
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005d94:	463e      	mov	r6, r7
 8005d96:	d93c      	bls.n	8005e12 <forward_sm+0xf2>
 8005d98:	1d13      	adds	r3, r2, #4
 8005d9a:	ecf3 7a01 	vldmia	r3!, {s15}
 8005d9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da6:	bfb8      	it	lt
 8005da8:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005dac:	429e      	cmp	r6, r3
 8005dae:	d1f4      	bne.n	8005d9a <forward_sm+0x7a>
 8005db0:	eddf 8a21 	vldr	s17, [pc, #132]	; 8005e38 <forward_sm+0x118>
 8005db4:	4692      	mov	sl, r2
 8005db6:	46c3      	mov	fp, r8
 8005db8:	46c1      	mov	r9, r8
 8005dba:	2400      	movs	r4, #0
 8005dbc:	ecba 0a01 	vldmia	sl!, {s0}
 8005dc0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005dc4:	f002 ffec 	bl	8008da0 <expf>
 8005dc8:	3401      	adds	r4, #1
 8005dca:	42a5      	cmp	r5, r4
 8005dcc:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005dd0:	eca9 0a01 	vstmia	r9!, {s0}
 8005dd4:	d8f2      	bhi.n	8005dbc <forward_sm+0x9c>
 8005dd6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	d00b      	beq.n	8005df8 <forward_sm+0xd8>
 8005de0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8005de4:	2300      	movs	r3, #0
 8005de6:	3301      	adds	r3, #1
 8005de8:	429d      	cmp	r5, r3
 8005dea:	eddb 7a00 	vldr	s15, [fp]
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	eceb 7a01 	vstmia	fp!, {s15}
 8005df6:	d8f6      	bhi.n	8005de6 <forward_sm+0xc6>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	9901      	ldr	r1, [sp, #4]
 8005dfc:	4498      	add	r8, r3
 8005dfe:	9b02      	ldr	r3, [sp, #8]
 8005e00:	42b9      	cmp	r1, r7
 8005e02:	463a      	mov	r2, r7
 8005e04:	441e      	add	r6, r3
 8005e06:	d907      	bls.n	8005e18 <forward_sm+0xf8>
 8005e08:	2d01      	cmp	r5, #1
 8005e0a:	ed92 8a00 	vldr	s16, [r2]
 8005e0e:	441f      	add	r7, r3
 8005e10:	d8c2      	bhi.n	8005d98 <forward_sm+0x78>
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	d0f0      	beq.n	8005df8 <forward_sm+0xd8>
 8005e16:	e7cb      	b.n	8005db0 <forward_sm+0x90>
 8005e18:	b005      	add	sp, #20
 8005e1a:	ecbd 8b04 	vpop	{d8-d9}
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	deff      	udf	#255	; 0xff
 8005e26:	f04f 0904 	mov.w	r9, #4
 8005e2a:	e79e      	b.n	8005d6a <forward_sm+0x4a>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	deff      	udf	#255	; 0xff
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	deff      	udf	#255	; 0xff
 8005e36:	bf00      	nop
 8005e38:	00000000 	.word	0x00000000

08005e3c <forward_lite_dense_if32of32wf32>:
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8005e44:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8005e48:	4287      	cmp	r7, r0
 8005e4a:	f240 8106 	bls.w	800605a <forward_lite_dense_if32of32wf32+0x21e>
 8005e4e:	f1a6 0810 	sub.w	r8, r6, #16
 8005e52:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8005e56:	f108 0801 	add.w	r8, r8, #1
 8005e5a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8005e5e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8005e62:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8005e66:	4605      	mov	r5, r0
 8005e68:	f006 0a0f 	and.w	sl, r6, #15
 8005e6c:	2e0f      	cmp	r6, #15
 8005e6e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006080 <forward_lite_dense_if32of32wf32+0x244>
 8005e72:	f240 8101 	bls.w	8006078 <forward_lite_dense_if32of32wf32+0x23c>
 8005e76:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8005e7a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8005e7e:	46b6      	mov	lr, r6
 8005e80:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8005e84:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8005e88:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8005e8c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8005e90:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8005e94:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8005e98:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8005e9c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8005ea0:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8005ea4:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8005ea8:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8005eac:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8005eb0:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005eb4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005eb8:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8005ebc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ec0:	f1ae 0e10 	sub.w	lr, lr, #16
 8005ec4:	f1be 0f0f 	cmp.w	lr, #15
 8005ec8:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8005ecc:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8005ed0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005ed4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005ed8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005edc:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8005ee0:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8005ee4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005ee8:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8005eec:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8005ef0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ef4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8005ef8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8005efc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f00:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8005f04:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8005f08:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005f0c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005f10:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8005f14:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005f18:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8005f1c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005f20:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f24:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005f28:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8005f2c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f30:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8005f34:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005f38:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005f3c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005f40:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005f44:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005f48:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f4c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f54:	d894      	bhi.n	8005e80 <forward_lite_dense_if32of32wf32+0x44>
 8005f56:	eb02 0e0b 	add.w	lr, r2, fp
 8005f5a:	4654      	mov	r4, sl
 8005f5c:	46c4      	mov	ip, r8
 8005f5e:	2c00      	cmp	r4, #0
 8005f60:	d075      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005f62:	eddc 6a00 	vldr	s13, [ip]
 8005f66:	edde 7a00 	vldr	s15, [lr]
 8005f6a:	2c01      	cmp	r4, #1
 8005f6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f70:	d06d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005f72:	eddc 6a01 	vldr	s13, [ip, #4]
 8005f76:	edde 7a01 	vldr	s15, [lr, #4]
 8005f7a:	2c02      	cmp	r4, #2
 8005f7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f80:	d065      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005f82:	eddc 6a02 	vldr	s13, [ip, #8]
 8005f86:	edde 7a02 	vldr	s15, [lr, #8]
 8005f8a:	2c03      	cmp	r4, #3
 8005f8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f90:	d05d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005f92:	eddc 6a03 	vldr	s13, [ip, #12]
 8005f96:	edde 7a03 	vldr	s15, [lr, #12]
 8005f9a:	2c04      	cmp	r4, #4
 8005f9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fa0:	d055      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005fa2:	eddc 6a04 	vldr	s13, [ip, #16]
 8005fa6:	edde 7a04 	vldr	s15, [lr, #16]
 8005faa:	2c05      	cmp	r4, #5
 8005fac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fb0:	d04d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005fb2:	eddc 6a05 	vldr	s13, [ip, #20]
 8005fb6:	edde 7a05 	vldr	s15, [lr, #20]
 8005fba:	2c06      	cmp	r4, #6
 8005fbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fc0:	d045      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005fc2:	eddc 6a06 	vldr	s13, [ip, #24]
 8005fc6:	edde 7a06 	vldr	s15, [lr, #24]
 8005fca:	2c07      	cmp	r4, #7
 8005fcc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fd0:	d03d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005fd2:	eddc 6a07 	vldr	s13, [ip, #28]
 8005fd6:	edde 7a07 	vldr	s15, [lr, #28]
 8005fda:	2c08      	cmp	r4, #8
 8005fdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fe0:	d035      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005fe2:	eddc 6a08 	vldr	s13, [ip, #32]
 8005fe6:	edde 7a08 	vldr	s15, [lr, #32]
 8005fea:	2c09      	cmp	r4, #9
 8005fec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ff0:	d02d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8005ff2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8005ff6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8005ffa:	2c0a      	cmp	r4, #10
 8005ffc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006000:	d025      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8006002:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8006006:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800600a:	2c0b      	cmp	r4, #11
 800600c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006010:	d01d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8006012:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8006016:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800601a:	2c0c      	cmp	r4, #12
 800601c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006020:	d015      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8006022:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8006026:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800602a:	3c0d      	subs	r4, #13
 800602c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006030:	d00d      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8006032:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8006036:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800603a:	2c01      	cmp	r4, #1
 800603c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006040:	d005      	beq.n	800604e <forward_lite_dense_if32of32wf32+0x212>
 8006042:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8006046:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800604a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800604e:	444a      	add	r2, r9
 8006050:	eca5 7a01 	vstmia	r5!, {s14}
 8006054:	42af      	cmp	r7, r5
 8006056:	f63f af09 	bhi.w	8005e6c <forward_lite_dense_if32of32wf32+0x30>
 800605a:	b15b      	cbz	r3, 8006074 <forward_lite_dense_if32of32wf32+0x238>
 800605c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605e:	b14a      	cbz	r2, 8006074 <forward_lite_dense_if32of32wf32+0x238>
 8006060:	edd0 7a00 	vldr	s15, [r0]
 8006064:	ecb3 7a01 	vldmia	r3!, {s14}
 8006068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800606c:	ece0 7a01 	vstmia	r0!, {s15}
 8006070:	4287      	cmp	r7, r0
 8006072:	d1f5      	bne.n	8006060 <forward_lite_dense_if32of32wf32+0x224>
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	4634      	mov	r4, r6
 800607a:	4696      	mov	lr, r2
 800607c:	468c      	mov	ip, r1
 800607e:	e76e      	b.n	8005f5e <forward_lite_dense_if32of32wf32+0x122>
 8006080:	00000000 	.word	0x00000000

08006084 <st_int8_copy>:
 8006084:	4288      	cmp	r0, r1
 8006086:	d057      	beq.n	8006138 <st_int8_copy+0xb4>
 8006088:	2a00      	cmp	r2, #0
 800608a:	d055      	beq.n	8006138 <st_int8_copy+0xb4>
 800608c:	4288      	cmp	r0, r1
 800608e:	d354      	bcc.n	800613a <st_int8_copy+0xb6>
 8006090:	078b      	lsls	r3, r1, #30
 8006092:	d102      	bne.n	800609a <st_int8_copy+0x16>
 8006094:	e009      	b.n	80060aa <st_int8_copy+0x26>
 8006096:	2a00      	cmp	r2, #0
 8006098:	d05c      	beq.n	8006154 <st_int8_copy+0xd0>
 800609a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800609e:	f801 3b01 	strb.w	r3, [r1], #1
 80060a2:	078b      	lsls	r3, r1, #30
 80060a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80060a8:	d1f5      	bne.n	8006096 <st_int8_copy+0x12>
 80060aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80060b2:	d069      	beq.n	8006188 <st_int8_copy+0x104>
 80060b4:	ea41 0300 	orr.w	r3, r1, r0
 80060b8:	075b      	lsls	r3, r3, #29
 80060ba:	d14c      	bne.n	8006156 <st_int8_copy+0xd2>
 80060bc:	f10e 33ff 	add.w	r3, lr, #4294967295
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d948      	bls.n	8006156 <st_int8_copy+0xd2>
 80060c4:	f100 0310 	add.w	r3, r0, #16
 80060c8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80060cc:	f101 0c10 	add.w	ip, r1, #16
 80060d0:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80060d4:	ed13 6b04 	vldr	d6, [r3, #-16]
 80060d8:	ed13 7b02 	vldr	d7, [r3, #-8]
 80060dc:	3310      	adds	r3, #16
 80060de:	4573      	cmp	r3, lr
 80060e0:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80060e4:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80060e8:	f10c 0c10 	add.w	ip, ip, #16
 80060ec:	d1f2      	bne.n	80060d4 <st_int8_copy+0x50>
 80060ee:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80060f2:	4421      	add	r1, r4
 80060f4:	4420      	add	r0, r4
 80060f6:	f002 0203 	and.w	r2, r2, #3
 80060fa:	b16b      	cbz	r3, 8006118 <st_int8_copy+0x94>
 80060fc:	6804      	ldr	r4, [r0, #0]
 80060fe:	600c      	str	r4, [r1, #0]
 8006100:	1e5c      	subs	r4, r3, #1
 8006102:	d005      	beq.n	8006110 <st_int8_copy+0x8c>
 8006104:	6845      	ldr	r5, [r0, #4]
 8006106:	604d      	str	r5, [r1, #4]
 8006108:	2c01      	cmp	r4, #1
 800610a:	bf1c      	itt	ne
 800610c:	6884      	ldrne	r4, [r0, #8]
 800610e:	608c      	strne	r4, [r1, #8]
 8006110:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006114:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006118:	b162      	cbz	r2, 8006134 <st_int8_copy+0xb0>
 800611a:	f990 3000 	ldrsb.w	r3, [r0]
 800611e:	700b      	strb	r3, [r1, #0]
 8006120:	3a01      	subs	r2, #1
 8006122:	d007      	beq.n	8006134 <st_int8_copy+0xb0>
 8006124:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006128:	704b      	strb	r3, [r1, #1]
 800612a:	2a01      	cmp	r2, #1
 800612c:	bf1c      	itt	ne
 800612e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8006132:	708b      	strbne	r3, [r1, #2]
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	4770      	bx	lr
 800613a:	1883      	adds	r3, r0, r2
 800613c:	428b      	cmp	r3, r1
 800613e:	d9a7      	bls.n	8006090 <st_int8_copy+0xc>
 8006140:	4283      	cmp	r3, r0
 8006142:	440a      	add	r2, r1
 8006144:	d9f8      	bls.n	8006138 <st_int8_copy+0xb4>
 8006146:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800614a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800614e:	4283      	cmp	r3, r0
 8006150:	d1f9      	bne.n	8006146 <st_int8_copy+0xc2>
 8006152:	4770      	bx	lr
 8006154:	4770      	bx	lr
 8006156:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800615a:	460b      	mov	r3, r1
 800615c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006160:	4684      	mov	ip, r0
 8006162:	f8dc 7000 	ldr.w	r7, [ip]
 8006166:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800616a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800616e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8006172:	f8c3 800c 	str.w	r8, [r3, #12]
 8006176:	601f      	str	r7, [r3, #0]
 8006178:	605e      	str	r6, [r3, #4]
 800617a:	609d      	str	r5, [r3, #8]
 800617c:	3310      	adds	r3, #16
 800617e:	459e      	cmp	lr, r3
 8006180:	f10c 0c10 	add.w	ip, ip, #16
 8006184:	d1ed      	bne.n	8006162 <st_int8_copy+0xde>
 8006186:	e7b2      	b.n	80060ee <st_int8_copy+0x6a>
 8006188:	0893      	lsrs	r3, r2, #2
 800618a:	f002 0203 	and.w	r2, r2, #3
 800618e:	e7b4      	b.n	80060fa <st_int8_copy+0x76>

08006190 <ai_array_to_buffer_fmt>:
 8006190:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006194:	2b02      	cmp	r3, #2
 8006196:	d050      	beq.n	800623a <ai_array_to_buffer_fmt+0xaa>
 8006198:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <ai_array_to_buffer_fmt+0xb4>)
 800619a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800619e:	429a      	cmp	r2, r3
 80061a0:	d00b      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061a2:	dc1c      	bgt.n	80061de <ai_array_to_buffer_fmt+0x4e>
 80061a4:	4b28      	ldr	r3, [pc, #160]	; (8006248 <ai_array_to_buffer_fmt+0xb8>)
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d007      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061aa:	dd0b      	ble.n	80061c4 <ai_array_to_buffer_fmt+0x34>
 80061ac:	4b27      	ldr	r3, [pc, #156]	; (800624c <ai_array_to_buffer_fmt+0xbc>)
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d003      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061b2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d131      	bne.n	800621e <ai_array_to_buffer_fmt+0x8e>
 80061ba:	4613      	mov	r3, r2
 80061bc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80061c0:	4318      	orrs	r0, r3
 80061c2:	4770      	bx	lr
 80061c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d0f6      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061cc:	dd2c      	ble.n	8006228 <ai_array_to_buffer_fmt+0x98>
 80061ce:	4b20      	ldr	r3, [pc, #128]	; (8006250 <ai_array_to_buffer_fmt+0xc0>)
 80061d0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80061d4:	429a      	cmp	r2, r3
 80061d6:	bf18      	it	ne
 80061d8:	2340      	movne	r3, #64	; 0x40
 80061da:	4318      	orrs	r0, r3
 80061dc:	4770      	bx	lr
 80061de:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <ai_array_to_buffer_fmt+0xc4>)
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d0ea      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061e4:	dd0e      	ble.n	8006204 <ai_array_to_buffer_fmt+0x74>
 80061e6:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <ai_array_to_buffer_fmt+0xc8>)
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d0e6      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061ec:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d0e2      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <ai_array_to_buffer_fmt+0xcc>)
 80061f6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80061fa:	429a      	cmp	r2, r3
 80061fc:	bf18      	it	ne
 80061fe:	2340      	movne	r3, #64	; 0x40
 8006200:	4318      	orrs	r0, r3
 8006202:	4770      	bx	lr
 8006204:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006208:	429a      	cmp	r2, r3
 800620a:	d0d6      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 800620c:	3307      	adds	r3, #7
 800620e:	429a      	cmp	r2, r3
 8006210:	d0d3      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 8006212:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8006216:	429a      	cmp	r2, r3
 8006218:	bf18      	it	ne
 800621a:	2340      	movne	r3, #64	; 0x40
 800621c:	e7ce      	b.n	80061bc <ai_array_to_buffer_fmt+0x2c>
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <ai_array_to_buffer_fmt+0xd0>)
 8006220:	429a      	cmp	r2, r3
 8006222:	bf18      	it	ne
 8006224:	2340      	movne	r3, #64	; 0x40
 8006226:	e7c9      	b.n	80061bc <ai_array_to_buffer_fmt+0x2c>
 8006228:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800622c:	429a      	cmp	r2, r3
 800622e:	d0c4      	beq.n	80061ba <ai_array_to_buffer_fmt+0x2a>
 8006230:	3380      	adds	r3, #128	; 0x80
 8006232:	429a      	cmp	r2, r3
 8006234:	bf18      	it	ne
 8006236:	2340      	movne	r3, #64	; 0x40
 8006238:	e7c0      	b.n	80061bc <ai_array_to_buffer_fmt+0x2c>
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <ai_array_to_buffer_fmt+0xd4>)
 800623c:	4003      	ands	r3, r0
 800623e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006242:	e7bb      	b.n	80061bc <ai_array_to_buffer_fmt+0x2c>
 8006244:	00840040 	.word	0x00840040
 8006248:	00040840 	.word	0x00040840
 800624c:	00041040 	.word	0x00041040
 8006250:	00040447 	.word	0x00040447
 8006254:	00840840 	.word	0x00840840
 8006258:	00841040 	.word	0x00841040
 800625c:	0084084f 	.word	0x0084084f
 8006260:	0004084f 	.word	0x0004084f
 8006264:	00803fff 	.word	0x00803fff

08006268 <ai_array_get_byte_size>:
 8006268:	b319      	cbz	r1, 80062b2 <ai_array_get_byte_size+0x4a>
 800626a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800626e:	fb03 f101 	mul.w	r1, r3, r1
 8006272:	3107      	adds	r1, #7
 8006274:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8006278:	f021 0307 	bic.w	r3, r1, #7
 800627c:	2a04      	cmp	r2, #4
 800627e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8006282:	fa23 f101 	lsr.w	r1, r3, r1
 8006286:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800628a:	d00b      	beq.n	80062a4 <ai_array_get_byte_size+0x3c>
 800628c:	2a08      	cmp	r2, #8
 800628e:	d002      	beq.n	8006296 <ai_array_get_byte_size+0x2e>
 8006290:	3107      	adds	r1, #7
 8006292:	08c8      	lsrs	r0, r1, #3
 8006294:	4770      	bx	lr
 8006296:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800629a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800629e:	3107      	adds	r1, #7
 80062a0:	08c8      	lsrs	r0, r1, #3
 80062a2:	4770      	bx	lr
 80062a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80062a8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80062ac:	3107      	adds	r1, #7
 80062ae:	08c8      	lsrs	r0, r1, #3
 80062b0:	4770      	bx	lr
 80062b2:	4608      	mov	r0, r1
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop

080062b8 <ai_array_get_data_byte_size>:
 80062b8:	b169      	cbz	r1, 80062d6 <ai_array_get_data_byte_size+0x1e>
 80062ba:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80062be:	fb02 f101 	mul.w	r1, r2, r1
 80062c2:	1dcb      	adds	r3, r1, #7
 80062c4:	f023 0307 	bic.w	r3, r3, #7
 80062c8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80062cc:	fa23 f000 	lsr.w	r0, r3, r0
 80062d0:	3007      	adds	r0, #7
 80062d2:	08c0      	lsrs	r0, r0, #3
 80062d4:	4770      	bx	lr
 80062d6:	4608      	mov	r0, r1
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop

080062dc <ai_version_get>:
 80062dc:	0212      	lsls	r2, r2, #8
 80062de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80062e2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80062e6:	4770      	bx	lr

080062e8 <ai_platform_version_get>:
 80062e8:	0e02      	lsrs	r2, r0, #24
 80062ea:	2300      	movs	r3, #0
 80062ec:	f362 0307 	bfi	r3, r2, #0, #8
 80062f0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80062f4:	f362 230f 	bfi	r3, r2, #8, #8
 80062f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80062fc:	f360 4317 	bfi	r3, r0, #16, #8
 8006300:	b082      	sub	sp, #8
 8006302:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8006306:	b002      	add	sp, #8
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop

0800630c <get_tensor_byte_size>:
 800630c:	b410      	push	{r4}
 800630e:	6983      	ldr	r3, [r0, #24]
 8006310:	68c4      	ldr	r4, [r0, #12]
 8006312:	6941      	ldr	r1, [r0, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68e0      	ldr	r0, [r4, #12]
 8006318:	4a07      	ldr	r2, [pc, #28]	; (8006338 <get_tensor_byte_size+0x2c>)
 800631a:	68c9      	ldr	r1, [r1, #12]
 800631c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006320:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006324:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006328:	fb01 f000 	mul.w	r0, r1, r0
 800632c:	4293      	cmp	r3, r2
 800632e:	bf04      	itt	eq
 8006330:	3007      	addeq	r0, #7
 8006332:	08c0      	lsreq	r0, r0, #3
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	000400c0 	.word	0x000400c0

0800633c <calloc>:
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <calloc+0xc>)
 800633e:	460a      	mov	r2, r1
 8006340:	4601      	mov	r1, r0
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	f000 b802 	b.w	800634c <_calloc_r>
 8006348:	200005b0 	.word	0x200005b0

0800634c <_calloc_r>:
 800634c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800634e:	fba1 2402 	umull	r2, r4, r1, r2
 8006352:	b94c      	cbnz	r4, 8006368 <_calloc_r+0x1c>
 8006354:	4611      	mov	r1, r2
 8006356:	9201      	str	r2, [sp, #4]
 8006358:	f000 f836 	bl	80063c8 <_malloc_r>
 800635c:	9a01      	ldr	r2, [sp, #4]
 800635e:	4605      	mov	r5, r0
 8006360:	b930      	cbnz	r0, 8006370 <_calloc_r+0x24>
 8006362:	4628      	mov	r0, r5
 8006364:	b003      	add	sp, #12
 8006366:	bd30      	pop	{r4, r5, pc}
 8006368:	220c      	movs	r2, #12
 800636a:	6002      	str	r2, [r0, #0]
 800636c:	2500      	movs	r5, #0
 800636e:	e7f8      	b.n	8006362 <_calloc_r+0x16>
 8006370:	4621      	mov	r1, r4
 8006372:	f000 ff11 	bl	8007198 <memset>
 8006376:	e7f4      	b.n	8006362 <_calloc_r+0x16>

08006378 <malloc>:
 8006378:	4b02      	ldr	r3, [pc, #8]	; (8006384 <malloc+0xc>)
 800637a:	4601      	mov	r1, r0
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	f000 b823 	b.w	80063c8 <_malloc_r>
 8006382:	bf00      	nop
 8006384:	200005b0 	.word	0x200005b0

08006388 <sbrk_aligned>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4e0e      	ldr	r6, [pc, #56]	; (80063c4 <sbrk_aligned+0x3c>)
 800638c:	460c      	mov	r4, r1
 800638e:	6831      	ldr	r1, [r6, #0]
 8006390:	4605      	mov	r5, r0
 8006392:	b911      	cbnz	r1, 800639a <sbrk_aligned+0x12>
 8006394:	f000 ff52 	bl	800723c <_sbrk_r>
 8006398:	6030      	str	r0, [r6, #0]
 800639a:	4621      	mov	r1, r4
 800639c:	4628      	mov	r0, r5
 800639e:	f000 ff4d 	bl	800723c <_sbrk_r>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d00a      	beq.n	80063bc <sbrk_aligned+0x34>
 80063a6:	1cc4      	adds	r4, r0, #3
 80063a8:	f024 0403 	bic.w	r4, r4, #3
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d007      	beq.n	80063c0 <sbrk_aligned+0x38>
 80063b0:	1a21      	subs	r1, r4, r0
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 ff42 	bl	800723c <_sbrk_r>
 80063b8:	3001      	adds	r0, #1
 80063ba:	d101      	bne.n	80063c0 <sbrk_aligned+0x38>
 80063bc:	f04f 34ff 	mov.w	r4, #4294967295
 80063c0:	4620      	mov	r0, r4
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	20000ab0 	.word	0x20000ab0

080063c8 <_malloc_r>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	1ccd      	adds	r5, r1, #3
 80063ce:	f025 0503 	bic.w	r5, r5, #3
 80063d2:	3508      	adds	r5, #8
 80063d4:	2d0c      	cmp	r5, #12
 80063d6:	bf38      	it	cc
 80063d8:	250c      	movcc	r5, #12
 80063da:	2d00      	cmp	r5, #0
 80063dc:	4607      	mov	r7, r0
 80063de:	db01      	blt.n	80063e4 <_malloc_r+0x1c>
 80063e0:	42a9      	cmp	r1, r5
 80063e2:	d905      	bls.n	80063f0 <_malloc_r+0x28>
 80063e4:	230c      	movs	r3, #12
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	2600      	movs	r6, #0
 80063ea:	4630      	mov	r0, r6
 80063ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064c4 <_malloc_r+0xfc>
 80063f4:	f000 f868 	bl	80064c8 <__malloc_lock>
 80063f8:	f8d8 3000 	ldr.w	r3, [r8]
 80063fc:	461c      	mov	r4, r3
 80063fe:	bb5c      	cbnz	r4, 8006458 <_malloc_r+0x90>
 8006400:	4629      	mov	r1, r5
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ffc0 	bl	8006388 <sbrk_aligned>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	4604      	mov	r4, r0
 800640c:	d155      	bne.n	80064ba <_malloc_r+0xf2>
 800640e:	f8d8 4000 	ldr.w	r4, [r8]
 8006412:	4626      	mov	r6, r4
 8006414:	2e00      	cmp	r6, #0
 8006416:	d145      	bne.n	80064a4 <_malloc_r+0xdc>
 8006418:	2c00      	cmp	r4, #0
 800641a:	d048      	beq.n	80064ae <_malloc_r+0xe6>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	4631      	mov	r1, r6
 8006420:	4638      	mov	r0, r7
 8006422:	eb04 0903 	add.w	r9, r4, r3
 8006426:	f000 ff09 	bl	800723c <_sbrk_r>
 800642a:	4581      	cmp	r9, r0
 800642c:	d13f      	bne.n	80064ae <_malloc_r+0xe6>
 800642e:	6821      	ldr	r1, [r4, #0]
 8006430:	1a6d      	subs	r5, r5, r1
 8006432:	4629      	mov	r1, r5
 8006434:	4638      	mov	r0, r7
 8006436:	f7ff ffa7 	bl	8006388 <sbrk_aligned>
 800643a:	3001      	adds	r0, #1
 800643c:	d037      	beq.n	80064ae <_malloc_r+0xe6>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	442b      	add	r3, r5
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	f8d8 3000 	ldr.w	r3, [r8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d038      	beq.n	80064be <_malloc_r+0xf6>
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	42a2      	cmp	r2, r4
 8006450:	d12b      	bne.n	80064aa <_malloc_r+0xe2>
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	e00f      	b.n	8006478 <_malloc_r+0xb0>
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	1b52      	subs	r2, r2, r5
 800645c:	d41f      	bmi.n	800649e <_malloc_r+0xd6>
 800645e:	2a0b      	cmp	r2, #11
 8006460:	d917      	bls.n	8006492 <_malloc_r+0xca>
 8006462:	1961      	adds	r1, r4, r5
 8006464:	42a3      	cmp	r3, r4
 8006466:	6025      	str	r5, [r4, #0]
 8006468:	bf18      	it	ne
 800646a:	6059      	strne	r1, [r3, #4]
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	bf08      	it	eq
 8006470:	f8c8 1000 	streq.w	r1, [r8]
 8006474:	5162      	str	r2, [r4, r5]
 8006476:	604b      	str	r3, [r1, #4]
 8006478:	4638      	mov	r0, r7
 800647a:	f104 060b 	add.w	r6, r4, #11
 800647e:	f000 f829 	bl	80064d4 <__malloc_unlock>
 8006482:	f026 0607 	bic.w	r6, r6, #7
 8006486:	1d23      	adds	r3, r4, #4
 8006488:	1af2      	subs	r2, r6, r3
 800648a:	d0ae      	beq.n	80063ea <_malloc_r+0x22>
 800648c:	1b9b      	subs	r3, r3, r6
 800648e:	50a3      	str	r3, [r4, r2]
 8006490:	e7ab      	b.n	80063ea <_malloc_r+0x22>
 8006492:	42a3      	cmp	r3, r4
 8006494:	6862      	ldr	r2, [r4, #4]
 8006496:	d1dd      	bne.n	8006454 <_malloc_r+0x8c>
 8006498:	f8c8 2000 	str.w	r2, [r8]
 800649c:	e7ec      	b.n	8006478 <_malloc_r+0xb0>
 800649e:	4623      	mov	r3, r4
 80064a0:	6864      	ldr	r4, [r4, #4]
 80064a2:	e7ac      	b.n	80063fe <_malloc_r+0x36>
 80064a4:	4634      	mov	r4, r6
 80064a6:	6876      	ldr	r6, [r6, #4]
 80064a8:	e7b4      	b.n	8006414 <_malloc_r+0x4c>
 80064aa:	4613      	mov	r3, r2
 80064ac:	e7cc      	b.n	8006448 <_malloc_r+0x80>
 80064ae:	230c      	movs	r3, #12
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4638      	mov	r0, r7
 80064b4:	f000 f80e 	bl	80064d4 <__malloc_unlock>
 80064b8:	e797      	b.n	80063ea <_malloc_r+0x22>
 80064ba:	6025      	str	r5, [r4, #0]
 80064bc:	e7dc      	b.n	8006478 <_malloc_r+0xb0>
 80064be:	605b      	str	r3, [r3, #4]
 80064c0:	deff      	udf	#255	; 0xff
 80064c2:	bf00      	nop
 80064c4:	20000aac 	.word	0x20000aac

080064c8 <__malloc_lock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__malloc_lock+0x8>)
 80064ca:	f000 bf03 	b.w	80072d4 <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	20000bf4 	.word	0x20000bf4

080064d4 <__malloc_unlock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__malloc_unlock+0x8>)
 80064d6:	f000 befe 	b.w	80072d6 <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	20000bf4 	.word	0x20000bf4

080064e0 <__cvt>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	ec55 4b10 	vmov	r4, r5, d0
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	460e      	mov	r6, r1
 80064ec:	4619      	mov	r1, r3
 80064ee:	462b      	mov	r3, r5
 80064f0:	bfbb      	ittet	lt
 80064f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064f6:	461d      	movlt	r5, r3
 80064f8:	2300      	movge	r3, #0
 80064fa:	232d      	movlt	r3, #45	; 0x2d
 80064fc:	700b      	strb	r3, [r1, #0]
 80064fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006500:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006504:	4691      	mov	r9, r2
 8006506:	f023 0820 	bic.w	r8, r3, #32
 800650a:	bfbc      	itt	lt
 800650c:	4622      	movlt	r2, r4
 800650e:	4614      	movlt	r4, r2
 8006510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006514:	d005      	beq.n	8006522 <__cvt+0x42>
 8006516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800651a:	d100      	bne.n	800651e <__cvt+0x3e>
 800651c:	3601      	adds	r6, #1
 800651e:	2102      	movs	r1, #2
 8006520:	e000      	b.n	8006524 <__cvt+0x44>
 8006522:	2103      	movs	r1, #3
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	ab02      	add	r3, sp, #8
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	ec45 4b10 	vmov	d0, r4, r5
 8006530:	4653      	mov	r3, sl
 8006532:	4632      	mov	r2, r6
 8006534:	f000 ff68 	bl	8007408 <_dtoa_r>
 8006538:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800653c:	4607      	mov	r7, r0
 800653e:	d102      	bne.n	8006546 <__cvt+0x66>
 8006540:	f019 0f01 	tst.w	r9, #1
 8006544:	d022      	beq.n	800658c <__cvt+0xac>
 8006546:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800654a:	eb07 0906 	add.w	r9, r7, r6
 800654e:	d110      	bne.n	8006572 <__cvt+0x92>
 8006550:	783b      	ldrb	r3, [r7, #0]
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d10a      	bne.n	800656c <__cvt+0x8c>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7fa fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006562:	b918      	cbnz	r0, 800656c <__cvt+0x8c>
 8006564:	f1c6 0601 	rsb	r6, r6, #1
 8006568:	f8ca 6000 	str.w	r6, [sl]
 800656c:	f8da 3000 	ldr.w	r3, [sl]
 8006570:	4499      	add	r9, r3
 8006572:	2200      	movs	r2, #0
 8006574:	2300      	movs	r3, #0
 8006576:	4620      	mov	r0, r4
 8006578:	4629      	mov	r1, r5
 800657a:	f7fa faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800657e:	b108      	cbz	r0, 8006584 <__cvt+0xa4>
 8006580:	f8cd 900c 	str.w	r9, [sp, #12]
 8006584:	2230      	movs	r2, #48	; 0x30
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	454b      	cmp	r3, r9
 800658a:	d307      	bcc.n	800659c <__cvt+0xbc>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006590:	1bdb      	subs	r3, r3, r7
 8006592:	4638      	mov	r0, r7
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	b004      	add	sp, #16
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e7f0      	b.n	8006586 <__cvt+0xa6>

080065a4 <__exponent>:
 80065a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a6:	4603      	mov	r3, r0
 80065a8:	2900      	cmp	r1, #0
 80065aa:	bfb8      	it	lt
 80065ac:	4249      	neglt	r1, r1
 80065ae:	f803 2b02 	strb.w	r2, [r3], #2
 80065b2:	bfb4      	ite	lt
 80065b4:	222d      	movlt	r2, #45	; 0x2d
 80065b6:	222b      	movge	r2, #43	; 0x2b
 80065b8:	2909      	cmp	r1, #9
 80065ba:	7042      	strb	r2, [r0, #1]
 80065bc:	dd2a      	ble.n	8006614 <__exponent+0x70>
 80065be:	f10d 0207 	add.w	r2, sp, #7
 80065c2:	4617      	mov	r7, r2
 80065c4:	260a      	movs	r6, #10
 80065c6:	4694      	mov	ip, r2
 80065c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80065cc:	fb06 1415 	mls	r4, r6, r5, r1
 80065d0:	3430      	adds	r4, #48	; 0x30
 80065d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80065d6:	460c      	mov	r4, r1
 80065d8:	2c63      	cmp	r4, #99	; 0x63
 80065da:	f102 32ff 	add.w	r2, r2, #4294967295
 80065de:	4629      	mov	r1, r5
 80065e0:	dcf1      	bgt.n	80065c6 <__exponent+0x22>
 80065e2:	3130      	adds	r1, #48	; 0x30
 80065e4:	f1ac 0402 	sub.w	r4, ip, #2
 80065e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065ec:	1c41      	adds	r1, r0, #1
 80065ee:	4622      	mov	r2, r4
 80065f0:	42ba      	cmp	r2, r7
 80065f2:	d30a      	bcc.n	800660a <__exponent+0x66>
 80065f4:	f10d 0209 	add.w	r2, sp, #9
 80065f8:	eba2 020c 	sub.w	r2, r2, ip
 80065fc:	42bc      	cmp	r4, r7
 80065fe:	bf88      	it	hi
 8006600:	2200      	movhi	r2, #0
 8006602:	4413      	add	r3, r2
 8006604:	1a18      	subs	r0, r3, r0
 8006606:	b003      	add	sp, #12
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800660e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006612:	e7ed      	b.n	80065f0 <__exponent+0x4c>
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	3130      	adds	r1, #48	; 0x30
 8006618:	7083      	strb	r3, [r0, #2]
 800661a:	70c1      	strb	r1, [r0, #3]
 800661c:	1d03      	adds	r3, r0, #4
 800661e:	e7f1      	b.n	8006604 <__exponent+0x60>

08006620 <_printf_float>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	b08d      	sub	sp, #52	; 0x34
 800662a:	460c      	mov	r4, r1
 800662c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006630:	4616      	mov	r6, r2
 8006632:	461f      	mov	r7, r3
 8006634:	4605      	mov	r5, r0
 8006636:	f000 fdc9 	bl	80071cc <_localeconv_r>
 800663a:	f8d0 a000 	ldr.w	sl, [r0]
 800663e:	4650      	mov	r0, sl
 8006640:	f7f9 fe16 	bl	8000270 <strlen>
 8006644:	2300      	movs	r3, #0
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	9305      	str	r3, [sp, #20]
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006654:	3307      	adds	r3, #7
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	f103 0208 	add.w	r2, r3, #8
 800665e:	f8c8 2000 	str.w	r2, [r8]
 8006662:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006670:	ee08 0a10 	vmov	s16, r0
 8006674:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800667c:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <_printf_float+0x2d8>)
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	f7fa fa53 	bl	8000b2c <__aeabi_dcmpun>
 8006686:	bb88      	cbnz	r0, 80066ec <_printf_float+0xcc>
 8006688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668c:	4b9a      	ldr	r3, [pc, #616]	; (80068f8 <_printf_float+0x2d8>)
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	f7fa fa2d 	bl	8000af0 <__aeabi_dcmple>
 8006696:	bb48      	cbnz	r0, 80066ec <_printf_float+0xcc>
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	4640      	mov	r0, r8
 800669e:	4649      	mov	r1, r9
 80066a0:	f7fa fa1c 	bl	8000adc <__aeabi_dcmplt>
 80066a4:	b110      	cbz	r0, 80066ac <_printf_float+0x8c>
 80066a6:	232d      	movs	r3, #45	; 0x2d
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ac:	4a93      	ldr	r2, [pc, #588]	; (80068fc <_printf_float+0x2dc>)
 80066ae:	4b94      	ldr	r3, [pc, #592]	; (8006900 <_printf_float+0x2e0>)
 80066b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066b4:	bf94      	ite	ls
 80066b6:	4690      	movls	r8, r2
 80066b8:	4698      	movhi	r8, r3
 80066ba:	2303      	movs	r3, #3
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	9b05      	ldr	r3, [sp, #20]
 80066c0:	f023 0304 	bic.w	r3, r3, #4
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	f04f 0900 	mov.w	r9, #0
 80066ca:	9700      	str	r7, [sp, #0]
 80066cc:	4633      	mov	r3, r6
 80066ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f9da 	bl	8006a8c <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	f040 8090 	bne.w	80067fe <_printf_float+0x1de>
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	b00d      	add	sp, #52	; 0x34
 80066e4:	ecbd 8b02 	vpop	{d8}
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa1a 	bl	8000b2c <__aeabi_dcmpun>
 80066f8:	b140      	cbz	r0, 800670c <_printf_float+0xec>
 80066fa:	464b      	mov	r3, r9
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfbc      	itt	lt
 8006700:	232d      	movlt	r3, #45	; 0x2d
 8006702:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006706:	4a7f      	ldr	r2, [pc, #508]	; (8006904 <_printf_float+0x2e4>)
 8006708:	4b7f      	ldr	r3, [pc, #508]	; (8006908 <_printf_float+0x2e8>)
 800670a:	e7d1      	b.n	80066b0 <_printf_float+0x90>
 800670c:	6863      	ldr	r3, [r4, #4]
 800670e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006712:	9206      	str	r2, [sp, #24]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	d13f      	bne.n	8006798 <_printf_float+0x178>
 8006718:	2306      	movs	r3, #6
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	6861      	ldr	r1, [r4, #4]
 8006720:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006724:	2300      	movs	r3, #0
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	ab0a      	add	r3, sp, #40	; 0x28
 800672a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800672e:	ab09      	add	r3, sp, #36	; 0x24
 8006730:	ec49 8b10 	vmov	d0, r8, r9
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800673c:	4628      	mov	r0, r5
 800673e:	f7ff fecf 	bl	80064e0 <__cvt>
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006746:	2b47      	cmp	r3, #71	; 0x47
 8006748:	4680      	mov	r8, r0
 800674a:	d108      	bne.n	800675e <_printf_float+0x13e>
 800674c:	1cc8      	adds	r0, r1, #3
 800674e:	db02      	blt.n	8006756 <_printf_float+0x136>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	4299      	cmp	r1, r3
 8006754:	dd41      	ble.n	80067da <_printf_float+0x1ba>
 8006756:	f1ab 0302 	sub.w	r3, fp, #2
 800675a:	fa5f fb83 	uxtb.w	fp, r3
 800675e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006762:	d820      	bhi.n	80067a6 <_printf_float+0x186>
 8006764:	3901      	subs	r1, #1
 8006766:	465a      	mov	r2, fp
 8006768:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800676c:	9109      	str	r1, [sp, #36]	; 0x24
 800676e:	f7ff ff19 	bl	80065a4 <__exponent>
 8006772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006774:	1813      	adds	r3, r2, r0
 8006776:	2a01      	cmp	r2, #1
 8006778:	4681      	mov	r9, r0
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	dc02      	bgt.n	8006784 <_printf_float+0x164>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	07d2      	lsls	r2, r2, #31
 8006782:	d501      	bpl.n	8006788 <_printf_float+0x168>
 8006784:	3301      	adds	r3, #1
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800678c:	2b00      	cmp	r3, #0
 800678e:	d09c      	beq.n	80066ca <_printf_float+0xaa>
 8006790:	232d      	movs	r3, #45	; 0x2d
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006796:	e798      	b.n	80066ca <_printf_float+0xaa>
 8006798:	9a06      	ldr	r2, [sp, #24]
 800679a:	2a47      	cmp	r2, #71	; 0x47
 800679c:	d1be      	bne.n	800671c <_printf_float+0xfc>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1bc      	bne.n	800671c <_printf_float+0xfc>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e7b9      	b.n	800671a <_printf_float+0xfa>
 80067a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067aa:	d118      	bne.n	80067de <_printf_float+0x1be>
 80067ac:	2900      	cmp	r1, #0
 80067ae:	6863      	ldr	r3, [r4, #4]
 80067b0:	dd0b      	ble.n	80067ca <_printf_float+0x1aa>
 80067b2:	6121      	str	r1, [r4, #16]
 80067b4:	b913      	cbnz	r3, 80067bc <_printf_float+0x19c>
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	07d0      	lsls	r0, r2, #31
 80067ba:	d502      	bpl.n	80067c2 <_printf_float+0x1a2>
 80067bc:	3301      	adds	r3, #1
 80067be:	440b      	add	r3, r1
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067c4:	f04f 0900 	mov.w	r9, #0
 80067c8:	e7de      	b.n	8006788 <_printf_float+0x168>
 80067ca:	b913      	cbnz	r3, 80067d2 <_printf_float+0x1b2>
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	07d2      	lsls	r2, r2, #31
 80067d0:	d501      	bpl.n	80067d6 <_printf_float+0x1b6>
 80067d2:	3302      	adds	r3, #2
 80067d4:	e7f4      	b.n	80067c0 <_printf_float+0x1a0>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7f2      	b.n	80067c0 <_printf_float+0x1a0>
 80067da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e0:	4299      	cmp	r1, r3
 80067e2:	db05      	blt.n	80067f0 <_printf_float+0x1d0>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	6121      	str	r1, [r4, #16]
 80067e8:	07d8      	lsls	r0, r3, #31
 80067ea:	d5ea      	bpl.n	80067c2 <_printf_float+0x1a2>
 80067ec:	1c4b      	adds	r3, r1, #1
 80067ee:	e7e7      	b.n	80067c0 <_printf_float+0x1a0>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	bfd4      	ite	le
 80067f4:	f1c1 0202 	rsble	r2, r1, #2
 80067f8:	2201      	movgt	r2, #1
 80067fa:	4413      	add	r3, r2
 80067fc:	e7e0      	b.n	80067c0 <_printf_float+0x1a0>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	055a      	lsls	r2, r3, #21
 8006802:	d407      	bmi.n	8006814 <_printf_float+0x1f4>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	4642      	mov	r2, r8
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	d12c      	bne.n	800686c <_printf_float+0x24c>
 8006812:	e764      	b.n	80066de <_printf_float+0xbe>
 8006814:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006818:	f240 80e0 	bls.w	80069dc <_printf_float+0x3bc>
 800681c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	f7fa f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8006828:	2800      	cmp	r0, #0
 800682a:	d034      	beq.n	8006896 <_printf_float+0x276>
 800682c:	4a37      	ldr	r2, [pc, #220]	; (800690c <_printf_float+0x2ec>)
 800682e:	2301      	movs	r3, #1
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af51 	beq.w	80066de <_printf_float+0xbe>
 800683c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006840:	429a      	cmp	r2, r3
 8006842:	db02      	blt.n	800684a <_printf_float+0x22a>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	07d8      	lsls	r0, r3, #31
 8006848:	d510      	bpl.n	800686c <_printf_float+0x24c>
 800684a:	ee18 3a10 	vmov	r3, s16
 800684e:	4652      	mov	r2, sl
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f af41 	beq.w	80066de <_printf_float+0xbe>
 800685c:	f04f 0800 	mov.w	r8, #0
 8006860:	f104 091a 	add.w	r9, r4, #26
 8006864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006866:	3b01      	subs	r3, #1
 8006868:	4543      	cmp	r3, r8
 800686a:	dc09      	bgt.n	8006880 <_printf_float+0x260>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	f100 8107 	bmi.w	8006a82 <_printf_float+0x462>
 8006874:	68e0      	ldr	r0, [r4, #12]
 8006876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006878:	4298      	cmp	r0, r3
 800687a:	bfb8      	it	lt
 800687c:	4618      	movlt	r0, r3
 800687e:	e730      	b.n	80066e2 <_printf_float+0xc2>
 8006880:	2301      	movs	r3, #1
 8006882:	464a      	mov	r2, r9
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af27 	beq.w	80066de <_printf_float+0xbe>
 8006890:	f108 0801 	add.w	r8, r8, #1
 8006894:	e7e6      	b.n	8006864 <_printf_float+0x244>
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc39      	bgt.n	8006910 <_printf_float+0x2f0>
 800689c:	4a1b      	ldr	r2, [pc, #108]	; (800690c <_printf_float+0x2ec>)
 800689e:	2301      	movs	r3, #1
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af19 	beq.w	80066de <_printf_float+0xbe>
 80068ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d102      	bne.n	80068ba <_printf_float+0x29a>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07d9      	lsls	r1, r3, #31
 80068b8:	d5d8      	bpl.n	800686c <_printf_float+0x24c>
 80068ba:	ee18 3a10 	vmov	r3, s16
 80068be:	4652      	mov	r2, sl
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af09 	beq.w	80066de <_printf_float+0xbe>
 80068cc:	f04f 0900 	mov.w	r9, #0
 80068d0:	f104 0a1a 	add.w	sl, r4, #26
 80068d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d6:	425b      	negs	r3, r3
 80068d8:	454b      	cmp	r3, r9
 80068da:	dc01      	bgt.n	80068e0 <_printf_float+0x2c0>
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	e792      	b.n	8006806 <_printf_float+0x1e6>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f aef7 	beq.w	80066de <_printf_float+0xbe>
 80068f0:	f109 0901 	add.w	r9, r9, #1
 80068f4:	e7ee      	b.n	80068d4 <_printf_float+0x2b4>
 80068f6:	bf00      	nop
 80068f8:	7fefffff 	.word	0x7fefffff
 80068fc:	0800aa04 	.word	0x0800aa04
 8006900:	0800aa08 	.word	0x0800aa08
 8006904:	0800aa0c 	.word	0x0800aa0c
 8006908:	0800aa10 	.word	0x0800aa10
 800690c:	0800920f 	.word	0x0800920f
 8006910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006914:	429a      	cmp	r2, r3
 8006916:	bfa8      	it	ge
 8006918:	461a      	movge	r2, r3
 800691a:	2a00      	cmp	r2, #0
 800691c:	4691      	mov	r9, r2
 800691e:	dc37      	bgt.n	8006990 <_printf_float+0x370>
 8006920:	f04f 0b00 	mov.w	fp, #0
 8006924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006928:	f104 021a 	add.w	r2, r4, #26
 800692c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	eba3 0309 	sub.w	r3, r3, r9
 8006934:	455b      	cmp	r3, fp
 8006936:	dc33      	bgt.n	80069a0 <_printf_float+0x380>
 8006938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800693c:	429a      	cmp	r2, r3
 800693e:	db3b      	blt.n	80069b8 <_printf_float+0x398>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07da      	lsls	r2, r3, #31
 8006944:	d438      	bmi.n	80069b8 <_printf_float+0x398>
 8006946:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800694a:	eba2 0903 	sub.w	r9, r2, r3
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	1ad2      	subs	r2, r2, r3
 8006952:	4591      	cmp	r9, r2
 8006954:	bfa8      	it	ge
 8006956:	4691      	movge	r9, r2
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dc35      	bgt.n	80069ca <_printf_float+0x3aa>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006966:	f104 0a1a 	add.w	sl, r4, #26
 800696a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	eba3 0309 	sub.w	r3, r3, r9
 8006974:	4543      	cmp	r3, r8
 8006976:	f77f af79 	ble.w	800686c <_printf_float+0x24c>
 800697a:	2301      	movs	r3, #1
 800697c:	4652      	mov	r2, sl
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f aeaa 	beq.w	80066de <_printf_float+0xbe>
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	e7ec      	b.n	800696a <_printf_float+0x34a>
 8006990:	4613      	mov	r3, r2
 8006992:	4631      	mov	r1, r6
 8006994:	4642      	mov	r2, r8
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	d1c0      	bne.n	8006920 <_printf_float+0x300>
 800699e:	e69e      	b.n	80066de <_printf_float+0xbe>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	9205      	str	r2, [sp, #20]
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f ae97 	beq.w	80066de <_printf_float+0xbe>
 80069b0:	9a05      	ldr	r2, [sp, #20]
 80069b2:	f10b 0b01 	add.w	fp, fp, #1
 80069b6:	e7b9      	b.n	800692c <_printf_float+0x30c>
 80069b8:	ee18 3a10 	vmov	r3, s16
 80069bc:	4652      	mov	r2, sl
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	d1be      	bne.n	8006946 <_printf_float+0x326>
 80069c8:	e689      	b.n	80066de <_printf_float+0xbe>
 80069ca:	9a05      	ldr	r2, [sp, #20]
 80069cc:	464b      	mov	r3, r9
 80069ce:	4442      	add	r2, r8
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	d1c1      	bne.n	800695e <_printf_float+0x33e>
 80069da:	e680      	b.n	80066de <_printf_float+0xbe>
 80069dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069de:	2a01      	cmp	r2, #1
 80069e0:	dc01      	bgt.n	80069e6 <_printf_float+0x3c6>
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d53a      	bpl.n	8006a5c <_printf_float+0x43c>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4642      	mov	r2, r8
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae74 	beq.w	80066de <_printf_float+0xbe>
 80069f6:	ee18 3a10 	vmov	r3, s16
 80069fa:	4652      	mov	r2, sl
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f ae6b 	beq.w	80066de <_printf_float+0xbe>
 8006a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a14:	f7fa f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a18:	b9d8      	cbnz	r0, 8006a52 <_printf_float+0x432>
 8006a1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a1e:	f108 0201 	add.w	r2, r8, #1
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d10e      	bne.n	8006a4a <_printf_float+0x42a>
 8006a2c:	e657      	b.n	80066de <_printf_float+0xbe>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae50 	beq.w	80066de <_printf_float+0xbe>
 8006a3e:	f108 0801 	add.w	r8, r8, #1
 8006a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a44:	3b01      	subs	r3, #1
 8006a46:	4543      	cmp	r3, r8
 8006a48:	dcf1      	bgt.n	8006a2e <_printf_float+0x40e>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a50:	e6da      	b.n	8006808 <_printf_float+0x1e8>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0a1a 	add.w	sl, r4, #26
 8006a5a:	e7f2      	b.n	8006a42 <_printf_float+0x422>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4642      	mov	r2, r8
 8006a60:	e7df      	b.n	8006a22 <_printf_float+0x402>
 8006a62:	2301      	movs	r3, #1
 8006a64:	464a      	mov	r2, r9
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae36 	beq.w	80066de <_printf_float+0xbe>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	dcf0      	bgt.n	8006a62 <_printf_float+0x442>
 8006a80:	e6f8      	b.n	8006874 <_printf_float+0x254>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0919 	add.w	r9, r4, #25
 8006a8a:	e7f4      	b.n	8006a76 <_printf_float+0x456>

08006a8c <_printf_common>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4616      	mov	r6, r2
 8006a92:	4699      	mov	r9, r3
 8006a94:	688a      	ldr	r2, [r1, #8]
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bfb8      	it	lt
 8006aa0:	4613      	movlt	r3, r2
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_printf_common+0x26>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	0699      	lsls	r1, r3, #26
 8006ab6:	bf42      	ittt	mi
 8006ab8:	6833      	ldrmi	r3, [r6, #0]
 8006aba:	3302      	addmi	r3, #2
 8006abc:	6033      	strmi	r3, [r6, #0]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d106      	bne.n	8006ad4 <_printf_common+0x48>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc26      	bgt.n	8006b22 <_printf_common+0x96>
 8006ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad8:	1e13      	subs	r3, r2, #0
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d42b      	bmi.n	8006b3c <_printf_common+0xb0>
 8006ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d01e      	beq.n	8006b30 <_printf_common+0xa4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6922      	ldr	r2, [r4, #16]
 8006af6:	f003 0306 	and.w	r3, r3, #6
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	bf02      	ittt	eq
 8006afe:	68e5      	ldreq	r5, [r4, #12]
 8006b00:	6833      	ldreq	r3, [r6, #0]
 8006b02:	1aed      	subeq	r5, r5, r3
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	bf0c      	ite	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	2500      	movne	r5, #0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bfc4      	itt	gt
 8006b12:	1a9b      	subgt	r3, r3, r2
 8006b14:	18ed      	addgt	r5, r5, r3
 8006b16:	2600      	movs	r6, #0
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xc8>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xa8>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4649      	mov	r1, r9
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c0      	blx	r8
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c6      	b.n	8006aca <_printf_common+0x3e>
 8006b3c:	18e1      	adds	r1, r4, r3
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2030      	movs	r0, #48	; 0x30
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b46:	4422      	add	r2, r4
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7c7      	b.n	8006ae4 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa4>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x8e>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	7e0f      	ldrb	r7, [r1, #24]
 8006b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b70:	2f78      	cmp	r7, #120	; 0x78
 8006b72:	4691      	mov	r9, r2
 8006b74:	4680      	mov	r8, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	; 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d4 	beq.w	8006d32 <_printf_i+0x1ca>
 8006b8a:	2f58      	cmp	r7, #88	; 0x58
 8006b8c:	f000 80c0 	beq.w	8006d10 <_printf_i+0x1a8>
 8006b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a101      	add	r1, pc, #4	; (adr r1, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d19 	.word	0x08006d19
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006cd3 	.word	0x08006cd3
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d3b 	.word	0x08006d3b
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006cdb 	.word	0x08006cdb
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e09f      	b.n	8006d54 <_printf_i+0x1ec>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	0607      	lsls	r7, r0, #24
 8006c1a:	f103 0104 	add.w	r1, r3, #4
 8006c1e:	6029      	str	r1, [r5, #0]
 8006c20:	d501      	bpl.n	8006c26 <_printf_i+0xbe>
 8006c22:	681e      	ldr	r6, [r3, #0]
 8006c24:	e003      	b.n	8006c2e <_printf_i+0xc6>
 8006c26:	0646      	lsls	r6, r0, #25
 8006c28:	d5fb      	bpl.n	8006c22 <_printf_i+0xba>
 8006c2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	da03      	bge.n	8006c3a <_printf_i+0xd2>
 8006c32:	232d      	movs	r3, #45	; 0x2d
 8006c34:	4276      	negs	r6, r6
 8006c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c3a:	485a      	ldr	r0, [pc, #360]	; (8006da4 <_printf_i+0x23c>)
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	e012      	b.n	8006c66 <_printf_i+0xfe>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	6820      	ldr	r0, [r4, #0]
 8006c44:	1d19      	adds	r1, r3, #4
 8006c46:	6029      	str	r1, [r5, #0]
 8006c48:	0605      	lsls	r5, r0, #24
 8006c4a:	d501      	bpl.n	8006c50 <_printf_i+0xe8>
 8006c4c:	681e      	ldr	r6, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <_printf_i+0xee>
 8006c50:	0641      	lsls	r1, r0, #25
 8006c52:	d5fb      	bpl.n	8006c4c <_printf_i+0xe4>
 8006c54:	881e      	ldrh	r6, [r3, #0]
 8006c56:	4853      	ldr	r0, [pc, #332]	; (8006da4 <_printf_i+0x23c>)
 8006c58:	2f6f      	cmp	r7, #111	; 0x6f
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2308      	moveq	r3, #8
 8006c5e:	230a      	movne	r3, #10
 8006c60:	2100      	movs	r1, #0
 8006c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c66:	6865      	ldr	r5, [r4, #4]
 8006c68:	60a5      	str	r5, [r4, #8]
 8006c6a:	2d00      	cmp	r5, #0
 8006c6c:	bfa2      	ittt	ge
 8006c6e:	6821      	ldrge	r1, [r4, #0]
 8006c70:	f021 0104 	bicge.w	r1, r1, #4
 8006c74:	6021      	strge	r1, [r4, #0]
 8006c76:	b90e      	cbnz	r6, 8006c7c <_printf_i+0x114>
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	d04b      	beq.n	8006d14 <_printf_i+0x1ac>
 8006c7c:	4615      	mov	r5, r2
 8006c7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c82:	fb03 6711 	mls	r7, r3, r1, r6
 8006c86:	5dc7      	ldrb	r7, [r0, r7]
 8006c88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c8c:	4637      	mov	r7, r6
 8006c8e:	42bb      	cmp	r3, r7
 8006c90:	460e      	mov	r6, r1
 8006c92:	d9f4      	bls.n	8006c7e <_printf_i+0x116>
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d10b      	bne.n	8006cb0 <_printf_i+0x148>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	07de      	lsls	r6, r3, #31
 8006c9c:	d508      	bpl.n	8006cb0 <_printf_i+0x148>
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	6861      	ldr	r1, [r4, #4]
 8006ca2:	4299      	cmp	r1, r3
 8006ca4:	bfde      	ittt	le
 8006ca6:	2330      	movle	r3, #48	; 0x30
 8006ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb0:	1b52      	subs	r2, r2, r5
 8006cb2:	6122      	str	r2, [r4, #16]
 8006cb4:	f8cd a000 	str.w	sl, [sp]
 8006cb8:	464b      	mov	r3, r9
 8006cba:	aa03      	add	r2, sp, #12
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	f7ff fee4 	bl	8006a8c <_printf_common>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d14a      	bne.n	8006d5e <_printf_i+0x1f6>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	b004      	add	sp, #16
 8006cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	4833      	ldr	r0, [pc, #204]	; (8006da8 <_printf_i+0x240>)
 8006cdc:	2778      	movs	r7, #120	; 0x78
 8006cde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	061f      	lsls	r7, r3, #24
 8006ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cec:	d402      	bmi.n	8006cf4 <_printf_i+0x18c>
 8006cee:	065f      	lsls	r7, r3, #25
 8006cf0:	bf48      	it	mi
 8006cf2:	b2b6      	uxthmi	r6, r6
 8006cf4:	07df      	lsls	r7, r3, #31
 8006cf6:	bf48      	it	mi
 8006cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cfc:	6029      	str	r1, [r5, #0]
 8006cfe:	bf48      	it	mi
 8006d00:	6023      	strmi	r3, [r4, #0]
 8006d02:	b91e      	cbnz	r6, 8006d0c <_printf_i+0x1a4>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f023 0320 	bic.w	r3, r3, #32
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	e7a7      	b.n	8006c60 <_printf_i+0xf8>
 8006d10:	4824      	ldr	r0, [pc, #144]	; (8006da4 <_printf_i+0x23c>)
 8006d12:	e7e4      	b.n	8006cde <_printf_i+0x176>
 8006d14:	4615      	mov	r5, r2
 8006d16:	e7bd      	b.n	8006c94 <_printf_i+0x12c>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	6826      	ldr	r6, [r4, #0]
 8006d1c:	6961      	ldr	r1, [r4, #20]
 8006d1e:	1d18      	adds	r0, r3, #4
 8006d20:	6028      	str	r0, [r5, #0]
 8006d22:	0635      	lsls	r5, r6, #24
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	d501      	bpl.n	8006d2c <_printf_i+0x1c4>
 8006d28:	6019      	str	r1, [r3, #0]
 8006d2a:	e002      	b.n	8006d32 <_printf_i+0x1ca>
 8006d2c:	0670      	lsls	r0, r6, #25
 8006d2e:	d5fb      	bpl.n	8006d28 <_printf_i+0x1c0>
 8006d30:	8019      	strh	r1, [r3, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	6123      	str	r3, [r4, #16]
 8006d36:	4615      	mov	r5, r2
 8006d38:	e7bc      	b.n	8006cb4 <_printf_i+0x14c>
 8006d3a:	682b      	ldr	r3, [r5, #0]
 8006d3c:	1d1a      	adds	r2, r3, #4
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	681d      	ldr	r5, [r3, #0]
 8006d42:	6862      	ldr	r2, [r4, #4]
 8006d44:	2100      	movs	r1, #0
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7f9 fa42 	bl	80001d0 <memchr>
 8006d4c:	b108      	cbz	r0, 8006d52 <_printf_i+0x1ea>
 8006d4e:	1b40      	subs	r0, r0, r5
 8006d50:	6060      	str	r0, [r4, #4]
 8006d52:	6863      	ldr	r3, [r4, #4]
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	2300      	movs	r3, #0
 8006d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d5c:	e7aa      	b.n	8006cb4 <_printf_i+0x14c>
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4649      	mov	r1, r9
 8006d64:	4640      	mov	r0, r8
 8006d66:	47d0      	blx	sl
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d0ad      	beq.n	8006cc8 <_printf_i+0x160>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	079b      	lsls	r3, r3, #30
 8006d70:	d413      	bmi.n	8006d9a <_printf_i+0x232>
 8006d72:	68e0      	ldr	r0, [r4, #12]
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	4298      	cmp	r0, r3
 8006d78:	bfb8      	it	lt
 8006d7a:	4618      	movlt	r0, r3
 8006d7c:	e7a6      	b.n	8006ccc <_printf_i+0x164>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	4632      	mov	r2, r6
 8006d82:	4649      	mov	r1, r9
 8006d84:	4640      	mov	r0, r8
 8006d86:	47d0      	blx	sl
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d09d      	beq.n	8006cc8 <_printf_i+0x160>
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	9903      	ldr	r1, [sp, #12]
 8006d92:	1a5b      	subs	r3, r3, r1
 8006d94:	42ab      	cmp	r3, r5
 8006d96:	dcf2      	bgt.n	8006d7e <_printf_i+0x216>
 8006d98:	e7eb      	b.n	8006d72 <_printf_i+0x20a>
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	f104 0619 	add.w	r6, r4, #25
 8006da0:	e7f5      	b.n	8006d8e <_printf_i+0x226>
 8006da2:	bf00      	nop
 8006da4:	0800aa14 	.word	0x0800aa14
 8006da8:	0800aa25 	.word	0x0800aa25

08006dac <std>:
 8006dac:	2300      	movs	r3, #0
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	e9c0 3300 	strd	r3, r3, [r0]
 8006db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dba:	6083      	str	r3, [r0, #8]
 8006dbc:	8181      	strh	r1, [r0, #12]
 8006dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8006dc0:	81c2      	strh	r2, [r0, #14]
 8006dc2:	6183      	str	r3, [r0, #24]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	305c      	adds	r0, #92	; 0x5c
 8006dca:	f000 f9e5 	bl	8007198 <memset>
 8006dce:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <std+0x38>)
 8006dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <std+0x3c>)
 8006dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <std+0x40>)
 8006dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <std+0x44>)
 8006ddc:	6224      	str	r4, [r4, #32]
 8006dde:	6323      	str	r3, [r4, #48]	; 0x30
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	08006fe9 	.word	0x08006fe9
 8006de8:	0800700b 	.word	0x0800700b
 8006dec:	08007043 	.word	0x08007043
 8006df0:	08007067 	.word	0x08007067

08006df4 <stdio_exit_handler>:
 8006df4:	4a02      	ldr	r2, [pc, #8]	; (8006e00 <stdio_exit_handler+0xc>)
 8006df6:	4903      	ldr	r1, [pc, #12]	; (8006e04 <stdio_exit_handler+0x10>)
 8006df8:	4803      	ldr	r0, [pc, #12]	; (8006e08 <stdio_exit_handler+0x14>)
 8006dfa:	f000 b869 	b.w	8006ed0 <_fwalk_sglue>
 8006dfe:	bf00      	nop
 8006e00:	20000558 	.word	0x20000558
 8006e04:	08008b11 	.word	0x08008b11
 8006e08:	20000564 	.word	0x20000564

08006e0c <cleanup_stdio>:
 8006e0c:	6841      	ldr	r1, [r0, #4]
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <cleanup_stdio+0x34>)
 8006e10:	4299      	cmp	r1, r3
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	d001      	beq.n	8006e1c <cleanup_stdio+0x10>
 8006e18:	f001 fe7a 	bl	8008b10 <_fflush_r>
 8006e1c:	68a1      	ldr	r1, [r4, #8]
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <cleanup_stdio+0x38>)
 8006e20:	4299      	cmp	r1, r3
 8006e22:	d002      	beq.n	8006e2a <cleanup_stdio+0x1e>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f001 fe73 	bl	8008b10 <_fflush_r>
 8006e2a:	68e1      	ldr	r1, [r4, #12]
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <cleanup_stdio+0x3c>)
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	d004      	beq.n	8006e3c <cleanup_stdio+0x30>
 8006e32:	4620      	mov	r0, r4
 8006e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e38:	f001 be6a 	b.w	8008b10 <_fflush_r>
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000ab4 	.word	0x20000ab4
 8006e44:	20000b1c 	.word	0x20000b1c
 8006e48:	20000b84 	.word	0x20000b84

08006e4c <global_stdio_init.part.0>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <global_stdio_init.part.0+0x30>)
 8006e50:	4c0b      	ldr	r4, [pc, #44]	; (8006e80 <global_stdio_init.part.0+0x34>)
 8006e52:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <global_stdio_init.part.0+0x38>)
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	4620      	mov	r0, r4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	f7ff ffa6 	bl	8006dac <std>
 8006e60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e64:	2201      	movs	r2, #1
 8006e66:	2109      	movs	r1, #9
 8006e68:	f7ff ffa0 	bl	8006dac <std>
 8006e6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e70:	2202      	movs	r2, #2
 8006e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e76:	2112      	movs	r1, #18
 8006e78:	f7ff bf98 	b.w	8006dac <std>
 8006e7c:	20000bec 	.word	0x20000bec
 8006e80:	20000ab4 	.word	0x20000ab4
 8006e84:	08006df5 	.word	0x08006df5

08006e88 <__sfp_lock_acquire>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__sfp_lock_acquire+0x8>)
 8006e8a:	f000 ba23 	b.w	80072d4 <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000bf5 	.word	0x20000bf5

08006e94 <__sfp_lock_release>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__sfp_lock_release+0x8>)
 8006e96:	f000 ba1e 	b.w	80072d6 <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	20000bf5 	.word	0x20000bf5

08006ea0 <__sinit>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	f7ff fff0 	bl	8006e88 <__sfp_lock_acquire>
 8006ea8:	6a23      	ldr	r3, [r4, #32]
 8006eaa:	b11b      	cbz	r3, 8006eb4 <__sinit+0x14>
 8006eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb0:	f7ff bff0 	b.w	8006e94 <__sfp_lock_release>
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <__sinit+0x28>)
 8006eb6:	6223      	str	r3, [r4, #32]
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <__sinit+0x2c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f5      	bne.n	8006eac <__sinit+0xc>
 8006ec0:	f7ff ffc4 	bl	8006e4c <global_stdio_init.part.0>
 8006ec4:	e7f2      	b.n	8006eac <__sinit+0xc>
 8006ec6:	bf00      	nop
 8006ec8:	08006e0d 	.word	0x08006e0d
 8006ecc:	20000bec 	.word	0x20000bec

08006ed0 <_fwalk_sglue>:
 8006ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	4688      	mov	r8, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	2600      	movs	r6, #0
 8006edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee4:	d505      	bpl.n	8006ef2 <_fwalk_sglue+0x22>
 8006ee6:	6824      	ldr	r4, [r4, #0]
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d1f7      	bne.n	8006edc <_fwalk_sglue+0xc>
 8006eec:	4630      	mov	r0, r6
 8006eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d907      	bls.n	8006f08 <_fwalk_sglue+0x38>
 8006ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006efc:	3301      	adds	r3, #1
 8006efe:	d003      	beq.n	8006f08 <_fwalk_sglue+0x38>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c0      	blx	r8
 8006f06:	4306      	orrs	r6, r0
 8006f08:	3568      	adds	r5, #104	; 0x68
 8006f0a:	e7e9      	b.n	8006ee0 <_fwalk_sglue+0x10>

08006f0c <iprintf>:
 8006f0c:	b40f      	push	{r0, r1, r2, r3}
 8006f0e:	b507      	push	{r0, r1, r2, lr}
 8006f10:	4906      	ldr	r1, [pc, #24]	; (8006f2c <iprintf+0x20>)
 8006f12:	ab04      	add	r3, sp, #16
 8006f14:	6808      	ldr	r0, [r1, #0]
 8006f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1a:	6881      	ldr	r1, [r0, #8]
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	f001 fc57 	bl	80087d0 <_vfiprintf_r>
 8006f22:	b003      	add	sp, #12
 8006f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	200005b0 	.word	0x200005b0

08006f30 <_puts_r>:
 8006f30:	6a03      	ldr	r3, [r0, #32]
 8006f32:	b570      	push	{r4, r5, r6, lr}
 8006f34:	6884      	ldr	r4, [r0, #8]
 8006f36:	4605      	mov	r5, r0
 8006f38:	460e      	mov	r6, r1
 8006f3a:	b90b      	cbnz	r3, 8006f40 <_puts_r+0x10>
 8006f3c:	f7ff ffb0 	bl	8006ea0 <__sinit>
 8006f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f42:	07db      	lsls	r3, r3, #31
 8006f44:	d405      	bmi.n	8006f52 <_puts_r+0x22>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	0598      	lsls	r0, r3, #22
 8006f4a:	d402      	bmi.n	8006f52 <_puts_r+0x22>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f4e:	f000 f9c1 	bl	80072d4 <__retarget_lock_acquire_recursive>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	0719      	lsls	r1, r3, #28
 8006f56:	d513      	bpl.n	8006f80 <_puts_r+0x50>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	b18b      	cbz	r3, 8006f80 <_puts_r+0x50>
 8006f5c:	3e01      	subs	r6, #1
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f64:	3b01      	subs	r3, #1
 8006f66:	60a3      	str	r3, [r4, #8]
 8006f68:	b9e9      	cbnz	r1, 8006fa6 <_puts_r+0x76>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da2e      	bge.n	8006fcc <_puts_r+0x9c>
 8006f6e:	4622      	mov	r2, r4
 8006f70:	210a      	movs	r1, #10
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f87b 	bl	800706e <__swbuf_r>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d007      	beq.n	8006f8c <_puts_r+0x5c>
 8006f7c:	250a      	movs	r5, #10
 8006f7e:	e007      	b.n	8006f90 <_puts_r+0x60>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f8b0 	bl	80070e8 <__swsetup_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0e7      	beq.n	8006f5c <_puts_r+0x2c>
 8006f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x72>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	059b      	lsls	r3, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x72>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f000 f99a 	bl	80072d6 <__retarget_lock_release_recursive>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da04      	bge.n	8006fb4 <_puts_r+0x84>
 8006faa:	69a2      	ldr	r2, [r4, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	dc06      	bgt.n	8006fbe <_puts_r+0x8e>
 8006fb0:	290a      	cmp	r1, #10
 8006fb2:	d004      	beq.n	8006fbe <_puts_r+0x8e>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	6022      	str	r2, [r4, #0]
 8006fba:	7019      	strb	r1, [r3, #0]
 8006fbc:	e7cf      	b.n	8006f5e <_puts_r+0x2e>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f854 	bl	800706e <__swbuf_r>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d1c9      	bne.n	8006f5e <_puts_r+0x2e>
 8006fca:	e7df      	b.n	8006f8c <_puts_r+0x5c>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	250a      	movs	r5, #10
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	701d      	strb	r5, [r3, #0]
 8006fd6:	e7db      	b.n	8006f90 <_puts_r+0x60>

08006fd8 <puts>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <puts+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bfa7 	b.w	8006f30 <_puts_r>
 8006fe2:	bf00      	nop
 8006fe4:	200005b0 	.word	0x200005b0

08006fe8 <__sread>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	460c      	mov	r4, r1
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	f000 f912 	bl	8007218 <_read_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	bfab      	itete	ge
 8006ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8006ffc:	181b      	addge	r3, r3, r0
 8006ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007002:	bfac      	ite	ge
 8007004:	6563      	strge	r3, [r4, #84]	; 0x54
 8007006:	81a3      	strhlt	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__swrite>:
 800700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700e:	461f      	mov	r7, r3
 8007010:	898b      	ldrh	r3, [r1, #12]
 8007012:	05db      	lsls	r3, r3, #23
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	4616      	mov	r6, r2
 800701a:	d505      	bpl.n	8007028 <__swrite+0x1e>
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2302      	movs	r3, #2
 8007022:	2200      	movs	r2, #0
 8007024:	f000 f8e6 	bl	80071f4 <_lseek_r>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800702e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007032:	81a3      	strh	r3, [r4, #12]
 8007034:	4632      	mov	r2, r6
 8007036:	463b      	mov	r3, r7
 8007038:	4628      	mov	r0, r5
 800703a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	f000 b90d 	b.w	800725c <_write_r>

08007042 <__sseek>:
 8007042:	b510      	push	{r4, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704a:	f000 f8d3 	bl	80071f4 <_lseek_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	bf15      	itete	ne
 8007054:	6560      	strne	r0, [r4, #84]	; 0x54
 8007056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800705a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800705e:	81a3      	strheq	r3, [r4, #12]
 8007060:	bf18      	it	ne
 8007062:	81a3      	strhne	r3, [r4, #12]
 8007064:	bd10      	pop	{r4, pc}

08007066 <__sclose>:
 8007066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706a:	f000 b8b3 	b.w	80071d4 <_close_r>

0800706e <__swbuf_r>:
 800706e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007070:	460e      	mov	r6, r1
 8007072:	4614      	mov	r4, r2
 8007074:	4605      	mov	r5, r0
 8007076:	b118      	cbz	r0, 8007080 <__swbuf_r+0x12>
 8007078:	6a03      	ldr	r3, [r0, #32]
 800707a:	b90b      	cbnz	r3, 8007080 <__swbuf_r+0x12>
 800707c:	f7ff ff10 	bl	8006ea0 <__sinit>
 8007080:	69a3      	ldr	r3, [r4, #24]
 8007082:	60a3      	str	r3, [r4, #8]
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	071a      	lsls	r2, r3, #28
 8007088:	d525      	bpl.n	80070d6 <__swbuf_r+0x68>
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	b31b      	cbz	r3, 80070d6 <__swbuf_r+0x68>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	6922      	ldr	r2, [r4, #16]
 8007092:	1a98      	subs	r0, r3, r2
 8007094:	6963      	ldr	r3, [r4, #20]
 8007096:	b2f6      	uxtb	r6, r6
 8007098:	4283      	cmp	r3, r0
 800709a:	4637      	mov	r7, r6
 800709c:	dc04      	bgt.n	80070a8 <__swbuf_r+0x3a>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f001 fd35 	bl	8008b10 <_fflush_r>
 80070a6:	b9e0      	cbnz	r0, 80070e2 <__swbuf_r+0x74>
 80070a8:	68a3      	ldr	r3, [r4, #8]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	701e      	strb	r6, [r3, #0]
 80070b6:	6962      	ldr	r2, [r4, #20]
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d004      	beq.n	80070c8 <__swbuf_r+0x5a>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	07db      	lsls	r3, r3, #31
 80070c2:	d506      	bpl.n	80070d2 <__swbuf_r+0x64>
 80070c4:	2e0a      	cmp	r6, #10
 80070c6:	d104      	bne.n	80070d2 <__swbuf_r+0x64>
 80070c8:	4621      	mov	r1, r4
 80070ca:	4628      	mov	r0, r5
 80070cc:	f001 fd20 	bl	8008b10 <_fflush_r>
 80070d0:	b938      	cbnz	r0, 80070e2 <__swbuf_r+0x74>
 80070d2:	4638      	mov	r0, r7
 80070d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 f805 	bl	80070e8 <__swsetup_r>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0d5      	beq.n	800708e <__swbuf_r+0x20>
 80070e2:	f04f 37ff 	mov.w	r7, #4294967295
 80070e6:	e7f4      	b.n	80070d2 <__swbuf_r+0x64>

080070e8 <__swsetup_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <__swsetup_r+0xac>)
 80070ec:	4605      	mov	r5, r0
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	460c      	mov	r4, r1
 80070f2:	b118      	cbz	r0, 80070fc <__swsetup_r+0x14>
 80070f4:	6a03      	ldr	r3, [r0, #32]
 80070f6:	b90b      	cbnz	r3, 80070fc <__swsetup_r+0x14>
 80070f8:	f7ff fed2 	bl	8006ea0 <__sinit>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007102:	0718      	lsls	r0, r3, #28
 8007104:	d422      	bmi.n	800714c <__swsetup_r+0x64>
 8007106:	06d9      	lsls	r1, r3, #27
 8007108:	d407      	bmi.n	800711a <__swsetup_r+0x32>
 800710a:	2309      	movs	r3, #9
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	e034      	b.n	8007184 <__swsetup_r+0x9c>
 800711a:	0758      	lsls	r0, r3, #29
 800711c:	d512      	bpl.n	8007144 <__swsetup_r+0x5c>
 800711e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007120:	b141      	cbz	r1, 8007134 <__swsetup_r+0x4c>
 8007122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007126:	4299      	cmp	r1, r3
 8007128:	d002      	beq.n	8007130 <__swsetup_r+0x48>
 800712a:	4628      	mov	r0, r5
 800712c:	f000 ff5e 	bl	8007fec <_free_r>
 8007130:	2300      	movs	r3, #0
 8007132:	6363      	str	r3, [r4, #52]	; 0x34
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	2300      	movs	r3, #0
 800713e:	6063      	str	r3, [r4, #4]
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f043 0308 	orr.w	r3, r3, #8
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	b94b      	cbnz	r3, 8007164 <__swsetup_r+0x7c>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715a:	d003      	beq.n	8007164 <__swsetup_r+0x7c>
 800715c:	4621      	mov	r1, r4
 800715e:	4628      	mov	r0, r5
 8007160:	f001 fd24 	bl	8008bac <__smakebuf_r>
 8007164:	89a0      	ldrh	r0, [r4, #12]
 8007166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800716a:	f010 0301 	ands.w	r3, r0, #1
 800716e:	d00a      	beq.n	8007186 <__swsetup_r+0x9e>
 8007170:	2300      	movs	r3, #0
 8007172:	60a3      	str	r3, [r4, #8]
 8007174:	6963      	ldr	r3, [r4, #20]
 8007176:	425b      	negs	r3, r3
 8007178:	61a3      	str	r3, [r4, #24]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	b943      	cbnz	r3, 8007190 <__swsetup_r+0xa8>
 800717e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007182:	d1c4      	bne.n	800710e <__swsetup_r+0x26>
 8007184:	bd38      	pop	{r3, r4, r5, pc}
 8007186:	0781      	lsls	r1, r0, #30
 8007188:	bf58      	it	pl
 800718a:	6963      	ldrpl	r3, [r4, #20]
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	e7f4      	b.n	800717a <__swsetup_r+0x92>
 8007190:	2000      	movs	r0, #0
 8007192:	e7f7      	b.n	8007184 <__swsetup_r+0x9c>
 8007194:	200005b0 	.word	0x200005b0

08007198 <memset>:
 8007198:	4402      	add	r2, r0
 800719a:	4603      	mov	r3, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <strncmp>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	b16a      	cbz	r2, 80071c8 <strncmp+0x20>
 80071ac:	3901      	subs	r1, #1
 80071ae:	1884      	adds	r4, r0, r2
 80071b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d103      	bne.n	80071c4 <strncmp+0x1c>
 80071bc:	42a0      	cmp	r0, r4
 80071be:	d001      	beq.n	80071c4 <strncmp+0x1c>
 80071c0:	2a00      	cmp	r2, #0
 80071c2:	d1f5      	bne.n	80071b0 <strncmp+0x8>
 80071c4:	1ad0      	subs	r0, r2, r3
 80071c6:	bd10      	pop	{r4, pc}
 80071c8:	4610      	mov	r0, r2
 80071ca:	e7fc      	b.n	80071c6 <strncmp+0x1e>

080071cc <_localeconv_r>:
 80071cc:	4800      	ldr	r0, [pc, #0]	; (80071d0 <_localeconv_r+0x4>)
 80071ce:	4770      	bx	lr
 80071d0:	200006a4 	.word	0x200006a4

080071d4 <_close_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d06      	ldr	r5, [pc, #24]	; (80071f0 <_close_r+0x1c>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	f001 ff12 	bl	8009008 <_close>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_close_r+0x1a>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_close_r+0x1a>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	20000bf0 	.word	0x20000bf0

080071f4 <_lseek_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	; (8007214 <_lseek_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f001 ff28 	bl	8009058 <_lseek>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_lseek_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_lseek_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	20000bf0 	.word	0x20000bf0

08007218 <_read_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	; (8007238 <_read_r+0x20>)
 800721c:	4604      	mov	r4, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f001 ff1e 	bl	8009068 <_read>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_read_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_read_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20000bf0 	.word	0x20000bf0

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	; (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fa f9f2 	bl	8001630 <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20000bf0 	.word	0x20000bf0

0800725c <_write_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	; (800727c <_write_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fa f8de 	bl	800142c <_write>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_write_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_write_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20000bf0 	.word	0x20000bf0

08007280 <__errno>:
 8007280:	4b01      	ldr	r3, [pc, #4]	; (8007288 <__errno+0x8>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	200005b0 	.word	0x200005b0

0800728c <__libc_init_array>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	4d0d      	ldr	r5, [pc, #52]	; (80072c4 <__libc_init_array+0x38>)
 8007290:	4c0d      	ldr	r4, [pc, #52]	; (80072c8 <__libc_init_array+0x3c>)
 8007292:	1b64      	subs	r4, r4, r5
 8007294:	10a4      	asrs	r4, r4, #2
 8007296:	2600      	movs	r6, #0
 8007298:	42a6      	cmp	r6, r4
 800729a:	d109      	bne.n	80072b0 <__libc_init_array+0x24>
 800729c:	4d0b      	ldr	r5, [pc, #44]	; (80072cc <__libc_init_array+0x40>)
 800729e:	4c0c      	ldr	r4, [pc, #48]	; (80072d0 <__libc_init_array+0x44>)
 80072a0:	f001 feec 	bl	800907c <_init>
 80072a4:	1b64      	subs	r4, r4, r5
 80072a6:	10a4      	asrs	r4, r4, #2
 80072a8:	2600      	movs	r6, #0
 80072aa:	42a6      	cmp	r6, r4
 80072ac:	d105      	bne.n	80072ba <__libc_init_array+0x2e>
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b4:	4798      	blx	r3
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7ee      	b.n	8007298 <__libc_init_array+0xc>
 80072ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80072be:	4798      	blx	r3
 80072c0:	3601      	adds	r6, #1
 80072c2:	e7f2      	b.n	80072aa <__libc_init_array+0x1e>
 80072c4:	0800ad94 	.word	0x0800ad94
 80072c8:	0800ad94 	.word	0x0800ad94
 80072cc:	0800ad94 	.word	0x0800ad94
 80072d0:	0800ad98 	.word	0x0800ad98

080072d4 <__retarget_lock_acquire_recursive>:
 80072d4:	4770      	bx	lr

080072d6 <__retarget_lock_release_recursive>:
 80072d6:	4770      	bx	lr

080072d8 <memcpy>:
 80072d8:	440a      	add	r2, r1
 80072da:	4291      	cmp	r1, r2
 80072dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80072e0:	d100      	bne.n	80072e4 <memcpy+0xc>
 80072e2:	4770      	bx	lr
 80072e4:	b510      	push	{r4, lr}
 80072e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ee:	4291      	cmp	r1, r2
 80072f0:	d1f9      	bne.n	80072e6 <memcpy+0xe>
 80072f2:	bd10      	pop	{r4, pc}

080072f4 <quorem>:
 80072f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f8:	6903      	ldr	r3, [r0, #16]
 80072fa:	690c      	ldr	r4, [r1, #16]
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	4607      	mov	r7, r0
 8007300:	db7e      	blt.n	8007400 <quorem+0x10c>
 8007302:	3c01      	subs	r4, #1
 8007304:	f101 0814 	add.w	r8, r1, #20
 8007308:	f100 0514 	add.w	r5, r0, #20
 800730c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800731a:	3301      	adds	r3, #1
 800731c:	429a      	cmp	r2, r3
 800731e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007322:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007326:	fbb2 f6f3 	udiv	r6, r2, r3
 800732a:	d331      	bcc.n	8007390 <quorem+0x9c>
 800732c:	f04f 0e00 	mov.w	lr, #0
 8007330:	4640      	mov	r0, r8
 8007332:	46ac      	mov	ip, r5
 8007334:	46f2      	mov	sl, lr
 8007336:	f850 2b04 	ldr.w	r2, [r0], #4
 800733a:	b293      	uxth	r3, r2
 800733c:	fb06 e303 	mla	r3, r6, r3, lr
 8007340:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007344:	0c1a      	lsrs	r2, r3, #16
 8007346:	b29b      	uxth	r3, r3
 8007348:	ebaa 0303 	sub.w	r3, sl, r3
 800734c:	f8dc a000 	ldr.w	sl, [ip]
 8007350:	fa13 f38a 	uxtah	r3, r3, sl
 8007354:	fb06 220e 	mla	r2, r6, lr, r2
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	9b00      	ldr	r3, [sp, #0]
 800735c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007360:	b292      	uxth	r2, r2
 8007362:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007366:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800736a:	f8bd 3000 	ldrh.w	r3, [sp]
 800736e:	4581      	cmp	r9, r0
 8007370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007374:	f84c 3b04 	str.w	r3, [ip], #4
 8007378:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800737c:	d2db      	bcs.n	8007336 <quorem+0x42>
 800737e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007382:	b92b      	cbnz	r3, 8007390 <quorem+0x9c>
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	3b04      	subs	r3, #4
 8007388:	429d      	cmp	r5, r3
 800738a:	461a      	mov	r2, r3
 800738c:	d32c      	bcc.n	80073e8 <quorem+0xf4>
 800738e:	613c      	str	r4, [r7, #16]
 8007390:	4638      	mov	r0, r7
 8007392:	f001 f8f3 	bl	800857c <__mcmp>
 8007396:	2800      	cmp	r0, #0
 8007398:	db22      	blt.n	80073e0 <quorem+0xec>
 800739a:	3601      	adds	r6, #1
 800739c:	4629      	mov	r1, r5
 800739e:	2000      	movs	r0, #0
 80073a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80073a4:	f8d1 c000 	ldr.w	ip, [r1]
 80073a8:	b293      	uxth	r3, r2
 80073aa:	1ac3      	subs	r3, r0, r3
 80073ac:	0c12      	lsrs	r2, r2, #16
 80073ae:	fa13 f38c 	uxtah	r3, r3, ip
 80073b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073c0:	45c1      	cmp	r9, r8
 80073c2:	f841 3b04 	str.w	r3, [r1], #4
 80073c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073ca:	d2e9      	bcs.n	80073a0 <quorem+0xac>
 80073cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073d4:	b922      	cbnz	r2, 80073e0 <quorem+0xec>
 80073d6:	3b04      	subs	r3, #4
 80073d8:	429d      	cmp	r5, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	d30a      	bcc.n	80073f4 <quorem+0x100>
 80073de:	613c      	str	r4, [r7, #16]
 80073e0:	4630      	mov	r0, r6
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	6812      	ldr	r2, [r2, #0]
 80073ea:	3b04      	subs	r3, #4
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	d1ce      	bne.n	800738e <quorem+0x9a>
 80073f0:	3c01      	subs	r4, #1
 80073f2:	e7c9      	b.n	8007388 <quorem+0x94>
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	3b04      	subs	r3, #4
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	d1f0      	bne.n	80073de <quorem+0xea>
 80073fc:	3c01      	subs	r4, #1
 80073fe:	e7eb      	b.n	80073d8 <quorem+0xe4>
 8007400:	2000      	movs	r0, #0
 8007402:	e7ee      	b.n	80073e2 <quorem+0xee>
 8007404:	0000      	movs	r0, r0
	...

08007408 <_dtoa_r>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	ed2d 8b04 	vpush	{d8-d9}
 8007410:	69c5      	ldr	r5, [r0, #28]
 8007412:	b093      	sub	sp, #76	; 0x4c
 8007414:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007418:	ec57 6b10 	vmov	r6, r7, d0
 800741c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007420:	9107      	str	r1, [sp, #28]
 8007422:	4604      	mov	r4, r0
 8007424:	920a      	str	r2, [sp, #40]	; 0x28
 8007426:	930d      	str	r3, [sp, #52]	; 0x34
 8007428:	b975      	cbnz	r5, 8007448 <_dtoa_r+0x40>
 800742a:	2010      	movs	r0, #16
 800742c:	f7fe ffa4 	bl	8006378 <malloc>
 8007430:	4602      	mov	r2, r0
 8007432:	61e0      	str	r0, [r4, #28]
 8007434:	b920      	cbnz	r0, 8007440 <_dtoa_r+0x38>
 8007436:	4bae      	ldr	r3, [pc, #696]	; (80076f0 <_dtoa_r+0x2e8>)
 8007438:	21ef      	movs	r1, #239	; 0xef
 800743a:	48ae      	ldr	r0, [pc, #696]	; (80076f4 <_dtoa_r+0x2ec>)
 800743c:	f001 fc14 	bl	8008c68 <__assert_func>
 8007440:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007444:	6005      	str	r5, [r0, #0]
 8007446:	60c5      	str	r5, [r0, #12]
 8007448:	69e3      	ldr	r3, [r4, #28]
 800744a:	6819      	ldr	r1, [r3, #0]
 800744c:	b151      	cbz	r1, 8007464 <_dtoa_r+0x5c>
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	604a      	str	r2, [r1, #4]
 8007452:	2301      	movs	r3, #1
 8007454:	4093      	lsls	r3, r2
 8007456:	608b      	str	r3, [r1, #8]
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fe53 	bl	8008104 <_Bfree>
 800745e:	69e3      	ldr	r3, [r4, #28]
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	1e3b      	subs	r3, r7, #0
 8007466:	bfbb      	ittet	lt
 8007468:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800746c:	9303      	strlt	r3, [sp, #12]
 800746e:	2300      	movge	r3, #0
 8007470:	2201      	movlt	r2, #1
 8007472:	bfac      	ite	ge
 8007474:	f8c8 3000 	strge.w	r3, [r8]
 8007478:	f8c8 2000 	strlt.w	r2, [r8]
 800747c:	4b9e      	ldr	r3, [pc, #632]	; (80076f8 <_dtoa_r+0x2f0>)
 800747e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007482:	ea33 0308 	bics.w	r3, r3, r8
 8007486:	d11b      	bne.n	80074c0 <_dtoa_r+0xb8>
 8007488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800748a:	f242 730f 	movw	r3, #9999	; 0x270f
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007494:	4333      	orrs	r3, r6
 8007496:	f000 8593 	beq.w	8007fc0 <_dtoa_r+0xbb8>
 800749a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800749c:	b963      	cbnz	r3, 80074b8 <_dtoa_r+0xb0>
 800749e:	4b97      	ldr	r3, [pc, #604]	; (80076fc <_dtoa_r+0x2f4>)
 80074a0:	e027      	b.n	80074f2 <_dtoa_r+0xea>
 80074a2:	4b97      	ldr	r3, [pc, #604]	; (8007700 <_dtoa_r+0x2f8>)
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	9800      	ldr	r0, [sp, #0]
 80074ae:	b013      	add	sp, #76	; 0x4c
 80074b0:	ecbd 8b04 	vpop	{d8-d9}
 80074b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b8:	4b90      	ldr	r3, [pc, #576]	; (80076fc <_dtoa_r+0x2f4>)
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	3303      	adds	r3, #3
 80074be:	e7f3      	b.n	80074a8 <_dtoa_r+0xa0>
 80074c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	ec51 0b17 	vmov	r0, r1, d7
 80074ca:	eeb0 8a47 	vmov.f32	s16, s14
 80074ce:	eef0 8a67 	vmov.f32	s17, s15
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f9 faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d8:	4681      	mov	r9, r0
 80074da:	b160      	cbz	r0, 80074f6 <_dtoa_r+0xee>
 80074dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074de:	2301      	movs	r3, #1
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8568 	beq.w	8007fba <_dtoa_r+0xbb2>
 80074ea:	4b86      	ldr	r3, [pc, #536]	; (8007704 <_dtoa_r+0x2fc>)
 80074ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	e7da      	b.n	80074ac <_dtoa_r+0xa4>
 80074f6:	aa10      	add	r2, sp, #64	; 0x40
 80074f8:	a911      	add	r1, sp, #68	; 0x44
 80074fa:	4620      	mov	r0, r4
 80074fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007500:	eef0 0a68 	vmov.f32	s1, s17
 8007504:	f001 f8e0 	bl	80086c8 <__d2b>
 8007508:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800750c:	4682      	mov	sl, r0
 800750e:	2d00      	cmp	r5, #0
 8007510:	d07f      	beq.n	8007612 <_dtoa_r+0x20a>
 8007512:	ee18 3a90 	vmov	r3, s17
 8007516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800751a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800751e:	ec51 0b18 	vmov	r0, r1, d8
 8007522:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800752a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800752e:	4619      	mov	r1, r3
 8007530:	2200      	movs	r2, #0
 8007532:	4b75      	ldr	r3, [pc, #468]	; (8007708 <_dtoa_r+0x300>)
 8007534:	f7f8 fea8 	bl	8000288 <__aeabi_dsub>
 8007538:	a367      	add	r3, pc, #412	; (adr r3, 80076d8 <_dtoa_r+0x2d0>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	a367      	add	r3, pc, #412	; (adr r3, 80076e0 <_dtoa_r+0x2d8>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f8 fea0 	bl	800028c <__adddf3>
 800754c:	4606      	mov	r6, r0
 800754e:	4628      	mov	r0, r5
 8007550:	460f      	mov	r7, r1
 8007552:	f7f8 ffe7 	bl	8000524 <__aeabi_i2d>
 8007556:	a364      	add	r3, pc, #400	; (adr r3, 80076e8 <_dtoa_r+0x2e0>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f7f9 f84c 	bl	80005f8 <__aeabi_dmul>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4630      	mov	r0, r6
 8007566:	4639      	mov	r1, r7
 8007568:	f7f8 fe90 	bl	800028c <__adddf3>
 800756c:	4606      	mov	r6, r0
 800756e:	460f      	mov	r7, r1
 8007570:	f7f9 faf2 	bl	8000b58 <__aeabi_d2iz>
 8007574:	2200      	movs	r2, #0
 8007576:	4683      	mov	fp, r0
 8007578:	2300      	movs	r3, #0
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f9 faad 	bl	8000adc <__aeabi_dcmplt>
 8007582:	b148      	cbz	r0, 8007598 <_dtoa_r+0x190>
 8007584:	4658      	mov	r0, fp
 8007586:	f7f8 ffcd 	bl	8000524 <__aeabi_i2d>
 800758a:	4632      	mov	r2, r6
 800758c:	463b      	mov	r3, r7
 800758e:	f7f9 fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007592:	b908      	cbnz	r0, 8007598 <_dtoa_r+0x190>
 8007594:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007598:	f1bb 0f16 	cmp.w	fp, #22
 800759c:	d857      	bhi.n	800764e <_dtoa_r+0x246>
 800759e:	4b5b      	ldr	r3, [pc, #364]	; (800770c <_dtoa_r+0x304>)
 80075a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	ec51 0b18 	vmov	r0, r1, d8
 80075ac:	f7f9 fa96 	bl	8000adc <__aeabi_dcmplt>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d04e      	beq.n	8007652 <_dtoa_r+0x24a>
 80075b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075b8:	2300      	movs	r3, #0
 80075ba:	930c      	str	r3, [sp, #48]	; 0x30
 80075bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075be:	1b5b      	subs	r3, r3, r5
 80075c0:	1e5a      	subs	r2, r3, #1
 80075c2:	bf45      	ittet	mi
 80075c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80075c8:	9305      	strmi	r3, [sp, #20]
 80075ca:	2300      	movpl	r3, #0
 80075cc:	2300      	movmi	r3, #0
 80075ce:	9206      	str	r2, [sp, #24]
 80075d0:	bf54      	ite	pl
 80075d2:	9305      	strpl	r3, [sp, #20]
 80075d4:	9306      	strmi	r3, [sp, #24]
 80075d6:	f1bb 0f00 	cmp.w	fp, #0
 80075da:	db3c      	blt.n	8007656 <_dtoa_r+0x24e>
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80075e2:	445b      	add	r3, fp
 80075e4:	9306      	str	r3, [sp, #24]
 80075e6:	2300      	movs	r3, #0
 80075e8:	9308      	str	r3, [sp, #32]
 80075ea:	9b07      	ldr	r3, [sp, #28]
 80075ec:	2b09      	cmp	r3, #9
 80075ee:	d868      	bhi.n	80076c2 <_dtoa_r+0x2ba>
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	bfc4      	itt	gt
 80075f4:	3b04      	subgt	r3, #4
 80075f6:	9307      	strgt	r3, [sp, #28]
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	f1a3 0302 	sub.w	r3, r3, #2
 80075fe:	bfcc      	ite	gt
 8007600:	2500      	movgt	r5, #0
 8007602:	2501      	movle	r5, #1
 8007604:	2b03      	cmp	r3, #3
 8007606:	f200 8085 	bhi.w	8007714 <_dtoa_r+0x30c>
 800760a:	e8df f003 	tbb	[pc, r3]
 800760e:	3b2e      	.short	0x3b2e
 8007610:	5839      	.short	0x5839
 8007612:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007616:	441d      	add	r5, r3
 8007618:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800761c:	2b20      	cmp	r3, #32
 800761e:	bfc1      	itttt	gt
 8007620:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007624:	fa08 f803 	lslgt.w	r8, r8, r3
 8007628:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800762c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007630:	bfd6      	itet	le
 8007632:	f1c3 0320 	rsble	r3, r3, #32
 8007636:	ea48 0003 	orrgt.w	r0, r8, r3
 800763a:	fa06 f003 	lslle.w	r0, r6, r3
 800763e:	f7f8 ff61 	bl	8000504 <__aeabi_ui2d>
 8007642:	2201      	movs	r2, #1
 8007644:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007648:	3d01      	subs	r5, #1
 800764a:	920e      	str	r2, [sp, #56]	; 0x38
 800764c:	e76f      	b.n	800752e <_dtoa_r+0x126>
 800764e:	2301      	movs	r3, #1
 8007650:	e7b3      	b.n	80075ba <_dtoa_r+0x1b2>
 8007652:	900c      	str	r0, [sp, #48]	; 0x30
 8007654:	e7b2      	b.n	80075bc <_dtoa_r+0x1b4>
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	eba3 030b 	sub.w	r3, r3, fp
 800765c:	9305      	str	r3, [sp, #20]
 800765e:	f1cb 0300 	rsb	r3, fp, #0
 8007662:	9308      	str	r3, [sp, #32]
 8007664:	2300      	movs	r3, #0
 8007666:	930b      	str	r3, [sp, #44]	; 0x2c
 8007668:	e7bf      	b.n	80075ea <_dtoa_r+0x1e2>
 800766a:	2300      	movs	r3, #0
 800766c:	9309      	str	r3, [sp, #36]	; 0x24
 800766e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007670:	2b00      	cmp	r3, #0
 8007672:	dc52      	bgt.n	800771a <_dtoa_r+0x312>
 8007674:	2301      	movs	r3, #1
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	461a      	mov	r2, r3
 800767c:	920a      	str	r2, [sp, #40]	; 0x28
 800767e:	e00b      	b.n	8007698 <_dtoa_r+0x290>
 8007680:	2301      	movs	r3, #1
 8007682:	e7f3      	b.n	800766c <_dtoa_r+0x264>
 8007684:	2300      	movs	r3, #0
 8007686:	9309      	str	r3, [sp, #36]	; 0x24
 8007688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768a:	445b      	add	r3, fp
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	3301      	adds	r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	bfb8      	it	lt
 8007696:	2301      	movlt	r3, #1
 8007698:	69e0      	ldr	r0, [r4, #28]
 800769a:	2100      	movs	r1, #0
 800769c:	2204      	movs	r2, #4
 800769e:	f102 0614 	add.w	r6, r2, #20
 80076a2:	429e      	cmp	r6, r3
 80076a4:	d93d      	bls.n	8007722 <_dtoa_r+0x31a>
 80076a6:	6041      	str	r1, [r0, #4]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fceb 	bl	8008084 <_Balloc>
 80076ae:	9000      	str	r0, [sp, #0]
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d139      	bne.n	8007728 <_dtoa_r+0x320>
 80076b4:	4b16      	ldr	r3, [pc, #88]	; (8007710 <_dtoa_r+0x308>)
 80076b6:	4602      	mov	r2, r0
 80076b8:	f240 11af 	movw	r1, #431	; 0x1af
 80076bc:	e6bd      	b.n	800743a <_dtoa_r+0x32>
 80076be:	2301      	movs	r3, #1
 80076c0:	e7e1      	b.n	8007686 <_dtoa_r+0x27e>
 80076c2:	2501      	movs	r5, #1
 80076c4:	2300      	movs	r3, #0
 80076c6:	9307      	str	r3, [sp, #28]
 80076c8:	9509      	str	r5, [sp, #36]	; 0x24
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2312      	movs	r3, #18
 80076d6:	e7d1      	b.n	800767c <_dtoa_r+0x274>
 80076d8:	636f4361 	.word	0x636f4361
 80076dc:	3fd287a7 	.word	0x3fd287a7
 80076e0:	8b60c8b3 	.word	0x8b60c8b3
 80076e4:	3fc68a28 	.word	0x3fc68a28
 80076e8:	509f79fb 	.word	0x509f79fb
 80076ec:	3fd34413 	.word	0x3fd34413
 80076f0:	0800aa43 	.word	0x0800aa43
 80076f4:	0800aa5a 	.word	0x0800aa5a
 80076f8:	7ff00000 	.word	0x7ff00000
 80076fc:	0800aa3f 	.word	0x0800aa3f
 8007700:	0800aa36 	.word	0x0800aa36
 8007704:	08009210 	.word	0x08009210
 8007708:	3ff80000 	.word	0x3ff80000
 800770c:	0800ab48 	.word	0x0800ab48
 8007710:	0800aab2 	.word	0x0800aab2
 8007714:	2301      	movs	r3, #1
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	e7d7      	b.n	80076ca <_dtoa_r+0x2c2>
 800771a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	9304      	str	r3, [sp, #16]
 8007720:	e7ba      	b.n	8007698 <_dtoa_r+0x290>
 8007722:	3101      	adds	r1, #1
 8007724:	0052      	lsls	r2, r2, #1
 8007726:	e7ba      	b.n	800769e <_dtoa_r+0x296>
 8007728:	69e3      	ldr	r3, [r4, #28]
 800772a:	9a00      	ldr	r2, [sp, #0]
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	2b0e      	cmp	r3, #14
 8007732:	f200 80a8 	bhi.w	8007886 <_dtoa_r+0x47e>
 8007736:	2d00      	cmp	r5, #0
 8007738:	f000 80a5 	beq.w	8007886 <_dtoa_r+0x47e>
 800773c:	f1bb 0f00 	cmp.w	fp, #0
 8007740:	dd38      	ble.n	80077b4 <_dtoa_r+0x3ac>
 8007742:	4bc0      	ldr	r3, [pc, #768]	; (8007a44 <_dtoa_r+0x63c>)
 8007744:	f00b 020f 	and.w	r2, fp, #15
 8007748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800774c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007750:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007754:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007758:	d019      	beq.n	800778e <_dtoa_r+0x386>
 800775a:	4bbb      	ldr	r3, [pc, #748]	; (8007a48 <_dtoa_r+0x640>)
 800775c:	ec51 0b18 	vmov	r0, r1, d8
 8007760:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007764:	f7f9 f872 	bl	800084c <__aeabi_ddiv>
 8007768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800776c:	f008 080f 	and.w	r8, r8, #15
 8007770:	2503      	movs	r5, #3
 8007772:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007a48 <_dtoa_r+0x640>
 8007776:	f1b8 0f00 	cmp.w	r8, #0
 800777a:	d10a      	bne.n	8007792 <_dtoa_r+0x38a>
 800777c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	f7f9 f862 	bl	800084c <__aeabi_ddiv>
 8007788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778c:	e02b      	b.n	80077e6 <_dtoa_r+0x3de>
 800778e:	2502      	movs	r5, #2
 8007790:	e7ef      	b.n	8007772 <_dtoa_r+0x36a>
 8007792:	f018 0f01 	tst.w	r8, #1
 8007796:	d008      	beq.n	80077aa <_dtoa_r+0x3a2>
 8007798:	4630      	mov	r0, r6
 800779a:	4639      	mov	r1, r7
 800779c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077a0:	f7f8 ff2a 	bl	80005f8 <__aeabi_dmul>
 80077a4:	3501      	adds	r5, #1
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077ae:	f109 0908 	add.w	r9, r9, #8
 80077b2:	e7e0      	b.n	8007776 <_dtoa_r+0x36e>
 80077b4:	f000 809f 	beq.w	80078f6 <_dtoa_r+0x4ee>
 80077b8:	f1cb 0600 	rsb	r6, fp, #0
 80077bc:	4ba1      	ldr	r3, [pc, #644]	; (8007a44 <_dtoa_r+0x63c>)
 80077be:	4fa2      	ldr	r7, [pc, #648]	; (8007a48 <_dtoa_r+0x640>)
 80077c0:	f006 020f 	and.w	r2, r6, #15
 80077c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	ec51 0b18 	vmov	r0, r1, d8
 80077d0:	f7f8 ff12 	bl	80005f8 <__aeabi_dmul>
 80077d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d8:	1136      	asrs	r6, r6, #4
 80077da:	2300      	movs	r3, #0
 80077dc:	2502      	movs	r5, #2
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d17e      	bne.n	80078e0 <_dtoa_r+0x4d8>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1d0      	bne.n	8007788 <_dtoa_r+0x380>
 80077e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8084 	beq.w	80078fa <_dtoa_r+0x4f2>
 80077f2:	4b96      	ldr	r3, [pc, #600]	; (8007a4c <_dtoa_r+0x644>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f9 f96f 	bl	8000adc <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d07b      	beq.n	80078fa <_dtoa_r+0x4f2>
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d078      	beq.n	80078fa <_dtoa_r+0x4f2>
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd39      	ble.n	8007882 <_dtoa_r+0x47a>
 800780e:	4b90      	ldr	r3, [pc, #576]	; (8007a50 <_dtoa_r+0x648>)
 8007810:	2200      	movs	r2, #0
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	f7f8 feef 	bl	80005f8 <__aeabi_dmul>
 800781a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800781e:	9e01      	ldr	r6, [sp, #4]
 8007820:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007824:	3501      	adds	r5, #1
 8007826:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800782a:	4628      	mov	r0, r5
 800782c:	f7f8 fe7a 	bl	8000524 <__aeabi_i2d>
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	f7f8 fee0 	bl	80005f8 <__aeabi_dmul>
 8007838:	4b86      	ldr	r3, [pc, #536]	; (8007a54 <_dtoa_r+0x64c>)
 800783a:	2200      	movs	r2, #0
 800783c:	f7f8 fd26 	bl	800028c <__adddf3>
 8007840:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	2e00      	cmp	r6, #0
 800784c:	d158      	bne.n	8007900 <_dtoa_r+0x4f8>
 800784e:	4b82      	ldr	r3, [pc, #520]	; (8007a58 <_dtoa_r+0x650>)
 8007850:	2200      	movs	r2, #0
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f7f8 fd17 	bl	8000288 <__aeabi_dsub>
 800785a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800785e:	4680      	mov	r8, r0
 8007860:	4689      	mov	r9, r1
 8007862:	f7f9 f959 	bl	8000b18 <__aeabi_dcmpgt>
 8007866:	2800      	cmp	r0, #0
 8007868:	f040 8296 	bne.w	8007d98 <_dtoa_r+0x990>
 800786c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007870:	4640      	mov	r0, r8
 8007872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007876:	4649      	mov	r1, r9
 8007878:	f7f9 f930 	bl	8000adc <__aeabi_dcmplt>
 800787c:	2800      	cmp	r0, #0
 800787e:	f040 8289 	bne.w	8007d94 <_dtoa_r+0x98c>
 8007882:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007888:	2b00      	cmp	r3, #0
 800788a:	f2c0 814e 	blt.w	8007b2a <_dtoa_r+0x722>
 800788e:	f1bb 0f0e 	cmp.w	fp, #14
 8007892:	f300 814a 	bgt.w	8007b2a <_dtoa_r+0x722>
 8007896:	4b6b      	ldr	r3, [pc, #428]	; (8007a44 <_dtoa_r+0x63c>)
 8007898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800789c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f280 80dc 	bge.w	8007a60 <_dtoa_r+0x658>
 80078a8:	9b04      	ldr	r3, [sp, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f300 80d8 	bgt.w	8007a60 <_dtoa_r+0x658>
 80078b0:	f040 826f 	bne.w	8007d92 <_dtoa_r+0x98a>
 80078b4:	4b68      	ldr	r3, [pc, #416]	; (8007a58 <_dtoa_r+0x650>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f8 fe9c 	bl	80005f8 <__aeabi_dmul>
 80078c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c4:	f7f9 f91e 	bl	8000b04 <__aeabi_dcmpge>
 80078c8:	9e04      	ldr	r6, [sp, #16]
 80078ca:	4637      	mov	r7, r6
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f040 8245 	bne.w	8007d5c <_dtoa_r+0x954>
 80078d2:	9d00      	ldr	r5, [sp, #0]
 80078d4:	2331      	movs	r3, #49	; 0x31
 80078d6:	f805 3b01 	strb.w	r3, [r5], #1
 80078da:	f10b 0b01 	add.w	fp, fp, #1
 80078de:	e241      	b.n	8007d64 <_dtoa_r+0x95c>
 80078e0:	07f2      	lsls	r2, r6, #31
 80078e2:	d505      	bpl.n	80078f0 <_dtoa_r+0x4e8>
 80078e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e8:	f7f8 fe86 	bl	80005f8 <__aeabi_dmul>
 80078ec:	3501      	adds	r5, #1
 80078ee:	2301      	movs	r3, #1
 80078f0:	1076      	asrs	r6, r6, #1
 80078f2:	3708      	adds	r7, #8
 80078f4:	e773      	b.n	80077de <_dtoa_r+0x3d6>
 80078f6:	2502      	movs	r5, #2
 80078f8:	e775      	b.n	80077e6 <_dtoa_r+0x3de>
 80078fa:	9e04      	ldr	r6, [sp, #16]
 80078fc:	465f      	mov	r7, fp
 80078fe:	e792      	b.n	8007826 <_dtoa_r+0x41e>
 8007900:	9900      	ldr	r1, [sp, #0]
 8007902:	4b50      	ldr	r3, [pc, #320]	; (8007a44 <_dtoa_r+0x63c>)
 8007904:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007908:	4431      	add	r1, r6
 800790a:	9102      	str	r1, [sp, #8]
 800790c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800790e:	eeb0 9a47 	vmov.f32	s18, s14
 8007912:	eef0 9a67 	vmov.f32	s19, s15
 8007916:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800791a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800791e:	2900      	cmp	r1, #0
 8007920:	d044      	beq.n	80079ac <_dtoa_r+0x5a4>
 8007922:	494e      	ldr	r1, [pc, #312]	; (8007a5c <_dtoa_r+0x654>)
 8007924:	2000      	movs	r0, #0
 8007926:	f7f8 ff91 	bl	800084c <__aeabi_ddiv>
 800792a:	ec53 2b19 	vmov	r2, r3, d9
 800792e:	f7f8 fcab 	bl	8000288 <__aeabi_dsub>
 8007932:	9d00      	ldr	r5, [sp, #0]
 8007934:	ec41 0b19 	vmov	d9, r0, r1
 8007938:	4649      	mov	r1, r9
 800793a:	4640      	mov	r0, r8
 800793c:	f7f9 f90c 	bl	8000b58 <__aeabi_d2iz>
 8007940:	4606      	mov	r6, r0
 8007942:	f7f8 fdef 	bl	8000524 <__aeabi_i2d>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f8 fc9b 	bl	8000288 <__aeabi_dsub>
 8007952:	3630      	adds	r6, #48	; 0x30
 8007954:	f805 6b01 	strb.w	r6, [r5], #1
 8007958:	ec53 2b19 	vmov	r2, r3, d9
 800795c:	4680      	mov	r8, r0
 800795e:	4689      	mov	r9, r1
 8007960:	f7f9 f8bc 	bl	8000adc <__aeabi_dcmplt>
 8007964:	2800      	cmp	r0, #0
 8007966:	d164      	bne.n	8007a32 <_dtoa_r+0x62a>
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4937      	ldr	r1, [pc, #220]	; (8007a4c <_dtoa_r+0x644>)
 800796e:	2000      	movs	r0, #0
 8007970:	f7f8 fc8a 	bl	8000288 <__aeabi_dsub>
 8007974:	ec53 2b19 	vmov	r2, r3, d9
 8007978:	f7f9 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800797c:	2800      	cmp	r0, #0
 800797e:	f040 80b6 	bne.w	8007aee <_dtoa_r+0x6e6>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	429d      	cmp	r5, r3
 8007986:	f43f af7c 	beq.w	8007882 <_dtoa_r+0x47a>
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <_dtoa_r+0x648>)
 800798c:	ec51 0b19 	vmov	r0, r1, d9
 8007990:	2200      	movs	r2, #0
 8007992:	f7f8 fe31 	bl	80005f8 <__aeabi_dmul>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <_dtoa_r+0x648>)
 8007998:	ec41 0b19 	vmov	d9, r0, r1
 800799c:	2200      	movs	r2, #0
 800799e:	4640      	mov	r0, r8
 80079a0:	4649      	mov	r1, r9
 80079a2:	f7f8 fe29 	bl	80005f8 <__aeabi_dmul>
 80079a6:	4680      	mov	r8, r0
 80079a8:	4689      	mov	r9, r1
 80079aa:	e7c5      	b.n	8007938 <_dtoa_r+0x530>
 80079ac:	ec51 0b17 	vmov	r0, r1, d7
 80079b0:	f7f8 fe22 	bl	80005f8 <__aeabi_dmul>
 80079b4:	9b02      	ldr	r3, [sp, #8]
 80079b6:	9d00      	ldr	r5, [sp, #0]
 80079b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ba:	ec41 0b19 	vmov	d9, r0, r1
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	f7f9 f8c9 	bl	8000b58 <__aeabi_d2iz>
 80079c6:	4606      	mov	r6, r0
 80079c8:	f7f8 fdac 	bl	8000524 <__aeabi_i2d>
 80079cc:	3630      	adds	r6, #48	; 0x30
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f8 fc57 	bl	8000288 <__aeabi_dsub>
 80079da:	f805 6b01 	strb.w	r6, [r5], #1
 80079de:	9b02      	ldr	r3, [sp, #8]
 80079e0:	429d      	cmp	r5, r3
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	d124      	bne.n	8007a36 <_dtoa_r+0x62e>
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <_dtoa_r+0x654>)
 80079ee:	ec51 0b19 	vmov	r0, r1, d9
 80079f2:	f7f8 fc4b 	bl	800028c <__adddf3>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	f7f9 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d173      	bne.n	8007aee <_dtoa_r+0x6e6>
 8007a06:	ec53 2b19 	vmov	r2, r3, d9
 8007a0a:	4914      	ldr	r1, [pc, #80]	; (8007a5c <_dtoa_r+0x654>)
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f7f8 fc3b 	bl	8000288 <__aeabi_dsub>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f9 f85f 	bl	8000adc <__aeabi_dcmplt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f af2f 	beq.w	8007882 <_dtoa_r+0x47a>
 8007a24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a26:	1e6b      	subs	r3, r5, #1
 8007a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a2e:	2b30      	cmp	r3, #48	; 0x30
 8007a30:	d0f8      	beq.n	8007a24 <_dtoa_r+0x61c>
 8007a32:	46bb      	mov	fp, r7
 8007a34:	e04a      	b.n	8007acc <_dtoa_r+0x6c4>
 8007a36:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <_dtoa_r+0x648>)
 8007a38:	f7f8 fdde 	bl	80005f8 <__aeabi_dmul>
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	4689      	mov	r9, r1
 8007a40:	e7bd      	b.n	80079be <_dtoa_r+0x5b6>
 8007a42:	bf00      	nop
 8007a44:	0800ab48 	.word	0x0800ab48
 8007a48:	0800ab20 	.word	0x0800ab20
 8007a4c:	3ff00000 	.word	0x3ff00000
 8007a50:	40240000 	.word	0x40240000
 8007a54:	401c0000 	.word	0x401c0000
 8007a58:	40140000 	.word	0x40140000
 8007a5c:	3fe00000 	.word	0x3fe00000
 8007a60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a64:	9d00      	ldr	r5, [sp, #0]
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f8 feed 	bl	800084c <__aeabi_ddiv>
 8007a72:	f7f9 f871 	bl	8000b58 <__aeabi_d2iz>
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	f7f8 fd54 	bl	8000524 <__aeabi_i2d>
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	464b      	mov	r3, r9
 8007a80:	f7f8 fdba 	bl	80005f8 <__aeabi_dmul>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fbfc 	bl	8000288 <__aeabi_dsub>
 8007a90:	9e01      	ldr	r6, [sp, #4]
 8007a92:	9f04      	ldr	r7, [sp, #16]
 8007a94:	3630      	adds	r6, #48	; 0x30
 8007a96:	f805 6b01 	strb.w	r6, [r5], #1
 8007a9a:	9e00      	ldr	r6, [sp, #0]
 8007a9c:	1bae      	subs	r6, r5, r6
 8007a9e:	42b7      	cmp	r7, r6
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	d134      	bne.n	8007b10 <_dtoa_r+0x708>
 8007aa6:	f7f8 fbf1 	bl	800028c <__adddf3>
 8007aaa:	4642      	mov	r2, r8
 8007aac:	464b      	mov	r3, r9
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	f7f9 f831 	bl	8000b18 <__aeabi_dcmpgt>
 8007ab6:	b9c8      	cbnz	r0, 8007aec <_dtoa_r+0x6e4>
 8007ab8:	4642      	mov	r2, r8
 8007aba:	464b      	mov	r3, r9
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7f9 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac4:	b110      	cbz	r0, 8007acc <_dtoa_r+0x6c4>
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	07db      	lsls	r3, r3, #31
 8007aca:	d40f      	bmi.n	8007aec <_dtoa_r+0x6e4>
 8007acc:	4651      	mov	r1, sl
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fb18 	bl	8008104 <_Bfree>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad8:	702b      	strb	r3, [r5, #0]
 8007ada:	f10b 0301 	add.w	r3, fp, #1
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f43f ace2 	beq.w	80074ac <_dtoa_r+0xa4>
 8007ae8:	601d      	str	r5, [r3, #0]
 8007aea:	e4df      	b.n	80074ac <_dtoa_r+0xa4>
 8007aec:	465f      	mov	r7, fp
 8007aee:	462b      	mov	r3, r5
 8007af0:	461d      	mov	r5, r3
 8007af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007af6:	2a39      	cmp	r2, #57	; 0x39
 8007af8:	d106      	bne.n	8007b08 <_dtoa_r+0x700>
 8007afa:	9a00      	ldr	r2, [sp, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d1f7      	bne.n	8007af0 <_dtoa_r+0x6e8>
 8007b00:	9900      	ldr	r1, [sp, #0]
 8007b02:	2230      	movs	r2, #48	; 0x30
 8007b04:	3701      	adds	r7, #1
 8007b06:	700a      	strb	r2, [r1, #0]
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	3201      	adds	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e790      	b.n	8007a32 <_dtoa_r+0x62a>
 8007b10:	4ba3      	ldr	r3, [pc, #652]	; (8007da0 <_dtoa_r+0x998>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	f7f8 fd70 	bl	80005f8 <__aeabi_dmul>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f7f8 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d09e      	beq.n	8007a66 <_dtoa_r+0x65e>
 8007b28:	e7d0      	b.n	8007acc <_dtoa_r+0x6c4>
 8007b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	f000 80ca 	beq.w	8007cc6 <_dtoa_r+0x8be>
 8007b32:	9a07      	ldr	r2, [sp, #28]
 8007b34:	2a01      	cmp	r2, #1
 8007b36:	f300 80ad 	bgt.w	8007c94 <_dtoa_r+0x88c>
 8007b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	f000 80a5 	beq.w	8007c8c <_dtoa_r+0x884>
 8007b42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b46:	9e08      	ldr	r6, [sp, #32]
 8007b48:	9d05      	ldr	r5, [sp, #20]
 8007b4a:	9a05      	ldr	r2, [sp, #20]
 8007b4c:	441a      	add	r2, r3
 8007b4e:	9205      	str	r2, [sp, #20]
 8007b50:	9a06      	ldr	r2, [sp, #24]
 8007b52:	2101      	movs	r1, #1
 8007b54:	441a      	add	r2, r3
 8007b56:	4620      	mov	r0, r4
 8007b58:	9206      	str	r2, [sp, #24]
 8007b5a:	f000 fb89 	bl	8008270 <__i2b>
 8007b5e:	4607      	mov	r7, r0
 8007b60:	b165      	cbz	r5, 8007b7c <_dtoa_r+0x774>
 8007b62:	9b06      	ldr	r3, [sp, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd09      	ble.n	8007b7c <_dtoa_r+0x774>
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	9a05      	ldr	r2, [sp, #20]
 8007b6c:	bfa8      	it	ge
 8007b6e:	462b      	movge	r3, r5
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	9205      	str	r2, [sp, #20]
 8007b74:	9a06      	ldr	r2, [sp, #24]
 8007b76:	1aed      	subs	r5, r5, r3
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	9b08      	ldr	r3, [sp, #32]
 8007b7e:	b1f3      	cbz	r3, 8007bbe <_dtoa_r+0x7b6>
 8007b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80a3 	beq.w	8007cce <_dtoa_r+0x8c6>
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	dd10      	ble.n	8007bae <_dtoa_r+0x7a6>
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fc2d 	bl	80083f0 <__pow5mult>
 8007b96:	4652      	mov	r2, sl
 8007b98:	4601      	mov	r1, r0
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 fb7d 	bl	800829c <__multiply>
 8007ba2:	4651      	mov	r1, sl
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 faac 	bl	8008104 <_Bfree>
 8007bac:	46c2      	mov	sl, r8
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	1b9a      	subs	r2, r3, r6
 8007bb2:	d004      	beq.n	8007bbe <_dtoa_r+0x7b6>
 8007bb4:	4651      	mov	r1, sl
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fc1a 	bl	80083f0 <__pow5mult>
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fb55 	bl	8008270 <__i2b>
 8007bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	4606      	mov	r6, r0
 8007bcc:	f340 8081 	ble.w	8007cd2 <_dtoa_r+0x8ca>
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fc0b 	bl	80083f0 <__pow5mult>
 8007bda:	9b07      	ldr	r3, [sp, #28]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	4606      	mov	r6, r0
 8007be0:	dd7a      	ble.n	8007cd8 <_dtoa_r+0x8d0>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	6933      	ldr	r3, [r6, #16]
 8007be8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bec:	6918      	ldr	r0, [r3, #16]
 8007bee:	f000 faf1 	bl	80081d4 <__hi0bits>
 8007bf2:	f1c0 0020 	rsb	r0, r0, #32
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	4418      	add	r0, r3
 8007bfa:	f010 001f 	ands.w	r0, r0, #31
 8007bfe:	f000 8094 	beq.w	8007d2a <_dtoa_r+0x922>
 8007c02:	f1c0 0320 	rsb	r3, r0, #32
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	f340 8085 	ble.w	8007d16 <_dtoa_r+0x90e>
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	f1c0 001c 	rsb	r0, r0, #28
 8007c12:	4403      	add	r3, r0
 8007c14:	9305      	str	r3, [sp, #20]
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	4403      	add	r3, r0
 8007c1a:	4405      	add	r5, r0
 8007c1c:	9306      	str	r3, [sp, #24]
 8007c1e:	9b05      	ldr	r3, [sp, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd05      	ble.n	8007c30 <_dtoa_r+0x828>
 8007c24:	4651      	mov	r1, sl
 8007c26:	461a      	mov	r2, r3
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fc3b 	bl	80084a4 <__lshift>
 8007c2e:	4682      	mov	sl, r0
 8007c30:	9b06      	ldr	r3, [sp, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd05      	ble.n	8007c42 <_dtoa_r+0x83a>
 8007c36:	4631      	mov	r1, r6
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fc32 	bl	80084a4 <__lshift>
 8007c40:	4606      	mov	r6, r0
 8007c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d072      	beq.n	8007d2e <_dtoa_r+0x926>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f000 fc96 	bl	800857c <__mcmp>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	da6c      	bge.n	8007d2e <_dtoa_r+0x926>
 8007c54:	2300      	movs	r3, #0
 8007c56:	4651      	mov	r1, sl
 8007c58:	220a      	movs	r2, #10
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fa74 	bl	8008148 <__multadd>
 8007c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c66:	4682      	mov	sl, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 81b0 	beq.w	8007fce <_dtoa_r+0xbc6>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4639      	mov	r1, r7
 8007c72:	220a      	movs	r2, #10
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 fa67 	bl	8008148 <__multadd>
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f300 8096 	bgt.w	8007db0 <_dtoa_r+0x9a8>
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	dc59      	bgt.n	8007d3e <_dtoa_r+0x936>
 8007c8a:	e091      	b.n	8007db0 <_dtoa_r+0x9a8>
 8007c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c92:	e758      	b.n	8007b46 <_dtoa_r+0x73e>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	1e5e      	subs	r6, r3, #1
 8007c98:	9b08      	ldr	r3, [sp, #32]
 8007c9a:	42b3      	cmp	r3, r6
 8007c9c:	bfbf      	itttt	lt
 8007c9e:	9b08      	ldrlt	r3, [sp, #32]
 8007ca0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ca2:	9608      	strlt	r6, [sp, #32]
 8007ca4:	1af3      	sublt	r3, r6, r3
 8007ca6:	bfb4      	ite	lt
 8007ca8:	18d2      	addlt	r2, r2, r3
 8007caa:	1b9e      	subge	r6, r3, r6
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	bfbc      	itt	lt
 8007cb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007cb2:	2600      	movlt	r6, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bfb7      	itett	lt
 8007cb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007cbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007cc0:	1a9d      	sublt	r5, r3, r2
 8007cc2:	2300      	movlt	r3, #0
 8007cc4:	e741      	b.n	8007b4a <_dtoa_r+0x742>
 8007cc6:	9e08      	ldr	r6, [sp, #32]
 8007cc8:	9d05      	ldr	r5, [sp, #20]
 8007cca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ccc:	e748      	b.n	8007b60 <_dtoa_r+0x758>
 8007cce:	9a08      	ldr	r2, [sp, #32]
 8007cd0:	e770      	b.n	8007bb4 <_dtoa_r+0x7ac>
 8007cd2:	9b07      	ldr	r3, [sp, #28]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	dc19      	bgt.n	8007d0c <_dtoa_r+0x904>
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	b9bb      	cbnz	r3, 8007d0c <_dtoa_r+0x904>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ce2:	b99b      	cbnz	r3, 8007d0c <_dtoa_r+0x904>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cea:	0d1b      	lsrs	r3, r3, #20
 8007cec:	051b      	lsls	r3, r3, #20
 8007cee:	b183      	cbz	r3, 8007d12 <_dtoa_r+0x90a>
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	9b06      	ldr	r3, [sp, #24]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	f04f 0801 	mov.w	r8, #1
 8007d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f47f af6f 	bne.w	8007be6 <_dtoa_r+0x7de>
 8007d08:	2001      	movs	r0, #1
 8007d0a:	e774      	b.n	8007bf6 <_dtoa_r+0x7ee>
 8007d0c:	f04f 0800 	mov.w	r8, #0
 8007d10:	e7f6      	b.n	8007d00 <_dtoa_r+0x8f8>
 8007d12:	4698      	mov	r8, r3
 8007d14:	e7f4      	b.n	8007d00 <_dtoa_r+0x8f8>
 8007d16:	d082      	beq.n	8007c1e <_dtoa_r+0x816>
 8007d18:	9a05      	ldr	r2, [sp, #20]
 8007d1a:	331c      	adds	r3, #28
 8007d1c:	441a      	add	r2, r3
 8007d1e:	9205      	str	r2, [sp, #20]
 8007d20:	9a06      	ldr	r2, [sp, #24]
 8007d22:	441a      	add	r2, r3
 8007d24:	441d      	add	r5, r3
 8007d26:	9206      	str	r2, [sp, #24]
 8007d28:	e779      	b.n	8007c1e <_dtoa_r+0x816>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	e7f4      	b.n	8007d18 <_dtoa_r+0x910>
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	dc37      	bgt.n	8007da4 <_dtoa_r+0x99c>
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	dd34      	ble.n	8007da4 <_dtoa_r+0x99c>
 8007d3a:	9b04      	ldr	r3, [sp, #16]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	b963      	cbnz	r3, 8007d5c <_dtoa_r+0x954>
 8007d42:	4631      	mov	r1, r6
 8007d44:	2205      	movs	r2, #5
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 f9fe 	bl	8008148 <__multadd>
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	4606      	mov	r6, r0
 8007d50:	4650      	mov	r0, sl
 8007d52:	f000 fc13 	bl	800857c <__mcmp>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f73f adbb 	bgt.w	80078d2 <_dtoa_r+0x4ca>
 8007d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d5e:	9d00      	ldr	r5, [sp, #0]
 8007d60:	ea6f 0b03 	mvn.w	fp, r3
 8007d64:	f04f 0800 	mov.w	r8, #0
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 f9ca 	bl	8008104 <_Bfree>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	f43f aeab 	beq.w	8007acc <_dtoa_r+0x6c4>
 8007d76:	f1b8 0f00 	cmp.w	r8, #0
 8007d7a:	d005      	beq.n	8007d88 <_dtoa_r+0x980>
 8007d7c:	45b8      	cmp	r8, r7
 8007d7e:	d003      	beq.n	8007d88 <_dtoa_r+0x980>
 8007d80:	4641      	mov	r1, r8
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 f9be 	bl	8008104 <_Bfree>
 8007d88:	4639      	mov	r1, r7
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f9ba 	bl	8008104 <_Bfree>
 8007d90:	e69c      	b.n	8007acc <_dtoa_r+0x6c4>
 8007d92:	2600      	movs	r6, #0
 8007d94:	4637      	mov	r7, r6
 8007d96:	e7e1      	b.n	8007d5c <_dtoa_r+0x954>
 8007d98:	46bb      	mov	fp, r7
 8007d9a:	4637      	mov	r7, r6
 8007d9c:	e599      	b.n	80078d2 <_dtoa_r+0x4ca>
 8007d9e:	bf00      	nop
 8007da0:	40240000 	.word	0x40240000
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 80c8 	beq.w	8007f3c <_dtoa_r+0xb34>
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	dd05      	ble.n	8007dc0 <_dtoa_r+0x9b8>
 8007db4:	4639      	mov	r1, r7
 8007db6:	462a      	mov	r2, r5
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fb73 	bl	80084a4 <__lshift>
 8007dbe:	4607      	mov	r7, r0
 8007dc0:	f1b8 0f00 	cmp.w	r8, #0
 8007dc4:	d05b      	beq.n	8007e7e <_dtoa_r+0xa76>
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 f95b 	bl	8008084 <_Balloc>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	b928      	cbnz	r0, 8007dde <_dtoa_r+0x9d6>
 8007dd2:	4b83      	ldr	r3, [pc, #524]	; (8007fe0 <_dtoa_r+0xbd8>)
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007dda:	f7ff bb2e 	b.w	800743a <_dtoa_r+0x32>
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	3202      	adds	r2, #2
 8007de2:	0092      	lsls	r2, r2, #2
 8007de4:	f107 010c 	add.w	r1, r7, #12
 8007de8:	300c      	adds	r0, #12
 8007dea:	f7ff fa75 	bl	80072d8 <memcpy>
 8007dee:	2201      	movs	r2, #1
 8007df0:	4629      	mov	r1, r5
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 fb56 	bl	80084a4 <__lshift>
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	9304      	str	r3, [sp, #16]
 8007dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e02:	4413      	add	r3, r2
 8007e04:	9308      	str	r3, [sp, #32]
 8007e06:	9b02      	ldr	r3, [sp, #8]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	46b8      	mov	r8, r7
 8007e0e:	9306      	str	r3, [sp, #24]
 8007e10:	4607      	mov	r7, r0
 8007e12:	9b04      	ldr	r3, [sp, #16]
 8007e14:	4631      	mov	r1, r6
 8007e16:	3b01      	subs	r3, #1
 8007e18:	4650      	mov	r0, sl
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	f7ff fa6a 	bl	80072f4 <quorem>
 8007e20:	4641      	mov	r1, r8
 8007e22:	9002      	str	r0, [sp, #8]
 8007e24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e28:	4650      	mov	r0, sl
 8007e2a:	f000 fba7 	bl	800857c <__mcmp>
 8007e2e:	463a      	mov	r2, r7
 8007e30:	9005      	str	r0, [sp, #20]
 8007e32:	4631      	mov	r1, r6
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 fbbd 	bl	80085b4 <__mdiff>
 8007e3a:	68c2      	ldr	r2, [r0, #12]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	bb02      	cbnz	r2, 8007e82 <_dtoa_r+0xa7a>
 8007e40:	4601      	mov	r1, r0
 8007e42:	4650      	mov	r0, sl
 8007e44:	f000 fb9a 	bl	800857c <__mcmp>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e50:	f000 f958 	bl	8008104 <_Bfree>
 8007e54:	9b07      	ldr	r3, [sp, #28]
 8007e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e58:	9d04      	ldr	r5, [sp, #16]
 8007e5a:	ea43 0102 	orr.w	r1, r3, r2
 8007e5e:	9b06      	ldr	r3, [sp, #24]
 8007e60:	4319      	orrs	r1, r3
 8007e62:	d110      	bne.n	8007e86 <_dtoa_r+0xa7e>
 8007e64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e68:	d029      	beq.n	8007ebe <_dtoa_r+0xab6>
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd02      	ble.n	8007e76 <_dtoa_r+0xa6e>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	f883 9000 	strb.w	r9, [r3]
 8007e7c:	e774      	b.n	8007d68 <_dtoa_r+0x960>
 8007e7e:	4638      	mov	r0, r7
 8007e80:	e7ba      	b.n	8007df8 <_dtoa_r+0x9f0>
 8007e82:	2201      	movs	r2, #1
 8007e84:	e7e1      	b.n	8007e4a <_dtoa_r+0xa42>
 8007e86:	9b05      	ldr	r3, [sp, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	db04      	blt.n	8007e96 <_dtoa_r+0xa8e>
 8007e8c:	9907      	ldr	r1, [sp, #28]
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	9906      	ldr	r1, [sp, #24]
 8007e92:	430b      	orrs	r3, r1
 8007e94:	d120      	bne.n	8007ed8 <_dtoa_r+0xad0>
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	dded      	ble.n	8007e76 <_dtoa_r+0xa6e>
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fb00 	bl	80084a4 <__lshift>
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4682      	mov	sl, r0
 8007ea8:	f000 fb68 	bl	800857c <__mcmp>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	dc03      	bgt.n	8007eb8 <_dtoa_r+0xab0>
 8007eb0:	d1e1      	bne.n	8007e76 <_dtoa_r+0xa6e>
 8007eb2:	f019 0f01 	tst.w	r9, #1
 8007eb6:	d0de      	beq.n	8007e76 <_dtoa_r+0xa6e>
 8007eb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ebc:	d1d8      	bne.n	8007e70 <_dtoa_r+0xa68>
 8007ebe:	9a01      	ldr	r2, [sp, #4]
 8007ec0:	2339      	movs	r3, #57	; 0x39
 8007ec2:	7013      	strb	r3, [r2, #0]
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ece:	2a39      	cmp	r2, #57	; 0x39
 8007ed0:	d06c      	beq.n	8007fac <_dtoa_r+0xba4>
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e747      	b.n	8007d68 <_dtoa_r+0x960>
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	dd07      	ble.n	8007eec <_dtoa_r+0xae4>
 8007edc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ee0:	d0ed      	beq.n	8007ebe <_dtoa_r+0xab6>
 8007ee2:	9a01      	ldr	r2, [sp, #4]
 8007ee4:	f109 0301 	add.w	r3, r9, #1
 8007ee8:	7013      	strb	r3, [r2, #0]
 8007eea:	e73d      	b.n	8007d68 <_dtoa_r+0x960>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	9a08      	ldr	r2, [sp, #32]
 8007ef0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d043      	beq.n	8007f80 <_dtoa_r+0xb78>
 8007ef8:	4651      	mov	r1, sl
 8007efa:	2300      	movs	r3, #0
 8007efc:	220a      	movs	r2, #10
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 f922 	bl	8008148 <__multadd>
 8007f04:	45b8      	cmp	r8, r7
 8007f06:	4682      	mov	sl, r0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	f04f 020a 	mov.w	r2, #10
 8007f10:	4641      	mov	r1, r8
 8007f12:	4620      	mov	r0, r4
 8007f14:	d107      	bne.n	8007f26 <_dtoa_r+0xb1e>
 8007f16:	f000 f917 	bl	8008148 <__multadd>
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	e775      	b.n	8007e12 <_dtoa_r+0xa0a>
 8007f26:	f000 f90f 	bl	8008148 <__multadd>
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	220a      	movs	r2, #10
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f908 	bl	8008148 <__multadd>
 8007f38:	4607      	mov	r7, r0
 8007f3a:	e7f0      	b.n	8007f1e <_dtoa_r+0xb16>
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	9d00      	ldr	r5, [sp, #0]
 8007f42:	4631      	mov	r1, r6
 8007f44:	4650      	mov	r0, sl
 8007f46:	f7ff f9d5 	bl	80072f4 <quorem>
 8007f4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f4e:	9b00      	ldr	r3, [sp, #0]
 8007f50:	f805 9b01 	strb.w	r9, [r5], #1
 8007f54:	1aea      	subs	r2, r5, r3
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	dd07      	ble.n	8007f6c <_dtoa_r+0xb64>
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	2300      	movs	r3, #0
 8007f60:	220a      	movs	r2, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f8f0 	bl	8008148 <__multadd>
 8007f68:	4682      	mov	sl, r0
 8007f6a:	e7ea      	b.n	8007f42 <_dtoa_r+0xb3a>
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfc8      	it	gt
 8007f72:	461d      	movgt	r5, r3
 8007f74:	9b00      	ldr	r3, [sp, #0]
 8007f76:	bfd8      	it	le
 8007f78:	2501      	movle	r5, #1
 8007f7a:	441d      	add	r5, r3
 8007f7c:	f04f 0800 	mov.w	r8, #0
 8007f80:	4651      	mov	r1, sl
 8007f82:	2201      	movs	r2, #1
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fa8d 	bl	80084a4 <__lshift>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	f000 faf5 	bl	800857c <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	dc96      	bgt.n	8007ec4 <_dtoa_r+0xabc>
 8007f96:	d102      	bne.n	8007f9e <_dtoa_r+0xb96>
 8007f98:	f019 0f01 	tst.w	r9, #1
 8007f9c:	d192      	bne.n	8007ec4 <_dtoa_r+0xabc>
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	461d      	mov	r5, r3
 8007fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fa6:	2a30      	cmp	r2, #48	; 0x30
 8007fa8:	d0fa      	beq.n	8007fa0 <_dtoa_r+0xb98>
 8007faa:	e6dd      	b.n	8007d68 <_dtoa_r+0x960>
 8007fac:	9a00      	ldr	r2, [sp, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d189      	bne.n	8007ec6 <_dtoa_r+0xabe>
 8007fb2:	f10b 0b01 	add.w	fp, fp, #1
 8007fb6:	2331      	movs	r3, #49	; 0x31
 8007fb8:	e796      	b.n	8007ee8 <_dtoa_r+0xae0>
 8007fba:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <_dtoa_r+0xbdc>)
 8007fbc:	f7ff ba99 	b.w	80074f2 <_dtoa_r+0xea>
 8007fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f47f aa6d 	bne.w	80074a2 <_dtoa_r+0x9a>
 8007fc8:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <_dtoa_r+0xbe0>)
 8007fca:	f7ff ba92 	b.w	80074f2 <_dtoa_r+0xea>
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dcb5      	bgt.n	8007f40 <_dtoa_r+0xb38>
 8007fd4:	9b07      	ldr	r3, [sp, #28]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	f73f aeb1 	bgt.w	8007d3e <_dtoa_r+0x936>
 8007fdc:	e7b0      	b.n	8007f40 <_dtoa_r+0xb38>
 8007fde:	bf00      	nop
 8007fe0:	0800aab2 	.word	0x0800aab2
 8007fe4:	0800920f 	.word	0x0800920f
 8007fe8:	0800aa36 	.word	0x0800aa36

08007fec <_free_r>:
 8007fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d044      	beq.n	800807c <_free_r+0x90>
 8007ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff6:	9001      	str	r0, [sp, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8007ffe:	bfb8      	it	lt
 8008000:	18e4      	addlt	r4, r4, r3
 8008002:	f7fe fa61 	bl	80064c8 <__malloc_lock>
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <_free_r+0x94>)
 8008008:	9801      	ldr	r0, [sp, #4]
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	b933      	cbnz	r3, 800801c <_free_r+0x30>
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	6014      	str	r4, [r2, #0]
 8008012:	b003      	add	sp, #12
 8008014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008018:	f7fe ba5c 	b.w	80064d4 <__malloc_unlock>
 800801c:	42a3      	cmp	r3, r4
 800801e:	d908      	bls.n	8008032 <_free_r+0x46>
 8008020:	6825      	ldr	r5, [r4, #0]
 8008022:	1961      	adds	r1, r4, r5
 8008024:	428b      	cmp	r3, r1
 8008026:	bf01      	itttt	eq
 8008028:	6819      	ldreq	r1, [r3, #0]
 800802a:	685b      	ldreq	r3, [r3, #4]
 800802c:	1949      	addeq	r1, r1, r5
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	e7ed      	b.n	800800e <_free_r+0x22>
 8008032:	461a      	mov	r2, r3
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	b10b      	cbz	r3, 800803c <_free_r+0x50>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d9fa      	bls.n	8008032 <_free_r+0x46>
 800803c:	6811      	ldr	r1, [r2, #0]
 800803e:	1855      	adds	r5, r2, r1
 8008040:	42a5      	cmp	r5, r4
 8008042:	d10b      	bne.n	800805c <_free_r+0x70>
 8008044:	6824      	ldr	r4, [r4, #0]
 8008046:	4421      	add	r1, r4
 8008048:	1854      	adds	r4, r2, r1
 800804a:	42a3      	cmp	r3, r4
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	d1e0      	bne.n	8008012 <_free_r+0x26>
 8008050:	681c      	ldr	r4, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	6053      	str	r3, [r2, #4]
 8008056:	440c      	add	r4, r1
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	e7da      	b.n	8008012 <_free_r+0x26>
 800805c:	d902      	bls.n	8008064 <_free_r+0x78>
 800805e:	230c      	movs	r3, #12
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	e7d6      	b.n	8008012 <_free_r+0x26>
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	1961      	adds	r1, r4, r5
 8008068:	428b      	cmp	r3, r1
 800806a:	bf04      	itt	eq
 800806c:	6819      	ldreq	r1, [r3, #0]
 800806e:	685b      	ldreq	r3, [r3, #4]
 8008070:	6063      	str	r3, [r4, #4]
 8008072:	bf04      	itt	eq
 8008074:	1949      	addeq	r1, r1, r5
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	6054      	str	r4, [r2, #4]
 800807a:	e7ca      	b.n	8008012 <_free_r+0x26>
 800807c:	b003      	add	sp, #12
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	20000aac 	.word	0x20000aac

08008084 <_Balloc>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	69c6      	ldr	r6, [r0, #28]
 8008088:	4604      	mov	r4, r0
 800808a:	460d      	mov	r5, r1
 800808c:	b976      	cbnz	r6, 80080ac <_Balloc+0x28>
 800808e:	2010      	movs	r0, #16
 8008090:	f7fe f972 	bl	8006378 <malloc>
 8008094:	4602      	mov	r2, r0
 8008096:	61e0      	str	r0, [r4, #28]
 8008098:	b920      	cbnz	r0, 80080a4 <_Balloc+0x20>
 800809a:	4b18      	ldr	r3, [pc, #96]	; (80080fc <_Balloc+0x78>)
 800809c:	4818      	ldr	r0, [pc, #96]	; (8008100 <_Balloc+0x7c>)
 800809e:	216b      	movs	r1, #107	; 0x6b
 80080a0:	f000 fde2 	bl	8008c68 <__assert_func>
 80080a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a8:	6006      	str	r6, [r0, #0]
 80080aa:	60c6      	str	r6, [r0, #12]
 80080ac:	69e6      	ldr	r6, [r4, #28]
 80080ae:	68f3      	ldr	r3, [r6, #12]
 80080b0:	b183      	cbz	r3, 80080d4 <_Balloc+0x50>
 80080b2:	69e3      	ldr	r3, [r4, #28]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ba:	b9b8      	cbnz	r0, 80080ec <_Balloc+0x68>
 80080bc:	2101      	movs	r1, #1
 80080be:	fa01 f605 	lsl.w	r6, r1, r5
 80080c2:	1d72      	adds	r2, r6, #5
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7fe f940 	bl	800634c <_calloc_r>
 80080cc:	b160      	cbz	r0, 80080e8 <_Balloc+0x64>
 80080ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080d2:	e00e      	b.n	80080f2 <_Balloc+0x6e>
 80080d4:	2221      	movs	r2, #33	; 0x21
 80080d6:	2104      	movs	r1, #4
 80080d8:	4620      	mov	r0, r4
 80080da:	f7fe f937 	bl	800634c <_calloc_r>
 80080de:	69e3      	ldr	r3, [r4, #28]
 80080e0:	60f0      	str	r0, [r6, #12]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e4      	bne.n	80080b2 <_Balloc+0x2e>
 80080e8:	2000      	movs	r0, #0
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	6802      	ldr	r2, [r0, #0]
 80080ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080f2:	2300      	movs	r3, #0
 80080f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080f8:	e7f7      	b.n	80080ea <_Balloc+0x66>
 80080fa:	bf00      	nop
 80080fc:	0800aa43 	.word	0x0800aa43
 8008100:	0800aac3 	.word	0x0800aac3

08008104 <_Bfree>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	69c6      	ldr	r6, [r0, #28]
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	b976      	cbnz	r6, 800812c <_Bfree+0x28>
 800810e:	2010      	movs	r0, #16
 8008110:	f7fe f932 	bl	8006378 <malloc>
 8008114:	4602      	mov	r2, r0
 8008116:	61e8      	str	r0, [r5, #28]
 8008118:	b920      	cbnz	r0, 8008124 <_Bfree+0x20>
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <_Bfree+0x3c>)
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <_Bfree+0x40>)
 800811e:	218f      	movs	r1, #143	; 0x8f
 8008120:	f000 fda2 	bl	8008c68 <__assert_func>
 8008124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008128:	6006      	str	r6, [r0, #0]
 800812a:	60c6      	str	r6, [r0, #12]
 800812c:	b13c      	cbz	r4, 800813e <_Bfree+0x3a>
 800812e:	69eb      	ldr	r3, [r5, #28]
 8008130:	6862      	ldr	r2, [r4, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008138:	6021      	str	r1, [r4, #0]
 800813a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	0800aa43 	.word	0x0800aa43
 8008144:	0800aac3 	.word	0x0800aac3

08008148 <__multadd>:
 8008148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814c:	690d      	ldr	r5, [r1, #16]
 800814e:	4607      	mov	r7, r0
 8008150:	460c      	mov	r4, r1
 8008152:	461e      	mov	r6, r3
 8008154:	f101 0c14 	add.w	ip, r1, #20
 8008158:	2000      	movs	r0, #0
 800815a:	f8dc 3000 	ldr.w	r3, [ip]
 800815e:	b299      	uxth	r1, r3
 8008160:	fb02 6101 	mla	r1, r2, r1, r6
 8008164:	0c1e      	lsrs	r6, r3, #16
 8008166:	0c0b      	lsrs	r3, r1, #16
 8008168:	fb02 3306 	mla	r3, r2, r6, r3
 800816c:	b289      	uxth	r1, r1
 800816e:	3001      	adds	r0, #1
 8008170:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008174:	4285      	cmp	r5, r0
 8008176:	f84c 1b04 	str.w	r1, [ip], #4
 800817a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800817e:	dcec      	bgt.n	800815a <__multadd+0x12>
 8008180:	b30e      	cbz	r6, 80081c6 <__multadd+0x7e>
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	42ab      	cmp	r3, r5
 8008186:	dc19      	bgt.n	80081bc <__multadd+0x74>
 8008188:	6861      	ldr	r1, [r4, #4]
 800818a:	4638      	mov	r0, r7
 800818c:	3101      	adds	r1, #1
 800818e:	f7ff ff79 	bl	8008084 <_Balloc>
 8008192:	4680      	mov	r8, r0
 8008194:	b928      	cbnz	r0, 80081a2 <__multadd+0x5a>
 8008196:	4602      	mov	r2, r0
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <__multadd+0x84>)
 800819a:	480d      	ldr	r0, [pc, #52]	; (80081d0 <__multadd+0x88>)
 800819c:	21ba      	movs	r1, #186	; 0xba
 800819e:	f000 fd63 	bl	8008c68 <__assert_func>
 80081a2:	6922      	ldr	r2, [r4, #16]
 80081a4:	3202      	adds	r2, #2
 80081a6:	f104 010c 	add.w	r1, r4, #12
 80081aa:	0092      	lsls	r2, r2, #2
 80081ac:	300c      	adds	r0, #12
 80081ae:	f7ff f893 	bl	80072d8 <memcpy>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7ff ffa5 	bl	8008104 <_Bfree>
 80081ba:	4644      	mov	r4, r8
 80081bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081c0:	3501      	adds	r5, #1
 80081c2:	615e      	str	r6, [r3, #20]
 80081c4:	6125      	str	r5, [r4, #16]
 80081c6:	4620      	mov	r0, r4
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081cc:	0800aab2 	.word	0x0800aab2
 80081d0:	0800aac3 	.word	0x0800aac3

080081d4 <__hi0bits>:
 80081d4:	0c03      	lsrs	r3, r0, #16
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	b9d3      	cbnz	r3, 8008210 <__hi0bits+0x3c>
 80081da:	0400      	lsls	r0, r0, #16
 80081dc:	2310      	movs	r3, #16
 80081de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081e2:	bf04      	itt	eq
 80081e4:	0200      	lsleq	r0, r0, #8
 80081e6:	3308      	addeq	r3, #8
 80081e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081ec:	bf04      	itt	eq
 80081ee:	0100      	lsleq	r0, r0, #4
 80081f0:	3304      	addeq	r3, #4
 80081f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081f6:	bf04      	itt	eq
 80081f8:	0080      	lsleq	r0, r0, #2
 80081fa:	3302      	addeq	r3, #2
 80081fc:	2800      	cmp	r0, #0
 80081fe:	db05      	blt.n	800820c <__hi0bits+0x38>
 8008200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008204:	f103 0301 	add.w	r3, r3, #1
 8008208:	bf08      	it	eq
 800820a:	2320      	moveq	r3, #32
 800820c:	4618      	mov	r0, r3
 800820e:	4770      	bx	lr
 8008210:	2300      	movs	r3, #0
 8008212:	e7e4      	b.n	80081de <__hi0bits+0xa>

08008214 <__lo0bits>:
 8008214:	6803      	ldr	r3, [r0, #0]
 8008216:	f013 0207 	ands.w	r2, r3, #7
 800821a:	d00c      	beq.n	8008236 <__lo0bits+0x22>
 800821c:	07d9      	lsls	r1, r3, #31
 800821e:	d422      	bmi.n	8008266 <__lo0bits+0x52>
 8008220:	079a      	lsls	r2, r3, #30
 8008222:	bf49      	itett	mi
 8008224:	085b      	lsrmi	r3, r3, #1
 8008226:	089b      	lsrpl	r3, r3, #2
 8008228:	6003      	strmi	r3, [r0, #0]
 800822a:	2201      	movmi	r2, #1
 800822c:	bf5c      	itt	pl
 800822e:	6003      	strpl	r3, [r0, #0]
 8008230:	2202      	movpl	r2, #2
 8008232:	4610      	mov	r0, r2
 8008234:	4770      	bx	lr
 8008236:	b299      	uxth	r1, r3
 8008238:	b909      	cbnz	r1, 800823e <__lo0bits+0x2a>
 800823a:	0c1b      	lsrs	r3, r3, #16
 800823c:	2210      	movs	r2, #16
 800823e:	b2d9      	uxtb	r1, r3
 8008240:	b909      	cbnz	r1, 8008246 <__lo0bits+0x32>
 8008242:	3208      	adds	r2, #8
 8008244:	0a1b      	lsrs	r3, r3, #8
 8008246:	0719      	lsls	r1, r3, #28
 8008248:	bf04      	itt	eq
 800824a:	091b      	lsreq	r3, r3, #4
 800824c:	3204      	addeq	r2, #4
 800824e:	0799      	lsls	r1, r3, #30
 8008250:	bf04      	itt	eq
 8008252:	089b      	lsreq	r3, r3, #2
 8008254:	3202      	addeq	r2, #2
 8008256:	07d9      	lsls	r1, r3, #31
 8008258:	d403      	bmi.n	8008262 <__lo0bits+0x4e>
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	f102 0201 	add.w	r2, r2, #1
 8008260:	d003      	beq.n	800826a <__lo0bits+0x56>
 8008262:	6003      	str	r3, [r0, #0]
 8008264:	e7e5      	b.n	8008232 <__lo0bits+0x1e>
 8008266:	2200      	movs	r2, #0
 8008268:	e7e3      	b.n	8008232 <__lo0bits+0x1e>
 800826a:	2220      	movs	r2, #32
 800826c:	e7e1      	b.n	8008232 <__lo0bits+0x1e>
	...

08008270 <__i2b>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	2101      	movs	r1, #1
 8008276:	f7ff ff05 	bl	8008084 <_Balloc>
 800827a:	4602      	mov	r2, r0
 800827c:	b928      	cbnz	r0, 800828a <__i2b+0x1a>
 800827e:	4b05      	ldr	r3, [pc, #20]	; (8008294 <__i2b+0x24>)
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <__i2b+0x28>)
 8008282:	f240 1145 	movw	r1, #325	; 0x145
 8008286:	f000 fcef 	bl	8008c68 <__assert_func>
 800828a:	2301      	movs	r3, #1
 800828c:	6144      	str	r4, [r0, #20]
 800828e:	6103      	str	r3, [r0, #16]
 8008290:	bd10      	pop	{r4, pc}
 8008292:	bf00      	nop
 8008294:	0800aab2 	.word	0x0800aab2
 8008298:	0800aac3 	.word	0x0800aac3

0800829c <__multiply>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	4691      	mov	r9, r2
 80082a2:	690a      	ldr	r2, [r1, #16]
 80082a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	bfb8      	it	lt
 80082ac:	460b      	movlt	r3, r1
 80082ae:	460c      	mov	r4, r1
 80082b0:	bfbc      	itt	lt
 80082b2:	464c      	movlt	r4, r9
 80082b4:	4699      	movlt	r9, r3
 80082b6:	6927      	ldr	r7, [r4, #16]
 80082b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	6861      	ldr	r1, [r4, #4]
 80082c0:	eb07 060a 	add.w	r6, r7, sl
 80082c4:	42b3      	cmp	r3, r6
 80082c6:	b085      	sub	sp, #20
 80082c8:	bfb8      	it	lt
 80082ca:	3101      	addlt	r1, #1
 80082cc:	f7ff feda 	bl	8008084 <_Balloc>
 80082d0:	b930      	cbnz	r0, 80082e0 <__multiply+0x44>
 80082d2:	4602      	mov	r2, r0
 80082d4:	4b44      	ldr	r3, [pc, #272]	; (80083e8 <__multiply+0x14c>)
 80082d6:	4845      	ldr	r0, [pc, #276]	; (80083ec <__multiply+0x150>)
 80082d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80082dc:	f000 fcc4 	bl	8008c68 <__assert_func>
 80082e0:	f100 0514 	add.w	r5, r0, #20
 80082e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082e8:	462b      	mov	r3, r5
 80082ea:	2200      	movs	r2, #0
 80082ec:	4543      	cmp	r3, r8
 80082ee:	d321      	bcc.n	8008334 <__multiply+0x98>
 80082f0:	f104 0314 	add.w	r3, r4, #20
 80082f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082f8:	f109 0314 	add.w	r3, r9, #20
 80082fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008300:	9202      	str	r2, [sp, #8]
 8008302:	1b3a      	subs	r2, r7, r4
 8008304:	3a15      	subs	r2, #21
 8008306:	f022 0203 	bic.w	r2, r2, #3
 800830a:	3204      	adds	r2, #4
 800830c:	f104 0115 	add.w	r1, r4, #21
 8008310:	428f      	cmp	r7, r1
 8008312:	bf38      	it	cc
 8008314:	2204      	movcc	r2, #4
 8008316:	9201      	str	r2, [sp, #4]
 8008318:	9a02      	ldr	r2, [sp, #8]
 800831a:	9303      	str	r3, [sp, #12]
 800831c:	429a      	cmp	r2, r3
 800831e:	d80c      	bhi.n	800833a <__multiply+0x9e>
 8008320:	2e00      	cmp	r6, #0
 8008322:	dd03      	ble.n	800832c <__multiply+0x90>
 8008324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008328:	2b00      	cmp	r3, #0
 800832a:	d05b      	beq.n	80083e4 <__multiply+0x148>
 800832c:	6106      	str	r6, [r0, #16]
 800832e:	b005      	add	sp, #20
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	f843 2b04 	str.w	r2, [r3], #4
 8008338:	e7d8      	b.n	80082ec <__multiply+0x50>
 800833a:	f8b3 a000 	ldrh.w	sl, [r3]
 800833e:	f1ba 0f00 	cmp.w	sl, #0
 8008342:	d024      	beq.n	800838e <__multiply+0xf2>
 8008344:	f104 0e14 	add.w	lr, r4, #20
 8008348:	46a9      	mov	r9, r5
 800834a:	f04f 0c00 	mov.w	ip, #0
 800834e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008352:	f8d9 1000 	ldr.w	r1, [r9]
 8008356:	fa1f fb82 	uxth.w	fp, r2
 800835a:	b289      	uxth	r1, r1
 800835c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008364:	f8d9 2000 	ldr.w	r2, [r9]
 8008368:	4461      	add	r1, ip
 800836a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800836e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008376:	b289      	uxth	r1, r1
 8008378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800837c:	4577      	cmp	r7, lr
 800837e:	f849 1b04 	str.w	r1, [r9], #4
 8008382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008386:	d8e2      	bhi.n	800834e <__multiply+0xb2>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	f845 c002 	str.w	ip, [r5, r2]
 800838e:	9a03      	ldr	r2, [sp, #12]
 8008390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008394:	3304      	adds	r3, #4
 8008396:	f1b9 0f00 	cmp.w	r9, #0
 800839a:	d021      	beq.n	80083e0 <__multiply+0x144>
 800839c:	6829      	ldr	r1, [r5, #0]
 800839e:	f104 0c14 	add.w	ip, r4, #20
 80083a2:	46ae      	mov	lr, r5
 80083a4:	f04f 0a00 	mov.w	sl, #0
 80083a8:	f8bc b000 	ldrh.w	fp, [ip]
 80083ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083b0:	fb09 220b 	mla	r2, r9, fp, r2
 80083b4:	4452      	add	r2, sl
 80083b6:	b289      	uxth	r1, r1
 80083b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083bc:	f84e 1b04 	str.w	r1, [lr], #4
 80083c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80083c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083c8:	f8be 1000 	ldrh.w	r1, [lr]
 80083cc:	fb09 110a 	mla	r1, r9, sl, r1
 80083d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80083d4:	4567      	cmp	r7, ip
 80083d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083da:	d8e5      	bhi.n	80083a8 <__multiply+0x10c>
 80083dc:	9a01      	ldr	r2, [sp, #4]
 80083de:	50a9      	str	r1, [r5, r2]
 80083e0:	3504      	adds	r5, #4
 80083e2:	e799      	b.n	8008318 <__multiply+0x7c>
 80083e4:	3e01      	subs	r6, #1
 80083e6:	e79b      	b.n	8008320 <__multiply+0x84>
 80083e8:	0800aab2 	.word	0x0800aab2
 80083ec:	0800aac3 	.word	0x0800aac3

080083f0 <__pow5mult>:
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	4615      	mov	r5, r2
 80083f6:	f012 0203 	ands.w	r2, r2, #3
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	d007      	beq.n	8008410 <__pow5mult+0x20>
 8008400:	4c25      	ldr	r4, [pc, #148]	; (8008498 <__pow5mult+0xa8>)
 8008402:	3a01      	subs	r2, #1
 8008404:	2300      	movs	r3, #0
 8008406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800840a:	f7ff fe9d 	bl	8008148 <__multadd>
 800840e:	4607      	mov	r7, r0
 8008410:	10ad      	asrs	r5, r5, #2
 8008412:	d03d      	beq.n	8008490 <__pow5mult+0xa0>
 8008414:	69f4      	ldr	r4, [r6, #28]
 8008416:	b97c      	cbnz	r4, 8008438 <__pow5mult+0x48>
 8008418:	2010      	movs	r0, #16
 800841a:	f7fd ffad 	bl	8006378 <malloc>
 800841e:	4602      	mov	r2, r0
 8008420:	61f0      	str	r0, [r6, #28]
 8008422:	b928      	cbnz	r0, 8008430 <__pow5mult+0x40>
 8008424:	4b1d      	ldr	r3, [pc, #116]	; (800849c <__pow5mult+0xac>)
 8008426:	481e      	ldr	r0, [pc, #120]	; (80084a0 <__pow5mult+0xb0>)
 8008428:	f240 11b3 	movw	r1, #435	; 0x1b3
 800842c:	f000 fc1c 	bl	8008c68 <__assert_func>
 8008430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008434:	6004      	str	r4, [r0, #0]
 8008436:	60c4      	str	r4, [r0, #12]
 8008438:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800843c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008440:	b94c      	cbnz	r4, 8008456 <__pow5mult+0x66>
 8008442:	f240 2171 	movw	r1, #625	; 0x271
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff ff12 	bl	8008270 <__i2b>
 800844c:	2300      	movs	r3, #0
 800844e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008452:	4604      	mov	r4, r0
 8008454:	6003      	str	r3, [r0, #0]
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	07eb      	lsls	r3, r5, #31
 800845c:	d50a      	bpl.n	8008474 <__pow5mult+0x84>
 800845e:	4639      	mov	r1, r7
 8008460:	4622      	mov	r2, r4
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ff1a 	bl	800829c <__multiply>
 8008468:	4639      	mov	r1, r7
 800846a:	4680      	mov	r8, r0
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff fe49 	bl	8008104 <_Bfree>
 8008472:	4647      	mov	r7, r8
 8008474:	106d      	asrs	r5, r5, #1
 8008476:	d00b      	beq.n	8008490 <__pow5mult+0xa0>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	b938      	cbnz	r0, 800848c <__pow5mult+0x9c>
 800847c:	4622      	mov	r2, r4
 800847e:	4621      	mov	r1, r4
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff ff0b 	bl	800829c <__multiply>
 8008486:	6020      	str	r0, [r4, #0]
 8008488:	f8c0 9000 	str.w	r9, [r0]
 800848c:	4604      	mov	r4, r0
 800848e:	e7e4      	b.n	800845a <__pow5mult+0x6a>
 8008490:	4638      	mov	r0, r7
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	bf00      	nop
 8008498:	0800ac10 	.word	0x0800ac10
 800849c:	0800aa43 	.word	0x0800aa43
 80084a0:	0800aac3 	.word	0x0800aac3

080084a4 <__lshift>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	460c      	mov	r4, r1
 80084aa:	6849      	ldr	r1, [r1, #4]
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	4607      	mov	r7, r0
 80084b6:	4691      	mov	r9, r2
 80084b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084bc:	f108 0601 	add.w	r6, r8, #1
 80084c0:	42b3      	cmp	r3, r6
 80084c2:	db0b      	blt.n	80084dc <__lshift+0x38>
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff fddd 	bl	8008084 <_Balloc>
 80084ca:	4605      	mov	r5, r0
 80084cc:	b948      	cbnz	r0, 80084e2 <__lshift+0x3e>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <__lshift+0xd0>)
 80084d2:	4829      	ldr	r0, [pc, #164]	; (8008578 <__lshift+0xd4>)
 80084d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80084d8:	f000 fbc6 	bl	8008c68 <__assert_func>
 80084dc:	3101      	adds	r1, #1
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	e7ee      	b.n	80084c0 <__lshift+0x1c>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f100 0114 	add.w	r1, r0, #20
 80084e8:	f100 0210 	add.w	r2, r0, #16
 80084ec:	4618      	mov	r0, r3
 80084ee:	4553      	cmp	r3, sl
 80084f0:	db33      	blt.n	800855a <__lshift+0xb6>
 80084f2:	6920      	ldr	r0, [r4, #16]
 80084f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084f8:	f104 0314 	add.w	r3, r4, #20
 80084fc:	f019 091f 	ands.w	r9, r9, #31
 8008500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008508:	d02b      	beq.n	8008562 <__lshift+0xbe>
 800850a:	f1c9 0e20 	rsb	lr, r9, #32
 800850e:	468a      	mov	sl, r1
 8008510:	2200      	movs	r2, #0
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	fa00 f009 	lsl.w	r0, r0, r9
 8008518:	4310      	orrs	r0, r2
 800851a:	f84a 0b04 	str.w	r0, [sl], #4
 800851e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008522:	459c      	cmp	ip, r3
 8008524:	fa22 f20e 	lsr.w	r2, r2, lr
 8008528:	d8f3      	bhi.n	8008512 <__lshift+0x6e>
 800852a:	ebac 0304 	sub.w	r3, ip, r4
 800852e:	3b15      	subs	r3, #21
 8008530:	f023 0303 	bic.w	r3, r3, #3
 8008534:	3304      	adds	r3, #4
 8008536:	f104 0015 	add.w	r0, r4, #21
 800853a:	4584      	cmp	ip, r0
 800853c:	bf38      	it	cc
 800853e:	2304      	movcc	r3, #4
 8008540:	50ca      	str	r2, [r1, r3]
 8008542:	b10a      	cbz	r2, 8008548 <__lshift+0xa4>
 8008544:	f108 0602 	add.w	r6, r8, #2
 8008548:	3e01      	subs	r6, #1
 800854a:	4638      	mov	r0, r7
 800854c:	612e      	str	r6, [r5, #16]
 800854e:	4621      	mov	r1, r4
 8008550:	f7ff fdd8 	bl	8008104 <_Bfree>
 8008554:	4628      	mov	r0, r5
 8008556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855a:	f842 0f04 	str.w	r0, [r2, #4]!
 800855e:	3301      	adds	r3, #1
 8008560:	e7c5      	b.n	80084ee <__lshift+0x4a>
 8008562:	3904      	subs	r1, #4
 8008564:	f853 2b04 	ldr.w	r2, [r3], #4
 8008568:	f841 2f04 	str.w	r2, [r1, #4]!
 800856c:	459c      	cmp	ip, r3
 800856e:	d8f9      	bhi.n	8008564 <__lshift+0xc0>
 8008570:	e7ea      	b.n	8008548 <__lshift+0xa4>
 8008572:	bf00      	nop
 8008574:	0800aab2 	.word	0x0800aab2
 8008578:	0800aac3 	.word	0x0800aac3

0800857c <__mcmp>:
 800857c:	b530      	push	{r4, r5, lr}
 800857e:	6902      	ldr	r2, [r0, #16]
 8008580:	690c      	ldr	r4, [r1, #16]
 8008582:	1b12      	subs	r2, r2, r4
 8008584:	d10e      	bne.n	80085a4 <__mcmp+0x28>
 8008586:	f100 0314 	add.w	r3, r0, #20
 800858a:	3114      	adds	r1, #20
 800858c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008590:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008594:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008598:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800859c:	42a5      	cmp	r5, r4
 800859e:	d003      	beq.n	80085a8 <__mcmp+0x2c>
 80085a0:	d305      	bcc.n	80085ae <__mcmp+0x32>
 80085a2:	2201      	movs	r2, #1
 80085a4:	4610      	mov	r0, r2
 80085a6:	bd30      	pop	{r4, r5, pc}
 80085a8:	4283      	cmp	r3, r0
 80085aa:	d3f3      	bcc.n	8008594 <__mcmp+0x18>
 80085ac:	e7fa      	b.n	80085a4 <__mcmp+0x28>
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	e7f7      	b.n	80085a4 <__mcmp+0x28>

080085b4 <__mdiff>:
 80085b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	460c      	mov	r4, r1
 80085ba:	4606      	mov	r6, r0
 80085bc:	4611      	mov	r1, r2
 80085be:	4620      	mov	r0, r4
 80085c0:	4690      	mov	r8, r2
 80085c2:	f7ff ffdb 	bl	800857c <__mcmp>
 80085c6:	1e05      	subs	r5, r0, #0
 80085c8:	d110      	bne.n	80085ec <__mdiff+0x38>
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff fd59 	bl	8008084 <_Balloc>
 80085d2:	b930      	cbnz	r0, 80085e2 <__mdiff+0x2e>
 80085d4:	4b3a      	ldr	r3, [pc, #232]	; (80086c0 <__mdiff+0x10c>)
 80085d6:	4602      	mov	r2, r0
 80085d8:	f240 2137 	movw	r1, #567	; 0x237
 80085dc:	4839      	ldr	r0, [pc, #228]	; (80086c4 <__mdiff+0x110>)
 80085de:	f000 fb43 	bl	8008c68 <__assert_func>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	bfa4      	itt	ge
 80085ee:	4643      	movge	r3, r8
 80085f0:	46a0      	movge	r8, r4
 80085f2:	4630      	mov	r0, r6
 80085f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085f8:	bfa6      	itte	ge
 80085fa:	461c      	movge	r4, r3
 80085fc:	2500      	movge	r5, #0
 80085fe:	2501      	movlt	r5, #1
 8008600:	f7ff fd40 	bl	8008084 <_Balloc>
 8008604:	b920      	cbnz	r0, 8008610 <__mdiff+0x5c>
 8008606:	4b2e      	ldr	r3, [pc, #184]	; (80086c0 <__mdiff+0x10c>)
 8008608:	4602      	mov	r2, r0
 800860a:	f240 2145 	movw	r1, #581	; 0x245
 800860e:	e7e5      	b.n	80085dc <__mdiff+0x28>
 8008610:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008614:	6926      	ldr	r6, [r4, #16]
 8008616:	60c5      	str	r5, [r0, #12]
 8008618:	f104 0914 	add.w	r9, r4, #20
 800861c:	f108 0514 	add.w	r5, r8, #20
 8008620:	f100 0e14 	add.w	lr, r0, #20
 8008624:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008628:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800862c:	f108 0210 	add.w	r2, r8, #16
 8008630:	46f2      	mov	sl, lr
 8008632:	2100      	movs	r1, #0
 8008634:	f859 3b04 	ldr.w	r3, [r9], #4
 8008638:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800863c:	fa11 f88b 	uxtah	r8, r1, fp
 8008640:	b299      	uxth	r1, r3
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	eba8 0801 	sub.w	r8, r8, r1
 8008648:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800864c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008650:	fa1f f888 	uxth.w	r8, r8
 8008654:	1419      	asrs	r1, r3, #16
 8008656:	454e      	cmp	r6, r9
 8008658:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800865c:	f84a 3b04 	str.w	r3, [sl], #4
 8008660:	d8e8      	bhi.n	8008634 <__mdiff+0x80>
 8008662:	1b33      	subs	r3, r6, r4
 8008664:	3b15      	subs	r3, #21
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	3304      	adds	r3, #4
 800866c:	3415      	adds	r4, #21
 800866e:	42a6      	cmp	r6, r4
 8008670:	bf38      	it	cc
 8008672:	2304      	movcc	r3, #4
 8008674:	441d      	add	r5, r3
 8008676:	4473      	add	r3, lr
 8008678:	469e      	mov	lr, r3
 800867a:	462e      	mov	r6, r5
 800867c:	4566      	cmp	r6, ip
 800867e:	d30e      	bcc.n	800869e <__mdiff+0xea>
 8008680:	f10c 0203 	add.w	r2, ip, #3
 8008684:	1b52      	subs	r2, r2, r5
 8008686:	f022 0203 	bic.w	r2, r2, #3
 800868a:	3d03      	subs	r5, #3
 800868c:	45ac      	cmp	ip, r5
 800868e:	bf38      	it	cc
 8008690:	2200      	movcc	r2, #0
 8008692:	4413      	add	r3, r2
 8008694:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008698:	b17a      	cbz	r2, 80086ba <__mdiff+0x106>
 800869a:	6107      	str	r7, [r0, #16]
 800869c:	e7a4      	b.n	80085e8 <__mdiff+0x34>
 800869e:	f856 8b04 	ldr.w	r8, [r6], #4
 80086a2:	fa11 f288 	uxtah	r2, r1, r8
 80086a6:	1414      	asrs	r4, r2, #16
 80086a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086ac:	b292      	uxth	r2, r2
 80086ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086b2:	f84e 2b04 	str.w	r2, [lr], #4
 80086b6:	1421      	asrs	r1, r4, #16
 80086b8:	e7e0      	b.n	800867c <__mdiff+0xc8>
 80086ba:	3f01      	subs	r7, #1
 80086bc:	e7ea      	b.n	8008694 <__mdiff+0xe0>
 80086be:	bf00      	nop
 80086c0:	0800aab2 	.word	0x0800aab2
 80086c4:	0800aac3 	.word	0x0800aac3

080086c8 <__d2b>:
 80086c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	460f      	mov	r7, r1
 80086ce:	2101      	movs	r1, #1
 80086d0:	ec59 8b10 	vmov	r8, r9, d0
 80086d4:	4616      	mov	r6, r2
 80086d6:	f7ff fcd5 	bl	8008084 <_Balloc>
 80086da:	4604      	mov	r4, r0
 80086dc:	b930      	cbnz	r0, 80086ec <__d2b+0x24>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b24      	ldr	r3, [pc, #144]	; (8008774 <__d2b+0xac>)
 80086e2:	4825      	ldr	r0, [pc, #148]	; (8008778 <__d2b+0xb0>)
 80086e4:	f240 310f 	movw	r1, #783	; 0x30f
 80086e8:	f000 fabe 	bl	8008c68 <__assert_func>
 80086ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086f4:	bb2d      	cbnz	r5, 8008742 <__d2b+0x7a>
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	f1b8 0300 	subs.w	r3, r8, #0
 80086fc:	d026      	beq.n	800874c <__d2b+0x84>
 80086fe:	4668      	mov	r0, sp
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	f7ff fd87 	bl	8008214 <__lo0bits>
 8008706:	e9dd 1200 	ldrd	r1, r2, [sp]
 800870a:	b1e8      	cbz	r0, 8008748 <__d2b+0x80>
 800870c:	f1c0 0320 	rsb	r3, r0, #32
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	430b      	orrs	r3, r1
 8008716:	40c2      	lsrs	r2, r0
 8008718:	6163      	str	r3, [r4, #20]
 800871a:	9201      	str	r2, [sp, #4]
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	61a3      	str	r3, [r4, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	bf14      	ite	ne
 8008724:	2202      	movne	r2, #2
 8008726:	2201      	moveq	r2, #1
 8008728:	6122      	str	r2, [r4, #16]
 800872a:	b1bd      	cbz	r5, 800875c <__d2b+0x94>
 800872c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008730:	4405      	add	r5, r0
 8008732:	603d      	str	r5, [r7, #0]
 8008734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008738:	6030      	str	r0, [r6, #0]
 800873a:	4620      	mov	r0, r4
 800873c:	b003      	add	sp, #12
 800873e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008746:	e7d6      	b.n	80086f6 <__d2b+0x2e>
 8008748:	6161      	str	r1, [r4, #20]
 800874a:	e7e7      	b.n	800871c <__d2b+0x54>
 800874c:	a801      	add	r0, sp, #4
 800874e:	f7ff fd61 	bl	8008214 <__lo0bits>
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	6163      	str	r3, [r4, #20]
 8008756:	3020      	adds	r0, #32
 8008758:	2201      	movs	r2, #1
 800875a:	e7e5      	b.n	8008728 <__d2b+0x60>
 800875c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008764:	6038      	str	r0, [r7, #0]
 8008766:	6918      	ldr	r0, [r3, #16]
 8008768:	f7ff fd34 	bl	80081d4 <__hi0bits>
 800876c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008770:	e7e2      	b.n	8008738 <__d2b+0x70>
 8008772:	bf00      	nop
 8008774:	0800aab2 	.word	0x0800aab2
 8008778:	0800aac3 	.word	0x0800aac3

0800877c <__sfputc_r>:
 800877c:	6893      	ldr	r3, [r2, #8]
 800877e:	3b01      	subs	r3, #1
 8008780:	2b00      	cmp	r3, #0
 8008782:	b410      	push	{r4}
 8008784:	6093      	str	r3, [r2, #8]
 8008786:	da08      	bge.n	800879a <__sfputc_r+0x1e>
 8008788:	6994      	ldr	r4, [r2, #24]
 800878a:	42a3      	cmp	r3, r4
 800878c:	db01      	blt.n	8008792 <__sfputc_r+0x16>
 800878e:	290a      	cmp	r1, #10
 8008790:	d103      	bne.n	800879a <__sfputc_r+0x1e>
 8008792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008796:	f7fe bc6a 	b.w	800706e <__swbuf_r>
 800879a:	6813      	ldr	r3, [r2, #0]
 800879c:	1c58      	adds	r0, r3, #1
 800879e:	6010      	str	r0, [r2, #0]
 80087a0:	7019      	strb	r1, [r3, #0]
 80087a2:	4608      	mov	r0, r1
 80087a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <__sfputs_r>:
 80087aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ac:	4606      	mov	r6, r0
 80087ae:	460f      	mov	r7, r1
 80087b0:	4614      	mov	r4, r2
 80087b2:	18d5      	adds	r5, r2, r3
 80087b4:	42ac      	cmp	r4, r5
 80087b6:	d101      	bne.n	80087bc <__sfputs_r+0x12>
 80087b8:	2000      	movs	r0, #0
 80087ba:	e007      	b.n	80087cc <__sfputs_r+0x22>
 80087bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c0:	463a      	mov	r2, r7
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff ffda 	bl	800877c <__sfputc_r>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d1f3      	bne.n	80087b4 <__sfputs_r+0xa>
 80087cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087d0 <_vfiprintf_r>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	460d      	mov	r5, r1
 80087d6:	b09d      	sub	sp, #116	; 0x74
 80087d8:	4614      	mov	r4, r2
 80087da:	4698      	mov	r8, r3
 80087dc:	4606      	mov	r6, r0
 80087de:	b118      	cbz	r0, 80087e8 <_vfiprintf_r+0x18>
 80087e0:	6a03      	ldr	r3, [r0, #32]
 80087e2:	b90b      	cbnz	r3, 80087e8 <_vfiprintf_r+0x18>
 80087e4:	f7fe fb5c 	bl	8006ea0 <__sinit>
 80087e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ea:	07d9      	lsls	r1, r3, #31
 80087ec:	d405      	bmi.n	80087fa <_vfiprintf_r+0x2a>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	059a      	lsls	r2, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_vfiprintf_r+0x2a>
 80087f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f6:	f7fe fd6d 	bl	80072d4 <__retarget_lock_acquire_recursive>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	071b      	lsls	r3, r3, #28
 80087fe:	d501      	bpl.n	8008804 <_vfiprintf_r+0x34>
 8008800:	692b      	ldr	r3, [r5, #16]
 8008802:	b99b      	cbnz	r3, 800882c <_vfiprintf_r+0x5c>
 8008804:	4629      	mov	r1, r5
 8008806:	4630      	mov	r0, r6
 8008808:	f7fe fc6e 	bl	80070e8 <__swsetup_r>
 800880c:	b170      	cbz	r0, 800882c <_vfiprintf_r+0x5c>
 800880e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008810:	07dc      	lsls	r4, r3, #31
 8008812:	d504      	bpl.n	800881e <_vfiprintf_r+0x4e>
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	b01d      	add	sp, #116	; 0x74
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	89ab      	ldrh	r3, [r5, #12]
 8008820:	0598      	lsls	r0, r3, #22
 8008822:	d4f7      	bmi.n	8008814 <_vfiprintf_r+0x44>
 8008824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008826:	f7fe fd56 	bl	80072d6 <__retarget_lock_release_recursive>
 800882a:	e7f3      	b.n	8008814 <_vfiprintf_r+0x44>
 800882c:	2300      	movs	r3, #0
 800882e:	9309      	str	r3, [sp, #36]	; 0x24
 8008830:	2320      	movs	r3, #32
 8008832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008836:	f8cd 800c 	str.w	r8, [sp, #12]
 800883a:	2330      	movs	r3, #48	; 0x30
 800883c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80089f0 <_vfiprintf_r+0x220>
 8008840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008844:	f04f 0901 	mov.w	r9, #1
 8008848:	4623      	mov	r3, r4
 800884a:	469a      	mov	sl, r3
 800884c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008850:	b10a      	cbz	r2, 8008856 <_vfiprintf_r+0x86>
 8008852:	2a25      	cmp	r2, #37	; 0x25
 8008854:	d1f9      	bne.n	800884a <_vfiprintf_r+0x7a>
 8008856:	ebba 0b04 	subs.w	fp, sl, r4
 800885a:	d00b      	beq.n	8008874 <_vfiprintf_r+0xa4>
 800885c:	465b      	mov	r3, fp
 800885e:	4622      	mov	r2, r4
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f7ff ffa1 	bl	80087aa <__sfputs_r>
 8008868:	3001      	adds	r0, #1
 800886a:	f000 80a9 	beq.w	80089c0 <_vfiprintf_r+0x1f0>
 800886e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008870:	445a      	add	r2, fp
 8008872:	9209      	str	r2, [sp, #36]	; 0x24
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 80a1 	beq.w	80089c0 <_vfiprintf_r+0x1f0>
 800887e:	2300      	movs	r3, #0
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008888:	f10a 0a01 	add.w	sl, sl, #1
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008894:	931a      	str	r3, [sp, #104]	; 0x68
 8008896:	4654      	mov	r4, sl
 8008898:	2205      	movs	r2, #5
 800889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889e:	4854      	ldr	r0, [pc, #336]	; (80089f0 <_vfiprintf_r+0x220>)
 80088a0:	f7f7 fc96 	bl	80001d0 <memchr>
 80088a4:	9a04      	ldr	r2, [sp, #16]
 80088a6:	b9d8      	cbnz	r0, 80088e0 <_vfiprintf_r+0x110>
 80088a8:	06d1      	lsls	r1, r2, #27
 80088aa:	bf44      	itt	mi
 80088ac:	2320      	movmi	r3, #32
 80088ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b2:	0713      	lsls	r3, r2, #28
 80088b4:	bf44      	itt	mi
 80088b6:	232b      	movmi	r3, #43	; 0x2b
 80088b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088bc:	f89a 3000 	ldrb.w	r3, [sl]
 80088c0:	2b2a      	cmp	r3, #42	; 0x2a
 80088c2:	d015      	beq.n	80088f0 <_vfiprintf_r+0x120>
 80088c4:	9a07      	ldr	r2, [sp, #28]
 80088c6:	4654      	mov	r4, sl
 80088c8:	2000      	movs	r0, #0
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	4621      	mov	r1, r4
 80088d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d4:	3b30      	subs	r3, #48	; 0x30
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d94d      	bls.n	8008976 <_vfiprintf_r+0x1a6>
 80088da:	b1b0      	cbz	r0, 800890a <_vfiprintf_r+0x13a>
 80088dc:	9207      	str	r2, [sp, #28]
 80088de:	e014      	b.n	800890a <_vfiprintf_r+0x13a>
 80088e0:	eba0 0308 	sub.w	r3, r0, r8
 80088e4:	fa09 f303 	lsl.w	r3, r9, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	46a2      	mov	sl, r4
 80088ee:	e7d2      	b.n	8008896 <_vfiprintf_r+0xc6>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	1d19      	adds	r1, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	9103      	str	r1, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfbb      	ittet	lt
 80088fc:	425b      	neglt	r3, r3
 80088fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008902:	9307      	strge	r3, [sp, #28]
 8008904:	9307      	strlt	r3, [sp, #28]
 8008906:	bfb8      	it	lt
 8008908:	9204      	strlt	r2, [sp, #16]
 800890a:	7823      	ldrb	r3, [r4, #0]
 800890c:	2b2e      	cmp	r3, #46	; 0x2e
 800890e:	d10c      	bne.n	800892a <_vfiprintf_r+0x15a>
 8008910:	7863      	ldrb	r3, [r4, #1]
 8008912:	2b2a      	cmp	r3, #42	; 0x2a
 8008914:	d134      	bne.n	8008980 <_vfiprintf_r+0x1b0>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	9203      	str	r2, [sp, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfb8      	it	lt
 8008922:	f04f 33ff 	movlt.w	r3, #4294967295
 8008926:	3402      	adds	r4, #2
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a00 <_vfiprintf_r+0x230>
 800892e:	7821      	ldrb	r1, [r4, #0]
 8008930:	2203      	movs	r2, #3
 8008932:	4650      	mov	r0, sl
 8008934:	f7f7 fc4c 	bl	80001d0 <memchr>
 8008938:	b138      	cbz	r0, 800894a <_vfiprintf_r+0x17a>
 800893a:	9b04      	ldr	r3, [sp, #16]
 800893c:	eba0 000a 	sub.w	r0, r0, sl
 8008940:	2240      	movs	r2, #64	; 0x40
 8008942:	4082      	lsls	r2, r0
 8008944:	4313      	orrs	r3, r2
 8008946:	3401      	adds	r4, #1
 8008948:	9304      	str	r3, [sp, #16]
 800894a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894e:	4829      	ldr	r0, [pc, #164]	; (80089f4 <_vfiprintf_r+0x224>)
 8008950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008954:	2206      	movs	r2, #6
 8008956:	f7f7 fc3b 	bl	80001d0 <memchr>
 800895a:	2800      	cmp	r0, #0
 800895c:	d03f      	beq.n	80089de <_vfiprintf_r+0x20e>
 800895e:	4b26      	ldr	r3, [pc, #152]	; (80089f8 <_vfiprintf_r+0x228>)
 8008960:	bb1b      	cbnz	r3, 80089aa <_vfiprintf_r+0x1da>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	3307      	adds	r3, #7
 8008966:	f023 0307 	bic.w	r3, r3, #7
 800896a:	3308      	adds	r3, #8
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	443b      	add	r3, r7
 8008972:	9309      	str	r3, [sp, #36]	; 0x24
 8008974:	e768      	b.n	8008848 <_vfiprintf_r+0x78>
 8008976:	fb0c 3202 	mla	r2, ip, r2, r3
 800897a:	460c      	mov	r4, r1
 800897c:	2001      	movs	r0, #1
 800897e:	e7a6      	b.n	80088ce <_vfiprintf_r+0xfe>
 8008980:	2300      	movs	r3, #0
 8008982:	3401      	adds	r4, #1
 8008984:	9305      	str	r3, [sp, #20]
 8008986:	4619      	mov	r1, r3
 8008988:	f04f 0c0a 	mov.w	ip, #10
 800898c:	4620      	mov	r0, r4
 800898e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008992:	3a30      	subs	r2, #48	; 0x30
 8008994:	2a09      	cmp	r2, #9
 8008996:	d903      	bls.n	80089a0 <_vfiprintf_r+0x1d0>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0c6      	beq.n	800892a <_vfiprintf_r+0x15a>
 800899c:	9105      	str	r1, [sp, #20]
 800899e:	e7c4      	b.n	800892a <_vfiprintf_r+0x15a>
 80089a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a4:	4604      	mov	r4, r0
 80089a6:	2301      	movs	r3, #1
 80089a8:	e7f0      	b.n	800898c <_vfiprintf_r+0x1bc>
 80089aa:	ab03      	add	r3, sp, #12
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	462a      	mov	r2, r5
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <_vfiprintf_r+0x22c>)
 80089b2:	a904      	add	r1, sp, #16
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7fd fe33 	bl	8006620 <_printf_float>
 80089ba:	4607      	mov	r7, r0
 80089bc:	1c78      	adds	r0, r7, #1
 80089be:	d1d6      	bne.n	800896e <_vfiprintf_r+0x19e>
 80089c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c2:	07d9      	lsls	r1, r3, #31
 80089c4:	d405      	bmi.n	80089d2 <_vfiprintf_r+0x202>
 80089c6:	89ab      	ldrh	r3, [r5, #12]
 80089c8:	059a      	lsls	r2, r3, #22
 80089ca:	d402      	bmi.n	80089d2 <_vfiprintf_r+0x202>
 80089cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ce:	f7fe fc82 	bl	80072d6 <__retarget_lock_release_recursive>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	065b      	lsls	r3, r3, #25
 80089d6:	f53f af1d 	bmi.w	8008814 <_vfiprintf_r+0x44>
 80089da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089dc:	e71c      	b.n	8008818 <_vfiprintf_r+0x48>
 80089de:	ab03      	add	r3, sp, #12
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	462a      	mov	r2, r5
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <_vfiprintf_r+0x22c>)
 80089e6:	a904      	add	r1, sp, #16
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7fe f8bd 	bl	8006b68 <_printf_i>
 80089ee:	e7e4      	b.n	80089ba <_vfiprintf_r+0x1ea>
 80089f0:	0800ac1c 	.word	0x0800ac1c
 80089f4:	0800ac26 	.word	0x0800ac26
 80089f8:	08006621 	.word	0x08006621
 80089fc:	080087ab 	.word	0x080087ab
 8008a00:	0800ac22 	.word	0x0800ac22

08008a04 <__sflush_r>:
 8008a04:	898a      	ldrh	r2, [r1, #12]
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	0710      	lsls	r0, r2, #28
 8008a0e:	460c      	mov	r4, r1
 8008a10:	d458      	bmi.n	8008ac4 <__sflush_r+0xc0>
 8008a12:	684b      	ldr	r3, [r1, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc05      	bgt.n	8008a24 <__sflush_r+0x20>
 8008a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dc02      	bgt.n	8008a24 <__sflush_r+0x20>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d0f9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a30:	682f      	ldr	r7, [r5, #0]
 8008a32:	6a21      	ldr	r1, [r4, #32]
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	d032      	beq.n	8008a9e <__sflush_r+0x9a>
 8008a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	075a      	lsls	r2, r3, #29
 8008a3e:	d505      	bpl.n	8008a4c <__sflush_r+0x48>
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	1ac0      	subs	r0, r0, r3
 8008a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a46:	b10b      	cbz	r3, 8008a4c <__sflush_r+0x48>
 8008a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a4a:	1ac0      	subs	r0, r0, r3
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a52:	6a21      	ldr	r1, [r4, #32]
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	d106      	bne.n	8008a6c <__sflush_r+0x68>
 8008a5e:	6829      	ldr	r1, [r5, #0]
 8008a60:	291d      	cmp	r1, #29
 8008a62:	d82b      	bhi.n	8008abc <__sflush_r+0xb8>
 8008a64:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <__sflush_r+0x108>)
 8008a66:	410a      	asrs	r2, r1
 8008a68:	07d6      	lsls	r6, r2, #31
 8008a6a:	d427      	bmi.n	8008abc <__sflush_r+0xb8>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	6062      	str	r2, [r4, #4]
 8008a70:	04d9      	lsls	r1, r3, #19
 8008a72:	6922      	ldr	r2, [r4, #16]
 8008a74:	6022      	str	r2, [r4, #0]
 8008a76:	d504      	bpl.n	8008a82 <__sflush_r+0x7e>
 8008a78:	1c42      	adds	r2, r0, #1
 8008a7a:	d101      	bne.n	8008a80 <__sflush_r+0x7c>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b903      	cbnz	r3, 8008a82 <__sflush_r+0x7e>
 8008a80:	6560      	str	r0, [r4, #84]	; 0x54
 8008a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a84:	602f      	str	r7, [r5, #0]
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d0c9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	d002      	beq.n	8008a98 <__sflush_r+0x94>
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7ff faaa 	bl	8007fec <_free_r>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	6360      	str	r0, [r4, #52]	; 0x34
 8008a9c:	e7c0      	b.n	8008a20 <__sflush_r+0x1c>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	1c41      	adds	r1, r0, #1
 8008aa6:	d1c8      	bne.n	8008a3a <__sflush_r+0x36>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c5      	beq.n	8008a3a <__sflush_r+0x36>
 8008aae:	2b1d      	cmp	r3, #29
 8008ab0:	d001      	beq.n	8008ab6 <__sflush_r+0xb2>
 8008ab2:	2b16      	cmp	r3, #22
 8008ab4:	d101      	bne.n	8008aba <__sflush_r+0xb6>
 8008ab6:	602f      	str	r7, [r5, #0]
 8008ab8:	e7b1      	b.n	8008a1e <__sflush_r+0x1a>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	e7ad      	b.n	8008a20 <__sflush_r+0x1c>
 8008ac4:	690f      	ldr	r7, [r1, #16]
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	d0a9      	beq.n	8008a1e <__sflush_r+0x1a>
 8008aca:	0793      	lsls	r3, r2, #30
 8008acc:	680e      	ldr	r6, [r1, #0]
 8008ace:	bf08      	it	eq
 8008ad0:	694b      	ldreq	r3, [r1, #20]
 8008ad2:	600f      	str	r7, [r1, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	2300      	movne	r3, #0
 8008ad8:	eba6 0807 	sub.w	r8, r6, r7
 8008adc:	608b      	str	r3, [r1, #8]
 8008ade:	f1b8 0f00 	cmp.w	r8, #0
 8008ae2:	dd9c      	ble.n	8008a1e <__sflush_r+0x1a>
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ae8:	4643      	mov	r3, r8
 8008aea:	463a      	mov	r2, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b0      	blx	r6
 8008af0:	2800      	cmp	r0, #0
 8008af2:	dc06      	bgt.n	8008b02 <__sflush_r+0xfe>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	e78e      	b.n	8008a20 <__sflush_r+0x1c>
 8008b02:	4407      	add	r7, r0
 8008b04:	eba8 0800 	sub.w	r8, r8, r0
 8008b08:	e7e9      	b.n	8008ade <__sflush_r+0xda>
 8008b0a:	bf00      	nop
 8008b0c:	dfbffffe 	.word	0xdfbffffe

08008b10 <_fflush_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	b913      	cbnz	r3, 8008b20 <_fflush_r+0x10>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	b118      	cbz	r0, 8008b2a <_fflush_r+0x1a>
 8008b22:	6a03      	ldr	r3, [r0, #32]
 8008b24:	b90b      	cbnz	r3, 8008b2a <_fflush_r+0x1a>
 8008b26:	f7fe f9bb 	bl	8006ea0 <__sinit>
 8008b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0f3      	beq.n	8008b1a <_fflush_r+0xa>
 8008b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b34:	07d0      	lsls	r0, r2, #31
 8008b36:	d404      	bmi.n	8008b42 <_fflush_r+0x32>
 8008b38:	0599      	lsls	r1, r3, #22
 8008b3a:	d402      	bmi.n	8008b42 <_fflush_r+0x32>
 8008b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b3e:	f7fe fbc9 	bl	80072d4 <__retarget_lock_acquire_recursive>
 8008b42:	4628      	mov	r0, r5
 8008b44:	4621      	mov	r1, r4
 8008b46:	f7ff ff5d 	bl	8008a04 <__sflush_r>
 8008b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b4c:	07da      	lsls	r2, r3, #31
 8008b4e:	4605      	mov	r5, r0
 8008b50:	d4e4      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	059b      	lsls	r3, r3, #22
 8008b56:	d4e1      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5a:	f7fe fbbc 	bl	80072d6 <__retarget_lock_release_recursive>
 8008b5e:	e7dd      	b.n	8008b1c <_fflush_r+0xc>

08008b60 <__swhatbuf_r>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	b096      	sub	sp, #88	; 0x58
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	461e      	mov	r6, r3
 8008b70:	da0d      	bge.n	8008b8e <__swhatbuf_r+0x2e>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	bf0c      	ite	eq
 8008b7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b82:	2340      	movne	r3, #64	; 0x40
 8008b84:	2000      	movs	r0, #0
 8008b86:	6031      	str	r1, [r6, #0]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	b016      	add	sp, #88	; 0x58
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	466a      	mov	r2, sp
 8008b90:	f000 f848 	bl	8008c24 <_fstat_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dbec      	blt.n	8008b72 <__swhatbuf_r+0x12>
 8008b98:	9901      	ldr	r1, [sp, #4]
 8008b9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ba2:	4259      	negs	r1, r3
 8008ba4:	4159      	adcs	r1, r3
 8008ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008baa:	e7eb      	b.n	8008b84 <__swhatbuf_r+0x24>

08008bac <__smakebuf_r>:
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb0:	079d      	lsls	r5, r3, #30
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	d507      	bpl.n	8008bc8 <__smakebuf_r+0x1c>
 8008bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	ab01      	add	r3, sp, #4
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f7ff ffc8 	bl	8008b60 <__swhatbuf_r>
 8008bd0:	9900      	ldr	r1, [sp, #0]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7fd fbf7 	bl	80063c8 <_malloc_r>
 8008bda:	b948      	cbnz	r0, 8008bf0 <__smakebuf_r+0x44>
 8008bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d4ef      	bmi.n	8008bc4 <__smakebuf_r+0x18>
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	f043 0302 	orr.w	r3, r3, #2
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	e7e3      	b.n	8008bb8 <__smakebuf_r+0xc>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	6020      	str	r0, [r4, #0]
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	6163      	str	r3, [r4, #20]
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	6120      	str	r0, [r4, #16]
 8008c02:	b15b      	cbz	r3, 8008c1c <__smakebuf_r+0x70>
 8008c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f81d 	bl	8008c48 <_isatty_r>
 8008c0e:	b128      	cbz	r0, 8008c1c <__smakebuf_r+0x70>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	431d      	orrs	r5, r3
 8008c20:	81a5      	strh	r5, [r4, #12]
 8008c22:	e7cf      	b.n	8008bc4 <__smakebuf_r+0x18>

08008c24 <_fstat_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_fstat_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f000 f9f1 	bl	8009018 <_fstat>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_fstat_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_fstat_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	20000bf0 	.word	0x20000bf0

08008c48 <_isatty_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	; (8008c64 <_isatty_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f000 f9f0 	bl	8009038 <_isatty>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_isatty_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_isatty_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000bf0 	.word	0x20000bf0

08008c68 <__assert_func>:
 8008c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <__assert_func+0x2c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4605      	mov	r5, r0
 8008c74:	68d8      	ldr	r0, [r3, #12]
 8008c76:	b14c      	cbz	r4, 8008c8c <__assert_func+0x24>
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <__assert_func+0x30>)
 8008c7a:	9100      	str	r1, [sp, #0]
 8008c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c80:	4906      	ldr	r1, [pc, #24]	; (8008c9c <__assert_func+0x34>)
 8008c82:	462b      	mov	r3, r5
 8008c84:	f000 f82e 	bl	8008ce4 <fiprintf>
 8008c88:	f000 f83e 	bl	8008d08 <abort>
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <__assert_func+0x38>)
 8008c8e:	461c      	mov	r4, r3
 8008c90:	e7f3      	b.n	8008c7a <__assert_func+0x12>
 8008c92:	bf00      	nop
 8008c94:	200005b0 	.word	0x200005b0
 8008c98:	0800ac37 	.word	0x0800ac37
 8008c9c:	0800ac44 	.word	0x0800ac44
 8008ca0:	0800913a 	.word	0x0800913a

08008ca4 <__ascii_mbtowc>:
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	b901      	cbnz	r1, 8008caa <__ascii_mbtowc+0x6>
 8008ca8:	a901      	add	r1, sp, #4
 8008caa:	b142      	cbz	r2, 8008cbe <__ascii_mbtowc+0x1a>
 8008cac:	b14b      	cbz	r3, 8008cc2 <__ascii_mbtowc+0x1e>
 8008cae:	7813      	ldrb	r3, [r2, #0]
 8008cb0:	600b      	str	r3, [r1, #0]
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	1e10      	subs	r0, r2, #0
 8008cb6:	bf18      	it	ne
 8008cb8:	2001      	movne	r0, #1
 8008cba:	b002      	add	sp, #8
 8008cbc:	4770      	bx	lr
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	e7fb      	b.n	8008cba <__ascii_mbtowc+0x16>
 8008cc2:	f06f 0001 	mvn.w	r0, #1
 8008cc6:	e7f8      	b.n	8008cba <__ascii_mbtowc+0x16>

08008cc8 <__ascii_wctomb>:
 8008cc8:	b149      	cbz	r1, 8008cde <__ascii_wctomb+0x16>
 8008cca:	2aff      	cmp	r2, #255	; 0xff
 8008ccc:	bf85      	ittet	hi
 8008cce:	238a      	movhi	r3, #138	; 0x8a
 8008cd0:	6003      	strhi	r3, [r0, #0]
 8008cd2:	700a      	strbls	r2, [r1, #0]
 8008cd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008cd8:	bf98      	it	ls
 8008cda:	2001      	movls	r0, #1
 8008cdc:	4770      	bx	lr
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4770      	bx	lr
	...

08008ce4 <fiprintf>:
 8008ce4:	b40e      	push	{r1, r2, r3}
 8008ce6:	b503      	push	{r0, r1, lr}
 8008ce8:	4601      	mov	r1, r0
 8008cea:	ab03      	add	r3, sp, #12
 8008cec:	4805      	ldr	r0, [pc, #20]	; (8008d04 <fiprintf+0x20>)
 8008cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	f7ff fd6b 	bl	80087d0 <_vfiprintf_r>
 8008cfa:	b002      	add	sp, #8
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b003      	add	sp, #12
 8008d02:	4770      	bx	lr
 8008d04:	200005b0 	.word	0x200005b0

08008d08 <abort>:
 8008d08:	b508      	push	{r3, lr}
 8008d0a:	2006      	movs	r0, #6
 8008d0c:	f000 f82c 	bl	8008d68 <raise>
 8008d10:	2001      	movs	r0, #1
 8008d12:	f000 f9b1 	bl	8009078 <_exit>

08008d16 <_raise_r>:
 8008d16:	291f      	cmp	r1, #31
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	d904      	bls.n	8008d2a <_raise_r+0x14>
 8008d20:	2316      	movs	r3, #22
 8008d22:	6003      	str	r3, [r0, #0]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d2c:	b112      	cbz	r2, 8008d34 <_raise_r+0x1e>
 8008d2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d32:	b94b      	cbnz	r3, 8008d48 <_raise_r+0x32>
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 f831 	bl	8008d9c <_getpid_r>
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4620      	mov	r0, r4
 8008d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d44:	f000 b818 	b.w	8008d78 <_kill_r>
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d00a      	beq.n	8008d62 <_raise_r+0x4c>
 8008d4c:	1c59      	adds	r1, r3, #1
 8008d4e:	d103      	bne.n	8008d58 <_raise_r+0x42>
 8008d50:	2316      	movs	r3, #22
 8008d52:	6003      	str	r3, [r0, #0]
 8008d54:	2001      	movs	r0, #1
 8008d56:	e7e7      	b.n	8008d28 <_raise_r+0x12>
 8008d58:	2400      	movs	r4, #0
 8008d5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	4798      	blx	r3
 8008d62:	2000      	movs	r0, #0
 8008d64:	e7e0      	b.n	8008d28 <_raise_r+0x12>
	...

08008d68 <raise>:
 8008d68:	4b02      	ldr	r3, [pc, #8]	; (8008d74 <raise+0xc>)
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	f7ff bfd2 	b.w	8008d16 <_raise_r>
 8008d72:	bf00      	nop
 8008d74:	200005b0 	.word	0x200005b0

08008d78 <_kill_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d07      	ldr	r5, [pc, #28]	; (8008d98 <_kill_r+0x20>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	f000 f95f 	bl	8009048 <_kill>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d102      	bne.n	8008d94 <_kill_r+0x1c>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	b103      	cbz	r3, 8008d94 <_kill_r+0x1c>
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	bf00      	nop
 8008d98:	20000bf0 	.word	0x20000bf0

08008d9c <_getpid_r>:
 8008d9c:	f000 b944 	b.w	8009028 <_getpid>

08008da0 <expf>:
 8008da0:	b508      	push	{r3, lr}
 8008da2:	ed2d 8b02 	vpush	{d8}
 8008da6:	eef0 8a40 	vmov.f32	s17, s0
 8008daa:	f000 f85f 	bl	8008e6c <__ieee754_expf>
 8008dae:	eeb0 8a40 	vmov.f32	s16, s0
 8008db2:	eeb0 0a68 	vmov.f32	s0, s17
 8008db6:	f000 f829 	bl	8008e0c <finitef>
 8008dba:	b160      	cbz	r0, 8008dd6 <expf+0x36>
 8008dbc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008dfc <expf+0x5c>
 8008dc0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc8:	dd0a      	ble.n	8008de0 <expf+0x40>
 8008dca:	f7fe fa59 	bl	8007280 <__errno>
 8008dce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008e00 <expf+0x60>
 8008dd2:	2322      	movs	r3, #34	; 0x22
 8008dd4:	6003      	str	r3, [r0, #0]
 8008dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8008dda:	ecbd 8b02 	vpop	{d8}
 8008dde:	bd08      	pop	{r3, pc}
 8008de0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008e04 <expf+0x64>
 8008de4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	d5f3      	bpl.n	8008dd6 <expf+0x36>
 8008dee:	f7fe fa47 	bl	8007280 <__errno>
 8008df2:	2322      	movs	r3, #34	; 0x22
 8008df4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008e08 <expf+0x68>
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	e7ec      	b.n	8008dd6 <expf+0x36>
 8008dfc:	42b17217 	.word	0x42b17217
 8008e00:	7f800000 	.word	0x7f800000
 8008e04:	c2cff1b5 	.word	0xc2cff1b5
 8008e08:	00000000 	.word	0x00000000

08008e0c <finitef>:
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e12:	9801      	ldr	r0, [sp, #4]
 8008e14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e18:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008e1c:	bfac      	ite	ge
 8008e1e:	2000      	movge	r0, #0
 8008e20:	2001      	movlt	r0, #1
 8008e22:	b002      	add	sp, #8
 8008e24:	4770      	bx	lr

08008e26 <with_errnof>:
 8008e26:	b513      	push	{r0, r1, r4, lr}
 8008e28:	4604      	mov	r4, r0
 8008e2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e2e:	f7fe fa27 	bl	8007280 <__errno>
 8008e32:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008e36:	6004      	str	r4, [r0, #0]
 8008e38:	b002      	add	sp, #8
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <xflowf>:
 8008e3c:	b130      	cbz	r0, 8008e4c <xflowf+0x10>
 8008e3e:	eef1 7a40 	vneg.f32	s15, s0
 8008e42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008e46:	2022      	movs	r0, #34	; 0x22
 8008e48:	f7ff bfed 	b.w	8008e26 <with_errnof>
 8008e4c:	eef0 7a40 	vmov.f32	s15, s0
 8008e50:	e7f7      	b.n	8008e42 <xflowf+0x6>
	...

08008e54 <__math_uflowf>:
 8008e54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e5c <__math_uflowf+0x8>
 8008e58:	f7ff bff0 	b.w	8008e3c <xflowf>
 8008e5c:	10000000 	.word	0x10000000

08008e60 <__math_oflowf>:
 8008e60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e68 <__math_oflowf+0x8>
 8008e64:	f7ff bfea 	b.w	8008e3c <xflowf>
 8008e68:	70000000 	.word	0x70000000

08008e6c <__ieee754_expf>:
 8008e6c:	ee10 2a10 	vmov	r2, s0
 8008e70:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008e74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e78:	d902      	bls.n	8008e80 <__ieee754_expf+0x14>
 8008e7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e7e:	4770      	bx	lr
 8008e80:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8008e84:	d106      	bne.n	8008e94 <__ieee754_expf+0x28>
 8008e86:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008fc0 <__ieee754_expf+0x154>
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	bf18      	it	ne
 8008e8e:	eeb0 0a67 	vmovne.f32	s0, s15
 8008e92:	4770      	bx	lr
 8008e94:	484b      	ldr	r0, [pc, #300]	; (8008fc4 <__ieee754_expf+0x158>)
 8008e96:	4282      	cmp	r2, r0
 8008e98:	dd02      	ble.n	8008ea0 <__ieee754_expf+0x34>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	f7ff bfe0 	b.w	8008e60 <__math_oflowf>
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	da05      	bge.n	8008eb0 <__ieee754_expf+0x44>
 8008ea4:	4a48      	ldr	r2, [pc, #288]	; (8008fc8 <__ieee754_expf+0x15c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d902      	bls.n	8008eb0 <__ieee754_expf+0x44>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f7ff bfd2 	b.w	8008e54 <__math_uflowf>
 8008eb0:	4a46      	ldr	r2, [pc, #280]	; (8008fcc <__ieee754_expf+0x160>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008eb8:	d952      	bls.n	8008f60 <__ieee754_expf+0xf4>
 8008eba:	4a45      	ldr	r2, [pc, #276]	; (8008fd0 <__ieee754_expf+0x164>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008ec2:	d834      	bhi.n	8008f2e <__ieee754_expf+0xc2>
 8008ec4:	4b43      	ldr	r3, [pc, #268]	; (8008fd4 <__ieee754_expf+0x168>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	ed93 7a00 	vldr	s14, [r3]
 8008ecc:	4b42      	ldr	r3, [pc, #264]	; (8008fd8 <__ieee754_expf+0x16c>)
 8008ece:	4413      	add	r3, r2
 8008ed0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008ed4:	f1c1 0201 	rsb	r2, r1, #1
 8008ed8:	edd3 7a00 	vldr	s15, [r3]
 8008edc:	1a52      	subs	r2, r2, r1
 8008ede:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008ee2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008ee6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8008fdc <__ieee754_expf+0x170>
 8008eea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fe0 <__ieee754_expf+0x174>
 8008eee:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008ef2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8008fe4 <__ieee754_expf+0x178>
 8008ef6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008efa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fe8 <__ieee754_expf+0x17c>
 8008efe:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008f02:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008fec <__ieee754_expf+0x180>
 8008f06:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008f0a:	eef0 6a40 	vmov.f32	s13, s0
 8008f0e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008f12:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008f16:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008f1a:	bb92      	cbnz	r2, 8008f82 <__ieee754_expf+0x116>
 8008f1c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008f20:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008f24:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008f28:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008f2c:	4770      	bx	lr
 8008f2e:	4b30      	ldr	r3, [pc, #192]	; (8008ff0 <__ieee754_expf+0x184>)
 8008f30:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008ff4 <__ieee754_expf+0x188>
 8008f34:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008ff8 <__ieee754_expf+0x18c>
 8008f38:	4413      	add	r3, r2
 8008f3a:	edd3 7a00 	vldr	s15, [r3]
 8008f3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f42:	eeb0 7a40 	vmov.f32	s14, s0
 8008f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f52:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008f56:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008ffc <__ieee754_expf+0x190>
 8008f5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f5e:	e7be      	b.n	8008ede <__ieee754_expf+0x72>
 8008f60:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8008f64:	d20b      	bcs.n	8008f7e <__ieee754_expf+0x112>
 8008f66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009000 <__ieee754_expf+0x194>
 8008f6a:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008f6e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	dd02      	ble.n	8008f7e <__ieee754_expf+0x112>
 8008f78:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008f7c:	4770      	bx	lr
 8008f7e:	2200      	movs	r2, #0
 8008f80:	e7af      	b.n	8008ee2 <__ieee754_expf+0x76>
 8008f82:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008f86:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8008f8a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8008f8e:	bfb8      	it	lt
 8008f90:	3264      	addlt	r2, #100	; 0x64
 8008f92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f9a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008f9e:	ee17 3a90 	vmov	r3, s15
 8008fa2:	bfab      	itete	ge
 8008fa4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008fa8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008fac:	ee00 3a10 	vmovge	s0, r3
 8008fb0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009004 <__ieee754_expf+0x198>
 8008fb4:	bfbc      	itt	lt
 8008fb6:	ee00 3a10 	vmovlt	s0, r3
 8008fba:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8008fbe:	4770      	bx	lr
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	42b17217 	.word	0x42b17217
 8008fc8:	42cff1b5 	.word	0x42cff1b5
 8008fcc:	3eb17218 	.word	0x3eb17218
 8008fd0:	3f851591 	.word	0x3f851591
 8008fd4:	0800ad7c 	.word	0x0800ad7c
 8008fd8:	0800ad84 	.word	0x0800ad84
 8008fdc:	3331bb4c 	.word	0x3331bb4c
 8008fe0:	b5ddea0e 	.word	0xb5ddea0e
 8008fe4:	388ab355 	.word	0x388ab355
 8008fe8:	bb360b61 	.word	0xbb360b61
 8008fec:	3e2aaaab 	.word	0x3e2aaaab
 8008ff0:	0800ad74 	.word	0x0800ad74
 8008ff4:	3fb8aa3b 	.word	0x3fb8aa3b
 8008ff8:	3f317180 	.word	0x3f317180
 8008ffc:	3717f7d1 	.word	0x3717f7d1
 8009000:	7149f2ca 	.word	0x7149f2ca
 8009004:	0d800000 	.word	0x0d800000

08009008 <_close>:
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <_close+0xc>)
 800900a:	2258      	movs	r2, #88	; 0x58
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	4770      	bx	lr
 8009014:	20000bf0 	.word	0x20000bf0

08009018 <_fstat>:
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <_fstat+0xc>)
 800901a:	2258      	movs	r2, #88	; 0x58
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	4770      	bx	lr
 8009024:	20000bf0 	.word	0x20000bf0

08009028 <_getpid>:
 8009028:	4b02      	ldr	r3, [pc, #8]	; (8009034 <_getpid+0xc>)
 800902a:	2258      	movs	r2, #88	; 0x58
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	4770      	bx	lr
 8009034:	20000bf0 	.word	0x20000bf0

08009038 <_isatty>:
 8009038:	4b02      	ldr	r3, [pc, #8]	; (8009044 <_isatty+0xc>)
 800903a:	2258      	movs	r2, #88	; 0x58
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	2000      	movs	r0, #0
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000bf0 	.word	0x20000bf0

08009048 <_kill>:
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <_kill+0xc>)
 800904a:	2258      	movs	r2, #88	; 0x58
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	4770      	bx	lr
 8009054:	20000bf0 	.word	0x20000bf0

08009058 <_lseek>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <_lseek+0xc>)
 800905a:	2258      	movs	r2, #88	; 0x58
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	f04f 30ff 	mov.w	r0, #4294967295
 8009062:	4770      	bx	lr
 8009064:	20000bf0 	.word	0x20000bf0

08009068 <_read>:
 8009068:	4b02      	ldr	r3, [pc, #8]	; (8009074 <_read+0xc>)
 800906a:	2258      	movs	r2, #88	; 0x58
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	f04f 30ff 	mov.w	r0, #4294967295
 8009072:	4770      	bx	lr
 8009074:	20000bf0 	.word	0x20000bf0

08009078 <_exit>:
 8009078:	e7fe      	b.n	8009078 <_exit>
	...

0800907c <_init>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr

08009088 <_fini>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr
