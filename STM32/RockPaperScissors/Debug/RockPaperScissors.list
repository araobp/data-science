
RockPaperScissors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       000000ec  20000000  20000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .AI_RAM2      00000000  10000000  10000000  000300ec  2**0
                  CONTENTS
  2 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00007ff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001cec  08008180  08008180  00018180  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08009e6c  08009e6c  000300ec  2**0
                  CONTENTS
  6 .ARM          00000008  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08009e74  08009e74  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000720  200000ec  08009e7c  000200ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000030c  2000080c  0800a59c  0002080c  2**2
                  ALLOC
 12 ._user_heap_stack 00001000  20000b18  0800a59c  00020b18  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 14 .comment      00000108  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00015bfc  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003790  00000000  00000000  00045e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00005cb3  00000000  00000000  000495b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b08  00000000  00000000  0004f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000928  00000000  00000000  0004fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00029768  00000000  00000000  00050698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00013b40  00000000  00000000  00079e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f8174  00000000  00000000  0008d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00002d10  00000000  00000000  00185ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000072  00000000  00000000  001887c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000020  00000000  00000000  00188836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    000000fa  00000000  00000000  00188856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000080c 	.word	0x2000080c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008168 	.word	0x08008168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000810 	.word	0x20000810
 80001cc:	08008168 	.word	0x08008168

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <rps_init>:
  for (int i = 0; i < len; i++) {
    normalized_data[i] = (in_data[i] - mean) / std;
  }
}

void rps_init(void) {
 8000f44:	b538      	push	{r3, r4, r5, lr}

  printf("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <rps_init+0x50>)
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f48:	4d13      	ldr	r5, [pc, #76]	; (8000f98 <rps_init+0x54>)
  printf("[NETWORK FIND] NN_NAME: %s\n", nn_name);

  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f4a:	4c14      	ldr	r4, [pc, #80]	; (8000f9c <rps_init+0x58>)
  printf("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f4c:	f005 f8f4 	bl	8006138 <puts>
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4608      	mov	r0, r1
 8000f54:	f001 fe74 	bl	8002c40 <ai_mnetwork_find>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	6028      	str	r0, [r5, #0]
  printf("[NETWORK FIND] NN_NAME: %s\n", nn_name);
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <rps_init+0x5c>)
 8000f5e:	f005 f885 	bl	800606c <iprintf>
  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f62:	4621      	mov	r1, r4
 8000f64:	6828      	ldr	r0, [r5, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f001 fe78 	bl	8002c5c <ai_mnetwork_create>
  printf("[NETWORK CREATION] err.type: 0x%02X, err.code: 0x%02X\n",
 8000f6c:	0a02      	lsrs	r2, r0, #8
 8000f6e:	b2c1      	uxtb	r1, r0
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <rps_init+0x60>)
 8000f72:	f005 f87b 	bl	800606c <iprintf>
      ai_err.type, ai_err.code);

  bool success = ai_mnetwork_init(handle);
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	f001 fe9a 	bl	8002cb0 <ai_mnetwork_init>
 8000f7c:	4601      	mov	r1, r0
  printf("[NETWORK INITIALIZATION] %d\n", success);  // 0: Failure, 1; Success
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <rps_init+0x64>)
 8000f80:	f005 f874 	bl	800606c <iprintf>

  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8000f84:	2208      	movs	r2, #8
}
 8000f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <rps_init+0x68>)
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	f000 b8bd 	b.w	800110c <dct2_2d_init_f32>
 8000f92:	bf00      	nop
 8000f94:	080081a0 	.word	0x080081a0
 8000f98:	20000850 	.word	0x20000850
 8000f9c:	2000084c 	.word	0x2000084c
 8000fa0:	080081c0 	.word	0x080081c0
 8000fa4:	080081dc 	.word	0x080081dc
 8000fa8:	08008213 	.word	0x08008213
 8000fac:	20000828 	.word	0x20000828

08000fb0 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 8000fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb4:	ed2d 8b04 	vpush	{d8-d9}
 8000fb8:	460d      	mov	r5, r1
 8000fba:	b083      	sub	sp, #12
 8000fbc:	4604      	mov	r4, r0
  float32_t *pDataW = NULL;
  float32_t *pDataW_I = NULL;
  float32_t *pDataX = NULL;
  S->width = width;

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000fbe:	2300      	movs	r3, #0
  S->width = width;
 8000fc0:	f820 1b04 	strh.w	r1, [r0], #4
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000fc4:	2201      	movs	r2, #1

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fc6:	fb05 f605 	mul.w	r6, r5, r5
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000fca:	f001 ff8d 	bl	8002ee8 <arm_mat_init_f32>
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f004 fa63 	bl	800549c <calloc>
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8000fd6:	462a      	mov	r2, r5
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fd8:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f104 000c 	add.w	r0, r4, #12
 8000fe0:	f001 ff82 	bl	8002ee8 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f004 fa58 	bl	800549c <calloc>
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8000fec:	462a      	mov	r2, r5
  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fee:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	f104 0014 	add.w	r0, r4, #20
 8000ff6:	f001 ff77 	bl	8002ee8 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f004 fa4d 	bl	800549c <calloc>
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 8001002:	4629      	mov	r1, r5
  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8001004:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 8001006:	2201      	movs	r2, #1
 8001008:	f104 001c 	add.w	r0, r4, #28
 800100c:	f001 ff6c 	bl	8002ee8 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 8001010:	2500      	movs	r5, #0
 8001012:	8823      	ldrh	r3, [r4, #0]
 8001014:	42ab      	cmp	r3, r5
 8001016:	dd6a      	ble.n	80010ee <dct2_init_f32+0x13e>
 8001018:	006b      	lsls	r3, r5, #1
 800101a:	462f      	mov	r7, r5
 800101c:	9301      	str	r3, [sp, #4]
    for (int n = 0; n < S->width; n++) {
 800101e:	2600      	movs	r6, #0
 8001020:	e023      	b.n	800106a <dct2_init_f32+0xba>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001022:	6923      	ldr	r3, [r4, #16]
 8001024:	fb05 620a 	mla	r2, r5, sl, r6
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001028:	4638      	mov	r0, r7
      S->W.pData[k * S->width + n] = arm_cos_f32(
 800102a:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	a334      	add	r3, pc, #208	; (adr r3, 8001104 <dct2_init_f32+0x154>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fade 	bl	80005f8 <__aeabi_dmul>
 800103c:	4680      	mov	r8, r0
 800103e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001042:	4689      	mov	r9, r1
 8001044:	f7ff fa6e 	bl	8000524 <__aeabi_i2d>
 8001048:	460b      	mov	r3, r1
 800104a:	4602      	mov	r2, r0
 800104c:	4649      	mov	r1, r9
 800104e:	4640      	mov	r0, r8
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001054:	f7ff fda8 	bl	8000ba8 <__aeabi_d2f>
 8001058:	ee00 0a10 	vmov	s0, r0
 800105c:	f001 ff48 	bl	8002ef0 <arm_cos_f32>
 8001060:	9b01      	ldr	r3, [sp, #4]
 8001062:	ed8b 0a00 	vstr	s0, [fp]
    for (int n = 0; n < S->width; n++) {
 8001066:	3601      	adds	r6, #1
 8001068:	441f      	add	r7, r3
 800106a:	f8b4 a000 	ldrh.w	sl, [r4]
 800106e:	45b2      	cmp	sl, r6
 8001070:	dcd7      	bgt.n	8001022 <dct2_init_f32+0x72>
  for (int k = 0; k < S->width; k++) {
 8001072:	3501      	adds	r5, #1
 8001074:	e7cd      	b.n	8001012 <dct2_init_f32+0x62>
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8001076:	2d00      	cmp	r5, #0
  }

  for (int n = 0; n < S->width; n++) {
    for (int k = 0; k < S->width; k++) {
      S->W_I.pData[n * S->width + k] = c_k(k)
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001078:	4638      	mov	r0, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 800107a:	bf14      	ite	ne
 800107c:	eeb0 9a48 	vmovne.f32	s18, s16
 8001080:	eeb0 9a68 	vmoveq.f32	s18, s17
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001084:	f7ff fa4e 	bl	8000524 <__aeabi_i2d>
 8001088:	a31e      	add	r3, pc, #120	; (adr r3, 8001104 <dct2_init_f32+0x154>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4680      	mov	r8, r0
 8001094:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001098:	4689      	mov	r9, r1
 800109a:	f7ff fa43 	bl	8000524 <__aeabi_i2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4640      	mov	r0, r8
 80010a4:	4649      	mov	r1, r9
 80010a6:	f7ff fbd1 	bl	800084c <__aeabi_ddiv>
 80010aa:	f7ff fd7d 	bl	8000ba8 <__aeabi_d2f>
 80010ae:	ee00 0a10 	vmov	s0, r0
 80010b2:	f001 ff1d 	bl	8002ef0 <arm_cos_f32>
      S->W_I.pData[n * S->width + k] = c_k(k)
 80010b6:	8822      	ldrh	r2, [r4, #0]
 80010b8:	69a3      	ldr	r3, [r4, #24]
 80010ba:	fb06 5202 	mla	r2, r6, r2, r5
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80010be:	ee20 0a09 	vmul.f32	s0, s0, s18
      S->W_I.pData[n * S->width + k] = c_k(k)
 80010c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80010c6:	ed83 0a00 	vstr	s0, [r3]
    for (int k = 0; k < S->width; k++) {
 80010ca:	3501      	adds	r5, #1
 80010cc:	445f      	add	r7, fp
 80010ce:	f8b4 a000 	ldrh.w	sl, [r4]
 80010d2:	45aa      	cmp	sl, r5
 80010d4:	dccf      	bgt.n	8001076 <dct2_init_f32+0xc6>
  for (int n = 0; n < S->width; n++) {
 80010d6:	3601      	adds	r6, #1
 80010d8:	8823      	ldrh	r3, [r4, #0]
 80010da:	42b3      	cmp	r3, r6
 80010dc:	dd0b      	ble.n	80010f6 <dct2_init_f32+0x146>
 80010de:	0073      	lsls	r3, r6, #1
 80010e0:	2700      	movs	r7, #0
 80010e2:	f103 0b01 	add.w	fp, r3, #1
    for (int k = 0; k < S->width; k++) {
 80010e6:	463d      	mov	r5, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80010e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80010ec:	e7ef      	b.n	80010ce <dct2_init_f32+0x11e>
 80010ee:	eddf 8a04 	vldr	s17, [pc, #16]	; 8001100 <dct2_init_f32+0x150>
  for (int n = 0; n < S->width; n++) {
 80010f2:	2600      	movs	r6, #0
 80010f4:	e7f0      	b.n	80010d8 <dct2_init_f32+0x128>
    }
  }

}
 80010f6:	b003      	add	sp, #12
 80010f8:	ecbd 8b04 	vpop	{d8-d9}
 80010fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001100:	3f3504f3 	.word	0x3f3504f3
 8001104:	54442d18 	.word	0x54442d18
 8001108:	400921fb 	.word	0x400921fb

0800110c <dct2_2d_init_f32>:
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     height     DCT2 2D width.
 * @param[in]     width      DCT2 2D height.
 * @return        none.
 */
void dct2_2d_init_f32(dct2_instance_f32 *S, uint16_t height, uint16_t width) {
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
  dct2_init_f32(S, width);
 8001112:	4611      	mov	r1, r2
 8001114:	f7ff ff4c 	bl	8000fb0 <dct2_init_f32>
  S->height = height;
 8001118:	8065      	strh	r5, [r4, #2]
}
 800111a:	bd38      	pop	{r3, r4, r5, pc}

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b500      	push	{lr}
 800111e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001120:	2244      	movs	r2, #68	; 0x44
 8001122:	2100      	movs	r1, #0
 8001124:	a805      	add	r0, sp, #20
 8001126:	f005 f8e7 	bl	80062f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112a:	2214      	movs	r2, #20
 800112c:	2100      	movs	r1, #0
 800112e:	4668      	mov	r0, sp
 8001130:	f005 f8e2 	bl	80062f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001134:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001138:	f000 fbb0 	bl	800189c <HAL_PWREx_ControlVoltageScaling>
 800113c:	b108      	cbz	r0, 8001142 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	2210      	movs	r2, #16
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001148:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 800114e:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001152:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001156:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001164:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f000 fc5f 	bl	8001a28 <HAL_RCC_OscConfig>
 800116a:	b108      	cbz	r0, 8001170 <SystemClock_Config+0x54>
 800116c:	b672      	cpsid	i
  while (1)
 800116e:	e7fe      	b.n	800116e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	220f      	movs	r2, #15
 8001176:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800117a:	2104      	movs	r1, #4
 800117c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001182:	f000 fed1 	bl	8001f28 <HAL_RCC_ClockConfig>
 8001186:	b108      	cbz	r0, 800118c <SystemClock_Config+0x70>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <SystemClock_Config+0x6e>
}
 800118c:	b017      	add	sp, #92	; 0x5c
 800118e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001194 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <MX_USART2_UART_Init+0x34>)
{
 8001198:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800119a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800119e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	f001 fcf2 	bl	8002b9e <HAL_UART_Init>
 80011ba:	b108      	cbz	r0, 80011c0 <MX_USART2_UART_Init+0x2c>
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <MX_USART2_UART_Init+0x2a>
}
 80011c0:	bd08      	pop	{r3, pc}
 80011c2:	bf00      	nop
 80011c4:	20000878 	.word	0x20000878
 80011c8:	40004400 	.word	0x40004400

080011cc <main>:
{
 80011cc:	b500      	push	{lr}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80011d0:	f000 f99a 	bl	8001508 <HAL_Init>
  SystemClock_Config();
 80011d4:	f7ff ffa2 	bl	800111c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2214      	movs	r2, #20
 80011da:	2100      	movs	r1, #0
 80011dc:	eb0d 0002 	add.w	r0, sp, r2
 80011e0:	f005 f88a 	bl	80062f8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <main+0xc0>)
 80011e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f0:	f002 0204 	and.w	r2, r2, #4
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001202:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	64da      	str	r2, [r3, #76]	; 0x4c
 8001212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001214:	f002 0201 	and.w	r2, r2, #1
 8001218:	9203      	str	r2, [sp, #12]
 800121a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121e:	f042 0202 	orr.w	r2, r2, #2
 8001222:	64da      	str	r2, [r3, #76]	; 0x4c
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2120      	movs	r1, #32
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001238:	f000 fb22 	bl	8001880 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001240:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <main+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f000 fa38 	bl	80016c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001264:	f000 fa2e 	bl	80016c4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <main+0xc8>)
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <main+0xcc>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800126c:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800126e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 8001272:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001274:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001276:	f000 f9c7 	bl	8001608 <HAL_CRC_Init>
 800127a:	b108      	cbz	r0, 8001280 <main+0xb4>
 800127c:	b672      	cpsid	i
  while (1)
 800127e:	e7fe      	b.n	800127e <main+0xb2>
  MX_USART2_UART_Init();
 8001280:	f7ff ff88 	bl	8001194 <MX_USART2_UART_Init>
  rps_init();
 8001284:	f7ff fe5e 	bl	8000f44 <rps_init>
  while (1)
 8001288:	e7fe      	b.n	8001288 <main+0xbc>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	48000800 	.word	0x48000800
 8001294:	20000854 	.word	0x20000854
 8001298:	40023000 	.word	0x40023000

0800129c <_write>:
int _write(int file, char *ptr, int len) {
 800129c:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80012a2:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <_write+0x14>)
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f001 fbec 	bl	8002a84 <HAL_UART_Transmit>
}
 80012ac:	4620      	mov	r0, r4
 80012ae:	bd10      	pop	{r4, pc}
 80012b0:	20000878 	.word	0x20000878

080012b4 <Error_Handler>:
 80012b4:	b672      	cpsid	i
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <Error_Handler+0x2>

080012b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x2c>)
 80012ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	661a      	str	r2, [r3, #96]	; 0x60
 80012c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80012c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	f002 0201 	and.w	r2, r2, #1
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d4:	659a      	str	r2, [r3, #88]	; 0x58
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	b002      	add	sp, #8
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80012e8:	6802      	ldr	r2, [r0, #0]
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_CRC_MspInit+0x24>)
 80012ec:	429a      	cmp	r2, r3
{
 80012ee:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80012f0:	d10a      	bne.n	8001308 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012f2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80012f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012fc:	649a      	str	r2, [r3, #72]	; 0x48
 80012fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001308:	b002      	add	sp, #8
 800130a:	4770      	bx	lr
 800130c:	40023000 	.word	0x40023000

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	b0aa      	sub	sp, #168	; 0xa8
 8001314:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	2214      	movs	r2, #20
 8001318:	2100      	movs	r1, #0
 800131a:	a803      	add	r0, sp, #12
 800131c:	f004 ffec 	bl	80062f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	2288      	movs	r2, #136	; 0x88
 8001322:	2100      	movs	r1, #0
 8001324:	a808      	add	r0, sp, #32
 8001326:	f004 ffe7 	bl	80062f8 <memset>
  if(huart->Instance==USART2)
 800132a:	6822      	ldr	r2, [r4, #0]
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_UART_MspInit+0x94>)
 800132e:	429a      	cmp	r2, r3
 8001330:	d135      	bne.n	800139e <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001332:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001336:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f000 ffc6 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	b108      	cbz	r0, 8001342 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800133e:	f7ff ffb9 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_UART_MspInit+0x98>)
 8001344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001346:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800134a:	659a      	str	r2, [r3, #88]	; 0x58
 800134c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800134e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001352:	9201      	str	r2, [sp, #4]
 8001354:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	64da      	str	r2, [r3, #76]	; 0x4c
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2602      	movs	r6, #2
 800136a:	2304      	movs	r3, #4
 800136c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2503      	movs	r5, #3
 8001372:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001374:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001376:	a903      	add	r1, sp, #12
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001380:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001382:	f000 f99f 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001386:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800138c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138e:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001398:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800139a:	f000 f993 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139e:	b02a      	add	sp, #168	; 0xa8
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40021000 	.word	0x40021000

080013ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler>

080013ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler>

080013b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler>

080013b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler>

080013b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler>

080013b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 b8ba 	b.w	8001534 <HAL_IncTick>

080013c0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80013c0:	2001      	movs	r0, #1
 80013c2:	4770      	bx	lr

080013c4 <_kill>:

int _kill(int pid, int sig)
{
 80013c4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c6:	f005 f80b 	bl	80063e0 <__errno>
 80013ca:	2316      	movs	r3, #22
 80013cc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80013ce:	f04f 30ff 	mov.w	r0, #4294967295
 80013d2:	bd08      	pop	{r3, pc}

080013d4 <_exit>:

void _exit (int status)
{
 80013d4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80013d6:	f005 f803 	bl	80063e0 <__errno>
 80013da:	2316      	movs	r3, #22
 80013dc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80013de:	e7fe      	b.n	80013de <_exit+0xa>

080013e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	460d      	mov	r5, r1
 80013e4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	460e      	mov	r6, r1
 80013e8:	1b73      	subs	r3, r6, r5
 80013ea:	429c      	cmp	r4, r3
 80013ec:	dc01      	bgt.n	80013f2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80013ee:	4620      	mov	r0, r4
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80013f2:	f3af 8000 	nop.w
 80013f6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	e7f5      	b.n	80013e8 <_read+0x8>

080013fc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	4770      	bx	lr

08001402 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001408:	2000      	movs	r0, #0
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800140c:	2001      	movs	r0, #1
 800140e:	4770      	bx	lr

08001410 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001410:	2000      	movs	r0, #0
 8001412:	4770      	bx	lr

08001414 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <_sbrk+0x30>)
 8001416:	6811      	ldr	r1, [r2, #0]
{
 8001418:	b510      	push	{r4, lr}
 800141a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800141c:	b909      	cbnz	r1, 8001422 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800141e:	490a      	ldr	r1, [pc, #40]	; (8001448 <_sbrk+0x34>)
 8001420:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	6810      	ldr	r0, [r2, #0]
 8001424:	4909      	ldr	r1, [pc, #36]	; (800144c <_sbrk+0x38>)
 8001426:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <_sbrk+0x3c>)
 8001428:	4403      	add	r3, r0
 800142a:	1b09      	subs	r1, r1, r4
 800142c:	428b      	cmp	r3, r1
 800142e:	d906      	bls.n	800143e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001430:	f004 ffd6 	bl	80063e0 <__errno>
 8001434:	230c      	movs	r3, #12
 8001436:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001438:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800143c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800143e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001440:	e7fc      	b.n	800143c <_sbrk+0x28>
 8001442:	bf00      	nop
 8001444:	200008fc 	.word	0x200008fc
 8001448:	20000b18 	.word	0x20000b18
 800144c:	20018000 	.word	0x20018000
 8001450:	00000800 	.word	0x00000800

08001454 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <SystemInit+0x10>)
 8001456:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800145a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff fff2 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f004 ffa9 	bl	80063ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff fe97 	bl	80011cc <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a4:	200000ec 	.word	0x200000ec
  ldr r1, =_edata
 80014a8:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 80014ac:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 80014b0:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 80014b4:	20000b18 	.word	0x20000b18

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_InitTick+0x40>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
{
 80014c2:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80014c4:	b90a      	cbnz	r2, 80014ca <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_InitTick+0x44>)
 80014d4:	6810      	ldr	r0, [r2, #0]
 80014d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014da:	f000 f881 	bl	80015e0 <HAL_SYSTICK_Config>
 80014de:	4604      	mov	r4, r0
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e4:	2d0f      	cmp	r5, #15
 80014e6:	d8ee      	bhi.n	80014c6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	4602      	mov	r2, r0
 80014ea:	4629      	mov	r1, r5
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 f844 	bl	800157c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_InitTick+0x48>)
 80014f6:	4620      	mov	r0, r4
 80014f8:	601d      	str	r5, [r3, #0]
  return status;
 80014fa:	e7e5      	b.n	80014c8 <HAL_InitTick+0xc>
 80014fc:	200000f0 	.word	0x200000f0
 8001500:	200000ec 	.word	0x200000ec
 8001504:	200000f4 	.word	0x200000f4

08001508 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_Init+0x28>)
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001510:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001512:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	f000 f81f 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff ffce 	bl	80014bc <HAL_InitTick>
 8001520:	4604      	mov	r4, r0
 8001522:	b918      	cbnz	r0, 800152c <HAL_Init+0x24>
    HAL_MspInit();
 8001524:	f7ff fec8 	bl	80012b8 <HAL_MspInit>
}
 8001528:	4620      	mov	r0, r4
 800152a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800152c:	2401      	movs	r4, #1
 800152e:	e7fb      	b.n	8001528 <HAL_Init+0x20>
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x10>)
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_IncTick+0x14>)
 8001538:	6811      	ldr	r1, [r2, #0]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	440b      	add	r3, r1
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000900 	.word	0x20000900
 8001548:	200000f0 	.word	0x200000f0

0800154c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <HAL_GetTick+0x8>)
 800154e:	6818      	ldr	r0, [r3, #0]
}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000900 	.word	0x20000900

08001558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800155a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001568:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001574:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157e:	b530      	push	{r4, r5, lr}
 8001580:	68dc      	ldr	r4, [r3, #12]
 8001582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001586:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	2b04      	cmp	r3, #4
 800158e:	bf28      	it	cs
 8001590:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001598:	bf8c      	ite	hi
 800159a:	3c03      	subhi	r4, #3
 800159c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159e:	fa05 f303 	lsl.w	r3, r5, r3
 80015a2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a6:	40a5      	lsls	r5, r4
 80015a8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80015ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	bfac      	ite	ge
 80015b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	4a08      	ldrlt	r2, [pc, #32]	; (80015dc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	bfb8      	it	lt
 80015c2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	bfaa      	itet	ge
 80015ca:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015d4:	bd30      	pop	{r4, r5, pc}
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000ed14 	.word	0xe000ed14

080015e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	3801      	subs	r0, #1
 80015e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015e6:	d20b      	bcs.n	8001600 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	21f0      	movs	r1, #240	; 0xf0
 80015f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001600:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001608:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800160a:	4604      	mov	r4, r0
 800160c:	b908      	cbnz	r0, 8001612 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800160e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001610:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001612:	7f43      	ldrb	r3, [r0, #29]
 8001614:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001618:	b913      	cbnz	r3, 8001620 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800161a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800161c:	f7ff fe64 	bl	80012e8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001620:	2302      	movs	r3, #2
 8001622:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001624:	7923      	ldrb	r3, [r4, #4]
 8001626:	b9e3      	cbnz	r3, 8001662 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <HAL_CRC_Init+0x70>)
 800162c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	f022 0218 	bic.w	r2, r2, #24
 8001634:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001636:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001638:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800163a:	b9d2      	cbnz	r2, 8001672 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001640:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	6961      	ldr	r1, [r4, #20]
 8001646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800164a:	430a      	orrs	r2, r1
 800164c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69a1      	ldr	r1, [r4, #24]
 8001652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800165a:	2301      	movs	r3, #1
 800165c:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800165e:	2000      	movs	r0, #0
 8001660:	e7d6      	b.n	8001610 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001662:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001666:	4620      	mov	r0, r4
 8001668:	f000 f808 	bl	800167c <HAL_CRCEx_Polynomial_Set>
 800166c:	2800      	cmp	r0, #0
 800166e:	d0e2      	beq.n	8001636 <HAL_CRC_Init+0x2e>
 8001670:	e7cd      	b.n	800160e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001672:	6922      	ldr	r2, [r4, #16]
 8001674:	e7e4      	b.n	8001640 <HAL_CRC_Init+0x38>
 8001676:	bf00      	nop
 8001678:	04c11db7 	.word	0x04c11db7

0800167c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800167c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800167e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001680:	3b01      	subs	r3, #1
 8001682:	d31c      	bcc.n	80016be <HAL_CRCEx_Polynomial_Set+0x42>
 8001684:	fa21 f403 	lsr.w	r4, r1, r3
 8001688:	07e4      	lsls	r4, r4, #31
 800168a:	d5f9      	bpl.n	8001680 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800168c:	2a10      	cmp	r2, #16
 800168e:	d012      	beq.n	80016b6 <HAL_CRCEx_Polynomial_Set+0x3a>
 8001690:	d804      	bhi.n	800169c <HAL_CRCEx_Polynomial_Set+0x20>
 8001692:	b13a      	cbz	r2, 80016a4 <HAL_CRCEx_Polynomial_Set+0x28>
 8001694:	2a08      	cmp	r2, #8
 8001696:	d010      	beq.n	80016ba <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001698:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800169a:	e00b      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800169c:	2a18      	cmp	r2, #24
 800169e:	d1fb      	bne.n	8001698 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80016a0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80016a2:	d8f9      	bhi.n	8001698 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016a4:	6800      	ldr	r0, [r0, #0]
 80016a6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016a8:	6883      	ldr	r3, [r0, #8]
 80016aa:	f023 0318 	bic.w	r3, r3, #24
 80016ae:	4313      	orrs	r3, r2
 80016b0:	6083      	str	r3, [r0, #8]
 80016b2:	2000      	movs	r0, #0
}
 80016b4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80016b6:	2b07      	cmp	r3, #7
 80016b8:	e7f3      	b.n	80016a2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	e7f1      	b.n	80016a2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d1ea      	bne.n	8001698 <HAL_CRCEx_Polynomial_Set+0x1c>
 80016c2:	e7ef      	b.n	80016a4 <HAL_CRCEx_Polynomial_Set+0x28>

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800187c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016cc:	4c69      	ldr	r4, [pc, #420]	; (8001874 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	680a      	ldr	r2, [r1, #0]
 80016d2:	fa32 f503 	lsrs.w	r5, r2, r3
 80016d6:	d102      	bne.n	80016de <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80016d8:	b003      	add	sp, #12
 80016da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016de:	f04f 0e01 	mov.w	lr, #1
 80016e2:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80016e6:	ea1e 0202 	ands.w	r2, lr, r2
 80016ea:	f000 8090 	beq.w	800180e <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ee:	684d      	ldr	r5, [r1, #4]
 80016f0:	f005 0603 	and.w	r6, r5, #3
 80016f4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f8:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fe:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001702:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001704:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001708:	f200 8083 	bhi.w	8001812 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 800170c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001712:	68cf      	ldr	r7, [r1, #12]
 8001714:	fa07 f708 	lsl.w	r7, r7, r8
 8001718:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800171c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800171e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001720:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001724:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001728:	409f      	lsls	r7, r3
 800172a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800172e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001730:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001732:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001736:	688f      	ldr	r7, [r1, #8]
 8001738:	fa07 f708 	lsl.w	r7, r7, r8
 800173c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001740:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001742:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	d071      	beq.n	800182a <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001746:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001748:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800174c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001750:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001752:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001756:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001758:	d059      	beq.n	800180e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800175e:	f046 0601 	orr.w	r6, r6, #1
 8001762:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001766:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800176a:	f023 0703 	bic.w	r7, r3, #3
 800176e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001772:	f006 0601 	and.w	r6, r6, #1
 8001776:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800177a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800177c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001782:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001784:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001788:	f04f 0c0f 	mov.w	ip, #15
 800178c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001790:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001794:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001798:	d05f      	beq.n	800185a <HAL_GPIO_Init+0x196>
 800179a:	4e37      	ldr	r6, [pc, #220]	; (8001878 <HAL_GPIO_Init+0x1b4>)
 800179c:	42b0      	cmp	r0, r6
 800179e:	d05e      	beq.n	800185e <HAL_GPIO_Init+0x19a>
 80017a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017a4:	42b0      	cmp	r0, r6
 80017a6:	d05c      	beq.n	8001862 <HAL_GPIO_Init+0x19e>
 80017a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017ac:	42b0      	cmp	r0, r6
 80017ae:	d05a      	beq.n	8001866 <HAL_GPIO_Init+0x1a2>
 80017b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017b4:	42b0      	cmp	r0, r6
 80017b6:	d058      	beq.n	800186a <HAL_GPIO_Init+0x1a6>
 80017b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017bc:	42b0      	cmp	r0, r6
 80017be:	d056      	beq.n	800186e <HAL_GPIO_Init+0x1aa>
 80017c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80017c4:	42b0      	cmp	r0, r6
 80017c6:	bf0c      	ite	eq
 80017c8:	2606      	moveq	r6, #6
 80017ca:	2607      	movne	r6, #7
 80017cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80017d0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d4:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 80017d6:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 80017d8:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017da:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80017de:	bf0c      	ite	eq
 80017e0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80017e2:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 80017e4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 80017e6:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80017ec:	bf0c      	ite	eq
 80017ee:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80017f0:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 80017f2:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 80017f4:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 80017fa:	bf0c      	ite	eq
 80017fc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80017fe:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001800:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001802:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001804:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001806:	bf54      	ite	pl
 8001808:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800180a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 800180c:	6026      	str	r6, [r4, #0]
    position++;
 800180e:	3301      	adds	r3, #1
 8001810:	e75e      	b.n	80016d0 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001812:	2e03      	cmp	r6, #3
 8001814:	d18c      	bne.n	8001730 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001816:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001818:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800181c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001820:	409f      	lsls	r7, r3
 8001822:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001826:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	e78d      	b.n	8001746 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 800182a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800182e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001832:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001836:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800183e:	f04f 0e0f 	mov.w	lr, #15
 8001842:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001846:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184a:	690f      	ldr	r7, [r1, #16]
 800184c:	fa07 f70b 	lsl.w	r7, r7, fp
 8001850:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001854:	f8ca 7020 	str.w	r7, [sl, #32]
 8001858:	e775      	b.n	8001746 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185a:	2600      	movs	r6, #0
 800185c:	e7b6      	b.n	80017cc <HAL_GPIO_Init+0x108>
 800185e:	2601      	movs	r6, #1
 8001860:	e7b4      	b.n	80017cc <HAL_GPIO_Init+0x108>
 8001862:	2602      	movs	r6, #2
 8001864:	e7b2      	b.n	80017cc <HAL_GPIO_Init+0x108>
 8001866:	2603      	movs	r6, #3
 8001868:	e7b0      	b.n	80017cc <HAL_GPIO_Init+0x108>
 800186a:	2604      	movs	r6, #4
 800186c:	e7ae      	b.n	80017cc <HAL_GPIO_Init+0x108>
 800186e:	2605      	movs	r6, #5
 8001870:	e7ac      	b.n	80017cc <HAL_GPIO_Init+0x108>
 8001872:	bf00      	nop
 8001874:	40010400 	.word	0x40010400
 8001878:	48000400 	.word	0x48000400
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	b10a      	cbz	r2, 8001886 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001882:	6181      	str	r1, [r0, #24]
 8001884:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001886:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001888:	4770      	bx	lr
	...

0800188c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_PWREx_GetVoltageRange+0xc>)
 800188e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001890:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40007000 	.word	0x40007000

0800189c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800189e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a8:	d11d      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ae:	d101      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b0:	2000      	movs	r0, #0
 80018b2:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2132      	movs	r1, #50	; 0x32
 80018c6:	434b      	muls	r3, r1
 80018c8:	490e      	ldr	r1, [pc, #56]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d0:	6951      	ldr	r1, [r2, #20]
 80018d2:	0549      	lsls	r1, r1, #21
 80018d4:	d500      	bpl.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80018d6:	b923      	cbnz	r3, 80018e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d8:	6953      	ldr	r3, [r2, #20]
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	d5e8      	bpl.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
}
 80018e0:	4770      	bx	lr
        wait_loop_index--;
 80018e2:	3b01      	subs	r3, #1
 80018e4:	e7f4      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018ea:	bf1f      	itttt	ne
 80018ec:	6813      	ldrne	r3, [r2, #0]
 80018ee:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80018f2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80018f6:	6013      	strne	r3, [r2, #0]
 80018f8:	e7da      	b.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x14>
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000
 8001900:	200000ec 	.word	0x200000ec
 8001904:	000f4240 	.word	0x000f4240

08001908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001908:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800190a:	4d1e      	ldr	r5, [pc, #120]	; (8001984 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800190c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800190e:	00da      	lsls	r2, r3, #3
{
 8001910:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001912:	d518      	bpl.n	8001946 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001914:	f7ff ffba 	bl	800188c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001918:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800191c:	d123      	bne.n	8001966 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800191e:	2c80      	cmp	r4, #128	; 0x80
 8001920:	d929      	bls.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001922:	2ca0      	cmp	r4, #160	; 0xa0
 8001924:	bf8c      	ite	hi
 8001926:	2402      	movhi	r4, #2
 8001928:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800192a:	4917      	ldr	r1, [pc, #92]	; (8001988 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800192c:	680a      	ldr	r2, [r1, #0]
 800192e:	f022 0207 	bic.w	r2, r2, #7
 8001932:	4322      	orrs	r2, r4
 8001934:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001936:	6808      	ldr	r0, [r1, #0]
 8001938:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800193c:	1b00      	subs	r0, r0, r4
 800193e:	bf18      	it	ne
 8001940:	2001      	movne	r0, #1
 8001942:	b003      	add	sp, #12
 8001944:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	65ab      	str	r3, [r5, #88]	; 0x58
 800194e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001958:	f7ff ff98 	bl	800188c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	65ab      	str	r3, [r5, #88]	; 0x58
 8001964:	e7d8      	b.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001966:	2c80      	cmp	r4, #128	; 0x80
 8001968:	d807      	bhi.n	800197a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800196a:	d008      	beq.n	800197e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800196c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001970:	425c      	negs	r4, r3
 8001972:	415c      	adcs	r4, r3
 8001974:	e7d9      	b.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001976:	2400      	movs	r4, #0
 8001978:	e7d7      	b.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800197a:	2403      	movs	r4, #3
 800197c:	e7d5      	b.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800197e:	2402      	movs	r4, #2
 8001980:	e7d3      	b.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40022000 	.word	0x40022000

0800198c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x8c>)
 800198e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001990:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001992:	f012 020c 	ands.w	r2, r2, #12
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x18>
 8001998:	2a0c      	cmp	r2, #12
 800199a:	d115      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019a0:	2901      	cmp	r1, #1
 80019a2:	d118      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019a4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80019a6:	481d      	ldr	r0, [pc, #116]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019a8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019aa:	bf55      	itete	pl
 80019ac:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019b0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019b2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019b6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80019ba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019be:	b34a      	cbz	r2, 8001a14 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019c0:	2a0c      	cmp	r2, #12
 80019c2:	d009      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x4c>
 80019c4:	2000      	movs	r0, #0
  return sysclockfreq;
 80019c6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019c8:	2a04      	cmp	r2, #4
 80019ca:	d022      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019cc:	2a08      	cmp	r2, #8
 80019ce:	4814      	ldr	r0, [pc, #80]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d0:	bf18      	it	ne
 80019d2:	2000      	movne	r0, #0
 80019d4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019d6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80019de:	2a02      	cmp	r2, #2
 80019e0:	d015      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x82>
 80019e2:	490f      	ldr	r1, [pc, #60]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e4:	2a03      	cmp	r2, #3
 80019e6:	bf08      	it	eq
 80019e8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019ea:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80019f2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019f4:	68d8      	ldr	r0, [r3, #12]
 80019f6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019fa:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019fe:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a00:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a02:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a04:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001a08:	fbb2 f0f0 	udiv	r0, r2, r0
 8001a0c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a10:	e7eb      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08008248 	.word	0x08008248
 8001a20:	007a1200 	.word	0x007a1200
 8001a24:	00f42400 	.word	0x00f42400

08001a28 <HAL_RCC_OscConfig>:
{
 8001a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	b918      	cbnz	r0, 8001a38 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001a30:	2001      	movs	r0, #1
}
 8001a32:	b003      	add	sp, #12
 8001a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a38:	4c92      	ldr	r4, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a3a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a40:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a46:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a4a:	d53d      	bpl.n	8001ac8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4c:	b11e      	cbz	r6, 8001a56 <HAL_RCC_OscConfig+0x2e>
 8001a4e:	2e0c      	cmp	r6, #12
 8001a50:	d166      	bne.n	8001b20 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a52:	2f01      	cmp	r7, #1
 8001a54:	d164      	bne.n	8001b20 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	0798      	lsls	r0, r3, #30
 8001a5a:	d502      	bpl.n	8001a62 <HAL_RCC_OscConfig+0x3a>
 8001a5c:	69ab      	ldr	r3, [r5, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0e6      	beq.n	8001a30 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	6a28      	ldr	r0, [r5, #32]
 8001a66:	0719      	lsls	r1, r3, #28
 8001a68:	bf56      	itet	pl
 8001a6a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001a6e:	6823      	ldrmi	r3, [r4, #0]
 8001a70:	091b      	lsrpl	r3, r3, #4
 8001a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a76:	4298      	cmp	r0, r3
 8001a78:	d93b      	bls.n	8001af2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7a:	f7ff ff45 	bl	8001908 <RCC_SetFlashLatencyFromMSIRange>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d1d6      	bne.n	8001a30 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6023      	str	r3, [r4, #0]
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	6a2a      	ldr	r2, [r5, #32]
 8001a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a92:	4313      	orrs	r3, r2
 8001a94:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	69ea      	ldr	r2, [r5, #28]
 8001a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001aa2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa4:	f7ff ff72 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001aa8:	68a3      	ldr	r3, [r4, #8]
 8001aaa:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x260>)
 8001aac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	40d8      	lsrs	r0, r3
 8001ab8:	4b74      	ldr	r3, [pc, #464]	; (8001c8c <HAL_RCC_OscConfig+0x264>)
 8001aba:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001abc:	4b74      	ldr	r3, [pc, #464]	; (8001c90 <HAL_RCC_OscConfig+0x268>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f7ff fcfc 	bl	80014bc <HAL_InitTick>
        if(status != HAL_OK)
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1b4      	bne.n	8001a32 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	07d8      	lsls	r0, r3, #31
 8001acc:	d45f      	bmi.n	8001b8e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	0799      	lsls	r1, r3, #30
 8001ad2:	f100 809e 	bmi.w	8001c12 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	682b      	ldr	r3, [r5, #0]
 8001ad8:	0718      	lsls	r0, r3, #28
 8001ada:	f100 80db 	bmi.w	8001c94 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	0759      	lsls	r1, r3, #29
 8001ae2:	f100 8101 	bmi.w	8001ce8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 816a 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001aee:	2000      	movs	r0, #0
 8001af0:	e79f      	b.n	8001a32 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6023      	str	r3, [r4, #0]
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b00:	4303      	orrs	r3, r0
 8001b02:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b04:	6863      	ldr	r3, [r4, #4]
 8001b06:	69ea      	ldr	r2, [r5, #28]
 8001b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b10:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b12:	2e00      	cmp	r6, #0
 8001b14:	d1c6      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b16:	f7ff fef7 	bl	8001908 <RCC_SetFlashLatencyFromMSIRange>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d0c2      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x7c>
 8001b1e:	e787      	b.n	8001a30 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b20:	69ab      	ldr	r3, [r5, #24]
 8001b22:	b31b      	cbz	r3, 8001b6c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fd0e 	bl	800154c <HAL_GetTick>
 8001b30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	079a      	lsls	r2, r3, #30
 8001b36:	d511      	bpl.n	8001b5c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	6023      	str	r3, [r4, #0]
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	6a2a      	ldr	r2, [r5, #32]
 8001b44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4c:	6863      	ldr	r3, [r4, #4]
 8001b4e:	69ea      	ldr	r2, [r5, #28]
 8001b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b58:	6063      	str	r3, [r4, #4]
 8001b5a:	e7b5      	b.n	8001ac8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fcf6 	bl	800154c <HAL_GetTick>
 8001b60:	eba0 0008 	sub.w	r0, r0, r8
 8001b64:	2802      	cmp	r0, #2
 8001b66:	d9e4      	bls.n	8001b32 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001b68:	2003      	movs	r0, #3
 8001b6a:	e762      	b.n	8001a32 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b74:	f7ff fcea 	bl	800154c <HAL_GetTick>
 8001b78:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	079b      	lsls	r3, r3, #30
 8001b7e:	d5a3      	bpl.n	8001ac8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b80:	f7ff fce4 	bl	800154c <HAL_GetTick>
 8001b84:	eba0 0008 	sub.w	r0, r0, r8
 8001b88:	2802      	cmp	r0, #2
 8001b8a:	d9f6      	bls.n	8001b7a <HAL_RCC_OscConfig+0x152>
 8001b8c:	e7ec      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b8e:	2e08      	cmp	r6, #8
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_OscConfig+0x172>
 8001b92:	2e0c      	cmp	r6, #12
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b96:	2f03      	cmp	r7, #3
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	039a      	lsls	r2, r3, #14
 8001b9e:	d596      	bpl.n	8001ace <HAL_RCC_OscConfig+0xa6>
 8001ba0:	686b      	ldr	r3, [r5, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d193      	bne.n	8001ace <HAL_RCC_OscConfig+0xa6>
 8001ba6:	e743      	b.n	8001a30 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	686b      	ldr	r3, [r5, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d110      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x1aa>
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fcc8 	bl	800154c <HAL_GetTick>
 8001bbc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	039b      	lsls	r3, r3, #14
 8001bc2:	d484      	bmi.n	8001ace <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcc2 	bl	800154c <HAL_GetTick>
 8001bc8:	eba0 0008 	sub.w	r0, r0, r8
 8001bcc:	2864      	cmp	r0, #100	; 0x64
 8001bce:	d9f6      	bls.n	8001bbe <HAL_RCC_OscConfig+0x196>
 8001bd0:	e7ca      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd6:	d104      	bne.n	8001be2 <HAL_RCC_OscConfig+0x1ba>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	e7e6      	b.n	8001bb0 <HAL_RCC_OscConfig+0x188>
 8001be2:	6822      	ldr	r2, [r4, #0]
 8001be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001be8:	6022      	str	r2, [r4, #0]
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fca9 	bl	800154c <HAL_GetTick>
 8001bfa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	0398      	lsls	r0, r3, #14
 8001c00:	f57f af65 	bpl.w	8001ace <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fca2 	bl	800154c <HAL_GetTick>
 8001c08:	eba0 0008 	sub.w	r0, r0, r8
 8001c0c:	2864      	cmp	r0, #100	; 0x64
 8001c0e:	d9f5      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1d4>
 8001c10:	e7aa      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c12:	2e04      	cmp	r6, #4
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
 8001c16:	2e0c      	cmp	r6, #12
 8001c18:	d110      	bne.n	8001c3c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c1a:	2f02      	cmp	r7, #2
 8001c1c:	d10e      	bne.n	8001c3c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	0559      	lsls	r1, r3, #21
 8001c22:	d503      	bpl.n	8001c2c <HAL_RCC_OscConfig+0x204>
 8001c24:	68eb      	ldr	r3, [r5, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f43f af02 	beq.w	8001a30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	692a      	ldr	r2, [r5, #16]
 8001c30:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001c34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c38:	6063      	str	r3, [r4, #4]
 8001c3a:	e74c      	b.n	8001ad6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	68eb      	ldr	r3, [r5, #12]
 8001c3e:	b17b      	cbz	r3, 8001c60 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc80 	bl	800154c <HAL_GetTick>
 8001c4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	055a      	lsls	r2, r3, #21
 8001c52:	d4eb      	bmi.n	8001c2c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fc7a 	bl	800154c <HAL_GetTick>
 8001c58:	1bc0      	subs	r0, r0, r7
 8001c5a:	2802      	cmp	r0, #2
 8001c5c:	d9f7      	bls.n	8001c4e <HAL_RCC_OscConfig+0x226>
 8001c5e:	e783      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c68:	f7ff fc70 	bl	800154c <HAL_GetTick>
 8001c6c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	055b      	lsls	r3, r3, #21
 8001c72:	f57f af30 	bpl.w	8001ad6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc69 	bl	800154c <HAL_GetTick>
 8001c7a:	1bc0      	subs	r0, r0, r7
 8001c7c:	2802      	cmp	r0, #2
 8001c7e:	d9f6      	bls.n	8001c6e <HAL_RCC_OscConfig+0x246>
 8001c80:	e772      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08008230 	.word	0x08008230
 8001c8c:	200000ec 	.word	0x200000ec
 8001c90:	200000f4 	.word	0x200000f4
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c94:	696b      	ldr	r3, [r5, #20]
 8001c96:	b19b      	cbz	r3, 8001cc0 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001c98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fc52 	bl	800154c <HAL_GetTick>
 8001ca8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001caa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cae:	079a      	lsls	r2, r3, #30
 8001cb0:	f53f af15 	bmi.w	8001ade <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fc4a 	bl	800154c <HAL_GetTick>
 8001cb8:	1bc0      	subs	r0, r0, r7
 8001cba:	2802      	cmp	r0, #2
 8001cbc:	d9f5      	bls.n	8001caa <HAL_RCC_OscConfig+0x282>
 8001cbe:	e753      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fc3e 	bl	800154c <HAL_GetTick>
 8001cd0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cd6:	079b      	lsls	r3, r3, #30
 8001cd8:	f57f af01 	bpl.w	8001ade <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc36 	bl	800154c <HAL_GetTick>
 8001ce0:	1bc0      	subs	r0, r0, r7
 8001ce2:	2802      	cmp	r0, #2
 8001ce4:	d9f5      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2aa>
 8001ce6:	e73f      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cea:	00df      	lsls	r7, r3, #3
 8001cec:	d429      	bmi.n	8001d42 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8001cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d00:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d04:	4f85      	ldr	r7, [pc, #532]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	05d8      	lsls	r0, r3, #23
 8001d0a:	d51d      	bpl.n	8001d48 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	68ab      	ldr	r3, [r5, #8]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d12b      	bne.n	8001d6a <HAL_RCC_OscConfig+0x342>
 8001d12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fc15 	bl	800154c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d26:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d28:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d2c:	079a      	lsls	r2, r3, #30
 8001d2e:	d542      	bpl.n	8001db6 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001d30:	f1b8 0f00 	cmp.w	r8, #0
 8001d34:	f43f aed7 	beq.w	8001ae6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d40:	e6d1      	b.n	8001ae6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	f04f 0800 	mov.w	r8, #0
 8001d46:	e7dd      	b.n	8001d04 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001d50:	f7ff fbfc 	bl	800154c <HAL_GetTick>
 8001d54:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	05d9      	lsls	r1, r3, #23
 8001d5a:	d4d7      	bmi.n	8001d0c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7ff fbf6 	bl	800154c <HAL_GetTick>
 8001d60:	eba0 0009 	sub.w	r0, r0, r9
 8001d64:	2802      	cmp	r0, #2
 8001d66:	d9f6      	bls.n	8001d56 <HAL_RCC_OscConfig+0x32e>
 8001d68:	e6fe      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x354>
 8001d6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001d7a:	e7ca      	b.n	8001d12 <HAL_RCC_OscConfig+0x2ea>
 8001d7c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001d88:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1c2      	bne.n	8001d1e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001d98:	f7ff fbd8 	bl	800154c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001da0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001da6:	079b      	lsls	r3, r3, #30
 8001da8:	d5c2      	bpl.n	8001d30 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fbcf 	bl	800154c <HAL_GetTick>
 8001dae:	1bc0      	subs	r0, r0, r7
 8001db0:	4548      	cmp	r0, r9
 8001db2:	d9f6      	bls.n	8001da2 <HAL_RCC_OscConfig+0x37a>
 8001db4:	e6d8      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff fbc9 	bl	800154c <HAL_GetTick>
 8001dba:	1bc0      	subs	r0, r0, r7
 8001dbc:	4548      	cmp	r0, r9
 8001dbe:	d9b3      	bls.n	8001d28 <HAL_RCC_OscConfig+0x300>
 8001dc0:	e6d2      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	f040 808f 	bne.w	8001ee6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001dc8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001dcc:	f003 0103 	and.w	r1, r3, #3
 8001dd0:	4291      	cmp	r1, r2
 8001dd2:	d124      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001dd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dda:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ddc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001de0:	d11d      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001de4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001dec:	d117      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dee:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001df0:	3a07      	subs	r2, #7
 8001df2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001df6:	bf18      	it	ne
 8001df8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e00:	0852      	lsrs	r2, r2, #1
 8001e02:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001e06:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e08:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e0e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001e10:	0852      	lsrs	r2, r2, #1
 8001e12:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001e16:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e18:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e1e:	2e0c      	cmp	r6, #12
 8001e20:	f43f ae06 	beq.w	8001a30 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	015f      	lsls	r7, r3, #5
 8001e28:	f53f ae02 	bmi.w	8001a30 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	00de      	lsls	r6, r3, #3
 8001e30:	f53f adfe 	bmi.w	8001a30 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001e3c:	f7ff fb86 	bl	800154c <HAL_GetTick>
 8001e40:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	0198      	lsls	r0, r3, #6
 8001e46:	d42f      	bmi.n	8001ea8 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	68e2      	ldr	r2, [r4, #12]
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001e50:	4313      	orrs	r3, r2
 8001e52:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e58:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001e60:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001e62:	0912      	lsrs	r2, r2, #4
 8001e64:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001e68:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e6a:	0852      	lsrs	r2, r2, #1
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001e72:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001e74:	0852      	lsrs	r2, r2, #1
 8001e76:	3a01      	subs	r2, #1
 8001e78:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e7c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e84:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e86:	68e3      	ldr	r3, [r4, #12]
 8001e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001e8e:	f7ff fb5d 	bl	800154c <HAL_GetTick>
 8001e92:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	0199      	lsls	r1, r3, #6
 8001e98:	f53f ae29 	bmi.w	8001aee <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fb56 	bl	800154c <HAL_GetTick>
 8001ea0:	1b40      	subs	r0, r0, r5
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	d9f6      	bls.n	8001e94 <HAL_RCC_OscConfig+0x46c>
 8001ea6:	e65f      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff fb50 	bl	800154c <HAL_GetTick>
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	2802      	cmp	r0, #2
 8001eb0:	d9c7      	bls.n	8001e42 <HAL_RCC_OscConfig+0x41a>
 8001eb2:	e659      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	019a      	lsls	r2, r3, #6
 8001eb8:	f53f ae19 	bmi.w	8001aee <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec4:	68e3      	ldr	r3, [r4, #12]
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eca:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001ecc:	f7ff fb3e 	bl	800154c <HAL_GetTick>
 8001ed0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	f53f ae0a 	bmi.w	8001aee <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fb37 	bl	800154c <HAL_GetTick>
 8001ede:	1b40      	subs	r0, r0, r5
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	d9f6      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
 8001ee4:	e640      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee6:	2e0c      	cmp	r6, #12
 8001ee8:	f43f ada2 	beq.w	8001a30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fb2a 	bl	800154c <HAL_GetTick>
 8001ef8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f02:	68e1      	ldr	r1, [r4, #12]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	e591      	b.n	8001a32 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb1d 	bl	800154c <HAL_GetTick>
 8001f12:	1b40      	subs	r0, r0, r5
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d9f0      	bls.n	8001efa <HAL_RCC_OscConfig+0x4d2>
 8001f18:	e626      	b.n	8001b68 <HAL_RCC_OscConfig+0x140>
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	f99d808c 	.word	0xf99d808c
 8001f24:	feeefffc 	.word	0xfeeefffc

08001f28 <HAL_RCC_ClockConfig>:
{
 8001f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f2e:	4604      	mov	r4, r0
 8001f30:	b910      	cbnz	r0, 8001f38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_RCC_ClockConfig+0x140>)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d32c      	bcc.n	8001f9e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	6821      	ldr	r1, [r4, #0]
 8001f46:	0788      	lsls	r0, r1, #30
 8001f48:	d434      	bmi.n	8001fb4 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	07c9      	lsls	r1, r1, #31
 8001f4c:	d43f      	bmi.n	8001fce <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4e:	6821      	ldr	r1, [r4, #0]
 8001f50:	078a      	lsls	r2, r1, #30
 8001f52:	d468      	bmi.n	8002026 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4a44      	ldr	r2, [pc, #272]	; (8002068 <HAL_RCC_ClockConfig+0x140>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	42ab      	cmp	r3, r5
 8001f5e:	d86f      	bhi.n	8002040 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	f011 0f04 	tst.w	r1, #4
 8001f64:	4d41      	ldr	r5, [pc, #260]	; (800206c <HAL_RCC_ClockConfig+0x144>)
 8001f66:	d177      	bne.n	8002058 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	070b      	lsls	r3, r1, #28
 8001f6a:	d506      	bpl.n	8001f7a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6c:	68ab      	ldr	r3, [r5, #8]
 8001f6e:	6922      	ldr	r2, [r4, #16]
 8001f70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f78:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f7a:	f7ff fd07 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001f7e:	68ab      	ldr	r3, [r5, #8]
 8001f80:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_RCC_ClockConfig+0x148>)
 8001f82:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	40d8      	lsrs	r0, r3
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_RCC_ClockConfig+0x14c>)
 8001f94:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_RCC_ClockConfig+0x150>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f7ff ba8f 	b.w	80014bc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f023 0307 	bic.w	r3, r3, #7
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d1bf      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xa>
 8001fb2:	e7c7      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	; (800206c <HAL_RCC_ClockConfig+0x144>)
 8001fb6:	68a0      	ldr	r0, [r4, #8]
 8001fb8:	6893      	ldr	r3, [r2, #8]
 8001fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbe:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	bf81      	itttt	hi
 8001fc2:	6893      	ldrhi	r3, [r2, #8]
 8001fc4:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8001fc8:	4303      	orrhi	r3, r0
 8001fca:	6093      	strhi	r3, [r2, #8]
 8001fcc:	e7bd      	b.n	8001f4a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	6862      	ldr	r2, [r4, #4]
 8001fd0:	4e26      	ldr	r6, [pc, #152]	; (800206c <HAL_RCC_ClockConfig+0x144>)
 8001fd2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	d11a      	bne.n	800200e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	d0a9      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	68b3      	ldr	r3, [r6, #8]
 8001fe0:	f023 0303 	bic.w	r3, r3, #3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001fe8:	f7ff fab0 	bl	800154c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ff0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	68b3      	ldr	r3, [r6, #8]
 8001ff4:	6862      	ldr	r2, [r4, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ffe:	d0a6      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7ff faa4 	bl	800154c <HAL_GetTick>
 8002004:	1bc0      	subs	r0, r0, r7
 8002006:	4540      	cmp	r0, r8
 8002008:	d9f3      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
 800200c:	e792      	b.n	8001f34 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	2a02      	cmp	r2, #2
 8002010:	d102      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002012:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002016:	e7e1      	b.n	8001fdc <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002018:	b912      	cbnz	r2, 8002020 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201a:	f013 0f02 	tst.w	r3, #2
 800201e:	e7dd      	b.n	8001fdc <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002020:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002024:	e7da      	b.n	8001fdc <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_RCC_ClockConfig+0x144>)
 8002028:	68a0      	ldr	r0, [r4, #8]
 800202a:	6893      	ldr	r3, [r2, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002032:	bf3f      	itttt	cc
 8002034:	6893      	ldrcc	r3, [r2, #8]
 8002036:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800203a:	4303      	orrcc	r3, r0
 800203c:	6093      	strcc	r3, [r2, #8]
 800203e:	e789      	b.n	8001f54 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f023 0307 	bic.w	r3, r3, #7
 8002046:	432b      	orrs	r3, r5
 8002048:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	6813      	ldr	r3, [r2, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	42ab      	cmp	r3, r5
 8002052:	f47f af6e 	bne.w	8001f32 <HAL_RCC_ClockConfig+0xa>
 8002056:	e783      	b.n	8001f60 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	68ab      	ldr	r3, [r5, #8]
 800205a:	68e2      	ldr	r2, [r4, #12]
 800205c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002060:	4313      	orrs	r3, r2
 8002062:	60ab      	str	r3, [r5, #8]
 8002064:	e780      	b.n	8001f68 <HAL_RCC_ClockConfig+0x40>
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	08008230 	.word	0x08008230
 8002074:	200000ec 	.word	0x200000ec
 8002078:	200000f4 	.word	0x200000f4

0800207c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x18>)
 800207e:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_RCC_GetPCLK1Freq+0x20>)
 800208a:	6810      	ldr	r0, [r2, #0]
 800208c:	f003 031f 	and.w	r3, r3, #31
}
 8002090:	40d8      	lsrs	r0, r3
 8002092:	4770      	bx	lr
 8002094:	40021000 	.word	0x40021000
 8002098:	08008240 	.word	0x08008240
 800209c:	200000ec 	.word	0x200000ec

080020a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020a2:	4a06      	ldr	r2, [pc, #24]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ae:	6810      	ldr	r0, [r2, #0]
 80020b0:	f003 031f 	and.w	r3, r3, #31
}
 80020b4:	40d8      	lsrs	r0, r3
 80020b6:	4770      	bx	lr
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08008240 	.word	0x08008240
 80020c0:	200000ec 	.word	0x200000ec

080020c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020c6:	4c42      	ldr	r4, [pc, #264]	; (80021d0 <RCCEx_PLLSAI1_Config+0x10c>)
 80020c8:	68e2      	ldr	r2, [r4, #12]
 80020ca:	0793      	lsls	r3, r2, #30
{
 80020cc:	4605      	mov	r5, r0
 80020ce:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020d0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020d2:	d029      	beq.n	8002128 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020d4:	68e2      	ldr	r2, [r4, #12]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	4282      	cmp	r2, r0
 80020dc:	d13c      	bne.n	8002158 <RCCEx_PLLSAI1_Config+0x94>
       ||
 80020de:	2a00      	cmp	r2, #0
 80020e0:	d03a      	beq.n	8002158 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020e2:	68e3      	ldr	r3, [r4, #12]
       ||
 80020e4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020ea:	3301      	adds	r3, #1
       ||
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d133      	bne.n	8002158 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020f6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f8:	f7ff fa28 	bl	800154c <HAL_GetTick>
 80020fc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	011a      	lsls	r2, r3, #4
 8002102:	d432      	bmi.n	800216a <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002104:	68aa      	ldr	r2, [r5, #8]
 8002106:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002108:	2e00      	cmp	r6, #0
 800210a:	d035      	beq.n	8002178 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800210c:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800210e:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002110:	d14d      	bne.n	80021ae <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002112:	6929      	ldr	r1, [r5, #16]
 8002114:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002118:	0849      	lsrs	r1, r1, #1
 800211a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800211e:	3901      	subs	r1, #1
 8002120:	4313      	orrs	r3, r2
 8002122:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002126:	e031      	b.n	800218c <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8002128:	2802      	cmp	r0, #2
 800212a:	d011      	beq.n	8002150 <RCCEx_PLLSAI1_Config+0x8c>
 800212c:	2803      	cmp	r0, #3
 800212e:	d015      	beq.n	800215c <RCCEx_PLLSAI1_Config+0x98>
 8002130:	2801      	cmp	r0, #1
 8002132:	d111      	bne.n	8002158 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	0797      	lsls	r7, r2, #30
 8002138:	d51d      	bpl.n	8002176 <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800213a:	68e2      	ldr	r2, [r4, #12]
 800213c:	6869      	ldr	r1, [r5, #4]
 800213e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002142:	3901      	subs	r1, #1
 8002144:	ea42 0300 	orr.w	r3, r2, r0
 8002148:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800214c:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 800214e:	e7cf      	b.n	80020f0 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002156:	d1f0      	bne.n	800213a <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8002158:	2001      	movs	r0, #1
 800215a:	e00c      	b.n	8002176 <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	0391      	lsls	r1, r2, #14
 8002160:	d4eb      	bmi.n	800213a <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002168:	e7f5      	b.n	8002156 <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800216a:	f7ff f9ef 	bl	800154c <HAL_GetTick>
 800216e:	1bc0      	subs	r0, r0, r7
 8002170:	2802      	cmp	r0, #2
 8002172:	d9c4      	bls.n	80020fe <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8002174:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	68e9      	ldr	r1, [r5, #12]
 800217c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002184:	0909      	lsrs	r1, r1, #4
 8002186:	4313      	orrs	r3, r2
 8002188:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800218c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002194:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002196:	f7ff f9d9 	bl	800154c <HAL_GetTick>
 800219a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	d510      	bpl.n	80021c4 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	69aa      	ldr	r2, [r5, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	6123      	str	r3, [r4, #16]
 80021aa:	2000      	movs	r0, #0
  return status;
 80021ac:	e7e3      	b.n	8002176 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021ae:	6969      	ldr	r1, [r5, #20]
 80021b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021b4:	0849      	lsrs	r1, r1, #1
 80021b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021ba:	3901      	subs	r1, #1
 80021bc:	4313      	orrs	r3, r2
 80021be:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80021c2:	e7e3      	b.n	800218c <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021c4:	f7ff f9c2 	bl	800154c <HAL_GetTick>
 80021c8:	1b80      	subs	r0, r0, r6
 80021ca:	2802      	cmp	r0, #2
 80021cc:	d9e6      	bls.n	800219c <RCCEx_PLLSAI1_Config+0xd8>
 80021ce:	e7d1      	b.n	8002174 <RCCEx_PLLSAI1_Config+0xb0>
 80021d0:	40021000 	.word	0x40021000

080021d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021d6:	4c3b      	ldr	r4, [pc, #236]	; (80022c4 <RCCEx_PLLSAI2_Config+0xf0>)
 80021d8:	68e2      	ldr	r2, [r4, #12]
 80021da:	0793      	lsls	r3, r2, #30
{
 80021dc:	4605      	mov	r5, r0
 80021de:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80021e0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021e2:	d026      	beq.n	8002232 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80021e4:	68e2      	ldr	r2, [r4, #12]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	4282      	cmp	r2, r0
 80021ec:	d139      	bne.n	8002262 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d037      	beq.n	8002262 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80021f2:	68e3      	ldr	r3, [r4, #12]
       ||
 80021f4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80021f6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021fa:	3301      	adds	r3, #1
       ||
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d130      	bne.n	8002262 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002208:	f7ff f9a0 	bl	800154c <HAL_GetTick>
 800220c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	d42f      	bmi.n	8002274 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002214:	68a9      	ldr	r1, [r5, #8]
 8002216:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002218:	b39e      	cbz	r6, 8002282 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800221a:	6963      	ldr	r3, [r4, #20]
 800221c:	692a      	ldr	r2, [r5, #16]
 800221e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002228:	3a01      	subs	r2, #1
 800222a:	430b      	orrs	r3, r1
 800222c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002230:	e031      	b.n	8002296 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002232:	2802      	cmp	r0, #2
 8002234:	d011      	beq.n	800225a <RCCEx_PLLSAI2_Config+0x86>
 8002236:	2803      	cmp	r0, #3
 8002238:	d015      	beq.n	8002266 <RCCEx_PLLSAI2_Config+0x92>
 800223a:	2801      	cmp	r0, #1
 800223c:	d111      	bne.n	8002262 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	0797      	lsls	r7, r2, #30
 8002242:	d51d      	bpl.n	8002280 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002244:	68e2      	ldr	r2, [r4, #12]
 8002246:	6869      	ldr	r1, [r5, #4]
 8002248:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800224c:	3901      	subs	r1, #1
 800224e:	ea42 0300 	orr.w	r3, r2, r0
 8002252:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002256:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002258:	e7d2      	b.n	8002200 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002260:	d1f0      	bne.n	8002244 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 8002262:	2001      	movs	r0, #1
 8002264:	e00c      	b.n	8002280 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	0391      	lsls	r1, r2, #14
 800226a:	d4eb      	bmi.n	8002244 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800226c:	6822      	ldr	r2, [r4, #0]
 800226e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002272:	e7f5      	b.n	8002260 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002274:	f7ff f96a 	bl	800154c <HAL_GetTick>
 8002278:	1bc0      	subs	r0, r0, r7
 800227a:	2802      	cmp	r0, #2
 800227c:	d9c7      	bls.n	800220e <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 800227e:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002282:	6963      	ldr	r3, [r4, #20]
 8002284:	68ea      	ldr	r2, [r5, #12]
 8002286:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	0912      	lsrs	r2, r2, #4
 8002290:	430b      	orrs	r3, r1
 8002292:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002296:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80022a0:	f7ff f954 	bl	800154c <HAL_GetTick>
 80022a4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	d505      	bpl.n	80022b8 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80022ac:	6963      	ldr	r3, [r4, #20]
 80022ae:	696a      	ldr	r2, [r5, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	6163      	str	r3, [r4, #20]
 80022b4:	2000      	movs	r0, #0
  return status;
 80022b6:	e7e3      	b.n	8002280 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022b8:	f7ff f948 	bl	800154c <HAL_GetTick>
 80022bc:	1b80      	subs	r0, r0, r6
 80022be:	2802      	cmp	r0, #2
 80022c0:	d9f1      	bls.n	80022a6 <RCCEx_PLLSAI2_Config+0xd2>
 80022c2:	e7dc      	b.n	800227e <RCCEx_PLLSAI2_Config+0xaa>
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80022c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022cc:	6806      	ldr	r6, [r0, #0]
 80022ce:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80022d2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022d4:	d009      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80022d6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80022d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80022dc:	d022      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022de:	d813      	bhi.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022e0:	b331      	cbz	r1, 8002330 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80022e2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80022e6:	d02a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e8:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	04d8      	lsls	r0, r3, #19
 80022ee:	d509      	bpl.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80022f0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80022f2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80022f6:	d02c      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80022f8:	d826      	bhi.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80022fa:	b381      	cbz	r1, 800235e <HAL_RCCEx_PeriphCLKConfig+0x96>
 80022fc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002300:	d072      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002302:	2601      	movs	r6, #1
 8002304:	4635      	mov	r5, r6
 8002306:	e039      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002308:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800230c:	d1ec      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800230e:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002310:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002312:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002316:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800231a:	430b      	orrs	r3, r1
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002320:	2600      	movs	r6, #0
 8002322:	e7e2      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002324:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002326:	68d3      	ldr	r3, [r2, #12]
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800232e:	e7ee      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002330:	3004      	adds	r0, #4
 8002332:	f7ff fec7 	bl	80020c4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002336:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002338:	2800      	cmp	r0, #0
 800233a:	d1d6      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22>
 800233c:	e7e7      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800233e:	2100      	movs	r1, #0
 8002340:	3020      	adds	r0, #32
 8002342:	f7ff ff47 	bl	80021d4 <RCCEx_PLLSAI2_Config>
 8002346:	e7f6      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002348:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800234c:	d1d9      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800234e:	4635      	mov	r5, r6
 8002350:	e009      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002352:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002354:	68d3      	ldr	r3, [r2, #12]
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	60d3      	str	r3, [r2, #12]
      break;
 800235c:	e7f7      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800235e:	1d20      	adds	r0, r4, #4
 8002360:	f7ff feb0 	bl	80020c4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002364:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002366:	2d00      	cmp	r5, #0
 8002368:	d144      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800236a:	4a25      	ldr	r2, [pc, #148]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800236c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800236e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002372:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002376:	430b      	orrs	r3, r1
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	0399      	lsls	r1, r3, #14
 8002380:	f140 815d 	bpl.w	800263e <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002384:	4f1e      	ldr	r7, [pc, #120]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002388:	00da      	lsls	r2, r3, #3
 800238a:	d435      	bmi.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002392:	65bb      	str	r3, [r7, #88]	; 0x58
 8002394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800239e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023a6:	f8d9 3000 	ldr.w	r3, [r9]
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80023b2:	f7ff f8cb 	bl	800154c <HAL_GetTick>
 80023b6:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023b8:	f8d9 3000 	ldr.w	r3, [r9]
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	d523      	bpl.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 80023c0:	bb4d      	cbnz	r5, 8002416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023c6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80023ca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80023ce:	f040 810e 	bne.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023d6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80023da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023e4:	4635      	mov	r5, r6
 80023e6:	e016      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e8:	2100      	movs	r1, #0
 80023ea:	f104 0020 	add.w	r0, r4, #32
 80023ee:	f7ff fef1 	bl	80021d4 <RCCEx_PLLSAI2_Config>
 80023f2:	e7b7      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80023f4:	462e      	mov	r6, r5
 80023f6:	e7c1      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80023f8:	f04f 0800 	mov.w	r8, #0
 80023fc:	e7d1      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002408:	f7ff f8a0 	bl	800154c <HAL_GetTick>
 800240c:	eba0 000a 	sub.w	r0, r0, sl
 8002410:	2802      	cmp	r0, #2
 8002412:	d9d1      	bls.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002414:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002416:	f1b8 0f00 	cmp.w	r8, #0
 800241a:	d003      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002422:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	07da      	lsls	r2, r3, #31
 8002428:	d508      	bpl.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	499b      	ldr	r1, [pc, #620]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800242c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800242e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002432:	f022 0203 	bic.w	r2, r2, #3
 8002436:	4302      	orrs	r2, r0
 8002438:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800243c:	079f      	lsls	r7, r3, #30
 800243e:	d508      	bpl.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002440:	4995      	ldr	r1, [pc, #596]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002442:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002444:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002448:	f022 020c 	bic.w	r2, r2, #12
 800244c:	4302      	orrs	r2, r0
 800244e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002452:	075e      	lsls	r6, r3, #29
 8002454:	d508      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002456:	4990      	ldr	r1, [pc, #576]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002458:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800245a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800245e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002462:	4302      	orrs	r2, r0
 8002464:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002468:	0718      	lsls	r0, r3, #28
 800246a:	d508      	bpl.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800246c:	498a      	ldr	r1, [pc, #552]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800246e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002470:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002474:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002478:	4302      	orrs	r2, r0
 800247a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800247e:	06d9      	lsls	r1, r3, #27
 8002480:	d508      	bpl.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002482:	4985      	ldr	r1, [pc, #532]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002484:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002486:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800248a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800248e:	4302      	orrs	r2, r0
 8002490:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002494:	069a      	lsls	r2, r3, #26
 8002496:	d508      	bpl.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002498:	497f      	ldr	r1, [pc, #508]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800249a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800249c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024a4:	4302      	orrs	r2, r0
 80024a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024aa:	059f      	lsls	r7, r3, #22
 80024ac:	d508      	bpl.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ae:	497a      	ldr	r1, [pc, #488]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024b0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80024b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024b6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80024ba:	4302      	orrs	r2, r0
 80024bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024c0:	055e      	lsls	r6, r3, #21
 80024c2:	d508      	bpl.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c4:	4974      	ldr	r1, [pc, #464]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80024c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024cc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80024d0:	4302      	orrs	r2, r0
 80024d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d6:	0658      	lsls	r0, r3, #25
 80024d8:	d508      	bpl.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024da:	496f      	ldr	r1, [pc, #444]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80024de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024e6:	4302      	orrs	r2, r0
 80024e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ec:	0619      	lsls	r1, r3, #24
 80024ee:	d508      	bpl.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024f0:	4969      	ldr	r1, [pc, #420]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80024f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024f8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80024fc:	4302      	orrs	r2, r0
 80024fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002502:	05da      	lsls	r2, r3, #23
 8002504:	d508      	bpl.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002506:	4964      	ldr	r1, [pc, #400]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800250a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800250e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002512:	4302      	orrs	r2, r0
 8002514:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002518:	049b      	lsls	r3, r3, #18
 800251a:	d510      	bpl.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251c:	4a5e      	ldr	r2, [pc, #376]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800251e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002520:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002524:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002528:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800252a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800252e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002532:	f040 8086 	bne.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002536:	68d3      	ldr	r3, [r2, #12]
 8002538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800253c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	031f      	lsls	r7, r3, #12
 8002542:	d50f      	bpl.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002546:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800254c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002550:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002552:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002556:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800255a:	d17e      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255c:	68d3      	ldr	r3, [r2, #12]
 800255e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002562:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	035e      	lsls	r6, r3, #13
 8002568:	d50f      	bpl.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800256a:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800256c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800256e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002572:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002576:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002578:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002580:	d176      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002582:	68d3      	ldr	r3, [r2, #12]
 8002584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002588:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	0458      	lsls	r0, r3, #17
 800258e:	d512      	bpl.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002590:	4941      	ldr	r1, [pc, #260]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002592:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002594:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002598:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800259c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800259e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025a6:	d16e      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025a8:	2102      	movs	r1, #2
 80025aa:	1d20      	adds	r0, r4, #4
 80025ac:	f7ff fd8a 	bl	80020c4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80025b0:	2800      	cmp	r0, #0
 80025b2:	bf18      	it	ne
 80025b4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	0411      	lsls	r1, r2, #16
 80025ba:	d508      	bpl.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025bc:	4936      	ldr	r1, [pc, #216]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025be:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80025c0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c8:	4303      	orrs	r3, r0
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ce:	03d3      	lsls	r3, r2, #15
 80025d0:	d509      	bpl.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025d2:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025d4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80025d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e0:	430b      	orrs	r3, r1
 80025e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80025e6:	4628      	mov	r0, r5
 80025e8:	b002      	add	sp, #8
 80025ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ee:	429a      	cmp	r2, r3
 80025f0:	f43f aeef 	beq.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80025f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002608:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800260c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002610:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002616:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800261a:	f57f aeda 	bpl.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 800261e:	f7fe ff95 	bl	800154c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002626:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800262c:	0799      	lsls	r1, r3, #30
 800262e:	f53f aed0 	bmi.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe ff8b 	bl	800154c <HAL_GetTick>
 8002636:	1b40      	subs	r0, r0, r5
 8002638:	4548      	cmp	r0, r9
 800263a:	d9f5      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800263c:	e6ea      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800263e:	4635      	mov	r5, r6
 8002640:	e6f0      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002642:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002646:	f47f af7a 	bne.w	800253e <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800264a:	2101      	movs	r1, #1
 800264c:	1d20      	adds	r0, r4, #4
 800264e:	f7ff fd39 	bl	80020c4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002652:	2800      	cmp	r0, #0
 8002654:	bf18      	it	ne
 8002656:	4605      	movne	r5, r0
 8002658:	e771      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800265a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800265e:	d181      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002660:	2101      	movs	r1, #1
 8002662:	1d20      	adds	r0, r4, #4
 8002664:	f7ff fd2e 	bl	80020c4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002668:	2800      	cmp	r0, #0
 800266a:	bf18      	it	ne
 800266c:	4605      	movne	r5, r0
 800266e:	e779      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002670:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002674:	d189      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002676:	2101      	movs	r1, #1
 8002678:	1d20      	adds	r0, r4, #4
 800267a:	f7ff fd23 	bl	80020c4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800267e:	2800      	cmp	r0, #0
 8002680:	bf18      	it	ne
 8002682:	4605      	movne	r5, r0
 8002684:	e781      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002686:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800268a:	d194      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800268c:	2102      	movs	r1, #2
 800268e:	f104 0020 	add.w	r0, r4, #32
 8002692:	f7ff fd9f 	bl	80021d4 <RCCEx_PLLSAI2_Config>
 8002696:	e78b      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002698:	40021000 	.word	0x40021000

0800269c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80026a0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a2:	6921      	ldr	r1, [r4, #16]
 80026a4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a8:	69c0      	ldr	r0, [r0, #28]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	6961      	ldr	r1, [r4, #20]
 80026ae:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b0:	498f      	ldr	r1, [pc, #572]	; (80028f0 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026b2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b4:	4029      	ands	r1, r5
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68e1      	ldr	r1, [r4, #12]
 80026be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026c6:	4a8b      	ldr	r2, [pc, #556]	; (80028f4 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026c8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026ca:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026cc:	bf1c      	itt	ne
 80026ce:	6a22      	ldrne	r2, [r4, #32]
 80026d0:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026dc:	4a86      	ldr	r2, [pc, #536]	; (80028f8 <UART_SetConfig+0x25c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d117      	bne.n	8002712 <UART_SetConfig+0x76>
 80026e2:	4b86      	ldr	r3, [pc, #536]	; (80028fc <UART_SetConfig+0x260>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	f200 80cf 	bhi.w	8002892 <UART_SetConfig+0x1f6>
 80026f4:	4a82      	ldr	r2, [pc, #520]	; (8002900 <UART_SetConfig+0x264>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026fc:	f040 8099 	bne.w	8002832 <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002700:	2b08      	cmp	r3, #8
 8002702:	d822      	bhi.n	800274a <UART_SetConfig+0xae>
 8002704:	e8df f003 	tbb	[pc, r3]
 8002708:	2193c8d9 	.word	0x2193c8d9
 800270c:	212121ce 	.word	0x212121ce
 8002710:	dd          	.byte	0xdd
 8002711:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002712:	4a7c      	ldr	r2, [pc, #496]	; (8002904 <UART_SetConfig+0x268>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <UART_SetConfig+0x8a>
 8002718:	4b78      	ldr	r3, [pc, #480]	; (80028fc <UART_SetConfig+0x260>)
 800271a:	4a7b      	ldr	r2, [pc, #492]	; (8002908 <UART_SetConfig+0x26c>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	e7e7      	b.n	80026f6 <UART_SetConfig+0x5a>
 8002726:	4a79      	ldr	r2, [pc, #484]	; (800290c <UART_SetConfig+0x270>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d119      	bne.n	8002760 <UART_SetConfig+0xc4>
 800272c:	4b73      	ldr	r3, [pc, #460]	; (80028fc <UART_SetConfig+0x260>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002736:	2b20      	cmp	r3, #32
 8002738:	f000 80b7 	beq.w	80028aa <UART_SetConfig+0x20e>
 800273c:	d807      	bhi.n	800274e <UART_SetConfig+0xb2>
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b8 	beq.w	80028b4 <UART_SetConfig+0x218>
 8002744:	2b10      	cmp	r3, #16
 8002746:	f000 80aa 	beq.w	800289e <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274a:	2001      	movs	r0, #1
 800274c:	e04e      	b.n	80027ec <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274e:	2b30      	cmp	r3, #48	; 0x30
 8002750:	d1fb      	bne.n	800274a <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002752:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002756:	f000 80b4 	beq.w	80028c2 <UART_SetConfig+0x226>
 800275a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800275e:	e083      	b.n	8002868 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002760:	4a6b      	ldr	r2, [pc, #428]	; (8002910 <UART_SetConfig+0x274>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10f      	bne.n	8002786 <UART_SetConfig+0xea>
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <UART_SetConfig+0x260>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	f000 809a 	beq.w	80028aa <UART_SetConfig+0x20e>
 8002776:	d804      	bhi.n	8002782 <UART_SetConfig+0xe6>
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 809b 	beq.w	80028b4 <UART_SetConfig+0x218>
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	e7e1      	b.n	8002746 <UART_SetConfig+0xaa>
 8002782:	2bc0      	cmp	r3, #192	; 0xc0
 8002784:	e7e4      	b.n	8002750 <UART_SetConfig+0xb4>
 8002786:	4a63      	ldr	r2, [pc, #396]	; (8002914 <UART_SetConfig+0x278>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d112      	bne.n	80027b2 <UART_SetConfig+0x116>
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <UART_SetConfig+0x260>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279a:	f000 8086 	beq.w	80028aa <UART_SetConfig+0x20e>
 800279e:	d805      	bhi.n	80027ac <UART_SetConfig+0x110>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8087 	beq.w	80028b4 <UART_SetConfig+0x218>
 80027a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027aa:	e7cc      	b.n	8002746 <UART_SetConfig+0xaa>
 80027ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b0:	e7ce      	b.n	8002750 <UART_SetConfig+0xb4>
 80027b2:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <UART_SetConfig+0x258>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d1c8      	bne.n	800274a <UART_SetConfig+0xae>
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <UART_SetConfig+0x260>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c6:	d015      	beq.n	80027f4 <UART_SetConfig+0x158>
 80027c8:	d806      	bhi.n	80027d8 <UART_SetConfig+0x13c>
 80027ca:	b15b      	cbz	r3, 80027e4 <UART_SetConfig+0x148>
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d1bb      	bne.n	800274a <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 80027d2:	f7ff f8db 	bl	800198c <HAL_RCC_GetSysClockFreq>
        break;
 80027d6:	e007      	b.n	80027e8 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027dc:	d1b5      	bne.n	800274a <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 80027de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027e2:	e008      	b.n	80027f6 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e4:	f7ff fc4a 	bl	800207c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80027e8:	b928      	cbnz	r0, 80027f6 <UART_SetConfig+0x15a>
 80027ea:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ec:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80027ee:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80027f4:	4848      	ldr	r0, [pc, #288]	; (8002918 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80027fc:	4283      	cmp	r3, r0
 80027fe:	d8a4      	bhi.n	800274a <UART_SetConfig+0xae>
 8002800:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002804:	d8a1      	bhi.n	800274a <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002806:	0851      	lsrs	r1, r2, #1
 8002808:	2500      	movs	r5, #0
 800280a:	468c      	mov	ip, r1
 800280c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002810:	4629      	mov	r1, r5
 8002812:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002816:	462b      	mov	r3, r5
 8002818:	4660      	mov	r0, ip
 800281a:	f7fe fa15 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800281e:	4b3f      	ldr	r3, [pc, #252]	; (800291c <UART_SetConfig+0x280>)
 8002820:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002824:	429a      	cmp	r2, r3
 8002826:	d890      	bhi.n	800274a <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	60d8      	str	r0, [r3, #12]
 800282c:	e7dd      	b.n	80027ea <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 800282e:	483a      	ldr	r0, [pc, #232]	; (8002918 <UART_SetConfig+0x27c>)
 8002830:	e047      	b.n	80028c2 <UART_SetConfig+0x226>
    switch (clocksource)
 8002832:	2b08      	cmp	r3, #8
 8002834:	d889      	bhi.n	800274a <UART_SetConfig+0xae>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <UART_SetConfig+0x1a0>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	08002861 	.word	0x08002861
 8002840:	08002887 	.word	0x08002887
 8002844:	080028b1 	.word	0x080028b1
 8002848:	0800274b 	.word	0x0800274b
 800284c:	0800288d 	.word	0x0800288d
 8002850:	0800274b 	.word	0x0800274b
 8002854:	0800274b 	.word	0x0800274b
 8002858:	0800274b 	.word	0x0800274b
 800285c:	0800275b 	.word	0x0800275b
        pclk = HAL_RCC_GetPCLK1Freq();
 8002860:	f7ff fc0c 	bl	800207c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002864:	2800      	cmp	r0, #0
 8002866:	d0c0      	beq.n	80027ea <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002868:	6862      	ldr	r2, [r4, #4]
 800286a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800286e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002872:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002876:	f1a3 0110 	sub.w	r1, r3, #16
 800287a:	4291      	cmp	r1, r2
 800287c:	f63f af65 	bhi.w	800274a <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	60d3      	str	r3, [r2, #12]
 8002884:	e7b1      	b.n	80027ea <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002886:	f7ff fc0b 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
        break;
 800288a:	e7eb      	b.n	8002864 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 800288c:	f7ff f87e 	bl	800198c <HAL_RCC_GetSysClockFreq>
        break;
 8002890:	e7e8      	b.n	8002864 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002892:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002896:	d1f6      	bne.n	8002886 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002898:	f7ff fc02 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
        break;
 800289c:	e00f      	b.n	80028be <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028a2:	d1f3      	bne.n	800288c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 80028a4:	f7ff f872 	bl	800198c <HAL_RCC_GetSysClockFreq>
        break;
 80028a8:	e009      	b.n	80028be <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028ae:	d0be      	beq.n	800282e <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 80028b0:	4819      	ldr	r0, [pc, #100]	; (8002918 <UART_SetConfig+0x27c>)
 80028b2:	e7d9      	b.n	8002868 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028b8:	d1d2      	bne.n	8002860 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ba:	f7ff fbdf 	bl	800207c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80028be:	2800      	cmp	r0, #0
 80028c0:	d093      	beq.n	80027ea <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028c2:	6862      	ldr	r2, [r4, #4]
 80028c4:	0853      	lsrs	r3, r2, #1
 80028c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80028ca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ce:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80028d2:	f1a3 0110 	sub.w	r1, r3, #16
 80028d6:	4291      	cmp	r1, r2
 80028d8:	f63f af37 	bhi.w	800274a <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028dc:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80028e0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028e2:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
 80028ec:	e77d      	b.n	80027ea <UART_SetConfig+0x14e>
 80028ee:	bf00      	nop
 80028f0:	efff69f3 	.word	0xefff69f3
 80028f4:	40008000 	.word	0x40008000
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40021000 	.word	0x40021000
 8002900:	08008278 	.word	0x08008278
 8002904:	40004400 	.word	0x40004400
 8002908:	0800827b 	.word	0x0800827b
 800290c:	40004800 	.word	0x40004800
 8002910:	40004c00 	.word	0x40004c00
 8002914:	40005000 	.word	0x40005000
 8002918:	00f42400 	.word	0x00f42400
 800291c:	000ffcff 	.word	0x000ffcff

08002920 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002920:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002922:	07da      	lsls	r2, r3, #31
{
 8002924:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002926:	d506      	bpl.n	8002936 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002928:	6801      	ldr	r1, [r0, #0]
 800292a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800292c:	684a      	ldr	r2, [r1, #4]
 800292e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002932:	4322      	orrs	r2, r4
 8002934:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002936:	079c      	lsls	r4, r3, #30
 8002938:	d506      	bpl.n	8002948 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800293a:	6801      	ldr	r1, [r0, #0]
 800293c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800293e:	684a      	ldr	r2, [r1, #4]
 8002940:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002944:	4322      	orrs	r2, r4
 8002946:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002948:	0759      	lsls	r1, r3, #29
 800294a:	d506      	bpl.n	800295a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800294c:	6801      	ldr	r1, [r0, #0]
 800294e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002950:	684a      	ldr	r2, [r1, #4]
 8002952:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002956:	4322      	orrs	r2, r4
 8002958:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800295a:	071a      	lsls	r2, r3, #28
 800295c:	d506      	bpl.n	800296c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800295e:	6801      	ldr	r1, [r0, #0]
 8002960:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002962:	684a      	ldr	r2, [r1, #4]
 8002964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002968:	4322      	orrs	r2, r4
 800296a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800296c:	06dc      	lsls	r4, r3, #27
 800296e:	d506      	bpl.n	800297e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002970:	6801      	ldr	r1, [r0, #0]
 8002972:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002974:	688a      	ldr	r2, [r1, #8]
 8002976:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800297a:	4322      	orrs	r2, r4
 800297c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800297e:	0699      	lsls	r1, r3, #26
 8002980:	d506      	bpl.n	8002990 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002982:	6801      	ldr	r1, [r0, #0]
 8002984:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002986:	688a      	ldr	r2, [r1, #8]
 8002988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298c:	4322      	orrs	r2, r4
 800298e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002990:	065a      	lsls	r2, r3, #25
 8002992:	d50f      	bpl.n	80029b4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002994:	6801      	ldr	r1, [r0, #0]
 8002996:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002998:	684a      	ldr	r2, [r1, #4]
 800299a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800299e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029a4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029a6:	d105      	bne.n	80029b4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029a8:	684a      	ldr	r2, [r1, #4]
 80029aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80029ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80029b0:	4322      	orrs	r2, r4
 80029b2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	d506      	bpl.n	80029c6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029b8:	6802      	ldr	r2, [r0, #0]
 80029ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80029bc:	6853      	ldr	r3, [r2, #4]
 80029be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80029c2:	430b      	orrs	r3, r1
 80029c4:	6053      	str	r3, [r2, #4]
  }
}
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80029d0:	4604      	mov	r4, r0
 80029d2:	460e      	mov	r6, r1
 80029d4:	4615      	mov	r5, r2
 80029d6:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	69d3      	ldr	r3, [r2, #28]
 80029dc:	ea36 0303 	bics.w	r3, r6, r3
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	42ab      	cmp	r3, r5
 80029e8:	d001      	beq.n	80029ee <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2000      	movs	r0, #0
 80029ec:	e025      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	f1b8 3fff 	cmp.w	r8, #4294967295
 80029f2:	d0f2      	beq.n	80029da <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f4:	f7fe fdaa 	bl	800154c <HAL_GetTick>
 80029f8:	1bc0      	subs	r0, r0, r7
 80029fa:	4540      	cmp	r0, r8
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	d802      	bhi.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002a00:	f1b8 0f00 	cmp.w	r8, #0
 8002a04:	d11b      	bne.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a06:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0e:	e840 3200 	strex	r2, r3, [r0]
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	d1f7      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	f100 0308 	add.w	r3, r0, #8
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	f100 0108 	add.w	r1, r0, #8
 8002a26:	e841 3200 	strex	r2, r3, [r1]
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d1f3      	bne.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a32:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002a34:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002a38:	2003      	movs	r0, #3
}
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	075a      	lsls	r2, r3, #29
 8002a42:	d5c9      	bpl.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a44:	69c3      	ldr	r3, [r0, #28]
 8002a46:	051b      	lsls	r3, r3, #20
 8002a48:	d5c6      	bpl.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a4e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	e840 3200 	strex	r2, r3, [r0]
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d1f7      	bne.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	f100 0308 	add.w	r3, r0, #8
 8002a64:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6c:	f100 0108 	add.w	r1, r0, #8
 8002a70:	e841 3200 	strex	r2, r3, [r1]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d1f3      	bne.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a7e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002a82:	e7d7      	b.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x6c>

08002a84 <HAL_UART_Transmit>:
{
 8002a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002a88:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002a8c:	2b20      	cmp	r3, #32
{
 8002a8e:	4604      	mov	r4, r0
 8002a90:	460e      	mov	r6, r1
 8002a92:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002a94:	d14e      	bne.n	8002b34 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8002a96:	2900      	cmp	r1, #0
 8002a98:	d04a      	beq.n	8002b30 <HAL_UART_Transmit+0xac>
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	d048      	beq.n	8002b30 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002a9e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d046      	beq.n	8002b34 <HAL_UART_Transmit+0xb0>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab4:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fd49 	bl	800154c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aba:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002abc:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002ac4:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002ac6:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aca:	d103      	bne.n	8002ad4 <HAL_UART_Transmit+0x50>
 8002acc:	6922      	ldr	r2, [r4, #16]
 8002ace:	b90a      	cbnz	r2, 8002ad4 <HAL_UART_Transmit+0x50>
 8002ad0:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002ad2:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002ada:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	b93a      	cbnz	r2, 8002af6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff ff6d 	bl	80029c8 <UART_WaitOnFlagUntilTimeout>
 8002aee:	b950      	cbnz	r0, 8002b06 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	2320      	movs	r3, #32
 8002af2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002af4:	e008      	b.n	8002b08 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	2200      	movs	r2, #0
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	4620      	mov	r0, r4
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	f7ff ff63 	bl	80029c8 <UART_WaitOnFlagUntilTimeout>
 8002b02:	9b03      	ldr	r3, [sp, #12]
 8002b04:	b118      	cbz	r0, 8002b0e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8002b06:	2003      	movs	r0, #3
}
 8002b08:	b004      	add	sp, #16
 8002b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002b10:	b95e      	cbnz	r6, 8002b2a <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b12:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b1a:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002b1c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002b20:	3a01      	subs	r2, #1
 8002b22:	b292      	uxth	r2, r2
 8002b24:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002b28:	e7d7      	b.n	8002ada <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2a:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002b2e:	e7f4      	b.n	8002b1a <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002b30:	2001      	movs	r0, #1
 8002b32:	e7e9      	b.n	8002b08 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002b34:	2002      	movs	r0, #2
 8002b36:	e7e7      	b.n	8002b08 <HAL_UART_Transmit+0x84>

08002b38 <UART_CheckIdleState>:
{
 8002b38:	b530      	push	{r4, r5, lr}
 8002b3a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	2500      	movs	r5, #0
{
 8002b3e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002b44:	f7fe fd02 	bl	800154c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b48:	6822      	ldr	r2, [r4, #0]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002b4e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b50:	d415      	bmi.n	8002b7e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	0752      	lsls	r2, r2, #29
 8002b58:	d509      	bpl.n	8002b6e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002b5e:	9200      	str	r2, [sp, #0]
 8002b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b64:	2200      	movs	r2, #0
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff ff2e 	bl	80029c8 <UART_WaitOnFlagUntilTimeout>
 8002b6c:	b9a0      	cbnz	r0, 8002b98 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002b6e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b72:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002b74:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b78:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002b7c:	e00d      	b.n	8002b9a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b7e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	9003      	str	r0, [sp, #12]
 8002b86:	462a      	mov	r2, r5
 8002b88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff1b 	bl	80029c8 <UART_WaitOnFlagUntilTimeout>
 8002b92:	9b03      	ldr	r3, [sp, #12]
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d0dc      	beq.n	8002b52 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002b98:	2003      	movs	r0, #3
}
 8002b9a:	b005      	add	sp, #20
 8002b9c:	bd30      	pop	{r4, r5, pc}

08002b9e <HAL_UART_Init>:
{
 8002b9e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	b340      	cbz	r0, 8002bf6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002ba6:	b91b      	cbnz	r3, 8002bb0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002ba8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002bac:	f7fe fbb0 	bl	8001310 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002bb0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002bb2:	2324      	movs	r3, #36	; 0x24
 8002bb4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff fd6c 	bl	800269c <UART_SetConfig>
 8002bc4:	2801      	cmp	r0, #1
 8002bc6:	d016      	beq.n	8002bf6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bca:	b113      	cbz	r3, 8002bd2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff fea7 	bl	8002920 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002bea:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002bf2:	f7ff bfa1 	b.w	8002b38 <UART_CheckIdleState>
}
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	bd10      	pop	{r4, pc}
	...

08002bfc <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <ai_mnetwork_handle+0x18>)
 8002bfe:	b120      	cbz	r0, 8002c0a <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8002c00:	4298      	cmp	r0, r3
 8002c02:	bf0c      	ite	eq
 8002c04:	4618      	moveq	r0, r3
 8002c06:	2000      	movne	r0, #0
 8002c08:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8002c0a:	681a      	ldr	r2, [r3, #0]
            return inst;
 8002c0c:	2a00      	cmp	r2, #0
 8002c0e:	bf08      	it	eq
 8002c10:	4618      	moveq	r0, r3
}
 8002c12:	4770      	bx	lr
 8002c14:	20000904 	.word	0x20000904

08002c18 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8002c18:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	b160      	cbz	r0, 8002c38 <ai_mnetwork_is_valid.constprop.0+0x20>
 8002c1e:	f7fd fb27 	bl	8000270 <strlen>
 8002c22:	2807      	cmp	r0, #7
 8002c24:	4602      	mov	r2, r0
 8002c26:	d107      	bne.n	8002c38 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8002c28:	4804      	ldr	r0, [pc, #16]	; (8002c3c <ai_mnetwork_is_valid.constprop.0+0x24>)
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	f003 fb6c 	bl	8006308 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002c30:	fab0 f080 	clz	r0, r0
 8002c34:	0940      	lsrs	r0, r0, #5
}
 8002c36:	bd10      	pop	{r4, pc}
    return false;
 8002c38:	2000      	movs	r0, #0
 8002c3a:	e7fc      	b.n	8002c36 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8002c3c:	08008288 	.word	0x08008288

08002c40 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8002c40:	b510      	push	{r4, lr}
 8002c42:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8002c44:	f7ff ffe8 	bl	8002c18 <ai_mnetwork_is_valid.constprop.0>
 8002c48:	b920      	cbnz	r0, 8002c54 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8002c4a:	2c00      	cmp	r4, #0
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <ai_mnetwork_find+0x18>)
 8002c4e:	bf18      	it	ne
 8002c50:	2000      	movne	r0, #0
}
 8002c52:	bd10      	pop	{r4, pc}
            return entry->name;
 8002c54:	4800      	ldr	r0, [pc, #0]	; (8002c58 <ai_mnetwork_find+0x18>)
 8002c56:	e7fc      	b.n	8002c52 <ai_mnetwork_find+0x12>
 8002c58:	08008288 	.word	0x08008288

08002c5c <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8002c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c5e:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002c60:	2000      	movs	r0, #0
{
 8002c62:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002c64:	f7ff ffca 	bl	8002bfc <ai_mnetwork_handle>
{
 8002c68:	460d      	mov	r5, r1

    if (!inst) {
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	b1e0      	cbz	r0, 8002ca8 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f7ff ffd2 	bl	8002c18 <ai_mnetwork_is_valid.constprop.0>
 8002c74:	9901      	ldr	r1, [sp, #4]
 8002c76:	b910      	cbnz	r0, 8002c7e <ai_mnetwork_create+0x22>
 8002c78:	2214      	movs	r2, #20
 8002c7a:	2310      	movs	r3, #16
 8002c7c:	e00d      	b.n	8002c9a <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f000 f886 	bl	8002d90 <ai_network_create>
 8002c84:	b2c2      	uxtb	r2, r0
 8002c86:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8002c8a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8002c8e:	d104      	bne.n	8002c9a <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <ai_mnetwork_create+0x50>)
 8002c92:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8002c94:	6829      	ldr	r1, [r5, #0]
 8002c96:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8002c98:	602c      	str	r4, [r5, #0]
        return err;
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f362 0007 	bfi	r0, r2, #0, #8
 8002ca0:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	2231      	movs	r2, #49	; 0x31
 8002caa:	e7e6      	b.n	8002c7a <ai_mnetwork_create+0x1e>
 8002cac:	08008290 	.word	0x08008290

08002cb0 <ai_mnetwork_init>:
        return err;
}

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8002cb0:	b530      	push	{r4, r5, lr}
 8002cb2:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002cb4:	f7ff ffa2 	bl	8002bfc <ai_mnetwork_handle>
    if (inn) {
 8002cb8:	4604      	mov	r4, r0
 8002cba:	b168      	cbz	r0, 8002cd8 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8002cbc:	6803      	ldr	r3, [r0, #0]
 8002cbe:	4668      	mov	r0, sp
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8002cca:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002ccc:	42aa      	cmp	r2, r5
 8002cce:	dc05      	bgt.n	8002cdc <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	6860      	ldr	r0, [r4, #4]
 8002cd4:	4669      	mov	r1, sp
 8002cd6:	4798      	blx	r3
    }
    else
        return false;
}
 8002cd8:	b00f      	add	sp, #60	; 0x3c
 8002cda:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	4629      	mov	r1, r5
 8002ce0:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8002ce4:	a803      	add	r0, sp, #12
 8002ce6:	f000 f98b 	bl	8003000 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002cea:	3501      	adds	r5, #1
 8002cec:	e7eb      	b.n	8002cc6 <ai_mnetwork_init+0x16>
	...

08002cf0 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	b0a2      	sub	sp, #136	; 0x88
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8002cf8:	f000 fb7c 	bl	80033f4 <ai_platform_context_acquire>
 8002cfc:	4604      	mov	r4, r0

  if (report && net_ctx)
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	d035      	beq.n	8002d6e <ai_network_get_report+0x7e>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d030      	beq.n	8002d68 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 8002d06:	2278      	movs	r2, #120	; 0x78
 8002d08:	2100      	movs	r1, #0
 8002d0a:	a804      	add	r0, sp, #16
 8002d0c:	f003 faf4 	bl	80062f8 <memset>
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <ai_network_get_report+0x84>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <ai_network_get_report+0x88>)
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <ai_network_get_report+0x8c>)
 8002d1a:	9302      	str	r3, [sp, #8]
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <ai_network_get_report+0x90>)
 8002d1e:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8002d20:	f000 fa4c 	bl	80031bc <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8002d24:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8002d26:	f000 fa81 	bl	800322c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <ai_network_get_report+0x94>)
 8002d2c:	9306      	str	r3, [sp, #24]
 8002d2e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002d32:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8002d36:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8002d38:	f000 fac4 	bl	80032c4 <ai_platform_api_get_version>
 8002d3c:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8002d3e:	f000 fb0d 	bl	800335c <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8002d42:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002d46:	2300      	movs	r3, #0
 8002d48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8002d4c:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <ai_network_get_report+0x98>)
 8002d50:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8002d52:	4669      	mov	r1, sp
 8002d54:	4630      	mov	r0, r6
 8002d56:	f000 fc01 	bl	800355c <ai_platform_api_get_network_report>
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	b120      	cbz	r0, 8002d68 <ai_network_get_report+0x78>

    *report = r;
 8002d5e:	2288      	movs	r2, #136	; 0x88
 8002d60:	4669      	mov	r1, sp
 8002d62:	4628      	mov	r0, r5
 8002d64:	f003 fb68 	bl	8006438 <memcpy>
    return true;
  }
  return false;
}
 8002d68:	4620      	mov	r0, r4
 8002d6a:	b022      	add	sp, #136	; 0x88
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8002d6e:	462c      	mov	r4, r5
 8002d70:	e7fa      	b.n	8002d68 <ai_network_get_report+0x78>
 8002d72:	bf00      	nop
 8002d74:	08008288 	.word	0x08008288
 8002d78:	080082bc 	.word	0x080082bc
 8002d7c:	080082dd 	.word	0x080082dd
 8002d80:	080082f6 	.word	0x080082f6
 8002d84:	08008212 	.word	0x08008212
 8002d88:	a1facade 	.word	0xa1facade

08002d8c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8002d8c:	f000 bb72 	b.w	8003474 <ai_platform_network_get_error>

08002d90 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002d90:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8002d92:	2305      	movs	r3, #5
 8002d94:	2200      	movs	r2, #0
 8002d96:	e9cd 3200 	strd	r3, r2, [sp]
 8002d9a:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <ai_network_create+0x18>)
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f000 fe9b 	bl	8003ad8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002da2:	b003      	add	sp, #12
 8002da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002da8:	20000574 	.word	0x20000574

08002dac <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8002dac:	f000 bf6a 	b.w	8003c84 <ai_platform_network_destroy>

08002db0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db4:	4607      	mov	r7, r0
 8002db6:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002db8:	f000 ffd0 	bl	8003d5c <ai_platform_network_init>
  if (!net_ctx) return false;
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d050      	beq.n	8002e64 <ai_network_init+0xb4>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002dc2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8002ea4 <ai_network_init+0xf4>
 8002dc6:	4632      	mov	r2, r6
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f000 f92c 	bl	8003028 <ai_platform_get_weights_map>
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d048      	beq.n	8002e68 <ai_network_init+0xb8>
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <ai_network_init+0xd0>)
 8002dd8:	6813      	ldr	r3, [r2, #0]
 8002dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dde:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002de0:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8002de4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <ai_network_init+0xd4>)
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002df0:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 8002df2:	f503 6158 	add.w	r1, r3, #3456	; 0xd80
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 8002df6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <ai_network_init+0xd8>)
 8002dfc:	6811      	ldr	r1, [r2, #0]
 8002dfe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002e02:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 8002e04:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8002e08:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <ai_network_init+0xdc>)
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 8002e0e:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002e12:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 8002e14:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002e18:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002e1c:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002e1e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002ea8 <ai_network_init+0xf8>
 8002e22:	4632      	mov	r2, r6
 8002e24:	2101      	movs	r1, #1
 8002e26:	4640      	mov	r0, r8
 8002e28:	f000 f952 	bl	80030d0 <ai_platform_get_activations_map>
 8002e2c:	4606      	mov	r6, r0
 8002e2e:	b308      	cbz	r0, 8002e74 <ai_network_init+0xc4>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002e30:	f8d8 3000 	ldr.w	r3, [r8]
 8002e34:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <ai_network_init+0xe0>)
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002e36:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002e3a:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <ai_network_init+0xe4>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002e3c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <ai_network_init+0xe8>)
 8002e42:	f103 010c 	add.w	r1, r3, #12
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8002e46:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <ai_network_init+0xec>)
 8002e4c:	336c      	adds	r3, #108	; 0x6c
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8002e4e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8002e52:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <ai_network_init+0xf0>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8002e54:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8002e58:	4638      	mov	r0, r7
 8002e5a:	f001 f86d 	bl	8003f38 <ai_platform_network_post_init>
 8002e5e:	4030      	ands	r0, r6
 8002e60:	4005      	ands	r5, r0
 8002e62:	b2e8      	uxtb	r0, r5

  return ok;
}
 8002e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002e68:	2212      	movs	r2, #18
 8002e6a:	2130      	movs	r1, #48	; 0x30
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 fb6f 	bl	8003550 <ai_platform_network_set_error>
  return false;
 8002e72:	e7d4      	b.n	8002e1e <ai_network_init+0x6e>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002e74:	2213      	movs	r2, #19
 8002e76:	2130      	movs	r1, #48	; 0x30
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 fb69 	bl	8003550 <ai_platform_network_set_error>
  return false;
 8002e7e:	e7eb      	b.n	8002e58 <ai_network_init+0xa8>
 8002e80:	20000518 	.word	0x20000518
 8002e84:	200004a4 	.word	0x200004a4
 8002e88:	2000042c 	.word	0x2000042c
 8002e8c:	200003b8 	.word	0x200003b8
 8002e90:	200005dc 	.word	0x200005dc
 8002e94:	20000400 	.word	0x20000400
 8002e98:	20000478 	.word	0x20000478
 8002e9c:	200004ec 	.word	0x200004ec
 8002ea0:	20000564 	.word	0x20000564
 8002ea4:	200009c8 	.word	0x200009c8
 8002ea8:	200009c4 	.word	0x200009c4

08002eac <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8002eac:	f001 b8cc 	b.w	8004048 <ai_platform_network_process>

08002eb0 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f001 b8c9 	b.w	8004048 <ai_platform_network_process>
	...

08002eb8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8002eb8:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8002eba:	4603      	mov	r3, r0
{
 8002ebc:	b085      	sub	sp, #20
  if (!params) return false;
 8002ebe:	b170      	cbz	r0, 8002ede <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8002ec0:	4c08      	ldr	r4, [pc, #32]	; (8002ee4 <ai_network_data_params_get+0x2c>)
 8002ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec6:	466a      	mov	r2, sp
 8002ec8:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002ecc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002ed0:	ad02      	add	r5, sp, #8
 8002ed2:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f94d 	bl	8003178 <ai_platform_bind_network_params>
}
 8002ede:	b005      	add	sp, #20
 8002ee0:	bd30      	pop	{r4, r5, pc}
 8002ee2:	bf00      	nop
 8002ee4:	08008180 	.word	0x08008180

08002ee8 <arm_mat_init_f32>:
 8002ee8:	8001      	strh	r1, [r0, #0]
 8002eea:	8042      	strh	r2, [r0, #2]
 8002eec:	6043      	str	r3, [r0, #4]
 8002eee:	4770      	bx	lr

08002ef0 <arm_cos_f32>:
 8002ef0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002f78 <arm_cos_f32+0x88>
 8002ef4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002ef8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002efc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f0c:	d504      	bpl.n	8002f18 <arm_cos_f32+0x28>
 8002f0e:	ee17 3a90 	vmov	r3, s15
 8002f12:	3b01      	subs	r3, #1
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002f7c <arm_cos_f32+0x8c>
 8002f20:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002f24:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002f28:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002f2c:	ee17 3a90 	vmov	r3, s15
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f36:	d21a      	bcs.n	8002f6e <arm_cos_f32+0x7e>
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <arm_cos_f32+0x90>)
 8002f48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002f4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002f50:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002f54:	ed93 7a00 	vldr	s14, [r3]
 8002f58:	edd2 6a00 	vldr	s13, [r2]
 8002f5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002f60:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002f6c:	4770      	bx	lr
 8002f6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f72:	2101      	movs	r1, #1
 8002f74:	2300      	movs	r3, #0
 8002f76:	e7e6      	b.n	8002f46 <arm_cos_f32+0x56>
 8002f78:	3e22f983 	.word	0x3e22f983
 8002f7c:	44000000 	.word	0x44000000
 8002f80:	080092d0 	.word	0x080092d0

08002f84 <ai_buffer_get_size>:
 8002f84:	b378      	cbz	r0, 8002fe6 <ai_buffer_get_size+0x62>
 8002f86:	b410      	push	{r4}
 8002f88:	6803      	ldr	r3, [r0, #0]
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <ai_buffer_get_size+0x64>)
 8002f8c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d01e      	beq.n	8002fd6 <ai_buffer_get_size+0x52>
 8002f98:	6984      	ldr	r4, [r0, #24]
 8002f9a:	6862      	ldr	r2, [r4, #4]
 8002f9c:	7d03      	ldrb	r3, [r0, #20]
 8002f9e:	6941      	ldr	r1, [r0, #20]
 8002fa0:	f1a3 0301 	sub.w	r3, r3, #1
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8002fae:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8002fb2:	da0b      	bge.n	8002fcc <ai_buffer_get_size+0x48>
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <ai_buffer_get_size+0x3a>
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d007      	beq.n	8002fcc <ai_buffer_get_size+0x48>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4298      	cmp	r0, r3
 8002fc6:	fb01 f202 	mul.w	r2, r1, r2
 8002fca:	d1f3      	bne.n	8002fb4 <ai_buffer_get_size+0x30>
 8002fcc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	d0de      	beq.n	8002f98 <ai_buffer_get_size+0x14>
 8002fda:	6984      	ldr	r4, [r0, #24]
 8002fdc:	6863      	ldr	r3, [r4, #4]
 8002fde:	331f      	adds	r3, #31
 8002fe0:	f023 021f 	bic.w	r2, r3, #31
 8002fe4:	e7da      	b.n	8002f9c <ai_buffer_get_size+0x18>
 8002fe6:	4770      	bx	lr
 8002fe8:	000400c0 	.word	0x000400c0

08002fec <ai_buffer_array_sane>:
 8002fec:	b138      	cbz	r0, 8002ffe <ai_buffer_array_sane+0x12>
 8002fee:	6843      	ldr	r3, [r0, #4]
 8002ff0:	b123      	cbz	r3, 8002ffc <ai_buffer_array_sane+0x10>
 8002ff2:	8840      	ldrh	r0, [r0, #2]
 8002ff4:	3800      	subs	r0, #0
 8002ff6:	bf18      	it	ne
 8002ff8:	2001      	movne	r0, #1
 8002ffa:	4770      	bx	lr
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	4770      	bx	lr

08003000 <ai_buffer_array_item_set_address>:
 8003000:	b150      	cbz	r0, 8003018 <ai_buffer_array_item_set_address+0x18>
 8003002:	6843      	ldr	r3, [r0, #4]
 8003004:	b14b      	cbz	r3, 800301a <ai_buffer_array_item_set_address+0x1a>
 8003006:	8840      	ldrh	r0, [r0, #2]
 8003008:	b900      	cbnz	r0, 800300c <ai_buffer_array_item_set_address+0xc>
 800300a:	4770      	bx	lr
 800300c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003010:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003014:	2001      	movs	r0, #1
 8003016:	604a      	str	r2, [r1, #4]
 8003018:	4770      	bx	lr
 800301a:	4618      	mov	r0, r3
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <_ai_platform_acquire_crc>:
 8003020:	2001      	movs	r0, #1
 8003022:	4770      	bx	lr

08003024 <_ai_platform_release_crc>:
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop

08003028 <ai_platform_get_weights_map>:
 8003028:	2a00      	cmp	r2, #0
 800302a:	d037      	beq.n	800309c <ai_platform_get_weights_map+0x74>
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	4604      	mov	r4, r0
 8003030:	b1a0      	cbz	r0, 800305c <ai_platform_get_weights_map+0x34>
 8003032:	460f      	mov	r7, r1
 8003034:	b191      	cbz	r1, 800305c <ai_platform_get_weights_map+0x34>
 8003036:	4b25      	ldr	r3, [pc, #148]	; (80030cc <ai_platform_get_weights_map+0xa4>)
 8003038:	6810      	ldr	r0, [r2, #0]
 800303a:	4298      	cmp	r0, r3
 800303c:	4615      	mov	r5, r2
 800303e:	d00f      	beq.n	8003060 <ai_platform_get_weights_map+0x38>
 8003040:	6855      	ldr	r5, [r2, #4]
 8003042:	b15d      	cbz	r5, 800305c <ai_platform_get_weights_map+0x34>
 8003044:	682e      	ldr	r6, [r5, #0]
 8003046:	429e      	cmp	r6, r3
 8003048:	d02a      	beq.n	80030a0 <ai_platform_get_weights_map+0x78>
 800304a:	f1a1 0001 	sub.w	r0, r1, #1
 800304e:	6025      	str	r5, [r4, #0]
 8003050:	fab0 f080 	clz	r0, r0
 8003054:	0940      	lsrs	r0, r0, #5
 8003056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003058:	42a7      	cmp	r7, r4
 800305a:	d034      	beq.n	80030c6 <ai_platform_get_weights_map+0x9e>
 800305c:	2000      	movs	r0, #0
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	1d10      	adds	r0, r2, #4
 8003062:	f7ff ffc3 	bl	8002fec <ai_buffer_array_sane>
 8003066:	2800      	cmp	r0, #0
 8003068:	d0f8      	beq.n	800305c <ai_platform_get_weights_map+0x34>
 800306a:	88eb      	ldrh	r3, [r5, #6]
 800306c:	429f      	cmp	r7, r3
 800306e:	d1f5      	bne.n	800305c <ai_platform_get_weights_map+0x34>
 8003070:	f04f 0e00 	mov.w	lr, #0
 8003074:	1f23      	subs	r3, r4, #4
 8003076:	4670      	mov	r0, lr
 8003078:	68aa      	ldr	r2, [r5, #8]
 800307a:	eb02 0c0e 	add.w	ip, r2, lr
 800307e:	f10e 0e1c 	add.w	lr, lr, #28
 8003082:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003086:	b124      	cbz	r4, 8003092 <ai_platform_get_weights_map+0x6a>
 8003088:	3001      	adds	r0, #1
 800308a:	4287      	cmp	r7, r0
 800308c:	f843 4f04 	str.w	r4, [r3, #4]!
 8003090:	d1f2      	bne.n	8003078 <ai_platform_get_weights_map+0x50>
 8003092:	1a38      	subs	r0, r7, r0
 8003094:	fab0 f080 	clz	r0, r0
 8003098:	0940      	lsrs	r0, r0, #5
 800309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309c:	2000      	movs	r0, #0
 800309e:	4770      	bx	lr
 80030a0:	1f23      	subs	r3, r4, #4
 80030a2:	4628      	mov	r0, r5
 80030a4:	2400      	movs	r4, #0
 80030a6:	e000      	b.n	80030aa <ai_platform_get_weights_map+0x82>
 80030a8:	4614      	mov	r4, r2
 80030aa:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80030ae:	42b2      	cmp	r2, r6
 80030b0:	d0d2      	beq.n	8003058 <ai_platform_get_weights_map+0x30>
 80030b2:	f843 2f04 	str.w	r2, [r3, #4]!
 80030b6:	1c62      	adds	r2, r4, #1
 80030b8:	4297      	cmp	r7, r2
 80030ba:	d1f5      	bne.n	80030a8 <ai_platform_get_weights_map+0x80>
 80030bc:	3402      	adds	r4, #2
 80030be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80030c2:	42b3      	cmp	r3, r6
 80030c4:	d1ca      	bne.n	800305c <ai_platform_get_weights_map+0x34>
 80030c6:	2001      	movs	r0, #1
 80030c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	a1facade 	.word	0xa1facade

080030d0 <ai_platform_get_activations_map>:
 80030d0:	2a00      	cmp	r2, #0
 80030d2:	d038      	beq.n	8003146 <ai_platform_get_activations_map+0x76>
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	4604      	mov	r4, r0
 80030d8:	b1a0      	cbz	r0, 8003104 <ai_platform_get_activations_map+0x34>
 80030da:	460f      	mov	r7, r1
 80030dc:	b191      	cbz	r1, 8003104 <ai_platform_get_activations_map+0x34>
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <ai_platform_get_activations_map+0xa4>)
 80030e0:	6810      	ldr	r0, [r2, #0]
 80030e2:	4298      	cmp	r0, r3
 80030e4:	4615      	mov	r5, r2
 80030e6:	d00f      	beq.n	8003108 <ai_platform_get_activations_map+0x38>
 80030e8:	6a15      	ldr	r5, [r2, #32]
 80030ea:	b15d      	cbz	r5, 8003104 <ai_platform_get_activations_map+0x34>
 80030ec:	682e      	ldr	r6, [r5, #0]
 80030ee:	429e      	cmp	r6, r3
 80030f0:	d02b      	beq.n	800314a <ai_platform_get_activations_map+0x7a>
 80030f2:	f1a1 0001 	sub.w	r0, r1, #1
 80030f6:	6025      	str	r5, [r4, #0]
 80030f8:	fab0 f080 	clz	r0, r0
 80030fc:	0940      	lsrs	r0, r0, #5
 80030fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003100:	42a7      	cmp	r7, r4
 8003102:	d035      	beq.n	8003170 <ai_platform_get_activations_map+0xa0>
 8003104:	2000      	movs	r0, #0
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003108:	f102 000c 	add.w	r0, r2, #12
 800310c:	f7ff ff6e 	bl	8002fec <ai_buffer_array_sane>
 8003110:	2800      	cmp	r0, #0
 8003112:	d0f7      	beq.n	8003104 <ai_platform_get_activations_map+0x34>
 8003114:	89eb      	ldrh	r3, [r5, #14]
 8003116:	429f      	cmp	r7, r3
 8003118:	d1f4      	bne.n	8003104 <ai_platform_get_activations_map+0x34>
 800311a:	f04f 0e00 	mov.w	lr, #0
 800311e:	1f23      	subs	r3, r4, #4
 8003120:	4670      	mov	r0, lr
 8003122:	692a      	ldr	r2, [r5, #16]
 8003124:	eb02 0c0e 	add.w	ip, r2, lr
 8003128:	f10e 0e1c 	add.w	lr, lr, #28
 800312c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003130:	b124      	cbz	r4, 800313c <ai_platform_get_activations_map+0x6c>
 8003132:	3001      	adds	r0, #1
 8003134:	4287      	cmp	r7, r0
 8003136:	f843 4f04 	str.w	r4, [r3, #4]!
 800313a:	d1f2      	bne.n	8003122 <ai_platform_get_activations_map+0x52>
 800313c:	1a38      	subs	r0, r7, r0
 800313e:	fab0 f080 	clz	r0, r0
 8003142:	0940      	lsrs	r0, r0, #5
 8003144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003146:	2000      	movs	r0, #0
 8003148:	4770      	bx	lr
 800314a:	1f23      	subs	r3, r4, #4
 800314c:	4628      	mov	r0, r5
 800314e:	2400      	movs	r4, #0
 8003150:	e000      	b.n	8003154 <ai_platform_get_activations_map+0x84>
 8003152:	4614      	mov	r4, r2
 8003154:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003158:	42b2      	cmp	r2, r6
 800315a:	d0d1      	beq.n	8003100 <ai_platform_get_activations_map+0x30>
 800315c:	f843 2f04 	str.w	r2, [r3, #4]!
 8003160:	1c62      	adds	r2, r4, #1
 8003162:	4297      	cmp	r7, r2
 8003164:	d1f5      	bne.n	8003152 <ai_platform_get_activations_map+0x82>
 8003166:	3402      	adds	r4, #2
 8003168:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800316c:	42b3      	cmp	r3, r6
 800316e:	d1c9      	bne.n	8003104 <ai_platform_get_activations_map+0x34>
 8003170:	2001      	movs	r0, #1
 8003172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003174:	a1facade 	.word	0xa1facade

08003178 <ai_platform_bind_network_params>:
 8003178:	b1a0      	cbz	r0, 80031a4 <ai_platform_bind_network_params+0x2c>
 800317a:	b1b1      	cbz	r1, 80031aa <ai_platform_bind_network_params+0x32>
 800317c:	b1c2      	cbz	r2, 80031b0 <ai_platform_bind_network_params+0x38>
 800317e:	b410      	push	{r4}
 8003180:	4603      	mov	r3, r0
 8003182:	4c0d      	ldr	r4, [pc, #52]	; (80031b8 <ai_platform_bind_network_params+0x40>)
 8003184:	f843 4b04 	str.w	r4, [r3], #4
 8003188:	f100 0c0c 	add.w	ip, r0, #12
 800318c:	c903      	ldmia	r1, {r0, r1}
 800318e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003196:	e88c 0003 	stmia.w	ip, {r0, r1}
 800319a:	2301      	movs	r3, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	4603      	mov	r3, r0
 80031a6:	4618      	mov	r0, r3
 80031a8:	4770      	bx	lr
 80031aa:	460b      	mov	r3, r1
 80031ac:	4618      	mov	r0, r3
 80031ae:	4770      	bx	lr
 80031b0:	4613      	mov	r3, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	a1facade 	.word	0xa1facade

080031bc <ai_platform_runtime_get_revision>:
 80031bc:	b508      	push	{r3, lr}
 80031be:	f7ff ff2f 	bl	8003020 <_ai_platform_acquire_crc>
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <ai_platform_runtime_get_revision+0x58>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d010      	beq.n	80031f2 <ai_platform_runtime_get_revision+0x36>
 80031d0:	4a11      	ldr	r2, [pc, #68]	; (8003218 <ai_platform_runtime_get_revision+0x5c>)
 80031d2:	2301      	movs	r3, #1
 80031d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80031d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1fb      	bne.n	80031d8 <ai_platform_runtime_get_revision+0x1c>
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <ai_platform_runtime_get_revision+0x60>)
 80031e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80031e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <ai_platform_runtime_get_revision+0x64>)
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d00c      	beq.n	800320a <ai_platform_runtime_get_revision+0x4e>
 80031f0:	e7fe      	b.n	80031f0 <ai_platform_runtime_get_revision+0x34>
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <ai_platform_runtime_get_revision+0x68>)
 80031f4:	2301      	movs	r3, #1
 80031f6:	6093      	str	r3, [r2, #8]
 80031f8:	6893      	ldr	r3, [r2, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1fc      	bne.n	80031f8 <ai_platform_runtime_get_revision+0x3c>
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <ai_platform_runtime_get_revision+0x60>)
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <ai_platform_runtime_get_revision+0x64>)
 8003206:	429a      	cmp	r2, r3
 8003208:	d103      	bne.n	8003212 <ai_platform_runtime_get_revision+0x56>
 800320a:	f7ff ff0b 	bl	8003024 <_ai_platform_release_crc>
 800320e:	4806      	ldr	r0, [pc, #24]	; (8003228 <ai_platform_runtime_get_revision+0x6c>)
 8003210:	bd08      	pop	{r3, pc}
 8003212:	e7fe      	b.n	8003212 <ai_platform_runtime_get_revision+0x56>
 8003214:	e0042000 	.word	0xe0042000
 8003218:	58024000 	.word	0x58024000
 800321c:	f407a5c2 	.word	0xf407a5c2
 8003220:	b5e8b5cd 	.word	0xb5e8b5cd
 8003224:	40023000 	.word	0x40023000
 8003228:	08009ad4 	.word	0x08009ad4

0800322c <ai_platform_runtime_get_version>:
 800322c:	b500      	push	{lr}
 800322e:	b083      	sub	sp, #12
 8003230:	f7ff fef6 	bl	8003020 <_ai_platform_acquire_crc>
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <ai_platform_runtime_get_version+0x80>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d010      	beq.n	8003264 <ai_platform_runtime_get_version+0x38>
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <ai_platform_runtime_get_version+0x84>)
 8003244:	2301      	movs	r3, #1
 8003246:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800324a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1fb      	bne.n	800324a <ai_platform_runtime_get_version+0x1e>
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <ai_platform_runtime_get_version+0x88>)
 8003254:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003258:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <ai_platform_runtime_get_version+0x8c>)
 800325e:	429a      	cmp	r2, r3
 8003260:	d00c      	beq.n	800327c <ai_platform_runtime_get_version+0x50>
 8003262:	e7fe      	b.n	8003262 <ai_platform_runtime_get_version+0x36>
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <ai_platform_runtime_get_version+0x90>)
 8003266:	2301      	movs	r3, #1
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	6893      	ldr	r3, [r2, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1fc      	bne.n	800326a <ai_platform_runtime_get_version+0x3e>
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <ai_platform_runtime_get_version+0x88>)
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <ai_platform_runtime_get_version+0x8c>)
 8003278:	429a      	cmp	r2, r3
 800327a:	d115      	bne.n	80032a8 <ai_platform_runtime_get_version+0x7c>
 800327c:	f7ff fed2 	bl	8003024 <_ai_platform_release_crc>
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <ai_platform_runtime_get_version+0x94>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2000      	movs	r0, #0
 8003286:	b2da      	uxtb	r2, r3
 8003288:	f362 0007 	bfi	r0, r2, #0, #8
 800328c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003290:	f362 200f 	bfi	r0, r2, #8, #8
 8003294:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003298:	f362 4017 	bfi	r0, r2, #16, #8
 800329c:	0e1b      	lsrs	r3, r3, #24
 800329e:	f363 601f 	bfi	r0, r3, #24, #8
 80032a2:	b003      	add	sp, #12
 80032a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032a8:	e7fe      	b.n	80032a8 <ai_platform_runtime_get_version+0x7c>
 80032aa:	bf00      	nop
 80032ac:	e0042000 	.word	0xe0042000
 80032b0:	58024000 	.word	0x58024000
 80032b4:	f407a5c2 	.word	0xf407a5c2
 80032b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80032bc:	40023000 	.word	0x40023000
 80032c0:	08009ad8 	.word	0x08009ad8

080032c4 <ai_platform_api_get_version>:
 80032c4:	b500      	push	{lr}
 80032c6:	b083      	sub	sp, #12
 80032c8:	f7ff feaa 	bl	8003020 <_ai_platform_acquire_crc>
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <ai_platform_api_get_version+0x80>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d010      	beq.n	80032fc <ai_platform_api_get_version+0x38>
 80032da:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <ai_platform_api_get_version+0x84>)
 80032dc:	2301      	movs	r3, #1
 80032de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80032e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1fb      	bne.n	80032e2 <ai_platform_api_get_version+0x1e>
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <ai_platform_api_get_version+0x88>)
 80032ec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80032f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <ai_platform_api_get_version+0x8c>)
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d00c      	beq.n	8003314 <ai_platform_api_get_version+0x50>
 80032fa:	e7fe      	b.n	80032fa <ai_platform_api_get_version+0x36>
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <ai_platform_api_get_version+0x90>)
 80032fe:	2301      	movs	r3, #1
 8003300:	6093      	str	r3, [r2, #8]
 8003302:	6893      	ldr	r3, [r2, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1fc      	bne.n	8003302 <ai_platform_api_get_version+0x3e>
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <ai_platform_api_get_version+0x88>)
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <ai_platform_api_get_version+0x8c>)
 8003310:	429a      	cmp	r2, r3
 8003312:	d115      	bne.n	8003340 <ai_platform_api_get_version+0x7c>
 8003314:	f7ff fe86 	bl	8003024 <_ai_platform_release_crc>
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <ai_platform_api_get_version+0x94>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2000      	movs	r0, #0
 800331e:	b2da      	uxtb	r2, r3
 8003320:	f362 0007 	bfi	r0, r2, #0, #8
 8003324:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003328:	f362 200f 	bfi	r0, r2, #8, #8
 800332c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003330:	f362 4017 	bfi	r0, r2, #16, #8
 8003334:	0e1b      	lsrs	r3, r3, #24
 8003336:	f363 601f 	bfi	r0, r3, #24, #8
 800333a:	b003      	add	sp, #12
 800333c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003340:	e7fe      	b.n	8003340 <ai_platform_api_get_version+0x7c>
 8003342:	bf00      	nop
 8003344:	e0042000 	.word	0xe0042000
 8003348:	58024000 	.word	0x58024000
 800334c:	f407a5c2 	.word	0xf407a5c2
 8003350:	b5e8b5cd 	.word	0xb5e8b5cd
 8003354:	40023000 	.word	0x40023000
 8003358:	08009adc 	.word	0x08009adc

0800335c <ai_platform_interface_api_get_version>:
 800335c:	b500      	push	{lr}
 800335e:	b083      	sub	sp, #12
 8003360:	f7ff fe5e 	bl	8003020 <_ai_platform_acquire_crc>
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <ai_platform_interface_api_get_version+0x80>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003370:	d010      	beq.n	8003394 <ai_platform_interface_api_get_version+0x38>
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <ai_platform_interface_api_get_version+0x84>)
 8003374:	2301      	movs	r3, #1
 8003376:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800337a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1fb      	bne.n	800337a <ai_platform_interface_api_get_version+0x1e>
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <ai_platform_interface_api_get_version+0x88>)
 8003384:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003388:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <ai_platform_interface_api_get_version+0x8c>)
 800338e:	429a      	cmp	r2, r3
 8003390:	d00c      	beq.n	80033ac <ai_platform_interface_api_get_version+0x50>
 8003392:	e7fe      	b.n	8003392 <ai_platform_interface_api_get_version+0x36>
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <ai_platform_interface_api_get_version+0x90>)
 8003396:	2301      	movs	r3, #1
 8003398:	6093      	str	r3, [r2, #8]
 800339a:	6893      	ldr	r3, [r2, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1fc      	bne.n	800339a <ai_platform_interface_api_get_version+0x3e>
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <ai_platform_interface_api_get_version+0x88>)
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <ai_platform_interface_api_get_version+0x8c>)
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d115      	bne.n	80033d8 <ai_platform_interface_api_get_version+0x7c>
 80033ac:	f7ff fe3a 	bl	8003024 <_ai_platform_release_crc>
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <ai_platform_interface_api_get_version+0x94>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2000      	movs	r0, #0
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	f362 0007 	bfi	r0, r2, #0, #8
 80033bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80033c0:	f362 200f 	bfi	r0, r2, #8, #8
 80033c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80033c8:	f362 4017 	bfi	r0, r2, #16, #8
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	f363 601f 	bfi	r0, r3, #24, #8
 80033d2:	b003      	add	sp, #12
 80033d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d8:	e7fe      	b.n	80033d8 <ai_platform_interface_api_get_version+0x7c>
 80033da:	bf00      	nop
 80033dc:	e0042000 	.word	0xe0042000
 80033e0:	58024000 	.word	0x58024000
 80033e4:	f407a5c2 	.word	0xf407a5c2
 80033e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80033ec:	40023000 	.word	0x40023000
 80033f0:	08009ae0 	.word	0x08009ae0

080033f4 <ai_platform_context_acquire>:
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
 80033f8:	b120      	cbz	r0, 8003404 <ai_platform_context_acquire+0x10>
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <ai_platform_context_acquire+0x68>)
 80033fc:	6802      	ldr	r2, [r0, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	bf18      	it	ne
 8003402:	2400      	movne	r4, #0
 8003404:	f7ff fe0c 	bl	8003020 <_ai_platform_acquire_crc>
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <ai_platform_context_acquire+0x6c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d010      	beq.n	8003438 <ai_platform_context_acquire+0x44>
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <ai_platform_context_acquire+0x70>)
 8003418:	2301      	movs	r3, #1
 800341a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800341e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1fb      	bne.n	800341e <ai_platform_context_acquire+0x2a>
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <ai_platform_context_acquire+0x74>)
 8003428:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800342c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <ai_platform_context_acquire+0x78>)
 8003432:	429a      	cmp	r2, r3
 8003434:	d00c      	beq.n	8003450 <ai_platform_context_acquire+0x5c>
 8003436:	e7fe      	b.n	8003436 <ai_platform_context_acquire+0x42>
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <ai_platform_context_acquire+0x7c>)
 800343a:	2301      	movs	r3, #1
 800343c:	6093      	str	r3, [r2, #8]
 800343e:	6893      	ldr	r3, [r2, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1fc      	bne.n	800343e <ai_platform_context_acquire+0x4a>
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <ai_platform_context_acquire+0x74>)
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <ai_platform_context_acquire+0x78>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d103      	bne.n	8003458 <ai_platform_context_acquire+0x64>
 8003450:	f7ff fde8 	bl	8003024 <_ai_platform_release_crc>
 8003454:	4620      	mov	r0, r4
 8003456:	bd10      	pop	{r4, pc}
 8003458:	e7fe      	b.n	8003458 <ai_platform_context_acquire+0x64>
 800345a:	bf00      	nop
 800345c:	a1c00100 	.word	0xa1c00100
 8003460:	e0042000 	.word	0xe0042000
 8003464:	58024000 	.word	0x58024000
 8003468:	f407a5c2 	.word	0xf407a5c2
 800346c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003470:	40023000 	.word	0x40023000

08003474 <ai_platform_network_get_error>:
 8003474:	b510      	push	{r4, lr}
 8003476:	b1f0      	cbz	r0, 80034b6 <ai_platform_network_get_error+0x42>
 8003478:	4b2f      	ldr	r3, [pc, #188]	; (8003538 <ai_platform_network_get_error+0xc4>)
 800347a:	6802      	ldr	r2, [r0, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	4604      	mov	r4, r0
 8003480:	d119      	bne.n	80034b6 <ai_platform_network_get_error+0x42>
 8003482:	f7ff fdcd 	bl	8003020 <_ai_platform_acquire_crc>
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <ai_platform_network_get_error+0xc8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d03c      	beq.n	800350e <ai_platform_network_get_error+0x9a>
 8003494:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <ai_platform_network_get_error+0xcc>)
 8003496:	2301      	movs	r3, #1
 8003498:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800349c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1fb      	bne.n	800349c <ai_platform_network_get_error+0x28>
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <ai_platform_network_get_error+0xd0>)
 80034a6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80034aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <ai_platform_network_get_error+0xd4>)
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d038      	beq.n	8003526 <ai_platform_network_get_error+0xb2>
 80034b4:	e7fe      	b.n	80034b4 <ai_platform_network_get_error+0x40>
 80034b6:	f7ff fdb3 	bl	8003020 <_ai_platform_acquire_crc>
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <ai_platform_network_get_error+0xc8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d010      	beq.n	80034ea <ai_platform_network_get_error+0x76>
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <ai_platform_network_get_error+0xcc>)
 80034ca:	2301      	movs	r3, #1
 80034cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80034d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1fb      	bne.n	80034d0 <ai_platform_network_get_error+0x5c>
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <ai_platform_network_get_error+0xd0>)
 80034da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80034de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <ai_platform_network_get_error+0xd4>)
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d00d      	beq.n	8003504 <ai_platform_network_get_error+0x90>
 80034e8:	e7fe      	b.n	80034e8 <ai_platform_network_get_error+0x74>
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <ai_platform_network_get_error+0xd8>)
 80034ec:	2301      	movs	r3, #1
 80034ee:	6093      	str	r3, [r2, #8]
 80034f0:	6893      	ldr	r3, [r2, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1fc      	bne.n	80034f0 <ai_platform_network_get_error+0x7c>
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <ai_platform_network_get_error+0xd0>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <ai_platform_network_get_error+0xd4>)
 80034fe:	429a      	cmp	r2, r3
 8003500:	d000      	beq.n	8003504 <ai_platform_network_get_error+0x90>
 8003502:	e7fe      	b.n	8003502 <ai_platform_network_get_error+0x8e>
 8003504:	f7ff fd8e 	bl	8003024 <_ai_platform_release_crc>
 8003508:	f241 0010 	movw	r0, #4112	; 0x1010
 800350c:	bd10      	pop	{r4, pc}
 800350e:	4a0f      	ldr	r2, [pc, #60]	; (800354c <ai_platform_network_get_error+0xd8>)
 8003510:	2301      	movs	r3, #1
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	6893      	ldr	r3, [r2, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1fc      	bne.n	8003514 <ai_platform_network_get_error+0xa0>
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <ai_platform_network_get_error+0xd0>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <ai_platform_network_get_error+0xd4>)
 8003522:	429a      	cmp	r2, r3
 8003524:	d107      	bne.n	8003536 <ai_platform_network_get_error+0xc2>
 8003526:	f7ff fd7d 	bl	8003024 <_ai_platform_release_crc>
 800352a:	f104 0010 	add.w	r0, r4, #16
 800352e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003532:	f001 b80f 	b.w	8004554 <core_get_error>
 8003536:	e7fe      	b.n	8003536 <ai_platform_network_get_error+0xc2>
 8003538:	a1c00100 	.word	0xa1c00100
 800353c:	e0042000 	.word	0xe0042000
 8003540:	58024000 	.word	0x58024000
 8003544:	f407a5c2 	.word	0xf407a5c2
 8003548:	b5e8b5cd 	.word	0xb5e8b5cd
 800354c:	40023000 	.word	0x40023000

08003550 <ai_platform_network_set_error>:
 8003550:	b110      	cbz	r0, 8003558 <ai_platform_network_set_error+0x8>
 8003552:	3010      	adds	r0, #16
 8003554:	f001 b804 	b.w	8004560 <core_set_error>
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <ai_platform_api_get_network_report>:
 800355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003560:	b087      	sub	sp, #28
 8003562:	b1f8      	cbz	r0, 80035a4 <ai_platform_api_get_network_report+0x48>
 8003564:	4b95      	ldr	r3, [pc, #596]	; (80037bc <ai_platform_api_get_network_report+0x260>)
 8003566:	6802      	ldr	r2, [r0, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	4607      	mov	r7, r0
 800356c:	d11a      	bne.n	80035a4 <ai_platform_api_get_network_report+0x48>
 800356e:	468b      	mov	fp, r1
 8003570:	f7ff fd56 	bl	8003020 <_ai_platform_acquire_crc>
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <ai_platform_api_get_network_report+0x264>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d03e      	beq.n	8003600 <ai_platform_api_get_network_report+0xa4>
 8003582:	4a90      	ldr	r2, [pc, #576]	; (80037c4 <ai_platform_api_get_network_report+0x268>)
 8003584:	2301      	movs	r3, #1
 8003586:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800358a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1fb      	bne.n	800358a <ai_platform_api_get_network_report+0x2e>
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <ai_platform_api_get_network_report+0x26c>)
 8003594:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003598:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800359c:	4b8b      	ldr	r3, [pc, #556]	; (80037cc <ai_platform_api_get_network_report+0x270>)
 800359e:	429a      	cmp	r2, r3
 80035a0:	d03a      	beq.n	8003618 <ai_platform_api_get_network_report+0xbc>
 80035a2:	e7fe      	b.n	80035a2 <ai_platform_api_get_network_report+0x46>
 80035a4:	f7ff fd3c 	bl	8003020 <_ai_platform_acquire_crc>
 80035a8:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <ai_platform_api_get_network_report+0x264>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d010      	beq.n	80035d8 <ai_platform_api_get_network_report+0x7c>
 80035b6:	4a83      	ldr	r2, [pc, #524]	; (80037c4 <ai_platform_api_get_network_report+0x268>)
 80035b8:	2301      	movs	r3, #1
 80035ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1fb      	bne.n	80035be <ai_platform_api_get_network_report+0x62>
 80035c6:	4b80      	ldr	r3, [pc, #512]	; (80037c8 <ai_platform_api_get_network_report+0x26c>)
 80035c8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80035d0:	4b7e      	ldr	r3, [pc, #504]	; (80037cc <ai_platform_api_get_network_report+0x270>)
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d00d      	beq.n	80035f2 <ai_platform_api_get_network_report+0x96>
 80035d6:	e7fe      	b.n	80035d6 <ai_platform_api_get_network_report+0x7a>
 80035d8:	4a7d      	ldr	r2, [pc, #500]	; (80037d0 <ai_platform_api_get_network_report+0x274>)
 80035da:	2301      	movs	r3, #1
 80035dc:	6093      	str	r3, [r2, #8]
 80035de:	6893      	ldr	r3, [r2, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1fc      	bne.n	80035de <ai_platform_api_get_network_report+0x82>
 80035e4:	4b78      	ldr	r3, [pc, #480]	; (80037c8 <ai_platform_api_get_network_report+0x26c>)
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4b78      	ldr	r3, [pc, #480]	; (80037cc <ai_platform_api_get_network_report+0x270>)
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d000      	beq.n	80035f2 <ai_platform_api_get_network_report+0x96>
 80035f0:	e7fe      	b.n	80035f0 <ai_platform_api_get_network_report+0x94>
 80035f2:	f7ff fd17 	bl	8003024 <_ai_platform_release_crc>
 80035f6:	2400      	movs	r4, #0
 80035f8:	4620      	mov	r0, r4
 80035fa:	b007      	add	sp, #28
 80035fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003600:	4a73      	ldr	r2, [pc, #460]	; (80037d0 <ai_platform_api_get_network_report+0x274>)
 8003602:	2301      	movs	r3, #1
 8003604:	6093      	str	r3, [r2, #8]
 8003606:	6893      	ldr	r3, [r2, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1fc      	bne.n	8003606 <ai_platform_api_get_network_report+0xaa>
 800360c:	4b6e      	ldr	r3, [pc, #440]	; (80037c8 <ai_platform_api_get_network_report+0x26c>)
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <ai_platform_api_get_network_report+0x270>)
 8003614:	429a      	cmp	r2, r3
 8003616:	d112      	bne.n	800363e <ai_platform_api_get_network_report+0xe2>
 8003618:	f7ff fd04 	bl	8003024 <_ai_platform_release_crc>
 800361c:	f1bb 0f00 	cmp.w	fp, #0
 8003620:	d0e9      	beq.n	80035f6 <ai_platform_api_get_network_report+0x9a>
 8003622:	2400      	movs	r4, #0
 8003624:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	b14b      	cbz	r3, 8003640 <ai_platform_api_get_network_report+0xe4>
 800362c:	3401      	adds	r4, #1
 800362e:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d003      	beq.n	8003640 <ai_platform_api_get_network_report+0xe4>
 8003638:	b112      	cbz	r2, 8003640 <ai_platform_api_get_network_report+0xe4>
 800363a:	4613      	mov	r3, r2
 800363c:	e7f5      	b.n	800362a <ai_platform_api_get_network_report+0xce>
 800363e:	e7fe      	b.n	800363e <ai_platform_api_get_network_report+0xe2>
 8003640:	2c00      	cmp	r4, #0
 8003642:	f000 819e 	beq.w	8003982 <ai_platform_api_get_network_report+0x426>
 8003646:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04e      	beq.n	80036ea <ai_platform_api_get_network_report+0x18e>
 800364c:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8003650:	f1b9 0f00 	cmp.w	r9, #0
 8003654:	d049      	beq.n	80036ea <ai_platform_api_get_network_report+0x18e>
 8003656:	f04f 0a00 	mov.w	sl, #0
 800365a:	e9cd 7b00 	strd	r7, fp, [sp]
 800365e:	4655      	mov	r5, sl
 8003660:	e016      	b.n	8003690 <ai_platform_api_get_network_report+0x134>
 8003662:	2101      	movs	r1, #1
 8003664:	f847 100e 	str.w	r1, [r7, lr]
 8003668:	69b1      	ldr	r1, [r6, #24]
 800366a:	6849      	ldr	r1, [r1, #4]
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	f04f 0301 	mov.w	r3, #1
 8003672:	7523      	strb	r3, [r4, #20]
 8003674:	2300      	movs	r3, #0
 8003676:	60e3      	str	r3, [r4, #12]
 8003678:	6963      	ldr	r3, [r4, #20]
 800367a:	6121      	str	r1, [r4, #16]
 800367c:	e9c4 0200 	strd	r0, r2, [r4]
 8003680:	f368 231f 	bfi	r3, r8, #8, #24
 8003684:	f8c4 b018 	str.w	fp, [r4, #24]
 8003688:	3501      	adds	r5, #1
 800368a:	f10a 0a1c 	add.w	sl, sl, #28
 800368e:	6163      	str	r3, [r4, #20]
 8003690:	f8b9 3000 	ldrh.w	r3, [r9]
 8003694:	42ab      	cmp	r3, r5
 8003696:	b2aa      	uxth	r2, r5
 8003698:	d933      	bls.n	8003702 <ai_platform_api_get_network_report+0x1a6>
 800369a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800369e:	b383      	cbz	r3, 8003702 <ai_platform_api_get_network_report+0x1a6>
 80036a0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80036a4:	b36e      	cbz	r6, 8003702 <ai_platform_api_get_network_report+0x1a6>
 80036a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80036aa:	69b2      	ldr	r2, [r6, #24]
 80036ac:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80036b0:	6810      	ldr	r0, [r2, #0]
 80036b2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80036b6:	68b3      	ldr	r3, [r6, #8]
 80036b8:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80036bc:	f001 fe18 	bl	80052f0 <ai_array_to_buffer_fmt>
 80036c0:	69b1      	ldr	r1, [r6, #24]
 80036c2:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80036c6:	688a      	ldr	r2, [r1, #8]
 80036c8:	4454      	add	r4, sl
 80036ca:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0cb      	beq.n	800366a <ai_platform_api_get_network_report+0x10e>
 80036d2:	2100      	movs	r1, #0
 80036d4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80036d8:	6831      	ldr	r1, [r6, #0]
 80036da:	6059      	str	r1, [r3, #4]
 80036dc:	b111      	cbz	r1, 80036e4 <ai_platform_api_get_network_report+0x188>
 80036de:	8849      	ldrh	r1, [r1, #2]
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d1be      	bne.n	8003662 <ai_platform_api_get_network_report+0x106>
 80036e4:	69b1      	ldr	r1, [r6, #24]
 80036e6:	2300      	movs	r3, #0
 80036e8:	e7bf      	b.n	800366a <ai_platform_api_get_network_report+0x10e>
 80036ea:	2400      	movs	r4, #0
 80036ec:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 80036f0:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 80036f4:	2218      	movs	r2, #24
 80036f6:	2112      	movs	r1, #18
 80036f8:	f107 0010 	add.w	r0, r7, #16
 80036fc:	f000 ff30 	bl	8004560 <core_set_error>
 8003700:	e77a      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 8003702:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8003706:	2a00      	cmp	r2, #0
 8003708:	d0ef      	beq.n	80036ea <ai_platform_api_get_network_report+0x18e>
 800370a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8003714:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 8003718:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800371a:	2b01      	cmp	r3, #1
 800371c:	f240 8125 	bls.w	800396a <ai_platform_api_get_network_report+0x40e>
 8003720:	f04f 0a00 	mov.w	sl, #0
 8003724:	e9cd 7b00 	strd	r7, fp, [sp]
 8003728:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 800372c:	4655      	mov	r5, sl
 800372e:	e016      	b.n	800375e <ai_platform_api_get_network_report+0x202>
 8003730:	2101      	movs	r1, #1
 8003732:	f847 100e 	str.w	r1, [r7, lr]
 8003736:	69b1      	ldr	r1, [r6, #24]
 8003738:	6849      	ldr	r1, [r1, #4]
 800373a:	60a3      	str	r3, [r4, #8]
 800373c:	f04f 0301 	mov.w	r3, #1
 8003740:	7523      	strb	r3, [r4, #20]
 8003742:	2300      	movs	r3, #0
 8003744:	60e3      	str	r3, [r4, #12]
 8003746:	6963      	ldr	r3, [r4, #20]
 8003748:	6121      	str	r1, [r4, #16]
 800374a:	e9c4 0200 	strd	r0, r2, [r4]
 800374e:	f368 231f 	bfi	r3, r8, #8, #24
 8003752:	f8c4 b018 	str.w	fp, [r4, #24]
 8003756:	3501      	adds	r5, #1
 8003758:	f10a 0a1c 	add.w	sl, sl, #28
 800375c:	6163      	str	r3, [r4, #20]
 800375e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003762:	42ab      	cmp	r3, r5
 8003764:	b2aa      	uxth	r2, r5
 8003766:	d935      	bls.n	80037d4 <ai_platform_api_get_network_report+0x278>
 8003768:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d031      	beq.n	80037d4 <ai_platform_api_get_network_report+0x278>
 8003770:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003774:	b376      	cbz	r6, 80037d4 <ai_platform_api_get_network_report+0x278>
 8003776:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800377a:	69b2      	ldr	r2, [r6, #24]
 800377c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8003780:	6810      	ldr	r0, [r2, #0]
 8003782:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003786:	68b3      	ldr	r3, [r6, #8]
 8003788:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800378c:	f001 fdb0 	bl	80052f0 <ai_array_to_buffer_fmt>
 8003790:	69b1      	ldr	r1, [r6, #24]
 8003792:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003796:	688a      	ldr	r2, [r1, #8]
 8003798:	4454      	add	r4, sl
 800379a:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ca      	beq.n	8003738 <ai_platform_api_get_network_report+0x1dc>
 80037a2:	2100      	movs	r1, #0
 80037a4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80037a8:	6831      	ldr	r1, [r6, #0]
 80037aa:	6059      	str	r1, [r3, #4]
 80037ac:	b111      	cbz	r1, 80037b4 <ai_platform_api_get_network_report+0x258>
 80037ae:	8849      	ldrh	r1, [r1, #2]
 80037b0:	2900      	cmp	r1, #0
 80037b2:	d1bd      	bne.n	8003730 <ai_platform_api_get_network_report+0x1d4>
 80037b4:	69b1      	ldr	r1, [r6, #24]
 80037b6:	2300      	movs	r3, #0
 80037b8:	e7be      	b.n	8003738 <ai_platform_api_get_network_report+0x1dc>
 80037ba:	bf00      	nop
 80037bc:	a1c00100 	.word	0xa1c00100
 80037c0:	e0042000 	.word	0xe0042000
 80037c4:	58024000 	.word	0x58024000
 80037c8:	f407a5c2 	.word	0xf407a5c2
 80037cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80037d0:	40023000 	.word	0x40023000
 80037d4:	e9dd 7b00 	ldrd	r7, fp, [sp]
 80037d8:	2a00      	cmp	r2, #0
 80037da:	f000 80c6 	beq.w	800396a <ai_platform_api_get_network_report+0x40e>
 80037de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80037e2:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80037ec:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 80037f0:	4630      	mov	r0, r6
 80037f2:	f7ff fbfb 	bl	8002fec <ai_buffer_array_sane>
 80037f6:	4604      	mov	r4, r0
 80037f8:	b938      	cbnz	r0, 800380a <ai_platform_api_get_network_report+0x2ae>
 80037fa:	4630      	mov	r0, r6
 80037fc:	f7ff fbf6 	bl	8002fec <ai_buffer_array_sane>
 8003800:	b118      	cbz	r0, 800380a <ai_platform_api_get_network_report+0x2ae>
 8003802:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 80c5 	bne.w	8003994 <ai_platform_api_get_network_report+0x438>
 800380a:	f107 081c 	add.w	r8, r7, #28
 800380e:	4640      	mov	r0, r8
 8003810:	f7ff fbec 	bl	8002fec <ai_buffer_array_sane>
 8003814:	4604      	mov	r4, r0
 8003816:	b938      	cbnz	r0, 8003828 <ai_platform_api_get_network_report+0x2cc>
 8003818:	4640      	mov	r0, r8
 800381a:	f7ff fbe7 	bl	8002fec <ai_buffer_array_sane>
 800381e:	b118      	cbz	r0, 8003828 <ai_platform_api_get_network_report+0x2cc>
 8003820:	8bfb      	ldrh	r3, [r7, #30]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 80bd 	bne.w	80039a2 <ai_platform_api_get_network_report+0x446>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 800382e:	f7ff fbf7 	bl	8003020 <_ai_platform_acquire_crc>
 8003832:	4ba0      	ldr	r3, [pc, #640]	; (8003ab4 <ai_platform_api_get_network_report+0x558>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d010      	beq.n	8003862 <ai_platform_api_get_network_report+0x306>
 8003840:	4a9d      	ldr	r2, [pc, #628]	; (8003ab8 <ai_platform_api_get_network_report+0x55c>)
 8003842:	2301      	movs	r3, #1
 8003844:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003848:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1fb      	bne.n	8003848 <ai_platform_api_get_network_report+0x2ec>
 8003850:	4b9a      	ldr	r3, [pc, #616]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 8003852:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003856:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800385a:	4b99      	ldr	r3, [pc, #612]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 800385c:	429a      	cmp	r2, r3
 800385e:	d00d      	beq.n	800387c <ai_platform_api_get_network_report+0x320>
 8003860:	e7fe      	b.n	8003860 <ai_platform_api_get_network_report+0x304>
 8003862:	4a98      	ldr	r2, [pc, #608]	; (8003ac4 <ai_platform_api_get_network_report+0x568>)
 8003864:	2301      	movs	r3, #1
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	6893      	ldr	r3, [r2, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1fc      	bne.n	8003868 <ai_platform_api_get_network_report+0x30c>
 800386e:	4b93      	ldr	r3, [pc, #588]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	4b92      	ldr	r3, [pc, #584]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 8003876:	429a      	cmp	r2, r3
 8003878:	f040 808a 	bne.w	8003990 <ai_platform_api_get_network_report+0x434>
 800387c:	f7ff fbd2 	bl	8003024 <_ai_platform_release_crc>
 8003880:	4b91      	ldr	r3, [pc, #580]	; (8003ac8 <ai_platform_api_get_network_report+0x56c>)
 8003882:	f8cb 3010 	str.w	r3, [fp, #16]
 8003886:	f7ff fbcb 	bl	8003020 <_ai_platform_acquire_crc>
 800388a:	4b8a      	ldr	r3, [pc, #552]	; (8003ab4 <ai_platform_api_get_network_report+0x558>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d010      	beq.n	80038ba <ai_platform_api_get_network_report+0x35e>
 8003898:	4b87      	ldr	r3, [pc, #540]	; (8003ab8 <ai_platform_api_get_network_report+0x55c>)
 800389a:	2201      	movs	r2, #1
 800389c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80038a0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	d1fb      	bne.n	80038a0 <ai_platform_api_get_network_report+0x344>
 80038a8:	4a84      	ldr	r2, [pc, #528]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 80038aa:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80038ae:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80038b2:	4b83      	ldr	r3, [pc, #524]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d00c      	beq.n	80038d2 <ai_platform_api_get_network_report+0x376>
 80038b8:	e7fe      	b.n	80038b8 <ai_platform_api_get_network_report+0x35c>
 80038ba:	4b82      	ldr	r3, [pc, #520]	; (8003ac4 <ai_platform_api_get_network_report+0x568>)
 80038bc:	2201      	movs	r2, #1
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d1fc      	bne.n	80038c0 <ai_platform_api_get_network_report+0x364>
 80038c6:	4a7d      	ldr	r2, [pc, #500]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b7c      	ldr	r3, [pc, #496]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d15f      	bne.n	8003992 <ai_platform_api_get_network_report+0x436>
 80038d2:	f7ff fba7 	bl	8003024 <_ai_platform_release_crc>
 80038d6:	f44f 7384 	mov.w	r3, #264	; 0x108
 80038da:	f8cb 3014 	str.w	r3, [fp, #20]
 80038de:	f7ff fb9f 	bl	8003020 <_ai_platform_acquire_crc>
 80038e2:	4b74      	ldr	r3, [pc, #464]	; (8003ab4 <ai_platform_api_get_network_report+0x558>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ee:	d010      	beq.n	8003912 <ai_platform_api_get_network_report+0x3b6>
 80038f0:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <ai_platform_api_get_network_report+0x55c>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80038f8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d1fb      	bne.n	80038f8 <ai_platform_api_get_network_report+0x39c>
 8003900:	4a6e      	ldr	r2, [pc, #440]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 8003902:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003906:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800390a:	4b6d      	ldr	r3, [pc, #436]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 800390c:	429a      	cmp	r2, r3
 800390e:	d00c      	beq.n	800392a <ai_platform_api_get_network_report+0x3ce>
 8003910:	e7fe      	b.n	8003910 <ai_platform_api_get_network_report+0x3b4>
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <ai_platform_api_get_network_report+0x568>)
 8003914:	2201      	movs	r2, #1
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	2a00      	cmp	r2, #0
 800391c:	d1fc      	bne.n	8003918 <ai_platform_api_get_network_report+0x3bc>
 800391e:	4a67      	ldr	r2, [pc, #412]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 8003926:	429a      	cmp	r2, r3
 8003928:	d142      	bne.n	80039b0 <ai_platform_api_get_network_report+0x454>
 800392a:	f7ff fb7b 	bl	8003024 <_ai_platform_release_crc>
 800392e:	f240 2301 	movw	r3, #513	; 0x201
 8003932:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8003936:	f7ff fb73 	bl	8003020 <_ai_platform_acquire_crc>
 800393a:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <ai_platform_api_get_network_report+0x558>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003946:	d034      	beq.n	80039b2 <ai_platform_api_get_network_report+0x456>
 8003948:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <ai_platform_api_get_network_report+0x55c>)
 800394a:	2201      	movs	r2, #1
 800394c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003950:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003954:	2a00      	cmp	r2, #0
 8003956:	d1fb      	bne.n	8003950 <ai_platform_api_get_network_report+0x3f4>
 8003958:	4a58      	ldr	r2, [pc, #352]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 800395a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800395e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003962:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d030      	beq.n	80039ca <ai_platform_api_get_network_report+0x46e>
 8003968:	e7fe      	b.n	8003968 <ai_platform_api_get_network_report+0x40c>
 800396a:	2400      	movs	r4, #0
 800396c:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 8003970:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 8003974:	2218      	movs	r2, #24
 8003976:	2113      	movs	r1, #19
 8003978:	f107 0010 	add.w	r0, r7, #16
 800397c:	f000 fdf0 	bl	8004560 <core_set_error>
 8003980:	e63a      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 8003982:	2218      	movs	r2, #24
 8003984:	2111      	movs	r1, #17
 8003986:	f107 0010 	add.w	r0, r7, #16
 800398a:	f000 fde9 	bl	8004560 <core_set_error>
 800398e:	e633      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 8003990:	e7fe      	b.n	8003990 <ai_platform_api_get_network_report+0x434>
 8003992:	e7fe      	b.n	8003992 <ai_platform_api_get_network_report+0x436>
 8003994:	2213      	movs	r2, #19
 8003996:	2111      	movs	r1, #17
 8003998:	f107 0010 	add.w	r0, r7, #16
 800399c:	f000 fde0 	bl	8004560 <core_set_error>
 80039a0:	e62a      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 80039a2:	2212      	movs	r2, #18
 80039a4:	2111      	movs	r1, #17
 80039a6:	f107 0010 	add.w	r0, r7, #16
 80039aa:	f000 fdd9 	bl	8004560 <core_set_error>
 80039ae:	e623      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 80039b0:	e7fe      	b.n	80039b0 <ai_platform_api_get_network_report+0x454>
 80039b2:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <ai_platform_api_get_network_report+0x568>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d1fc      	bne.n	80039b8 <ai_platform_api_get_network_report+0x45c>
 80039be:	4a3f      	ldr	r2, [pc, #252]	; (8003abc <ai_platform_api_get_network_report+0x560>)
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <ai_platform_api_get_network_report+0x564>)
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d14a      	bne.n	8003a60 <ai_platform_api_get_network_report+0x504>
 80039ca:	f7ff fb2b 	bl	8003024 <_ai_platform_release_crc>
 80039ce:	f240 5301 	movw	r3, #1281	; 0x501
 80039d2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 80039d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80039d8:	f001 fd36 	bl	8005448 <ai_platform_version_get>
 80039dc:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <ai_platform_api_get_network_report+0x570>)
 80039de:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 80039e2:	f8cb 0020 	str.w	r0, [fp, #32]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10d      	bne.n	8003a06 <ai_platform_api_get_network_report+0x4aa>
 80039ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80039ee:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 80039f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80039f6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80039fa:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 80039fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a02:	2401      	movs	r4, #1
 8003a04:	e5f8      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 8003a06:	4a32      	ldr	r2, [pc, #200]	; (8003ad0 <ai_platform_api_get_network_report+0x574>)
 8003a08:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <ai_platform_api_get_network_report+0x578>)
 8003a0a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8003a0e:	2000      	movs	r0, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	f240 4201 	movw	r2, #1025	; 0x401
 8003a16:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8003a1a:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 8003a1e:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 8003a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a24:	f10d 0908 	add.w	r9, sp, #8
 8003a28:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 8003a2c:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 8003a30:	46a6      	mov	lr, r4
 8003a32:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8003a36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a3a:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 8003a3e:	46ac      	mov	ip, r5
 8003a40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a44:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003a48:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7ff facd 	bl	8002fec <ai_buffer_array_sane>
 8003a52:	b990      	cbnz	r0, 8003a7a <ai_platform_api_get_network_report+0x51e>
 8003a54:	4640      	mov	r0, r8
 8003a56:	f7ff fac9 	bl	8002fec <ai_buffer_array_sane>
 8003a5a:	b910      	cbnz	r0, 8003a62 <ai_platform_api_get_network_report+0x506>
 8003a5c:	2401      	movs	r4, #1
 8003a5e:	e5cb      	b.n	80035f8 <ai_platform_api_get_network_report+0x9c>
 8003a60:	e7fe      	b.n	8003a60 <ai_platform_api_get_network_report+0x504>
 8003a62:	4640      	mov	r0, r8
 8003a64:	f7ff fac2 	bl	8002fec <ai_buffer_array_sane>
 8003a68:	b198      	cbz	r0, 8003a92 <ai_platform_api_get_network_report+0x536>
 8003a6a:	6a3d      	ldr	r5, [r7, #32]
 8003a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a78:	e7f0      	b.n	8003a5c <ai_platform_api_get_network_report+0x500>
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f7ff fab6 	bl	8002fec <ai_buffer_array_sane>
 8003a80:	b178      	cbz	r0, 8003aa2 <ai_platform_api_get_network_report+0x546>
 8003a82:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8003a84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a88:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a90:	e7e0      	b.n	8003a54 <ai_platform_api_get_network_report+0x4f8>
 8003a92:	4605      	mov	r5, r0
 8003a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aa0:	deff      	udf	#255	; 0xff
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003aac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ab0:	deff      	udf	#255	; 0xff
 8003ab2:	bf00      	nop
 8003ab4:	e0042000 	.word	0xe0042000
 8003ab8:	58024000 	.word	0x58024000
 8003abc:	f407a5c2 	.word	0xf407a5c2
 8003ac0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ac4:	40023000 	.word	0x40023000
 8003ac8:	08009ad4 	.word	0x08009ad4
 8003acc:	a1facade 	.word	0xa1facade
 8003ad0:	00040440 	.word	0x00040440
 8003ad4:	08008190 	.word	0x08008190

08003ad8 <ai_platform_network_create>:
 8003ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003adc:	b083      	sub	sp, #12
 8003ade:	4606      	mov	r6, r0
 8003ae0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003ae4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003ae8:	4615      	mov	r5, r2
 8003aea:	461f      	mov	r7, r3
 8003aec:	f7ff fa98 	bl	8003020 <_ai_platform_acquire_crc>
 8003af0:	b188      	cbz	r0, 8003b16 <ai_platform_network_create+0x3e>
 8003af2:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <ai_platform_network_create+0x190>)
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003afa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003afe:	4603      	mov	r3, r0
 8003b00:	d00e      	beq.n	8003b20 <ai_platform_network_create+0x48>
 8003b02:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <ai_platform_network_create+0x194>)
 8003b04:	2118      	movs	r1, #24
 8003b06:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003b0a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003b0e:	2918      	cmp	r1, #24
 8003b10:	d018      	beq.n	8003b44 <ai_platform_network_create+0x6c>
 8003b12:	f7ff fa87 	bl	8003024 <_ai_platform_release_crc>
 8003b16:	f244 1033 	movw	r0, #16691	; 0x4133
 8003b1a:	b003      	add	sp, #12
 8003b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b20:	4a53      	ldr	r2, [pc, #332]	; (8003c70 <ai_platform_network_create+0x198>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	6091      	str	r1, [r2, #8]
 8003b26:	2114      	movs	r1, #20
 8003b28:	e001      	b.n	8003b2e <ai_platform_network_create+0x56>
 8003b2a:	3901      	subs	r1, #1
 8003b2c:	d002      	beq.n	8003b34 <ai_platform_network_create+0x5c>
 8003b2e:	6894      	ldr	r4, [r2, #8]
 8003b30:	2c00      	cmp	r4, #0
 8003b32:	d1fa      	bne.n	8003b2a <ai_platform_network_create+0x52>
 8003b34:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <ai_platform_network_create+0x198>)
 8003b36:	6891      	ldr	r1, [r2, #8]
 8003b38:	b911      	cbnz	r1, 8003b40 <ai_platform_network_create+0x68>
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	3201      	adds	r2, #1
 8003b3e:	d008      	beq.n	8003b52 <ai_platform_network_create+0x7a>
 8003b40:	4618      	mov	r0, r3
 8003b42:	e7e6      	b.n	8003b12 <ai_platform_network_create+0x3a>
 8003b44:	2101      	movs	r1, #1
 8003b46:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003b4a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	d1fb      	bne.n	8003b4a <ai_platform_network_create+0x72>
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fa66 	bl	8003024 <_ai_platform_release_crc>
 8003b58:	f7ff fa62 	bl	8003020 <_ai_platform_acquire_crc>
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <ai_platform_network_create+0x190>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b68:	d010      	beq.n	8003b8c <ai_platform_network_create+0xb4>
 8003b6a:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <ai_platform_network_create+0x194>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003b72:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003b76:	2900      	cmp	r1, #0
 8003b78:	d1fb      	bne.n	8003b72 <ai_platform_network_create+0x9a>
 8003b7a:	4a3e      	ldr	r2, [pc, #248]	; (8003c74 <ai_platform_network_create+0x19c>)
 8003b7c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003b80:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003b84:	4b3c      	ldr	r3, [pc, #240]	; (8003c78 <ai_platform_network_create+0x1a0>)
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d00c      	beq.n	8003ba4 <ai_platform_network_create+0xcc>
 8003b8a:	e7fe      	b.n	8003b8a <ai_platform_network_create+0xb2>
 8003b8c:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <ai_platform_network_create+0x198>)
 8003b8e:	2301      	movs	r3, #1
 8003b90:	6093      	str	r3, [r2, #8]
 8003b92:	6893      	ldr	r3, [r2, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1fc      	bne.n	8003b92 <ai_platform_network_create+0xba>
 8003b98:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <ai_platform_network_create+0x19c>)
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <ai_platform_network_create+0x1a0>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d122      	bne.n	8003bea <ai_platform_network_create+0x112>
 8003ba4:	f7ff fa3e 	bl	8003024 <_ai_platform_release_crc>
 8003ba8:	b38e      	cbz	r6, 8003c0e <ai_platform_network_create+0x136>
 8003baa:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <ai_platform_network_create+0x1a4>)
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	6035      	str	r5, [r6, #0]
 8003bb0:	f000 fcce 	bl	8004550 <core_init>
 8003bb4:	b1d0      	cbz	r0, 8003bec <ai_platform_network_create+0x114>
 8003bb6:	f7ff fa33 	bl	8003020 <_ai_platform_acquire_crc>
 8003bba:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <ai_platform_network_create+0x190>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc6:	d025      	beq.n	8003c14 <ai_platform_network_create+0x13c>
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <ai_platform_network_create+0x194>)
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003bd0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1fb      	bne.n	8003bd0 <ai_platform_network_create+0xf8>
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <ai_platform_network_create+0x19c>)
 8003bda:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003bde:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003be2:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <ai_platform_network_create+0x1a0>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d022      	beq.n	8003c2e <ai_platform_network_create+0x156>
 8003be8:	e7fe      	b.n	8003be8 <ai_platform_network_create+0x110>
 8003bea:	e7fe      	b.n	8003bea <ai_platform_network_create+0x112>
 8003bec:	2430      	movs	r4, #48	; 0x30
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	2610      	movs	r6, #16
 8003bf4:	464a      	mov	r2, r9
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f001 fc1f 	bl	800543c <ai_version_get>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2000      	movs	r0, #0
 8003c02:	f364 0007 	bfi	r0, r4, #0, #8
 8003c06:	64ab      	str	r3, [r5, #72]	; 0x48
 8003c08:	f366 201f 	bfi	r0, r6, #8, #24
 8003c0c:	e785      	b.n	8003b1a <ai_platform_network_create+0x42>
 8003c0e:	f241 0010 	movw	r0, #4112	; 0x1010
 8003c12:	e782      	b.n	8003b1a <ai_platform_network_create+0x42>
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <ai_platform_network_create+0x198>)
 8003c16:	2301      	movs	r3, #1
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	6893      	ldr	r3, [r2, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1fc      	bne.n	8003c1a <ai_platform_network_create+0x142>
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <ai_platform_network_create+0x19c>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <ai_platform_network_create+0x1a0>)
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d000      	beq.n	8003c2e <ai_platform_network_create+0x156>
 8003c2c:	e7fe      	b.n	8003c2c <ai_platform_network_create+0x154>
 8003c2e:	f7ff f9f9 	bl	8003024 <_ai_platform_release_crc>
 8003c32:	2200      	movs	r2, #0
 8003c34:	4641      	mov	r1, r8
 8003c36:	4638      	mov	r0, r7
 8003c38:	f001 fc00 	bl	800543c <ai_version_get>
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	2105      	movs	r1, #5
 8003c42:	2001      	movs	r0, #1
 8003c44:	f001 fbfa 	bl	800543c <ai_version_get>
 8003c48:	4284      	cmp	r4, r0
 8003c4a:	d001      	beq.n	8003c50 <ai_platform_network_create+0x178>
 8003c4c:	2401      	movs	r4, #1
 8003c4e:	e7ce      	b.n	8003bee <ai_platform_network_create+0x116>
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <ai_platform_network_create+0x1a8>)
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	a801      	add	r0, sp, #4
 8003c56:	f000 fc8f 	bl	8004578 <ai_check_custom_types>
 8003c5a:	b110      	cbz	r0, 8003c62 <ai_platform_network_create+0x18a>
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	4634      	mov	r4, r6
 8003c60:	e7c8      	b.n	8003bf4 <ai_platform_network_create+0x11c>
 8003c62:	2402      	movs	r4, #2
 8003c64:	e7c3      	b.n	8003bee <ai_platform_network_create+0x116>
 8003c66:	bf00      	nop
 8003c68:	e0042000 	.word	0xe0042000
 8003c6c:	58024000 	.word	0x58024000
 8003c70:	40023000 	.word	0x40023000
 8003c74:	f407a5c2 	.word	0xf407a5c2
 8003c78:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c7c:	a1c00100 	.word	0xa1c00100
 8003c80:	84048403 	.word	0x84048403

08003c84 <ai_platform_network_destroy>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4604      	mov	r4, r0
 8003c88:	b1e8      	cbz	r0, 8003cc6 <ai_platform_network_destroy+0x42>
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <ai_platform_network_destroy+0xc0>)
 8003c8c:	6802      	ldr	r2, [r0, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d119      	bne.n	8003cc6 <ai_platform_network_destroy+0x42>
 8003c92:	f7ff f9c5 	bl	8003020 <_ai_platform_acquire_crc>
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <ai_platform_network_destroy+0xc4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d03b      	beq.n	8003d1c <ai_platform_network_destroy+0x98>
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <ai_platform_network_destroy+0xc8>)
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003cac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1fb      	bne.n	8003cac <ai_platform_network_destroy+0x28>
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <ai_platform_network_destroy+0xcc>)
 8003cb6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003cba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <ai_platform_network_destroy+0xd0>)
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d037      	beq.n	8003d34 <ai_platform_network_destroy+0xb0>
 8003cc4:	e7fe      	b.n	8003cc4 <ai_platform_network_destroy+0x40>
 8003cc6:	f7ff f9ab 	bl	8003020 <_ai_platform_acquire_crc>
 8003cca:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <ai_platform_network_destroy+0xc4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd6:	d010      	beq.n	8003cfa <ai_platform_network_destroy+0x76>
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <ai_platform_network_destroy+0xc8>)
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003ce0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1fb      	bne.n	8003ce0 <ai_platform_network_destroy+0x5c>
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <ai_platform_network_destroy+0xcc>)
 8003cea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003cee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003cf2:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <ai_platform_network_destroy+0xd0>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d00d      	beq.n	8003d14 <ai_platform_network_destroy+0x90>
 8003cf8:	e7fe      	b.n	8003cf8 <ai_platform_network_destroy+0x74>
 8003cfa:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <ai_platform_network_destroy+0xd4>)
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	6093      	str	r3, [r2, #8]
 8003d00:	6893      	ldr	r3, [r2, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1fc      	bne.n	8003d00 <ai_platform_network_destroy+0x7c>
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <ai_platform_network_destroy+0xcc>)
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <ai_platform_network_destroy+0xd0>)
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d000      	beq.n	8003d14 <ai_platform_network_destroy+0x90>
 8003d12:	e7fe      	b.n	8003d12 <ai_platform_network_destroy+0x8e>
 8003d14:	f7ff f986 	bl	8003024 <_ai_platform_release_crc>
 8003d18:	4620      	mov	r0, r4
 8003d1a:	bd10      	pop	{r4, pc}
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <ai_platform_network_destroy+0xd4>)
 8003d1e:	2301      	movs	r3, #1
 8003d20:	6093      	str	r3, [r2, #8]
 8003d22:	6893      	ldr	r3, [r2, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1fc      	bne.n	8003d22 <ai_platform_network_destroy+0x9e>
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <ai_platform_network_destroy+0xcc>)
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <ai_platform_network_destroy+0xd0>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d106      	bne.n	8003d42 <ai_platform_network_destroy+0xbe>
 8003d34:	f7ff f976 	bl	8003024 <_ai_platform_release_crc>
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fcb3 	bl	80046a4 <ai_layers_destroy_all>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	e7fe      	b.n	8003d42 <ai_platform_network_destroy+0xbe>
 8003d44:	a1c00100 	.word	0xa1c00100
 8003d48:	e0042000 	.word	0xe0042000
 8003d4c:	58024000 	.word	0x58024000
 8003d50:	f407a5c2 	.word	0xf407a5c2
 8003d54:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d58:	40023000 	.word	0x40023000

08003d5c <ai_platform_network_init>:
 8003d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d60:	b1f8      	cbz	r0, 8003da2 <ai_platform_network_init+0x46>
 8003d62:	4b6e      	ldr	r3, [pc, #440]	; (8003f1c <ai_platform_network_init+0x1c0>)
 8003d64:	6802      	ldr	r2, [r0, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	4604      	mov	r4, r0
 8003d6a:	d11a      	bne.n	8003da2 <ai_platform_network_init+0x46>
 8003d6c:	460e      	mov	r6, r1
 8003d6e:	f7ff f957 	bl	8003020 <_ai_platform_acquire_crc>
 8003d72:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <ai_platform_network_init+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d03d      	beq.n	8003dfc <ai_platform_network_init+0xa0>
 8003d80:	4a68      	ldr	r2, [pc, #416]	; (8003f24 <ai_platform_network_init+0x1c8>)
 8003d82:	2301      	movs	r3, #1
 8003d84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003d88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1fb      	bne.n	8003d88 <ai_platform_network_init+0x2c>
 8003d90:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <ai_platform_network_init+0x1cc>)
 8003d92:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003d96:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003d9a:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <ai_platform_network_init+0x1d0>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d039      	beq.n	8003e14 <ai_platform_network_init+0xb8>
 8003da0:	e7fe      	b.n	8003da0 <ai_platform_network_init+0x44>
 8003da2:	f7ff f93d 	bl	8003020 <_ai_platform_acquire_crc>
 8003da6:	4b5e      	ldr	r3, [pc, #376]	; (8003f20 <ai_platform_network_init+0x1c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d010      	beq.n	8003dd6 <ai_platform_network_init+0x7a>
 8003db4:	4a5b      	ldr	r2, [pc, #364]	; (8003f24 <ai_platform_network_init+0x1c8>)
 8003db6:	2301      	movs	r3, #1
 8003db8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003dbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1fb      	bne.n	8003dbc <ai_platform_network_init+0x60>
 8003dc4:	4b58      	ldr	r3, [pc, #352]	; (8003f28 <ai_platform_network_init+0x1cc>)
 8003dc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003dca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003dce:	4b57      	ldr	r3, [pc, #348]	; (8003f2c <ai_platform_network_init+0x1d0>)
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d00d      	beq.n	8003df0 <ai_platform_network_init+0x94>
 8003dd4:	e7fe      	b.n	8003dd4 <ai_platform_network_init+0x78>
 8003dd6:	4a56      	ldr	r2, [pc, #344]	; (8003f30 <ai_platform_network_init+0x1d4>)
 8003dd8:	2301      	movs	r3, #1
 8003dda:	6093      	str	r3, [r2, #8]
 8003ddc:	6893      	ldr	r3, [r2, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1fc      	bne.n	8003ddc <ai_platform_network_init+0x80>
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <ai_platform_network_init+0x1cc>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <ai_platform_network_init+0x1d0>)
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d000      	beq.n	8003df0 <ai_platform_network_init+0x94>
 8003dee:	e7fe      	b.n	8003dee <ai_platform_network_init+0x92>
 8003df0:	f7ff f918 	bl	8003024 <_ai_platform_release_crc>
 8003df4:	2600      	movs	r6, #0
 8003df6:	4630      	mov	r0, r6
 8003df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <ai_platform_network_init+0x1d4>)
 8003dfe:	2301      	movs	r3, #1
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	6893      	ldr	r3, [r2, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1fc      	bne.n	8003e02 <ai_platform_network_init+0xa6>
 8003e08:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <ai_platform_network_init+0x1cc>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <ai_platform_network_init+0x1d0>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d11c      	bne.n	8003e4e <ai_platform_network_init+0xf2>
 8003e14:	f7ff f906 	bl	8003024 <_ai_platform_release_crc>
 8003e18:	2e00      	cmp	r6, #0
 8003e1a:	d06f      	beq.n	8003efc <ai_platform_network_init+0x1a0>
 8003e1c:	4b45      	ldr	r3, [pc, #276]	; (8003f34 <ai_platform_network_init+0x1d8>)
 8003e1e:	6832      	ldr	r2, [r6, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d115      	bne.n	8003e50 <ai_platform_network_init+0xf4>
 8003e24:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003e28:	6933      	ldr	r3, [r6, #16]
 8003e2a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8003e2e:	89f7      	ldrh	r7, [r6, #14]
 8003e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e32:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003e36:	2303      	movs	r3, #3
 8003e38:	84e7      	strh	r7, [r4, #38]	; 0x26
 8003e3a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8003e3e:	60e3      	str	r3, [r4, #12]
 8003e40:	4620      	mov	r0, r4
 8003e42:	4626      	mov	r6, r4
 8003e44:	f000 fbc2 	bl	80045cc <ai_layers_init_all>
 8003e48:	4630      	mov	r0, r6
 8003e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e4e:	e7fe      	b.n	8003e4e <ai_platform_network_init+0xf2>
 8003e50:	2101      	movs	r1, #1
 8003e52:	4630      	mov	r0, r6
 8003e54:	4635      	mov	r5, r6
 8003e56:	6876      	ldr	r6, [r6, #4]
 8003e58:	f7ff f894 	bl	8002f84 <ai_buffer_get_size>
 8003e5c:	f105 081c 	add.w	r8, r5, #28
 8003e60:	4681      	mov	r9, r0
 8003e62:	2101      	movs	r1, #1
 8003e64:	4640      	mov	r0, r8
 8003e66:	6a2f      	ldr	r7, [r5, #32]
 8003e68:	f7ff f88c 	bl	8002f84 <ai_buffer_get_size>
 8003e6c:	f1b9 0f00 	cmp.w	r9, #0
 8003e70:	d025      	beq.n	8003ebe <ai_platform_network_init+0x162>
 8003e72:	2201      	movs	r2, #1
 8003e74:	4696      	mov	lr, r2
 8003e76:	bb30      	cbnz	r0, 8003ec6 <ai_platform_network_init+0x16a>
 8003e78:	4680      	mov	r8, r0
 8003e7a:	4607      	mov	r7, r0
 8003e7c:	b376      	cbz	r6, 8003edc <ai_platform_network_init+0x180>
 8003e7e:	8be3      	ldrh	r3, [r4, #30]
 8003e80:	4573      	cmp	r3, lr
 8003e82:	d323      	bcc.n	8003ecc <ai_platform_network_init+0x170>
 8003e84:	b142      	cbz	r2, 8003e98 <ai_platform_network_init+0x13c>
 8003e86:	46ac      	mov	ip, r5
 8003e88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003e8c:	6a25      	ldr	r5, [r4, #32]
 8003e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e90:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003e94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003e98:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e9a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	42bb      	cmp	r3, r7
 8003ea2:	83a6      	strh	r6, [r4, #28]
 8003ea4:	d323      	bcc.n	8003eee <ai_platform_network_init+0x192>
 8003ea6:	b37f      	cbz	r7, 8003f08 <ai_platform_network_init+0x1ac>
 8003ea8:	46c4      	mov	ip, r8
 8003eaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003eae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003eb6:	46b6      	mov	lr, r6
 8003eb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ebc:	e7bb      	b.n	8003e36 <ai_platform_network_init+0xda>
 8003ebe:	464a      	mov	r2, r9
 8003ec0:	46ce      	mov	lr, r9
 8003ec2:	464d      	mov	r5, r9
 8003ec4:	e7d7      	b.n	8003e76 <ai_platform_network_init+0x11a>
 8003ec6:	b30f      	cbz	r7, 8003f0c <ai_platform_network_init+0x1b0>
 8003ec8:	2701      	movs	r7, #1
 8003eca:	e7d7      	b.n	8003e7c <ai_platform_network_init+0x120>
 8003ecc:	2212      	movs	r2, #18
 8003ece:	2116      	movs	r1, #22
 8003ed0:	f104 0010 	add.w	r0, r4, #16
 8003ed4:	f000 fb44 	bl	8004560 <core_set_error>
 8003ed8:	2600      	movs	r6, #0
 8003eda:	e78c      	b.n	8003df6 <ai_platform_network_init+0x9a>
 8003edc:	f1b9 0f00 	cmp.w	r9, #0
 8003ee0:	d0cd      	beq.n	8003e7e <ai_platform_network_init+0x122>
 8003ee2:	2110      	movs	r1, #16
 8003ee4:	2212      	movs	r2, #18
 8003ee6:	1860      	adds	r0, r4, r1
 8003ee8:	f000 fb3a 	bl	8004560 <core_set_error>
 8003eec:	e783      	b.n	8003df6 <ai_platform_network_init+0x9a>
 8003eee:	2213      	movs	r2, #19
 8003ef0:	2116      	movs	r1, #22
 8003ef2:	f104 0010 	add.w	r0, r4, #16
 8003ef6:	f000 fb33 	bl	8004560 <core_set_error>
 8003efa:	e77c      	b.n	8003df6 <ai_platform_network_init+0x9a>
 8003efc:	2110      	movs	r1, #16
 8003efe:	2211      	movs	r2, #17
 8003f00:	1860      	adds	r0, r4, r1
 8003f02:	f000 fb2d 	bl	8004560 <core_set_error>
 8003f06:	e776      	b.n	8003df6 <ai_platform_network_init+0x9a>
 8003f08:	46be      	mov	lr, r7
 8003f0a:	e794      	b.n	8003e36 <ai_platform_network_init+0xda>
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	2213      	movs	r2, #19
 8003f10:	1860      	adds	r0, r4, r1
 8003f12:	f000 fb25 	bl	8004560 <core_set_error>
 8003f16:	463e      	mov	r6, r7
 8003f18:	e76d      	b.n	8003df6 <ai_platform_network_init+0x9a>
 8003f1a:	bf00      	nop
 8003f1c:	a1c00100 	.word	0xa1c00100
 8003f20:	e0042000 	.word	0xe0042000
 8003f24:	58024000 	.word	0x58024000
 8003f28:	f407a5c2 	.word	0xf407a5c2
 8003f2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f30:	40023000 	.word	0x40023000
 8003f34:	a1facade 	.word	0xa1facade

08003f38 <ai_platform_network_post_init>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	b1f0      	cbz	r0, 8003f7a <ai_platform_network_post_init+0x42>
 8003f3c:	4b3c      	ldr	r3, [pc, #240]	; (8004030 <ai_platform_network_post_init+0xf8>)
 8003f3e:	6802      	ldr	r2, [r0, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	4604      	mov	r4, r0
 8003f44:	d119      	bne.n	8003f7a <ai_platform_network_post_init+0x42>
 8003f46:	f7ff f86b 	bl	8003020 <_ai_platform_acquire_crc>
 8003f4a:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <ai_platform_network_post_init+0xfc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d03b      	beq.n	8003fd0 <ai_platform_network_post_init+0x98>
 8003f58:	4a37      	ldr	r2, [pc, #220]	; (8004038 <ai_platform_network_post_init+0x100>)
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1fb      	bne.n	8003f60 <ai_platform_network_post_init+0x28>
 8003f68:	4b34      	ldr	r3, [pc, #208]	; (800403c <ai_platform_network_post_init+0x104>)
 8003f6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f72:	4b33      	ldr	r3, [pc, #204]	; (8004040 <ai_platform_network_post_init+0x108>)
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d037      	beq.n	8003fe8 <ai_platform_network_post_init+0xb0>
 8003f78:	e7fe      	b.n	8003f78 <ai_platform_network_post_init+0x40>
 8003f7a:	f7ff f851 	bl	8003020 <_ai_platform_acquire_crc>
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <ai_platform_network_post_init+0xfc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d010      	beq.n	8003fae <ai_platform_network_post_init+0x76>
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <ai_platform_network_post_init+0x100>)
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1fb      	bne.n	8003f94 <ai_platform_network_post_init+0x5c>
 8003f9c:	4b27      	ldr	r3, [pc, #156]	; (800403c <ai_platform_network_post_init+0x104>)
 8003f9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003fa2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003fa6:	4b26      	ldr	r3, [pc, #152]	; (8004040 <ai_platform_network_post_init+0x108>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d00d      	beq.n	8003fc8 <ai_platform_network_post_init+0x90>
 8003fac:	e7fe      	b.n	8003fac <ai_platform_network_post_init+0x74>
 8003fae:	4a25      	ldr	r2, [pc, #148]	; (8004044 <ai_platform_network_post_init+0x10c>)
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6093      	str	r3, [r2, #8]
 8003fb4:	6893      	ldr	r3, [r2, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1fc      	bne.n	8003fb4 <ai_platform_network_post_init+0x7c>
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <ai_platform_network_post_init+0x104>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <ai_platform_network_post_init+0x108>)
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d000      	beq.n	8003fc8 <ai_platform_network_post_init+0x90>
 8003fc6:	e7fe      	b.n	8003fc6 <ai_platform_network_post_init+0x8e>
 8003fc8:	f7ff f82c 	bl	8003024 <_ai_platform_release_crc>
 8003fcc:	2000      	movs	r0, #0
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <ai_platform_network_post_init+0x10c>)
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	6093      	str	r3, [r2, #8]
 8003fd6:	6893      	ldr	r3, [r2, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1fc      	bne.n	8003fd6 <ai_platform_network_post_init+0x9e>
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <ai_platform_network_post_init+0x104>)
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <ai_platform_network_post_init+0x108>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11a      	bne.n	800401e <ai_platform_network_post_init+0xe6>
 8003fe8:	f7ff f81c 	bl	8003024 <_ai_platform_release_crc>
 8003fec:	68e3      	ldr	r3, [r4, #12]
 8003fee:	f013 0502 	ands.w	r5, r3, #2
 8003ff2:	d015      	beq.n	8004020 <ai_platform_network_post_init+0xe8>
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 faf7 	bl	80045e8 <ai_layers_post_init_all>
 8003ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ffc:	b16b      	cbz	r3, 800401a <ai_platform_network_post_init+0xe2>
 8003ffe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004000:	e007      	b.n	8004012 <ai_platform_network_post_init+0xda>
 8004002:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004006:	4798      	blx	r3
 8004008:	692b      	ldr	r3, [r5, #16]
 800400a:	42ab      	cmp	r3, r5
 800400c:	d005      	beq.n	800401a <ai_platform_network_post_init+0xe2>
 800400e:	b123      	cbz	r3, 800401a <ai_platform_network_post_init+0xe2>
 8004010:	461d      	mov	r5, r3
 8004012:	4629      	mov	r1, r5
 8004014:	2000      	movs	r0, #0
 8004016:	2d00      	cmp	r5, #0
 8004018:	d1f3      	bne.n	8004002 <ai_platform_network_post_init+0xca>
 800401a:	2001      	movs	r0, #1
 800401c:	bd38      	pop	{r3, r4, r5, pc}
 800401e:	e7fe      	b.n	800401e <ai_platform_network_post_init+0xe6>
 8004020:	2210      	movs	r2, #16
 8004022:	2111      	movs	r1, #17
 8004024:	18a0      	adds	r0, r4, r2
 8004026:	f000 fa9b 	bl	8004560 <core_set_error>
 800402a:	4628      	mov	r0, r5
 800402c:	bd38      	pop	{r3, r4, r5, pc}
 800402e:	bf00      	nop
 8004030:	a1c00100 	.word	0xa1c00100
 8004034:	e0042000 	.word	0xe0042000
 8004038:	58024000 	.word	0x58024000
 800403c:	f407a5c2 	.word	0xf407a5c2
 8004040:	b5e8b5cd 	.word	0xb5e8b5cd
 8004044:	40023000 	.word	0x40023000

08004048 <ai_platform_network_process>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	460e      	mov	r6, r1
 800404e:	b085      	sub	sp, #20
 8004050:	4693      	mov	fp, r2
 8004052:	4605      	mov	r5, r0
 8004054:	b120      	cbz	r0, 8004060 <ai_platform_network_process+0x18>
 8004056:	4bb8      	ldr	r3, [pc, #736]	; (8004338 <ai_platform_network_process+0x2f0>)
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	bf18      	it	ne
 800405e:	2500      	movne	r5, #0
 8004060:	f7fe ffde 	bl	8003020 <_ai_platform_acquire_crc>
 8004064:	4bb5      	ldr	r3, [pc, #724]	; (800433c <ai_platform_network_process+0x2f4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004070:	d010      	beq.n	8004094 <ai_platform_network_process+0x4c>
 8004072:	4ab3      	ldr	r2, [pc, #716]	; (8004340 <ai_platform_network_process+0x2f8>)
 8004074:	2301      	movs	r3, #1
 8004076:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800407a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1fb      	bne.n	800407a <ai_platform_network_process+0x32>
 8004082:	4bb0      	ldr	r3, [pc, #704]	; (8004344 <ai_platform_network_process+0x2fc>)
 8004084:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004088:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800408c:	4bae      	ldr	r3, [pc, #696]	; (8004348 <ai_platform_network_process+0x300>)
 800408e:	429a      	cmp	r2, r3
 8004090:	d00d      	beq.n	80040ae <ai_platform_network_process+0x66>
 8004092:	e7fe      	b.n	8004092 <ai_platform_network_process+0x4a>
 8004094:	4aad      	ldr	r2, [pc, #692]	; (800434c <ai_platform_network_process+0x304>)
 8004096:	2301      	movs	r3, #1
 8004098:	6093      	str	r3, [r2, #8]
 800409a:	6893      	ldr	r3, [r2, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1fc      	bne.n	800409a <ai_platform_network_process+0x52>
 80040a0:	4ba8      	ldr	r3, [pc, #672]	; (8004344 <ai_platform_network_process+0x2fc>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	4ba8      	ldr	r3, [pc, #672]	; (8004348 <ai_platform_network_process+0x300>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	f040 812c 	bne.w	8004306 <ai_platform_network_process+0x2be>
 80040ae:	f7fe ffb9 	bl	8003024 <_ai_platform_release_crc>
 80040b2:	2d00      	cmp	r5, #0
 80040b4:	f000 8154 	beq.w	8004360 <ai_platform_network_process+0x318>
 80040b8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8124 	beq.w	8004308 <ai_platform_network_process+0x2c0>
 80040c0:	68eb      	ldr	r3, [r5, #12]
 80040c2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2700      	movs	r7, #0
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	616f      	str	r7, [r5, #20]
 80040d0:	f040 813e 	bne.w	8004350 <ai_platform_network_process+0x308>
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	f000 811d 	beq.w	8004314 <ai_platform_network_process+0x2cc>
 80040da:	f1ba 0f00 	cmp.w	sl, #0
 80040de:	f000 8119 	beq.w	8004314 <ai_platform_network_process+0x2cc>
 80040e2:	f8ba 3000 	ldrh.w	r3, [sl]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8114 	beq.w	8004314 <ai_platform_network_process+0x2cc>
 80040ec:	69b3      	ldr	r3, [r6, #24]
 80040ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80040f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d072      	beq.n	80041e6 <ai_platform_network_process+0x19e>
 8004100:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004104:	2c00      	cmp	r4, #0
 8004106:	d06e      	beq.n	80041e6 <ai_platform_network_process+0x19e>
 8004108:	f8da 3008 	ldr.w	r3, [sl, #8]
 800410c:	f8d3 9000 	ldr.w	r9, [r3]
 8004110:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004114:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004118:	f000 81de 	beq.w	80044d8 <ai_platform_network_process+0x490>
 800411c:	69a3      	ldr	r3, [r4, #24]
 800411e:	2101      	movs	r1, #1
 8004120:	4630      	mov	r0, r6
 8004122:	685d      	ldr	r5, [r3, #4]
 8004124:	f7fe ff2e 	bl	8002f84 <ai_buffer_get_size>
 8004128:	4285      	cmp	r5, r0
 800412a:	f0c0 811b 	bcc.w	8004364 <ai_platform_network_process+0x31c>
 800412e:	68e0      	ldr	r0, [r4, #12]
 8004130:	69b1      	ldr	r1, [r6, #24]
 8004132:	68c2      	ldr	r2, [r0, #12]
 8004134:	68cb      	ldr	r3, [r1, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	f040 8114 	bne.w	8004364 <ai_platform_network_process+0x31c>
 800413c:	6882      	ldr	r2, [r0, #8]
 800413e:	688b      	ldr	r3, [r1, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 810f 	bne.w	8004364 <ai_platform_network_process+0x31c>
 8004146:	6842      	ldr	r2, [r0, #4]
 8004148:	684b      	ldr	r3, [r1, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	f040 810a 	bne.w	8004364 <ai_platform_network_process+0x31c>
 8004150:	69a3      	ldr	r3, [r4, #24]
 8004152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004156:	f001 f95f 	bl	8005418 <ai_array_get_data_byte_size>
 800415a:	4605      	mov	r5, r0
 800415c:	4620      	mov	r0, r4
 800415e:	f001 f985 	bl	800546c <get_tensor_byte_size>
 8004162:	4285      	cmp	r5, r0
 8004164:	f0c0 80fe 	bcc.w	8004364 <ai_platform_network_process+0x31c>
 8004168:	69a3      	ldr	r3, [r4, #24]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	f001 f8c0 	bl	80052f0 <ai_array_to_buffer_fmt>
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	4058      	eors	r0, r3
 8004174:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004178:	f040 81b9 	bne.w	80044ee <ai_platform_network_process+0x4a6>
 800417c:	6873      	ldr	r3, [r6, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 81ac 	beq.w	80044dc <ai_platform_network_process+0x494>
 8004184:	69b3      	ldr	r3, [r6, #24]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 819c 	beq.w	80044c6 <ai_platform_network_process+0x47e>
 800418e:	9a01      	ldr	r2, [sp, #4]
 8004190:	429a      	cmp	r2, r3
 8004192:	bf38      	it	cc
 8004194:	461a      	movcc	r2, r3
 8004196:	4620      	mov	r0, r4
 8004198:	9201      	str	r2, [sp, #4]
 800419a:	f001 f967 	bl	800546c <get_tensor_byte_size>
 800419e:	f8c8 0008 	str.w	r0, [r8, #8]
 80041a2:	69b3      	ldr	r3, [r6, #24]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	fb00 f303 	mul.w	r3, r0, r3
 80041aa:	f8c8 300c 	str.w	r3, [r8, #12]
 80041ae:	6871      	ldr	r1, [r6, #4]
 80041b0:	f8c8 1004 	str.w	r1, [r8, #4]
 80041b4:	440b      	add	r3, r1
 80041b6:	f849 300b 	str.w	r3, [r9, fp]
 80041ba:	69a0      	ldr	r0, [r4, #24]
 80041bc:	6803      	ldr	r3, [r0, #0]
 80041be:	009a      	lsls	r2, r3, #2
 80041c0:	f107 0701 	add.w	r7, r7, #1
 80041c4:	f106 061c 	add.w	r6, r6, #28
 80041c8:	f100 80af 	bmi.w	800432a <ai_platform_network_process+0x2e2>
 80041cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	4419      	add	r1, r3
 80041d4:	6081      	str	r1, [r0, #8]
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	f8ba 3000 	ldrh.w	r3, [sl]
 80041e2:	42bb      	cmp	r3, r7
 80041e4:	d888      	bhi.n	80040f8 <ai_platform_network_process+0xb0>
 80041e6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80041ea:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80041ec:	f1bb 0f00 	cmp.w	fp, #0
 80041f0:	f000 8186 	beq.w	8004500 <ai_platform_network_process+0x4b8>
 80041f4:	2a01      	cmp	r2, #1
 80041f6:	f240 815e 	bls.w	80044b6 <ai_platform_network_process+0x46e>
 80041fa:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80041fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8157 	beq.w	80044b6 <ai_platform_network_process+0x46e>
 8004208:	465e      	mov	r6, fp
 800420a:	2700      	movs	r7, #0
 800420c:	462c      	mov	r4, r5
 800420e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80b4 	beq.w	8004380 <ai_platform_network_process+0x338>
 8004218:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800421c:	2d00      	cmp	r5, #0
 800421e:	f000 80af 	beq.w	8004380 <ai_platform_network_process+0x338>
 8004222:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004226:	f8d3 8000 	ldr.w	r8, [r3]
 800422a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800422e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004232:	f000 8171 	beq.w	8004518 <ai_platform_network_process+0x4d0>
 8004236:	69ab      	ldr	r3, [r5, #24]
 8004238:	2101      	movs	r1, #1
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	9302      	str	r3, [sp, #8]
 800423e:	4630      	mov	r0, r6
 8004240:	f7fe fea0 	bl	8002f84 <ai_buffer_get_size>
 8004244:	9b02      	ldr	r3, [sp, #8]
 8004246:	4283      	cmp	r3, r0
 8004248:	f0c0 8134 	bcc.w	80044b4 <ai_platform_network_process+0x46c>
 800424c:	68e8      	ldr	r0, [r5, #12]
 800424e:	69b1      	ldr	r1, [r6, #24]
 8004250:	68c2      	ldr	r2, [r0, #12]
 8004252:	68cb      	ldr	r3, [r1, #12]
 8004254:	429a      	cmp	r2, r3
 8004256:	f040 812d 	bne.w	80044b4 <ai_platform_network_process+0x46c>
 800425a:	6882      	ldr	r2, [r0, #8]
 800425c:	688b      	ldr	r3, [r1, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	f040 8128 	bne.w	80044b4 <ai_platform_network_process+0x46c>
 8004264:	6842      	ldr	r2, [r0, #4]
 8004266:	684b      	ldr	r3, [r1, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	f040 8123 	bne.w	80044b4 <ai_platform_network_process+0x46c>
 800426e:	69ab      	ldr	r3, [r5, #24]
 8004270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004274:	f001 f8d0 	bl	8005418 <ai_array_get_data_byte_size>
 8004278:	9002      	str	r0, [sp, #8]
 800427a:	4628      	mov	r0, r5
 800427c:	f001 f8f6 	bl	800546c <get_tensor_byte_size>
 8004280:	9b02      	ldr	r3, [sp, #8]
 8004282:	4283      	cmp	r3, r0
 8004284:	f0c0 8116 	bcc.w	80044b4 <ai_platform_network_process+0x46c>
 8004288:	69ab      	ldr	r3, [r5, #24]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	f001 f830 	bl	80052f0 <ai_array_to_buffer_fmt>
 8004290:	6833      	ldr	r3, [r6, #0]
 8004292:	4058      	eors	r0, r3
 8004294:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004298:	f040 8136 	bne.w	8004508 <ai_platform_network_process+0x4c0>
 800429c:	6873      	ldr	r3, [r6, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 814d 	beq.w	800453e <ai_platform_network_process+0x4f6>
 80042a4:	69b3      	ldr	r3, [r6, #24]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 813f 	beq.w	800452c <ai_platform_network_process+0x4e4>
 80042ae:	9a01      	ldr	r2, [sp, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bf38      	it	cc
 80042b4:	461a      	movcc	r2, r3
 80042b6:	4628      	mov	r0, r5
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	f001 f8d7 	bl	800546c <get_tensor_byte_size>
 80042be:	f8ca 0008 	str.w	r0, [sl, #8]
 80042c2:	69b3      	ldr	r3, [r6, #24]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	fb00 f303 	mul.w	r3, r0, r3
 80042ca:	f8ca 300c 	str.w	r3, [sl, #12]
 80042ce:	6871      	ldr	r1, [r6, #4]
 80042d0:	f8ca 1004 	str.w	r1, [sl, #4]
 80042d4:	440b      	add	r3, r1
 80042d6:	f848 300b 	str.w	r3, [r8, fp]
 80042da:	69a8      	ldr	r0, [r5, #24]
 80042dc:	6803      	ldr	r3, [r0, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f107 0701 	add.w	r7, r7, #1
 80042e4:	f106 061c 	add.w	r6, r6, #28
 80042e8:	d445      	bmi.n	8004376 <ai_platform_network_process+0x32e>
 80042ea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	4419      	add	r1, r3
 80042f2:	6081      	str	r1, [r0, #8]
 80042f4:	69ab      	ldr	r3, [r5, #24]
 80042f6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004300:	429f      	cmp	r7, r3
 8004302:	d384      	bcc.n	800420e <ai_platform_network_process+0x1c6>
 8004304:	e03c      	b.n	8004380 <ai_platform_network_process+0x338>
 8004306:	e7fe      	b.n	8004306 <ai_platform_network_process+0x2be>
 8004308:	68ea      	ldr	r2, [r5, #12]
 800430a:	616b      	str	r3, [r5, #20]
 800430c:	f002 0203 	and.w	r2, r2, #3
 8004310:	2a03      	cmp	r2, #3
 8004312:	d11d      	bne.n	8004350 <ai_platform_network_process+0x308>
 8004314:	2217      	movs	r2, #23
 8004316:	2112      	movs	r1, #18
 8004318:	f105 0010 	add.w	r0, r5, #16
 800431c:	f000 f920 	bl	8004560 <core_set_error>
 8004320:	2400      	movs	r4, #0
 8004322:	4620      	mov	r0, r4
 8004324:	b005      	add	sp, #20
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432a:	f8ba 3000 	ldrh.w	r3, [sl]
 800432e:	429f      	cmp	r7, r3
 8004330:	f4ff aee2 	bcc.w	80040f8 <ai_platform_network_process+0xb0>
 8004334:	e757      	b.n	80041e6 <ai_platform_network_process+0x19e>
 8004336:	bf00      	nop
 8004338:	a1c00100 	.word	0xa1c00100
 800433c:	e0042000 	.word	0xe0042000
 8004340:	58024000 	.word	0x58024000
 8004344:	f407a5c2 	.word	0xf407a5c2
 8004348:	b5e8b5cd 	.word	0xb5e8b5cd
 800434c:	40023000 	.word	0x40023000
 8004350:	2230      	movs	r2, #48	; 0x30
 8004352:	2111      	movs	r1, #17
 8004354:	f105 0010 	add.w	r0, r5, #16
 8004358:	f000 f902 	bl	8004560 <core_set_error>
 800435c:	2400      	movs	r4, #0
 800435e:	e7e0      	b.n	8004322 <ai_platform_network_process+0x2da>
 8004360:	462c      	mov	r4, r5
 8004362:	e7de      	b.n	8004322 <ai_platform_network_process+0x2da>
 8004364:	9d02      	ldr	r5, [sp, #8]
 8004366:	2218      	movs	r2, #24
 8004368:	2112      	movs	r1, #18
 800436a:	f105 0010 	add.w	r0, r5, #16
 800436e:	f000 f8f7 	bl	8004560 <core_set_error>
 8004372:	2400      	movs	r4, #0
 8004374:	e7d5      	b.n	8004322 <ai_platform_network_process+0x2da>
 8004376:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800437a:	429f      	cmp	r7, r3
 800437c:	f4ff af47 	bcc.w	800420e <ai_platform_network_process+0x1c6>
 8004380:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004384:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004386:	82a3      	strh	r3, [r4, #20]
 8004388:	4625      	mov	r5, r4
 800438a:	2a00      	cmp	r2, #0
 800438c:	f040 808c 	bne.w	80044a8 <ai_platform_network_process+0x460>
 8004390:	4616      	mov	r6, r2
 8004392:	4617      	mov	r7, r2
 8004394:	8aec      	ldrh	r4, [r5, #22]
 8004396:	429c      	cmp	r4, r3
 8004398:	bf38      	it	cc
 800439a:	46ab      	movcc	fp, r5
 800439c:	d2c1      	bcs.n	8004322 <ai_platform_network_process+0x2da>
 800439e:	2e00      	cmp	r6, #0
 80043a0:	d030      	beq.n	8004404 <ai_platform_network_process+0x3bc>
 80043a2:	f04f 0800 	mov.w	r8, #0
 80043a6:	e014      	b.n	80043d2 <ai_platform_network_process+0x38a>
 80043a8:	6882      	ldr	r2, [r0, #8]
 80043aa:	68c5      	ldr	r5, [r0, #12]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	1b52      	subs	r2, r2, r5
 80043b0:	4413      	add	r3, r2
 80043b2:	6083      	str	r3, [r0, #8]
 80043b4:	698b      	ldr	r3, [r1, #24]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80043be:	f859 200a 	ldr.w	r2, [r9, sl]
 80043c2:	440b      	add	r3, r1
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf24      	itt	cs
 80043c8:	68e3      	ldrcs	r3, [r4, #12]
 80043ca:	1ad3      	subcs	r3, r2, r3
 80043cc:	6063      	str	r3, [r4, #4]
 80043ce:	f108 0801 	add.w	r8, r8, #1
 80043d2:	8833      	ldrh	r3, [r6, #0]
 80043d4:	4543      	cmp	r3, r8
 80043d6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80043da:	d913      	bls.n	8004404 <ai_platform_network_process+0x3bc>
 80043dc:	6873      	ldr	r3, [r6, #4]
 80043de:	b18b      	cbz	r3, 8004404 <ai_platform_network_process+0x3bc>
 80043e0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80043e4:	b171      	cbz	r1, 8004404 <ai_platform_network_process+0x3bc>
 80043e6:	6988      	ldr	r0, [r1, #24]
 80043e8:	68b2      	ldr	r2, [r6, #8]
 80043ea:	6803      	ldr	r3, [r0, #0]
 80043ec:	f8d2 9000 	ldr.w	r9, [r2]
 80043f0:	009d      	lsls	r5, r3, #2
 80043f2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80043f6:	d5d7      	bpl.n	80043a8 <ai_platform_network_process+0x360>
 80043f8:	6881      	ldr	r1, [r0, #8]
 80043fa:	68a2      	ldr	r2, [r4, #8]
 80043fc:	6860      	ldr	r0, [r4, #4]
 80043fe:	f000 fef1 	bl	80051e4 <st_int8_copy>
 8004402:	e7da      	b.n	80043ba <ai_platform_network_process+0x372>
 8004404:	4658      	mov	r0, fp
 8004406:	f000 f903 	bl	8004610 <ai_layers_forward_all>
 800440a:	2f00      	cmp	r7, #0
 800440c:	d03d      	beq.n	800448a <ai_platform_network_process+0x442>
 800440e:	2400      	movs	r4, #0
 8004410:	e016      	b.n	8004440 <ai_platform_network_process+0x3f8>
 8004412:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004416:	f859 100a 	ldr.w	r1, [r9, sl]
 800441a:	4413      	add	r3, r2
 800441c:	428b      	cmp	r3, r1
 800441e:	bf24      	itt	cs
 8004420:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004424:	1acb      	subcs	r3, r1, r3
 8004426:	f8c8 3004 	str.w	r3, [r8, #4]
 800442a:	6981      	ldr	r1, [r0, #24]
 800442c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004430:	1b52      	subs	r2, r2, r5
 8004432:	4413      	add	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
 8004436:	6983      	ldr	r3, [r0, #24]
 8004438:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	3401      	adds	r4, #1
 8004440:	883b      	ldrh	r3, [r7, #0]
 8004442:	42a3      	cmp	r3, r4
 8004444:	d921      	bls.n	800448a <ai_platform_network_process+0x442>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	b1fb      	cbz	r3, 800448a <ai_platform_network_process+0x442>
 800444a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800444e:	b1e0      	cbz	r0, 800448a <ai_platform_network_process+0x442>
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	6983      	ldr	r3, [r0, #24]
 8004454:	f8d2 9000 	ldr.w	r9, [r2]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	0092      	lsls	r2, r2, #2
 800445c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004460:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004464:	d5d5      	bpl.n	8004412 <ai_platform_network_process+0x3ca>
 8004466:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800446a:	6898      	ldr	r0, [r3, #8]
 800446c:	f000 feba 	bl	80051e4 <st_int8_copy>
 8004470:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004474:	f859 200a 	ldr.w	r2, [r9, sl]
 8004478:	440b      	add	r3, r1
 800447a:	4293      	cmp	r3, r2
 800447c:	bf24      	itt	cs
 800447e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004482:	1ad3      	subcs	r3, r2, r3
 8004484:	f8c8 3004 	str.w	r3, [r8, #4]
 8004488:	e7d9      	b.n	800443e <ai_platform_network_process+0x3f6>
 800448a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800448e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8004492:	3401      	adds	r4, #1
 8004494:	b2a4      	uxth	r4, r4
 8004496:	42a3      	cmp	r3, r4
 8004498:	f8ab 4016 	strh.w	r4, [fp, #22]
 800449c:	f63f af7f 	bhi.w	800439e <ai_platform_network_process+0x356>
 80044a0:	4620      	mov	r0, r4
 80044a2:	b005      	add	sp, #20
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a8:	2a01      	cmp	r2, #1
 80044aa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80044ac:	d03c      	beq.n	8004528 <ai_platform_network_process+0x4e0>
 80044ae:	f106 070c 	add.w	r7, r6, #12
 80044b2:	e76f      	b.n	8004394 <ai_platform_network_process+0x34c>
 80044b4:	4625      	mov	r5, r4
 80044b6:	2218      	movs	r2, #24
 80044b8:	2113      	movs	r1, #19
 80044ba:	f105 0010 	add.w	r0, r5, #16
 80044be:	f000 f84f 	bl	8004560 <core_set_error>
 80044c2:	2400      	movs	r4, #0
 80044c4:	e72d      	b.n	8004322 <ai_platform_network_process+0x2da>
 80044c6:	9d02      	ldr	r5, [sp, #8]
 80044c8:	4604      	mov	r4, r0
 80044ca:	2221      	movs	r2, #33	; 0x21
 80044cc:	2112      	movs	r1, #18
 80044ce:	f105 0010 	add.w	r0, r5, #16
 80044d2:	f000 f845 	bl	8004560 <core_set_error>
 80044d6:	e724      	b.n	8004322 <ai_platform_network_process+0x2da>
 80044d8:	9d02      	ldr	r5, [sp, #8]
 80044da:	e71b      	b.n	8004314 <ai_platform_network_process+0x2cc>
 80044dc:	9d02      	ldr	r5, [sp, #8]
 80044de:	4604      	mov	r4, r0
 80044e0:	2217      	movs	r2, #23
 80044e2:	2112      	movs	r1, #18
 80044e4:	f105 0010 	add.w	r0, r5, #16
 80044e8:	f000 f83a 	bl	8004560 <core_set_error>
 80044ec:	e719      	b.n	8004322 <ai_platform_network_process+0x2da>
 80044ee:	9d02      	ldr	r5, [sp, #8]
 80044f0:	2219      	movs	r2, #25
 80044f2:	2112      	movs	r1, #18
 80044f4:	f105 0010 	add.w	r0, r5, #16
 80044f8:	f000 f832 	bl	8004560 <core_set_error>
 80044fc:	2400      	movs	r4, #0
 80044fe:	e710      	b.n	8004322 <ai_platform_network_process+0x2da>
 8004500:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004504:	82ab      	strh	r3, [r5, #20]
 8004506:	e740      	b.n	800438a <ai_platform_network_process+0x342>
 8004508:	f104 0010 	add.w	r0, r4, #16
 800450c:	2219      	movs	r2, #25
 800450e:	2113      	movs	r1, #19
 8004510:	f000 f826 	bl	8004560 <core_set_error>
 8004514:	2400      	movs	r4, #0
 8004516:	e704      	b.n	8004322 <ai_platform_network_process+0x2da>
 8004518:	f104 0010 	add.w	r0, r4, #16
 800451c:	2217      	movs	r2, #23
 800451e:	2113      	movs	r1, #19
 8004520:	f000 f81e 	bl	8004560 <core_set_error>
 8004524:	4654      	mov	r4, sl
 8004526:	e6fc      	b.n	8004322 <ai_platform_network_process+0x2da>
 8004528:	2700      	movs	r7, #0
 800452a:	e733      	b.n	8004394 <ai_platform_network_process+0x34c>
 800452c:	4625      	mov	r5, r4
 800452e:	2221      	movs	r2, #33	; 0x21
 8004530:	4604      	mov	r4, r0
 8004532:	2113      	movs	r1, #19
 8004534:	f105 0010 	add.w	r0, r5, #16
 8004538:	f000 f812 	bl	8004560 <core_set_error>
 800453c:	e6f1      	b.n	8004322 <ai_platform_network_process+0x2da>
 800453e:	4625      	mov	r5, r4
 8004540:	2217      	movs	r2, #23
 8004542:	4604      	mov	r4, r0
 8004544:	2113      	movs	r1, #19
 8004546:	f105 0010 	add.w	r0, r5, #16
 800454a:	f000 f809 	bl	8004560 <core_set_error>
 800454e:	e6e8      	b.n	8004322 <ai_platform_network_process+0x2da>

08004550 <core_init>:
 8004550:	2001      	movs	r0, #1
 8004552:	4770      	bx	lr

08004554 <core_get_error>:
 8004554:	4603      	mov	r3, r0
 8004556:	2200      	movs	r2, #0
 8004558:	6800      	ldr	r0, [r0, #0]
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop

08004560 <core_set_error>:
 8004560:	4603      	mov	r3, r0
 8004562:	7800      	ldrb	r0, [r0, #0]
 8004564:	b108      	cbz	r0, 800456a <core_set_error+0xa>
 8004566:	2000      	movs	r0, #0
 8004568:	4770      	bx	lr
 800456a:	7019      	strb	r1, [r3, #0]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	f362 211f 	bfi	r1, r2, #8, #24
 8004572:	2001      	movs	r0, #1
 8004574:	6019      	str	r1, [r3, #0]
 8004576:	4770      	bx	lr

08004578 <ai_check_custom_types>:
 8004578:	b082      	sub	sp, #8
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <ai_check_custom_types+0x50>)
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	b118      	cbz	r0, 8004588 <ai_check_custom_types+0x10>
 8004580:	7803      	ldrb	r3, [r0, #0]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d002      	beq.n	800458c <ai_check_custom_types+0x14>
 8004586:	2000      	movs	r0, #0
 8004588:	b002      	add	sp, #8
 800458a:	4770      	bx	lr
 800458c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <ai_check_custom_types+0x26>
 8004594:	2001      	movs	r0, #1
 8004596:	f080 0001 	eor.w	r0, r0, #1
 800459a:	b002      	add	sp, #8
 800459c:	4770      	bx	lr
 800459e:	7842      	ldrb	r2, [r0, #1]
 80045a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	f100 0001 	add.w	r0, r0, #1
 80045aa:	d1f3      	bne.n	8004594 <ai_check_custom_types+0x1c>
 80045ac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80045b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1ed      	bne.n	8004594 <ai_check_custom_types+0x1c>
 80045b8:	7842      	ldrb	r2, [r0, #1]
 80045ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d1e8      	bne.n	8004594 <ai_check_custom_types+0x1c>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e7e7      	b.n	8004596 <ai_check_custom_types+0x1e>
 80045c6:	bf00      	nop
 80045c8:	84048403 	.word	0x84048403

080045cc <ai_layers_init_all>:
 80045cc:	4601      	mov	r1, r0
 80045ce:	2000      	movs	r0, #0
 80045d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80045d2:	b143      	cbz	r3, 80045e6 <ai_layers_init_all+0x1a>
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	60d9      	str	r1, [r3, #12]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f100 0001 	add.w	r0, r0, #1
 80045de:	d002      	beq.n	80045e6 <ai_layers_init_all+0x1a>
 80045e0:	b10a      	cbz	r2, 80045e6 <ai_layers_init_all+0x1a>
 80045e2:	4613      	mov	r3, r2
 80045e4:	e7f5      	b.n	80045d2 <ai_layers_init_all+0x6>
 80045e6:	4770      	bx	lr

080045e8 <ai_layers_post_init_all>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80045ec:	2500      	movs	r5, #0
 80045ee:	b16c      	cbz	r4, 800460c <ai_layers_post_init_all+0x24>
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	07db      	lsls	r3, r3, #31
 80045f4:	d504      	bpl.n	8004600 <ai_layers_post_init_all+0x18>
 80045f6:	6a23      	ldr	r3, [r4, #32]
 80045f8:	4620      	mov	r0, r4
 80045fa:	b10b      	cbz	r3, 8004600 <ai_layers_post_init_all+0x18>
 80045fc:	4798      	blx	r3
 80045fe:	3501      	adds	r5, #1
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	42a3      	cmp	r3, r4
 8004604:	d002      	beq.n	800460c <ai_layers_post_init_all+0x24>
 8004606:	b10b      	cbz	r3, 800460c <ai_layers_post_init_all+0x24>
 8004608:	461c      	mov	r4, r3
 800460a:	e7f0      	b.n	80045ee <ai_layers_post_init_all+0x6>
 800460c:	4628      	mov	r0, r5
 800460e:	bd38      	pop	{r3, r4, r5, pc}

08004610 <ai_layers_forward_all>:
 8004610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004614:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004618:	4604      	mov	r4, r0
 800461a:	f1b8 0f00 	cmp.w	r8, #0
 800461e:	d02b      	beq.n	8004678 <ai_layers_forward_all+0x68>
 8004620:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004622:	6381      	str	r1, [r0, #56]	; 0x38
 8004624:	b321      	cbz	r1, 8004670 <ai_layers_forward_all+0x60>
 8004626:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004628:	2001      	movs	r0, #1
 800462a:	47c0      	blx	r8
 800462c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800462e:	b1fe      	cbz	r6, 8004670 <ai_layers_forward_all+0x60>
 8004630:	2700      	movs	r7, #0
 8004632:	4631      	mov	r1, r6
 8004634:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004636:	2002      	movs	r0, #2
 8004638:	47c0      	blx	r8
 800463a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800463c:	4628      	mov	r0, r5
 800463e:	696b      	ldr	r3, [r5, #20]
 8004640:	4798      	blx	r3
 8004642:	692e      	ldr	r6, [r5, #16]
 8004644:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004648:	42b5      	cmp	r5, r6
 800464a:	f04f 0003 	mov.w	r0, #3
 800464e:	d007      	beq.n	8004660 <ai_layers_forward_all+0x50>
 8004650:	47c0      	blx	r8
 8004652:	3701      	adds	r7, #1
 8004654:	63a6      	str	r6, [r4, #56]	; 0x38
 8004656:	2e00      	cmp	r6, #0
 8004658:	d1eb      	bne.n	8004632 <ai_layers_forward_all+0x22>
 800465a:	4638      	mov	r0, r7
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004660:	2003      	movs	r0, #3
 8004662:	47c0      	blx	r8
 8004664:	2300      	movs	r3, #0
 8004666:	3701      	adds	r7, #1
 8004668:	63a3      	str	r3, [r4, #56]	; 0x38
 800466a:	4638      	mov	r0, r7
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	2700      	movs	r7, #0
 8004672:	4638      	mov	r0, r7
 8004674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004678:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800467a:	6385      	str	r5, [r0, #56]	; 0x38
 800467c:	2d00      	cmp	r5, #0
 800467e:	d0f7      	beq.n	8004670 <ai_layers_forward_all+0x60>
 8004680:	4647      	mov	r7, r8
 8004682:	696b      	ldr	r3, [r5, #20]
 8004684:	4628      	mov	r0, r5
 8004686:	4798      	blx	r3
 8004688:	462b      	mov	r3, r5
 800468a:	692d      	ldr	r5, [r5, #16]
 800468c:	429d      	cmp	r5, r3
 800468e:	d004      	beq.n	800469a <ai_layers_forward_all+0x8a>
 8004690:	63a5      	str	r5, [r4, #56]	; 0x38
 8004692:	3701      	adds	r7, #1
 8004694:	2d00      	cmp	r5, #0
 8004696:	d1f4      	bne.n	8004682 <ai_layers_forward_all+0x72>
 8004698:	e7df      	b.n	800465a <ai_layers_forward_all+0x4a>
 800469a:	2300      	movs	r3, #0
 800469c:	63a3      	str	r3, [r4, #56]	; 0x38
 800469e:	3701      	adds	r7, #1
 80046a0:	e7db      	b.n	800465a <ai_layers_forward_all+0x4a>
 80046a2:	bf00      	nop

080046a4 <ai_layers_destroy_all>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80046a8:	2500      	movs	r5, #0
 80046aa:	b16c      	cbz	r4, 80046c8 <ai_layers_destroy_all+0x24>
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	075b      	lsls	r3, r3, #29
 80046b0:	d504      	bpl.n	80046bc <ai_layers_destroy_all+0x18>
 80046b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046b4:	4620      	mov	r0, r4
 80046b6:	b10b      	cbz	r3, 80046bc <ai_layers_destroy_all+0x18>
 80046b8:	4798      	blx	r3
 80046ba:	3501      	adds	r5, #1
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	42a3      	cmp	r3, r4
 80046c0:	d002      	beq.n	80046c8 <ai_layers_destroy_all+0x24>
 80046c2:	b10b      	cbz	r3, 80046c8 <ai_layers_destroy_all+0x24>
 80046c4:	461c      	mov	r4, r3
 80046c6:	e7f0      	b.n	80046aa <ai_layers_destroy_all+0x6>
 80046c8:	4628      	mov	r0, r5
 80046ca:	bd38      	pop	{r3, r4, r5, pc}

080046cc <forward_dense>:
 80046cc:	6983      	ldr	r3, [r0, #24]
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	2a00      	cmp	r2, #0
 80046d2:	f000 8181 	beq.w	80049d8 <forward_dense+0x30c>
 80046d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	ed2d 8b02 	vpush	{d8}
 80046de:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80046e2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80046e6:	b095      	sub	sp, #84	; 0x54
 80046e8:	b105      	cbz	r5, 80046ec <forward_dense+0x20>
 80046ea:	682d      	ldr	r5, [r5, #0]
 80046ec:	2a01      	cmp	r2, #1
 80046ee:	f000 828f 	beq.w	8004c10 <forward_dense+0x544>
 80046f2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80046f6:	b106      	cbz	r6, 80046fa <forward_dense+0x2e>
 80046f8:	6836      	ldr	r6, [r6, #0]
 80046fa:	2a02      	cmp	r2, #2
 80046fc:	f000 816e 	beq.w	80049dc <forward_dense+0x310>
 8004700:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8004704:	930b      	str	r3, [sp, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8274 	beq.w	8004bf4 <forward_dense+0x528>
 800470c:	4619      	mov	r1, r3
 800470e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8004712:	6809      	ldr	r1, [r1, #0]
 8004714:	910d      	str	r1, [sp, #52]	; 0x34
 8004716:	2b01      	cmp	r3, #1
 8004718:	f240 826e 	bls.w	8004bf8 <forward_dense+0x52c>
 800471c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	930b      	str	r3, [sp, #44]	; 0x2c
 8004722:	460b      	mov	r3, r1
 8004724:	68e8      	ldr	r0, [r5, #12]
 8004726:	68f7      	ldr	r7, [r6, #12]
 8004728:	6840      	ldr	r0, [r0, #4]
 800472a:	6999      	ldr	r1, [r3, #24]
 800472c:	9013      	str	r0, [sp, #76]	; 0x4c
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	680b      	ldr	r3, [r1, #0]
 8004732:	9012      	str	r0, [sp, #72]	; 0x48
 8004734:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004738:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800473c:	fb00 f404 	mul.w	r4, r0, r4
 8004740:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004744:	fa4e f000 	asr.w	r0, lr, r0
 8004748:	2a03      	cmp	r2, #3
 800474a:	9010      	str	r0, [sp, #64]	; 0x40
 800474c:	f000 825d 	beq.w	8004c0a <forward_dense+0x53e>
 8004750:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8004754:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004758:	2a00      	cmp	r2, #0
 800475a:	f000 8246 	beq.w	8004bea <forward_dense+0x51e>
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	2a00      	cmp	r2, #0
 8004762:	f000 8242 	beq.w	8004bea <forward_dense+0x51e>
 8004766:	2b04      	cmp	r3, #4
 8004768:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800476c:	f000 822c 	beq.w	8004bc8 <forward_dense+0x4fc>
 8004770:	2b08      	cmp	r3, #8
 8004772:	f000 8229 	beq.w	8004bc8 <forward_dense+0x4fc>
 8004776:	f04f 0b00 	mov.w	fp, #0
 800477a:	69b2      	ldr	r2, [r6, #24]
 800477c:	69ab      	ldr	r3, [r5, #24]
 800477e:	6891      	ldr	r1, [r2, #8]
 8004780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	6952      	ldr	r2, [r2, #20]
 8004786:	9106      	str	r1, [sp, #24]
 8004788:	fb07 f404 	mul.w	r4, r7, r4
 800478c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004790:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004792:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004796:	4281      	cmp	r1, r0
 8004798:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800479c:	900e      	str	r0, [sp, #56]	; 0x38
 800479e:	940c      	str	r4, [sp, #48]	; 0x30
 80047a0:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80047a4:	f080 8113 	bcs.w	80049ce <forward_dense+0x302>
 80047a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80047aa:	ed9f 8a93 	vldr	s16, [pc, #588]	; 80049f8 <forward_dense+0x32c>
 80047ae:	f021 0201 	bic.w	r2, r1, #1
 80047b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80047b6:	9204      	str	r2, [sp, #16]
 80047b8:	f001 0201 	and.w	r2, r1, #1
 80047bc:	08c8      	lsrs	r0, r1, #3
 80047be:	9208      	str	r2, [sp, #32]
 80047c0:	008a      	lsls	r2, r1, #2
 80047c2:	f001 0a07 	and.w	sl, r1, #7
 80047c6:	920f      	str	r2, [sp, #60]	; 0x3c
 80047c8:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 80047cc:	3320      	adds	r3, #32
 80047ce:	465c      	mov	r4, fp
 80047d0:	9007      	str	r0, [sp, #28]
 80047d2:	46cb      	mov	fp, r9
 80047d4:	9205      	str	r2, [sp, #20]
 80047d6:	9302      	str	r3, [sp, #8]
 80047d8:	46c1      	mov	r9, r8
 80047da:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80047de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	9b02      	ldr	r3, [sp, #8]
 80047e6:	3b20      	subs	r3, #32
 80047e8:	930a      	str	r3, [sp, #40]	; 0x28
 80047ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ec:	b10b      	cbz	r3, 80047f2 <forward_dense+0x126>
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	f000 81da 	beq.w	8004bac <forward_dense+0x4e0>
 80047f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80047fa:	2904      	cmp	r1, #4
 80047fc:	9906      	ldr	r1, [sp, #24]
 80047fe:	f000 80fd 	beq.w	80049fc <forward_dense+0x330>
 8004802:	4549      	cmp	r1, r9
 8004804:	f080 80d2 	bcs.w	80049ac <forward_dense+0x2e0>
 8004808:	460f      	mov	r7, r1
 800480a:	9907      	ldr	r1, [sp, #28]
 800480c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004810:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004814:	1c4e      	adds	r6, r1, #1
 8004816:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800481a:	4694      	mov	ip, r2
 800481c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800481e:	468e      	mov	lr, r1
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80de 	beq.w	80049e2 <forward_dense+0x316>
 8004826:	ecf3 2a01 	vldmia	r3!, {s5}
 800482a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80049f8 <forward_dense+0x32c>
 800482e:	f1be 0f00 	cmp.w	lr, #0
 8004832:	f000 80de 	beq.w	80049f2 <forward_dense+0x326>
 8004836:	f10c 0108 	add.w	r1, ip, #8
 800483a:	4640      	mov	r0, r8
 800483c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004840:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8004844:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004848:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800484c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8004850:	ed10 5a04 	vldr	s10, [r0, #-16]
 8004854:	ed50 5a03 	vldr	s11, [r0, #-12]
 8004858:	ed10 6a02 	vldr	s12, [r0, #-8]
 800485c:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004860:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004864:	edd5 7a00 	vldr	s15, [r5]
 8004868:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800486c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004870:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004874:	ed95 3a00 	vldr	s6, [r5]
 8004878:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800487c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004880:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004884:	3108      	adds	r1, #8
 8004886:	edd5 3a00 	vldr	s7, [r5]
 800488a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800488e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004892:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004896:	3020      	adds	r0, #32
 8004898:	ed95 4a00 	vldr	s8, [r5]
 800489c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80048a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80048a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048a8:	edd5 4a00 	vldr	s9, [r5]
 80048ac:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80048b0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80048b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048b8:	ed95 5a00 	vldr	s10, [r5]
 80048bc:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80048c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048c8:	edd5 5a00 	vldr	s11, [r5]
 80048cc:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80048d0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048d8:	428e      	cmp	r6, r1
 80048da:	ed95 6a00 	vldr	s12, [r5]
 80048de:	eee6 7a26 	vfma.f32	s15, s12, s13
 80048e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048e6:	d1a9      	bne.n	800483c <forward_dense+0x170>
 80048e8:	f1a6 0108 	sub.w	r1, r6, #8
 80048ec:	4650      	mov	r0, sl
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	d04a      	beq.n	8004988 <forward_dense+0x2bc>
 80048f2:	780d      	ldrb	r5, [r1, #0]
 80048f4:	edd0 6a00 	vldr	s13, [r0]
 80048f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048fc:	edd5 7a00 	vldr	s15, [r5]
 8004900:	2a01      	cmp	r2, #1
 8004902:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004906:	d03f      	beq.n	8004988 <forward_dense+0x2bc>
 8004908:	784d      	ldrb	r5, [r1, #1]
 800490a:	edd0 6a01 	vldr	s13, [r0, #4]
 800490e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004912:	edd5 7a00 	vldr	s15, [r5]
 8004916:	2a02      	cmp	r2, #2
 8004918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800491c:	d034      	beq.n	8004988 <forward_dense+0x2bc>
 800491e:	788d      	ldrb	r5, [r1, #2]
 8004920:	edd0 6a02 	vldr	s13, [r0, #8]
 8004924:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004928:	edd5 7a00 	vldr	s15, [r5]
 800492c:	2a03      	cmp	r2, #3
 800492e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004932:	d029      	beq.n	8004988 <forward_dense+0x2bc>
 8004934:	78cd      	ldrb	r5, [r1, #3]
 8004936:	edd0 6a03 	vldr	s13, [r0, #12]
 800493a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800493e:	edd5 7a00 	vldr	s15, [r5]
 8004942:	2a04      	cmp	r2, #4
 8004944:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004948:	d01e      	beq.n	8004988 <forward_dense+0x2bc>
 800494a:	790d      	ldrb	r5, [r1, #4]
 800494c:	edd0 6a04 	vldr	s13, [r0, #16]
 8004950:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004954:	edd5 7a00 	vldr	s15, [r5]
 8004958:	2a05      	cmp	r2, #5
 800495a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800495e:	d013      	beq.n	8004988 <forward_dense+0x2bc>
 8004960:	794d      	ldrb	r5, [r1, #5]
 8004962:	edd0 6a05 	vldr	s13, [r0, #20]
 8004966:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800496a:	edd5 7a00 	vldr	s15, [r5]
 800496e:	2a06      	cmp	r2, #6
 8004970:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004974:	d008      	beq.n	8004988 <forward_dense+0x2bc>
 8004976:	7989      	ldrb	r1, [r1, #6]
 8004978:	edd0 7a06 	vldr	s15, [r0, #24]
 800497c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004980:	edd1 6a00 	vldr	s13, [r1]
 8004984:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004988:	44dc      	add	ip, fp
 800498a:	445e      	add	r6, fp
 800498c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004990:	eca7 7a01 	vstmia	r7!, {s14}
 8004994:	454f      	cmp	r7, r9
 8004996:	f4ff af43 	bcc.w	8004820 <forward_dense+0x154>
 800499a:	9a06      	ldr	r2, [sp, #24]
 800499c:	eba9 0302 	sub.w	r3, r9, r2
 80049a0:	3b01      	subs	r3, #1
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	3304      	adds	r3, #4
 80049a8:	18d3      	adds	r3, r2, r3
 80049aa:	9306      	str	r3, [sp, #24]
 80049ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049ae:	9a05      	ldr	r2, [sp, #20]
 80049b0:	4499      	add	r9, r3
 80049b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049b4:	441a      	add	r2, r3
 80049b6:	9205      	str	r2, [sp, #20]
 80049b8:	9a02      	ldr	r2, [sp, #8]
 80049ba:	441a      	add	r2, r3
 80049bc:	9202      	str	r2, [sp, #8]
 80049be:	9a04      	ldr	r2, [sp, #16]
 80049c0:	441a      	add	r2, r3
 80049c2:	9204      	str	r2, [sp, #16]
 80049c4:	9b06      	ldr	r3, [sp, #24]
 80049c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c8:	4293      	cmp	r3, r2
 80049ca:	f4ff af08 	bcc.w	80047de <forward_dense+0x112>
 80049ce:	b015      	add	sp, #84	; 0x54
 80049d0:	ecbd 8b02 	vpop	{d8}
 80049d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d8:	6853      	ldr	r3, [r2, #4]
 80049da:	deff      	udf	#255	; 0xff
 80049dc:	2300      	movs	r3, #0
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	deff      	udf	#255	; 0xff
 80049e2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80049f8 <forward_dense+0x32c>
 80049e6:	eef0 2a48 	vmov.f32	s5, s16
 80049ea:	f1be 0f00 	cmp.w	lr, #0
 80049ee:	f47f af22 	bne.w	8004836 <forward_dense+0x16a>
 80049f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80049f4:	4661      	mov	r1, ip
 80049f6:	e77a      	b.n	80048ee <forward_dense+0x222>
 80049f8:	00000000 	.word	0x00000000
 80049fc:	4549      	cmp	r1, r9
 80049fe:	d2d5      	bcs.n	80049ac <forward_dense+0x2e0>
 8004a00:	9807      	ldr	r0, [sp, #28]
 8004a02:	9103      	str	r1, [sp, #12]
 8004a04:	9904      	ldr	r1, [sp, #16]
 8004a06:	f100 0c01 	add.w	ip, r0, #1
 8004a0a:	3901      	subs	r1, #1
 8004a0c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004a10:	9109      	str	r1, [sp, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80b2 	beq.w	8004b7c <forward_dense+0x4b0>
 8004a18:	9907      	ldr	r1, [sp, #28]
 8004a1a:	ecf3 2a01 	vldmia	r3!, {s5}
 8004a1e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80049f8 <forward_dense+0x32c>
 8004a22:	2900      	cmp	r1, #0
 8004a24:	f000 80b2 	beq.w	8004b8c <forward_dense+0x4c0>
 8004a28:	9902      	ldr	r1, [sp, #8]
 8004a2a:	1d10      	adds	r0, r2, #4
 8004a2c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004a30:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004a34:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004a38:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004a3c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004a40:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004a44:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004a48:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004a4c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004a50:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004a54:	f006 070f 	and.w	r7, r6, #15
 8004a58:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004a5c:	edd7 7a00 	vldr	s15, [r7]
 8004a60:	0936      	lsrs	r6, r6, #4
 8004a62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004a66:	ed96 3a00 	vldr	s6, [r6]
 8004a6a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004a6e:	092e      	lsrs	r6, r5, #4
 8004a70:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004a74:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004a78:	f005 050f 	and.w	r5, r5, #15
 8004a7c:	edd6 3a00 	vldr	s7, [r6]
 8004a80:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8004a84:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004a88:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a8c:	0937      	lsrs	r7, r6, #4
 8004a8e:	ed95 4a00 	vldr	s8, [r5]
 8004a92:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8004a96:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004a9a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004a9e:	f006 060f 	and.w	r6, r6, #15
 8004aa2:	edd7 4a00 	vldr	s9, [r7]
 8004aa6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004aaa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004aae:	3004      	adds	r0, #4
 8004ab0:	ed96 5a00 	vldr	s10, [r6]
 8004ab4:	092e      	lsrs	r6, r5, #4
 8004ab6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004aba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004abe:	f005 050f 	and.w	r5, r5, #15
 8004ac2:	edd6 5a00 	vldr	s11, [r6]
 8004ac6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004aca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004ace:	4584      	cmp	ip, r0
 8004ad0:	ed95 6a00 	vldr	s12, [r5]
 8004ad4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004ad8:	f101 0120 	add.w	r1, r1, #32
 8004adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ae0:	d1a4      	bne.n	8004a2c <forward_dense+0x360>
 8004ae2:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004ae6:	f1ac 0804 	sub.w	r8, ip, #4
 8004aea:	9904      	ldr	r1, [sp, #16]
 8004aec:	458e      	cmp	lr, r1
 8004aee:	d22a      	bcs.n	8004b46 <forward_dense+0x47a>
 8004af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004af2:	eba1 070e 	sub.w	r7, r1, lr
 8004af6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8004afa:	f10e 0008 	add.w	r0, lr, #8
 8004afe:	f108 36ff 	add.w	r6, r8, #4294967295
 8004b02:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8004b06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b0a:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004b0e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004b12:	f001 050f 	and.w	r5, r1, #15
 8004b16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004b1a:	edd5 7a00 	vldr	s15, [r5]
 8004b1e:	0909      	lsrs	r1, r1, #4
 8004b20:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b24:	ed91 6a00 	vldr	s12, [r1]
 8004b28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004b2c:	42b7      	cmp	r7, r6
 8004b2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b32:	f100 0008 	add.w	r0, r0, #8
 8004b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b3a:	d1e4      	bne.n	8004b06 <forward_dense+0x43a>
 8004b3c:	f10a 0a01 	add.w	sl, sl, #1
 8004b40:	44d0      	add	r8, sl
 8004b42:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004b46:	9908      	ldr	r1, [sp, #32]
 8004b48:	b321      	cbz	r1, 8004b94 <forward_dense+0x4c8>
 8004b4a:	f898 1000 	ldrb.w	r1, [r8]
 8004b4e:	edde 7a00 	vldr	s15, [lr]
 8004b52:	0909      	lsrs	r1, r1, #4
 8004b54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b58:	edd1 6a00 	vldr	s13, [r1]
 8004b5c:	9903      	ldr	r1, [sp, #12]
 8004b5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b62:	445a      	add	r2, fp
 8004b64:	44dc      	add	ip, fp
 8004b66:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004b6a:	ece1 2a01 	vstmia	r1!, {s5}
 8004b6e:	4589      	cmp	r9, r1
 8004b70:	9103      	str	r1, [sp, #12]
 8004b72:	f67f af12 	bls.w	800499a <forward_dense+0x2ce>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f47f af4e 	bne.w	8004a18 <forward_dense+0x34c>
 8004b7c:	9907      	ldr	r1, [sp, #28]
 8004b7e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 80049f8 <forward_dense+0x32c>
 8004b82:	eef0 2a48 	vmov.f32	s5, s16
 8004b86:	2900      	cmp	r1, #0
 8004b88:	f47f af4e 	bne.w	8004a28 <forward_dense+0x35c>
 8004b8c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8004b90:	4690      	mov	r8, r2
 8004b92:	e7aa      	b.n	8004aea <forward_dense+0x41e>
 8004b94:	9903      	ldr	r1, [sp, #12]
 8004b96:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004b9a:	445a      	add	r2, fp
 8004b9c:	eca1 7a01 	vstmia	r1!, {s14}
 8004ba0:	4549      	cmp	r1, r9
 8004ba2:	9103      	str	r1, [sp, #12]
 8004ba4:	44dc      	add	ip, fp
 8004ba6:	f4ff af34 	bcc.w	8004a12 <forward_dense+0x346>
 8004baa:	e6f6      	b.n	800499a <forward_dense+0x2ce>
 8004bac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004bae:	9d06      	ldr	r5, [sp, #24]
 8004bb0:	9101      	str	r1, [sp, #4]
 8004bb2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004bb4:	9100      	str	r1, [sp, #0]
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bba:	f000 f9ef 	bl	8004f9c <forward_lite_dense_if32of32wf32>
 8004bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bc0:	462b      	mov	r3, r5
 8004bc2:	4413      	add	r3, r2
 8004bc4:	9306      	str	r3, [sp, #24]
 8004bc6:	e6f1      	b.n	80049ac <forward_dense+0x2e0>
 8004bc8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004bcc:	f1b9 0f00 	cmp.w	r9, #0
 8004bd0:	d016      	beq.n	8004c00 <forward_dense+0x534>
 8004bd2:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004bd6:	f000 fbf7 	bl	80053c8 <ai_array_get_byte_size>
 8004bda:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004bde:	4602      	mov	r2, r0
 8004be0:	4659      	mov	r1, fp
 8004be2:	4640      	mov	r0, r8
 8004be4:	f000 fafe 	bl	80051e4 <st_int8_copy>
 8004be8:	e5c7      	b.n	800477a <forward_dense+0xae>
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00a      	beq.n	8004c04 <forward_dense+0x538>
 8004bee:	f04f 0900 	mov.w	r9, #0
 8004bf2:	e5bd      	b.n	8004770 <forward_dense+0xa4>
 8004bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8004bf6:	e595      	b.n	8004724 <forward_dense+0x58>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e591      	b.n	8004724 <forward_dense+0x58>
 8004c00:	46c3      	mov	fp, r8
 8004c02:	e5ba      	b.n	800477a <forward_dense+0xae>
 8004c04:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004c08:	e5b7      	b.n	800477a <forward_dense+0xae>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	deff      	udf	#255	; 0xff
 8004c10:	2300      	movs	r3, #0
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	deff      	udf	#255	; 0xff
 8004c16:	bf00      	nop

08004c18 <forward_relu>:
 8004c18:	6982      	ldr	r2, [r0, #24]
 8004c1a:	8813      	ldrh	r3, [r2, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d05b      	beq.n	8004cd8 <forward_relu+0xc0>
 8004c20:	6851      	ldr	r1, [r2, #4]
 8004c22:	684a      	ldr	r2, [r1, #4]
 8004c24:	b102      	cbz	r2, 8004c28 <forward_relu+0x10>
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	f000 8123 	beq.w	8004e74 <forward_relu+0x25c>
 8004c2e:	b470      	push	{r4, r5, r6}
 8004c30:	6909      	ldr	r1, [r1, #16]
 8004c32:	b101      	cbz	r1, 8004c36 <forward_relu+0x1e>
 8004c34:	6809      	ldr	r1, [r1, #0]
 8004c36:	69c6      	ldr	r6, [r0, #28]
 8004c38:	2e00      	cmp	r6, #0
 8004c3a:	f000 8097 	beq.w	8004d6c <forward_relu+0x154>
 8004c3e:	6873      	ldr	r3, [r6, #4]
 8004c40:	6988      	ldr	r0, [r1, #24]
 8004c42:	6991      	ldr	r1, [r2, #24]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f000 80c1 	beq.w	8004dcc <forward_relu+0x1b4>
 8004c4a:	6893      	ldr	r3, [r2, #8]
 8004c4c:	6880      	ldr	r0, [r0, #8]
 8004c4e:	688c      	ldr	r4, [r1, #8]
 8004c50:	0a1b      	lsrs	r3, r3, #8
 8004c52:	f000 80f2 	beq.w	8004e3a <forward_relu+0x222>
 8004c56:	68d5      	ldr	r5, [r2, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004c5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c62:	42ab      	cmp	r3, r5
 8004c64:	fb01 f202 	mul.w	r2, r1, r2
 8004c68:	d1f9      	bne.n	8004c5e <forward_relu+0x46>
 8004c6a:	68b3      	ldr	r3, [r6, #8]
 8004c6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c70:	edd3 6a00 	vldr	s13, [r3]
 8004c74:	ed93 6a01 	vldr	s12, [r3, #4]
 8004c78:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c80:	3a01      	subs	r2, #1
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c8a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004c8e:	d425      	bmi.n	8004cdc <forward_relu+0xc4>
 8004c90:	429c      	cmp	r4, r3
 8004c92:	d81f      	bhi.n	8004cd4 <forward_relu+0xbc>
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	1d01      	adds	r1, r0, #4
 8004c98:	e00d      	b.n	8004cb6 <forward_relu+0x9e>
 8004c9a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	db03      	blt.n	8004cac <forward_relu+0x94>
 8004ca4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004ca8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004cac:	3b08      	subs	r3, #8
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	ed61 7a01 	vstmdb	r1!, {s15}
 8004cb4:	d80e      	bhi.n	8004cd4 <forward_relu+0xbc>
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	ed72 7a01 	vldmdb	r2!, {s15}
 8004cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	d9e9      	bls.n	8004c9a <forward_relu+0x82>
 8004cc6:	3b08      	subs	r3, #8
 8004cc8:	eef0 7a47 	vmov.f32	s15, s14
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	ed61 7a01 	vstmdb	r1!, {s15}
 8004cd2:	d9f0      	bls.n	8004cb6 <forward_relu+0x9e>
 8004cd4:	bc70      	pop	{r4, r5, r6}
 8004cd6:	4770      	bx	lr
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	deff      	udf	#255	; 0xff
 8004cdc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce4:	d11f      	bne.n	8004d26 <forward_relu+0x10e>
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d8f4      	bhi.n	8004cd4 <forward_relu+0xbc>
 8004cea:	1b1c      	subs	r4, r3, r4
 8004cec:	f024 0403 	bic.w	r4, r4, #3
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	1b1b      	subs	r3, r3, r4
 8004cf6:	1d01      	adds	r1, r0, #4
 8004cf8:	ed72 7a01 	vldmdb	r2!, {s15}
 8004cfc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d04:	dc0a      	bgt.n	8004d1c <forward_relu+0x104>
 8004d06:	429a      	cmp	r2, r3
 8004d08:	f841 5d04 	str.w	r5, [r1, #-4]!
 8004d0c:	d0e2      	beq.n	8004cd4 <forward_relu+0xbc>
 8004d0e:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d12:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	ddf4      	ble.n	8004d06 <forward_relu+0xee>
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d22:	d1e9      	bne.n	8004cf8 <forward_relu+0xe0>
 8004d24:	e7d6      	b.n	8004cd4 <forward_relu+0xbc>
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d8d4      	bhi.n	8004cd4 <forward_relu+0xbc>
 8004d2a:	1b1c      	subs	r4, r3, r4
 8004d2c:	f024 0403 	bic.w	r4, r4, #3
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	1d01      	adds	r1, r0, #4
 8004d34:	1b1b      	subs	r3, r3, r4
 8004d36:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d3a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	db0e      	blt.n	8004d62 <forward_relu+0x14a>
 8004d44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d4e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d52:	d0bf      	beq.n	8004cd4 <forward_relu+0xbc>
 8004d54:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d58:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	daf0      	bge.n	8004d44 <forward_relu+0x12c>
 8004d62:	4293      	cmp	r3, r2
 8004d64:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d68:	d1e5      	bne.n	8004d36 <forward_relu+0x11e>
 8004d6a:	e7b3      	b.n	8004cd4 <forward_relu+0xbc>
 8004d6c:	6893      	ldr	r3, [r2, #8]
 8004d6e:	6989      	ldr	r1, [r1, #24]
 8004d70:	6990      	ldr	r0, [r2, #24]
 8004d72:	6889      	ldr	r1, [r1, #8]
 8004d74:	6884      	ldr	r4, [r0, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	d075      	beq.n	8004e66 <forward_relu+0x24e>
 8004d7a:	68d5      	ldr	r5, [r2, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d82:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8004d86:	429d      	cmp	r5, r3
 8004d88:	fb00 f202 	mul.w	r2, r0, r2
 8004d8c:	d1f9      	bne.n	8004d82 <forward_relu+0x16a>
 8004d8e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8004d92:	3b01      	subs	r3, #1
 8004d94:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004d98:	4294      	cmp	r4, r2
 8004d9a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004d9e:	d899      	bhi.n	8004cd4 <forward_relu+0xbc>
 8004da0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004e7c <forward_relu+0x264>
 8004da4:	3204      	adds	r2, #4
 8004da6:	3104      	adds	r1, #4
 8004da8:	4613      	mov	r3, r2
 8004daa:	ed72 7a01 	vldmdb	r2!, {s15}
 8004dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db6:	f1a3 0308 	sub.w	r3, r3, #8
 8004dba:	bfb8      	it	lt
 8004dbc:	eef0 7a47 	vmovlt.f32	s15, s14
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	ed61 7a01 	vstmdb	r1!, {s15}
 8004dc6:	d9ef      	bls.n	8004da8 <forward_relu+0x190>
 8004dc8:	bc70      	pop	{r4, r5, r6}
 8004dca:	4770      	bx	lr
 8004dcc:	688c      	ldr	r4, [r1, #8]
 8004dce:	6891      	ldr	r1, [r2, #8]
 8004dd0:	6880      	ldr	r0, [r0, #8]
 8004dd2:	0a09      	lsrs	r1, r1, #8
 8004dd4:	d049      	beq.n	8004e6a <forward_relu+0x252>
 8004dd6:	68d5      	ldr	r5, [r2, #12]
 8004dd8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004ddc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004de0:	42aa      	cmp	r2, r5
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	d1f9      	bne.n	8004ddc <forward_relu+0x1c4>
 8004de8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004dec:	3a01      	subs	r2, #1
 8004dee:	68b1      	ldr	r1, [r6, #8]
 8004df0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004df4:	429c      	cmp	r4, r3
 8004df6:	ed91 7a00 	vldr	s14, [r1]
 8004dfa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004dfe:	f63f af69 	bhi.w	8004cd4 <forward_relu+0xbc>
 8004e02:	2500      	movs	r5, #0
 8004e04:	3304      	adds	r3, #4
 8004e06:	1d02      	adds	r2, r0, #4
 8004e08:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	f1a3 0104 	sub.w	r1, r3, #4
 8004e18:	f1a3 0308 	sub.w	r3, r3, #8
 8004e1c:	d406      	bmi.n	8004e2c <forward_relu+0x214>
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004e24:	f63f af56 	bhi.w	8004cd4 <forward_relu+0xbc>
 8004e28:	460b      	mov	r3, r1
 8004e2a:	e7ed      	b.n	8004e08 <forward_relu+0x1f0>
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004e32:	f63f af4f 	bhi.w	8004cd4 <forward_relu+0xbc>
 8004e36:	460b      	mov	r3, r1
 8004e38:	e7e6      	b.n	8004e08 <forward_relu+0x1f0>
 8004e3a:	68b3      	ldr	r3, [r6, #8]
 8004e3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e40:	edd3 6a00 	vldr	s13, [r3]
 8004e44:	ed93 6a01 	vldr	s12, [r3, #4]
 8004e48:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e50:	d401      	bmi.n	8004e56 <forward_relu+0x23e>
 8004e52:	4623      	mov	r3, r4
 8004e54:	e71e      	b.n	8004c94 <forward_relu+0x7c>
 8004e56:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	4623      	mov	r3, r4
 8004e60:	f47f af63 	bne.w	8004d2a <forward_relu+0x112>
 8004e64:	e741      	b.n	8004cea <forward_relu+0xd2>
 8004e66:	4622      	mov	r2, r4
 8004e68:	e79a      	b.n	8004da0 <forward_relu+0x188>
 8004e6a:	68b2      	ldr	r2, [r6, #8]
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	ed92 7a00 	vldr	s14, [r2]
 8004e72:	e7c6      	b.n	8004e02 <forward_relu+0x1ea>
 8004e74:	2300      	movs	r3, #0
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	deff      	udf	#255	; 0xff
 8004e7a:	bf00      	nop
 8004e7c:	00000000 	.word	0x00000000

08004e80 <forward_sm>:
 8004e80:	6982      	ldr	r2, [r0, #24]
 8004e82:	8813      	ldrh	r3, [r2, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d07c      	beq.n	8004f82 <forward_sm+0x102>
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	ed2d 8b04 	vpush	{d8-d9}
 8004e90:	6852      	ldr	r2, [r2, #4]
 8004e92:	6854      	ldr	r4, [r2, #4]
 8004e94:	b085      	sub	sp, #20
 8004e96:	b104      	cbz	r4, 8004e9a <forward_sm+0x1a>
 8004e98:	6824      	ldr	r4, [r4, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d076      	beq.n	8004f8c <forward_sm+0x10c>
 8004e9e:	6913      	ldr	r3, [r2, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d076      	beq.n	8004f92 <forward_sm+0x112>
 8004ea4:	681e      	ldr	r6, [r3, #0]
 8004ea6:	68a3      	ldr	r3, [r4, #8]
 8004ea8:	68e0      	ldr	r0, [r4, #12]
 8004eaa:	68f2      	ldr	r2, [r6, #12]
 8004eac:	6845      	ldr	r5, [r0, #4]
 8004eae:	6857      	ldr	r7, [r2, #4]
 8004eb0:	0a1b      	lsrs	r3, r3, #8
 8004eb2:	d068      	beq.n	8004f86 <forward_sm+0x106>
 8004eb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ebe:	4298      	cmp	r0, r3
 8004ec0:	fb01 f202 	mul.w	r2, r1, r2
 8004ec4:	d1f9      	bne.n	8004eba <forward_sm+0x3a>
 8004ec6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004eca:	69a2      	ldr	r2, [r4, #24]
 8004ecc:	69b3      	ldr	r3, [r6, #24]
 8004ece:	6892      	ldr	r2, [r2, #8]
 8004ed0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8004ed4:	eb02 0309 	add.w	r3, r2, r9
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	d24c      	bcs.n	8004f78 <forward_sm+0xf8>
 8004ede:	00bb      	lsls	r3, r7, #2
 8004ee0:	9303      	str	r3, [sp, #12]
 8004ee2:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8004ee6:	00ab      	lsls	r3, r5, #2
 8004ee8:	2d01      	cmp	r5, #1
 8004eea:	ed92 8a00 	vldr	s16, [r2]
 8004eee:	9302      	str	r3, [sp, #8]
 8004ef0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004ef4:	463e      	mov	r6, r7
 8004ef6:	d93c      	bls.n	8004f72 <forward_sm+0xf2>
 8004ef8:	1d13      	adds	r3, r2, #4
 8004efa:	ecf3 7a01 	vldmia	r3!, {s15}
 8004efe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	bfb8      	it	lt
 8004f08:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004f0c:	429e      	cmp	r6, r3
 8004f0e:	d1f4      	bne.n	8004efa <forward_sm+0x7a>
 8004f10:	eddf 8a21 	vldr	s17, [pc, #132]	; 8004f98 <forward_sm+0x118>
 8004f14:	4692      	mov	sl, r2
 8004f16:	46c3      	mov	fp, r8
 8004f18:	46c1      	mov	r9, r8
 8004f1a:	2400      	movs	r4, #0
 8004f1c:	ecba 0a01 	vldmia	sl!, {s0}
 8004f20:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004f24:	f002 ffec 	bl	8007f00 <expf>
 8004f28:	3401      	adds	r4, #1
 8004f2a:	42a5      	cmp	r5, r4
 8004f2c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004f30:	eca9 0a01 	vstmia	r9!, {s0}
 8004f34:	d8f2      	bhi.n	8004f1c <forward_sm+0x9c>
 8004f36:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3e:	d00b      	beq.n	8004f58 <forward_sm+0xd8>
 8004f40:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004f44:	2300      	movs	r3, #0
 8004f46:	3301      	adds	r3, #1
 8004f48:	429d      	cmp	r5, r3
 8004f4a:	eddb 7a00 	vldr	s15, [fp]
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	eceb 7a01 	vstmia	fp!, {s15}
 8004f56:	d8f6      	bhi.n	8004f46 <forward_sm+0xc6>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	9901      	ldr	r1, [sp, #4]
 8004f5c:	4498      	add	r8, r3
 8004f5e:	9b02      	ldr	r3, [sp, #8]
 8004f60:	42b9      	cmp	r1, r7
 8004f62:	463a      	mov	r2, r7
 8004f64:	441e      	add	r6, r3
 8004f66:	d907      	bls.n	8004f78 <forward_sm+0xf8>
 8004f68:	2d01      	cmp	r5, #1
 8004f6a:	ed92 8a00 	vldr	s16, [r2]
 8004f6e:	441f      	add	r7, r3
 8004f70:	d8c2      	bhi.n	8004ef8 <forward_sm+0x78>
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	d0f0      	beq.n	8004f58 <forward_sm+0xd8>
 8004f76:	e7cb      	b.n	8004f10 <forward_sm+0x90>
 8004f78:	b005      	add	sp, #20
 8004f7a:	ecbd 8b04 	vpop	{d8-d9}
 8004f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	deff      	udf	#255	; 0xff
 8004f86:	f04f 0904 	mov.w	r9, #4
 8004f8a:	e79e      	b.n	8004eca <forward_sm+0x4a>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	deff      	udf	#255	; 0xff
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	deff      	udf	#255	; 0xff
 8004f96:	bf00      	nop
 8004f98:	00000000 	.word	0x00000000

08004f9c <forward_lite_dense_if32of32wf32>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8004fa4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8004fa8:	4287      	cmp	r7, r0
 8004faa:	f240 8106 	bls.w	80051ba <forward_lite_dense_if32of32wf32+0x21e>
 8004fae:	f1a6 0810 	sub.w	r8, r6, #16
 8004fb2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004fb6:	f108 0801 	add.w	r8, r8, #1
 8004fba:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8004fbe:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8004fc2:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	f006 0a0f 	and.w	sl, r6, #15
 8004fcc:	2e0f      	cmp	r6, #15
 8004fce:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80051e0 <forward_lite_dense_if32of32wf32+0x244>
 8004fd2:	f240 8101 	bls.w	80051d8 <forward_lite_dense_if32of32wf32+0x23c>
 8004fd6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8004fda:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8004fde:	46b6      	mov	lr, r6
 8004fe0:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8004fe4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8004fe8:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8004fec:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8004ff0:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8004ff4:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8004ff8:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8004ffc:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8005000:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8005004:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8005008:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800500c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8005010:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005014:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005018:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800501c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005020:	f1ae 0e10 	sub.w	lr, lr, #16
 8005024:	f1be 0f0f 	cmp.w	lr, #15
 8005028:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800502c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8005030:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005034:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005038:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800503c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8005040:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8005044:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005048:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800504c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8005050:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005054:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8005058:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800505c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005060:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8005064:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8005068:	eee3 7a23 	vfma.f32	s15, s6, s7
 800506c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005070:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8005074:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005078:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800507c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005080:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005084:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005088:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800508c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005090:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8005094:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005098:	eee1 7a21 	vfma.f32	s15, s2, s3
 800509c:	eee2 7a22 	vfma.f32	s15, s4, s5
 80050a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80050a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80050a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80050ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80050b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050b4:	d894      	bhi.n	8004fe0 <forward_lite_dense_if32of32wf32+0x44>
 80050b6:	eb02 0e0b 	add.w	lr, r2, fp
 80050ba:	4654      	mov	r4, sl
 80050bc:	46c4      	mov	ip, r8
 80050be:	2c00      	cmp	r4, #0
 80050c0:	d075      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 80050c2:	eddc 6a00 	vldr	s13, [ip]
 80050c6:	edde 7a00 	vldr	s15, [lr]
 80050ca:	2c01      	cmp	r4, #1
 80050cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050d0:	d06d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 80050d2:	eddc 6a01 	vldr	s13, [ip, #4]
 80050d6:	edde 7a01 	vldr	s15, [lr, #4]
 80050da:	2c02      	cmp	r4, #2
 80050dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050e0:	d065      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 80050e2:	eddc 6a02 	vldr	s13, [ip, #8]
 80050e6:	edde 7a02 	vldr	s15, [lr, #8]
 80050ea:	2c03      	cmp	r4, #3
 80050ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050f0:	d05d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 80050f2:	eddc 6a03 	vldr	s13, [ip, #12]
 80050f6:	edde 7a03 	vldr	s15, [lr, #12]
 80050fa:	2c04      	cmp	r4, #4
 80050fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005100:	d055      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005102:	eddc 6a04 	vldr	s13, [ip, #16]
 8005106:	edde 7a04 	vldr	s15, [lr, #16]
 800510a:	2c05      	cmp	r4, #5
 800510c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005110:	d04d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005112:	eddc 6a05 	vldr	s13, [ip, #20]
 8005116:	edde 7a05 	vldr	s15, [lr, #20]
 800511a:	2c06      	cmp	r4, #6
 800511c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005120:	d045      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005122:	eddc 6a06 	vldr	s13, [ip, #24]
 8005126:	edde 7a06 	vldr	s15, [lr, #24]
 800512a:	2c07      	cmp	r4, #7
 800512c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005130:	d03d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005132:	eddc 6a07 	vldr	s13, [ip, #28]
 8005136:	edde 7a07 	vldr	s15, [lr, #28]
 800513a:	2c08      	cmp	r4, #8
 800513c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005140:	d035      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005142:	eddc 6a08 	vldr	s13, [ip, #32]
 8005146:	edde 7a08 	vldr	s15, [lr, #32]
 800514a:	2c09      	cmp	r4, #9
 800514c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005150:	d02d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005152:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8005156:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800515a:	2c0a      	cmp	r4, #10
 800515c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005160:	d025      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005162:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8005166:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800516a:	2c0b      	cmp	r4, #11
 800516c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005170:	d01d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005172:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8005176:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800517a:	2c0c      	cmp	r4, #12
 800517c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005180:	d015      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005182:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8005186:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800518a:	3c0d      	subs	r4, #13
 800518c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005190:	d00d      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 8005192:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8005196:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800519a:	2c01      	cmp	r4, #1
 800519c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051a0:	d005      	beq.n	80051ae <forward_lite_dense_if32of32wf32+0x212>
 80051a2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80051a6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80051aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80051ae:	444a      	add	r2, r9
 80051b0:	eca5 7a01 	vstmia	r5!, {s14}
 80051b4:	42af      	cmp	r7, r5
 80051b6:	f63f af09 	bhi.w	8004fcc <forward_lite_dense_if32of32wf32+0x30>
 80051ba:	b15b      	cbz	r3, 80051d4 <forward_lite_dense_if32of32wf32+0x238>
 80051bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051be:	b14a      	cbz	r2, 80051d4 <forward_lite_dense_if32of32wf32+0x238>
 80051c0:	edd0 7a00 	vldr	s15, [r0]
 80051c4:	ecb3 7a01 	vldmia	r3!, {s14}
 80051c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051cc:	ece0 7a01 	vstmia	r0!, {s15}
 80051d0:	4287      	cmp	r7, r0
 80051d2:	d1f5      	bne.n	80051c0 <forward_lite_dense_if32of32wf32+0x224>
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	4634      	mov	r4, r6
 80051da:	4696      	mov	lr, r2
 80051dc:	468c      	mov	ip, r1
 80051de:	e76e      	b.n	80050be <forward_lite_dense_if32of32wf32+0x122>
 80051e0:	00000000 	.word	0x00000000

080051e4 <st_int8_copy>:
 80051e4:	4288      	cmp	r0, r1
 80051e6:	d057      	beq.n	8005298 <st_int8_copy+0xb4>
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d055      	beq.n	8005298 <st_int8_copy+0xb4>
 80051ec:	4288      	cmp	r0, r1
 80051ee:	d354      	bcc.n	800529a <st_int8_copy+0xb6>
 80051f0:	078b      	lsls	r3, r1, #30
 80051f2:	d102      	bne.n	80051fa <st_int8_copy+0x16>
 80051f4:	e009      	b.n	800520a <st_int8_copy+0x26>
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d05c      	beq.n	80052b4 <st_int8_copy+0xd0>
 80051fa:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80051fe:	f801 3b01 	strb.w	r3, [r1], #1
 8005202:	078b      	lsls	r3, r1, #30
 8005204:	f102 32ff 	add.w	r2, r2, #4294967295
 8005208:	d1f5      	bne.n	80051f6 <st_int8_copy+0x12>
 800520a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8005212:	d069      	beq.n	80052e8 <st_int8_copy+0x104>
 8005214:	ea41 0300 	orr.w	r3, r1, r0
 8005218:	075b      	lsls	r3, r3, #29
 800521a:	d14c      	bne.n	80052b6 <st_int8_copy+0xd2>
 800521c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8005220:	2b01      	cmp	r3, #1
 8005222:	d948      	bls.n	80052b6 <st_int8_copy+0xd2>
 8005224:	f100 0310 	add.w	r3, r0, #16
 8005228:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800522c:	f101 0c10 	add.w	ip, r1, #16
 8005230:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8005234:	ed13 6b04 	vldr	d6, [r3, #-16]
 8005238:	ed13 7b02 	vldr	d7, [r3, #-8]
 800523c:	3310      	adds	r3, #16
 800523e:	4573      	cmp	r3, lr
 8005240:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8005244:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8005248:	f10c 0c10 	add.w	ip, ip, #16
 800524c:	d1f2      	bne.n	8005234 <st_int8_copy+0x50>
 800524e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8005252:	4421      	add	r1, r4
 8005254:	4420      	add	r0, r4
 8005256:	f002 0203 	and.w	r2, r2, #3
 800525a:	b16b      	cbz	r3, 8005278 <st_int8_copy+0x94>
 800525c:	6804      	ldr	r4, [r0, #0]
 800525e:	600c      	str	r4, [r1, #0]
 8005260:	1e5c      	subs	r4, r3, #1
 8005262:	d005      	beq.n	8005270 <st_int8_copy+0x8c>
 8005264:	6845      	ldr	r5, [r0, #4]
 8005266:	604d      	str	r5, [r1, #4]
 8005268:	2c01      	cmp	r4, #1
 800526a:	bf1c      	itt	ne
 800526c:	6884      	ldrne	r4, [r0, #8]
 800526e:	608c      	strne	r4, [r1, #8]
 8005270:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005274:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005278:	b162      	cbz	r2, 8005294 <st_int8_copy+0xb0>
 800527a:	f990 3000 	ldrsb.w	r3, [r0]
 800527e:	700b      	strb	r3, [r1, #0]
 8005280:	3a01      	subs	r2, #1
 8005282:	d007      	beq.n	8005294 <st_int8_copy+0xb0>
 8005284:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005288:	704b      	strb	r3, [r1, #1]
 800528a:	2a01      	cmp	r2, #1
 800528c:	bf1c      	itt	ne
 800528e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8005292:	708b      	strbne	r3, [r1, #2]
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005298:	4770      	bx	lr
 800529a:	1883      	adds	r3, r0, r2
 800529c:	428b      	cmp	r3, r1
 800529e:	d9a7      	bls.n	80051f0 <st_int8_copy+0xc>
 80052a0:	4283      	cmp	r3, r0
 80052a2:	440a      	add	r2, r1
 80052a4:	d9f8      	bls.n	8005298 <st_int8_copy+0xb4>
 80052a6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80052aa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80052ae:	4283      	cmp	r3, r0
 80052b0:	d1f9      	bne.n	80052a6 <st_int8_copy+0xc2>
 80052b2:	4770      	bx	lr
 80052b4:	4770      	bx	lr
 80052b6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80052ba:	460b      	mov	r3, r1
 80052bc:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80052c0:	4684      	mov	ip, r0
 80052c2:	f8dc 7000 	ldr.w	r7, [ip]
 80052c6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80052ca:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80052ce:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80052d2:	f8c3 800c 	str.w	r8, [r3, #12]
 80052d6:	601f      	str	r7, [r3, #0]
 80052d8:	605e      	str	r6, [r3, #4]
 80052da:	609d      	str	r5, [r3, #8]
 80052dc:	3310      	adds	r3, #16
 80052de:	459e      	cmp	lr, r3
 80052e0:	f10c 0c10 	add.w	ip, ip, #16
 80052e4:	d1ed      	bne.n	80052c2 <st_int8_copy+0xde>
 80052e6:	e7b2      	b.n	800524e <st_int8_copy+0x6a>
 80052e8:	0893      	lsrs	r3, r2, #2
 80052ea:	f002 0203 	and.w	r2, r2, #3
 80052ee:	e7b4      	b.n	800525a <st_int8_copy+0x76>

080052f0 <ai_array_to_buffer_fmt>:
 80052f0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d050      	beq.n	800539a <ai_array_to_buffer_fmt+0xaa>
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <ai_array_to_buffer_fmt+0xb4>)
 80052fa:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80052fe:	429a      	cmp	r2, r3
 8005300:	d00b      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 8005302:	dc1c      	bgt.n	800533e <ai_array_to_buffer_fmt+0x4e>
 8005304:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <ai_array_to_buffer_fmt+0xb8>)
 8005306:	429a      	cmp	r2, r3
 8005308:	d007      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 800530a:	dd0b      	ble.n	8005324 <ai_array_to_buffer_fmt+0x34>
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <ai_array_to_buffer_fmt+0xbc>)
 800530e:	429a      	cmp	r2, r3
 8005310:	d003      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 8005312:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005316:	429a      	cmp	r2, r3
 8005318:	d131      	bne.n	800537e <ai_array_to_buffer_fmt+0x8e>
 800531a:	4613      	mov	r3, r2
 800531c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005320:	4318      	orrs	r0, r3
 8005322:	4770      	bx	lr
 8005324:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005328:	429a      	cmp	r2, r3
 800532a:	d0f6      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 800532c:	dd2c      	ble.n	8005388 <ai_array_to_buffer_fmt+0x98>
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <ai_array_to_buffer_fmt+0xc0>)
 8005330:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005334:	429a      	cmp	r2, r3
 8005336:	bf18      	it	ne
 8005338:	2340      	movne	r3, #64	; 0x40
 800533a:	4318      	orrs	r0, r3
 800533c:	4770      	bx	lr
 800533e:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <ai_array_to_buffer_fmt+0xc4>)
 8005340:	429a      	cmp	r2, r3
 8005342:	d0ea      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 8005344:	dd0e      	ble.n	8005364 <ai_array_to_buffer_fmt+0x74>
 8005346:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <ai_array_to_buffer_fmt+0xc8>)
 8005348:	429a      	cmp	r2, r3
 800534a:	d0e6      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 800534c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005350:	429a      	cmp	r2, r3
 8005352:	d0e2      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <ai_array_to_buffer_fmt+0xcc>)
 8005356:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800535a:	429a      	cmp	r2, r3
 800535c:	bf18      	it	ne
 800535e:	2340      	movne	r3, #64	; 0x40
 8005360:	4318      	orrs	r0, r3
 8005362:	4770      	bx	lr
 8005364:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005368:	429a      	cmp	r2, r3
 800536a:	d0d6      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 800536c:	3307      	adds	r3, #7
 800536e:	429a      	cmp	r2, r3
 8005370:	d0d3      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 8005372:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8005376:	429a      	cmp	r2, r3
 8005378:	bf18      	it	ne
 800537a:	2340      	movne	r3, #64	; 0x40
 800537c:	e7ce      	b.n	800531c <ai_array_to_buffer_fmt+0x2c>
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <ai_array_to_buffer_fmt+0xd0>)
 8005380:	429a      	cmp	r2, r3
 8005382:	bf18      	it	ne
 8005384:	2340      	movne	r3, #64	; 0x40
 8005386:	e7c9      	b.n	800531c <ai_array_to_buffer_fmt+0x2c>
 8005388:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800538c:	429a      	cmp	r2, r3
 800538e:	d0c4      	beq.n	800531a <ai_array_to_buffer_fmt+0x2a>
 8005390:	3380      	adds	r3, #128	; 0x80
 8005392:	429a      	cmp	r2, r3
 8005394:	bf18      	it	ne
 8005396:	2340      	movne	r3, #64	; 0x40
 8005398:	e7c0      	b.n	800531c <ai_array_to_buffer_fmt+0x2c>
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <ai_array_to_buffer_fmt+0xd4>)
 800539c:	4003      	ands	r3, r0
 800539e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a2:	e7bb      	b.n	800531c <ai_array_to_buffer_fmt+0x2c>
 80053a4:	00840040 	.word	0x00840040
 80053a8:	00040840 	.word	0x00040840
 80053ac:	00041040 	.word	0x00041040
 80053b0:	00040447 	.word	0x00040447
 80053b4:	00840840 	.word	0x00840840
 80053b8:	00841040 	.word	0x00841040
 80053bc:	0084084f 	.word	0x0084084f
 80053c0:	0004084f 	.word	0x0004084f
 80053c4:	00803fff 	.word	0x00803fff

080053c8 <ai_array_get_byte_size>:
 80053c8:	b319      	cbz	r1, 8005412 <ai_array_get_byte_size+0x4a>
 80053ca:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80053ce:	fb03 f101 	mul.w	r1, r3, r1
 80053d2:	3107      	adds	r1, #7
 80053d4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80053d8:	f021 0307 	bic.w	r3, r1, #7
 80053dc:	2a04      	cmp	r2, #4
 80053de:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80053e2:	fa23 f101 	lsr.w	r1, r3, r1
 80053e6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80053ea:	d00b      	beq.n	8005404 <ai_array_get_byte_size+0x3c>
 80053ec:	2a08      	cmp	r2, #8
 80053ee:	d002      	beq.n	80053f6 <ai_array_get_byte_size+0x2e>
 80053f0:	3107      	adds	r1, #7
 80053f2:	08c8      	lsrs	r0, r1, #3
 80053f4:	4770      	bx	lr
 80053f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80053fa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80053fe:	3107      	adds	r1, #7
 8005400:	08c8      	lsrs	r0, r1, #3
 8005402:	4770      	bx	lr
 8005404:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005408:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800540c:	3107      	adds	r1, #7
 800540e:	08c8      	lsrs	r0, r1, #3
 8005410:	4770      	bx	lr
 8005412:	4608      	mov	r0, r1
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop

08005418 <ai_array_get_data_byte_size>:
 8005418:	b169      	cbz	r1, 8005436 <ai_array_get_data_byte_size+0x1e>
 800541a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800541e:	fb02 f101 	mul.w	r1, r2, r1
 8005422:	1dcb      	adds	r3, r1, #7
 8005424:	f023 0307 	bic.w	r3, r3, #7
 8005428:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800542c:	fa23 f000 	lsr.w	r0, r3, r0
 8005430:	3007      	adds	r0, #7
 8005432:	08c0      	lsrs	r0, r0, #3
 8005434:	4770      	bx	lr
 8005436:	4608      	mov	r0, r1
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <ai_version_get>:
 800543c:	0212      	lsls	r2, r2, #8
 800543e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005442:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005446:	4770      	bx	lr

08005448 <ai_platform_version_get>:
 8005448:	0e02      	lsrs	r2, r0, #24
 800544a:	2300      	movs	r3, #0
 800544c:	f362 0307 	bfi	r3, r2, #0, #8
 8005450:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8005454:	f362 230f 	bfi	r3, r2, #8, #8
 8005458:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800545c:	f360 4317 	bfi	r3, r0, #16, #8
 8005460:	b082      	sub	sp, #8
 8005462:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8005466:	b002      	add	sp, #8
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop

0800546c <get_tensor_byte_size>:
 800546c:	b410      	push	{r4}
 800546e:	6983      	ldr	r3, [r0, #24]
 8005470:	68c4      	ldr	r4, [r0, #12]
 8005472:	6941      	ldr	r1, [r0, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68e0      	ldr	r0, [r4, #12]
 8005478:	4a07      	ldr	r2, [pc, #28]	; (8005498 <get_tensor_byte_size+0x2c>)
 800547a:	68c9      	ldr	r1, [r1, #12]
 800547c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005480:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005484:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005488:	fb01 f000 	mul.w	r0, r1, r0
 800548c:	4293      	cmp	r3, r2
 800548e:	bf04      	itt	eq
 8005490:	3007      	addeq	r0, #7
 8005492:	08c0      	lsreq	r0, r0, #3
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	000400c0 	.word	0x000400c0

0800549c <calloc>:
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <calloc+0xc>)
 800549e:	460a      	mov	r2, r1
 80054a0:	4601      	mov	r1, r0
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	f000 b802 	b.w	80054ac <_calloc_r>
 80054a8:	2000069c 	.word	0x2000069c

080054ac <_calloc_r>:
 80054ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ae:	fba1 2402 	umull	r2, r4, r1, r2
 80054b2:	b94c      	cbnz	r4, 80054c8 <_calloc_r+0x1c>
 80054b4:	4611      	mov	r1, r2
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	f000 f836 	bl	8005528 <_malloc_r>
 80054bc:	9a01      	ldr	r2, [sp, #4]
 80054be:	4605      	mov	r5, r0
 80054c0:	b930      	cbnz	r0, 80054d0 <_calloc_r+0x24>
 80054c2:	4628      	mov	r0, r5
 80054c4:	b003      	add	sp, #12
 80054c6:	bd30      	pop	{r4, r5, pc}
 80054c8:	220c      	movs	r2, #12
 80054ca:	6002      	str	r2, [r0, #0]
 80054cc:	2500      	movs	r5, #0
 80054ce:	e7f8      	b.n	80054c2 <_calloc_r+0x16>
 80054d0:	4621      	mov	r1, r4
 80054d2:	f000 ff11 	bl	80062f8 <memset>
 80054d6:	e7f4      	b.n	80054c2 <_calloc_r+0x16>

080054d8 <malloc>:
 80054d8:	4b02      	ldr	r3, [pc, #8]	; (80054e4 <malloc+0xc>)
 80054da:	4601      	mov	r1, r0
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	f000 b823 	b.w	8005528 <_malloc_r>
 80054e2:	bf00      	nop
 80054e4:	2000069c 	.word	0x2000069c

080054e8 <sbrk_aligned>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4e0e      	ldr	r6, [pc, #56]	; (8005524 <sbrk_aligned+0x3c>)
 80054ec:	460c      	mov	r4, r1
 80054ee:	6831      	ldr	r1, [r6, #0]
 80054f0:	4605      	mov	r5, r0
 80054f2:	b911      	cbnz	r1, 80054fa <sbrk_aligned+0x12>
 80054f4:	f000 ff52 	bl	800639c <_sbrk_r>
 80054f8:	6030      	str	r0, [r6, #0]
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 ff4d 	bl	800639c <_sbrk_r>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	d00a      	beq.n	800551c <sbrk_aligned+0x34>
 8005506:	1cc4      	adds	r4, r0, #3
 8005508:	f024 0403 	bic.w	r4, r4, #3
 800550c:	42a0      	cmp	r0, r4
 800550e:	d007      	beq.n	8005520 <sbrk_aligned+0x38>
 8005510:	1a21      	subs	r1, r4, r0
 8005512:	4628      	mov	r0, r5
 8005514:	f000 ff42 	bl	800639c <_sbrk_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d101      	bne.n	8005520 <sbrk_aligned+0x38>
 800551c:	f04f 34ff 	mov.w	r4, #4294967295
 8005520:	4620      	mov	r0, r4
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	200009d0 	.word	0x200009d0

08005528 <_malloc_r>:
 8005528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800552c:	1ccd      	adds	r5, r1, #3
 800552e:	f025 0503 	bic.w	r5, r5, #3
 8005532:	3508      	adds	r5, #8
 8005534:	2d0c      	cmp	r5, #12
 8005536:	bf38      	it	cc
 8005538:	250c      	movcc	r5, #12
 800553a:	2d00      	cmp	r5, #0
 800553c:	4607      	mov	r7, r0
 800553e:	db01      	blt.n	8005544 <_malloc_r+0x1c>
 8005540:	42a9      	cmp	r1, r5
 8005542:	d905      	bls.n	8005550 <_malloc_r+0x28>
 8005544:	230c      	movs	r3, #12
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	2600      	movs	r6, #0
 800554a:	4630      	mov	r0, r6
 800554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005624 <_malloc_r+0xfc>
 8005554:	f000 f868 	bl	8005628 <__malloc_lock>
 8005558:	f8d8 3000 	ldr.w	r3, [r8]
 800555c:	461c      	mov	r4, r3
 800555e:	bb5c      	cbnz	r4, 80055b8 <_malloc_r+0x90>
 8005560:	4629      	mov	r1, r5
 8005562:	4638      	mov	r0, r7
 8005564:	f7ff ffc0 	bl	80054e8 <sbrk_aligned>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	4604      	mov	r4, r0
 800556c:	d155      	bne.n	800561a <_malloc_r+0xf2>
 800556e:	f8d8 4000 	ldr.w	r4, [r8]
 8005572:	4626      	mov	r6, r4
 8005574:	2e00      	cmp	r6, #0
 8005576:	d145      	bne.n	8005604 <_malloc_r+0xdc>
 8005578:	2c00      	cmp	r4, #0
 800557a:	d048      	beq.n	800560e <_malloc_r+0xe6>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	4631      	mov	r1, r6
 8005580:	4638      	mov	r0, r7
 8005582:	eb04 0903 	add.w	r9, r4, r3
 8005586:	f000 ff09 	bl	800639c <_sbrk_r>
 800558a:	4581      	cmp	r9, r0
 800558c:	d13f      	bne.n	800560e <_malloc_r+0xe6>
 800558e:	6821      	ldr	r1, [r4, #0]
 8005590:	1a6d      	subs	r5, r5, r1
 8005592:	4629      	mov	r1, r5
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff ffa7 	bl	80054e8 <sbrk_aligned>
 800559a:	3001      	adds	r0, #1
 800559c:	d037      	beq.n	800560e <_malloc_r+0xe6>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	442b      	add	r3, r5
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	f8d8 3000 	ldr.w	r3, [r8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d038      	beq.n	800561e <_malloc_r+0xf6>
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	42a2      	cmp	r2, r4
 80055b0:	d12b      	bne.n	800560a <_malloc_r+0xe2>
 80055b2:	2200      	movs	r2, #0
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	e00f      	b.n	80055d8 <_malloc_r+0xb0>
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	1b52      	subs	r2, r2, r5
 80055bc:	d41f      	bmi.n	80055fe <_malloc_r+0xd6>
 80055be:	2a0b      	cmp	r2, #11
 80055c0:	d917      	bls.n	80055f2 <_malloc_r+0xca>
 80055c2:	1961      	adds	r1, r4, r5
 80055c4:	42a3      	cmp	r3, r4
 80055c6:	6025      	str	r5, [r4, #0]
 80055c8:	bf18      	it	ne
 80055ca:	6059      	strne	r1, [r3, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	bf08      	it	eq
 80055d0:	f8c8 1000 	streq.w	r1, [r8]
 80055d4:	5162      	str	r2, [r4, r5]
 80055d6:	604b      	str	r3, [r1, #4]
 80055d8:	4638      	mov	r0, r7
 80055da:	f104 060b 	add.w	r6, r4, #11
 80055de:	f000 f829 	bl	8005634 <__malloc_unlock>
 80055e2:	f026 0607 	bic.w	r6, r6, #7
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	1af2      	subs	r2, r6, r3
 80055ea:	d0ae      	beq.n	800554a <_malloc_r+0x22>
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	50a3      	str	r3, [r4, r2]
 80055f0:	e7ab      	b.n	800554a <_malloc_r+0x22>
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	6862      	ldr	r2, [r4, #4]
 80055f6:	d1dd      	bne.n	80055b4 <_malloc_r+0x8c>
 80055f8:	f8c8 2000 	str.w	r2, [r8]
 80055fc:	e7ec      	b.n	80055d8 <_malloc_r+0xb0>
 80055fe:	4623      	mov	r3, r4
 8005600:	6864      	ldr	r4, [r4, #4]
 8005602:	e7ac      	b.n	800555e <_malloc_r+0x36>
 8005604:	4634      	mov	r4, r6
 8005606:	6876      	ldr	r6, [r6, #4]
 8005608:	e7b4      	b.n	8005574 <_malloc_r+0x4c>
 800560a:	4613      	mov	r3, r2
 800560c:	e7cc      	b.n	80055a8 <_malloc_r+0x80>
 800560e:	230c      	movs	r3, #12
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4638      	mov	r0, r7
 8005614:	f000 f80e 	bl	8005634 <__malloc_unlock>
 8005618:	e797      	b.n	800554a <_malloc_r+0x22>
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	e7dc      	b.n	80055d8 <_malloc_r+0xb0>
 800561e:	605b      	str	r3, [r3, #4]
 8005620:	deff      	udf	#255	; 0xff
 8005622:	bf00      	nop
 8005624:	200009cc 	.word	0x200009cc

08005628 <__malloc_lock>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__malloc_lock+0x8>)
 800562a:	f000 bf03 	b.w	8006434 <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	20000b14 	.word	0x20000b14

08005634 <__malloc_unlock>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__malloc_unlock+0x8>)
 8005636:	f000 befe 	b.w	8006436 <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	20000b14 	.word	0x20000b14

08005640 <__cvt>:
 8005640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	ec55 4b10 	vmov	r4, r5, d0
 8005648:	2d00      	cmp	r5, #0
 800564a:	460e      	mov	r6, r1
 800564c:	4619      	mov	r1, r3
 800564e:	462b      	mov	r3, r5
 8005650:	bfbb      	ittet	lt
 8005652:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005656:	461d      	movlt	r5, r3
 8005658:	2300      	movge	r3, #0
 800565a:	232d      	movlt	r3, #45	; 0x2d
 800565c:	700b      	strb	r3, [r1, #0]
 800565e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005660:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005664:	4691      	mov	r9, r2
 8005666:	f023 0820 	bic.w	r8, r3, #32
 800566a:	bfbc      	itt	lt
 800566c:	4622      	movlt	r2, r4
 800566e:	4614      	movlt	r4, r2
 8005670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005674:	d005      	beq.n	8005682 <__cvt+0x42>
 8005676:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800567a:	d100      	bne.n	800567e <__cvt+0x3e>
 800567c:	3601      	adds	r6, #1
 800567e:	2102      	movs	r1, #2
 8005680:	e000      	b.n	8005684 <__cvt+0x44>
 8005682:	2103      	movs	r1, #3
 8005684:	ab03      	add	r3, sp, #12
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	ab02      	add	r3, sp, #8
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	ec45 4b10 	vmov	d0, r4, r5
 8005690:	4653      	mov	r3, sl
 8005692:	4632      	mov	r2, r6
 8005694:	f000 ff68 	bl	8006568 <_dtoa_r>
 8005698:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800569c:	4607      	mov	r7, r0
 800569e:	d102      	bne.n	80056a6 <__cvt+0x66>
 80056a0:	f019 0f01 	tst.w	r9, #1
 80056a4:	d022      	beq.n	80056ec <__cvt+0xac>
 80056a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056aa:	eb07 0906 	add.w	r9, r7, r6
 80056ae:	d110      	bne.n	80056d2 <__cvt+0x92>
 80056b0:	783b      	ldrb	r3, [r7, #0]
 80056b2:	2b30      	cmp	r3, #48	; 0x30
 80056b4:	d10a      	bne.n	80056cc <__cvt+0x8c>
 80056b6:	2200      	movs	r2, #0
 80056b8:	2300      	movs	r3, #0
 80056ba:	4620      	mov	r0, r4
 80056bc:	4629      	mov	r1, r5
 80056be:	f7fb fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80056c2:	b918      	cbnz	r0, 80056cc <__cvt+0x8c>
 80056c4:	f1c6 0601 	rsb	r6, r6, #1
 80056c8:	f8ca 6000 	str.w	r6, [sl]
 80056cc:	f8da 3000 	ldr.w	r3, [sl]
 80056d0:	4499      	add	r9, r3
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80056de:	b108      	cbz	r0, 80056e4 <__cvt+0xa4>
 80056e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056e4:	2230      	movs	r2, #48	; 0x30
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	454b      	cmp	r3, r9
 80056ea:	d307      	bcc.n	80056fc <__cvt+0xbc>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f0:	1bdb      	subs	r3, r3, r7
 80056f2:	4638      	mov	r0, r7
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	b004      	add	sp, #16
 80056f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	9103      	str	r1, [sp, #12]
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e7f0      	b.n	80056e6 <__cvt+0xa6>

08005704 <__exponent>:
 8005704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005706:	4603      	mov	r3, r0
 8005708:	2900      	cmp	r1, #0
 800570a:	bfb8      	it	lt
 800570c:	4249      	neglt	r1, r1
 800570e:	f803 2b02 	strb.w	r2, [r3], #2
 8005712:	bfb4      	ite	lt
 8005714:	222d      	movlt	r2, #45	; 0x2d
 8005716:	222b      	movge	r2, #43	; 0x2b
 8005718:	2909      	cmp	r1, #9
 800571a:	7042      	strb	r2, [r0, #1]
 800571c:	dd2a      	ble.n	8005774 <__exponent+0x70>
 800571e:	f10d 0207 	add.w	r2, sp, #7
 8005722:	4617      	mov	r7, r2
 8005724:	260a      	movs	r6, #10
 8005726:	4694      	mov	ip, r2
 8005728:	fb91 f5f6 	sdiv	r5, r1, r6
 800572c:	fb06 1415 	mls	r4, r6, r5, r1
 8005730:	3430      	adds	r4, #48	; 0x30
 8005732:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005736:	460c      	mov	r4, r1
 8005738:	2c63      	cmp	r4, #99	; 0x63
 800573a:	f102 32ff 	add.w	r2, r2, #4294967295
 800573e:	4629      	mov	r1, r5
 8005740:	dcf1      	bgt.n	8005726 <__exponent+0x22>
 8005742:	3130      	adds	r1, #48	; 0x30
 8005744:	f1ac 0402 	sub.w	r4, ip, #2
 8005748:	f802 1c01 	strb.w	r1, [r2, #-1]
 800574c:	1c41      	adds	r1, r0, #1
 800574e:	4622      	mov	r2, r4
 8005750:	42ba      	cmp	r2, r7
 8005752:	d30a      	bcc.n	800576a <__exponent+0x66>
 8005754:	f10d 0209 	add.w	r2, sp, #9
 8005758:	eba2 020c 	sub.w	r2, r2, ip
 800575c:	42bc      	cmp	r4, r7
 800575e:	bf88      	it	hi
 8005760:	2200      	movhi	r2, #0
 8005762:	4413      	add	r3, r2
 8005764:	1a18      	subs	r0, r3, r0
 8005766:	b003      	add	sp, #12
 8005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800576e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005772:	e7ed      	b.n	8005750 <__exponent+0x4c>
 8005774:	2330      	movs	r3, #48	; 0x30
 8005776:	3130      	adds	r1, #48	; 0x30
 8005778:	7083      	strb	r3, [r0, #2]
 800577a:	70c1      	strb	r1, [r0, #3]
 800577c:	1d03      	adds	r3, r0, #4
 800577e:	e7f1      	b.n	8005764 <__exponent+0x60>

08005780 <_printf_float>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	ed2d 8b02 	vpush	{d8}
 8005788:	b08d      	sub	sp, #52	; 0x34
 800578a:	460c      	mov	r4, r1
 800578c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005790:	4616      	mov	r6, r2
 8005792:	461f      	mov	r7, r3
 8005794:	4605      	mov	r5, r0
 8005796:	f000 fdc9 	bl	800632c <_localeconv_r>
 800579a:	f8d0 a000 	ldr.w	sl, [r0]
 800579e:	4650      	mov	r0, sl
 80057a0:	f7fa fd66 	bl	8000270 <strlen>
 80057a4:	2300      	movs	r3, #0
 80057a6:	930a      	str	r3, [sp, #40]	; 0x28
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	f8d8 3000 	ldr.w	r3, [r8]
 80057b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057b4:	3307      	adds	r3, #7
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	f8c8 2000 	str.w	r2, [r8]
 80057c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057ca:	9307      	str	r3, [sp, #28]
 80057cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80057d0:	ee08 0a10 	vmov	s16, r0
 80057d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80057d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057dc:	4b9e      	ldr	r3, [pc, #632]	; (8005a58 <_printf_float+0x2d8>)
 80057de:	f04f 32ff 	mov.w	r2, #4294967295
 80057e2:	f7fb f9a3 	bl	8000b2c <__aeabi_dcmpun>
 80057e6:	bb88      	cbnz	r0, 800584c <_printf_float+0xcc>
 80057e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ec:	4b9a      	ldr	r3, [pc, #616]	; (8005a58 <_printf_float+0x2d8>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	f7fb f97d 	bl	8000af0 <__aeabi_dcmple>
 80057f6:	bb48      	cbnz	r0, 800584c <_printf_float+0xcc>
 80057f8:	2200      	movs	r2, #0
 80057fa:	2300      	movs	r3, #0
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fb f96c 	bl	8000adc <__aeabi_dcmplt>
 8005804:	b110      	cbz	r0, 800580c <_printf_float+0x8c>
 8005806:	232d      	movs	r3, #45	; 0x2d
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	4a93      	ldr	r2, [pc, #588]	; (8005a5c <_printf_float+0x2dc>)
 800580e:	4b94      	ldr	r3, [pc, #592]	; (8005a60 <_printf_float+0x2e0>)
 8005810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005814:	bf94      	ite	ls
 8005816:	4690      	movls	r8, r2
 8005818:	4698      	movhi	r8, r3
 800581a:	2303      	movs	r3, #3
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	9b05      	ldr	r3, [sp, #20]
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	f04f 0900 	mov.w	r9, #0
 800582a:	9700      	str	r7, [sp, #0]
 800582c:	4633      	mov	r3, r6
 800582e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005830:	4621      	mov	r1, r4
 8005832:	4628      	mov	r0, r5
 8005834:	f000 f9da 	bl	8005bec <_printf_common>
 8005838:	3001      	adds	r0, #1
 800583a:	f040 8090 	bne.w	800595e <_printf_float+0x1de>
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	b00d      	add	sp, #52	; 0x34
 8005844:	ecbd 8b02 	vpop	{d8}
 8005848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	4642      	mov	r2, r8
 800584e:	464b      	mov	r3, r9
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fb f96a 	bl	8000b2c <__aeabi_dcmpun>
 8005858:	b140      	cbz	r0, 800586c <_printf_float+0xec>
 800585a:	464b      	mov	r3, r9
 800585c:	2b00      	cmp	r3, #0
 800585e:	bfbc      	itt	lt
 8005860:	232d      	movlt	r3, #45	; 0x2d
 8005862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005866:	4a7f      	ldr	r2, [pc, #508]	; (8005a64 <_printf_float+0x2e4>)
 8005868:	4b7f      	ldr	r3, [pc, #508]	; (8005a68 <_printf_float+0x2e8>)
 800586a:	e7d1      	b.n	8005810 <_printf_float+0x90>
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005872:	9206      	str	r2, [sp, #24]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	d13f      	bne.n	80058f8 <_printf_float+0x178>
 8005878:	2306      	movs	r3, #6
 800587a:	6063      	str	r3, [r4, #4]
 800587c:	9b05      	ldr	r3, [sp, #20]
 800587e:	6861      	ldr	r1, [r4, #4]
 8005880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005884:	2300      	movs	r3, #0
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	ab0a      	add	r3, sp, #40	; 0x28
 800588a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800588e:	ab09      	add	r3, sp, #36	; 0x24
 8005890:	ec49 8b10 	vmov	d0, r8, r9
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800589c:	4628      	mov	r0, r5
 800589e:	f7ff fecf 	bl	8005640 <__cvt>
 80058a2:	9b06      	ldr	r3, [sp, #24]
 80058a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058a6:	2b47      	cmp	r3, #71	; 0x47
 80058a8:	4680      	mov	r8, r0
 80058aa:	d108      	bne.n	80058be <_printf_float+0x13e>
 80058ac:	1cc8      	adds	r0, r1, #3
 80058ae:	db02      	blt.n	80058b6 <_printf_float+0x136>
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	4299      	cmp	r1, r3
 80058b4:	dd41      	ble.n	800593a <_printf_float+0x1ba>
 80058b6:	f1ab 0302 	sub.w	r3, fp, #2
 80058ba:	fa5f fb83 	uxtb.w	fp, r3
 80058be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058c2:	d820      	bhi.n	8005906 <_printf_float+0x186>
 80058c4:	3901      	subs	r1, #1
 80058c6:	465a      	mov	r2, fp
 80058c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058cc:	9109      	str	r1, [sp, #36]	; 0x24
 80058ce:	f7ff ff19 	bl	8005704 <__exponent>
 80058d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d4:	1813      	adds	r3, r2, r0
 80058d6:	2a01      	cmp	r2, #1
 80058d8:	4681      	mov	r9, r0
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	dc02      	bgt.n	80058e4 <_printf_float+0x164>
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	07d2      	lsls	r2, r2, #31
 80058e2:	d501      	bpl.n	80058e8 <_printf_float+0x168>
 80058e4:	3301      	adds	r3, #1
 80058e6:	6123      	str	r3, [r4, #16]
 80058e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d09c      	beq.n	800582a <_printf_float+0xaa>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	e798      	b.n	800582a <_printf_float+0xaa>
 80058f8:	9a06      	ldr	r2, [sp, #24]
 80058fa:	2a47      	cmp	r2, #71	; 0x47
 80058fc:	d1be      	bne.n	800587c <_printf_float+0xfc>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1bc      	bne.n	800587c <_printf_float+0xfc>
 8005902:	2301      	movs	r3, #1
 8005904:	e7b9      	b.n	800587a <_printf_float+0xfa>
 8005906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800590a:	d118      	bne.n	800593e <_printf_float+0x1be>
 800590c:	2900      	cmp	r1, #0
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	dd0b      	ble.n	800592a <_printf_float+0x1aa>
 8005912:	6121      	str	r1, [r4, #16]
 8005914:	b913      	cbnz	r3, 800591c <_printf_float+0x19c>
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	07d0      	lsls	r0, r2, #31
 800591a:	d502      	bpl.n	8005922 <_printf_float+0x1a2>
 800591c:	3301      	adds	r3, #1
 800591e:	440b      	add	r3, r1
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	65a1      	str	r1, [r4, #88]	; 0x58
 8005924:	f04f 0900 	mov.w	r9, #0
 8005928:	e7de      	b.n	80058e8 <_printf_float+0x168>
 800592a:	b913      	cbnz	r3, 8005932 <_printf_float+0x1b2>
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	07d2      	lsls	r2, r2, #31
 8005930:	d501      	bpl.n	8005936 <_printf_float+0x1b6>
 8005932:	3302      	adds	r3, #2
 8005934:	e7f4      	b.n	8005920 <_printf_float+0x1a0>
 8005936:	2301      	movs	r3, #1
 8005938:	e7f2      	b.n	8005920 <_printf_float+0x1a0>
 800593a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800593e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005940:	4299      	cmp	r1, r3
 8005942:	db05      	blt.n	8005950 <_printf_float+0x1d0>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	6121      	str	r1, [r4, #16]
 8005948:	07d8      	lsls	r0, r3, #31
 800594a:	d5ea      	bpl.n	8005922 <_printf_float+0x1a2>
 800594c:	1c4b      	adds	r3, r1, #1
 800594e:	e7e7      	b.n	8005920 <_printf_float+0x1a0>
 8005950:	2900      	cmp	r1, #0
 8005952:	bfd4      	ite	le
 8005954:	f1c1 0202 	rsble	r2, r1, #2
 8005958:	2201      	movgt	r2, #1
 800595a:	4413      	add	r3, r2
 800595c:	e7e0      	b.n	8005920 <_printf_float+0x1a0>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	055a      	lsls	r2, r3, #21
 8005962:	d407      	bmi.n	8005974 <_printf_float+0x1f4>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	4642      	mov	r2, r8
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	d12c      	bne.n	80059cc <_printf_float+0x24c>
 8005972:	e764      	b.n	800583e <_printf_float+0xbe>
 8005974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005978:	f240 80e0 	bls.w	8005b3c <_printf_float+0x3bc>
 800597c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	f7fb f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005988:	2800      	cmp	r0, #0
 800598a:	d034      	beq.n	80059f6 <_printf_float+0x276>
 800598c:	4a37      	ldr	r2, [pc, #220]	; (8005a6c <_printf_float+0x2ec>)
 800598e:	2301      	movs	r3, #1
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f af51 	beq.w	800583e <_printf_float+0xbe>
 800599c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a0:	429a      	cmp	r2, r3
 80059a2:	db02      	blt.n	80059aa <_printf_float+0x22a>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	07d8      	lsls	r0, r3, #31
 80059a8:	d510      	bpl.n	80059cc <_printf_float+0x24c>
 80059aa:	ee18 3a10 	vmov	r3, s16
 80059ae:	4652      	mov	r2, sl
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f af41 	beq.w	800583e <_printf_float+0xbe>
 80059bc:	f04f 0800 	mov.w	r8, #0
 80059c0:	f104 091a 	add.w	r9, r4, #26
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4543      	cmp	r3, r8
 80059ca:	dc09      	bgt.n	80059e0 <_printf_float+0x260>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	079b      	lsls	r3, r3, #30
 80059d0:	f100 8107 	bmi.w	8005be2 <_printf_float+0x462>
 80059d4:	68e0      	ldr	r0, [r4, #12]
 80059d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d8:	4298      	cmp	r0, r3
 80059da:	bfb8      	it	lt
 80059dc:	4618      	movlt	r0, r3
 80059de:	e730      	b.n	8005842 <_printf_float+0xc2>
 80059e0:	2301      	movs	r3, #1
 80059e2:	464a      	mov	r2, r9
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f af27 	beq.w	800583e <_printf_float+0xbe>
 80059f0:	f108 0801 	add.w	r8, r8, #1
 80059f4:	e7e6      	b.n	80059c4 <_printf_float+0x244>
 80059f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dc39      	bgt.n	8005a70 <_printf_float+0x2f0>
 80059fc:	4a1b      	ldr	r2, [pc, #108]	; (8005a6c <_printf_float+0x2ec>)
 80059fe:	2301      	movs	r3, #1
 8005a00:	4631      	mov	r1, r6
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f af19 	beq.w	800583e <_printf_float+0xbe>
 8005a0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d102      	bne.n	8005a1a <_printf_float+0x29a>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07d9      	lsls	r1, r3, #31
 8005a18:	d5d8      	bpl.n	80059cc <_printf_float+0x24c>
 8005a1a:	ee18 3a10 	vmov	r3, s16
 8005a1e:	4652      	mov	r2, sl
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f af09 	beq.w	800583e <_printf_float+0xbe>
 8005a2c:	f04f 0900 	mov.w	r9, #0
 8005a30:	f104 0a1a 	add.w	sl, r4, #26
 8005a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a36:	425b      	negs	r3, r3
 8005a38:	454b      	cmp	r3, r9
 8005a3a:	dc01      	bgt.n	8005a40 <_printf_float+0x2c0>
 8005a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3e:	e792      	b.n	8005966 <_printf_float+0x1e6>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4652      	mov	r2, sl
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f aef7 	beq.w	800583e <_printf_float+0xbe>
 8005a50:	f109 0901 	add.w	r9, r9, #1
 8005a54:	e7ee      	b.n	8005a34 <_printf_float+0x2b4>
 8005a56:	bf00      	nop
 8005a58:	7fefffff 	.word	0x7fefffff
 8005a5c:	08009ae4 	.word	0x08009ae4
 8005a60:	08009ae8 	.word	0x08009ae8
 8005a64:	08009aec 	.word	0x08009aec
 8005a68:	08009af0 	.word	0x08009af0
 8005a6c:	08008309 	.word	0x08008309
 8005a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bfa8      	it	ge
 8005a78:	461a      	movge	r2, r3
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	4691      	mov	r9, r2
 8005a7e:	dc37      	bgt.n	8005af0 <_printf_float+0x370>
 8005a80:	f04f 0b00 	mov.w	fp, #0
 8005a84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a88:	f104 021a 	add.w	r2, r4, #26
 8005a8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a8e:	9305      	str	r3, [sp, #20]
 8005a90:	eba3 0309 	sub.w	r3, r3, r9
 8005a94:	455b      	cmp	r3, fp
 8005a96:	dc33      	bgt.n	8005b00 <_printf_float+0x380>
 8005a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	db3b      	blt.n	8005b18 <_printf_float+0x398>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	07da      	lsls	r2, r3, #31
 8005aa4:	d438      	bmi.n	8005b18 <_printf_float+0x398>
 8005aa6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005aaa:	eba2 0903 	sub.w	r9, r2, r3
 8005aae:	9b05      	ldr	r3, [sp, #20]
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	4591      	cmp	r9, r2
 8005ab4:	bfa8      	it	ge
 8005ab6:	4691      	movge	r9, r2
 8005ab8:	f1b9 0f00 	cmp.w	r9, #0
 8005abc:	dc35      	bgt.n	8005b2a <_printf_float+0x3aa>
 8005abe:	f04f 0800 	mov.w	r8, #0
 8005ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ac6:	f104 0a1a 	add.w	sl, r4, #26
 8005aca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	eba3 0309 	sub.w	r3, r3, r9
 8005ad4:	4543      	cmp	r3, r8
 8005ad6:	f77f af79 	ble.w	80059cc <_printf_float+0x24c>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4652      	mov	r2, sl
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f43f aeaa 	beq.w	800583e <_printf_float+0xbe>
 8005aea:	f108 0801 	add.w	r8, r8, #1
 8005aee:	e7ec      	b.n	8005aca <_printf_float+0x34a>
 8005af0:	4613      	mov	r3, r2
 8005af2:	4631      	mov	r1, r6
 8005af4:	4642      	mov	r2, r8
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	d1c0      	bne.n	8005a80 <_printf_float+0x300>
 8005afe:	e69e      	b.n	800583e <_printf_float+0xbe>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4631      	mov	r1, r6
 8005b04:	4628      	mov	r0, r5
 8005b06:	9205      	str	r2, [sp, #20]
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f ae97 	beq.w	800583e <_printf_float+0xbe>
 8005b10:	9a05      	ldr	r2, [sp, #20]
 8005b12:	f10b 0b01 	add.w	fp, fp, #1
 8005b16:	e7b9      	b.n	8005a8c <_printf_float+0x30c>
 8005b18:	ee18 3a10 	vmov	r3, s16
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	d1be      	bne.n	8005aa6 <_printf_float+0x326>
 8005b28:	e689      	b.n	800583e <_printf_float+0xbe>
 8005b2a:	9a05      	ldr	r2, [sp, #20]
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	4442      	add	r2, r8
 8005b30:	4631      	mov	r1, r6
 8005b32:	4628      	mov	r0, r5
 8005b34:	47b8      	blx	r7
 8005b36:	3001      	adds	r0, #1
 8005b38:	d1c1      	bne.n	8005abe <_printf_float+0x33e>
 8005b3a:	e680      	b.n	800583e <_printf_float+0xbe>
 8005b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b3e:	2a01      	cmp	r2, #1
 8005b40:	dc01      	bgt.n	8005b46 <_printf_float+0x3c6>
 8005b42:	07db      	lsls	r3, r3, #31
 8005b44:	d53a      	bpl.n	8005bbc <_printf_float+0x43c>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4642      	mov	r2, r8
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f ae74 	beq.w	800583e <_printf_float+0xbe>
 8005b56:	ee18 3a10 	vmov	r3, s16
 8005b5a:	4652      	mov	r2, sl
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f ae6b 	beq.w	800583e <_printf_float+0xbe>
 8005b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b74:	f7fa ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b78:	b9d8      	cbnz	r0, 8005bb2 <_printf_float+0x432>
 8005b7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b7e:	f108 0201 	add.w	r2, r8, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d10e      	bne.n	8005baa <_printf_float+0x42a>
 8005b8c:	e657      	b.n	800583e <_printf_float+0xbe>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4652      	mov	r2, sl
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae50 	beq.w	800583e <_printf_float+0xbe>
 8005b9e:	f108 0801 	add.w	r8, r8, #1
 8005ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4543      	cmp	r3, r8
 8005ba8:	dcf1      	bgt.n	8005b8e <_printf_float+0x40e>
 8005baa:	464b      	mov	r3, r9
 8005bac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bb0:	e6da      	b.n	8005968 <_printf_float+0x1e8>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	f104 0a1a 	add.w	sl, r4, #26
 8005bba:	e7f2      	b.n	8005ba2 <_printf_float+0x422>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	e7df      	b.n	8005b82 <_printf_float+0x402>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	464a      	mov	r2, r9
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f ae36 	beq.w	800583e <_printf_float+0xbe>
 8005bd2:	f108 0801 	add.w	r8, r8, #1
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bda:	1a5b      	subs	r3, r3, r1
 8005bdc:	4543      	cmp	r3, r8
 8005bde:	dcf0      	bgt.n	8005bc2 <_printf_float+0x442>
 8005be0:	e6f8      	b.n	80059d4 <_printf_float+0x254>
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	f104 0919 	add.w	r9, r4, #25
 8005bea:	e7f4      	b.n	8005bd6 <_printf_float+0x456>

08005bec <_printf_common>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	4616      	mov	r6, r2
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	688a      	ldr	r2, [r1, #8]
 8005bf6:	690b      	ldr	r3, [r1, #16]
 8005bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	bfb8      	it	lt
 8005c00:	4613      	movlt	r3, r2
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c08:	4607      	mov	r7, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	b10a      	cbz	r2, 8005c12 <_printf_common+0x26>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	0699      	lsls	r1, r3, #26
 8005c16:	bf42      	ittt	mi
 8005c18:	6833      	ldrmi	r3, [r6, #0]
 8005c1a:	3302      	addmi	r3, #2
 8005c1c:	6033      	strmi	r3, [r6, #0]
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	f015 0506 	ands.w	r5, r5, #6
 8005c24:	d106      	bne.n	8005c34 <_printf_common+0x48>
 8005c26:	f104 0a19 	add.w	sl, r4, #25
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	6832      	ldr	r2, [r6, #0]
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dc26      	bgt.n	8005c82 <_printf_common+0x96>
 8005c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c38:	1e13      	subs	r3, r2, #0
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	bf18      	it	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	0692      	lsls	r2, r2, #26
 8005c42:	d42b      	bmi.n	8005c9c <_printf_common+0xb0>
 8005c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d01e      	beq.n	8005c90 <_printf_common+0xa4>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	6922      	ldr	r2, [r4, #16]
 8005c56:	f003 0306 	and.w	r3, r3, #6
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	bf02      	ittt	eq
 8005c5e:	68e5      	ldreq	r5, [r4, #12]
 8005c60:	6833      	ldreq	r3, [r6, #0]
 8005c62:	1aed      	subeq	r5, r5, r3
 8005c64:	68a3      	ldr	r3, [r4, #8]
 8005c66:	bf0c      	ite	eq
 8005c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c6c:	2500      	movne	r5, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfc4      	itt	gt
 8005c72:	1a9b      	subgt	r3, r3, r2
 8005c74:	18ed      	addgt	r5, r5, r3
 8005c76:	2600      	movs	r6, #0
 8005c78:	341a      	adds	r4, #26
 8005c7a:	42b5      	cmp	r5, r6
 8005c7c:	d11a      	bne.n	8005cb4 <_printf_common+0xc8>
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e008      	b.n	8005c94 <_printf_common+0xa8>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4652      	mov	r2, sl
 8005c86:	4649      	mov	r1, r9
 8005c88:	4638      	mov	r0, r7
 8005c8a:	47c0      	blx	r8
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d103      	bne.n	8005c98 <_printf_common+0xac>
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c98:	3501      	adds	r5, #1
 8005c9a:	e7c6      	b.n	8005c2a <_printf_common+0x3e>
 8005c9c:	18e1      	adds	r1, r4, r3
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	2030      	movs	r0, #48	; 0x30
 8005ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca6:	4422      	add	r2, r4
 8005ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	e7c7      	b.n	8005c44 <_printf_common+0x58>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d0e6      	beq.n	8005c90 <_printf_common+0xa4>
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7d9      	b.n	8005c7a <_printf_common+0x8e>
	...

08005cc8 <_printf_i>:
 8005cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	7e0f      	ldrb	r7, [r1, #24]
 8005cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd0:	2f78      	cmp	r7, #120	; 0x78
 8005cd2:	4691      	mov	r9, r2
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	469a      	mov	sl, r3
 8005cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cde:	d807      	bhi.n	8005cf0 <_printf_i+0x28>
 8005ce0:	2f62      	cmp	r7, #98	; 0x62
 8005ce2:	d80a      	bhi.n	8005cfa <_printf_i+0x32>
 8005ce4:	2f00      	cmp	r7, #0
 8005ce6:	f000 80d4 	beq.w	8005e92 <_printf_i+0x1ca>
 8005cea:	2f58      	cmp	r7, #88	; 0x58
 8005cec:	f000 80c0 	beq.w	8005e70 <_printf_i+0x1a8>
 8005cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf8:	e03a      	b.n	8005d70 <_printf_i+0xa8>
 8005cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cfe:	2b15      	cmp	r3, #21
 8005d00:	d8f6      	bhi.n	8005cf0 <_printf_i+0x28>
 8005d02:	a101      	add	r1, pc, #4	; (adr r1, 8005d08 <_printf_i+0x40>)
 8005d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d08:	08005d61 	.word	0x08005d61
 8005d0c:	08005d75 	.word	0x08005d75
 8005d10:	08005cf1 	.word	0x08005cf1
 8005d14:	08005cf1 	.word	0x08005cf1
 8005d18:	08005cf1 	.word	0x08005cf1
 8005d1c:	08005cf1 	.word	0x08005cf1
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005cf1 	.word	0x08005cf1
 8005d28:	08005cf1 	.word	0x08005cf1
 8005d2c:	08005cf1 	.word	0x08005cf1
 8005d30:	08005cf1 	.word	0x08005cf1
 8005d34:	08005e79 	.word	0x08005e79
 8005d38:	08005da1 	.word	0x08005da1
 8005d3c:	08005e33 	.word	0x08005e33
 8005d40:	08005cf1 	.word	0x08005cf1
 8005d44:	08005cf1 	.word	0x08005cf1
 8005d48:	08005e9b 	.word	0x08005e9b
 8005d4c:	08005cf1 	.word	0x08005cf1
 8005d50:	08005da1 	.word	0x08005da1
 8005d54:	08005cf1 	.word	0x08005cf1
 8005d58:	08005cf1 	.word	0x08005cf1
 8005d5c:	08005e3b 	.word	0x08005e3b
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	602a      	str	r2, [r5, #0]
 8005d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d70:	2301      	movs	r3, #1
 8005d72:	e09f      	b.n	8005eb4 <_printf_i+0x1ec>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	0607      	lsls	r7, r0, #24
 8005d7a:	f103 0104 	add.w	r1, r3, #4
 8005d7e:	6029      	str	r1, [r5, #0]
 8005d80:	d501      	bpl.n	8005d86 <_printf_i+0xbe>
 8005d82:	681e      	ldr	r6, [r3, #0]
 8005d84:	e003      	b.n	8005d8e <_printf_i+0xc6>
 8005d86:	0646      	lsls	r6, r0, #25
 8005d88:	d5fb      	bpl.n	8005d82 <_printf_i+0xba>
 8005d8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	da03      	bge.n	8005d9a <_printf_i+0xd2>
 8005d92:	232d      	movs	r3, #45	; 0x2d
 8005d94:	4276      	negs	r6, r6
 8005d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9a:	485a      	ldr	r0, [pc, #360]	; (8005f04 <_printf_i+0x23c>)
 8005d9c:	230a      	movs	r3, #10
 8005d9e:	e012      	b.n	8005dc6 <_printf_i+0xfe>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	6820      	ldr	r0, [r4, #0]
 8005da4:	1d19      	adds	r1, r3, #4
 8005da6:	6029      	str	r1, [r5, #0]
 8005da8:	0605      	lsls	r5, r0, #24
 8005daa:	d501      	bpl.n	8005db0 <_printf_i+0xe8>
 8005dac:	681e      	ldr	r6, [r3, #0]
 8005dae:	e002      	b.n	8005db6 <_printf_i+0xee>
 8005db0:	0641      	lsls	r1, r0, #25
 8005db2:	d5fb      	bpl.n	8005dac <_printf_i+0xe4>
 8005db4:	881e      	ldrh	r6, [r3, #0]
 8005db6:	4853      	ldr	r0, [pc, #332]	; (8005f04 <_printf_i+0x23c>)
 8005db8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dba:	bf0c      	ite	eq
 8005dbc:	2308      	moveq	r3, #8
 8005dbe:	230a      	movne	r3, #10
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc6:	6865      	ldr	r5, [r4, #4]
 8005dc8:	60a5      	str	r5, [r4, #8]
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	bfa2      	ittt	ge
 8005dce:	6821      	ldrge	r1, [r4, #0]
 8005dd0:	f021 0104 	bicge.w	r1, r1, #4
 8005dd4:	6021      	strge	r1, [r4, #0]
 8005dd6:	b90e      	cbnz	r6, 8005ddc <_printf_i+0x114>
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	d04b      	beq.n	8005e74 <_printf_i+0x1ac>
 8005ddc:	4615      	mov	r5, r2
 8005dde:	fbb6 f1f3 	udiv	r1, r6, r3
 8005de2:	fb03 6711 	mls	r7, r3, r1, r6
 8005de6:	5dc7      	ldrb	r7, [r0, r7]
 8005de8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dec:	4637      	mov	r7, r6
 8005dee:	42bb      	cmp	r3, r7
 8005df0:	460e      	mov	r6, r1
 8005df2:	d9f4      	bls.n	8005dde <_printf_i+0x116>
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d10b      	bne.n	8005e10 <_printf_i+0x148>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	07de      	lsls	r6, r3, #31
 8005dfc:	d508      	bpl.n	8005e10 <_printf_i+0x148>
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	6861      	ldr	r1, [r4, #4]
 8005e02:	4299      	cmp	r1, r3
 8005e04:	bfde      	ittt	le
 8005e06:	2330      	movle	r3, #48	; 0x30
 8005e08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e10:	1b52      	subs	r2, r2, r5
 8005e12:	6122      	str	r2, [r4, #16]
 8005e14:	f8cd a000 	str.w	sl, [sp]
 8005e18:	464b      	mov	r3, r9
 8005e1a:	aa03      	add	r2, sp, #12
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7ff fee4 	bl	8005bec <_printf_common>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d14a      	bne.n	8005ebe <_printf_i+0x1f6>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	b004      	add	sp, #16
 8005e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	f043 0320 	orr.w	r3, r3, #32
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	4833      	ldr	r0, [pc, #204]	; (8005f08 <_printf_i+0x240>)
 8005e3c:	2778      	movs	r7, #120	; 0x78
 8005e3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	6829      	ldr	r1, [r5, #0]
 8005e46:	061f      	lsls	r7, r3, #24
 8005e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e4c:	d402      	bmi.n	8005e54 <_printf_i+0x18c>
 8005e4e:	065f      	lsls	r7, r3, #25
 8005e50:	bf48      	it	mi
 8005e52:	b2b6      	uxthmi	r6, r6
 8005e54:	07df      	lsls	r7, r3, #31
 8005e56:	bf48      	it	mi
 8005e58:	f043 0320 	orrmi.w	r3, r3, #32
 8005e5c:	6029      	str	r1, [r5, #0]
 8005e5e:	bf48      	it	mi
 8005e60:	6023      	strmi	r3, [r4, #0]
 8005e62:	b91e      	cbnz	r6, 8005e6c <_printf_i+0x1a4>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	f023 0320 	bic.w	r3, r3, #32
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	e7a7      	b.n	8005dc0 <_printf_i+0xf8>
 8005e70:	4824      	ldr	r0, [pc, #144]	; (8005f04 <_printf_i+0x23c>)
 8005e72:	e7e4      	b.n	8005e3e <_printf_i+0x176>
 8005e74:	4615      	mov	r5, r2
 8005e76:	e7bd      	b.n	8005df4 <_printf_i+0x12c>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	6826      	ldr	r6, [r4, #0]
 8005e7c:	6961      	ldr	r1, [r4, #20]
 8005e7e:	1d18      	adds	r0, r3, #4
 8005e80:	6028      	str	r0, [r5, #0]
 8005e82:	0635      	lsls	r5, r6, #24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	d501      	bpl.n	8005e8c <_printf_i+0x1c4>
 8005e88:	6019      	str	r1, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <_printf_i+0x1ca>
 8005e8c:	0670      	lsls	r0, r6, #25
 8005e8e:	d5fb      	bpl.n	8005e88 <_printf_i+0x1c0>
 8005e90:	8019      	strh	r1, [r3, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	4615      	mov	r5, r2
 8005e98:	e7bc      	b.n	8005e14 <_printf_i+0x14c>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	602a      	str	r2, [r5, #0]
 8005ea0:	681d      	ldr	r5, [r3, #0]
 8005ea2:	6862      	ldr	r2, [r4, #4]
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7fa f992 	bl	80001d0 <memchr>
 8005eac:	b108      	cbz	r0, 8005eb2 <_printf_i+0x1ea>
 8005eae:	1b40      	subs	r0, r0, r5
 8005eb0:	6060      	str	r0, [r4, #4]
 8005eb2:	6863      	ldr	r3, [r4, #4]
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebc:	e7aa      	b.n	8005e14 <_printf_i+0x14c>
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	47d0      	blx	sl
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d0ad      	beq.n	8005e28 <_printf_i+0x160>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	079b      	lsls	r3, r3, #30
 8005ed0:	d413      	bmi.n	8005efa <_printf_i+0x232>
 8005ed2:	68e0      	ldr	r0, [r4, #12]
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	4298      	cmp	r0, r3
 8005ed8:	bfb8      	it	lt
 8005eda:	4618      	movlt	r0, r3
 8005edc:	e7a6      	b.n	8005e2c <_printf_i+0x164>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	47d0      	blx	sl
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d09d      	beq.n	8005e28 <_printf_i+0x160>
 8005eec:	3501      	adds	r5, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	9903      	ldr	r1, [sp, #12]
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dcf2      	bgt.n	8005ede <_printf_i+0x216>
 8005ef8:	e7eb      	b.n	8005ed2 <_printf_i+0x20a>
 8005efa:	2500      	movs	r5, #0
 8005efc:	f104 0619 	add.w	r6, r4, #25
 8005f00:	e7f5      	b.n	8005eee <_printf_i+0x226>
 8005f02:	bf00      	nop
 8005f04:	08009af4 	.word	0x08009af4
 8005f08:	08009b05 	.word	0x08009b05

08005f0c <std>:
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	4604      	mov	r4, r0
 8005f12:	e9c0 3300 	strd	r3, r3, [r0]
 8005f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f1a:	6083      	str	r3, [r0, #8]
 8005f1c:	8181      	strh	r1, [r0, #12]
 8005f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f20:	81c2      	strh	r2, [r0, #14]
 8005f22:	6183      	str	r3, [r0, #24]
 8005f24:	4619      	mov	r1, r3
 8005f26:	2208      	movs	r2, #8
 8005f28:	305c      	adds	r0, #92	; 0x5c
 8005f2a:	f000 f9e5 	bl	80062f8 <memset>
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <std+0x38>)
 8005f30:	6263      	str	r3, [r4, #36]	; 0x24
 8005f32:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <std+0x3c>)
 8005f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <std+0x40>)
 8005f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <std+0x44>)
 8005f3c:	6224      	str	r4, [r4, #32]
 8005f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005f40:	bd10      	pop	{r4, pc}
 8005f42:	bf00      	nop
 8005f44:	08006149 	.word	0x08006149
 8005f48:	0800616b 	.word	0x0800616b
 8005f4c:	080061a3 	.word	0x080061a3
 8005f50:	080061c7 	.word	0x080061c7

08005f54 <stdio_exit_handler>:
 8005f54:	4a02      	ldr	r2, [pc, #8]	; (8005f60 <stdio_exit_handler+0xc>)
 8005f56:	4903      	ldr	r1, [pc, #12]	; (8005f64 <stdio_exit_handler+0x10>)
 8005f58:	4803      	ldr	r0, [pc, #12]	; (8005f68 <stdio_exit_handler+0x14>)
 8005f5a:	f000 b869 	b.w	8006030 <_fwalk_sglue>
 8005f5e:	bf00      	nop
 8005f60:	20000644 	.word	0x20000644
 8005f64:	08007c71 	.word	0x08007c71
 8005f68:	20000650 	.word	0x20000650

08005f6c <cleanup_stdio>:
 8005f6c:	6841      	ldr	r1, [r0, #4]
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <cleanup_stdio+0x34>)
 8005f70:	4299      	cmp	r1, r3
 8005f72:	b510      	push	{r4, lr}
 8005f74:	4604      	mov	r4, r0
 8005f76:	d001      	beq.n	8005f7c <cleanup_stdio+0x10>
 8005f78:	f001 fe7a 	bl	8007c70 <_fflush_r>
 8005f7c:	68a1      	ldr	r1, [r4, #8]
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <cleanup_stdio+0x38>)
 8005f80:	4299      	cmp	r1, r3
 8005f82:	d002      	beq.n	8005f8a <cleanup_stdio+0x1e>
 8005f84:	4620      	mov	r0, r4
 8005f86:	f001 fe73 	bl	8007c70 <_fflush_r>
 8005f8a:	68e1      	ldr	r1, [r4, #12]
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <cleanup_stdio+0x3c>)
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	d004      	beq.n	8005f9c <cleanup_stdio+0x30>
 8005f92:	4620      	mov	r0, r4
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f98:	f001 be6a 	b.w	8007c70 <_fflush_r>
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	200009d4 	.word	0x200009d4
 8005fa4:	20000a3c 	.word	0x20000a3c
 8005fa8:	20000aa4 	.word	0x20000aa4

08005fac <global_stdio_init.part.0>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <global_stdio_init.part.0+0x30>)
 8005fb0:	4c0b      	ldr	r4, [pc, #44]	; (8005fe0 <global_stdio_init.part.0+0x34>)
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <global_stdio_init.part.0+0x38>)
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2104      	movs	r1, #4
 8005fbc:	f7ff ffa6 	bl	8005f0c <std>
 8005fc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	2109      	movs	r1, #9
 8005fc8:	f7ff ffa0 	bl	8005f0c <std>
 8005fcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd6:	2112      	movs	r1, #18
 8005fd8:	f7ff bf98 	b.w	8005f0c <std>
 8005fdc:	20000b0c 	.word	0x20000b0c
 8005fe0:	200009d4 	.word	0x200009d4
 8005fe4:	08005f55 	.word	0x08005f55

08005fe8 <__sfp_lock_acquire>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__sfp_lock_acquire+0x8>)
 8005fea:	f000 ba23 	b.w	8006434 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20000b15 	.word	0x20000b15

08005ff4 <__sfp_lock_release>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__sfp_lock_release+0x8>)
 8005ff6:	f000 ba1e 	b.w	8006436 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20000b15 	.word	0x20000b15

08006000 <__sinit>:
 8006000:	b510      	push	{r4, lr}
 8006002:	4604      	mov	r4, r0
 8006004:	f7ff fff0 	bl	8005fe8 <__sfp_lock_acquire>
 8006008:	6a23      	ldr	r3, [r4, #32]
 800600a:	b11b      	cbz	r3, 8006014 <__sinit+0x14>
 800600c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006010:	f7ff bff0 	b.w	8005ff4 <__sfp_lock_release>
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <__sinit+0x28>)
 8006016:	6223      	str	r3, [r4, #32]
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <__sinit+0x2c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1f5      	bne.n	800600c <__sinit+0xc>
 8006020:	f7ff ffc4 	bl	8005fac <global_stdio_init.part.0>
 8006024:	e7f2      	b.n	800600c <__sinit+0xc>
 8006026:	bf00      	nop
 8006028:	08005f6d 	.word	0x08005f6d
 800602c:	20000b0c 	.word	0x20000b0c

08006030 <_fwalk_sglue>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	4607      	mov	r7, r0
 8006036:	4688      	mov	r8, r1
 8006038:	4614      	mov	r4, r2
 800603a:	2600      	movs	r6, #0
 800603c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006040:	f1b9 0901 	subs.w	r9, r9, #1
 8006044:	d505      	bpl.n	8006052 <_fwalk_sglue+0x22>
 8006046:	6824      	ldr	r4, [r4, #0]
 8006048:	2c00      	cmp	r4, #0
 800604a:	d1f7      	bne.n	800603c <_fwalk_sglue+0xc>
 800604c:	4630      	mov	r0, r6
 800604e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d907      	bls.n	8006068 <_fwalk_sglue+0x38>
 8006058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800605c:	3301      	adds	r3, #1
 800605e:	d003      	beq.n	8006068 <_fwalk_sglue+0x38>
 8006060:	4629      	mov	r1, r5
 8006062:	4638      	mov	r0, r7
 8006064:	47c0      	blx	r8
 8006066:	4306      	orrs	r6, r0
 8006068:	3568      	adds	r5, #104	; 0x68
 800606a:	e7e9      	b.n	8006040 <_fwalk_sglue+0x10>

0800606c <iprintf>:
 800606c:	b40f      	push	{r0, r1, r2, r3}
 800606e:	b507      	push	{r0, r1, r2, lr}
 8006070:	4906      	ldr	r1, [pc, #24]	; (800608c <iprintf+0x20>)
 8006072:	ab04      	add	r3, sp, #16
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	f853 2b04 	ldr.w	r2, [r3], #4
 800607a:	6881      	ldr	r1, [r0, #8]
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	f001 fc57 	bl	8007930 <_vfiprintf_r>
 8006082:	b003      	add	sp, #12
 8006084:	f85d eb04 	ldr.w	lr, [sp], #4
 8006088:	b004      	add	sp, #16
 800608a:	4770      	bx	lr
 800608c:	2000069c 	.word	0x2000069c

08006090 <_puts_r>:
 8006090:	6a03      	ldr	r3, [r0, #32]
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	6884      	ldr	r4, [r0, #8]
 8006096:	4605      	mov	r5, r0
 8006098:	460e      	mov	r6, r1
 800609a:	b90b      	cbnz	r3, 80060a0 <_puts_r+0x10>
 800609c:	f7ff ffb0 	bl	8006000 <__sinit>
 80060a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a2:	07db      	lsls	r3, r3, #31
 80060a4:	d405      	bmi.n	80060b2 <_puts_r+0x22>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	0598      	lsls	r0, r3, #22
 80060aa:	d402      	bmi.n	80060b2 <_puts_r+0x22>
 80060ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ae:	f000 f9c1 	bl	8006434 <__retarget_lock_acquire_recursive>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	0719      	lsls	r1, r3, #28
 80060b6:	d513      	bpl.n	80060e0 <_puts_r+0x50>
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	b18b      	cbz	r3, 80060e0 <_puts_r+0x50>
 80060bc:	3e01      	subs	r6, #1
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060c4:	3b01      	subs	r3, #1
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	b9e9      	cbnz	r1, 8006106 <_puts_r+0x76>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da2e      	bge.n	800612c <_puts_r+0x9c>
 80060ce:	4622      	mov	r2, r4
 80060d0:	210a      	movs	r1, #10
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f87b 	bl	80061ce <__swbuf_r>
 80060d8:	3001      	adds	r0, #1
 80060da:	d007      	beq.n	80060ec <_puts_r+0x5c>
 80060dc:	250a      	movs	r5, #10
 80060de:	e007      	b.n	80060f0 <_puts_r+0x60>
 80060e0:	4621      	mov	r1, r4
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 f8b0 	bl	8006248 <__swsetup_r>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d0e7      	beq.n	80060bc <_puts_r+0x2c>
 80060ec:	f04f 35ff 	mov.w	r5, #4294967295
 80060f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060f2:	07da      	lsls	r2, r3, #31
 80060f4:	d405      	bmi.n	8006102 <_puts_r+0x72>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_puts_r+0x72>
 80060fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fe:	f000 f99a 	bl	8006436 <__retarget_lock_release_recursive>
 8006102:	4628      	mov	r0, r5
 8006104:	bd70      	pop	{r4, r5, r6, pc}
 8006106:	2b00      	cmp	r3, #0
 8006108:	da04      	bge.n	8006114 <_puts_r+0x84>
 800610a:	69a2      	ldr	r2, [r4, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	dc06      	bgt.n	800611e <_puts_r+0x8e>
 8006110:	290a      	cmp	r1, #10
 8006112:	d004      	beq.n	800611e <_puts_r+0x8e>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	7019      	strb	r1, [r3, #0]
 800611c:	e7cf      	b.n	80060be <_puts_r+0x2e>
 800611e:	4622      	mov	r2, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f000 f854 	bl	80061ce <__swbuf_r>
 8006126:	3001      	adds	r0, #1
 8006128:	d1c9      	bne.n	80060be <_puts_r+0x2e>
 800612a:	e7df      	b.n	80060ec <_puts_r+0x5c>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	250a      	movs	r5, #10
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	6022      	str	r2, [r4, #0]
 8006134:	701d      	strb	r5, [r3, #0]
 8006136:	e7db      	b.n	80060f0 <_puts_r+0x60>

08006138 <puts>:
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <puts+0xc>)
 800613a:	4601      	mov	r1, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f7ff bfa7 	b.w	8006090 <_puts_r>
 8006142:	bf00      	nop
 8006144:	2000069c 	.word	0x2000069c

08006148 <__sread>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	f000 f912 	bl	8006378 <_read_r>
 8006154:	2800      	cmp	r0, #0
 8006156:	bfab      	itete	ge
 8006158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800615a:	89a3      	ldrhlt	r3, [r4, #12]
 800615c:	181b      	addge	r3, r3, r0
 800615e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006162:	bfac      	ite	ge
 8006164:	6563      	strge	r3, [r4, #84]	; 0x54
 8006166:	81a3      	strhlt	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__swrite>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	461f      	mov	r7, r3
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d505      	bpl.n	8006188 <__swrite+0x1e>
 800617c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006180:	2302      	movs	r3, #2
 8006182:	2200      	movs	r2, #0
 8006184:	f000 f8e6 	bl	8006354 <_lseek_r>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	4628      	mov	r0, r5
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f000 b90d 	b.w	80063bc <_write_r>

080061a2 <__sseek>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 f8d3 	bl	8006354 <_lseek_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	bf15      	itete	ne
 80061b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061be:	81a3      	strheq	r3, [r4, #12]
 80061c0:	bf18      	it	ne
 80061c2:	81a3      	strhne	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__sclose>:
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 b8b3 	b.w	8006334 <_close_r>

080061ce <__swbuf_r>:
 80061ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d0:	460e      	mov	r6, r1
 80061d2:	4614      	mov	r4, r2
 80061d4:	4605      	mov	r5, r0
 80061d6:	b118      	cbz	r0, 80061e0 <__swbuf_r+0x12>
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b90b      	cbnz	r3, 80061e0 <__swbuf_r+0x12>
 80061dc:	f7ff ff10 	bl	8006000 <__sinit>
 80061e0:	69a3      	ldr	r3, [r4, #24]
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	071a      	lsls	r2, r3, #28
 80061e8:	d525      	bpl.n	8006236 <__swbuf_r+0x68>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	b31b      	cbz	r3, 8006236 <__swbuf_r+0x68>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	6922      	ldr	r2, [r4, #16]
 80061f2:	1a98      	subs	r0, r3, r2
 80061f4:	6963      	ldr	r3, [r4, #20]
 80061f6:	b2f6      	uxtb	r6, r6
 80061f8:	4283      	cmp	r3, r0
 80061fa:	4637      	mov	r7, r6
 80061fc:	dc04      	bgt.n	8006208 <__swbuf_r+0x3a>
 80061fe:	4621      	mov	r1, r4
 8006200:	4628      	mov	r0, r5
 8006202:	f001 fd35 	bl	8007c70 <_fflush_r>
 8006206:	b9e0      	cbnz	r0, 8006242 <__swbuf_r+0x74>
 8006208:	68a3      	ldr	r3, [r4, #8]
 800620a:	3b01      	subs	r3, #1
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	701e      	strb	r6, [r3, #0]
 8006216:	6962      	ldr	r2, [r4, #20]
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	429a      	cmp	r2, r3
 800621c:	d004      	beq.n	8006228 <__swbuf_r+0x5a>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	07db      	lsls	r3, r3, #31
 8006222:	d506      	bpl.n	8006232 <__swbuf_r+0x64>
 8006224:	2e0a      	cmp	r6, #10
 8006226:	d104      	bne.n	8006232 <__swbuf_r+0x64>
 8006228:	4621      	mov	r1, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f001 fd20 	bl	8007c70 <_fflush_r>
 8006230:	b938      	cbnz	r0, 8006242 <__swbuf_r+0x74>
 8006232:	4638      	mov	r0, r7
 8006234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f805 	bl	8006248 <__swsetup_r>
 800623e:	2800      	cmp	r0, #0
 8006240:	d0d5      	beq.n	80061ee <__swbuf_r+0x20>
 8006242:	f04f 37ff 	mov.w	r7, #4294967295
 8006246:	e7f4      	b.n	8006232 <__swbuf_r+0x64>

08006248 <__swsetup_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <__swsetup_r+0xac>)
 800624c:	4605      	mov	r5, r0
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	460c      	mov	r4, r1
 8006252:	b118      	cbz	r0, 800625c <__swsetup_r+0x14>
 8006254:	6a03      	ldr	r3, [r0, #32]
 8006256:	b90b      	cbnz	r3, 800625c <__swsetup_r+0x14>
 8006258:	f7ff fed2 	bl	8006000 <__sinit>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006262:	0718      	lsls	r0, r3, #28
 8006264:	d422      	bmi.n	80062ac <__swsetup_r+0x64>
 8006266:	06d9      	lsls	r1, r3, #27
 8006268:	d407      	bmi.n	800627a <__swsetup_r+0x32>
 800626a:	2309      	movs	r3, #9
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e034      	b.n	80062e4 <__swsetup_r+0x9c>
 800627a:	0758      	lsls	r0, r3, #29
 800627c:	d512      	bpl.n	80062a4 <__swsetup_r+0x5c>
 800627e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006280:	b141      	cbz	r1, 8006294 <__swsetup_r+0x4c>
 8006282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006286:	4299      	cmp	r1, r3
 8006288:	d002      	beq.n	8006290 <__swsetup_r+0x48>
 800628a:	4628      	mov	r0, r5
 800628c:	f000 ff5e 	bl	800714c <_free_r>
 8006290:	2300      	movs	r3, #0
 8006292:	6363      	str	r3, [r4, #52]	; 0x34
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	2300      	movs	r3, #0
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f043 0308 	orr.w	r3, r3, #8
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	b94b      	cbnz	r3, 80062c4 <__swsetup_r+0x7c>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ba:	d003      	beq.n	80062c4 <__swsetup_r+0x7c>
 80062bc:	4621      	mov	r1, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	f001 fd24 	bl	8007d0c <__smakebuf_r>
 80062c4:	89a0      	ldrh	r0, [r4, #12]
 80062c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062ca:	f010 0301 	ands.w	r3, r0, #1
 80062ce:	d00a      	beq.n	80062e6 <__swsetup_r+0x9e>
 80062d0:	2300      	movs	r3, #0
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	6963      	ldr	r3, [r4, #20]
 80062d6:	425b      	negs	r3, r3
 80062d8:	61a3      	str	r3, [r4, #24]
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	b943      	cbnz	r3, 80062f0 <__swsetup_r+0xa8>
 80062de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062e2:	d1c4      	bne.n	800626e <__swsetup_r+0x26>
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	0781      	lsls	r1, r0, #30
 80062e8:	bf58      	it	pl
 80062ea:	6963      	ldrpl	r3, [r4, #20]
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	e7f4      	b.n	80062da <__swsetup_r+0x92>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7f7      	b.n	80062e4 <__swsetup_r+0x9c>
 80062f4:	2000069c 	.word	0x2000069c

080062f8 <memset>:
 80062f8:	4402      	add	r2, r0
 80062fa:	4603      	mov	r3, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <strncmp>:
 8006308:	b510      	push	{r4, lr}
 800630a:	b16a      	cbz	r2, 8006328 <strncmp+0x20>
 800630c:	3901      	subs	r1, #1
 800630e:	1884      	adds	r4, r0, r2
 8006310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006314:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006318:	429a      	cmp	r2, r3
 800631a:	d103      	bne.n	8006324 <strncmp+0x1c>
 800631c:	42a0      	cmp	r0, r4
 800631e:	d001      	beq.n	8006324 <strncmp+0x1c>
 8006320:	2a00      	cmp	r2, #0
 8006322:	d1f5      	bne.n	8006310 <strncmp+0x8>
 8006324:	1ad0      	subs	r0, r2, r3
 8006326:	bd10      	pop	{r4, pc}
 8006328:	4610      	mov	r0, r2
 800632a:	e7fc      	b.n	8006326 <strncmp+0x1e>

0800632c <_localeconv_r>:
 800632c:	4800      	ldr	r0, [pc, #0]	; (8006330 <_localeconv_r+0x4>)
 800632e:	4770      	bx	lr
 8006330:	20000790 	.word	0x20000790

08006334 <_close_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d06      	ldr	r5, [pc, #24]	; (8006350 <_close_r+0x1c>)
 8006338:	2300      	movs	r3, #0
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	f7fb f85c 	bl	80013fc <_close>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_close_r+0x1a>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_close_r+0x1a>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	20000b10 	.word	0x20000b10

08006354 <_lseek_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d07      	ldr	r5, [pc, #28]	; (8006374 <_lseek_r+0x20>)
 8006358:	4604      	mov	r4, r0
 800635a:	4608      	mov	r0, r1
 800635c:	4611      	mov	r1, r2
 800635e:	2200      	movs	r2, #0
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f7fb f854 	bl	8001410 <_lseek>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_lseek_r+0x1e>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_lseek_r+0x1e>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20000b10 	.word	0x20000b10

08006378 <_read_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d07      	ldr	r5, [pc, #28]	; (8006398 <_read_r+0x20>)
 800637c:	4604      	mov	r4, r0
 800637e:	4608      	mov	r0, r1
 8006380:	4611      	mov	r1, r2
 8006382:	2200      	movs	r2, #0
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fb f82a 	bl	80013e0 <_read>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_read_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_read_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000b10 	.word	0x20000b10

0800639c <_sbrk_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d06      	ldr	r5, [pc, #24]	; (80063b8 <_sbrk_r+0x1c>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb f834 	bl	8001414 <_sbrk>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_sbrk_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_sbrk_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000b10 	.word	0x20000b10

080063bc <_write_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d07      	ldr	r5, [pc, #28]	; (80063dc <_write_r+0x20>)
 80063c0:	4604      	mov	r4, r0
 80063c2:	4608      	mov	r0, r1
 80063c4:	4611      	mov	r1, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	602a      	str	r2, [r5, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f7fa ff66 	bl	800129c <_write>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_write_r+0x1e>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_write_r+0x1e>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	20000b10 	.word	0x20000b10

080063e0 <__errno>:
 80063e0:	4b01      	ldr	r3, [pc, #4]	; (80063e8 <__errno+0x8>)
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	2000069c 	.word	0x2000069c

080063ec <__libc_init_array>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4d0d      	ldr	r5, [pc, #52]	; (8006424 <__libc_init_array+0x38>)
 80063f0:	4c0d      	ldr	r4, [pc, #52]	; (8006428 <__libc_init_array+0x3c>)
 80063f2:	1b64      	subs	r4, r4, r5
 80063f4:	10a4      	asrs	r4, r4, #2
 80063f6:	2600      	movs	r6, #0
 80063f8:	42a6      	cmp	r6, r4
 80063fa:	d109      	bne.n	8006410 <__libc_init_array+0x24>
 80063fc:	4d0b      	ldr	r5, [pc, #44]	; (800642c <__libc_init_array+0x40>)
 80063fe:	4c0c      	ldr	r4, [pc, #48]	; (8006430 <__libc_init_array+0x44>)
 8006400:	f001 feb2 	bl	8008168 <_init>
 8006404:	1b64      	subs	r4, r4, r5
 8006406:	10a4      	asrs	r4, r4, #2
 8006408:	2600      	movs	r6, #0
 800640a:	42a6      	cmp	r6, r4
 800640c:	d105      	bne.n	800641a <__libc_init_array+0x2e>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	f855 3b04 	ldr.w	r3, [r5], #4
 8006414:	4798      	blx	r3
 8006416:	3601      	adds	r6, #1
 8006418:	e7ee      	b.n	80063f8 <__libc_init_array+0xc>
 800641a:	f855 3b04 	ldr.w	r3, [r5], #4
 800641e:	4798      	blx	r3
 8006420:	3601      	adds	r6, #1
 8006422:	e7f2      	b.n	800640a <__libc_init_array+0x1e>
 8006424:	08009e74 	.word	0x08009e74
 8006428:	08009e74 	.word	0x08009e74
 800642c:	08009e74 	.word	0x08009e74
 8006430:	08009e78 	.word	0x08009e78

08006434 <__retarget_lock_acquire_recursive>:
 8006434:	4770      	bx	lr

08006436 <__retarget_lock_release_recursive>:
 8006436:	4770      	bx	lr

08006438 <memcpy>:
 8006438:	440a      	add	r2, r1
 800643a:	4291      	cmp	r1, r2
 800643c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006440:	d100      	bne.n	8006444 <memcpy+0xc>
 8006442:	4770      	bx	lr
 8006444:	b510      	push	{r4, lr}
 8006446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800644e:	4291      	cmp	r1, r2
 8006450:	d1f9      	bne.n	8006446 <memcpy+0xe>
 8006452:	bd10      	pop	{r4, pc}

08006454 <quorem>:
 8006454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	6903      	ldr	r3, [r0, #16]
 800645a:	690c      	ldr	r4, [r1, #16]
 800645c:	42a3      	cmp	r3, r4
 800645e:	4607      	mov	r7, r0
 8006460:	db7e      	blt.n	8006560 <quorem+0x10c>
 8006462:	3c01      	subs	r4, #1
 8006464:	f101 0814 	add.w	r8, r1, #20
 8006468:	f100 0514 	add.w	r5, r0, #20
 800646c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800647a:	3301      	adds	r3, #1
 800647c:	429a      	cmp	r2, r3
 800647e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006482:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006486:	fbb2 f6f3 	udiv	r6, r2, r3
 800648a:	d331      	bcc.n	80064f0 <quorem+0x9c>
 800648c:	f04f 0e00 	mov.w	lr, #0
 8006490:	4640      	mov	r0, r8
 8006492:	46ac      	mov	ip, r5
 8006494:	46f2      	mov	sl, lr
 8006496:	f850 2b04 	ldr.w	r2, [r0], #4
 800649a:	b293      	uxth	r3, r2
 800649c:	fb06 e303 	mla	r3, r6, r3, lr
 80064a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064a4:	0c1a      	lsrs	r2, r3, #16
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ebaa 0303 	sub.w	r3, sl, r3
 80064ac:	f8dc a000 	ldr.w	sl, [ip]
 80064b0:	fa13 f38a 	uxtah	r3, r3, sl
 80064b4:	fb06 220e 	mla	r2, r6, lr, r2
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	9b00      	ldr	r3, [sp, #0]
 80064bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064c0:	b292      	uxth	r2, r2
 80064c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80064ce:	4581      	cmp	r9, r0
 80064d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d4:	f84c 3b04 	str.w	r3, [ip], #4
 80064d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064dc:	d2db      	bcs.n	8006496 <quorem+0x42>
 80064de:	f855 300b 	ldr.w	r3, [r5, fp]
 80064e2:	b92b      	cbnz	r3, 80064f0 <quorem+0x9c>
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	3b04      	subs	r3, #4
 80064e8:	429d      	cmp	r5, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	d32c      	bcc.n	8006548 <quorem+0xf4>
 80064ee:	613c      	str	r4, [r7, #16]
 80064f0:	4638      	mov	r0, r7
 80064f2:	f001 f8f3 	bl	80076dc <__mcmp>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	db22      	blt.n	8006540 <quorem+0xec>
 80064fa:	3601      	adds	r6, #1
 80064fc:	4629      	mov	r1, r5
 80064fe:	2000      	movs	r0, #0
 8006500:	f858 2b04 	ldr.w	r2, [r8], #4
 8006504:	f8d1 c000 	ldr.w	ip, [r1]
 8006508:	b293      	uxth	r3, r2
 800650a:	1ac3      	subs	r3, r0, r3
 800650c:	0c12      	lsrs	r2, r2, #16
 800650e:	fa13 f38c 	uxtah	r3, r3, ip
 8006512:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006516:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006520:	45c1      	cmp	r9, r8
 8006522:	f841 3b04 	str.w	r3, [r1], #4
 8006526:	ea4f 4022 	mov.w	r0, r2, asr #16
 800652a:	d2e9      	bcs.n	8006500 <quorem+0xac>
 800652c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006530:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006534:	b922      	cbnz	r2, 8006540 <quorem+0xec>
 8006536:	3b04      	subs	r3, #4
 8006538:	429d      	cmp	r5, r3
 800653a:	461a      	mov	r2, r3
 800653c:	d30a      	bcc.n	8006554 <quorem+0x100>
 800653e:	613c      	str	r4, [r7, #16]
 8006540:	4630      	mov	r0, r6
 8006542:	b003      	add	sp, #12
 8006544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	3b04      	subs	r3, #4
 800654c:	2a00      	cmp	r2, #0
 800654e:	d1ce      	bne.n	80064ee <quorem+0x9a>
 8006550:	3c01      	subs	r4, #1
 8006552:	e7c9      	b.n	80064e8 <quorem+0x94>
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	3b04      	subs	r3, #4
 8006558:	2a00      	cmp	r2, #0
 800655a:	d1f0      	bne.n	800653e <quorem+0xea>
 800655c:	3c01      	subs	r4, #1
 800655e:	e7eb      	b.n	8006538 <quorem+0xe4>
 8006560:	2000      	movs	r0, #0
 8006562:	e7ee      	b.n	8006542 <quorem+0xee>
 8006564:	0000      	movs	r0, r0
	...

08006568 <_dtoa_r>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	ed2d 8b04 	vpush	{d8-d9}
 8006570:	69c5      	ldr	r5, [r0, #28]
 8006572:	b093      	sub	sp, #76	; 0x4c
 8006574:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006578:	ec57 6b10 	vmov	r6, r7, d0
 800657c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006580:	9107      	str	r1, [sp, #28]
 8006582:	4604      	mov	r4, r0
 8006584:	920a      	str	r2, [sp, #40]	; 0x28
 8006586:	930d      	str	r3, [sp, #52]	; 0x34
 8006588:	b975      	cbnz	r5, 80065a8 <_dtoa_r+0x40>
 800658a:	2010      	movs	r0, #16
 800658c:	f7fe ffa4 	bl	80054d8 <malloc>
 8006590:	4602      	mov	r2, r0
 8006592:	61e0      	str	r0, [r4, #28]
 8006594:	b920      	cbnz	r0, 80065a0 <_dtoa_r+0x38>
 8006596:	4bae      	ldr	r3, [pc, #696]	; (8006850 <_dtoa_r+0x2e8>)
 8006598:	21ef      	movs	r1, #239	; 0xef
 800659a:	48ae      	ldr	r0, [pc, #696]	; (8006854 <_dtoa_r+0x2ec>)
 800659c:	f001 fc14 	bl	8007dc8 <__assert_func>
 80065a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065a4:	6005      	str	r5, [r0, #0]
 80065a6:	60c5      	str	r5, [r0, #12]
 80065a8:	69e3      	ldr	r3, [r4, #28]
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	b151      	cbz	r1, 80065c4 <_dtoa_r+0x5c>
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	604a      	str	r2, [r1, #4]
 80065b2:	2301      	movs	r3, #1
 80065b4:	4093      	lsls	r3, r2
 80065b6:	608b      	str	r3, [r1, #8]
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fe53 	bl	8007264 <_Bfree>
 80065be:	69e3      	ldr	r3, [r4, #28]
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	1e3b      	subs	r3, r7, #0
 80065c6:	bfbb      	ittet	lt
 80065c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	9303      	strlt	r3, [sp, #12]
 80065ce:	2300      	movge	r3, #0
 80065d0:	2201      	movlt	r2, #1
 80065d2:	bfac      	ite	ge
 80065d4:	f8c8 3000 	strge.w	r3, [r8]
 80065d8:	f8c8 2000 	strlt.w	r2, [r8]
 80065dc:	4b9e      	ldr	r3, [pc, #632]	; (8006858 <_dtoa_r+0x2f0>)
 80065de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80065e2:	ea33 0308 	bics.w	r3, r3, r8
 80065e6:	d11b      	bne.n	8006620 <_dtoa_r+0xb8>
 80065e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80065f4:	4333      	orrs	r3, r6
 80065f6:	f000 8593 	beq.w	8007120 <_dtoa_r+0xbb8>
 80065fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065fc:	b963      	cbnz	r3, 8006618 <_dtoa_r+0xb0>
 80065fe:	4b97      	ldr	r3, [pc, #604]	; (800685c <_dtoa_r+0x2f4>)
 8006600:	e027      	b.n	8006652 <_dtoa_r+0xea>
 8006602:	4b97      	ldr	r3, [pc, #604]	; (8006860 <_dtoa_r+0x2f8>)
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	9800      	ldr	r0, [sp, #0]
 800660e:	b013      	add	sp, #76	; 0x4c
 8006610:	ecbd 8b04 	vpop	{d8-d9}
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006618:	4b90      	ldr	r3, [pc, #576]	; (800685c <_dtoa_r+0x2f4>)
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	3303      	adds	r3, #3
 800661e:	e7f3      	b.n	8006608 <_dtoa_r+0xa0>
 8006620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	ec51 0b17 	vmov	r0, r1, d7
 800662a:	eeb0 8a47 	vmov.f32	s16, s14
 800662e:	eef0 8a67 	vmov.f32	s17, s15
 8006632:	2300      	movs	r3, #0
 8006634:	f7fa fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8006638:	4681      	mov	r9, r0
 800663a:	b160      	cbz	r0, 8006656 <_dtoa_r+0xee>
 800663c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800663e:	2301      	movs	r3, #1
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8568 	beq.w	800711a <_dtoa_r+0xbb2>
 800664a:	4b86      	ldr	r3, [pc, #536]	; (8006864 <_dtoa_r+0x2fc>)
 800664c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	3b01      	subs	r3, #1
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	e7da      	b.n	800660c <_dtoa_r+0xa4>
 8006656:	aa10      	add	r2, sp, #64	; 0x40
 8006658:	a911      	add	r1, sp, #68	; 0x44
 800665a:	4620      	mov	r0, r4
 800665c:	eeb0 0a48 	vmov.f32	s0, s16
 8006660:	eef0 0a68 	vmov.f32	s1, s17
 8006664:	f001 f8e0 	bl	8007828 <__d2b>
 8006668:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800666c:	4682      	mov	sl, r0
 800666e:	2d00      	cmp	r5, #0
 8006670:	d07f      	beq.n	8006772 <_dtoa_r+0x20a>
 8006672:	ee18 3a90 	vmov	r3, s17
 8006676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800667a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800667e:	ec51 0b18 	vmov	r0, r1, d8
 8006682:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800668a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800668e:	4619      	mov	r1, r3
 8006690:	2200      	movs	r2, #0
 8006692:	4b75      	ldr	r3, [pc, #468]	; (8006868 <_dtoa_r+0x300>)
 8006694:	f7f9 fdf8 	bl	8000288 <__aeabi_dsub>
 8006698:	a367      	add	r3, pc, #412	; (adr r3, 8006838 <_dtoa_r+0x2d0>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ffab 	bl	80005f8 <__aeabi_dmul>
 80066a2:	a367      	add	r3, pc, #412	; (adr r3, 8006840 <_dtoa_r+0x2d8>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 fdf0 	bl	800028c <__adddf3>
 80066ac:	4606      	mov	r6, r0
 80066ae:	4628      	mov	r0, r5
 80066b0:	460f      	mov	r7, r1
 80066b2:	f7f9 ff37 	bl	8000524 <__aeabi_i2d>
 80066b6:	a364      	add	r3, pc, #400	; (adr r3, 8006848 <_dtoa_r+0x2e0>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f7f9 ff9c 	bl	80005f8 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7f9 fde0 	bl	800028c <__adddf3>
 80066cc:	4606      	mov	r6, r0
 80066ce:	460f      	mov	r7, r1
 80066d0:	f7fa fa42 	bl	8000b58 <__aeabi_d2iz>
 80066d4:	2200      	movs	r2, #0
 80066d6:	4683      	mov	fp, r0
 80066d8:	2300      	movs	r3, #0
 80066da:	4630      	mov	r0, r6
 80066dc:	4639      	mov	r1, r7
 80066de:	f7fa f9fd 	bl	8000adc <__aeabi_dcmplt>
 80066e2:	b148      	cbz	r0, 80066f8 <_dtoa_r+0x190>
 80066e4:	4658      	mov	r0, fp
 80066e6:	f7f9 ff1d 	bl	8000524 <__aeabi_i2d>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	f7fa f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80066f2:	b908      	cbnz	r0, 80066f8 <_dtoa_r+0x190>
 80066f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066f8:	f1bb 0f16 	cmp.w	fp, #22
 80066fc:	d857      	bhi.n	80067ae <_dtoa_r+0x246>
 80066fe:	4b5b      	ldr	r3, [pc, #364]	; (800686c <_dtoa_r+0x304>)
 8006700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	ec51 0b18 	vmov	r0, r1, d8
 800670c:	f7fa f9e6 	bl	8000adc <__aeabi_dcmplt>
 8006710:	2800      	cmp	r0, #0
 8006712:	d04e      	beq.n	80067b2 <_dtoa_r+0x24a>
 8006714:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006718:	2300      	movs	r3, #0
 800671a:	930c      	str	r3, [sp, #48]	; 0x30
 800671c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800671e:	1b5b      	subs	r3, r3, r5
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	bf45      	ittet	mi
 8006724:	f1c3 0301 	rsbmi	r3, r3, #1
 8006728:	9305      	strmi	r3, [sp, #20]
 800672a:	2300      	movpl	r3, #0
 800672c:	2300      	movmi	r3, #0
 800672e:	9206      	str	r2, [sp, #24]
 8006730:	bf54      	ite	pl
 8006732:	9305      	strpl	r3, [sp, #20]
 8006734:	9306      	strmi	r3, [sp, #24]
 8006736:	f1bb 0f00 	cmp.w	fp, #0
 800673a:	db3c      	blt.n	80067b6 <_dtoa_r+0x24e>
 800673c:	9b06      	ldr	r3, [sp, #24]
 800673e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006742:	445b      	add	r3, fp
 8006744:	9306      	str	r3, [sp, #24]
 8006746:	2300      	movs	r3, #0
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	9b07      	ldr	r3, [sp, #28]
 800674c:	2b09      	cmp	r3, #9
 800674e:	d868      	bhi.n	8006822 <_dtoa_r+0x2ba>
 8006750:	2b05      	cmp	r3, #5
 8006752:	bfc4      	itt	gt
 8006754:	3b04      	subgt	r3, #4
 8006756:	9307      	strgt	r3, [sp, #28]
 8006758:	9b07      	ldr	r3, [sp, #28]
 800675a:	f1a3 0302 	sub.w	r3, r3, #2
 800675e:	bfcc      	ite	gt
 8006760:	2500      	movgt	r5, #0
 8006762:	2501      	movle	r5, #1
 8006764:	2b03      	cmp	r3, #3
 8006766:	f200 8085 	bhi.w	8006874 <_dtoa_r+0x30c>
 800676a:	e8df f003 	tbb	[pc, r3]
 800676e:	3b2e      	.short	0x3b2e
 8006770:	5839      	.short	0x5839
 8006772:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006776:	441d      	add	r5, r3
 8006778:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800677c:	2b20      	cmp	r3, #32
 800677e:	bfc1      	itttt	gt
 8006780:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006784:	fa08 f803 	lslgt.w	r8, r8, r3
 8006788:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800678c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006790:	bfd6      	itet	le
 8006792:	f1c3 0320 	rsble	r3, r3, #32
 8006796:	ea48 0003 	orrgt.w	r0, r8, r3
 800679a:	fa06 f003 	lslle.w	r0, r6, r3
 800679e:	f7f9 feb1 	bl	8000504 <__aeabi_ui2d>
 80067a2:	2201      	movs	r2, #1
 80067a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067a8:	3d01      	subs	r5, #1
 80067aa:	920e      	str	r2, [sp, #56]	; 0x38
 80067ac:	e76f      	b.n	800668e <_dtoa_r+0x126>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7b3      	b.n	800671a <_dtoa_r+0x1b2>
 80067b2:	900c      	str	r0, [sp, #48]	; 0x30
 80067b4:	e7b2      	b.n	800671c <_dtoa_r+0x1b4>
 80067b6:	9b05      	ldr	r3, [sp, #20]
 80067b8:	eba3 030b 	sub.w	r3, r3, fp
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	f1cb 0300 	rsb	r3, fp, #0
 80067c2:	9308      	str	r3, [sp, #32]
 80067c4:	2300      	movs	r3, #0
 80067c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067c8:	e7bf      	b.n	800674a <_dtoa_r+0x1e2>
 80067ca:	2300      	movs	r3, #0
 80067cc:	9309      	str	r3, [sp, #36]	; 0x24
 80067ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	dc52      	bgt.n	800687a <_dtoa_r+0x312>
 80067d4:	2301      	movs	r3, #1
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	461a      	mov	r2, r3
 80067dc:	920a      	str	r2, [sp, #40]	; 0x28
 80067de:	e00b      	b.n	80067f8 <_dtoa_r+0x290>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e7f3      	b.n	80067cc <_dtoa_r+0x264>
 80067e4:	2300      	movs	r3, #0
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	445b      	add	r3, fp
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	3301      	adds	r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	bfb8      	it	lt
 80067f6:	2301      	movlt	r3, #1
 80067f8:	69e0      	ldr	r0, [r4, #28]
 80067fa:	2100      	movs	r1, #0
 80067fc:	2204      	movs	r2, #4
 80067fe:	f102 0614 	add.w	r6, r2, #20
 8006802:	429e      	cmp	r6, r3
 8006804:	d93d      	bls.n	8006882 <_dtoa_r+0x31a>
 8006806:	6041      	str	r1, [r0, #4]
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fceb 	bl	80071e4 <_Balloc>
 800680e:	9000      	str	r0, [sp, #0]
 8006810:	2800      	cmp	r0, #0
 8006812:	d139      	bne.n	8006888 <_dtoa_r+0x320>
 8006814:	4b16      	ldr	r3, [pc, #88]	; (8006870 <_dtoa_r+0x308>)
 8006816:	4602      	mov	r2, r0
 8006818:	f240 11af 	movw	r1, #431	; 0x1af
 800681c:	e6bd      	b.n	800659a <_dtoa_r+0x32>
 800681e:	2301      	movs	r3, #1
 8006820:	e7e1      	b.n	80067e6 <_dtoa_r+0x27e>
 8006822:	2501      	movs	r5, #1
 8006824:	2300      	movs	r3, #0
 8006826:	9307      	str	r3, [sp, #28]
 8006828:	9509      	str	r5, [sp, #36]	; 0x24
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	2200      	movs	r2, #0
 8006834:	2312      	movs	r3, #18
 8006836:	e7d1      	b.n	80067dc <_dtoa_r+0x274>
 8006838:	636f4361 	.word	0x636f4361
 800683c:	3fd287a7 	.word	0x3fd287a7
 8006840:	8b60c8b3 	.word	0x8b60c8b3
 8006844:	3fc68a28 	.word	0x3fc68a28
 8006848:	509f79fb 	.word	0x509f79fb
 800684c:	3fd34413 	.word	0x3fd34413
 8006850:	08009b23 	.word	0x08009b23
 8006854:	08009b3a 	.word	0x08009b3a
 8006858:	7ff00000 	.word	0x7ff00000
 800685c:	08009b1f 	.word	0x08009b1f
 8006860:	08009b16 	.word	0x08009b16
 8006864:	0800830a 	.word	0x0800830a
 8006868:	3ff80000 	.word	0x3ff80000
 800686c:	08009c28 	.word	0x08009c28
 8006870:	08009b92 	.word	0x08009b92
 8006874:	2301      	movs	r3, #1
 8006876:	9309      	str	r3, [sp, #36]	; 0x24
 8006878:	e7d7      	b.n	800682a <_dtoa_r+0x2c2>
 800687a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	9304      	str	r3, [sp, #16]
 8006880:	e7ba      	b.n	80067f8 <_dtoa_r+0x290>
 8006882:	3101      	adds	r1, #1
 8006884:	0052      	lsls	r2, r2, #1
 8006886:	e7ba      	b.n	80067fe <_dtoa_r+0x296>
 8006888:	69e3      	ldr	r3, [r4, #28]
 800688a:	9a00      	ldr	r2, [sp, #0]
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	2b0e      	cmp	r3, #14
 8006892:	f200 80a8 	bhi.w	80069e6 <_dtoa_r+0x47e>
 8006896:	2d00      	cmp	r5, #0
 8006898:	f000 80a5 	beq.w	80069e6 <_dtoa_r+0x47e>
 800689c:	f1bb 0f00 	cmp.w	fp, #0
 80068a0:	dd38      	ble.n	8006914 <_dtoa_r+0x3ac>
 80068a2:	4bc0      	ldr	r3, [pc, #768]	; (8006ba4 <_dtoa_r+0x63c>)
 80068a4:	f00b 020f 	and.w	r2, fp, #15
 80068a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80068b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80068b8:	d019      	beq.n	80068ee <_dtoa_r+0x386>
 80068ba:	4bbb      	ldr	r3, [pc, #748]	; (8006ba8 <_dtoa_r+0x640>)
 80068bc:	ec51 0b18 	vmov	r0, r1, d8
 80068c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068c4:	f7f9 ffc2 	bl	800084c <__aeabi_ddiv>
 80068c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068cc:	f008 080f 	and.w	r8, r8, #15
 80068d0:	2503      	movs	r5, #3
 80068d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006ba8 <_dtoa_r+0x640>
 80068d6:	f1b8 0f00 	cmp.w	r8, #0
 80068da:	d10a      	bne.n	80068f2 <_dtoa_r+0x38a>
 80068dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	f7f9 ffb2 	bl	800084c <__aeabi_ddiv>
 80068e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ec:	e02b      	b.n	8006946 <_dtoa_r+0x3de>
 80068ee:	2502      	movs	r5, #2
 80068f0:	e7ef      	b.n	80068d2 <_dtoa_r+0x36a>
 80068f2:	f018 0f01 	tst.w	r8, #1
 80068f6:	d008      	beq.n	800690a <_dtoa_r+0x3a2>
 80068f8:	4630      	mov	r0, r6
 80068fa:	4639      	mov	r1, r7
 80068fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006900:	f7f9 fe7a 	bl	80005f8 <__aeabi_dmul>
 8006904:	3501      	adds	r5, #1
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800690e:	f109 0908 	add.w	r9, r9, #8
 8006912:	e7e0      	b.n	80068d6 <_dtoa_r+0x36e>
 8006914:	f000 809f 	beq.w	8006a56 <_dtoa_r+0x4ee>
 8006918:	f1cb 0600 	rsb	r6, fp, #0
 800691c:	4ba1      	ldr	r3, [pc, #644]	; (8006ba4 <_dtoa_r+0x63c>)
 800691e:	4fa2      	ldr	r7, [pc, #648]	; (8006ba8 <_dtoa_r+0x640>)
 8006920:	f006 020f 	and.w	r2, r6, #15
 8006924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	ec51 0b18 	vmov	r0, r1, d8
 8006930:	f7f9 fe62 	bl	80005f8 <__aeabi_dmul>
 8006934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006938:	1136      	asrs	r6, r6, #4
 800693a:	2300      	movs	r3, #0
 800693c:	2502      	movs	r5, #2
 800693e:	2e00      	cmp	r6, #0
 8006940:	d17e      	bne.n	8006a40 <_dtoa_r+0x4d8>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1d0      	bne.n	80068e8 <_dtoa_r+0x380>
 8006946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006948:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8084 	beq.w	8006a5a <_dtoa_r+0x4f2>
 8006952:	4b96      	ldr	r3, [pc, #600]	; (8006bac <_dtoa_r+0x644>)
 8006954:	2200      	movs	r2, #0
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7fa f8bf 	bl	8000adc <__aeabi_dcmplt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d07b      	beq.n	8006a5a <_dtoa_r+0x4f2>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d078      	beq.n	8006a5a <_dtoa_r+0x4f2>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dd39      	ble.n	80069e2 <_dtoa_r+0x47a>
 800696e:	4b90      	ldr	r3, [pc, #576]	; (8006bb0 <_dtoa_r+0x648>)
 8006970:	2200      	movs	r2, #0
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7f9 fe3f 	bl	80005f8 <__aeabi_dmul>
 800697a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800697e:	9e01      	ldr	r6, [sp, #4]
 8006980:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006984:	3501      	adds	r5, #1
 8006986:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800698a:	4628      	mov	r0, r5
 800698c:	f7f9 fdca 	bl	8000524 <__aeabi_i2d>
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	f7f9 fe30 	bl	80005f8 <__aeabi_dmul>
 8006998:	4b86      	ldr	r3, [pc, #536]	; (8006bb4 <_dtoa_r+0x64c>)
 800699a:	2200      	movs	r2, #0
 800699c:	f7f9 fc76 	bl	800028c <__adddf3>
 80069a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	d158      	bne.n	8006a60 <_dtoa_r+0x4f8>
 80069ae:	4b82      	ldr	r3, [pc, #520]	; (8006bb8 <_dtoa_r+0x650>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fc67 	bl	8000288 <__aeabi_dsub>
 80069ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069be:	4680      	mov	r8, r0
 80069c0:	4689      	mov	r9, r1
 80069c2:	f7fa f8a9 	bl	8000b18 <__aeabi_dcmpgt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 8296 	bne.w	8006ef8 <_dtoa_r+0x990>
 80069cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069d0:	4640      	mov	r0, r8
 80069d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7fa f880 	bl	8000adc <__aeabi_dcmplt>
 80069dc:	2800      	cmp	r0, #0
 80069de:	f040 8289 	bne.w	8006ef4 <_dtoa_r+0x98c>
 80069e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80069e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f2c0 814e 	blt.w	8006c8a <_dtoa_r+0x722>
 80069ee:	f1bb 0f0e 	cmp.w	fp, #14
 80069f2:	f300 814a 	bgt.w	8006c8a <_dtoa_r+0x722>
 80069f6:	4b6b      	ldr	r3, [pc, #428]	; (8006ba4 <_dtoa_r+0x63c>)
 80069f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80069fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f280 80dc 	bge.w	8006bc0 <_dtoa_r+0x658>
 8006a08:	9b04      	ldr	r3, [sp, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f300 80d8 	bgt.w	8006bc0 <_dtoa_r+0x658>
 8006a10:	f040 826f 	bne.w	8006ef2 <_dtoa_r+0x98a>
 8006a14:	4b68      	ldr	r3, [pc, #416]	; (8006bb8 <_dtoa_r+0x650>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a24:	f7fa f86e 	bl	8000b04 <__aeabi_dcmpge>
 8006a28:	9e04      	ldr	r6, [sp, #16]
 8006a2a:	4637      	mov	r7, r6
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f040 8245 	bne.w	8006ebc <_dtoa_r+0x954>
 8006a32:	9d00      	ldr	r5, [sp, #0]
 8006a34:	2331      	movs	r3, #49	; 0x31
 8006a36:	f805 3b01 	strb.w	r3, [r5], #1
 8006a3a:	f10b 0b01 	add.w	fp, fp, #1
 8006a3e:	e241      	b.n	8006ec4 <_dtoa_r+0x95c>
 8006a40:	07f2      	lsls	r2, r6, #31
 8006a42:	d505      	bpl.n	8006a50 <_dtoa_r+0x4e8>
 8006a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a48:	f7f9 fdd6 	bl	80005f8 <__aeabi_dmul>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	2301      	movs	r3, #1
 8006a50:	1076      	asrs	r6, r6, #1
 8006a52:	3708      	adds	r7, #8
 8006a54:	e773      	b.n	800693e <_dtoa_r+0x3d6>
 8006a56:	2502      	movs	r5, #2
 8006a58:	e775      	b.n	8006946 <_dtoa_r+0x3de>
 8006a5a:	9e04      	ldr	r6, [sp, #16]
 8006a5c:	465f      	mov	r7, fp
 8006a5e:	e792      	b.n	8006986 <_dtoa_r+0x41e>
 8006a60:	9900      	ldr	r1, [sp, #0]
 8006a62:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <_dtoa_r+0x63c>)
 8006a64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a68:	4431      	add	r1, r6
 8006a6a:	9102      	str	r1, [sp, #8]
 8006a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a6e:	eeb0 9a47 	vmov.f32	s18, s14
 8006a72:	eef0 9a67 	vmov.f32	s19, s15
 8006a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d044      	beq.n	8006b0c <_dtoa_r+0x5a4>
 8006a82:	494e      	ldr	r1, [pc, #312]	; (8006bbc <_dtoa_r+0x654>)
 8006a84:	2000      	movs	r0, #0
 8006a86:	f7f9 fee1 	bl	800084c <__aeabi_ddiv>
 8006a8a:	ec53 2b19 	vmov	r2, r3, d9
 8006a8e:	f7f9 fbfb 	bl	8000288 <__aeabi_dsub>
 8006a92:	9d00      	ldr	r5, [sp, #0]
 8006a94:	ec41 0b19 	vmov	d9, r0, r1
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f7fa f85c 	bl	8000b58 <__aeabi_d2iz>
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	f7f9 fd3f 	bl	8000524 <__aeabi_i2d>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4640      	mov	r0, r8
 8006aac:	4649      	mov	r1, r9
 8006aae:	f7f9 fbeb 	bl	8000288 <__aeabi_dsub>
 8006ab2:	3630      	adds	r6, #48	; 0x30
 8006ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ab8:	ec53 2b19 	vmov	r2, r3, d9
 8006abc:	4680      	mov	r8, r0
 8006abe:	4689      	mov	r9, r1
 8006ac0:	f7fa f80c 	bl	8000adc <__aeabi_dcmplt>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d164      	bne.n	8006b92 <_dtoa_r+0x62a>
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	4937      	ldr	r1, [pc, #220]	; (8006bac <_dtoa_r+0x644>)
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f7f9 fbda 	bl	8000288 <__aeabi_dsub>
 8006ad4:	ec53 2b19 	vmov	r2, r3, d9
 8006ad8:	f7fa f800 	bl	8000adc <__aeabi_dcmplt>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f040 80b6 	bne.w	8006c4e <_dtoa_r+0x6e6>
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	429d      	cmp	r5, r3
 8006ae6:	f43f af7c 	beq.w	80069e2 <_dtoa_r+0x47a>
 8006aea:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <_dtoa_r+0x648>)
 8006aec:	ec51 0b19 	vmov	r0, r1, d9
 8006af0:	2200      	movs	r2, #0
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <_dtoa_r+0x648>)
 8006af8:	ec41 0b19 	vmov	d9, r0, r1
 8006afc:	2200      	movs	r2, #0
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 fd79 	bl	80005f8 <__aeabi_dmul>
 8006b06:	4680      	mov	r8, r0
 8006b08:	4689      	mov	r9, r1
 8006b0a:	e7c5      	b.n	8006a98 <_dtoa_r+0x530>
 8006b0c:	ec51 0b17 	vmov	r0, r1, d7
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	9d00      	ldr	r5, [sp, #0]
 8006b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b1a:	ec41 0b19 	vmov	d9, r0, r1
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4640      	mov	r0, r8
 8006b22:	f7fa f819 	bl	8000b58 <__aeabi_d2iz>
 8006b26:	4606      	mov	r6, r0
 8006b28:	f7f9 fcfc 	bl	8000524 <__aeabi_i2d>
 8006b2c:	3630      	adds	r6, #48	; 0x30
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fba7 	bl	8000288 <__aeabi_dsub>
 8006b3a:	f805 6b01 	strb.w	r6, [r5], #1
 8006b3e:	9b02      	ldr	r3, [sp, #8]
 8006b40:	429d      	cmp	r5, r3
 8006b42:	4680      	mov	r8, r0
 8006b44:	4689      	mov	r9, r1
 8006b46:	f04f 0200 	mov.w	r2, #0
 8006b4a:	d124      	bne.n	8006b96 <_dtoa_r+0x62e>
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <_dtoa_r+0x654>)
 8006b4e:	ec51 0b19 	vmov	r0, r1, d9
 8006b52:	f7f9 fb9b 	bl	800028c <__adddf3>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d173      	bne.n	8006c4e <_dtoa_r+0x6e6>
 8006b66:	ec53 2b19 	vmov	r2, r3, d9
 8006b6a:	4914      	ldr	r1, [pc, #80]	; (8006bbc <_dtoa_r+0x654>)
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7f9 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f43f af2f 	beq.w	80069e2 <_dtoa_r+0x47a>
 8006b84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b86:	1e6b      	subs	r3, r5, #1
 8006b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b8e:	2b30      	cmp	r3, #48	; 0x30
 8006b90:	d0f8      	beq.n	8006b84 <_dtoa_r+0x61c>
 8006b92:	46bb      	mov	fp, r7
 8006b94:	e04a      	b.n	8006c2c <_dtoa_r+0x6c4>
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <_dtoa_r+0x648>)
 8006b98:	f7f9 fd2e 	bl	80005f8 <__aeabi_dmul>
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4689      	mov	r9, r1
 8006ba0:	e7bd      	b.n	8006b1e <_dtoa_r+0x5b6>
 8006ba2:	bf00      	nop
 8006ba4:	08009c28 	.word	0x08009c28
 8006ba8:	08009c00 	.word	0x08009c00
 8006bac:	3ff00000 	.word	0x3ff00000
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	401c0000 	.word	0x401c0000
 8006bb8:	40140000 	.word	0x40140000
 8006bbc:	3fe00000 	.word	0x3fe00000
 8006bc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bc4:	9d00      	ldr	r5, [sp, #0]
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	464b      	mov	r3, r9
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7f9 fe3d 	bl	800084c <__aeabi_ddiv>
 8006bd2:	f7f9 ffc1 	bl	8000b58 <__aeabi_d2iz>
 8006bd6:	9001      	str	r0, [sp, #4]
 8006bd8:	f7f9 fca4 	bl	8000524 <__aeabi_i2d>
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	f7f9 fd0a 	bl	80005f8 <__aeabi_dmul>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4630      	mov	r0, r6
 8006bea:	4639      	mov	r1, r7
 8006bec:	f7f9 fb4c 	bl	8000288 <__aeabi_dsub>
 8006bf0:	9e01      	ldr	r6, [sp, #4]
 8006bf2:	9f04      	ldr	r7, [sp, #16]
 8006bf4:	3630      	adds	r6, #48	; 0x30
 8006bf6:	f805 6b01 	strb.w	r6, [r5], #1
 8006bfa:	9e00      	ldr	r6, [sp, #0]
 8006bfc:	1bae      	subs	r6, r5, r6
 8006bfe:	42b7      	cmp	r7, r6
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	d134      	bne.n	8006c70 <_dtoa_r+0x708>
 8006c06:	f7f9 fb41 	bl	800028c <__adddf3>
 8006c0a:	4642      	mov	r2, r8
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	f7f9 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 8006c16:	b9c8      	cbnz	r0, 8006c4c <_dtoa_r+0x6e4>
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	4639      	mov	r1, r7
 8006c20:	f7f9 ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c24:	b110      	cbz	r0, 8006c2c <_dtoa_r+0x6c4>
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	07db      	lsls	r3, r3, #31
 8006c2a:	d40f      	bmi.n	8006c4c <_dtoa_r+0x6e4>
 8006c2c:	4651      	mov	r1, sl
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fb18 	bl	8007264 <_Bfree>
 8006c34:	2300      	movs	r3, #0
 8006c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c38:	702b      	strb	r3, [r5, #0]
 8006c3a:	f10b 0301 	add.w	r3, fp, #1
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f43f ace2 	beq.w	800660c <_dtoa_r+0xa4>
 8006c48:	601d      	str	r5, [r3, #0]
 8006c4a:	e4df      	b.n	800660c <_dtoa_r+0xa4>
 8006c4c:	465f      	mov	r7, fp
 8006c4e:	462b      	mov	r3, r5
 8006c50:	461d      	mov	r5, r3
 8006c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c56:	2a39      	cmp	r2, #57	; 0x39
 8006c58:	d106      	bne.n	8006c68 <_dtoa_r+0x700>
 8006c5a:	9a00      	ldr	r2, [sp, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d1f7      	bne.n	8006c50 <_dtoa_r+0x6e8>
 8006c60:	9900      	ldr	r1, [sp, #0]
 8006c62:	2230      	movs	r2, #48	; 0x30
 8006c64:	3701      	adds	r7, #1
 8006c66:	700a      	strb	r2, [r1, #0]
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	3201      	adds	r2, #1
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	e790      	b.n	8006b92 <_dtoa_r+0x62a>
 8006c70:	4ba3      	ldr	r3, [pc, #652]	; (8006f00 <_dtoa_r+0x998>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f7f9 fcc0 	bl	80005f8 <__aeabi_dmul>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460f      	mov	r7, r1
 8006c80:	f7f9 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d09e      	beq.n	8006bc6 <_dtoa_r+0x65e>
 8006c88:	e7d0      	b.n	8006c2c <_dtoa_r+0x6c4>
 8006c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	f000 80ca 	beq.w	8006e26 <_dtoa_r+0x8be>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	2a01      	cmp	r2, #1
 8006c96:	f300 80ad 	bgt.w	8006df4 <_dtoa_r+0x88c>
 8006c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	f000 80a5 	beq.w	8006dec <_dtoa_r+0x884>
 8006ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ca6:	9e08      	ldr	r6, [sp, #32]
 8006ca8:	9d05      	ldr	r5, [sp, #20]
 8006caa:	9a05      	ldr	r2, [sp, #20]
 8006cac:	441a      	add	r2, r3
 8006cae:	9205      	str	r2, [sp, #20]
 8006cb0:	9a06      	ldr	r2, [sp, #24]
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	441a      	add	r2, r3
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	9206      	str	r2, [sp, #24]
 8006cba:	f000 fb89 	bl	80073d0 <__i2b>
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	b165      	cbz	r5, 8006cdc <_dtoa_r+0x774>
 8006cc2:	9b06      	ldr	r3, [sp, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dd09      	ble.n	8006cdc <_dtoa_r+0x774>
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	9a05      	ldr	r2, [sp, #20]
 8006ccc:	bfa8      	it	ge
 8006cce:	462b      	movge	r3, r5
 8006cd0:	1ad2      	subs	r2, r2, r3
 8006cd2:	9205      	str	r2, [sp, #20]
 8006cd4:	9a06      	ldr	r2, [sp, #24]
 8006cd6:	1aed      	subs	r5, r5, r3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	9306      	str	r3, [sp, #24]
 8006cdc:	9b08      	ldr	r3, [sp, #32]
 8006cde:	b1f3      	cbz	r3, 8006d1e <_dtoa_r+0x7b6>
 8006ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80a3 	beq.w	8006e2e <_dtoa_r+0x8c6>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	dd10      	ble.n	8006d0e <_dtoa_r+0x7a6>
 8006cec:	4639      	mov	r1, r7
 8006cee:	4632      	mov	r2, r6
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 fc2d 	bl	8007550 <__pow5mult>
 8006cf6:	4652      	mov	r2, sl
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fb7d 	bl	80073fc <__multiply>
 8006d02:	4651      	mov	r1, sl
 8006d04:	4680      	mov	r8, r0
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 faac 	bl	8007264 <_Bfree>
 8006d0c:	46c2      	mov	sl, r8
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	1b9a      	subs	r2, r3, r6
 8006d12:	d004      	beq.n	8006d1e <_dtoa_r+0x7b6>
 8006d14:	4651      	mov	r1, sl
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fc1a 	bl	8007550 <__pow5mult>
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	2101      	movs	r1, #1
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fb55 	bl	80073d0 <__i2b>
 8006d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	f340 8081 	ble.w	8006e32 <_dtoa_r+0x8ca>
 8006d30:	461a      	mov	r2, r3
 8006d32:	4601      	mov	r1, r0
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fc0b 	bl	8007550 <__pow5mult>
 8006d3a:	9b07      	ldr	r3, [sp, #28]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	4606      	mov	r6, r0
 8006d40:	dd7a      	ble.n	8006e38 <_dtoa_r+0x8d0>
 8006d42:	f04f 0800 	mov.w	r8, #0
 8006d46:	6933      	ldr	r3, [r6, #16]
 8006d48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d4c:	6918      	ldr	r0, [r3, #16]
 8006d4e:	f000 faf1 	bl	8007334 <__hi0bits>
 8006d52:	f1c0 0020 	rsb	r0, r0, #32
 8006d56:	9b06      	ldr	r3, [sp, #24]
 8006d58:	4418      	add	r0, r3
 8006d5a:	f010 001f 	ands.w	r0, r0, #31
 8006d5e:	f000 8094 	beq.w	8006e8a <_dtoa_r+0x922>
 8006d62:	f1c0 0320 	rsb	r3, r0, #32
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	f340 8085 	ble.w	8006e76 <_dtoa_r+0x90e>
 8006d6c:	9b05      	ldr	r3, [sp, #20]
 8006d6e:	f1c0 001c 	rsb	r0, r0, #28
 8006d72:	4403      	add	r3, r0
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	9b06      	ldr	r3, [sp, #24]
 8006d78:	4403      	add	r3, r0
 8006d7a:	4405      	add	r5, r0
 8006d7c:	9306      	str	r3, [sp, #24]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dd05      	ble.n	8006d90 <_dtoa_r+0x828>
 8006d84:	4651      	mov	r1, sl
 8006d86:	461a      	mov	r2, r3
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fc3b 	bl	8007604 <__lshift>
 8006d8e:	4682      	mov	sl, r0
 8006d90:	9b06      	ldr	r3, [sp, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd05      	ble.n	8006da2 <_dtoa_r+0x83a>
 8006d96:	4631      	mov	r1, r6
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fc32 	bl	8007604 <__lshift>
 8006da0:	4606      	mov	r6, r0
 8006da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d072      	beq.n	8006e8e <_dtoa_r+0x926>
 8006da8:	4631      	mov	r1, r6
 8006daa:	4650      	mov	r0, sl
 8006dac:	f000 fc96 	bl	80076dc <__mcmp>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	da6c      	bge.n	8006e8e <_dtoa_r+0x926>
 8006db4:	2300      	movs	r3, #0
 8006db6:	4651      	mov	r1, sl
 8006db8:	220a      	movs	r2, #10
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fa74 	bl	80072a8 <__multadd>
 8006dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 81b0 	beq.w	800712e <_dtoa_r+0xbc6>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fa67 	bl	80072a8 <__multadd>
 8006dda:	9b01      	ldr	r3, [sp, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	4607      	mov	r7, r0
 8006de0:	f300 8096 	bgt.w	8006f10 <_dtoa_r+0x9a8>
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	dc59      	bgt.n	8006e9e <_dtoa_r+0x936>
 8006dea:	e091      	b.n	8006f10 <_dtoa_r+0x9a8>
 8006dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006df2:	e758      	b.n	8006ca6 <_dtoa_r+0x73e>
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	1e5e      	subs	r6, r3, #1
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	42b3      	cmp	r3, r6
 8006dfc:	bfbf      	itttt	lt
 8006dfe:	9b08      	ldrlt	r3, [sp, #32]
 8006e00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e02:	9608      	strlt	r6, [sp, #32]
 8006e04:	1af3      	sublt	r3, r6, r3
 8006e06:	bfb4      	ite	lt
 8006e08:	18d2      	addlt	r2, r2, r3
 8006e0a:	1b9e      	subge	r6, r3, r6
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	bfbc      	itt	lt
 8006e10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e12:	2600      	movlt	r6, #0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfb7      	itett	lt
 8006e18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e20:	1a9d      	sublt	r5, r3, r2
 8006e22:	2300      	movlt	r3, #0
 8006e24:	e741      	b.n	8006caa <_dtoa_r+0x742>
 8006e26:	9e08      	ldr	r6, [sp, #32]
 8006e28:	9d05      	ldr	r5, [sp, #20]
 8006e2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e2c:	e748      	b.n	8006cc0 <_dtoa_r+0x758>
 8006e2e:	9a08      	ldr	r2, [sp, #32]
 8006e30:	e770      	b.n	8006d14 <_dtoa_r+0x7ac>
 8006e32:	9b07      	ldr	r3, [sp, #28]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	dc19      	bgt.n	8006e6c <_dtoa_r+0x904>
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	b9bb      	cbnz	r3, 8006e6c <_dtoa_r+0x904>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e42:	b99b      	cbnz	r3, 8006e6c <_dtoa_r+0x904>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e4a:	0d1b      	lsrs	r3, r3, #20
 8006e4c:	051b      	lsls	r3, r3, #20
 8006e4e:	b183      	cbz	r3, 8006e72 <_dtoa_r+0x90a>
 8006e50:	9b05      	ldr	r3, [sp, #20]
 8006e52:	3301      	adds	r3, #1
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	9306      	str	r3, [sp, #24]
 8006e5c:	f04f 0801 	mov.w	r8, #1
 8006e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f47f af6f 	bne.w	8006d46 <_dtoa_r+0x7de>
 8006e68:	2001      	movs	r0, #1
 8006e6a:	e774      	b.n	8006d56 <_dtoa_r+0x7ee>
 8006e6c:	f04f 0800 	mov.w	r8, #0
 8006e70:	e7f6      	b.n	8006e60 <_dtoa_r+0x8f8>
 8006e72:	4698      	mov	r8, r3
 8006e74:	e7f4      	b.n	8006e60 <_dtoa_r+0x8f8>
 8006e76:	d082      	beq.n	8006d7e <_dtoa_r+0x816>
 8006e78:	9a05      	ldr	r2, [sp, #20]
 8006e7a:	331c      	adds	r3, #28
 8006e7c:	441a      	add	r2, r3
 8006e7e:	9205      	str	r2, [sp, #20]
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	441a      	add	r2, r3
 8006e84:	441d      	add	r5, r3
 8006e86:	9206      	str	r2, [sp, #24]
 8006e88:	e779      	b.n	8006d7e <_dtoa_r+0x816>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	e7f4      	b.n	8006e78 <_dtoa_r+0x910>
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc37      	bgt.n	8006f04 <_dtoa_r+0x99c>
 8006e94:	9b07      	ldr	r3, [sp, #28]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	dd34      	ble.n	8006f04 <_dtoa_r+0x99c>
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	b963      	cbnz	r3, 8006ebc <_dtoa_r+0x954>
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	2205      	movs	r2, #5
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 f9fe 	bl	80072a8 <__multadd>
 8006eac:	4601      	mov	r1, r0
 8006eae:	4606      	mov	r6, r0
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	f000 fc13 	bl	80076dc <__mcmp>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f73f adbb 	bgt.w	8006a32 <_dtoa_r+0x4ca>
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebe:	9d00      	ldr	r5, [sp, #0]
 8006ec0:	ea6f 0b03 	mvn.w	fp, r3
 8006ec4:	f04f 0800 	mov.w	r8, #0
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 f9ca 	bl	8007264 <_Bfree>
 8006ed0:	2f00      	cmp	r7, #0
 8006ed2:	f43f aeab 	beq.w	8006c2c <_dtoa_r+0x6c4>
 8006ed6:	f1b8 0f00 	cmp.w	r8, #0
 8006eda:	d005      	beq.n	8006ee8 <_dtoa_r+0x980>
 8006edc:	45b8      	cmp	r8, r7
 8006ede:	d003      	beq.n	8006ee8 <_dtoa_r+0x980>
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 f9be 	bl	8007264 <_Bfree>
 8006ee8:	4639      	mov	r1, r7
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 f9ba 	bl	8007264 <_Bfree>
 8006ef0:	e69c      	b.n	8006c2c <_dtoa_r+0x6c4>
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	4637      	mov	r7, r6
 8006ef6:	e7e1      	b.n	8006ebc <_dtoa_r+0x954>
 8006ef8:	46bb      	mov	fp, r7
 8006efa:	4637      	mov	r7, r6
 8006efc:	e599      	b.n	8006a32 <_dtoa_r+0x4ca>
 8006efe:	bf00      	nop
 8006f00:	40240000 	.word	0x40240000
 8006f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80c8 	beq.w	800709c <_dtoa_r+0xb34>
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	dd05      	ble.n	8006f20 <_dtoa_r+0x9b8>
 8006f14:	4639      	mov	r1, r7
 8006f16:	462a      	mov	r2, r5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fb73 	bl	8007604 <__lshift>
 8006f1e:	4607      	mov	r7, r0
 8006f20:	f1b8 0f00 	cmp.w	r8, #0
 8006f24:	d05b      	beq.n	8006fde <_dtoa_r+0xa76>
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 f95b 	bl	80071e4 <_Balloc>
 8006f2e:	4605      	mov	r5, r0
 8006f30:	b928      	cbnz	r0, 8006f3e <_dtoa_r+0x9d6>
 8006f32:	4b83      	ldr	r3, [pc, #524]	; (8007140 <_dtoa_r+0xbd8>)
 8006f34:	4602      	mov	r2, r0
 8006f36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f3a:	f7ff bb2e 	b.w	800659a <_dtoa_r+0x32>
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	3202      	adds	r2, #2
 8006f42:	0092      	lsls	r2, r2, #2
 8006f44:	f107 010c 	add.w	r1, r7, #12
 8006f48:	300c      	adds	r0, #12
 8006f4a:	f7ff fa75 	bl	8006438 <memcpy>
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4629      	mov	r1, r5
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 fb56 	bl	8007604 <__lshift>
 8006f58:	9b00      	ldr	r3, [sp, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	9304      	str	r3, [sp, #16]
 8006f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f62:	4413      	add	r3, r2
 8006f64:	9308      	str	r3, [sp, #32]
 8006f66:	9b02      	ldr	r3, [sp, #8]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	46b8      	mov	r8, r7
 8006f6e:	9306      	str	r3, [sp, #24]
 8006f70:	4607      	mov	r7, r0
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	4631      	mov	r1, r6
 8006f76:	3b01      	subs	r3, #1
 8006f78:	4650      	mov	r0, sl
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	f7ff fa6a 	bl	8006454 <quorem>
 8006f80:	4641      	mov	r1, r8
 8006f82:	9002      	str	r0, [sp, #8]
 8006f84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f88:	4650      	mov	r0, sl
 8006f8a:	f000 fba7 	bl	80076dc <__mcmp>
 8006f8e:	463a      	mov	r2, r7
 8006f90:	9005      	str	r0, [sp, #20]
 8006f92:	4631      	mov	r1, r6
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fbbd 	bl	8007714 <__mdiff>
 8006f9a:	68c2      	ldr	r2, [r0, #12]
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	bb02      	cbnz	r2, 8006fe2 <_dtoa_r+0xa7a>
 8006fa0:	4601      	mov	r1, r0
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f000 fb9a 	bl	80076dc <__mcmp>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	4629      	mov	r1, r5
 8006fac:	4620      	mov	r0, r4
 8006fae:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb0:	f000 f958 	bl	8007264 <_Bfree>
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fb8:	9d04      	ldr	r5, [sp, #16]
 8006fba:	ea43 0102 	orr.w	r1, r3, r2
 8006fbe:	9b06      	ldr	r3, [sp, #24]
 8006fc0:	4319      	orrs	r1, r3
 8006fc2:	d110      	bne.n	8006fe6 <_dtoa_r+0xa7e>
 8006fc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fc8:	d029      	beq.n	800701e <_dtoa_r+0xab6>
 8006fca:	9b05      	ldr	r3, [sp, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dd02      	ble.n	8006fd6 <_dtoa_r+0xa6e>
 8006fd0:	9b02      	ldr	r3, [sp, #8]
 8006fd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	f883 9000 	strb.w	r9, [r3]
 8006fdc:	e774      	b.n	8006ec8 <_dtoa_r+0x960>
 8006fde:	4638      	mov	r0, r7
 8006fe0:	e7ba      	b.n	8006f58 <_dtoa_r+0x9f0>
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	e7e1      	b.n	8006faa <_dtoa_r+0xa42>
 8006fe6:	9b05      	ldr	r3, [sp, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db04      	blt.n	8006ff6 <_dtoa_r+0xa8e>
 8006fec:	9907      	ldr	r1, [sp, #28]
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	9906      	ldr	r1, [sp, #24]
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	d120      	bne.n	8007038 <_dtoa_r+0xad0>
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	dded      	ble.n	8006fd6 <_dtoa_r+0xa6e>
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 fb00 	bl	8007604 <__lshift>
 8007004:	4631      	mov	r1, r6
 8007006:	4682      	mov	sl, r0
 8007008:	f000 fb68 	bl	80076dc <__mcmp>
 800700c:	2800      	cmp	r0, #0
 800700e:	dc03      	bgt.n	8007018 <_dtoa_r+0xab0>
 8007010:	d1e1      	bne.n	8006fd6 <_dtoa_r+0xa6e>
 8007012:	f019 0f01 	tst.w	r9, #1
 8007016:	d0de      	beq.n	8006fd6 <_dtoa_r+0xa6e>
 8007018:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800701c:	d1d8      	bne.n	8006fd0 <_dtoa_r+0xa68>
 800701e:	9a01      	ldr	r2, [sp, #4]
 8007020:	2339      	movs	r3, #57	; 0x39
 8007022:	7013      	strb	r3, [r2, #0]
 8007024:	462b      	mov	r3, r5
 8007026:	461d      	mov	r5, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800702e:	2a39      	cmp	r2, #57	; 0x39
 8007030:	d06c      	beq.n	800710c <_dtoa_r+0xba4>
 8007032:	3201      	adds	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e747      	b.n	8006ec8 <_dtoa_r+0x960>
 8007038:	2a00      	cmp	r2, #0
 800703a:	dd07      	ble.n	800704c <_dtoa_r+0xae4>
 800703c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007040:	d0ed      	beq.n	800701e <_dtoa_r+0xab6>
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	f109 0301 	add.w	r3, r9, #1
 8007048:	7013      	strb	r3, [r2, #0]
 800704a:	e73d      	b.n	8006ec8 <_dtoa_r+0x960>
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	9a08      	ldr	r2, [sp, #32]
 8007050:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007054:	4293      	cmp	r3, r2
 8007056:	d043      	beq.n	80070e0 <_dtoa_r+0xb78>
 8007058:	4651      	mov	r1, sl
 800705a:	2300      	movs	r3, #0
 800705c:	220a      	movs	r2, #10
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f922 	bl	80072a8 <__multadd>
 8007064:	45b8      	cmp	r8, r7
 8007066:	4682      	mov	sl, r0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	f04f 020a 	mov.w	r2, #10
 8007070:	4641      	mov	r1, r8
 8007072:	4620      	mov	r0, r4
 8007074:	d107      	bne.n	8007086 <_dtoa_r+0xb1e>
 8007076:	f000 f917 	bl	80072a8 <__multadd>
 800707a:	4680      	mov	r8, r0
 800707c:	4607      	mov	r7, r0
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	e775      	b.n	8006f72 <_dtoa_r+0xa0a>
 8007086:	f000 f90f 	bl	80072a8 <__multadd>
 800708a:	4639      	mov	r1, r7
 800708c:	4680      	mov	r8, r0
 800708e:	2300      	movs	r3, #0
 8007090:	220a      	movs	r2, #10
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f908 	bl	80072a8 <__multadd>
 8007098:	4607      	mov	r7, r0
 800709a:	e7f0      	b.n	800707e <_dtoa_r+0xb16>
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	9d00      	ldr	r5, [sp, #0]
 80070a2:	4631      	mov	r1, r6
 80070a4:	4650      	mov	r0, sl
 80070a6:	f7ff f9d5 	bl	8006454 <quorem>
 80070aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	f805 9b01 	strb.w	r9, [r5], #1
 80070b4:	1aea      	subs	r2, r5, r3
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	dd07      	ble.n	80070cc <_dtoa_r+0xb64>
 80070bc:	4651      	mov	r1, sl
 80070be:	2300      	movs	r3, #0
 80070c0:	220a      	movs	r2, #10
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 f8f0 	bl	80072a8 <__multadd>
 80070c8:	4682      	mov	sl, r0
 80070ca:	e7ea      	b.n	80070a2 <_dtoa_r+0xb3a>
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bfc8      	it	gt
 80070d2:	461d      	movgt	r5, r3
 80070d4:	9b00      	ldr	r3, [sp, #0]
 80070d6:	bfd8      	it	le
 80070d8:	2501      	movle	r5, #1
 80070da:	441d      	add	r5, r3
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	4651      	mov	r1, sl
 80070e2:	2201      	movs	r2, #1
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fa8d 	bl	8007604 <__lshift>
 80070ea:	4631      	mov	r1, r6
 80070ec:	4682      	mov	sl, r0
 80070ee:	f000 faf5 	bl	80076dc <__mcmp>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	dc96      	bgt.n	8007024 <_dtoa_r+0xabc>
 80070f6:	d102      	bne.n	80070fe <_dtoa_r+0xb96>
 80070f8:	f019 0f01 	tst.w	r9, #1
 80070fc:	d192      	bne.n	8007024 <_dtoa_r+0xabc>
 80070fe:	462b      	mov	r3, r5
 8007100:	461d      	mov	r5, r3
 8007102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007106:	2a30      	cmp	r2, #48	; 0x30
 8007108:	d0fa      	beq.n	8007100 <_dtoa_r+0xb98>
 800710a:	e6dd      	b.n	8006ec8 <_dtoa_r+0x960>
 800710c:	9a00      	ldr	r2, [sp, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d189      	bne.n	8007026 <_dtoa_r+0xabe>
 8007112:	f10b 0b01 	add.w	fp, fp, #1
 8007116:	2331      	movs	r3, #49	; 0x31
 8007118:	e796      	b.n	8007048 <_dtoa_r+0xae0>
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <_dtoa_r+0xbdc>)
 800711c:	f7ff ba99 	b.w	8006652 <_dtoa_r+0xea>
 8007120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007122:	2b00      	cmp	r3, #0
 8007124:	f47f aa6d 	bne.w	8006602 <_dtoa_r+0x9a>
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <_dtoa_r+0xbe0>)
 800712a:	f7ff ba92 	b.w	8006652 <_dtoa_r+0xea>
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	dcb5      	bgt.n	80070a0 <_dtoa_r+0xb38>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	2b02      	cmp	r3, #2
 8007138:	f73f aeb1 	bgt.w	8006e9e <_dtoa_r+0x936>
 800713c:	e7b0      	b.n	80070a0 <_dtoa_r+0xb38>
 800713e:	bf00      	nop
 8007140:	08009b92 	.word	0x08009b92
 8007144:	08008309 	.word	0x08008309
 8007148:	08009b16 	.word	0x08009b16

0800714c <_free_r>:
 800714c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800714e:	2900      	cmp	r1, #0
 8007150:	d044      	beq.n	80071dc <_free_r+0x90>
 8007152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007156:	9001      	str	r0, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f1a1 0404 	sub.w	r4, r1, #4
 800715e:	bfb8      	it	lt
 8007160:	18e4      	addlt	r4, r4, r3
 8007162:	f7fe fa61 	bl	8005628 <__malloc_lock>
 8007166:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <_free_r+0x94>)
 8007168:	9801      	ldr	r0, [sp, #4]
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	b933      	cbnz	r3, 800717c <_free_r+0x30>
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	6014      	str	r4, [r2, #0]
 8007172:	b003      	add	sp, #12
 8007174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007178:	f7fe ba5c 	b.w	8005634 <__malloc_unlock>
 800717c:	42a3      	cmp	r3, r4
 800717e:	d908      	bls.n	8007192 <_free_r+0x46>
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	1961      	adds	r1, r4, r5
 8007184:	428b      	cmp	r3, r1
 8007186:	bf01      	itttt	eq
 8007188:	6819      	ldreq	r1, [r3, #0]
 800718a:	685b      	ldreq	r3, [r3, #4]
 800718c:	1949      	addeq	r1, r1, r5
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	e7ed      	b.n	800716e <_free_r+0x22>
 8007192:	461a      	mov	r2, r3
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b10b      	cbz	r3, 800719c <_free_r+0x50>
 8007198:	42a3      	cmp	r3, r4
 800719a:	d9fa      	bls.n	8007192 <_free_r+0x46>
 800719c:	6811      	ldr	r1, [r2, #0]
 800719e:	1855      	adds	r5, r2, r1
 80071a0:	42a5      	cmp	r5, r4
 80071a2:	d10b      	bne.n	80071bc <_free_r+0x70>
 80071a4:	6824      	ldr	r4, [r4, #0]
 80071a6:	4421      	add	r1, r4
 80071a8:	1854      	adds	r4, r2, r1
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	d1e0      	bne.n	8007172 <_free_r+0x26>
 80071b0:	681c      	ldr	r4, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	6053      	str	r3, [r2, #4]
 80071b6:	440c      	add	r4, r1
 80071b8:	6014      	str	r4, [r2, #0]
 80071ba:	e7da      	b.n	8007172 <_free_r+0x26>
 80071bc:	d902      	bls.n	80071c4 <_free_r+0x78>
 80071be:	230c      	movs	r3, #12
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	e7d6      	b.n	8007172 <_free_r+0x26>
 80071c4:	6825      	ldr	r5, [r4, #0]
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	428b      	cmp	r3, r1
 80071ca:	bf04      	itt	eq
 80071cc:	6819      	ldreq	r1, [r3, #0]
 80071ce:	685b      	ldreq	r3, [r3, #4]
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	bf04      	itt	eq
 80071d4:	1949      	addeq	r1, r1, r5
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	6054      	str	r4, [r2, #4]
 80071da:	e7ca      	b.n	8007172 <_free_r+0x26>
 80071dc:	b003      	add	sp, #12
 80071de:	bd30      	pop	{r4, r5, pc}
 80071e0:	200009cc 	.word	0x200009cc

080071e4 <_Balloc>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	69c6      	ldr	r6, [r0, #28]
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	b976      	cbnz	r6, 800720c <_Balloc+0x28>
 80071ee:	2010      	movs	r0, #16
 80071f0:	f7fe f972 	bl	80054d8 <malloc>
 80071f4:	4602      	mov	r2, r0
 80071f6:	61e0      	str	r0, [r4, #28]
 80071f8:	b920      	cbnz	r0, 8007204 <_Balloc+0x20>
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <_Balloc+0x78>)
 80071fc:	4818      	ldr	r0, [pc, #96]	; (8007260 <_Balloc+0x7c>)
 80071fe:	216b      	movs	r1, #107	; 0x6b
 8007200:	f000 fde2 	bl	8007dc8 <__assert_func>
 8007204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007208:	6006      	str	r6, [r0, #0]
 800720a:	60c6      	str	r6, [r0, #12]
 800720c:	69e6      	ldr	r6, [r4, #28]
 800720e:	68f3      	ldr	r3, [r6, #12]
 8007210:	b183      	cbz	r3, 8007234 <_Balloc+0x50>
 8007212:	69e3      	ldr	r3, [r4, #28]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800721a:	b9b8      	cbnz	r0, 800724c <_Balloc+0x68>
 800721c:	2101      	movs	r1, #1
 800721e:	fa01 f605 	lsl.w	r6, r1, r5
 8007222:	1d72      	adds	r2, r6, #5
 8007224:	0092      	lsls	r2, r2, #2
 8007226:	4620      	mov	r0, r4
 8007228:	f7fe f940 	bl	80054ac <_calloc_r>
 800722c:	b160      	cbz	r0, 8007248 <_Balloc+0x64>
 800722e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007232:	e00e      	b.n	8007252 <_Balloc+0x6e>
 8007234:	2221      	movs	r2, #33	; 0x21
 8007236:	2104      	movs	r1, #4
 8007238:	4620      	mov	r0, r4
 800723a:	f7fe f937 	bl	80054ac <_calloc_r>
 800723e:	69e3      	ldr	r3, [r4, #28]
 8007240:	60f0      	str	r0, [r6, #12]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e4      	bne.n	8007212 <_Balloc+0x2e>
 8007248:	2000      	movs	r0, #0
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	6802      	ldr	r2, [r0, #0]
 800724e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007252:	2300      	movs	r3, #0
 8007254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007258:	e7f7      	b.n	800724a <_Balloc+0x66>
 800725a:	bf00      	nop
 800725c:	08009b23 	.word	0x08009b23
 8007260:	08009ba3 	.word	0x08009ba3

08007264 <_Bfree>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	69c6      	ldr	r6, [r0, #28]
 8007268:	4605      	mov	r5, r0
 800726a:	460c      	mov	r4, r1
 800726c:	b976      	cbnz	r6, 800728c <_Bfree+0x28>
 800726e:	2010      	movs	r0, #16
 8007270:	f7fe f932 	bl	80054d8 <malloc>
 8007274:	4602      	mov	r2, r0
 8007276:	61e8      	str	r0, [r5, #28]
 8007278:	b920      	cbnz	r0, 8007284 <_Bfree+0x20>
 800727a:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <_Bfree+0x3c>)
 800727c:	4809      	ldr	r0, [pc, #36]	; (80072a4 <_Bfree+0x40>)
 800727e:	218f      	movs	r1, #143	; 0x8f
 8007280:	f000 fda2 	bl	8007dc8 <__assert_func>
 8007284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007288:	6006      	str	r6, [r0, #0]
 800728a:	60c6      	str	r6, [r0, #12]
 800728c:	b13c      	cbz	r4, 800729e <_Bfree+0x3a>
 800728e:	69eb      	ldr	r3, [r5, #28]
 8007290:	6862      	ldr	r2, [r4, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007298:	6021      	str	r1, [r4, #0]
 800729a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	08009b23 	.word	0x08009b23
 80072a4:	08009ba3 	.word	0x08009ba3

080072a8 <__multadd>:
 80072a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ac:	690d      	ldr	r5, [r1, #16]
 80072ae:	4607      	mov	r7, r0
 80072b0:	460c      	mov	r4, r1
 80072b2:	461e      	mov	r6, r3
 80072b4:	f101 0c14 	add.w	ip, r1, #20
 80072b8:	2000      	movs	r0, #0
 80072ba:	f8dc 3000 	ldr.w	r3, [ip]
 80072be:	b299      	uxth	r1, r3
 80072c0:	fb02 6101 	mla	r1, r2, r1, r6
 80072c4:	0c1e      	lsrs	r6, r3, #16
 80072c6:	0c0b      	lsrs	r3, r1, #16
 80072c8:	fb02 3306 	mla	r3, r2, r6, r3
 80072cc:	b289      	uxth	r1, r1
 80072ce:	3001      	adds	r0, #1
 80072d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072d4:	4285      	cmp	r5, r0
 80072d6:	f84c 1b04 	str.w	r1, [ip], #4
 80072da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072de:	dcec      	bgt.n	80072ba <__multadd+0x12>
 80072e0:	b30e      	cbz	r6, 8007326 <__multadd+0x7e>
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	dc19      	bgt.n	800731c <__multadd+0x74>
 80072e8:	6861      	ldr	r1, [r4, #4]
 80072ea:	4638      	mov	r0, r7
 80072ec:	3101      	adds	r1, #1
 80072ee:	f7ff ff79 	bl	80071e4 <_Balloc>
 80072f2:	4680      	mov	r8, r0
 80072f4:	b928      	cbnz	r0, 8007302 <__multadd+0x5a>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4b0c      	ldr	r3, [pc, #48]	; (800732c <__multadd+0x84>)
 80072fa:	480d      	ldr	r0, [pc, #52]	; (8007330 <__multadd+0x88>)
 80072fc:	21ba      	movs	r1, #186	; 0xba
 80072fe:	f000 fd63 	bl	8007dc8 <__assert_func>
 8007302:	6922      	ldr	r2, [r4, #16]
 8007304:	3202      	adds	r2, #2
 8007306:	f104 010c 	add.w	r1, r4, #12
 800730a:	0092      	lsls	r2, r2, #2
 800730c:	300c      	adds	r0, #12
 800730e:	f7ff f893 	bl	8006438 <memcpy>
 8007312:	4621      	mov	r1, r4
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff ffa5 	bl	8007264 <_Bfree>
 800731a:	4644      	mov	r4, r8
 800731c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007320:	3501      	adds	r5, #1
 8007322:	615e      	str	r6, [r3, #20]
 8007324:	6125      	str	r5, [r4, #16]
 8007326:	4620      	mov	r0, r4
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	08009b92 	.word	0x08009b92
 8007330:	08009ba3 	.word	0x08009ba3

08007334 <__hi0bits>:
 8007334:	0c03      	lsrs	r3, r0, #16
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	b9d3      	cbnz	r3, 8007370 <__hi0bits+0x3c>
 800733a:	0400      	lsls	r0, r0, #16
 800733c:	2310      	movs	r3, #16
 800733e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007342:	bf04      	itt	eq
 8007344:	0200      	lsleq	r0, r0, #8
 8007346:	3308      	addeq	r3, #8
 8007348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800734c:	bf04      	itt	eq
 800734e:	0100      	lsleq	r0, r0, #4
 8007350:	3304      	addeq	r3, #4
 8007352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007356:	bf04      	itt	eq
 8007358:	0080      	lsleq	r0, r0, #2
 800735a:	3302      	addeq	r3, #2
 800735c:	2800      	cmp	r0, #0
 800735e:	db05      	blt.n	800736c <__hi0bits+0x38>
 8007360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007364:	f103 0301 	add.w	r3, r3, #1
 8007368:	bf08      	it	eq
 800736a:	2320      	moveq	r3, #32
 800736c:	4618      	mov	r0, r3
 800736e:	4770      	bx	lr
 8007370:	2300      	movs	r3, #0
 8007372:	e7e4      	b.n	800733e <__hi0bits+0xa>

08007374 <__lo0bits>:
 8007374:	6803      	ldr	r3, [r0, #0]
 8007376:	f013 0207 	ands.w	r2, r3, #7
 800737a:	d00c      	beq.n	8007396 <__lo0bits+0x22>
 800737c:	07d9      	lsls	r1, r3, #31
 800737e:	d422      	bmi.n	80073c6 <__lo0bits+0x52>
 8007380:	079a      	lsls	r2, r3, #30
 8007382:	bf49      	itett	mi
 8007384:	085b      	lsrmi	r3, r3, #1
 8007386:	089b      	lsrpl	r3, r3, #2
 8007388:	6003      	strmi	r3, [r0, #0]
 800738a:	2201      	movmi	r2, #1
 800738c:	bf5c      	itt	pl
 800738e:	6003      	strpl	r3, [r0, #0]
 8007390:	2202      	movpl	r2, #2
 8007392:	4610      	mov	r0, r2
 8007394:	4770      	bx	lr
 8007396:	b299      	uxth	r1, r3
 8007398:	b909      	cbnz	r1, 800739e <__lo0bits+0x2a>
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	2210      	movs	r2, #16
 800739e:	b2d9      	uxtb	r1, r3
 80073a0:	b909      	cbnz	r1, 80073a6 <__lo0bits+0x32>
 80073a2:	3208      	adds	r2, #8
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	0719      	lsls	r1, r3, #28
 80073a8:	bf04      	itt	eq
 80073aa:	091b      	lsreq	r3, r3, #4
 80073ac:	3204      	addeq	r2, #4
 80073ae:	0799      	lsls	r1, r3, #30
 80073b0:	bf04      	itt	eq
 80073b2:	089b      	lsreq	r3, r3, #2
 80073b4:	3202      	addeq	r2, #2
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d403      	bmi.n	80073c2 <__lo0bits+0x4e>
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	f102 0201 	add.w	r2, r2, #1
 80073c0:	d003      	beq.n	80073ca <__lo0bits+0x56>
 80073c2:	6003      	str	r3, [r0, #0]
 80073c4:	e7e5      	b.n	8007392 <__lo0bits+0x1e>
 80073c6:	2200      	movs	r2, #0
 80073c8:	e7e3      	b.n	8007392 <__lo0bits+0x1e>
 80073ca:	2220      	movs	r2, #32
 80073cc:	e7e1      	b.n	8007392 <__lo0bits+0x1e>
	...

080073d0 <__i2b>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	460c      	mov	r4, r1
 80073d4:	2101      	movs	r1, #1
 80073d6:	f7ff ff05 	bl	80071e4 <_Balloc>
 80073da:	4602      	mov	r2, r0
 80073dc:	b928      	cbnz	r0, 80073ea <__i2b+0x1a>
 80073de:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <__i2b+0x24>)
 80073e0:	4805      	ldr	r0, [pc, #20]	; (80073f8 <__i2b+0x28>)
 80073e2:	f240 1145 	movw	r1, #325	; 0x145
 80073e6:	f000 fcef 	bl	8007dc8 <__assert_func>
 80073ea:	2301      	movs	r3, #1
 80073ec:	6144      	str	r4, [r0, #20]
 80073ee:	6103      	str	r3, [r0, #16]
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	bf00      	nop
 80073f4:	08009b92 	.word	0x08009b92
 80073f8:	08009ba3 	.word	0x08009ba3

080073fc <__multiply>:
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	4691      	mov	r9, r2
 8007402:	690a      	ldr	r2, [r1, #16]
 8007404:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007408:	429a      	cmp	r2, r3
 800740a:	bfb8      	it	lt
 800740c:	460b      	movlt	r3, r1
 800740e:	460c      	mov	r4, r1
 8007410:	bfbc      	itt	lt
 8007412:	464c      	movlt	r4, r9
 8007414:	4699      	movlt	r9, r3
 8007416:	6927      	ldr	r7, [r4, #16]
 8007418:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800741c:	68a3      	ldr	r3, [r4, #8]
 800741e:	6861      	ldr	r1, [r4, #4]
 8007420:	eb07 060a 	add.w	r6, r7, sl
 8007424:	42b3      	cmp	r3, r6
 8007426:	b085      	sub	sp, #20
 8007428:	bfb8      	it	lt
 800742a:	3101      	addlt	r1, #1
 800742c:	f7ff feda 	bl	80071e4 <_Balloc>
 8007430:	b930      	cbnz	r0, 8007440 <__multiply+0x44>
 8007432:	4602      	mov	r2, r0
 8007434:	4b44      	ldr	r3, [pc, #272]	; (8007548 <__multiply+0x14c>)
 8007436:	4845      	ldr	r0, [pc, #276]	; (800754c <__multiply+0x150>)
 8007438:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800743c:	f000 fcc4 	bl	8007dc8 <__assert_func>
 8007440:	f100 0514 	add.w	r5, r0, #20
 8007444:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007448:	462b      	mov	r3, r5
 800744a:	2200      	movs	r2, #0
 800744c:	4543      	cmp	r3, r8
 800744e:	d321      	bcc.n	8007494 <__multiply+0x98>
 8007450:	f104 0314 	add.w	r3, r4, #20
 8007454:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007458:	f109 0314 	add.w	r3, r9, #20
 800745c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007460:	9202      	str	r2, [sp, #8]
 8007462:	1b3a      	subs	r2, r7, r4
 8007464:	3a15      	subs	r2, #21
 8007466:	f022 0203 	bic.w	r2, r2, #3
 800746a:	3204      	adds	r2, #4
 800746c:	f104 0115 	add.w	r1, r4, #21
 8007470:	428f      	cmp	r7, r1
 8007472:	bf38      	it	cc
 8007474:	2204      	movcc	r2, #4
 8007476:	9201      	str	r2, [sp, #4]
 8007478:	9a02      	ldr	r2, [sp, #8]
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	429a      	cmp	r2, r3
 800747e:	d80c      	bhi.n	800749a <__multiply+0x9e>
 8007480:	2e00      	cmp	r6, #0
 8007482:	dd03      	ble.n	800748c <__multiply+0x90>
 8007484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007488:	2b00      	cmp	r3, #0
 800748a:	d05b      	beq.n	8007544 <__multiply+0x148>
 800748c:	6106      	str	r6, [r0, #16]
 800748e:	b005      	add	sp, #20
 8007490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007494:	f843 2b04 	str.w	r2, [r3], #4
 8007498:	e7d8      	b.n	800744c <__multiply+0x50>
 800749a:	f8b3 a000 	ldrh.w	sl, [r3]
 800749e:	f1ba 0f00 	cmp.w	sl, #0
 80074a2:	d024      	beq.n	80074ee <__multiply+0xf2>
 80074a4:	f104 0e14 	add.w	lr, r4, #20
 80074a8:	46a9      	mov	r9, r5
 80074aa:	f04f 0c00 	mov.w	ip, #0
 80074ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074b2:	f8d9 1000 	ldr.w	r1, [r9]
 80074b6:	fa1f fb82 	uxth.w	fp, r2
 80074ba:	b289      	uxth	r1, r1
 80074bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80074c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074c4:	f8d9 2000 	ldr.w	r2, [r9]
 80074c8:	4461      	add	r1, ip
 80074ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80074d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074d6:	b289      	uxth	r1, r1
 80074d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074dc:	4577      	cmp	r7, lr
 80074de:	f849 1b04 	str.w	r1, [r9], #4
 80074e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074e6:	d8e2      	bhi.n	80074ae <__multiply+0xb2>
 80074e8:	9a01      	ldr	r2, [sp, #4]
 80074ea:	f845 c002 	str.w	ip, [r5, r2]
 80074ee:	9a03      	ldr	r2, [sp, #12]
 80074f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074f4:	3304      	adds	r3, #4
 80074f6:	f1b9 0f00 	cmp.w	r9, #0
 80074fa:	d021      	beq.n	8007540 <__multiply+0x144>
 80074fc:	6829      	ldr	r1, [r5, #0]
 80074fe:	f104 0c14 	add.w	ip, r4, #20
 8007502:	46ae      	mov	lr, r5
 8007504:	f04f 0a00 	mov.w	sl, #0
 8007508:	f8bc b000 	ldrh.w	fp, [ip]
 800750c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007510:	fb09 220b 	mla	r2, r9, fp, r2
 8007514:	4452      	add	r2, sl
 8007516:	b289      	uxth	r1, r1
 8007518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800751c:	f84e 1b04 	str.w	r1, [lr], #4
 8007520:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007528:	f8be 1000 	ldrh.w	r1, [lr]
 800752c:	fb09 110a 	mla	r1, r9, sl, r1
 8007530:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007534:	4567      	cmp	r7, ip
 8007536:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800753a:	d8e5      	bhi.n	8007508 <__multiply+0x10c>
 800753c:	9a01      	ldr	r2, [sp, #4]
 800753e:	50a9      	str	r1, [r5, r2]
 8007540:	3504      	adds	r5, #4
 8007542:	e799      	b.n	8007478 <__multiply+0x7c>
 8007544:	3e01      	subs	r6, #1
 8007546:	e79b      	b.n	8007480 <__multiply+0x84>
 8007548:	08009b92 	.word	0x08009b92
 800754c:	08009ba3 	.word	0x08009ba3

08007550 <__pow5mult>:
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	4615      	mov	r5, r2
 8007556:	f012 0203 	ands.w	r2, r2, #3
 800755a:	4606      	mov	r6, r0
 800755c:	460f      	mov	r7, r1
 800755e:	d007      	beq.n	8007570 <__pow5mult+0x20>
 8007560:	4c25      	ldr	r4, [pc, #148]	; (80075f8 <__pow5mult+0xa8>)
 8007562:	3a01      	subs	r2, #1
 8007564:	2300      	movs	r3, #0
 8007566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800756a:	f7ff fe9d 	bl	80072a8 <__multadd>
 800756e:	4607      	mov	r7, r0
 8007570:	10ad      	asrs	r5, r5, #2
 8007572:	d03d      	beq.n	80075f0 <__pow5mult+0xa0>
 8007574:	69f4      	ldr	r4, [r6, #28]
 8007576:	b97c      	cbnz	r4, 8007598 <__pow5mult+0x48>
 8007578:	2010      	movs	r0, #16
 800757a:	f7fd ffad 	bl	80054d8 <malloc>
 800757e:	4602      	mov	r2, r0
 8007580:	61f0      	str	r0, [r6, #28]
 8007582:	b928      	cbnz	r0, 8007590 <__pow5mult+0x40>
 8007584:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <__pow5mult+0xac>)
 8007586:	481e      	ldr	r0, [pc, #120]	; (8007600 <__pow5mult+0xb0>)
 8007588:	f240 11b3 	movw	r1, #435	; 0x1b3
 800758c:	f000 fc1c 	bl	8007dc8 <__assert_func>
 8007590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007594:	6004      	str	r4, [r0, #0]
 8007596:	60c4      	str	r4, [r0, #12]
 8007598:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800759c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075a0:	b94c      	cbnz	r4, 80075b6 <__pow5mult+0x66>
 80075a2:	f240 2171 	movw	r1, #625	; 0x271
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ff12 	bl	80073d0 <__i2b>
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80075b2:	4604      	mov	r4, r0
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	f04f 0900 	mov.w	r9, #0
 80075ba:	07eb      	lsls	r3, r5, #31
 80075bc:	d50a      	bpl.n	80075d4 <__pow5mult+0x84>
 80075be:	4639      	mov	r1, r7
 80075c0:	4622      	mov	r2, r4
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff ff1a 	bl	80073fc <__multiply>
 80075c8:	4639      	mov	r1, r7
 80075ca:	4680      	mov	r8, r0
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fe49 	bl	8007264 <_Bfree>
 80075d2:	4647      	mov	r7, r8
 80075d4:	106d      	asrs	r5, r5, #1
 80075d6:	d00b      	beq.n	80075f0 <__pow5mult+0xa0>
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	b938      	cbnz	r0, 80075ec <__pow5mult+0x9c>
 80075dc:	4622      	mov	r2, r4
 80075de:	4621      	mov	r1, r4
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff ff0b 	bl	80073fc <__multiply>
 80075e6:	6020      	str	r0, [r4, #0]
 80075e8:	f8c0 9000 	str.w	r9, [r0]
 80075ec:	4604      	mov	r4, r0
 80075ee:	e7e4      	b.n	80075ba <__pow5mult+0x6a>
 80075f0:	4638      	mov	r0, r7
 80075f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f6:	bf00      	nop
 80075f8:	08009cf0 	.word	0x08009cf0
 80075fc:	08009b23 	.word	0x08009b23
 8007600:	08009ba3 	.word	0x08009ba3

08007604 <__lshift>:
 8007604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	460c      	mov	r4, r1
 800760a:	6849      	ldr	r1, [r1, #4]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	4607      	mov	r7, r0
 8007616:	4691      	mov	r9, r2
 8007618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800761c:	f108 0601 	add.w	r6, r8, #1
 8007620:	42b3      	cmp	r3, r6
 8007622:	db0b      	blt.n	800763c <__lshift+0x38>
 8007624:	4638      	mov	r0, r7
 8007626:	f7ff fddd 	bl	80071e4 <_Balloc>
 800762a:	4605      	mov	r5, r0
 800762c:	b948      	cbnz	r0, 8007642 <__lshift+0x3e>
 800762e:	4602      	mov	r2, r0
 8007630:	4b28      	ldr	r3, [pc, #160]	; (80076d4 <__lshift+0xd0>)
 8007632:	4829      	ldr	r0, [pc, #164]	; (80076d8 <__lshift+0xd4>)
 8007634:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007638:	f000 fbc6 	bl	8007dc8 <__assert_func>
 800763c:	3101      	adds	r1, #1
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	e7ee      	b.n	8007620 <__lshift+0x1c>
 8007642:	2300      	movs	r3, #0
 8007644:	f100 0114 	add.w	r1, r0, #20
 8007648:	f100 0210 	add.w	r2, r0, #16
 800764c:	4618      	mov	r0, r3
 800764e:	4553      	cmp	r3, sl
 8007650:	db33      	blt.n	80076ba <__lshift+0xb6>
 8007652:	6920      	ldr	r0, [r4, #16]
 8007654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007658:	f104 0314 	add.w	r3, r4, #20
 800765c:	f019 091f 	ands.w	r9, r9, #31
 8007660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007664:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007668:	d02b      	beq.n	80076c2 <__lshift+0xbe>
 800766a:	f1c9 0e20 	rsb	lr, r9, #32
 800766e:	468a      	mov	sl, r1
 8007670:	2200      	movs	r2, #0
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	fa00 f009 	lsl.w	r0, r0, r9
 8007678:	4310      	orrs	r0, r2
 800767a:	f84a 0b04 	str.w	r0, [sl], #4
 800767e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007682:	459c      	cmp	ip, r3
 8007684:	fa22 f20e 	lsr.w	r2, r2, lr
 8007688:	d8f3      	bhi.n	8007672 <__lshift+0x6e>
 800768a:	ebac 0304 	sub.w	r3, ip, r4
 800768e:	3b15      	subs	r3, #21
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	3304      	adds	r3, #4
 8007696:	f104 0015 	add.w	r0, r4, #21
 800769a:	4584      	cmp	ip, r0
 800769c:	bf38      	it	cc
 800769e:	2304      	movcc	r3, #4
 80076a0:	50ca      	str	r2, [r1, r3]
 80076a2:	b10a      	cbz	r2, 80076a8 <__lshift+0xa4>
 80076a4:	f108 0602 	add.w	r6, r8, #2
 80076a8:	3e01      	subs	r6, #1
 80076aa:	4638      	mov	r0, r7
 80076ac:	612e      	str	r6, [r5, #16]
 80076ae:	4621      	mov	r1, r4
 80076b0:	f7ff fdd8 	bl	8007264 <_Bfree>
 80076b4:	4628      	mov	r0, r5
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80076be:	3301      	adds	r3, #1
 80076c0:	e7c5      	b.n	800764e <__lshift+0x4a>
 80076c2:	3904      	subs	r1, #4
 80076c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80076cc:	459c      	cmp	ip, r3
 80076ce:	d8f9      	bhi.n	80076c4 <__lshift+0xc0>
 80076d0:	e7ea      	b.n	80076a8 <__lshift+0xa4>
 80076d2:	bf00      	nop
 80076d4:	08009b92 	.word	0x08009b92
 80076d8:	08009ba3 	.word	0x08009ba3

080076dc <__mcmp>:
 80076dc:	b530      	push	{r4, r5, lr}
 80076de:	6902      	ldr	r2, [r0, #16]
 80076e0:	690c      	ldr	r4, [r1, #16]
 80076e2:	1b12      	subs	r2, r2, r4
 80076e4:	d10e      	bne.n	8007704 <__mcmp+0x28>
 80076e6:	f100 0314 	add.w	r3, r0, #20
 80076ea:	3114      	adds	r1, #20
 80076ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076fc:	42a5      	cmp	r5, r4
 80076fe:	d003      	beq.n	8007708 <__mcmp+0x2c>
 8007700:	d305      	bcc.n	800770e <__mcmp+0x32>
 8007702:	2201      	movs	r2, #1
 8007704:	4610      	mov	r0, r2
 8007706:	bd30      	pop	{r4, r5, pc}
 8007708:	4283      	cmp	r3, r0
 800770a:	d3f3      	bcc.n	80076f4 <__mcmp+0x18>
 800770c:	e7fa      	b.n	8007704 <__mcmp+0x28>
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	e7f7      	b.n	8007704 <__mcmp+0x28>

08007714 <__mdiff>:
 8007714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	460c      	mov	r4, r1
 800771a:	4606      	mov	r6, r0
 800771c:	4611      	mov	r1, r2
 800771e:	4620      	mov	r0, r4
 8007720:	4690      	mov	r8, r2
 8007722:	f7ff ffdb 	bl	80076dc <__mcmp>
 8007726:	1e05      	subs	r5, r0, #0
 8007728:	d110      	bne.n	800774c <__mdiff+0x38>
 800772a:	4629      	mov	r1, r5
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff fd59 	bl	80071e4 <_Balloc>
 8007732:	b930      	cbnz	r0, 8007742 <__mdiff+0x2e>
 8007734:	4b3a      	ldr	r3, [pc, #232]	; (8007820 <__mdiff+0x10c>)
 8007736:	4602      	mov	r2, r0
 8007738:	f240 2137 	movw	r1, #567	; 0x237
 800773c:	4839      	ldr	r0, [pc, #228]	; (8007824 <__mdiff+0x110>)
 800773e:	f000 fb43 	bl	8007dc8 <__assert_func>
 8007742:	2301      	movs	r3, #1
 8007744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774c:	bfa4      	itt	ge
 800774e:	4643      	movge	r3, r8
 8007750:	46a0      	movge	r8, r4
 8007752:	4630      	mov	r0, r6
 8007754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007758:	bfa6      	itte	ge
 800775a:	461c      	movge	r4, r3
 800775c:	2500      	movge	r5, #0
 800775e:	2501      	movlt	r5, #1
 8007760:	f7ff fd40 	bl	80071e4 <_Balloc>
 8007764:	b920      	cbnz	r0, 8007770 <__mdiff+0x5c>
 8007766:	4b2e      	ldr	r3, [pc, #184]	; (8007820 <__mdiff+0x10c>)
 8007768:	4602      	mov	r2, r0
 800776a:	f240 2145 	movw	r1, #581	; 0x245
 800776e:	e7e5      	b.n	800773c <__mdiff+0x28>
 8007770:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007774:	6926      	ldr	r6, [r4, #16]
 8007776:	60c5      	str	r5, [r0, #12]
 8007778:	f104 0914 	add.w	r9, r4, #20
 800777c:	f108 0514 	add.w	r5, r8, #20
 8007780:	f100 0e14 	add.w	lr, r0, #20
 8007784:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007788:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800778c:	f108 0210 	add.w	r2, r8, #16
 8007790:	46f2      	mov	sl, lr
 8007792:	2100      	movs	r1, #0
 8007794:	f859 3b04 	ldr.w	r3, [r9], #4
 8007798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800779c:	fa11 f88b 	uxtah	r8, r1, fp
 80077a0:	b299      	uxth	r1, r3
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	eba8 0801 	sub.w	r8, r8, r1
 80077a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077b0:	fa1f f888 	uxth.w	r8, r8
 80077b4:	1419      	asrs	r1, r3, #16
 80077b6:	454e      	cmp	r6, r9
 80077b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077bc:	f84a 3b04 	str.w	r3, [sl], #4
 80077c0:	d8e8      	bhi.n	8007794 <__mdiff+0x80>
 80077c2:	1b33      	subs	r3, r6, r4
 80077c4:	3b15      	subs	r3, #21
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	3304      	adds	r3, #4
 80077cc:	3415      	adds	r4, #21
 80077ce:	42a6      	cmp	r6, r4
 80077d0:	bf38      	it	cc
 80077d2:	2304      	movcc	r3, #4
 80077d4:	441d      	add	r5, r3
 80077d6:	4473      	add	r3, lr
 80077d8:	469e      	mov	lr, r3
 80077da:	462e      	mov	r6, r5
 80077dc:	4566      	cmp	r6, ip
 80077de:	d30e      	bcc.n	80077fe <__mdiff+0xea>
 80077e0:	f10c 0203 	add.w	r2, ip, #3
 80077e4:	1b52      	subs	r2, r2, r5
 80077e6:	f022 0203 	bic.w	r2, r2, #3
 80077ea:	3d03      	subs	r5, #3
 80077ec:	45ac      	cmp	ip, r5
 80077ee:	bf38      	it	cc
 80077f0:	2200      	movcc	r2, #0
 80077f2:	4413      	add	r3, r2
 80077f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077f8:	b17a      	cbz	r2, 800781a <__mdiff+0x106>
 80077fa:	6107      	str	r7, [r0, #16]
 80077fc:	e7a4      	b.n	8007748 <__mdiff+0x34>
 80077fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007802:	fa11 f288 	uxtah	r2, r1, r8
 8007806:	1414      	asrs	r4, r2, #16
 8007808:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800780c:	b292      	uxth	r2, r2
 800780e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007812:	f84e 2b04 	str.w	r2, [lr], #4
 8007816:	1421      	asrs	r1, r4, #16
 8007818:	e7e0      	b.n	80077dc <__mdiff+0xc8>
 800781a:	3f01      	subs	r7, #1
 800781c:	e7ea      	b.n	80077f4 <__mdiff+0xe0>
 800781e:	bf00      	nop
 8007820:	08009b92 	.word	0x08009b92
 8007824:	08009ba3 	.word	0x08009ba3

08007828 <__d2b>:
 8007828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800782c:	460f      	mov	r7, r1
 800782e:	2101      	movs	r1, #1
 8007830:	ec59 8b10 	vmov	r8, r9, d0
 8007834:	4616      	mov	r6, r2
 8007836:	f7ff fcd5 	bl	80071e4 <_Balloc>
 800783a:	4604      	mov	r4, r0
 800783c:	b930      	cbnz	r0, 800784c <__d2b+0x24>
 800783e:	4602      	mov	r2, r0
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <__d2b+0xac>)
 8007842:	4825      	ldr	r0, [pc, #148]	; (80078d8 <__d2b+0xb0>)
 8007844:	f240 310f 	movw	r1, #783	; 0x30f
 8007848:	f000 fabe 	bl	8007dc8 <__assert_func>
 800784c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007854:	bb2d      	cbnz	r5, 80078a2 <__d2b+0x7a>
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	f1b8 0300 	subs.w	r3, r8, #0
 800785c:	d026      	beq.n	80078ac <__d2b+0x84>
 800785e:	4668      	mov	r0, sp
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	f7ff fd87 	bl	8007374 <__lo0bits>
 8007866:	e9dd 1200 	ldrd	r1, r2, [sp]
 800786a:	b1e8      	cbz	r0, 80078a8 <__d2b+0x80>
 800786c:	f1c0 0320 	rsb	r3, r0, #32
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	430b      	orrs	r3, r1
 8007876:	40c2      	lsrs	r2, r0
 8007878:	6163      	str	r3, [r4, #20]
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	61a3      	str	r3, [r4, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf14      	ite	ne
 8007884:	2202      	movne	r2, #2
 8007886:	2201      	moveq	r2, #1
 8007888:	6122      	str	r2, [r4, #16]
 800788a:	b1bd      	cbz	r5, 80078bc <__d2b+0x94>
 800788c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007890:	4405      	add	r5, r0
 8007892:	603d      	str	r5, [r7, #0]
 8007894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007898:	6030      	str	r0, [r6, #0]
 800789a:	4620      	mov	r0, r4
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a6:	e7d6      	b.n	8007856 <__d2b+0x2e>
 80078a8:	6161      	str	r1, [r4, #20]
 80078aa:	e7e7      	b.n	800787c <__d2b+0x54>
 80078ac:	a801      	add	r0, sp, #4
 80078ae:	f7ff fd61 	bl	8007374 <__lo0bits>
 80078b2:	9b01      	ldr	r3, [sp, #4]
 80078b4:	6163      	str	r3, [r4, #20]
 80078b6:	3020      	adds	r0, #32
 80078b8:	2201      	movs	r2, #1
 80078ba:	e7e5      	b.n	8007888 <__d2b+0x60>
 80078bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078c4:	6038      	str	r0, [r7, #0]
 80078c6:	6918      	ldr	r0, [r3, #16]
 80078c8:	f7ff fd34 	bl	8007334 <__hi0bits>
 80078cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078d0:	e7e2      	b.n	8007898 <__d2b+0x70>
 80078d2:	bf00      	nop
 80078d4:	08009b92 	.word	0x08009b92
 80078d8:	08009ba3 	.word	0x08009ba3

080078dc <__sfputc_r>:
 80078dc:	6893      	ldr	r3, [r2, #8]
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	b410      	push	{r4}
 80078e4:	6093      	str	r3, [r2, #8]
 80078e6:	da08      	bge.n	80078fa <__sfputc_r+0x1e>
 80078e8:	6994      	ldr	r4, [r2, #24]
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	db01      	blt.n	80078f2 <__sfputc_r+0x16>
 80078ee:	290a      	cmp	r1, #10
 80078f0:	d103      	bne.n	80078fa <__sfputc_r+0x1e>
 80078f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f6:	f7fe bc6a 	b.w	80061ce <__swbuf_r>
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	1c58      	adds	r0, r3, #1
 80078fe:	6010      	str	r0, [r2, #0]
 8007900:	7019      	strb	r1, [r3, #0]
 8007902:	4608      	mov	r0, r1
 8007904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007908:	4770      	bx	lr

0800790a <__sfputs_r>:
 800790a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	4614      	mov	r4, r2
 8007912:	18d5      	adds	r5, r2, r3
 8007914:	42ac      	cmp	r4, r5
 8007916:	d101      	bne.n	800791c <__sfputs_r+0x12>
 8007918:	2000      	movs	r0, #0
 800791a:	e007      	b.n	800792c <__sfputs_r+0x22>
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	463a      	mov	r2, r7
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffda 	bl	80078dc <__sfputc_r>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d1f3      	bne.n	8007914 <__sfputs_r+0xa>
 800792c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007930 <_vfiprintf_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	460d      	mov	r5, r1
 8007936:	b09d      	sub	sp, #116	; 0x74
 8007938:	4614      	mov	r4, r2
 800793a:	4698      	mov	r8, r3
 800793c:	4606      	mov	r6, r0
 800793e:	b118      	cbz	r0, 8007948 <_vfiprintf_r+0x18>
 8007940:	6a03      	ldr	r3, [r0, #32]
 8007942:	b90b      	cbnz	r3, 8007948 <_vfiprintf_r+0x18>
 8007944:	f7fe fb5c 	bl	8006000 <__sinit>
 8007948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794a:	07d9      	lsls	r1, r3, #31
 800794c:	d405      	bmi.n	800795a <_vfiprintf_r+0x2a>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d402      	bmi.n	800795a <_vfiprintf_r+0x2a>
 8007954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007956:	f7fe fd6d 	bl	8006434 <__retarget_lock_acquire_recursive>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	071b      	lsls	r3, r3, #28
 800795e:	d501      	bpl.n	8007964 <_vfiprintf_r+0x34>
 8007960:	692b      	ldr	r3, [r5, #16]
 8007962:	b99b      	cbnz	r3, 800798c <_vfiprintf_r+0x5c>
 8007964:	4629      	mov	r1, r5
 8007966:	4630      	mov	r0, r6
 8007968:	f7fe fc6e 	bl	8006248 <__swsetup_r>
 800796c:	b170      	cbz	r0, 800798c <_vfiprintf_r+0x5c>
 800796e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007970:	07dc      	lsls	r4, r3, #31
 8007972:	d504      	bpl.n	800797e <_vfiprintf_r+0x4e>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b01d      	add	sp, #116	; 0x74
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d4f7      	bmi.n	8007974 <_vfiprintf_r+0x44>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f7fe fd56 	bl	8006436 <__retarget_lock_release_recursive>
 800798a:	e7f3      	b.n	8007974 <_vfiprintf_r+0x44>
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b50 <_vfiprintf_r+0x220>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	4623      	mov	r3, r4
 80079aa:	469a      	mov	sl, r3
 80079ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b0:	b10a      	cbz	r2, 80079b6 <_vfiprintf_r+0x86>
 80079b2:	2a25      	cmp	r2, #37	; 0x25
 80079b4:	d1f9      	bne.n	80079aa <_vfiprintf_r+0x7a>
 80079b6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ba:	d00b      	beq.n	80079d4 <_vfiprintf_r+0xa4>
 80079bc:	465b      	mov	r3, fp
 80079be:	4622      	mov	r2, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffa1 	bl	800790a <__sfputs_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f000 80a9 	beq.w	8007b20 <_vfiprintf_r+0x1f0>
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	445a      	add	r2, fp
 80079d2:	9209      	str	r2, [sp, #36]	; 0x24
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a1 	beq.w	8007b20 <_vfiprintf_r+0x1f0>
 80079de:	2300      	movs	r3, #0
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f4:	931a      	str	r3, [sp, #104]	; 0x68
 80079f6:	4654      	mov	r4, sl
 80079f8:	2205      	movs	r2, #5
 80079fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fe:	4854      	ldr	r0, [pc, #336]	; (8007b50 <_vfiprintf_r+0x220>)
 8007a00:	f7f8 fbe6 	bl	80001d0 <memchr>
 8007a04:	9a04      	ldr	r2, [sp, #16]
 8007a06:	b9d8      	cbnz	r0, 8007a40 <_vfiprintf_r+0x110>
 8007a08:	06d1      	lsls	r1, r2, #27
 8007a0a:	bf44      	itt	mi
 8007a0c:	2320      	movmi	r3, #32
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a12:	0713      	lsls	r3, r2, #28
 8007a14:	bf44      	itt	mi
 8007a16:	232b      	movmi	r3, #43	; 0x2b
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b2a      	cmp	r3, #42	; 0x2a
 8007a22:	d015      	beq.n	8007a50 <_vfiprintf_r+0x120>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	4654      	mov	r4, sl
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94d      	bls.n	8007ad6 <_vfiprintf_r+0x1a6>
 8007a3a:	b1b0      	cbz	r0, 8007a6a <_vfiprintf_r+0x13a>
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	e014      	b.n	8007a6a <_vfiprintf_r+0x13a>
 8007a40:	eba0 0308 	sub.w	r3, r0, r8
 8007a44:	fa09 f303 	lsl.w	r3, r9, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	46a2      	mov	sl, r4
 8007a4e:	e7d2      	b.n	80079f6 <_vfiprintf_r+0xc6>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	1d19      	adds	r1, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9103      	str	r1, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbb      	ittet	lt
 8007a5c:	425b      	neglt	r3, r3
 8007a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a62:	9307      	strge	r3, [sp, #28]
 8007a64:	9307      	strlt	r3, [sp, #28]
 8007a66:	bfb8      	it	lt
 8007a68:	9204      	strlt	r2, [sp, #16]
 8007a6a:	7823      	ldrb	r3, [r4, #0]
 8007a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6e:	d10c      	bne.n	8007a8a <_vfiprintf_r+0x15a>
 8007a70:	7863      	ldrb	r3, [r4, #1]
 8007a72:	2b2a      	cmp	r3, #42	; 0x2a
 8007a74:	d134      	bne.n	8007ae0 <_vfiprintf_r+0x1b0>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9203      	str	r2, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfb8      	it	lt
 8007a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a86:	3402      	adds	r4, #2
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b60 <_vfiprintf_r+0x230>
 8007a8e:	7821      	ldrb	r1, [r4, #0]
 8007a90:	2203      	movs	r2, #3
 8007a92:	4650      	mov	r0, sl
 8007a94:	f7f8 fb9c 	bl	80001d0 <memchr>
 8007a98:	b138      	cbz	r0, 8007aaa <_vfiprintf_r+0x17a>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	eba0 000a 	sub.w	r0, r0, sl
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	4082      	lsls	r2, r0
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4829      	ldr	r0, [pc, #164]	; (8007b54 <_vfiprintf_r+0x224>)
 8007ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab4:	2206      	movs	r2, #6
 8007ab6:	f7f8 fb8b 	bl	80001d0 <memchr>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d03f      	beq.n	8007b3e <_vfiprintf_r+0x20e>
 8007abe:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <_vfiprintf_r+0x228>)
 8007ac0:	bb1b      	cbnz	r3, 8007b0a <_vfiprintf_r+0x1da>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	3308      	adds	r3, #8
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	443b      	add	r3, r7
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	e768      	b.n	80079a8 <_vfiprintf_r+0x78>
 8007ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ada:	460c      	mov	r4, r1
 8007adc:	2001      	movs	r0, #1
 8007ade:	e7a6      	b.n	8007a2e <_vfiprintf_r+0xfe>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	3401      	adds	r4, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	4620      	mov	r0, r4
 8007aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af2:	3a30      	subs	r2, #48	; 0x30
 8007af4:	2a09      	cmp	r2, #9
 8007af6:	d903      	bls.n	8007b00 <_vfiprintf_r+0x1d0>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0c6      	beq.n	8007a8a <_vfiprintf_r+0x15a>
 8007afc:	9105      	str	r1, [sp, #20]
 8007afe:	e7c4      	b.n	8007a8a <_vfiprintf_r+0x15a>
 8007b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b04:	4604      	mov	r4, r0
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7f0      	b.n	8007aec <_vfiprintf_r+0x1bc>
 8007b0a:	ab03      	add	r3, sp, #12
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	462a      	mov	r2, r5
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <_vfiprintf_r+0x22c>)
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7fd fe33 	bl	8005780 <_printf_float>
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	1c78      	adds	r0, r7, #1
 8007b1e:	d1d6      	bne.n	8007ace <_vfiprintf_r+0x19e>
 8007b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b22:	07d9      	lsls	r1, r3, #31
 8007b24:	d405      	bmi.n	8007b32 <_vfiprintf_r+0x202>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	059a      	lsls	r2, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_vfiprintf_r+0x202>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f7fe fc82 	bl	8006436 <__retarget_lock_release_recursive>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	065b      	lsls	r3, r3, #25
 8007b36:	f53f af1d 	bmi.w	8007974 <_vfiprintf_r+0x44>
 8007b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3c:	e71c      	b.n	8007978 <_vfiprintf_r+0x48>
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	462a      	mov	r2, r5
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <_vfiprintf_r+0x22c>)
 8007b46:	a904      	add	r1, sp, #16
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7fe f8bd 	bl	8005cc8 <_printf_i>
 8007b4e:	e7e4      	b.n	8007b1a <_vfiprintf_r+0x1ea>
 8007b50:	08009cfc 	.word	0x08009cfc
 8007b54:	08009d06 	.word	0x08009d06
 8007b58:	08005781 	.word	0x08005781
 8007b5c:	0800790b 	.word	0x0800790b
 8007b60:	08009d02 	.word	0x08009d02

08007b64 <__sflush_r>:
 8007b64:	898a      	ldrh	r2, [r1, #12]
 8007b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	0710      	lsls	r0, r2, #28
 8007b6e:	460c      	mov	r4, r1
 8007b70:	d458      	bmi.n	8007c24 <__sflush_r+0xc0>
 8007b72:	684b      	ldr	r3, [r1, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dc05      	bgt.n	8007b84 <__sflush_r+0x20>
 8007b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dc02      	bgt.n	8007b84 <__sflush_r+0x20>
 8007b7e:	2000      	movs	r0, #0
 8007b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	d0f9      	beq.n	8007b7e <__sflush_r+0x1a>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b90:	682f      	ldr	r7, [r5, #0]
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	d032      	beq.n	8007bfe <__sflush_r+0x9a>
 8007b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	075a      	lsls	r2, r3, #29
 8007b9e:	d505      	bpl.n	8007bac <__sflush_r+0x48>
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	1ac0      	subs	r0, r0, r3
 8007ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ba6:	b10b      	cbz	r3, 8007bac <__sflush_r+0x48>
 8007ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007baa:	1ac0      	subs	r0, r0, r3
 8007bac:	2300      	movs	r3, #0
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bb2:	6a21      	ldr	r1, [r4, #32]
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b0      	blx	r6
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	d106      	bne.n	8007bcc <__sflush_r+0x68>
 8007bbe:	6829      	ldr	r1, [r5, #0]
 8007bc0:	291d      	cmp	r1, #29
 8007bc2:	d82b      	bhi.n	8007c1c <__sflush_r+0xb8>
 8007bc4:	4a29      	ldr	r2, [pc, #164]	; (8007c6c <__sflush_r+0x108>)
 8007bc6:	410a      	asrs	r2, r1
 8007bc8:	07d6      	lsls	r6, r2, #31
 8007bca:	d427      	bmi.n	8007c1c <__sflush_r+0xb8>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	6062      	str	r2, [r4, #4]
 8007bd0:	04d9      	lsls	r1, r3, #19
 8007bd2:	6922      	ldr	r2, [r4, #16]
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	d504      	bpl.n	8007be2 <__sflush_r+0x7e>
 8007bd8:	1c42      	adds	r2, r0, #1
 8007bda:	d101      	bne.n	8007be0 <__sflush_r+0x7c>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b903      	cbnz	r3, 8007be2 <__sflush_r+0x7e>
 8007be0:	6560      	str	r0, [r4, #84]	; 0x54
 8007be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007be4:	602f      	str	r7, [r5, #0]
 8007be6:	2900      	cmp	r1, #0
 8007be8:	d0c9      	beq.n	8007b7e <__sflush_r+0x1a>
 8007bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	d002      	beq.n	8007bf8 <__sflush_r+0x94>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7ff faaa 	bl	800714c <_free_r>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8007bfc:	e7c0      	b.n	8007b80 <__sflush_r+0x1c>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b0      	blx	r6
 8007c04:	1c41      	adds	r1, r0, #1
 8007c06:	d1c8      	bne.n	8007b9a <__sflush_r+0x36>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0c5      	beq.n	8007b9a <__sflush_r+0x36>
 8007c0e:	2b1d      	cmp	r3, #29
 8007c10:	d001      	beq.n	8007c16 <__sflush_r+0xb2>
 8007c12:	2b16      	cmp	r3, #22
 8007c14:	d101      	bne.n	8007c1a <__sflush_r+0xb6>
 8007c16:	602f      	str	r7, [r5, #0]
 8007c18:	e7b1      	b.n	8007b7e <__sflush_r+0x1a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	e7ad      	b.n	8007b80 <__sflush_r+0x1c>
 8007c24:	690f      	ldr	r7, [r1, #16]
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	d0a9      	beq.n	8007b7e <__sflush_r+0x1a>
 8007c2a:	0793      	lsls	r3, r2, #30
 8007c2c:	680e      	ldr	r6, [r1, #0]
 8007c2e:	bf08      	it	eq
 8007c30:	694b      	ldreq	r3, [r1, #20]
 8007c32:	600f      	str	r7, [r1, #0]
 8007c34:	bf18      	it	ne
 8007c36:	2300      	movne	r3, #0
 8007c38:	eba6 0807 	sub.w	r8, r6, r7
 8007c3c:	608b      	str	r3, [r1, #8]
 8007c3e:	f1b8 0f00 	cmp.w	r8, #0
 8007c42:	dd9c      	ble.n	8007b7e <__sflush_r+0x1a>
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c48:	4643      	mov	r3, r8
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b0      	blx	r6
 8007c50:	2800      	cmp	r0, #0
 8007c52:	dc06      	bgt.n	8007c62 <__sflush_r+0xfe>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	e78e      	b.n	8007b80 <__sflush_r+0x1c>
 8007c62:	4407      	add	r7, r0
 8007c64:	eba8 0800 	sub.w	r8, r8, r0
 8007c68:	e7e9      	b.n	8007c3e <__sflush_r+0xda>
 8007c6a:	bf00      	nop
 8007c6c:	dfbffffe 	.word	0xdfbffffe

08007c70 <_fflush_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	690b      	ldr	r3, [r1, #16]
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	b913      	cbnz	r3, 8007c80 <_fflush_r+0x10>
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	b118      	cbz	r0, 8007c8a <_fflush_r+0x1a>
 8007c82:	6a03      	ldr	r3, [r0, #32]
 8007c84:	b90b      	cbnz	r3, 8007c8a <_fflush_r+0x1a>
 8007c86:	f7fe f9bb 	bl	8006000 <__sinit>
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f3      	beq.n	8007c7a <_fflush_r+0xa>
 8007c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c94:	07d0      	lsls	r0, r2, #31
 8007c96:	d404      	bmi.n	8007ca2 <_fflush_r+0x32>
 8007c98:	0599      	lsls	r1, r3, #22
 8007c9a:	d402      	bmi.n	8007ca2 <_fflush_r+0x32>
 8007c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9e:	f7fe fbc9 	bl	8006434 <__retarget_lock_acquire_recursive>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7ff ff5d 	bl	8007b64 <__sflush_r>
 8007caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	4605      	mov	r5, r0
 8007cb0:	d4e4      	bmi.n	8007c7c <_fflush_r+0xc>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	059b      	lsls	r3, r3, #22
 8007cb6:	d4e1      	bmi.n	8007c7c <_fflush_r+0xc>
 8007cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cba:	f7fe fbbc 	bl	8006436 <__retarget_lock_release_recursive>
 8007cbe:	e7dd      	b.n	8007c7c <_fflush_r+0xc>

08007cc0 <__swhatbuf_r>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	b096      	sub	sp, #88	; 0x58
 8007ccc:	4615      	mov	r5, r2
 8007cce:	461e      	mov	r6, r3
 8007cd0:	da0d      	bge.n	8007cee <__swhatbuf_r+0x2e>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cd8:	f04f 0100 	mov.w	r1, #0
 8007cdc:	bf0c      	ite	eq
 8007cde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ce2:	2340      	movne	r3, #64	; 0x40
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	6031      	str	r1, [r6, #0]
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	b016      	add	sp, #88	; 0x58
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	466a      	mov	r2, sp
 8007cf0:	f000 f848 	bl	8007d84 <_fstat_r>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	dbec      	blt.n	8007cd2 <__swhatbuf_r+0x12>
 8007cf8:	9901      	ldr	r1, [sp, #4]
 8007cfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d02:	4259      	negs	r1, r3
 8007d04:	4159      	adcs	r1, r3
 8007d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0a:	e7eb      	b.n	8007ce4 <__swhatbuf_r+0x24>

08007d0c <__smakebuf_r>:
 8007d0c:	898b      	ldrh	r3, [r1, #12]
 8007d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d10:	079d      	lsls	r5, r3, #30
 8007d12:	4606      	mov	r6, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	d507      	bpl.n	8007d28 <__smakebuf_r+0x1c>
 8007d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	6123      	str	r3, [r4, #16]
 8007d20:	2301      	movs	r3, #1
 8007d22:	6163      	str	r3, [r4, #20]
 8007d24:	b002      	add	sp, #8
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	ab01      	add	r3, sp, #4
 8007d2a:	466a      	mov	r2, sp
 8007d2c:	f7ff ffc8 	bl	8007cc0 <__swhatbuf_r>
 8007d30:	9900      	ldr	r1, [sp, #0]
 8007d32:	4605      	mov	r5, r0
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7fd fbf7 	bl	8005528 <_malloc_r>
 8007d3a:	b948      	cbnz	r0, 8007d50 <__smakebuf_r+0x44>
 8007d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d40:	059a      	lsls	r2, r3, #22
 8007d42:	d4ef      	bmi.n	8007d24 <__smakebuf_r+0x18>
 8007d44:	f023 0303 	bic.w	r3, r3, #3
 8007d48:	f043 0302 	orr.w	r3, r3, #2
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	e7e3      	b.n	8007d18 <__smakebuf_r+0xc>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	6020      	str	r0, [r4, #0]
 8007d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	6163      	str	r3, [r4, #20]
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	6120      	str	r0, [r4, #16]
 8007d62:	b15b      	cbz	r3, 8007d7c <__smakebuf_r+0x70>
 8007d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f000 f81d 	bl	8007da8 <_isatty_r>
 8007d6e:	b128      	cbz	r0, 8007d7c <__smakebuf_r+0x70>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	431d      	orrs	r5, r3
 8007d80:	81a5      	strh	r5, [r4, #12]
 8007d82:	e7cf      	b.n	8007d24 <__smakebuf_r+0x18>

08007d84 <_fstat_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	; (8007da4 <_fstat_r+0x20>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	f7f9 fb36 	bl	8001402 <_fstat>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d102      	bne.n	8007da0 <_fstat_r+0x1c>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	b103      	cbz	r3, 8007da0 <_fstat_r+0x1c>
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	20000b10 	.word	0x20000b10

08007da8 <_isatty_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_isatty_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7f9 fb2a 	bl	800140c <_isatty>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_isatty_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_isatty_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000b10 	.word	0x20000b10

08007dc8 <__assert_func>:
 8007dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dca:	4614      	mov	r4, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <__assert_func+0x2c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	68d8      	ldr	r0, [r3, #12]
 8007dd6:	b14c      	cbz	r4, 8007dec <__assert_func+0x24>
 8007dd8:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <__assert_func+0x30>)
 8007dda:	9100      	str	r1, [sp, #0]
 8007ddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007de0:	4906      	ldr	r1, [pc, #24]	; (8007dfc <__assert_func+0x34>)
 8007de2:	462b      	mov	r3, r5
 8007de4:	f000 f82e 	bl	8007e44 <fiprintf>
 8007de8:	f000 f83e 	bl	8007e68 <abort>
 8007dec:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <__assert_func+0x38>)
 8007dee:	461c      	mov	r4, r3
 8007df0:	e7f3      	b.n	8007dda <__assert_func+0x12>
 8007df2:	bf00      	nop
 8007df4:	2000069c 	.word	0x2000069c
 8007df8:	08009d17 	.word	0x08009d17
 8007dfc:	08009d24 	.word	0x08009d24
 8007e00:	08008212 	.word	0x08008212

08007e04 <__ascii_mbtowc>:
 8007e04:	b082      	sub	sp, #8
 8007e06:	b901      	cbnz	r1, 8007e0a <__ascii_mbtowc+0x6>
 8007e08:	a901      	add	r1, sp, #4
 8007e0a:	b142      	cbz	r2, 8007e1e <__ascii_mbtowc+0x1a>
 8007e0c:	b14b      	cbz	r3, 8007e22 <__ascii_mbtowc+0x1e>
 8007e0e:	7813      	ldrb	r3, [r2, #0]
 8007e10:	600b      	str	r3, [r1, #0]
 8007e12:	7812      	ldrb	r2, [r2, #0]
 8007e14:	1e10      	subs	r0, r2, #0
 8007e16:	bf18      	it	ne
 8007e18:	2001      	movne	r0, #1
 8007e1a:	b002      	add	sp, #8
 8007e1c:	4770      	bx	lr
 8007e1e:	4610      	mov	r0, r2
 8007e20:	e7fb      	b.n	8007e1a <__ascii_mbtowc+0x16>
 8007e22:	f06f 0001 	mvn.w	r0, #1
 8007e26:	e7f8      	b.n	8007e1a <__ascii_mbtowc+0x16>

08007e28 <__ascii_wctomb>:
 8007e28:	b149      	cbz	r1, 8007e3e <__ascii_wctomb+0x16>
 8007e2a:	2aff      	cmp	r2, #255	; 0xff
 8007e2c:	bf85      	ittet	hi
 8007e2e:	238a      	movhi	r3, #138	; 0x8a
 8007e30:	6003      	strhi	r3, [r0, #0]
 8007e32:	700a      	strbls	r2, [r1, #0]
 8007e34:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e38:	bf98      	it	ls
 8007e3a:	2001      	movls	r0, #1
 8007e3c:	4770      	bx	lr
 8007e3e:	4608      	mov	r0, r1
 8007e40:	4770      	bx	lr
	...

08007e44 <fiprintf>:
 8007e44:	b40e      	push	{r1, r2, r3}
 8007e46:	b503      	push	{r0, r1, lr}
 8007e48:	4601      	mov	r1, r0
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	4805      	ldr	r0, [pc, #20]	; (8007e64 <fiprintf+0x20>)
 8007e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e52:	6800      	ldr	r0, [r0, #0]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	f7ff fd6b 	bl	8007930 <_vfiprintf_r>
 8007e5a:	b002      	add	sp, #8
 8007e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e60:	b003      	add	sp, #12
 8007e62:	4770      	bx	lr
 8007e64:	2000069c 	.word	0x2000069c

08007e68 <abort>:
 8007e68:	b508      	push	{r3, lr}
 8007e6a:	2006      	movs	r0, #6
 8007e6c:	f000 f82c 	bl	8007ec8 <raise>
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7f9 faaf 	bl	80013d4 <_exit>

08007e76 <_raise_r>:
 8007e76:	291f      	cmp	r1, #31
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	d904      	bls.n	8007e8a <_raise_r+0x14>
 8007e80:	2316      	movs	r3, #22
 8007e82:	6003      	str	r3, [r0, #0]
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	bd38      	pop	{r3, r4, r5, pc}
 8007e8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e8c:	b112      	cbz	r2, 8007e94 <_raise_r+0x1e>
 8007e8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e92:	b94b      	cbnz	r3, 8007ea8 <_raise_r+0x32>
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 f831 	bl	8007efc <_getpid_r>
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea4:	f000 b818 	b.w	8007ed8 <_kill_r>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d00a      	beq.n	8007ec2 <_raise_r+0x4c>
 8007eac:	1c59      	adds	r1, r3, #1
 8007eae:	d103      	bne.n	8007eb8 <_raise_r+0x42>
 8007eb0:	2316      	movs	r3, #22
 8007eb2:	6003      	str	r3, [r0, #0]
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	e7e7      	b.n	8007e88 <_raise_r+0x12>
 8007eb8:	2400      	movs	r4, #0
 8007eba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	4798      	blx	r3
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e7e0      	b.n	8007e88 <_raise_r+0x12>
	...

08007ec8 <raise>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <raise+0xc>)
 8007eca:	4601      	mov	r1, r0
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f7ff bfd2 	b.w	8007e76 <_raise_r>
 8007ed2:	bf00      	nop
 8007ed4:	2000069c 	.word	0x2000069c

08007ed8 <_kill_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d07      	ldr	r5, [pc, #28]	; (8007ef8 <_kill_r+0x20>)
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	f7f9 fa6d 	bl	80013c4 <_kill>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	d102      	bne.n	8007ef4 <_kill_r+0x1c>
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	b103      	cbz	r3, 8007ef4 <_kill_r+0x1c>
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000b10 	.word	0x20000b10

08007efc <_getpid_r>:
 8007efc:	f7f9 ba60 	b.w	80013c0 <_getpid>

08007f00 <expf>:
 8007f00:	b508      	push	{r3, lr}
 8007f02:	ed2d 8b02 	vpush	{d8}
 8007f06:	eef0 8a40 	vmov.f32	s17, s0
 8007f0a:	f000 f85f 	bl	8007fcc <__ieee754_expf>
 8007f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f12:	eeb0 0a68 	vmov.f32	s0, s17
 8007f16:	f000 f829 	bl	8007f6c <finitef>
 8007f1a:	b160      	cbz	r0, 8007f36 <expf+0x36>
 8007f1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007f5c <expf+0x5c>
 8007f20:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f28:	dd0a      	ble.n	8007f40 <expf+0x40>
 8007f2a:	f7fe fa59 	bl	80063e0 <__errno>
 8007f2e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007f60 <expf+0x60>
 8007f32:	2322      	movs	r3, #34	; 0x22
 8007f34:	6003      	str	r3, [r0, #0]
 8007f36:	eeb0 0a48 	vmov.f32	s0, s16
 8007f3a:	ecbd 8b02 	vpop	{d8}
 8007f3e:	bd08      	pop	{r3, pc}
 8007f40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007f64 <expf+0x64>
 8007f44:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4c:	d5f3      	bpl.n	8007f36 <expf+0x36>
 8007f4e:	f7fe fa47 	bl	80063e0 <__errno>
 8007f52:	2322      	movs	r3, #34	; 0x22
 8007f54:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007f68 <expf+0x68>
 8007f58:	6003      	str	r3, [r0, #0]
 8007f5a:	e7ec      	b.n	8007f36 <expf+0x36>
 8007f5c:	42b17217 	.word	0x42b17217
 8007f60:	7f800000 	.word	0x7f800000
 8007f64:	c2cff1b5 	.word	0xc2cff1b5
 8007f68:	00000000 	.word	0x00000000

08007f6c <finitef>:
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007f72:	9801      	ldr	r0, [sp, #4]
 8007f74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007f78:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007f7c:	bfac      	ite	ge
 8007f7e:	2000      	movge	r0, #0
 8007f80:	2001      	movlt	r0, #1
 8007f82:	b002      	add	sp, #8
 8007f84:	4770      	bx	lr

08007f86 <with_errnof>:
 8007f86:	b513      	push	{r0, r1, r4, lr}
 8007f88:	4604      	mov	r4, r0
 8007f8a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007f8e:	f7fe fa27 	bl	80063e0 <__errno>
 8007f92:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007f96:	6004      	str	r4, [r0, #0]
 8007f98:	b002      	add	sp, #8
 8007f9a:	bd10      	pop	{r4, pc}

08007f9c <xflowf>:
 8007f9c:	b130      	cbz	r0, 8007fac <xflowf+0x10>
 8007f9e:	eef1 7a40 	vneg.f32	s15, s0
 8007fa2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007fa6:	2022      	movs	r0, #34	; 0x22
 8007fa8:	f7ff bfed 	b.w	8007f86 <with_errnof>
 8007fac:	eef0 7a40 	vmov.f32	s15, s0
 8007fb0:	e7f7      	b.n	8007fa2 <xflowf+0x6>
	...

08007fb4 <__math_uflowf>:
 8007fb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fbc <__math_uflowf+0x8>
 8007fb8:	f7ff bff0 	b.w	8007f9c <xflowf>
 8007fbc:	10000000 	.word	0x10000000

08007fc0 <__math_oflowf>:
 8007fc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fc8 <__math_oflowf+0x8>
 8007fc4:	f7ff bfea 	b.w	8007f9c <xflowf>
 8007fc8:	70000000 	.word	0x70000000

08007fcc <__ieee754_expf>:
 8007fcc:	ee10 2a10 	vmov	r2, s0
 8007fd0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007fd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007fd8:	d902      	bls.n	8007fe0 <__ieee754_expf+0x14>
 8007fda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007fde:	4770      	bx	lr
 8007fe0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8007fe4:	d106      	bne.n	8007ff4 <__ieee754_expf+0x28>
 8007fe6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008120 <__ieee754_expf+0x154>
 8007fea:	2900      	cmp	r1, #0
 8007fec:	bf18      	it	ne
 8007fee:	eeb0 0a67 	vmovne.f32	s0, s15
 8007ff2:	4770      	bx	lr
 8007ff4:	484b      	ldr	r0, [pc, #300]	; (8008124 <__ieee754_expf+0x158>)
 8007ff6:	4282      	cmp	r2, r0
 8007ff8:	dd02      	ble.n	8008000 <__ieee754_expf+0x34>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f7ff bfe0 	b.w	8007fc0 <__math_oflowf>
 8008000:	2a00      	cmp	r2, #0
 8008002:	da05      	bge.n	8008010 <__ieee754_expf+0x44>
 8008004:	4a48      	ldr	r2, [pc, #288]	; (8008128 <__ieee754_expf+0x15c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d902      	bls.n	8008010 <__ieee754_expf+0x44>
 800800a:	2000      	movs	r0, #0
 800800c:	f7ff bfd2 	b.w	8007fb4 <__math_uflowf>
 8008010:	4a46      	ldr	r2, [pc, #280]	; (800812c <__ieee754_expf+0x160>)
 8008012:	4293      	cmp	r3, r2
 8008014:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008018:	d952      	bls.n	80080c0 <__ieee754_expf+0xf4>
 800801a:	4a45      	ldr	r2, [pc, #276]	; (8008130 <__ieee754_expf+0x164>)
 800801c:	4293      	cmp	r3, r2
 800801e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008022:	d834      	bhi.n	800808e <__ieee754_expf+0xc2>
 8008024:	4b43      	ldr	r3, [pc, #268]	; (8008134 <__ieee754_expf+0x168>)
 8008026:	4413      	add	r3, r2
 8008028:	ed93 7a00 	vldr	s14, [r3]
 800802c:	4b42      	ldr	r3, [pc, #264]	; (8008138 <__ieee754_expf+0x16c>)
 800802e:	4413      	add	r3, r2
 8008030:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008034:	f1c1 0201 	rsb	r2, r1, #1
 8008038:	edd3 7a00 	vldr	s15, [r3]
 800803c:	1a52      	subs	r2, r2, r1
 800803e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008042:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008046:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800813c <__ieee754_expf+0x170>
 800804a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008140 <__ieee754_expf+0x174>
 800804e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008052:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8008144 <__ieee754_expf+0x178>
 8008056:	eea6 5a86 	vfma.f32	s10, s13, s12
 800805a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008148 <__ieee754_expf+0x17c>
 800805e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008062:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800814c <__ieee754_expf+0x180>
 8008066:	eea6 5a86 	vfma.f32	s10, s13, s12
 800806a:	eef0 6a40 	vmov.f32	s13, s0
 800806e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008072:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008076:	ee20 5a26 	vmul.f32	s10, s0, s13
 800807a:	bb92      	cbnz	r2, 80080e2 <__ieee754_expf+0x116>
 800807c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008080:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008084:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008088:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800808c:	4770      	bx	lr
 800808e:	4b30      	ldr	r3, [pc, #192]	; (8008150 <__ieee754_expf+0x184>)
 8008090:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008154 <__ieee754_expf+0x188>
 8008094:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008158 <__ieee754_expf+0x18c>
 8008098:	4413      	add	r3, r2
 800809a:	edd3 7a00 	vldr	s15, [r3]
 800809e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80080a2:	eeb0 7a40 	vmov.f32	s14, s0
 80080a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080aa:	ee17 2a90 	vmov	r2, s15
 80080ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80080b6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800815c <__ieee754_expf+0x190>
 80080ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080be:	e7be      	b.n	800803e <__ieee754_expf+0x72>
 80080c0:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80080c4:	d20b      	bcs.n	80080de <__ieee754_expf+0x112>
 80080c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008160 <__ieee754_expf+0x194>
 80080ca:	ee70 6a26 	vadd.f32	s13, s0, s13
 80080ce:	eef4 6ae5 	vcmpe.f32	s13, s11
 80080d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d6:	dd02      	ble.n	80080de <__ieee754_expf+0x112>
 80080d8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80080dc:	4770      	bx	lr
 80080de:	2200      	movs	r2, #0
 80080e0:	e7af      	b.n	8008042 <__ieee754_expf+0x76>
 80080e2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80080e6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80080ea:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80080ee:	bfb8      	it	lt
 80080f0:	3264      	addlt	r2, #100	; 0x64
 80080f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80080fe:	ee17 3a90 	vmov	r3, s15
 8008102:	bfab      	itete	ge
 8008104:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008108:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800810c:	ee00 3a10 	vmovge	s0, r3
 8008110:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8008164 <__ieee754_expf+0x198>
 8008114:	bfbc      	itt	lt
 8008116:	ee00 3a10 	vmovlt	s0, r3
 800811a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800811e:	4770      	bx	lr
 8008120:	00000000 	.word	0x00000000
 8008124:	42b17217 	.word	0x42b17217
 8008128:	42cff1b5 	.word	0x42cff1b5
 800812c:	3eb17218 	.word	0x3eb17218
 8008130:	3f851591 	.word	0x3f851591
 8008134:	08009e5c 	.word	0x08009e5c
 8008138:	08009e64 	.word	0x08009e64
 800813c:	3331bb4c 	.word	0x3331bb4c
 8008140:	b5ddea0e 	.word	0xb5ddea0e
 8008144:	388ab355 	.word	0x388ab355
 8008148:	bb360b61 	.word	0xbb360b61
 800814c:	3e2aaaab 	.word	0x3e2aaaab
 8008150:	08009e54 	.word	0x08009e54
 8008154:	3fb8aa3b 	.word	0x3fb8aa3b
 8008158:	3f317180 	.word	0x3f317180
 800815c:	3717f7d1 	.word	0x3717f7d1
 8008160:	7149f2ca 	.word	0x7149f2ca
 8008164:	0d800000 	.word	0x0d800000

08008168 <_init>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr

08008174 <_fini>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr
