
Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007058  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000115c  08007200  08007200  00017200  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800835c  0800835c  000205b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008364  08008364  000205b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b4  20000000  0800836c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200005c0  08008920  000205c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000096c  08008920  0002096c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3c4  00000000  00000000  00020677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e3  00000000  00000000  0002fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a8  00000000  00000000  00032ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002863f  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff9c  00000000  00000000  0005bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c5c  00000000  00000000  0006bd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003610  00000000  00000000  00160988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00163f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c0 	.word	0x200005c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071d0 	.word	0x080071d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005c4 	.word	0x200005c4
 80001cc:	080071d0 	.word	0x080071d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fa6a 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f80b 	bl	800058e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8ac 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f87a 	bl	8000674 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000580:	f000 f856 	bl	8000630 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000584:	f003 fb76 	bl	8003c74 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000588:	f003 fb82 	bl	8003c90 <MX_X_CUBE_AI_Process>
 800058c:	e7fc      	b.n	8000588 <main+0x1c>

0800058e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b096      	sub	sp, #88	; 0x58
 8000592:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2244      	movs	r2, #68	; 0x44
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f005 ffd7 	bl	8006550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b4:	f000 ff18 	bl	80013e8 <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005be:	f000 f8ef 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005dc:	230a      	movs	r3, #10
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 ff4f 	bl	8001494 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005fc:	f000 f8d0 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fb17 	bl	8001c4c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000624:	f000 f8bc 	bl	80007a0 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_CRC_Init+0x3c>)
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <MX_CRC_Init+0x40>)
 8000638:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_CRC_Init+0x3c>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_CRC_Init+0x3c>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_CRC_Init+0x3c>)
 8000654:	2201      	movs	r2, #1
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_CRC_Init+0x3c>)
 800065a:	f000 fb83 	bl	8000d64 <HAL_CRC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000664:	f000 f89c 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200005dc 	.word	0x200005dc
 8000670:	40023000 	.word	0x40023000

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_USART2_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b8:	f002 f9a8 	bl	8002a0c <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f86d 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000600 	.word	0x20000600
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <MX_GPIO_Init+0xc4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a24      	ldr	r2, [pc, #144]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fe23 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0xc8>)
 800076e:	f000 fc6b 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000772:	2320      	movs	r3, #32
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 fc5c 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	; 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_CRC_MspInit+0x38>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d10b      	bne.n	800081e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_CRC_MspInit+0x3c>)
 8000808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_CRC_MspInit+0x3c>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6493      	str	r3, [r2, #72]	; 0x48
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_CRC_MspInit+0x3c>)
 8000814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023000 	.word	0x40023000
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	; 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2288      	movs	r2, #136	; 0x88
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fe7b 	bl	8006550 <memset>
  if(huart->Instance==USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <HAL_UART_MspInit+0xc0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d143      	bne.n	80008ec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fc0f 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ff90 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0xc4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b0:	230c      	movs	r3, #12
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fbb6 	bl	8001048 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2026      	movs	r0, #38	; 0x26
 80008e2:	f000 fa08 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e6:	2026      	movs	r0, #38	; 0x26
 80008e8:	f000 fa21 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	37b0      	adds	r7, #176	; 0xb0
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40021000 	.word	0x40021000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8da 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <USART2_IRQHandler+0x10>)
 8000956:	f002 f8a7 	bl	8002aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000600 	.word	0x20000600

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f005 fe3a 	bl	800660c <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20018000 	.word	0x20018000
 80009c4:	00000800 	.word	0x00000800
 80009c8:	20000688 	.word	0x20000688
 80009cc:	20000970 	.word	0x20000970

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f8:	f7ff ffea 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a22:	f005 fdf9 	bl	8006618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a26:	f7ff fda1 	bl	800056c <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	200005b4 	.word	0x200005b4
  ldr r2, =_sidata
 8000a38:	0800836c 	.word	0x0800836c
  ldr r2, =_sbss
 8000a3c:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8000a40:	2000096c 	.word	0x2000096c

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_Init+0x3c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <HAL_Init+0x3c>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f000 f93e 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f80f 	bl	8000a88 <HAL_InitTick>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	e001      	b.n	8000a7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a76:	f7ff fe99 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_InitTick+0x6c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d023      	beq.n	8000ae4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_InitTick+0x70>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x6c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f949 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10f      	bne.n	8000ade <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d809      	bhi.n	8000ad8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f913 	bl	8000cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_InitTick+0x74>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e001      	b.n	8000ae8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	2000068c 	.word	0x2000068c

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2000068c 	.word	0x2000068c

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff29 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff3e 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff31 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa2 	bl	8000c9c <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e054      	b.n	8000e20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7f5b      	ldrb	r3, [r3, #29]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fd34 	bl	80007f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2202      	movs	r2, #2
 8000d90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <HAL_CRC_Init+0xc4>)
 8000da0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0218 	bic.w	r2, r2, #24
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	e00c      	b.n	8000dce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6899      	ldr	r1, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f834 	bl	8000e2c <HAL_CRCEx_Polynomial_Set>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e028      	b.n	8000e20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d105      	bne.n	8000de2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	e004      	b.n	8000dec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6912      	ldr	r2, [r2, #16]
 8000dea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	04c11db7 	.word	0x04c11db7

08000e2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000e3c:	231f      	movs	r3, #31
 8000e3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
 8000e4e:	e063      	b.n	8000f18 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000e50:	bf00      	nop
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	613a      	str	r2, [r7, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d009      	beq.n	8000e70 <HAL_CRCEx_Polynomial_Set+0x44>
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b18      	cmp	r3, #24
 8000e74:	d846      	bhi.n	8000f04 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <HAL_CRCEx_Polynomial_Set+0x50>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000f0b 	.word	0x08000f0b
 8000e80:	08000f05 	.word	0x08000f05
 8000e84:	08000f05 	.word	0x08000f05
 8000e88:	08000f05 	.word	0x08000f05
 8000e8c:	08000f05 	.word	0x08000f05
 8000e90:	08000f05 	.word	0x08000f05
 8000e94:	08000f05 	.word	0x08000f05
 8000e98:	08000f05 	.word	0x08000f05
 8000e9c:	08000ef9 	.word	0x08000ef9
 8000ea0:	08000f05 	.word	0x08000f05
 8000ea4:	08000f05 	.word	0x08000f05
 8000ea8:	08000f05 	.word	0x08000f05
 8000eac:	08000f05 	.word	0x08000f05
 8000eb0:	08000f05 	.word	0x08000f05
 8000eb4:	08000f05 	.word	0x08000f05
 8000eb8:	08000f05 	.word	0x08000f05
 8000ebc:	08000eed 	.word	0x08000eed
 8000ec0:	08000f05 	.word	0x08000f05
 8000ec4:	08000f05 	.word	0x08000f05
 8000ec8:	08000f05 	.word	0x08000f05
 8000ecc:	08000f05 	.word	0x08000f05
 8000ed0:	08000f05 	.word	0x08000f05
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f05 	.word	0x08000f05
 8000edc:	08000ee1 	.word	0x08000ee1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d913      	bls.n	8000f0e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000eea:	e010      	b.n	8000f0e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d90f      	bls.n	8000f12 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000ef6:	e00c      	b.n	8000f12 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	d90b      	bls.n	8000f16 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f02:	e008      	b.n	8000f16 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	75fb      	strb	r3, [r7, #23]
        break;
 8000f08:	e006      	b.n	8000f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f0a:	bf00      	nop
 8000f0c:	e004      	b.n	8000f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f0e:	bf00      	nop
 8000f10:	e002      	b.n	8000f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000f16:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f023 0118 	bic.w	r1, r3, #24
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2204      	movs	r2, #4
 8000f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e022      	b.n	8000fb8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 020e 	bic.w	r2, r2, #14
 8000f80:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f003 021c 	and.w	r2, r3, #28
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d005      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e029      	b.n	800103c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 020e 	bic.w	r2, r2, #14
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 021c 	and.w	r2, r3, #28
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	4798      	blx	r3
    }
  }
  return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e17f      	b.n	8001358 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8171 	beq.w	8001352 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d005      	beq.n	8001088 <HAL_GPIO_Init+0x40>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d130      	bne.n	80010ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	f003 0201 	and.w	r2, r3, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d118      	bne.n	8001128 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80ac 	beq.w	8001352 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <HAL_GPIO_Init+0x330>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	4a5e      	ldr	r2, [pc, #376]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	; 0x60
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <HAL_GPIO_Init+0x330>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001212:	4a5a      	ldr	r2, [pc, #360]	; (800137c <HAL_GPIO_Init+0x334>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123c:	d025      	beq.n	800128a <HAL_GPIO_Init+0x242>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x338>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x23e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_GPIO_Init+0x33c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x23a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x340>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x236>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x344>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x232>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x348>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x22e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <HAL_GPIO_Init+0x34c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x22a>
 800126e:	2306      	movs	r3, #6
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x244>
 8001272:	2307      	movs	r3, #7
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x244>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x244>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x244>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x244>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x244>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x244>
 800128a:	2300      	movs	r3, #0
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129c:	4937      	ldr	r1, [pc, #220]	; (800137c <HAL_GPIO_Init+0x334>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_GPIO_Init+0x350>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_GPIO_Init+0x350>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_GPIO_Init+0x350>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_GPIO_Init+0x350>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x350>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x350>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_GPIO_Init+0x350>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_GPIO_Init+0x350>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	f47f ae78 	bne.w	8001058 <HAL_GPIO_Init+0x10>
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48001000 	.word	0x48001000
 8001390:	48001400 	.word	0x48001400
 8001394:	48001800 	.word	0x48001800
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f6:	d130      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001404:	d038      	beq.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001414:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2232      	movs	r2, #50	; 0x32
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142c:	e002      	b.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001440:	d102      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f2      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001454:	d110      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e00f      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001466:	d007      	beq.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000
 800148c:	20000000 	.word	0x20000000
 8001490:	431bde83 	.word	0x431bde83

08001494 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e3ca      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a6:	4b97      	ldr	r3, [pc, #604]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b0:	4b94      	ldr	r3, [pc, #592]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80e4 	beq.w	8001690 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_RCC_OscConfig+0x4a>
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b0c      	cmp	r3, #12
 80014d2:	f040 808b 	bne.w	80015ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f040 8087 	bne.w	80015ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014de:	4b89      	ldr	r3, [pc, #548]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x62>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e3a2      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <HAL_RCC_OscConfig+0x7c>
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800150e:	e005      	b.n	800151c <HAL_RCC_OscConfig+0x88>
 8001510:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800151c:	4293      	cmp	r3, r2
 800151e:	d223      	bcs.n	8001568 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fd55 	bl	8001fd4 <RCC_SetFlashLatencyFromMSIRange>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e383      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001534:	4b73      	ldr	r3, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a72      	ldr	r2, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	496d      	ldr	r1, [pc, #436]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001552:	4b6c      	ldr	r3, [pc, #432]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4968      	ldr	r1, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
 8001566:	e025      	b.n	80015b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a65      	ldr	r2, [pc, #404]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4960      	ldr	r1, [pc, #384]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001586:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	495b      	ldr	r1, [pc, #364]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fd15 	bl	8001fd4 <RCC_SetFlashLatencyFromMSIRange>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e343      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015b4:	f000 fc4a 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b52      	ldr	r3, [pc, #328]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	4950      	ldr	r1, [pc, #320]	; (8001708 <HAL_RCC_OscConfig+0x274>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	4a4e      	ldr	r2, [pc, #312]	; (800170c <HAL_RCC_OscConfig+0x278>)
 80015d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015d4:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fa55 	bl	8000a88 <HAL_InitTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d052      	beq.n	800168e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	e327      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d032      	beq.n	800165a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a42      	ldr	r2, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001600:	f7ff fa92 	bl	8000b28 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001608:	f7ff fa8e 	bl	8000b28 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e310      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a36      	ldr	r2, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4931      	ldr	r1, [pc, #196]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	492c      	ldr	r1, [pc, #176]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
 8001658:	e01a      	b.n	8001690 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001666:	f7ff fa5f 	bl	8000b28 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166e:	f7ff fa5b 	bl	8000b28 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e2dd      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x1da>
 800168c:	e000      	b.n	8001690 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d074      	beq.n	8001786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x21a>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d10e      	bne.n	80016c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d10b      	bne.n	80016c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d064      	beq.n	8001784 <HAL_RCC_OscConfig+0x2f0>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d160      	bne.n	8001784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e2ba      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x24a>
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e026      	b.n	800172c <HAL_RCC_OscConfig+0x298>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e6:	d115      	bne.n	8001714 <HAL_RCC_OscConfig+0x280>
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a02      	ldr	r2, [pc, #8]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x298>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	08007310 	.word	0x08007310
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004
 8001714:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a9f      	ldr	r2, [pc, #636]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b9d      	ldr	r3, [pc, #628]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a9c      	ldr	r2, [pc, #624]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff f9f8 	bl	8000b28 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff f9f4 	bl	8000b28 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e276      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174e:	4b92      	ldr	r3, [pc, #584]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x2a8>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff f9e4 	bl	8000b28 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff f9e0 	bl	8000b28 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e262      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001776:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x2d0>
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d060      	beq.n	8001854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_OscConfig+0x310>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d116      	bne.n	80017d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a4:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x328>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e23f      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b76      	ldr	r3, [pc, #472]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	4973      	ldr	r1, [pc, #460]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	e040      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d023      	beq.n	8001822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017da:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6e      	ldr	r2, [pc, #440]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff f99f 	bl	8000b28 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff f99b 	bl	8000b28 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e21d      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	495f      	ldr	r1, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e018      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a5c      	ldr	r2, [pc, #368]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff f97b 	bl	8000b28 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff f977 	bl	8000b28 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1f9      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03c      	beq.n	80018da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186e:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f956 	bl	8000b28 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff f952 	bl	8000b28 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1d4      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ef      	beq.n	8001880 <HAL_RCC_OscConfig+0x3ec>
 80018a0:	e01b      	b.n	80018da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a8:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff f939 	bl	8000b28 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff f935 	bl	8000b28 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1b7      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ef      	bne.n	80018ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80a6 	beq.w	8001a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	4a26      	ldr	r2, [pc, #152]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	; 0x58
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001910:	2301      	movs	r3, #1
 8001912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x508>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d118      	bne.n	8001952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_RCC_OscConfig+0x508>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x508>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192c:	f7ff f8fc 	bl	8000b28 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff f8f8 	bl	8000b28 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e17a      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_RCC_OscConfig+0x508>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d108      	bne.n	800196c <HAL_RCC_OscConfig+0x4d8>
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800196a:	e029      	b.n	80019c0 <HAL_RCC_OscConfig+0x52c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d115      	bne.n	80019a0 <HAL_RCC_OscConfig+0x50c>
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_RCC_OscConfig+0x504>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x52c>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
 80019a0:	4b9c      	ldr	r3, [pc, #624]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	4a9b      	ldr	r2, [pc, #620]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b0:	4b98      	ldr	r3, [pc, #608]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	4a97      	ldr	r2, [pc, #604]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d016      	beq.n	80019f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff f8ae 	bl	8000b28 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8aa 	bl	8000b28 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e12a      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ed      	beq.n	80019d0 <HAL_RCC_OscConfig+0x53c>
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f897 	bl	8000b28 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff f893 	bl	8000b28 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e113      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a14:	4b7f      	ldr	r3, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ed      	bne.n	80019fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a79      	ldr	r2, [pc, #484]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80fe 	beq.w	8001c3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	f040 80d0 	bne.w	8001be8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a48:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d130      	bne.n	8001abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	3b01      	subs	r3, #1
 8001a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d127      	bne.n	8001abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d11f      	bne.n	8001abe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a88:	2a07      	cmp	r2, #7
 8001a8a:	bf14      	ite	ne
 8001a8c:	2201      	movne	r2, #1
 8001a8e:	2200      	moveq	r2, #0
 8001a90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d113      	bne.n	8001abe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d06e      	beq.n	8001b9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d069      	beq.n	8001b98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0ad      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aec:	f7ff f81c 	bl	8000b28 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f818 	bl	8000b28 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e09a      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <HAL_RCC_OscConfig+0x784>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b22:	3a01      	subs	r2, #1
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b2c:	0212      	lsls	r2, r2, #8
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b34:	0852      	lsrs	r2, r2, #1
 8001b36:	3a01      	subs	r2, #1
 8001b38:	0552      	lsls	r2, r2, #21
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b40:	0852      	lsrs	r2, r2, #1
 8001b42:	3a01      	subs	r2, #1
 8001b44:	0652      	lsls	r2, r2, #25
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b4c:	0912      	lsrs	r2, r2, #4
 8001b4e:	0452      	lsls	r2, r2, #17
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4930      	ldr	r1, [pc, #192]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b70:	f7fe ffda 	bl	8000b28 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7fe ffd6 	bl	8000b28 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e058      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b96:	e050      	b.n	8001c3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e04f      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d148      	bne.n	8001c3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bc0:	f7fe ffb2 	bl	8000b28 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7fe ffae 	bl	8000b28 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e030      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x734>
 8001be6:	e028      	b.n	8001c3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d023      	beq.n	8001c36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_RCC_OscConfig+0x780>)
 8001bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7fe ff95 	bl	8000b28 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	e00c      	b.n	8001c1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7fe ff91 	bl	8000b28 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d905      	bls.n	8001c1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e013      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
 8001c14:	40021000 	.word	0x40021000
 8001c18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_OscConfig+0x7b0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ec      	bne.n	8001c02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_OscConfig+0x7b0>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	4905      	ldr	r1, [pc, #20]	; (8001c44 <HAL_RCC_OscConfig+0x7b0>)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_OscConfig+0x7b4>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
 8001c34:	e001      	b.n	8001c3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	feeefffc 	.word	0xfeeefffc

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0e7      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d910      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4970      	ldr	r1, [pc, #448]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0cf      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d908      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4960      	ldr	r1, [pc, #384]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d04c      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d121      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0a6      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cea:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d115      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e09a      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e08e      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e086      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4943      	ldr	r1, [pc, #268]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d34:	f7fe fef8 	bl	8000b28 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7fe fef4 	bl	8000b28 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e06e      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 020c 	and.w	r2, r3, #12
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1eb      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d208      	bcs.n	8001d92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	492b      	ldr	r1, [pc, #172]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d210      	bcs.n	8001dc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 0207 	bic.w	r2, r3, #7
 8001da8:	4923      	ldr	r1, [pc, #140]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_RCC_ClockConfig+0x1ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e036      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4918      	ldr	r1, [pc, #96]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4910      	ldr	r1, [pc, #64]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e00:	f000 f824 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	490b      	ldr	r1, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x1f4>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1fc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fe2f 	bl	8000a88 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08007310 	.word	0x08007310
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x34>
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d121      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d11e      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e005      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	e004      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ed2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d134      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ef0:	e005      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef4:	617b      	str	r3, [r7, #20]
      break;
 8001ef6:	e005      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001efa:	617b      	str	r3, [r7, #20]
      break;
 8001efc:	e002      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	617b      	str	r3, [r7, #20]
      break;
 8001f02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	3301      	adds	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	fb03 f202 	mul.w	r2, r3, r2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	0e5b      	lsrs	r3, r3, #25
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	3301      	adds	r3, #1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f44:	69bb      	ldr	r3, [r7, #24]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08007328 	.word	0x08007328
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200

08001f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08007320 	.word	0x08007320

08001fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fac:	f7ff ffda 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0adb      	lsrs	r3, r3, #11
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08007320 	.word	0x08007320

08001fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fec:	f7ff f9ee 	bl	80013cc <HAL_PWREx_GetVoltageRange>
 8001ff0:	6178      	str	r0, [r7, #20]
 8001ff2:	e014      	b.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800200c:	f7ff f9de 	bl	80013cc <HAL_PWREx_GetVoltageRange>
 8002010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d10b      	bne.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d919      	bls.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2ba0      	cmp	r3, #160	; 0xa0
 8002030:	d902      	bls.n	8002038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002032:	2302      	movs	r3, #2
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e013      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002038:	2301      	movs	r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e010      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d902      	bls.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002044:	2303      	movs	r3, #3
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e00a      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d102      	bne.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002050:	2302      	movs	r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	e004      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b70      	cmp	r3, #112	; 0x70
 800205a:	d101      	bne.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800205c:	2301      	movs	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	4909      	ldr	r1, [pc, #36]	; (8002090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800209c:	2300      	movs	r3, #0
 800209e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a0:	2300      	movs	r3, #0
 80020a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d041      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020b8:	d02a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020be:	d824      	bhi.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020c4:	d008      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020ca:	d81e      	bhi.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d4:	d010      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020d6:	e018      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020d8:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a85      	ldr	r2, [pc, #532]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e4:	e015      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fabb 	bl	8002668 <RCCEx_PLLSAI1_Config>
 80020f2:	4603      	mov	r3, r0
 80020f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f6:	e00c      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3320      	adds	r3, #32
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fba6 	bl	8002850 <RCCEx_PLLSAI2_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002108:	e003      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	74fb      	strb	r3, [r7, #19]
      break;
 800210e:	e000      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002118:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002126:	4973      	ldr	r1, [pc, #460]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800212e:	e001      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d041      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002144:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002148:	d02a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800214a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800214e:	d824      	bhi.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002154:	d008      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800215a:	d81e      	bhi.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d010      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002166:	e018      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002168:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002174:	e015      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa73 	bl	8002668 <RCCEx_PLLSAI1_Config>
 8002182:	4603      	mov	r3, r0
 8002184:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002186:	e00c      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3320      	adds	r3, #32
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fb5e 	bl	8002850 <RCCEx_PLLSAI2_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002198:	e003      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	74fb      	strb	r3, [r7, #19]
      break;
 800219e:	e000      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021a8:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b6:	494f      	ldr	r1, [pc, #316]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021be:	e001      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a0 	beq.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00d      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a40      	ldr	r2, [pc, #256]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002214:	f7fe fc88 	bl	8000b28 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800221a:	e009      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe fc84 	bl	8000b28 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	74fb      	strb	r3, [r7, #19]
        break;
 800222e:	e005      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d15c      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01f      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	d019      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe fc43 	bl	8000b28 <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a4:	e00b      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fc3f 	bl	8000b28 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d902      	bls.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	74fb      	strb	r3, [r7, #19]
            break;
 80022bc:	e006      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ec      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e2:	4904      	ldr	r1, [pc, #16]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022ea:	e009      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	74bb      	strb	r3, [r7, #18]
 80022f0:	e006      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002300:	7c7b      	ldrb	r3, [r7, #17]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d105      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002306:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	4a9d      	ldr	r2, [pc, #628]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800231e:	4b98      	ldr	r3, [pc, #608]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f023 0203 	bic.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	4994      	ldr	r1, [pc, #592]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002340:	4b8f      	ldr	r3, [pc, #572]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 020c 	bic.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	498c      	ldr	r1, [pc, #560]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002362:	4b87      	ldr	r3, [pc, #540]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4983      	ldr	r1, [pc, #524]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002384:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	497b      	ldr	r1, [pc, #492]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	4972      	ldr	r1, [pc, #456]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	496a      	ldr	r1, [pc, #424]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	4961      	ldr	r1, [pc, #388]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800240c:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	4959      	ldr	r1, [pc, #356]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243c:	4950      	ldr	r1, [pc, #320]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	4948      	ldr	r1, [pc, #288]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	493f      	ldr	r1, [pc, #252]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d028      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a2:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a31      	ldr	r2, [pc, #196]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024be:	60d3      	str	r3, [r2, #12]
 80024c0:	e011      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3304      	adds	r3, #4
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f8c8 	bl	8002668 <RCCEx_PLLSAI1_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d028      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	491f      	ldr	r1, [pc, #124]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002510:	d106      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251c:	60d3      	str	r3, [r2, #12]
 800251e:	e011      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2101      	movs	r1, #1
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f899 	bl	8002668 <RCCEx_PLLSAI1_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02b      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256e:	d109      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a02      	ldr	r2, [pc, #8]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
 800257c:	e014      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f867 	bl	8002668 <RCCEx_PLLSAI1_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d02f      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025c2:	4928      	ldr	r1, [pc, #160]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025d2:	d10d      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f844 	bl	8002668 <RCCEx_PLLSAI1_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d014      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	74bb      	strb	r3, [r7, #18]
 80025ee:	e011      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3320      	adds	r3, #32
 80025fe:	2102      	movs	r1, #2
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f925 	bl	8002850 <RCCEx_PLLSAI2_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262e:	490d      	ldr	r1, [pc, #52]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002652:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800265a:	7cbb      	ldrb	r3, [r7, #18]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000

08002668 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002676:	4b75      	ldr	r3, [pc, #468]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
       ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800269a:	4b6c      	ldr	r3, [pc, #432]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
       ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d047      	beq.n	800273e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e044      	b.n	800273e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d018      	beq.n	80026ee <RCCEx_PLLSAI1_Config+0x86>
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d825      	bhi.n	800270c <RCCEx_PLLSAI1_Config+0xa4>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0x62>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d009      	beq.n	80026dc <RCCEx_PLLSAI1_Config+0x74>
 80026c8:	e020      	b.n	800270c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ca:	4b60      	ldr	r3, [pc, #384]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11d      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026da:	e01a      	b.n	8002712 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026dc:	4b5b      	ldr	r3, [pc, #364]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ec:	e013      	b.n	8002716 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fa:	4b54      	ldr	r3, [pc, #336]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800270a:	e006      	b.n	800271a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e004      	b.n	800271c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800271a:	bf00      	nop
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	430b      	orrs	r3, r1
 8002738:	4944      	ldr	r1, [pc, #272]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d17d      	bne.n	8002840 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a40      	ldr	r2, [pc, #256]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 800274a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe f9ea 	bl	8000b28 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002756:	e009      	b.n	800276c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002758:	f7fe f9e6 	bl	8000b28 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	73fb      	strb	r3, [r7, #15]
        break;
 800276a:	e005      	b.n	8002778 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276c:	4b37      	ldr	r3, [pc, #220]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ef      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d160      	bne.n	8002840 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	0211      	lsls	r1, r2, #8
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	0912      	lsrs	r2, r2, #4
 800279c:	0452      	lsls	r2, r2, #17
 800279e:	430a      	orrs	r2, r1
 80027a0:	492a      	ldr	r1, [pc, #168]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	610b      	str	r3, [r1, #16]
 80027a6:	e027      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d112      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6892      	ldr	r2, [r2, #8]
 80027be:	0211      	lsls	r1, r2, #8
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6912      	ldr	r2, [r2, #16]
 80027c4:	0852      	lsrs	r2, r2, #1
 80027c6:	3a01      	subs	r2, #1
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	430a      	orrs	r2, r1
 80027cc:	491f      	ldr	r1, [pc, #124]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	610b      	str	r3, [r1, #16]
 80027d2:	e011      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6892      	ldr	r2, [r2, #8]
 80027e4:	0211      	lsls	r1, r2, #8
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6952      	ldr	r2, [r2, #20]
 80027ea:	0852      	lsrs	r2, r2, #1
 80027ec:	3a01      	subs	r2, #1
 80027ee:	0652      	lsls	r2, r2, #25
 80027f0:	430a      	orrs	r2, r1
 80027f2:	4916      	ldr	r1, [pc, #88]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a13      	ldr	r2, [pc, #76]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe f990 	bl	8000b28 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800280a:	e009      	b.n	8002820 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280c:	f7fe f98c 	bl	8000b28 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	73fb      	strb	r3, [r7, #15]
          break;
 800281e:	e005      	b.n	800282c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ef      	beq.n	800280c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4904      	ldr	r1, [pc, #16]	; (800284c <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285e:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d018      	beq.n	800289c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d10d      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
       ||
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
       ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d047      	beq.n	8002926 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e044      	b.n	8002926 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d018      	beq.n	80028d6 <RCCEx_PLLSAI2_Config+0x86>
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d825      	bhi.n	80028f4 <RCCEx_PLLSAI2_Config+0xa4>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d002      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0x62>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d009      	beq.n	80028c4 <RCCEx_PLLSAI2_Config+0x74>
 80028b0:	e020      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028b2:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11d      	bne.n	80028fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c2:	e01a      	b.n	80028fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e013      	b.n	80028fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d6:	4b4c      	ldr	r3, [pc, #304]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028e2:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028f2:	e006      	b.n	8002902 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	e004      	b.n	8002904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028fa:	bf00      	nop
 80028fc:	e002      	b.n	8002904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028fe:	bf00      	nop
 8002900:	e000      	b.n	8002904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002902:	bf00      	nop
    }

    if(status == HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800290a:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	430b      	orrs	r3, r1
 8002920:	4939      	ldr	r1, [pc, #228]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d167      	bne.n	80029fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a35      	ldr	r2, [pc, #212]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7fe f8f6 	bl	8000b28 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800293e:	e009      	b.n	8002954 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002940:	f7fe f8f2 	bl	8000b28 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d902      	bls.n	8002954 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	73fb      	strb	r3, [r7, #15]
        break;
 8002952:	e005      	b.n	8002960 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ef      	bne.n	8002940 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d14a      	bne.n	80029fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6892      	ldr	r2, [r2, #8]
 800297c:	0211      	lsls	r1, r2, #8
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68d2      	ldr	r2, [r2, #12]
 8002982:	0912      	lsrs	r2, r2, #4
 8002984:	0452      	lsls	r2, r2, #17
 8002986:	430a      	orrs	r2, r1
 8002988:	491f      	ldr	r1, [pc, #124]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298a:	4313      	orrs	r3, r2
 800298c:	614b      	str	r3, [r1, #20]
 800298e:	e011      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	0211      	lsls	r1, r2, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6912      	ldr	r2, [r2, #16]
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0652      	lsls	r2, r2, #25
 80029ac:	430a      	orrs	r2, r1
 80029ae:	4916      	ldr	r1, [pc, #88]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe f8b2 	bl	8000b28 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029c6:	e009      	b.n	80029dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029c8:	f7fe f8ae 	bl	8000b28 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d902      	bls.n	80029dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	73fb      	strb	r3, [r7, #15]
          break;
 80029da:	e005      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4904      	ldr	r1, [pc, #16]	; (8002a08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e040      	b.n	8002aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd ff00 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fdea 	bl	800362c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fb2f 	bl	80030bc <UART_SetConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e01b      	b.n	8002aa0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fe69 	bl	8003770 <UART_CheckIdleState>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b0ba      	sub	sp, #232	; 0xe8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ace:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ad2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d115      	bne.n	8002b10 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00f      	beq.n	8002b10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 82ae 	beq.w	8003062 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
      }
      return;
 8002b0e:	e2a8      	b.n	8003062 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8117 	beq.w	8002d48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b2a:	4b85      	ldr	r3, [pc, #532]	; (8002d40 <HAL_UART_IRQHandler+0x298>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 810a 	beq.w	8002d48 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <HAL_UART_IRQHandler+0xbc>
 8002b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2201      	movs	r2, #1
 8002b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d011      	beq.n	8002b94 <HAL_UART_IRQHandler+0xec>
 8002b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2202      	movs	r2, #2
 8002b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d011      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x11c>
 8002ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d017      	beq.n	8002c00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002be0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2208      	movs	r2, #8
 8002bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	f043 0208 	orr.w	r2, r3, #8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <HAL_UART_IRQHandler+0x18a>
 8002c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8214 	beq.w	8003066 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d005      	beq.n	8002c8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d04f      	beq.n	8002d2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fe7f 	bl	800398e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d141      	bne.n	8002d22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1d9      	bne.n	8002c9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d013      	beq.n	8002d1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_UART_IRQHandler+0x29c>)
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f960 	bl	8000fc4 <HAL_DMA_Abort_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d017      	beq.n	8002d3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d14:	4610      	mov	r0, r2
 8002d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	e00f      	b.n	8002d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9b8 	bl	8003090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e00b      	b.n	8002d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9b4 	bl	8003090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	e007      	b.n	8002d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f9b0 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d38:	e195      	b.n	8003066 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3a:	bf00      	nop
    return;
 8002d3c:	e193      	b.n	8003066 <HAL_UART_IRQHandler+0x5be>
 8002d3e:	bf00      	nop
 8002d40:	04000120 	.word	0x04000120
 8002d44:	08003a57 	.word	0x08003a57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	f040 814e 	bne.w	8002fee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8147 	beq.w	8002fee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8140 	beq.w	8002fee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2210      	movs	r2, #16
 8002d74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	f040 80b8 	bne.w	8002ef6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8167 	beq.w	800306a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002da6:	429a      	cmp	r2, r3
 8002da8:	f080 815f 	bcs.w	800306a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 8086 	bne.w	8002ed4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002df6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1da      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3308      	adds	r3, #8
 8002e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e1      	bne.n	8002e12 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3308      	adds	r3, #8
 8002e54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e3      	bne.n	8002e4e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea4:	f023 0310 	bic.w	r3, r3, #16
 8002ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ebc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e4      	bne.n	8002e94 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe f83a 	bl	8000f48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8d8 	bl	80030a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ef4:	e0b9      	b.n	800306a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80ab 	beq.w	800306e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80a6 	beq.w	800306e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
 8002f46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e4      	bne.n	8002f22 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	623b      	str	r3, [r7, #32]
   return(result);
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3308      	adds	r3, #8
 8002f78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f7c:	633a      	str	r2, [r7, #48]	; 0x30
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e3      	bne.n	8002f58 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e4      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f85c 	bl	80030a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fec:	e03f      	b.n	800306e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <HAL_UART_IRQHandler+0x570>
 8002ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800300e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fd60 	bl	8003ad6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003016:	e02d      	b.n	8003074 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01c      	beq.n	8003072 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
    }
    return;
 8003040:	e017      	b.n	8003072 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d012      	beq.n	8003074 <HAL_UART_IRQHandler+0x5cc>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fd11 	bl	8003a82 <UART_EndTransmit_IT>
    return;
 8003060:	e008      	b.n	8003074 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003062:	bf00      	nop
 8003064:	e006      	b.n	8003074 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003066:	bf00      	nop
 8003068:	e004      	b.n	8003074 <HAL_UART_IRQHandler+0x5cc>
      return;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <HAL_UART_IRQHandler+0x5cc>
      return;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003072:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003074:	37e8      	adds	r7, #232	; 0xe8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop

0800307c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c0:	b08a      	sub	sp, #40	; 0x28
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4ba4      	ldr	r3, [pc, #656]	; (800337c <UART_SetConfig+0x2c0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a99      	ldr	r2, [pc, #612]	; (8003380 <UART_SetConfig+0x2c4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	4313      	orrs	r3, r2
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a90      	ldr	r2, [pc, #576]	; (8003384 <UART_SetConfig+0x2c8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d126      	bne.n	8003194 <UART_SetConfig+0xd8>
 8003146:	4b90      	ldr	r3, [pc, #576]	; (8003388 <UART_SetConfig+0x2cc>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b03      	cmp	r3, #3
 8003152:	d81b      	bhi.n	800318c <UART_SetConfig+0xd0>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <UART_SetConfig+0xa0>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	0800316d 	.word	0x0800316d
 8003160:	0800317d 	.word	0x0800317d
 8003164:	08003175 	.word	0x08003175
 8003168:	08003185 	.word	0x08003185
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	e116      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003174:	2302      	movs	r3, #2
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e112      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800317c:	2304      	movs	r3, #4
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003182:	e10e      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003184:	2308      	movs	r3, #8
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318a:	e10a      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800318c:	2310      	movs	r3, #16
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e106      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7c      	ldr	r2, [pc, #496]	; (800338c <UART_SetConfig+0x2d0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d138      	bne.n	8003210 <UART_SetConfig+0x154>
 800319e:	4b7a      	ldr	r3, [pc, #488]	; (8003388 <UART_SetConfig+0x2cc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d82d      	bhi.n	8003208 <UART_SetConfig+0x14c>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xf8>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	08003209 	.word	0x08003209
 80031bc:	08003209 	.word	0x08003209
 80031c0:	08003209 	.word	0x08003209
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	08003209 	.word	0x08003209
 80031cc:	08003209 	.word	0x08003209
 80031d0:	08003209 	.word	0x08003209
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	08003209 	.word	0x08003209
 80031dc:	08003209 	.word	0x08003209
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003201 	.word	0x08003201
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e0d8      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e0d4      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80031f8:	2304      	movs	r3, #4
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e0d0      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003200:	2308      	movs	r3, #8
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e0cc      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e0c8      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5e      	ldr	r2, [pc, #376]	; (8003390 <UART_SetConfig+0x2d4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d125      	bne.n	8003266 <UART_SetConfig+0x1aa>
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <UART_SetConfig+0x2cc>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d016      	beq.n	8003256 <UART_SetConfig+0x19a>
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d818      	bhi.n	800325e <UART_SetConfig+0x1a2>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d00a      	beq.n	8003246 <UART_SetConfig+0x18a>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d814      	bhi.n	800325e <UART_SetConfig+0x1a2>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <UART_SetConfig+0x182>
 8003238:	2b10      	cmp	r3, #16
 800323a:	d008      	beq.n	800324e <UART_SetConfig+0x192>
 800323c:	e00f      	b.n	800325e <UART_SetConfig+0x1a2>
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003244:	e0ad      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003246:	2302      	movs	r3, #2
 8003248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324c:	e0a9      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800324e:	2304      	movs	r3, #4
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003254:	e0a5      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003256:	2308      	movs	r3, #8
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325c:	e0a1      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800325e:	2310      	movs	r3, #16
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003264:	e09d      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <UART_SetConfig+0x2d8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d125      	bne.n	80032bc <UART_SetConfig+0x200>
 8003270:	4b45      	ldr	r3, [pc, #276]	; (8003388 <UART_SetConfig+0x2cc>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800327a:	2bc0      	cmp	r3, #192	; 0xc0
 800327c:	d016      	beq.n	80032ac <UART_SetConfig+0x1f0>
 800327e:	2bc0      	cmp	r3, #192	; 0xc0
 8003280:	d818      	bhi.n	80032b4 <UART_SetConfig+0x1f8>
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d00a      	beq.n	800329c <UART_SetConfig+0x1e0>
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d814      	bhi.n	80032b4 <UART_SetConfig+0x1f8>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <UART_SetConfig+0x1d8>
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d008      	beq.n	80032a4 <UART_SetConfig+0x1e8>
 8003292:	e00f      	b.n	80032b4 <UART_SetConfig+0x1f8>
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e082      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800329c:	2302      	movs	r3, #2
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e07e      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80032a4:	2304      	movs	r3, #4
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e07a      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80032ac:	2308      	movs	r3, #8
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e076      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80032b4:	2310      	movs	r3, #16
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e072      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a35      	ldr	r2, [pc, #212]	; (8003398 <UART_SetConfig+0x2dc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d12a      	bne.n	800331c <UART_SetConfig+0x260>
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <UART_SetConfig+0x2cc>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d4:	d01a      	beq.n	800330c <UART_SetConfig+0x250>
 80032d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032da:	d81b      	bhi.n	8003314 <UART_SetConfig+0x258>
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d00c      	beq.n	80032fc <UART_SetConfig+0x240>
 80032e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e6:	d815      	bhi.n	8003314 <UART_SetConfig+0x258>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <UART_SetConfig+0x238>
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	d008      	beq.n	8003304 <UART_SetConfig+0x248>
 80032f2:	e00f      	b.n	8003314 <UART_SetConfig+0x258>
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e052      	b.n	80033a2 <UART_SetConfig+0x2e6>
 80032fc:	2302      	movs	r3, #2
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e04e      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003304:	2304      	movs	r3, #4
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e04a      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800330c:	2308      	movs	r3, #8
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e046      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003314:	2310      	movs	r3, #16
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e042      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a17      	ldr	r2, [pc, #92]	; (8003380 <UART_SetConfig+0x2c4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d13a      	bne.n	800339c <UART_SetConfig+0x2e0>
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <UART_SetConfig+0x2cc>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003334:	d01a      	beq.n	800336c <UART_SetConfig+0x2b0>
 8003336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333a:	d81b      	bhi.n	8003374 <UART_SetConfig+0x2b8>
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d00c      	beq.n	800335c <UART_SetConfig+0x2a0>
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003346:	d815      	bhi.n	8003374 <UART_SetConfig+0x2b8>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <UART_SetConfig+0x298>
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003350:	d008      	beq.n	8003364 <UART_SetConfig+0x2a8>
 8003352:	e00f      	b.n	8003374 <UART_SetConfig+0x2b8>
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335a:	e022      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800335c:	2302      	movs	r3, #2
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003362:	e01e      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003364:	2304      	movs	r3, #4
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336a:	e01a      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800336c:	2308      	movs	r3, #8
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003372:	e016      	b.n	80033a2 <UART_SetConfig+0x2e6>
 8003374:	2310      	movs	r3, #16
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337a:	e012      	b.n	80033a2 <UART_SetConfig+0x2e6>
 800337c:	efff69f3 	.word	0xefff69f3
 8003380:	40008000 	.word	0x40008000
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000
 800338c:	40004400 	.word	0x40004400
 8003390:	40004800 	.word	0x40004800
 8003394:	40004c00 	.word	0x40004c00
 8003398:	40005000 	.word	0x40005000
 800339c:	2310      	movs	r3, #16
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a9f      	ldr	r2, [pc, #636]	; (8003624 <UART_SetConfig+0x568>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d17a      	bne.n	80034a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d824      	bhi.n	80033fe <UART_SetConfig+0x342>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0x300>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033ff 	.word	0x080033ff
 80033c4:	080033e9 	.word	0x080033e9
 80033c8:	080033ff 	.word	0x080033ff
 80033cc:	080033ef 	.word	0x080033ef
 80033d0:	080033ff 	.word	0x080033ff
 80033d4:	080033ff 	.word	0x080033ff
 80033d8:	080033ff 	.word	0x080033ff
 80033dc:	080033f7 	.word	0x080033f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7fe fdcc 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 80033e4:	61f8      	str	r0, [r7, #28]
        break;
 80033e6:	e010      	b.n	800340a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e8:	4b8f      	ldr	r3, [pc, #572]	; (8003628 <UART_SetConfig+0x56c>)
 80033ea:	61fb      	str	r3, [r7, #28]
        break;
 80033ec:	e00d      	b.n	800340a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ee:	f7fe fd2d 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 80033f2:	61f8      	str	r0, [r7, #28]
        break;
 80033f4:	e009      	b.n	800340a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fa:	61fb      	str	r3, [r7, #28]
        break;
 80033fc:	e005      	b.n	800340a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80fb 	beq.w	8003608 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	429a      	cmp	r2, r3
 8003420:	d305      	bcc.n	800342e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	429a      	cmp	r2, r3
 800342c:	d903      	bls.n	8003436 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003434:	e0e8      	b.n	8003608 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2200      	movs	r2, #0
 800343a:	461c      	mov	r4, r3
 800343c:	4615      	mov	r5, r2
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	022b      	lsls	r3, r5, #8
 8003448:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800344c:	0222      	lsls	r2, r4, #8
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	6849      	ldr	r1, [r1, #4]
 8003452:	0849      	lsrs	r1, r1, #1
 8003454:	2000      	movs	r0, #0
 8003456:	4688      	mov	r8, r1
 8003458:	4681      	mov	r9, r0
 800345a:	eb12 0a08 	adds.w	sl, r2, r8
 800345e:	eb43 0b09 	adc.w	fp, r3, r9
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003470:	4650      	mov	r0, sl
 8003472:	4659      	mov	r1, fp
 8003474:	f7fc fefc 	bl	8000270 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003486:	d308      	bcc.n	800349a <UART_SetConfig+0x3de>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348e:	d204      	bcs.n	800349a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e0b6      	b.n	8003608 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034a0:	e0b2      	b.n	8003608 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034aa:	d15e      	bne.n	800356a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d828      	bhi.n	8003506 <UART_SetConfig+0x44a>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <UART_SetConfig+0x400>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034f1 	.word	0x080034f1
 80034c8:	08003507 	.word	0x08003507
 80034cc:	080034f7 	.word	0x080034f7
 80034d0:	08003507 	.word	0x08003507
 80034d4:	08003507 	.word	0x08003507
 80034d8:	08003507 	.word	0x08003507
 80034dc:	080034ff 	.word	0x080034ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe fd4c 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 80034e4:	61f8      	str	r0, [r7, #28]
        break;
 80034e6:	e014      	b.n	8003512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e8:	f7fe fd5e 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 80034ec:	61f8      	str	r0, [r7, #28]
        break;
 80034ee:	e010      	b.n	8003512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f0:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <UART_SetConfig+0x56c>)
 80034f2:	61fb      	str	r3, [r7, #28]
        break;
 80034f4:	e00d      	b.n	8003512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f6:	f7fe fca9 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 80034fa:	61f8      	str	r0, [r7, #28]
        break;
 80034fc:	e009      	b.n	8003512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003502:	61fb      	str	r3, [r7, #28]
        break;
 8003504:	e005      	b.n	8003512 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d077      	beq.n	8003608 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005a      	lsls	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d916      	bls.n	8003562 <UART_SetConfig+0x4a6>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353a:	d212      	bcs.n	8003562 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f023 030f 	bic.w	r3, r3, #15
 8003544:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	b29a      	uxth	r2, r3
 8003552:	8afb      	ldrh	r3, [r7, #22]
 8003554:	4313      	orrs	r3, r2
 8003556:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	8afa      	ldrh	r2, [r7, #22]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e052      	b.n	8003608 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003568:	e04e      	b.n	8003608 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800356a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800356e:	2b08      	cmp	r3, #8
 8003570:	d827      	bhi.n	80035c2 <UART_SetConfig+0x506>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0x4bc>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035a5 	.word	0x080035a5
 8003580:	080035ad 	.word	0x080035ad
 8003584:	080035c3 	.word	0x080035c3
 8003588:	080035b3 	.word	0x080035b3
 800358c:	080035c3 	.word	0x080035c3
 8003590:	080035c3 	.word	0x080035c3
 8003594:	080035c3 	.word	0x080035c3
 8003598:	080035bb 	.word	0x080035bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800359c:	f7fe fcee 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 80035a0:	61f8      	str	r0, [r7, #28]
        break;
 80035a2:	e014      	b.n	80035ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a4:	f7fe fd00 	bl	8001fa8 <HAL_RCC_GetPCLK2Freq>
 80035a8:	61f8      	str	r0, [r7, #28]
        break;
 80035aa:	e010      	b.n	80035ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <UART_SetConfig+0x56c>)
 80035ae:	61fb      	str	r3, [r7, #28]
        break;
 80035b0:	e00d      	b.n	80035ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b2:	f7fe fc4b 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 80035b6:	61f8      	str	r0, [r7, #28]
        break;
 80035b8:	e009      	b.n	80035ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035be:	61fb      	str	r3, [r7, #28]
        break;
 80035c0:	e005      	b.n	80035ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035cc:	bf00      	nop
    }

    if (pclk != 0U)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	085a      	lsrs	r2, r3, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	441a      	add	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b0f      	cmp	r3, #15
 80035ec:	d909      	bls.n	8003602 <UART_SetConfig+0x546>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d205      	bcs.n	8003602 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e002      	b.n	8003608 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003614:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	40008000 	.word	0x40008000
 8003628:	00f42400 	.word	0x00f42400

0800362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d10a      	bne.n	8003742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b098      	sub	sp, #96	; 0x60
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003780:	f7fd f9d2 	bl	8000b28 <HAL_GetTick>
 8003784:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d12e      	bne.n	80037f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f88c 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d021      	beq.n	80037f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
 80037ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e062      	b.n	80038b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d149      	bne.n	8003894 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	2200      	movs	r2, #0
 800380a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f856 	bl	80038c0 <UART_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03c      	beq.n	8003894 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	623b      	str	r3, [r7, #32]
   return(result);
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
 800383a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800383e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	60fb      	str	r3, [r7, #12]
   return(result);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800386c:	61fa      	str	r2, [r7, #28]
 800386e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	69b9      	ldr	r1, [r7, #24]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	617b      	str	r3, [r7, #20]
   return(result);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e011      	b.n	80038b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3758      	adds	r7, #88	; 0x58
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	e049      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d045      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fd f925 	bl	8000b28 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e048      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d031      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b08      	cmp	r3, #8
 800390e:	d110      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2208      	movs	r2, #8
 8003916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f838 	bl	800398e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2208      	movs	r2, #8
 8003922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e029      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003940:	d111      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f81e 	bl	800398e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e00f      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4013      	ands	r3, r2
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	429a      	cmp	r2, r3
 8003982:	d0a6      	beq.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800398e:	b480      	push	{r7}
 8003990:	b095      	sub	sp, #84	; 0x54
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
 80039b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e6      	bne.n	8003996 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3308      	adds	r3, #8
 80039ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3308      	adds	r3, #8
 80039e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e5      	bne.n	80039c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d118      	bne.n	8003a36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6979      	ldr	r1, [r7, #20]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e6      	bne.n	8003a04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a4a:	bf00      	nop
 8003a4c:	3754      	adds	r7, #84	; 0x54
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fb0b 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b088      	sub	sp, #32
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e6      	bne.n	8003a8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fad7 	bl	800307c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ace:	bf00      	nop
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003afc:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003afe:	461a      	mov	r2, r3
        err.type, err.code);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003b06:	6839      	ldr	r1, [r7, #0]
 8003b08:	4806      	ldr	r0, [pc, #24]	; (8003b24 <ai_log_err+0x38>)
 8003b0a:	f002 fbdb 	bl	80062c4 <iprintf>
 8003b0e:	e008      	b.n	8003b22 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003b10:	793b      	ldrb	r3, [r7, #4]
 8003b12:	4619      	mov	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <ai_log_err+0x3c>)
 8003b1e:	f002 fbd1 	bl	80062c4 <iprintf>

  do {} while (1);
 8003b22:	e7fe      	b.n	8003b22 <ai_log_err+0x36>
 8003b24:	08007200 	.word	0x08007200
 8003b28:	08007234 	.word	0x08007234

08003b2c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8003b34:	2200      	movs	r2, #0
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4828      	ldr	r0, [pc, #160]	; (8003bdc <ai_boostrap+0xb0>)
 8003b3a:	f000 f9c5 	bl	8003ec8 <ai_network_create_and_init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8003b42:	7b3b      	ldrb	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8003b48:	4925      	ldr	r1, [pc, #148]	; (8003be0 <ai_boostrap+0xb4>)
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ffce 	bl	8003aec <ai_log_err>
    return -1;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	e03e      	b.n	8003bd4 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <ai_boostrap+0xb0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa27 	bl	8003fb0 <ai_network_inputs_get>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <ai_boostrap+0xb8>)
 8003b66:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8003b68:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <ai_boostrap+0xb0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fa38 	bl	8003fe4 <ai_network_outputs_get>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <ai_boostrap+0xbc>)
 8003b78:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e00f      	b.n	8003ba0 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8003b80:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <ai_boostrap+0xb8>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	4916      	ldr	r1, [pc, #88]	; (8003bec <ai_boostrap+0xc0>)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	ddec      	ble.n	8003b80 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e00f      	b.n	8003bcc <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <ai_boostrap+0xbc>)
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <ai_boostrap+0xc4>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	ddec      	ble.n	8003bac <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	2000078c 	.word	0x2000078c
 8003be0:	08007264 	.word	0x08007264
 8003be4:	20000790 	.word	0x20000790
 8003be8:	20000794 	.word	0x20000794
 8003bec:	20000690 	.word	0x20000690
 8003bf0:	20000694 	.word	0x20000694

08003bf4 <ai_run>:

static int ai_run(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <ai_run+0x44>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <ai_run+0x48>)
 8003c00:	6811      	ldr	r1, [r2, #0]
 8003c02:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <ai_run+0x4c>)
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fa42 	bl	8004090 <ai_network_run>
 8003c0c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d00c      	beq.n	8003c2e <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <ai_run+0x44>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f933 	bl	8003e84 <ai_network_get_error>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4908      	ldr	r1, [pc, #32]	; (8003c44 <ai_run+0x50>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff62 	bl	8003aec <ai_log_err>
        "ai_network_run");
    return -1;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	e000      	b.n	8003c30 <ai_run+0x3c>
  }

  return 0;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	2000078c 	.word	0x2000078c
 8003c3c:	20000790 	.word	0x20000790
 8003c40:	20000794 	.word	0x20000794
 8003c44:	08007280 	.word	0x08007280

08003c48 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <post_process>:

int post_process(ai_i8* data[])
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8003c78:	4803      	ldr	r0, [pc, #12]	; (8003c88 <MX_X_CUBE_AI_Init+0x14>)
 8003c7a:	f002 fb89 	bl	8006390 <puts>

  ai_boostrap(data_activations0);
 8003c7e:	4803      	ldr	r0, [pc, #12]	; (8003c8c <MX_X_CUBE_AI_Init+0x18>)
 8003c80:	f7ff ff54 	bl	8003b2c <ai_boostrap>
    /* USER CODE END 5 */
}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	08007290 	.word	0x08007290
 8003c8c:	2000000c 	.word	0x2000000c

08003c90 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8003c9c:	4816      	ldr	r0, [pc, #88]	; (8003cf8 <MX_X_CUBE_AI_Process+0x68>)
 8003c9e:	f002 fb77 	bl	8006390 <puts>

  if (network) {
 8003ca2:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <MX_X_CUBE_AI_Process+0x6c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d013      	beq.n	8003cd2 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8003caa:	4815      	ldr	r0, [pc, #84]	; (8003d00 <MX_X_CUBE_AI_Process+0x70>)
 8003cac:	f7ff ffcc 	bl	8003c48 <acquire_and_process_data>
 8003cb0:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8003cb8:	f7ff ff9c 	bl	8003bf4 <ai_run>
 8003cbc:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8003cc4:	480f      	ldr	r0, [pc, #60]	; (8003d04 <MX_X_CUBE_AI_Process+0x74>)
 8003cc6:	f7ff ffca 	bl	8003c5e <post_process>
 8003cca:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0eb      	beq.n	8003caa <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8003cd8:	2311      	movs	r3, #17
 8003cda:	703b      	strb	r3, [r7, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2210      	movs	r2, #16
 8003ce0:	f362 231f 	bfi	r3, r2, #8, #24
 8003ce4:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <MX_X_CUBE_AI_Process+0x78>)
 8003ce8:	6838      	ldr	r0, [r7, #0]
 8003cea:	f7ff feff 	bl	8003aec <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	080072b0 	.word	0x080072b0
 8003cfc:	2000078c 	.word	0x2000078c
 8003d00:	20000690 	.word	0x20000690
 8003d04:	20000694 	.word	0x20000694
 8003d08:	080072cc 	.word	0x080072cc

08003d0c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4820      	ldr	r0, [pc, #128]	; (8003d9c <network_configure_activations+0x90>)
 8003d1c:	f000 fa96 	bl	800424c <ai_platform_get_activations_map>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02f      	beq.n	8003d86 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003d26:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <network_configure_activations+0x90>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <network_configure_activations+0x94>)
 8003d2c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <network_configure_activations+0x90>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <network_configure_activations+0x94>)
 8003d34:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <network_configure_activations+0x90>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	336c      	adds	r3, #108	; 0x6c
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <network_configure_activations+0x98>)
 8003d3e:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <network_configure_activations+0x90>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	336c      	adds	r3, #108	; 0x6c
 8003d46:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <network_configure_activations+0x98>)
 8003d48:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <network_configure_activations+0x90>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	336c      	adds	r3, #108	; 0x6c
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <network_configure_activations+0x9c>)
 8003d52:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <network_configure_activations+0x90>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	336c      	adds	r3, #108	; 0x6c
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <network_configure_activations+0x9c>)
 8003d5c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <network_configure_activations+0x90>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <network_configure_activations+0xa0>)
 8003d64:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <network_configure_activations+0x90>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <network_configure_activations+0xa0>)
 8003d6c:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <network_configure_activations+0x90>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <network_configure_activations+0xa4>)
 8003d76:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <network_configure_activations+0x90>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	; (8003db0 <network_configure_activations+0xa4>)
 8003d80:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e005      	b.n	8003d92 <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003d86:	2213      	movs	r2, #19
 8003d88:	2130      	movs	r1, #48	; 0x30
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb42 	bl	8004414 <ai_platform_network_set_error>
  return false;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000798 	.word	0x20000798
 8003da0:	20000010 	.word	0x20000010
 8003da4:	20000020 	.word	0x20000020
 8003da8:	20000030 	.word	0x20000030
 8003dac:	20000040 	.word	0x20000040
 8003db0:	20000050 	.word	0x20000050

08003db4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	482b      	ldr	r0, [pc, #172]	; (8003e70 <network_configure_weights+0xbc>)
 8003dc4:	f000 f9ee 	bl	80041a4 <ai_platform_get_weights_map>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d045      	beq.n	8003e5a <network_configure_weights+0xa6>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003dce:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <network_configure_weights+0xc0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dd6:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <network_configure_weights+0xc0>)
 8003dd8:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8003dda:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <network_configure_weights+0xbc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <network_configure_weights+0xc0>)
 8003de0:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <network_configure_weights+0xbc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <network_configure_weights+0xc0>)
 8003de8:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <network_configure_weights+0xc4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df2:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <network_configure_weights+0xc4>)
 8003df4:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 8003df6:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <network_configure_weights+0xbc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <network_configure_weights+0xc4>)
 8003e00:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <network_configure_weights+0xbc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <network_configure_weights+0xc4>)
 8003e0c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <network_configure_weights+0xc8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e16:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <network_configure_weights+0xc8>)
 8003e18:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <network_configure_weights+0xbc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e22:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <network_configure_weights+0xc8>)
 8003e24:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <network_configure_weights+0xbc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <network_configure_weights+0xc8>)
 8003e30:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <network_configure_weights+0xcc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e3a:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <network_configure_weights+0xcc>)
 8003e3c:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <network_configure_weights+0xbc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8003e46:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <network_configure_weights+0xcc>)
 8003e48:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <network_configure_weights+0xbc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <network_configure_weights+0xcc>)
 8003e54:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e005      	b.n	8003e66 <network_configure_weights+0xb2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003e5a:	2212      	movs	r2, #18
 8003e5c:	2130      	movs	r1, #48	; 0x30
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fad8 	bl	8004414 <ai_platform_network_set_error>
  return false;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	2000079c 	.word	0x2000079c
 8003e74:	20000060 	.word	0x20000060
 8003e78:	20000070 	.word	0x20000070
 8003e7c:	20000080 	.word	0x20000080
 8003e80:	20000090 	.word	0x20000090

08003e84 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa53 	bl	8004338 <ai_platform_network_get_error>
 8003e92:	4603      	mov	r3, r0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	2305      	movs	r3, #5
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <ai_network_create+0x28>)
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fc59 	bl	800476c <ai_platform_network_create>
 8003eba:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200004b4 	.word	0x200004b4

08003ec8 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b096      	sub	sp, #88	; 0x58
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ffe0 	bl	8003e9c <ai_network_create>
 8003edc:	4603      	mov	r3, r0
 8003ede:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8003ee0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <ai_network_create_and_init+0x24>
        return err;
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	e05d      	b.n	8003fa8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f8dd 	bl	80040b0 <ai_network_data_params_get>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f083 0301 	eor.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ffbc 	bl	8003e84 <ai_network_get_error>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8003f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f12:	e049      	b.n	8003fa8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1e:	e00e      	b.n	8003f3e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003f20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	330c      	adds	r3, #12
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f922 	bl	800417c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f40:	461a      	mov	r2, r3
 8003f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f44:	4293      	cmp	r3, r2
 8003f46:	dbeb      	blt.n	8003f20 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
 8003f52:	e00e      	b.n	8003f72 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003f54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f908 	bl	800417c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6e:	3301      	adds	r3, #1
 8003f70:	653b      	str	r3, [r7, #80]	; 0x50
 8003f72:	8b7b      	ldrh	r3, [r7, #26]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	dbeb      	blt.n	8003f54 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f107 0214 	add.w	r2, r7, #20
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f846 	bl	8004018 <ai_network_init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff71 	bl	8003e84 <ai_network_get_error>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3758      	adds	r7, #88	; 0x58
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <ai_network_inputs_get+0x2c>)
 8003fc2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <ai_network_inputs_get+0x30>)
 8003fc8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa27 	bl	8004420 <ai_platform_inputs_get>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200004b4 	.word	0x200004b4
 8003fe0:	a1c00100 	.word	0xa1c00100

08003fe4 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <ai_network_outputs_get+0x2c>)
 8003ff6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a06      	ldr	r2, [pc, #24]	; (8004014 <ai_network_outputs_get+0x30>)
 8003ffc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fae3 	bl	80045cc <ai_platform_outputs_get>
 8004006:	4603      	mov	r3, r0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200004b4 	.word	0x200004b4
 8004014:	a1c00100 	.word	0xa1c00100

08004018 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fc77 	bl	8004918 <ai_platform_network_init>
 800402a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <ai_network_init+0x1e>
 8004032:	2300      	movs	r3, #0
 8004034:	e028      	b.n	8004088 <ai_network_init+0x70>

  ai_bool ok = true;
 8004036:	2301      	movs	r3, #1
 8004038:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800403a:	6839      	ldr	r1, [r7, #0]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff feb9 	bl	8003db4 <network_configure_weights>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fe58 	bl	8003d0c <network_configure_activations>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fd40 	bl	8004af4 <ai_platform_network_post_init>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	7afb      	ldrb	r3, [r7, #11]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004086:	7afb      	ldrb	r3, [r7, #11]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fdaf 	bl	8004c04 <ai_platform_network_process>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <ai_network_data_params_get+0x12>
 80040be:	2300      	movs	r3, #0
 80040c0:	e016      	b.n	80040f0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80040c2:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <ai_network_data_params_get+0x48>)
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040cc:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <ai_network_data_params_get+0x4c>)
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040da:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80040de:	f107 0210 	add.w	r2, r7, #16
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f903 	bl	80042f4 <ai_platform_bind_network_params>
 80040ee:	4603      	mov	r3, r0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08007300 	.word	0x08007300
 80040fc:	08007308 	.word	0x08007308

08004100 <ai_buffer_get_size>:
 8004100:	b378      	cbz	r0, 8004162 <ai_buffer_get_size+0x62>
 8004102:	b410      	push	{r4}
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <ai_buffer_get_size+0x64>)
 8004108:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800410c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004110:	4293      	cmp	r3, r2
 8004112:	d01e      	beq.n	8004152 <ai_buffer_get_size+0x52>
 8004114:	6984      	ldr	r4, [r0, #24]
 8004116:	6862      	ldr	r2, [r4, #4]
 8004118:	7d03      	ldrb	r3, [r0, #20]
 800411a:	6941      	ldr	r1, [r0, #20]
 800411c:	f1a3 0301 	sub.w	r3, r3, #1
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800412a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800412e:	da0b      	bge.n	8004148 <ai_buffer_get_size+0x48>
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <ai_buffer_get_size+0x3a>
 8004134:	2802      	cmp	r0, #2
 8004136:	d007      	beq.n	8004148 <ai_buffer_get_size+0x48>
 8004138:	2302      	movs	r3, #2
 800413a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800413e:	3301      	adds	r3, #1
 8004140:	4298      	cmp	r0, r3
 8004142:	fb01 f202 	mul.w	r2, r1, r2
 8004146:	d1f3      	bne.n	8004130 <ai_buffer_get_size+0x30>
 8004148:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800414c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	2900      	cmp	r1, #0
 8004154:	d0de      	beq.n	8004114 <ai_buffer_get_size+0x14>
 8004156:	6984      	ldr	r4, [r0, #24]
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	331f      	adds	r3, #31
 800415c:	f023 021f 	bic.w	r2, r3, #31
 8004160:	e7da      	b.n	8004118 <ai_buffer_get_size+0x18>
 8004162:	4770      	bx	lr
 8004164:	000400c0 	.word	0x000400c0

08004168 <ai_buffer_array_sane>:
 8004168:	b138      	cbz	r0, 800417a <ai_buffer_array_sane+0x12>
 800416a:	6843      	ldr	r3, [r0, #4]
 800416c:	b123      	cbz	r3, 8004178 <ai_buffer_array_sane+0x10>
 800416e:	8840      	ldrh	r0, [r0, #2]
 8004170:	3800      	subs	r0, #0
 8004172:	bf18      	it	ne
 8004174:	2001      	movne	r0, #1
 8004176:	4770      	bx	lr
 8004178:	4618      	mov	r0, r3
 800417a:	4770      	bx	lr

0800417c <ai_buffer_array_item_set_address>:
 800417c:	b150      	cbz	r0, 8004194 <ai_buffer_array_item_set_address+0x18>
 800417e:	6843      	ldr	r3, [r0, #4]
 8004180:	b14b      	cbz	r3, 8004196 <ai_buffer_array_item_set_address+0x1a>
 8004182:	8840      	ldrh	r0, [r0, #2]
 8004184:	b900      	cbnz	r0, 8004188 <ai_buffer_array_item_set_address+0xc>
 8004186:	4770      	bx	lr
 8004188:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800418c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004190:	2001      	movs	r0, #1
 8004192:	604a      	str	r2, [r1, #4]
 8004194:	4770      	bx	lr
 8004196:	4618      	mov	r0, r3
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop

0800419c <_ai_platform_acquire_crc>:
 800419c:	2001      	movs	r0, #1
 800419e:	4770      	bx	lr

080041a0 <_ai_platform_release_crc>:
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop

080041a4 <ai_platform_get_weights_map>:
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d037      	beq.n	8004218 <ai_platform_get_weights_map+0x74>
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	4604      	mov	r4, r0
 80041ac:	b1a0      	cbz	r0, 80041d8 <ai_platform_get_weights_map+0x34>
 80041ae:	460f      	mov	r7, r1
 80041b0:	b191      	cbz	r1, 80041d8 <ai_platform_get_weights_map+0x34>
 80041b2:	4b25      	ldr	r3, [pc, #148]	; (8004248 <ai_platform_get_weights_map+0xa4>)
 80041b4:	6810      	ldr	r0, [r2, #0]
 80041b6:	4298      	cmp	r0, r3
 80041b8:	4615      	mov	r5, r2
 80041ba:	d00f      	beq.n	80041dc <ai_platform_get_weights_map+0x38>
 80041bc:	6855      	ldr	r5, [r2, #4]
 80041be:	b15d      	cbz	r5, 80041d8 <ai_platform_get_weights_map+0x34>
 80041c0:	682e      	ldr	r6, [r5, #0]
 80041c2:	429e      	cmp	r6, r3
 80041c4:	d02a      	beq.n	800421c <ai_platform_get_weights_map+0x78>
 80041c6:	f1a1 0001 	sub.w	r0, r1, #1
 80041ca:	6025      	str	r5, [r4, #0]
 80041cc:	fab0 f080 	clz	r0, r0
 80041d0:	0940      	lsrs	r0, r0, #5
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	42a7      	cmp	r7, r4
 80041d6:	d034      	beq.n	8004242 <ai_platform_get_weights_map+0x9e>
 80041d8:	2000      	movs	r0, #0
 80041da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041dc:	1d10      	adds	r0, r2, #4
 80041de:	f7ff ffc3 	bl	8004168 <ai_buffer_array_sane>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0f8      	beq.n	80041d8 <ai_platform_get_weights_map+0x34>
 80041e6:	88eb      	ldrh	r3, [r5, #6]
 80041e8:	429f      	cmp	r7, r3
 80041ea:	d1f5      	bne.n	80041d8 <ai_platform_get_weights_map+0x34>
 80041ec:	f04f 0e00 	mov.w	lr, #0
 80041f0:	1f23      	subs	r3, r4, #4
 80041f2:	4670      	mov	r0, lr
 80041f4:	68aa      	ldr	r2, [r5, #8]
 80041f6:	eb02 0c0e 	add.w	ip, r2, lr
 80041fa:	f10e 0e1c 	add.w	lr, lr, #28
 80041fe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004202:	b124      	cbz	r4, 800420e <ai_platform_get_weights_map+0x6a>
 8004204:	3001      	adds	r0, #1
 8004206:	4287      	cmp	r7, r0
 8004208:	f843 4f04 	str.w	r4, [r3, #4]!
 800420c:	d1f2      	bne.n	80041f4 <ai_platform_get_weights_map+0x50>
 800420e:	1a38      	subs	r0, r7, r0
 8004210:	fab0 f080 	clz	r0, r0
 8004214:	0940      	lsrs	r0, r0, #5
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004218:	2000      	movs	r0, #0
 800421a:	4770      	bx	lr
 800421c:	1f23      	subs	r3, r4, #4
 800421e:	4628      	mov	r0, r5
 8004220:	2400      	movs	r4, #0
 8004222:	e000      	b.n	8004226 <ai_platform_get_weights_map+0x82>
 8004224:	4614      	mov	r4, r2
 8004226:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800422a:	42b2      	cmp	r2, r6
 800422c:	d0d2      	beq.n	80041d4 <ai_platform_get_weights_map+0x30>
 800422e:	f843 2f04 	str.w	r2, [r3, #4]!
 8004232:	1c62      	adds	r2, r4, #1
 8004234:	4297      	cmp	r7, r2
 8004236:	d1f5      	bne.n	8004224 <ai_platform_get_weights_map+0x80>
 8004238:	3402      	adds	r4, #2
 800423a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800423e:	42b3      	cmp	r3, r6
 8004240:	d1ca      	bne.n	80041d8 <ai_platform_get_weights_map+0x34>
 8004242:	2001      	movs	r0, #1
 8004244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004246:	bf00      	nop
 8004248:	a1facade 	.word	0xa1facade

0800424c <ai_platform_get_activations_map>:
 800424c:	2a00      	cmp	r2, #0
 800424e:	d038      	beq.n	80042c2 <ai_platform_get_activations_map+0x76>
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	4604      	mov	r4, r0
 8004254:	b1a0      	cbz	r0, 8004280 <ai_platform_get_activations_map+0x34>
 8004256:	460f      	mov	r7, r1
 8004258:	b191      	cbz	r1, 8004280 <ai_platform_get_activations_map+0x34>
 800425a:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <ai_platform_get_activations_map+0xa4>)
 800425c:	6810      	ldr	r0, [r2, #0]
 800425e:	4298      	cmp	r0, r3
 8004260:	4615      	mov	r5, r2
 8004262:	d00f      	beq.n	8004284 <ai_platform_get_activations_map+0x38>
 8004264:	6a15      	ldr	r5, [r2, #32]
 8004266:	b15d      	cbz	r5, 8004280 <ai_platform_get_activations_map+0x34>
 8004268:	682e      	ldr	r6, [r5, #0]
 800426a:	429e      	cmp	r6, r3
 800426c:	d02b      	beq.n	80042c6 <ai_platform_get_activations_map+0x7a>
 800426e:	f1a1 0001 	sub.w	r0, r1, #1
 8004272:	6025      	str	r5, [r4, #0]
 8004274:	fab0 f080 	clz	r0, r0
 8004278:	0940      	lsrs	r0, r0, #5
 800427a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800427c:	42a7      	cmp	r7, r4
 800427e:	d035      	beq.n	80042ec <ai_platform_get_activations_map+0xa0>
 8004280:	2000      	movs	r0, #0
 8004282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004284:	f102 000c 	add.w	r0, r2, #12
 8004288:	f7ff ff6e 	bl	8004168 <ai_buffer_array_sane>
 800428c:	2800      	cmp	r0, #0
 800428e:	d0f7      	beq.n	8004280 <ai_platform_get_activations_map+0x34>
 8004290:	89eb      	ldrh	r3, [r5, #14]
 8004292:	429f      	cmp	r7, r3
 8004294:	d1f4      	bne.n	8004280 <ai_platform_get_activations_map+0x34>
 8004296:	f04f 0e00 	mov.w	lr, #0
 800429a:	1f23      	subs	r3, r4, #4
 800429c:	4670      	mov	r0, lr
 800429e:	692a      	ldr	r2, [r5, #16]
 80042a0:	eb02 0c0e 	add.w	ip, r2, lr
 80042a4:	f10e 0e1c 	add.w	lr, lr, #28
 80042a8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80042ac:	b124      	cbz	r4, 80042b8 <ai_platform_get_activations_map+0x6c>
 80042ae:	3001      	adds	r0, #1
 80042b0:	4287      	cmp	r7, r0
 80042b2:	f843 4f04 	str.w	r4, [r3, #4]!
 80042b6:	d1f2      	bne.n	800429e <ai_platform_get_activations_map+0x52>
 80042b8:	1a38      	subs	r0, r7, r0
 80042ba:	fab0 f080 	clz	r0, r0
 80042be:	0940      	lsrs	r0, r0, #5
 80042c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c2:	2000      	movs	r0, #0
 80042c4:	4770      	bx	lr
 80042c6:	1f23      	subs	r3, r4, #4
 80042c8:	4628      	mov	r0, r5
 80042ca:	2400      	movs	r4, #0
 80042cc:	e000      	b.n	80042d0 <ai_platform_get_activations_map+0x84>
 80042ce:	4614      	mov	r4, r2
 80042d0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80042d4:	42b2      	cmp	r2, r6
 80042d6:	d0d1      	beq.n	800427c <ai_platform_get_activations_map+0x30>
 80042d8:	f843 2f04 	str.w	r2, [r3, #4]!
 80042dc:	1c62      	adds	r2, r4, #1
 80042de:	4297      	cmp	r7, r2
 80042e0:	d1f5      	bne.n	80042ce <ai_platform_get_activations_map+0x82>
 80042e2:	3402      	adds	r4, #2
 80042e4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80042e8:	42b3      	cmp	r3, r6
 80042ea:	d1c9      	bne.n	8004280 <ai_platform_get_activations_map+0x34>
 80042ec:	2001      	movs	r0, #1
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f0:	a1facade 	.word	0xa1facade

080042f4 <ai_platform_bind_network_params>:
 80042f4:	b1a0      	cbz	r0, 8004320 <ai_platform_bind_network_params+0x2c>
 80042f6:	b1b1      	cbz	r1, 8004326 <ai_platform_bind_network_params+0x32>
 80042f8:	b1c2      	cbz	r2, 800432c <ai_platform_bind_network_params+0x38>
 80042fa:	b410      	push	{r4}
 80042fc:	4603      	mov	r3, r0
 80042fe:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <ai_platform_bind_network_params+0x40>)
 8004300:	f843 4b04 	str.w	r4, [r3], #4
 8004304:	f100 0c0c 	add.w	ip, r0, #12
 8004308:	c903      	ldmia	r1, {r0, r1}
 800430a:	e883 0003 	stmia.w	r3, {r0, r1}
 800430e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004312:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004316:	2301      	movs	r3, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	4603      	mov	r3, r0
 8004322:	4618      	mov	r0, r3
 8004324:	4770      	bx	lr
 8004326:	460b      	mov	r3, r1
 8004328:	4618      	mov	r0, r3
 800432a:	4770      	bx	lr
 800432c:	4613      	mov	r3, r2
 800432e:	4618      	mov	r0, r3
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	a1facade 	.word	0xa1facade

08004338 <ai_platform_network_get_error>:
 8004338:	b510      	push	{r4, lr}
 800433a:	b1f0      	cbz	r0, 800437a <ai_platform_network_get_error+0x42>
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <ai_platform_network_get_error+0xc4>)
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	4604      	mov	r4, r0
 8004344:	d119      	bne.n	800437a <ai_platform_network_get_error+0x42>
 8004346:	f7ff ff29 	bl	800419c <_ai_platform_acquire_crc>
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <ai_platform_network_get_error+0xc8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d03c      	beq.n	80043d2 <ai_platform_network_get_error+0x9a>
 8004358:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <ai_platform_network_get_error+0xcc>)
 800435a:	2301      	movs	r3, #1
 800435c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004360:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1fb      	bne.n	8004360 <ai_platform_network_get_error+0x28>
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <ai_platform_network_get_error+0xd0>)
 800436a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800436e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <ai_platform_network_get_error+0xd4>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d038      	beq.n	80043ea <ai_platform_network_get_error+0xb2>
 8004378:	e7fe      	b.n	8004378 <ai_platform_network_get_error+0x40>
 800437a:	f7ff ff0f 	bl	800419c <_ai_platform_acquire_crc>
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <ai_platform_network_get_error+0xc8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438a:	d010      	beq.n	80043ae <ai_platform_network_get_error+0x76>
 800438c:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <ai_platform_network_get_error+0xcc>)
 800438e:	2301      	movs	r3, #1
 8004390:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004394:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1fb      	bne.n	8004394 <ai_platform_network_get_error+0x5c>
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <ai_platform_network_get_error+0xd0>)
 800439e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80043a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <ai_platform_network_get_error+0xd4>)
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d00d      	beq.n	80043c8 <ai_platform_network_get_error+0x90>
 80043ac:	e7fe      	b.n	80043ac <ai_platform_network_get_error+0x74>
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <ai_platform_network_get_error+0xd8>)
 80043b0:	2301      	movs	r3, #1
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	6893      	ldr	r3, [r2, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1fc      	bne.n	80043b4 <ai_platform_network_get_error+0x7c>
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <ai_platform_network_get_error+0xd0>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <ai_platform_network_get_error+0xd4>)
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d000      	beq.n	80043c8 <ai_platform_network_get_error+0x90>
 80043c6:	e7fe      	b.n	80043c6 <ai_platform_network_get_error+0x8e>
 80043c8:	f7ff feea 	bl	80041a0 <_ai_platform_release_crc>
 80043cc:	f241 0010 	movw	r0, #4112	; 0x1010
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <ai_platform_network_get_error+0xd8>)
 80043d4:	2301      	movs	r3, #1
 80043d6:	6093      	str	r3, [r2, #8]
 80043d8:	6893      	ldr	r3, [r2, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1fc      	bne.n	80043d8 <ai_platform_network_get_error+0xa0>
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <ai_platform_network_get_error+0xd0>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <ai_platform_network_get_error+0xd4>)
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d107      	bne.n	80043fa <ai_platform_network_get_error+0xc2>
 80043ea:	f7ff fed9 	bl	80041a0 <_ai_platform_release_crc>
 80043ee:	f104 0010 	add.w	r0, r4, #16
 80043f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f6:	f000 be8b 	b.w	8005110 <core_get_error>
 80043fa:	e7fe      	b.n	80043fa <ai_platform_network_get_error+0xc2>
 80043fc:	a1c00100 	.word	0xa1c00100
 8004400:	e0042000 	.word	0xe0042000
 8004404:	58024000 	.word	0x58024000
 8004408:	f407a5c2 	.word	0xf407a5c2
 800440c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004410:	40023000 	.word	0x40023000

08004414 <ai_platform_network_set_error>:
 8004414:	b110      	cbz	r0, 800441c <ai_platform_network_set_error+0x8>
 8004416:	3010      	adds	r0, #16
 8004418:	f000 be80 	b.w	800511c <core_set_error>
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop

08004420 <ai_platform_inputs_get>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	b085      	sub	sp, #20
 8004426:	9102      	str	r1, [sp, #8]
 8004428:	b1f0      	cbz	r0, 8004468 <ai_platform_inputs_get+0x48>
 800442a:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <ai_platform_inputs_get+0x194>)
 800442c:	6802      	ldr	r2, [r0, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	4607      	mov	r7, r0
 8004432:	d119      	bne.n	8004468 <ai_platform_inputs_get+0x48>
 8004434:	f7ff feb2 	bl	800419c <_ai_platform_acquire_crc>
 8004438:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <ai_platform_inputs_get+0x198>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004444:	d03d      	beq.n	80044c2 <ai_platform_inputs_get+0xa2>
 8004446:	4a5d      	ldr	r2, [pc, #372]	; (80045bc <ai_platform_inputs_get+0x19c>)
 8004448:	2301      	movs	r3, #1
 800444a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800444e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1fb      	bne.n	800444e <ai_platform_inputs_get+0x2e>
 8004456:	4b5a      	ldr	r3, [pc, #360]	; (80045c0 <ai_platform_inputs_get+0x1a0>)
 8004458:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800445c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004460:	4b58      	ldr	r3, [pc, #352]	; (80045c4 <ai_platform_inputs_get+0x1a4>)
 8004462:	429a      	cmp	r2, r3
 8004464:	d039      	beq.n	80044da <ai_platform_inputs_get+0xba>
 8004466:	e7fe      	b.n	8004466 <ai_platform_inputs_get+0x46>
 8004468:	f7ff fe98 	bl	800419c <_ai_platform_acquire_crc>
 800446c:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <ai_platform_inputs_get+0x198>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d010      	beq.n	800449c <ai_platform_inputs_get+0x7c>
 800447a:	4a50      	ldr	r2, [pc, #320]	; (80045bc <ai_platform_inputs_get+0x19c>)
 800447c:	2301      	movs	r3, #1
 800447e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004482:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1fb      	bne.n	8004482 <ai_platform_inputs_get+0x62>
 800448a:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <ai_platform_inputs_get+0x1a0>)
 800448c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004490:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004494:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <ai_platform_inputs_get+0x1a4>)
 8004496:	429a      	cmp	r2, r3
 8004498:	d00d      	beq.n	80044b6 <ai_platform_inputs_get+0x96>
 800449a:	e7fe      	b.n	800449a <ai_platform_inputs_get+0x7a>
 800449c:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <ai_platform_inputs_get+0x1a8>)
 800449e:	2301      	movs	r3, #1
 80044a0:	6093      	str	r3, [r2, #8]
 80044a2:	6893      	ldr	r3, [r2, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1fc      	bne.n	80044a2 <ai_platform_inputs_get+0x82>
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <ai_platform_inputs_get+0x1a0>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	4b45      	ldr	r3, [pc, #276]	; (80045c4 <ai_platform_inputs_get+0x1a4>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d000      	beq.n	80044b6 <ai_platform_inputs_get+0x96>
 80044b4:	e7fe      	b.n	80044b4 <ai_platform_inputs_get+0x94>
 80044b6:	f7ff fe73 	bl	80041a0 <_ai_platform_release_crc>
 80044ba:	2000      	movs	r0, #0
 80044bc:	b005      	add	sp, #20
 80044be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c2:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <ai_platform_inputs_get+0x1a8>)
 80044c4:	2301      	movs	r3, #1
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	6893      	ldr	r3, [r2, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1fc      	bne.n	80044c8 <ai_platform_inputs_get+0xa8>
 80044ce:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <ai_platform_inputs_get+0x1a0>)
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <ai_platform_inputs_get+0x1a4>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d155      	bne.n	8004586 <ai_platform_inputs_get+0x166>
 80044da:	f7ff fe61 	bl	80041a0 <_ai_platform_release_crc>
 80044de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d051      	beq.n	8004588 <ai_platform_inputs_get+0x168>
 80044e4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80044e8:	f1ba 0f00 	cmp.w	sl, #0
 80044ec:	d04c      	beq.n	8004588 <ai_platform_inputs_get+0x168>
 80044ee:	f04f 0b00 	mov.w	fp, #0
 80044f2:	465d      	mov	r5, fp
 80044f4:	9703      	str	r7, [sp, #12]
 80044f6:	e016      	b.n	8004526 <ai_platform_inputs_get+0x106>
 80044f8:	9901      	ldr	r1, [sp, #4]
 80044fa:	2301      	movs	r3, #1
 80044fc:	507b      	str	r3, [r7, r1]
 80044fe:	69b1      	ldr	r1, [r6, #24]
 8004500:	6849      	ldr	r1, [r1, #4]
 8004502:	6121      	str	r1, [r4, #16]
 8004504:	f04f 0301 	mov.w	r3, #1
 8004508:	7523      	strb	r3, [r4, #20]
 800450a:	e9c4 c200 	strd	ip, r2, [r4]
 800450e:	6962      	ldr	r2, [r4, #20]
 8004510:	60a0      	str	r0, [r4, #8]
 8004512:	2300      	movs	r3, #0
 8004514:	f369 221f 	bfi	r2, r9, #8, #24
 8004518:	f8c4 8018 	str.w	r8, [r4, #24]
 800451c:	60e3      	str	r3, [r4, #12]
 800451e:	3501      	adds	r5, #1
 8004520:	f10b 0b1c 	add.w	fp, fp, #28
 8004524:	6162      	str	r2, [r4, #20]
 8004526:	f8ba 3000 	ldrh.w	r3, [sl]
 800452a:	42ab      	cmp	r3, r5
 800452c:	b2aa      	uxth	r2, r5
 800452e:	d93a      	bls.n	80045a6 <ai_platform_inputs_get+0x186>
 8004530:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004534:	00e9      	lsls	r1, r5, #3
 8004536:	9101      	str	r1, [sp, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d034      	beq.n	80045a6 <ai_platform_inputs_get+0x186>
 800453c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004540:	2e00      	cmp	r6, #0
 8004542:	d030      	beq.n	80045a6 <ai_platform_inputs_get+0x186>
 8004544:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004548:	69b2      	ldr	r2, [r6, #24]
 800454a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800454e:	6810      	ldr	r0, [r2, #0]
 8004550:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004554:	68b3      	ldr	r3, [r6, #8]
 8004556:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800455a:	f001 fc93 	bl	8005e84 <ai_array_to_buffer_fmt>
 800455e:	69b1      	ldr	r1, [r6, #24]
 8004560:	4684      	mov	ip, r0
 8004562:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004566:	688a      	ldr	r2, [r1, #8]
 8004568:	445c      	add	r4, fp
 800456a:	2800      	cmp	r0, #0
 800456c:	d0c8      	beq.n	8004500 <ai_platform_inputs_get+0xe0>
 800456e:	2100      	movs	r1, #0
 8004570:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004574:	6831      	ldr	r1, [r6, #0]
 8004576:	6041      	str	r1, [r0, #4]
 8004578:	b111      	cbz	r1, 8004580 <ai_platform_inputs_get+0x160>
 800457a:	8849      	ldrh	r1, [r1, #2]
 800457c:	2900      	cmp	r1, #0
 800457e:	d1bb      	bne.n	80044f8 <ai_platform_inputs_get+0xd8>
 8004580:	69b1      	ldr	r1, [r6, #24]
 8004582:	2000      	movs	r0, #0
 8004584:	e7bc      	b.n	8004500 <ai_platform_inputs_get+0xe0>
 8004586:	e7fe      	b.n	8004586 <ai_platform_inputs_get+0x166>
 8004588:	2218      	movs	r2, #24
 800458a:	2111      	movs	r1, #17
 800458c:	f107 0010 	add.w	r0, r7, #16
 8004590:	f000 fdc4 	bl	800511c <core_set_error>
 8004594:	2200      	movs	r2, #0
 8004596:	4610      	mov	r0, r2
 8004598:	9b02      	ldr	r3, [sp, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d08e      	beq.n	80044bc <ai_platform_inputs_get+0x9c>
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	b005      	add	sp, #20
 80045a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a6:	9f03      	ldr	r7, [sp, #12]
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	d0ed      	beq.n	8004588 <ai_platform_inputs_get+0x168>
 80045ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 80045b0:	6858      	ldr	r0, [r3, #4]
 80045b2:	e7f1      	b.n	8004598 <ai_platform_inputs_get+0x178>
 80045b4:	a1c00100 	.word	0xa1c00100
 80045b8:	e0042000 	.word	0xe0042000
 80045bc:	58024000 	.word	0x58024000
 80045c0:	f407a5c2 	.word	0xf407a5c2
 80045c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80045c8:	40023000 	.word	0x40023000

080045cc <ai_platform_outputs_get>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	b085      	sub	sp, #20
 80045d2:	9102      	str	r1, [sp, #8]
 80045d4:	b1f0      	cbz	r0, 8004614 <ai_platform_outputs_get+0x48>
 80045d6:	4b5f      	ldr	r3, [pc, #380]	; (8004754 <ai_platform_outputs_get+0x188>)
 80045d8:	6802      	ldr	r2, [r0, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	4607      	mov	r7, r0
 80045de:	d119      	bne.n	8004614 <ai_platform_outputs_get+0x48>
 80045e0:	f7ff fddc 	bl	800419c <_ai_platform_acquire_crc>
 80045e4:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <ai_platform_outputs_get+0x18c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f0:	d03d      	beq.n	800466e <ai_platform_outputs_get+0xa2>
 80045f2:	4a5a      	ldr	r2, [pc, #360]	; (800475c <ai_platform_outputs_get+0x190>)
 80045f4:	2301      	movs	r3, #1
 80045f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80045fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1fb      	bne.n	80045fa <ai_platform_outputs_get+0x2e>
 8004602:	4b57      	ldr	r3, [pc, #348]	; (8004760 <ai_platform_outputs_get+0x194>)
 8004604:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004608:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800460c:	4b55      	ldr	r3, [pc, #340]	; (8004764 <ai_platform_outputs_get+0x198>)
 800460e:	429a      	cmp	r2, r3
 8004610:	d039      	beq.n	8004686 <ai_platform_outputs_get+0xba>
 8004612:	e7fe      	b.n	8004612 <ai_platform_outputs_get+0x46>
 8004614:	f7ff fdc2 	bl	800419c <_ai_platform_acquire_crc>
 8004618:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <ai_platform_outputs_get+0x18c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d010      	beq.n	8004648 <ai_platform_outputs_get+0x7c>
 8004626:	4a4d      	ldr	r2, [pc, #308]	; (800475c <ai_platform_outputs_get+0x190>)
 8004628:	2301      	movs	r3, #1
 800462a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800462e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1fb      	bne.n	800462e <ai_platform_outputs_get+0x62>
 8004636:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <ai_platform_outputs_get+0x194>)
 8004638:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800463c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <ai_platform_outputs_get+0x198>)
 8004642:	429a      	cmp	r2, r3
 8004644:	d00d      	beq.n	8004662 <ai_platform_outputs_get+0x96>
 8004646:	e7fe      	b.n	8004646 <ai_platform_outputs_get+0x7a>
 8004648:	4a47      	ldr	r2, [pc, #284]	; (8004768 <ai_platform_outputs_get+0x19c>)
 800464a:	2301      	movs	r3, #1
 800464c:	6093      	str	r3, [r2, #8]
 800464e:	6893      	ldr	r3, [r2, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1fc      	bne.n	800464e <ai_platform_outputs_get+0x82>
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <ai_platform_outputs_get+0x194>)
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	4b42      	ldr	r3, [pc, #264]	; (8004764 <ai_platform_outputs_get+0x198>)
 800465c:	429a      	cmp	r2, r3
 800465e:	d000      	beq.n	8004662 <ai_platform_outputs_get+0x96>
 8004660:	e7fe      	b.n	8004660 <ai_platform_outputs_get+0x94>
 8004662:	f7ff fd9d 	bl	80041a0 <_ai_platform_release_crc>
 8004666:	2000      	movs	r0, #0
 8004668:	b005      	add	sp, #20
 800466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466e:	4a3e      	ldr	r2, [pc, #248]	; (8004768 <ai_platform_outputs_get+0x19c>)
 8004670:	2301      	movs	r3, #1
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	6893      	ldr	r3, [r2, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1fc      	bne.n	8004674 <ai_platform_outputs_get+0xa8>
 800467a:	4b39      	ldr	r3, [pc, #228]	; (8004760 <ai_platform_outputs_get+0x194>)
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	4b38      	ldr	r3, [pc, #224]	; (8004764 <ai_platform_outputs_get+0x198>)
 8004682:	429a      	cmp	r2, r3
 8004684:	d150      	bne.n	8004728 <ai_platform_outputs_get+0x15c>
 8004686:	f7ff fd8b 	bl	80041a0 <_ai_platform_release_crc>
 800468a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d958      	bls.n	8004742 <ai_platform_outputs_get+0x176>
 8004690:	f04f 0b00 	mov.w	fp, #0
 8004694:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004698:	9703      	str	r7, [sp, #12]
 800469a:	465d      	mov	r5, fp
 800469c:	e016      	b.n	80046cc <ai_platform_outputs_get+0x100>
 800469e:	9901      	ldr	r1, [sp, #4]
 80046a0:	2301      	movs	r3, #1
 80046a2:	507b      	str	r3, [r7, r1]
 80046a4:	69b1      	ldr	r1, [r6, #24]
 80046a6:	6849      	ldr	r1, [r1, #4]
 80046a8:	6121      	str	r1, [r4, #16]
 80046aa:	f04f 0301 	mov.w	r3, #1
 80046ae:	7523      	strb	r3, [r4, #20]
 80046b0:	e9c4 c200 	strd	ip, r2, [r4]
 80046b4:	6962      	ldr	r2, [r4, #20]
 80046b6:	60a0      	str	r0, [r4, #8]
 80046b8:	2300      	movs	r3, #0
 80046ba:	f369 221f 	bfi	r2, r9, #8, #24
 80046be:	f8c4 8018 	str.w	r8, [r4, #24]
 80046c2:	60e3      	str	r3, [r4, #12]
 80046c4:	3501      	adds	r5, #1
 80046c6:	f10b 0b1c 	add.w	fp, fp, #28
 80046ca:	6162      	str	r2, [r4, #20]
 80046cc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	b2aa      	uxth	r2, r5
 80046d4:	d929      	bls.n	800472a <ai_platform_outputs_get+0x15e>
 80046d6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80046da:	00e9      	lsls	r1, r5, #3
 80046dc:	9101      	str	r1, [sp, #4]
 80046de:	b323      	cbz	r3, 800472a <ai_platform_outputs_get+0x15e>
 80046e0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80046e4:	b30e      	cbz	r6, 800472a <ai_platform_outputs_get+0x15e>
 80046e6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80046ea:	69b2      	ldr	r2, [r6, #24]
 80046ec:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80046f0:	6810      	ldr	r0, [r2, #0]
 80046f2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80046f6:	68b3      	ldr	r3, [r6, #8]
 80046f8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80046fc:	f001 fbc2 	bl	8005e84 <ai_array_to_buffer_fmt>
 8004700:	69b1      	ldr	r1, [r6, #24]
 8004702:	4684      	mov	ip, r0
 8004704:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	445c      	add	r4, fp
 800470c:	2800      	cmp	r0, #0
 800470e:	d0ca      	beq.n	80046a6 <ai_platform_outputs_get+0xda>
 8004710:	2100      	movs	r1, #0
 8004712:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004716:	6831      	ldr	r1, [r6, #0]
 8004718:	6041      	str	r1, [r0, #4]
 800471a:	b111      	cbz	r1, 8004722 <ai_platform_outputs_get+0x156>
 800471c:	8849      	ldrh	r1, [r1, #2]
 800471e:	2900      	cmp	r1, #0
 8004720:	d1bd      	bne.n	800469e <ai_platform_outputs_get+0xd2>
 8004722:	69b1      	ldr	r1, [r6, #24]
 8004724:	2000      	movs	r0, #0
 8004726:	e7be      	b.n	80046a6 <ai_platform_outputs_get+0xda>
 8004728:	e7fe      	b.n	8004728 <ai_platform_outputs_get+0x15c>
 800472a:	9f03      	ldr	r7, [sp, #12]
 800472c:	b14a      	cbz	r2, 8004742 <ai_platform_outputs_get+0x176>
 800472e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004732:	6858      	ldr	r0, [r3, #4]
 8004734:	9b02      	ldr	r3, [sp, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d096      	beq.n	8004668 <ai_platform_outputs_get+0x9c>
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	b005      	add	sp, #20
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	2218      	movs	r2, #24
 8004744:	2111      	movs	r1, #17
 8004746:	f107 0010 	add.w	r0, r7, #16
 800474a:	f000 fce7 	bl	800511c <core_set_error>
 800474e:	2200      	movs	r2, #0
 8004750:	4610      	mov	r0, r2
 8004752:	e7ef      	b.n	8004734 <ai_platform_outputs_get+0x168>
 8004754:	a1c00100 	.word	0xa1c00100
 8004758:	e0042000 	.word	0xe0042000
 800475c:	58024000 	.word	0x58024000
 8004760:	f407a5c2 	.word	0xf407a5c2
 8004764:	b5e8b5cd 	.word	0xb5e8b5cd
 8004768:	40023000 	.word	0x40023000

0800476c <ai_platform_network_create>:
 800476c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004770:	b083      	sub	sp, #12
 8004772:	4606      	mov	r6, r0
 8004774:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004778:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800477c:	4615      	mov	r5, r2
 800477e:	461f      	mov	r7, r3
 8004780:	f7ff fd0c 	bl	800419c <_ai_platform_acquire_crc>
 8004784:	b188      	cbz	r0, 80047aa <ai_platform_network_create+0x3e>
 8004786:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <ai_platform_network_create+0x190>)
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800478e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004792:	4603      	mov	r3, r0
 8004794:	d00e      	beq.n	80047b4 <ai_platform_network_create+0x48>
 8004796:	4a5a      	ldr	r2, [pc, #360]	; (8004900 <ai_platform_network_create+0x194>)
 8004798:	2118      	movs	r1, #24
 800479a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800479e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80047a2:	2918      	cmp	r1, #24
 80047a4:	d018      	beq.n	80047d8 <ai_platform_network_create+0x6c>
 80047a6:	f7ff fcfb 	bl	80041a0 <_ai_platform_release_crc>
 80047aa:	f244 1033 	movw	r0, #16691	; 0x4133
 80047ae:	b003      	add	sp, #12
 80047b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047b4:	4a53      	ldr	r2, [pc, #332]	; (8004904 <ai_platform_network_create+0x198>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	6091      	str	r1, [r2, #8]
 80047ba:	2114      	movs	r1, #20
 80047bc:	e001      	b.n	80047c2 <ai_platform_network_create+0x56>
 80047be:	3901      	subs	r1, #1
 80047c0:	d002      	beq.n	80047c8 <ai_platform_network_create+0x5c>
 80047c2:	6894      	ldr	r4, [r2, #8]
 80047c4:	2c00      	cmp	r4, #0
 80047c6:	d1fa      	bne.n	80047be <ai_platform_network_create+0x52>
 80047c8:	4a4e      	ldr	r2, [pc, #312]	; (8004904 <ai_platform_network_create+0x198>)
 80047ca:	6891      	ldr	r1, [r2, #8]
 80047cc:	b911      	cbnz	r1, 80047d4 <ai_platform_network_create+0x68>
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	3201      	adds	r2, #1
 80047d2:	d008      	beq.n	80047e6 <ai_platform_network_create+0x7a>
 80047d4:	4618      	mov	r0, r3
 80047d6:	e7e6      	b.n	80047a6 <ai_platform_network_create+0x3a>
 80047d8:	2101      	movs	r1, #1
 80047da:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80047de:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80047e2:	2900      	cmp	r1, #0
 80047e4:	d1fb      	bne.n	80047de <ai_platform_network_create+0x72>
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fcda 	bl	80041a0 <_ai_platform_release_crc>
 80047ec:	f7ff fcd6 	bl	800419c <_ai_platform_acquire_crc>
 80047f0:	4b42      	ldr	r3, [pc, #264]	; (80048fc <ai_platform_network_create+0x190>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d010      	beq.n	8004820 <ai_platform_network_create+0xb4>
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <ai_platform_network_create+0x194>)
 8004800:	2201      	movs	r2, #1
 8004802:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004806:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800480a:	2900      	cmp	r1, #0
 800480c:	d1fb      	bne.n	8004806 <ai_platform_network_create+0x9a>
 800480e:	4a3e      	ldr	r2, [pc, #248]	; (8004908 <ai_platform_network_create+0x19c>)
 8004810:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004814:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004818:	4b3c      	ldr	r3, [pc, #240]	; (800490c <ai_platform_network_create+0x1a0>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d00c      	beq.n	8004838 <ai_platform_network_create+0xcc>
 800481e:	e7fe      	b.n	800481e <ai_platform_network_create+0xb2>
 8004820:	4a38      	ldr	r2, [pc, #224]	; (8004904 <ai_platform_network_create+0x198>)
 8004822:	2301      	movs	r3, #1
 8004824:	6093      	str	r3, [r2, #8]
 8004826:	6893      	ldr	r3, [r2, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1fc      	bne.n	8004826 <ai_platform_network_create+0xba>
 800482c:	4b36      	ldr	r3, [pc, #216]	; (8004908 <ai_platform_network_create+0x19c>)
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <ai_platform_network_create+0x1a0>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d122      	bne.n	800487e <ai_platform_network_create+0x112>
 8004838:	f7ff fcb2 	bl	80041a0 <_ai_platform_release_crc>
 800483c:	b38e      	cbz	r6, 80048a2 <ai_platform_network_create+0x136>
 800483e:	4b34      	ldr	r3, [pc, #208]	; (8004910 <ai_platform_network_create+0x1a4>)
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	6035      	str	r5, [r6, #0]
 8004844:	f000 fc62 	bl	800510c <core_init>
 8004848:	b1d0      	cbz	r0, 8004880 <ai_platform_network_create+0x114>
 800484a:	f7ff fca7 	bl	800419c <_ai_platform_acquire_crc>
 800484e:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <ai_platform_network_create+0x190>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485a:	d025      	beq.n	80048a8 <ai_platform_network_create+0x13c>
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <ai_platform_network_create+0x194>)
 800485e:	2301      	movs	r3, #1
 8004860:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004864:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1fb      	bne.n	8004864 <ai_platform_network_create+0xf8>
 800486c:	4b26      	ldr	r3, [pc, #152]	; (8004908 <ai_platform_network_create+0x19c>)
 800486e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004872:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <ai_platform_network_create+0x1a0>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d022      	beq.n	80048c2 <ai_platform_network_create+0x156>
 800487c:	e7fe      	b.n	800487c <ai_platform_network_create+0x110>
 800487e:	e7fe      	b.n	800487e <ai_platform_network_create+0x112>
 8004880:	2430      	movs	r4, #48	; 0x30
 8004882:	2300      	movs	r3, #0
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	2610      	movs	r6, #16
 8004888:	464a      	mov	r2, r9
 800488a:	4641      	mov	r1, r8
 800488c:	4638      	mov	r0, r7
 800488e:	f001 fb9f 	bl	8005fd0 <ai_version_get>
 8004892:	4603      	mov	r3, r0
 8004894:	2000      	movs	r0, #0
 8004896:	f364 0007 	bfi	r0, r4, #0, #8
 800489a:	64ab      	str	r3, [r5, #72]	; 0x48
 800489c:	f366 201f 	bfi	r0, r6, #8, #24
 80048a0:	e785      	b.n	80047ae <ai_platform_network_create+0x42>
 80048a2:	f241 0010 	movw	r0, #4112	; 0x1010
 80048a6:	e782      	b.n	80047ae <ai_platform_network_create+0x42>
 80048a8:	4a16      	ldr	r2, [pc, #88]	; (8004904 <ai_platform_network_create+0x198>)
 80048aa:	2301      	movs	r3, #1
 80048ac:	6093      	str	r3, [r2, #8]
 80048ae:	6893      	ldr	r3, [r2, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1fc      	bne.n	80048ae <ai_platform_network_create+0x142>
 80048b4:	4b14      	ldr	r3, [pc, #80]	; (8004908 <ai_platform_network_create+0x19c>)
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	4b14      	ldr	r3, [pc, #80]	; (800490c <ai_platform_network_create+0x1a0>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d000      	beq.n	80048c2 <ai_platform_network_create+0x156>
 80048c0:	e7fe      	b.n	80048c0 <ai_platform_network_create+0x154>
 80048c2:	f7ff fc6d 	bl	80041a0 <_ai_platform_release_crc>
 80048c6:	2200      	movs	r2, #0
 80048c8:	4641      	mov	r1, r8
 80048ca:	4638      	mov	r0, r7
 80048cc:	f001 fb80 	bl	8005fd0 <ai_version_get>
 80048d0:	2200      	movs	r2, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	2105      	movs	r1, #5
 80048d6:	2001      	movs	r0, #1
 80048d8:	f001 fb7a 	bl	8005fd0 <ai_version_get>
 80048dc:	4284      	cmp	r4, r0
 80048de:	d001      	beq.n	80048e4 <ai_platform_network_create+0x178>
 80048e0:	2401      	movs	r4, #1
 80048e2:	e7ce      	b.n	8004882 <ai_platform_network_create+0x116>
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <ai_platform_network_create+0x1a8>)
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	a801      	add	r0, sp, #4
 80048ea:	f000 fc23 	bl	8005134 <ai_check_custom_types>
 80048ee:	b110      	cbz	r0, 80048f6 <ai_platform_network_create+0x18a>
 80048f0:	2600      	movs	r6, #0
 80048f2:	4634      	mov	r4, r6
 80048f4:	e7c8      	b.n	8004888 <ai_platform_network_create+0x11c>
 80048f6:	2402      	movs	r4, #2
 80048f8:	e7c3      	b.n	8004882 <ai_platform_network_create+0x116>
 80048fa:	bf00      	nop
 80048fc:	e0042000 	.word	0xe0042000
 8004900:	58024000 	.word	0x58024000
 8004904:	40023000 	.word	0x40023000
 8004908:	f407a5c2 	.word	0xf407a5c2
 800490c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004910:	a1c00100 	.word	0xa1c00100
 8004914:	84048403 	.word	0x84048403

08004918 <ai_platform_network_init>:
 8004918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800491c:	b1f8      	cbz	r0, 800495e <ai_platform_network_init+0x46>
 800491e:	4b6e      	ldr	r3, [pc, #440]	; (8004ad8 <ai_platform_network_init+0x1c0>)
 8004920:	6802      	ldr	r2, [r0, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	4604      	mov	r4, r0
 8004926:	d11a      	bne.n	800495e <ai_platform_network_init+0x46>
 8004928:	460e      	mov	r6, r1
 800492a:	f7ff fc37 	bl	800419c <_ai_platform_acquire_crc>
 800492e:	4b6b      	ldr	r3, [pc, #428]	; (8004adc <ai_platform_network_init+0x1c4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493a:	d03d      	beq.n	80049b8 <ai_platform_network_init+0xa0>
 800493c:	4a68      	ldr	r2, [pc, #416]	; (8004ae0 <ai_platform_network_init+0x1c8>)
 800493e:	2301      	movs	r3, #1
 8004940:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004944:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1fb      	bne.n	8004944 <ai_platform_network_init+0x2c>
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <ai_platform_network_init+0x1cc>)
 800494e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004952:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004956:	4b64      	ldr	r3, [pc, #400]	; (8004ae8 <ai_platform_network_init+0x1d0>)
 8004958:	429a      	cmp	r2, r3
 800495a:	d039      	beq.n	80049d0 <ai_platform_network_init+0xb8>
 800495c:	e7fe      	b.n	800495c <ai_platform_network_init+0x44>
 800495e:	f7ff fc1d 	bl	800419c <_ai_platform_acquire_crc>
 8004962:	4b5e      	ldr	r3, [pc, #376]	; (8004adc <ai_platform_network_init+0x1c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496e:	d010      	beq.n	8004992 <ai_platform_network_init+0x7a>
 8004970:	4a5b      	ldr	r2, [pc, #364]	; (8004ae0 <ai_platform_network_init+0x1c8>)
 8004972:	2301      	movs	r3, #1
 8004974:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004978:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1fb      	bne.n	8004978 <ai_platform_network_init+0x60>
 8004980:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <ai_platform_network_init+0x1cc>)
 8004982:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004986:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800498a:	4b57      	ldr	r3, [pc, #348]	; (8004ae8 <ai_platform_network_init+0x1d0>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d00d      	beq.n	80049ac <ai_platform_network_init+0x94>
 8004990:	e7fe      	b.n	8004990 <ai_platform_network_init+0x78>
 8004992:	4a56      	ldr	r2, [pc, #344]	; (8004aec <ai_platform_network_init+0x1d4>)
 8004994:	2301      	movs	r3, #1
 8004996:	6093      	str	r3, [r2, #8]
 8004998:	6893      	ldr	r3, [r2, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1fc      	bne.n	8004998 <ai_platform_network_init+0x80>
 800499e:	4b51      	ldr	r3, [pc, #324]	; (8004ae4 <ai_platform_network_init+0x1cc>)
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	4b50      	ldr	r3, [pc, #320]	; (8004ae8 <ai_platform_network_init+0x1d0>)
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d000      	beq.n	80049ac <ai_platform_network_init+0x94>
 80049aa:	e7fe      	b.n	80049aa <ai_platform_network_init+0x92>
 80049ac:	f7ff fbf8 	bl	80041a0 <_ai_platform_release_crc>
 80049b0:	2600      	movs	r6, #0
 80049b2:	4630      	mov	r0, r6
 80049b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b8:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <ai_platform_network_init+0x1d4>)
 80049ba:	2301      	movs	r3, #1
 80049bc:	6093      	str	r3, [r2, #8]
 80049be:	6893      	ldr	r3, [r2, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1fc      	bne.n	80049be <ai_platform_network_init+0xa6>
 80049c4:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <ai_platform_network_init+0x1cc>)
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <ai_platform_network_init+0x1d0>)
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d11c      	bne.n	8004a0a <ai_platform_network_init+0xf2>
 80049d0:	f7ff fbe6 	bl	80041a0 <_ai_platform_release_crc>
 80049d4:	2e00      	cmp	r6, #0
 80049d6:	d06f      	beq.n	8004ab8 <ai_platform_network_init+0x1a0>
 80049d8:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <ai_platform_network_init+0x1d8>)
 80049da:	6832      	ldr	r2, [r6, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d115      	bne.n	8004a0c <ai_platform_network_init+0xf4>
 80049e0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80049e4:	6933      	ldr	r3, [r6, #16]
 80049e6:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80049ea:	89f7      	ldrh	r7, [r6, #14]
 80049ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ee:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80049f2:	2303      	movs	r3, #3
 80049f4:	84e7      	strh	r7, [r4, #38]	; 0x26
 80049f6:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80049fa:	60e3      	str	r3, [r4, #12]
 80049fc:	4620      	mov	r0, r4
 80049fe:	4626      	mov	r6, r4
 8004a00:	f000 fbc2 	bl	8005188 <ai_layers_init_all>
 8004a04:	4630      	mov	r0, r6
 8004a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0a:	e7fe      	b.n	8004a0a <ai_platform_network_init+0xf2>
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4635      	mov	r5, r6
 8004a12:	6876      	ldr	r6, [r6, #4]
 8004a14:	f7ff fb74 	bl	8004100 <ai_buffer_get_size>
 8004a18:	f105 081c 	add.w	r8, r5, #28
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4640      	mov	r0, r8
 8004a22:	6a2f      	ldr	r7, [r5, #32]
 8004a24:	f7ff fb6c 	bl	8004100 <ai_buffer_get_size>
 8004a28:	f1b9 0f00 	cmp.w	r9, #0
 8004a2c:	d025      	beq.n	8004a7a <ai_platform_network_init+0x162>
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4696      	mov	lr, r2
 8004a32:	bb30      	cbnz	r0, 8004a82 <ai_platform_network_init+0x16a>
 8004a34:	4680      	mov	r8, r0
 8004a36:	4607      	mov	r7, r0
 8004a38:	b376      	cbz	r6, 8004a98 <ai_platform_network_init+0x180>
 8004a3a:	8be3      	ldrh	r3, [r4, #30]
 8004a3c:	4573      	cmp	r3, lr
 8004a3e:	d323      	bcc.n	8004a88 <ai_platform_network_init+0x170>
 8004a40:	b142      	cbz	r2, 8004a54 <ai_platform_network_init+0x13c>
 8004a42:	46ac      	mov	ip, r5
 8004a44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004a48:	6a25      	ldr	r5, [r4, #32]
 8004a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004a50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a54:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004a56:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	42bb      	cmp	r3, r7
 8004a5e:	83a6      	strh	r6, [r4, #28]
 8004a60:	d323      	bcc.n	8004aaa <ai_platform_network_init+0x192>
 8004a62:	b37f      	cbz	r7, 8004ac4 <ai_platform_network_init+0x1ac>
 8004a64:	46c4      	mov	ip, r8
 8004a66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004a6a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a6e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004a72:	46b6      	mov	lr, r6
 8004a74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a78:	e7bb      	b.n	80049f2 <ai_platform_network_init+0xda>
 8004a7a:	464a      	mov	r2, r9
 8004a7c:	46ce      	mov	lr, r9
 8004a7e:	464d      	mov	r5, r9
 8004a80:	e7d7      	b.n	8004a32 <ai_platform_network_init+0x11a>
 8004a82:	b30f      	cbz	r7, 8004ac8 <ai_platform_network_init+0x1b0>
 8004a84:	2701      	movs	r7, #1
 8004a86:	e7d7      	b.n	8004a38 <ai_platform_network_init+0x120>
 8004a88:	2212      	movs	r2, #18
 8004a8a:	2116      	movs	r1, #22
 8004a8c:	f104 0010 	add.w	r0, r4, #16
 8004a90:	f000 fb44 	bl	800511c <core_set_error>
 8004a94:	2600      	movs	r6, #0
 8004a96:	e78c      	b.n	80049b2 <ai_platform_network_init+0x9a>
 8004a98:	f1b9 0f00 	cmp.w	r9, #0
 8004a9c:	d0cd      	beq.n	8004a3a <ai_platform_network_init+0x122>
 8004a9e:	2110      	movs	r1, #16
 8004aa0:	2212      	movs	r2, #18
 8004aa2:	1860      	adds	r0, r4, r1
 8004aa4:	f000 fb3a 	bl	800511c <core_set_error>
 8004aa8:	e783      	b.n	80049b2 <ai_platform_network_init+0x9a>
 8004aaa:	2213      	movs	r2, #19
 8004aac:	2116      	movs	r1, #22
 8004aae:	f104 0010 	add.w	r0, r4, #16
 8004ab2:	f000 fb33 	bl	800511c <core_set_error>
 8004ab6:	e77c      	b.n	80049b2 <ai_platform_network_init+0x9a>
 8004ab8:	2110      	movs	r1, #16
 8004aba:	2211      	movs	r2, #17
 8004abc:	1860      	adds	r0, r4, r1
 8004abe:	f000 fb2d 	bl	800511c <core_set_error>
 8004ac2:	e776      	b.n	80049b2 <ai_platform_network_init+0x9a>
 8004ac4:	46be      	mov	lr, r7
 8004ac6:	e794      	b.n	80049f2 <ai_platform_network_init+0xda>
 8004ac8:	2110      	movs	r1, #16
 8004aca:	2213      	movs	r2, #19
 8004acc:	1860      	adds	r0, r4, r1
 8004ace:	f000 fb25 	bl	800511c <core_set_error>
 8004ad2:	463e      	mov	r6, r7
 8004ad4:	e76d      	b.n	80049b2 <ai_platform_network_init+0x9a>
 8004ad6:	bf00      	nop
 8004ad8:	a1c00100 	.word	0xa1c00100
 8004adc:	e0042000 	.word	0xe0042000
 8004ae0:	58024000 	.word	0x58024000
 8004ae4:	f407a5c2 	.word	0xf407a5c2
 8004ae8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004aec:	40023000 	.word	0x40023000
 8004af0:	a1facade 	.word	0xa1facade

08004af4 <ai_platform_network_post_init>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	b1f0      	cbz	r0, 8004b36 <ai_platform_network_post_init+0x42>
 8004af8:	4b3c      	ldr	r3, [pc, #240]	; (8004bec <ai_platform_network_post_init+0xf8>)
 8004afa:	6802      	ldr	r2, [r0, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	4604      	mov	r4, r0
 8004b00:	d119      	bne.n	8004b36 <ai_platform_network_post_init+0x42>
 8004b02:	f7ff fb4b 	bl	800419c <_ai_platform_acquire_crc>
 8004b06:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <ai_platform_network_post_init+0xfc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d03b      	beq.n	8004b8c <ai_platform_network_post_init+0x98>
 8004b14:	4a37      	ldr	r2, [pc, #220]	; (8004bf4 <ai_platform_network_post_init+0x100>)
 8004b16:	2301      	movs	r3, #1
 8004b18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1fb      	bne.n	8004b1c <ai_platform_network_post_init+0x28>
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <ai_platform_network_post_init+0x104>)
 8004b26:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <ai_platform_network_post_init+0x108>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d037      	beq.n	8004ba4 <ai_platform_network_post_init+0xb0>
 8004b34:	e7fe      	b.n	8004b34 <ai_platform_network_post_init+0x40>
 8004b36:	f7ff fb31 	bl	800419c <_ai_platform_acquire_crc>
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <ai_platform_network_post_init+0xfc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b46:	d010      	beq.n	8004b6a <ai_platform_network_post_init+0x76>
 8004b48:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <ai_platform_network_post_init+0x100>)
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1fb      	bne.n	8004b50 <ai_platform_network_post_init+0x5c>
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <ai_platform_network_post_init+0x104>)
 8004b5a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004b5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b62:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <ai_platform_network_post_init+0x108>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d00d      	beq.n	8004b84 <ai_platform_network_post_init+0x90>
 8004b68:	e7fe      	b.n	8004b68 <ai_platform_network_post_init+0x74>
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <ai_platform_network_post_init+0x10c>)
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	6093      	str	r3, [r2, #8]
 8004b70:	6893      	ldr	r3, [r2, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1fc      	bne.n	8004b70 <ai_platform_network_post_init+0x7c>
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <ai_platform_network_post_init+0x104>)
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <ai_platform_network_post_init+0x108>)
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d000      	beq.n	8004b84 <ai_platform_network_post_init+0x90>
 8004b82:	e7fe      	b.n	8004b82 <ai_platform_network_post_init+0x8e>
 8004b84:	f7ff fb0c 	bl	80041a0 <_ai_platform_release_crc>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <ai_platform_network_post_init+0x10c>)
 8004b8e:	2301      	movs	r3, #1
 8004b90:	6093      	str	r3, [r2, #8]
 8004b92:	6893      	ldr	r3, [r2, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1fc      	bne.n	8004b92 <ai_platform_network_post_init+0x9e>
 8004b98:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <ai_platform_network_post_init+0x104>)
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <ai_platform_network_post_init+0x108>)
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d11a      	bne.n	8004bda <ai_platform_network_post_init+0xe6>
 8004ba4:	f7ff fafc 	bl	80041a0 <_ai_platform_release_crc>
 8004ba8:	68e3      	ldr	r3, [r4, #12]
 8004baa:	f013 0502 	ands.w	r5, r3, #2
 8004bae:	d015      	beq.n	8004bdc <ai_platform_network_post_init+0xe8>
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 faf7 	bl	80051a4 <ai_layers_post_init_all>
 8004bb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bb8:	b16b      	cbz	r3, 8004bd6 <ai_platform_network_post_init+0xe2>
 8004bba:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004bbc:	e007      	b.n	8004bce <ai_platform_network_post_init+0xda>
 8004bbe:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004bc2:	4798      	blx	r3
 8004bc4:	692b      	ldr	r3, [r5, #16]
 8004bc6:	42ab      	cmp	r3, r5
 8004bc8:	d005      	beq.n	8004bd6 <ai_platform_network_post_init+0xe2>
 8004bca:	b123      	cbz	r3, 8004bd6 <ai_platform_network_post_init+0xe2>
 8004bcc:	461d      	mov	r5, r3
 8004bce:	4629      	mov	r1, r5
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	d1f3      	bne.n	8004bbe <ai_platform_network_post_init+0xca>
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	bd38      	pop	{r3, r4, r5, pc}
 8004bda:	e7fe      	b.n	8004bda <ai_platform_network_post_init+0xe6>
 8004bdc:	2210      	movs	r2, #16
 8004bde:	2111      	movs	r1, #17
 8004be0:	18a0      	adds	r0, r4, r2
 8004be2:	f000 fa9b 	bl	800511c <core_set_error>
 8004be6:	4628      	mov	r0, r5
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
 8004bea:	bf00      	nop
 8004bec:	a1c00100 	.word	0xa1c00100
 8004bf0:	e0042000 	.word	0xe0042000
 8004bf4:	58024000 	.word	0x58024000
 8004bf8:	f407a5c2 	.word	0xf407a5c2
 8004bfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c00:	40023000 	.word	0x40023000

08004c04 <ai_platform_network_process>:
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	460e      	mov	r6, r1
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	4693      	mov	fp, r2
 8004c0e:	4605      	mov	r5, r0
 8004c10:	b120      	cbz	r0, 8004c1c <ai_platform_network_process+0x18>
 8004c12:	4bb8      	ldr	r3, [pc, #736]	; (8004ef4 <ai_platform_network_process+0x2f0>)
 8004c14:	6802      	ldr	r2, [r0, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	bf18      	it	ne
 8004c1a:	2500      	movne	r5, #0
 8004c1c:	f7ff fabe 	bl	800419c <_ai_platform_acquire_crc>
 8004c20:	4bb5      	ldr	r3, [pc, #724]	; (8004ef8 <ai_platform_network_process+0x2f4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2c:	d010      	beq.n	8004c50 <ai_platform_network_process+0x4c>
 8004c2e:	4ab3      	ldr	r2, [pc, #716]	; (8004efc <ai_platform_network_process+0x2f8>)
 8004c30:	2301      	movs	r3, #1
 8004c32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1fb      	bne.n	8004c36 <ai_platform_network_process+0x32>
 8004c3e:	4bb0      	ldr	r3, [pc, #704]	; (8004f00 <ai_platform_network_process+0x2fc>)
 8004c40:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c48:	4bae      	ldr	r3, [pc, #696]	; (8004f04 <ai_platform_network_process+0x300>)
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d00d      	beq.n	8004c6a <ai_platform_network_process+0x66>
 8004c4e:	e7fe      	b.n	8004c4e <ai_platform_network_process+0x4a>
 8004c50:	4aad      	ldr	r2, [pc, #692]	; (8004f08 <ai_platform_network_process+0x304>)
 8004c52:	2301      	movs	r3, #1
 8004c54:	6093      	str	r3, [r2, #8]
 8004c56:	6893      	ldr	r3, [r2, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1fc      	bne.n	8004c56 <ai_platform_network_process+0x52>
 8004c5c:	4ba8      	ldr	r3, [pc, #672]	; (8004f00 <ai_platform_network_process+0x2fc>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	4ba8      	ldr	r3, [pc, #672]	; (8004f04 <ai_platform_network_process+0x300>)
 8004c64:	429a      	cmp	r2, r3
 8004c66:	f040 812c 	bne.w	8004ec2 <ai_platform_network_process+0x2be>
 8004c6a:	f7ff fa99 	bl	80041a0 <_ai_platform_release_crc>
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	f000 8154 	beq.w	8004f1c <ai_platform_network_process+0x318>
 8004c74:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8124 	beq.w	8004ec4 <ai_platform_network_process+0x2c0>
 8004c7c:	68eb      	ldr	r3, [r5, #12]
 8004c7e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2700      	movs	r7, #0
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	616f      	str	r7, [r5, #20]
 8004c8c:	f040 813e 	bne.w	8004f0c <ai_platform_network_process+0x308>
 8004c90:	2e00      	cmp	r6, #0
 8004c92:	f000 811d 	beq.w	8004ed0 <ai_platform_network_process+0x2cc>
 8004c96:	f1ba 0f00 	cmp.w	sl, #0
 8004c9a:	f000 8119 	beq.w	8004ed0 <ai_platform_network_process+0x2cc>
 8004c9e:	f8ba 3000 	ldrh.w	r3, [sl]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8114 	beq.w	8004ed0 <ai_platform_network_process+0x2cc>
 8004ca8:	69b3      	ldr	r3, [r6, #24]
 8004caa:	f8cd b00c 	str.w	fp, [sp, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004cb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d072      	beq.n	8004da2 <ai_platform_network_process+0x19e>
 8004cbc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004cc0:	2c00      	cmp	r4, #0
 8004cc2:	d06e      	beq.n	8004da2 <ai_platform_network_process+0x19e>
 8004cc4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004cc8:	f8d3 9000 	ldr.w	r9, [r3]
 8004ccc:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004cd0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004cd4:	f000 81de 	beq.w	8005094 <ai_platform_network_process+0x490>
 8004cd8:	69a3      	ldr	r3, [r4, #24]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4630      	mov	r0, r6
 8004cde:	685d      	ldr	r5, [r3, #4]
 8004ce0:	f7ff fa0e 	bl	8004100 <ai_buffer_get_size>
 8004ce4:	4285      	cmp	r5, r0
 8004ce6:	f0c0 811b 	bcc.w	8004f20 <ai_platform_network_process+0x31c>
 8004cea:	68e0      	ldr	r0, [r4, #12]
 8004cec:	69b1      	ldr	r1, [r6, #24]
 8004cee:	68c2      	ldr	r2, [r0, #12]
 8004cf0:	68cb      	ldr	r3, [r1, #12]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f040 8114 	bne.w	8004f20 <ai_platform_network_process+0x31c>
 8004cf8:	6882      	ldr	r2, [r0, #8]
 8004cfa:	688b      	ldr	r3, [r1, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	f040 810f 	bne.w	8004f20 <ai_platform_network_process+0x31c>
 8004d02:	6842      	ldr	r2, [r0, #4]
 8004d04:	684b      	ldr	r3, [r1, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	f040 810a 	bne.w	8004f20 <ai_platform_network_process+0x31c>
 8004d0c:	69a3      	ldr	r3, [r4, #24]
 8004d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d12:	f001 f94b 	bl	8005fac <ai_array_get_data_byte_size>
 8004d16:	4605      	mov	r5, r0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f001 f95f 	bl	8005fdc <get_tensor_byte_size>
 8004d1e:	4285      	cmp	r5, r0
 8004d20:	f0c0 80fe 	bcc.w	8004f20 <ai_platform_network_process+0x31c>
 8004d24:	69a3      	ldr	r3, [r4, #24]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	f001 f8ac 	bl	8005e84 <ai_array_to_buffer_fmt>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	4058      	eors	r0, r3
 8004d30:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004d34:	f040 81b9 	bne.w	80050aa <ai_platform_network_process+0x4a6>
 8004d38:	6873      	ldr	r3, [r6, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 81ac 	beq.w	8005098 <ai_platform_network_process+0x494>
 8004d40:	69b3      	ldr	r3, [r6, #24]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 819c 	beq.w	8005082 <ai_platform_network_process+0x47e>
 8004d4a:	9a01      	ldr	r2, [sp, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	bf38      	it	cc
 8004d50:	461a      	movcc	r2, r3
 8004d52:	4620      	mov	r0, r4
 8004d54:	9201      	str	r2, [sp, #4]
 8004d56:	f001 f941 	bl	8005fdc <get_tensor_byte_size>
 8004d5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d5e:	69b3      	ldr	r3, [r6, #24]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	f8c8 300c 	str.w	r3, [r8, #12]
 8004d6a:	6871      	ldr	r1, [r6, #4]
 8004d6c:	f8c8 1004 	str.w	r1, [r8, #4]
 8004d70:	440b      	add	r3, r1
 8004d72:	f849 300b 	str.w	r3, [r9, fp]
 8004d76:	69a0      	ldr	r0, [r4, #24]
 8004d78:	6803      	ldr	r3, [r0, #0]
 8004d7a:	009a      	lsls	r2, r3, #2
 8004d7c:	f107 0701 	add.w	r7, r7, #1
 8004d80:	f106 061c 	add.w	r6, r6, #28
 8004d84:	f100 80af 	bmi.w	8004ee6 <ai_platform_network_process+0x2e2>
 8004d88:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	4419      	add	r1, r3
 8004d90:	6081      	str	r1, [r0, #8]
 8004d92:	69a3      	ldr	r3, [r4, #24]
 8004d94:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	f8ba 3000 	ldrh.w	r3, [sl]
 8004d9e:	42bb      	cmp	r3, r7
 8004da0:	d888      	bhi.n	8004cb4 <ai_platform_network_process+0xb0>
 8004da2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8004da6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8004da8:	f1bb 0f00 	cmp.w	fp, #0
 8004dac:	f000 8186 	beq.w	80050bc <ai_platform_network_process+0x4b8>
 8004db0:	2a01      	cmp	r2, #1
 8004db2:	f240 815e 	bls.w	8005072 <ai_platform_network_process+0x46e>
 8004db6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8004dba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8157 	beq.w	8005072 <ai_platform_network_process+0x46e>
 8004dc4:	465e      	mov	r6, fp
 8004dc6:	2700      	movs	r7, #0
 8004dc8:	462c      	mov	r4, r5
 8004dca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80b4 	beq.w	8004f3c <ai_platform_network_process+0x338>
 8004dd4:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8004dd8:	2d00      	cmp	r5, #0
 8004dda:	f000 80af 	beq.w	8004f3c <ai_platform_network_process+0x338>
 8004dde:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004de2:	f8d3 8000 	ldr.w	r8, [r3]
 8004de6:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8004dea:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004dee:	f000 8171 	beq.w	80050d4 <ai_platform_network_process+0x4d0>
 8004df2:	69ab      	ldr	r3, [r5, #24]
 8004df4:	2101      	movs	r1, #1
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff f980 	bl	8004100 <ai_buffer_get_size>
 8004e00:	9b02      	ldr	r3, [sp, #8]
 8004e02:	4283      	cmp	r3, r0
 8004e04:	f0c0 8134 	bcc.w	8005070 <ai_platform_network_process+0x46c>
 8004e08:	68e8      	ldr	r0, [r5, #12]
 8004e0a:	69b1      	ldr	r1, [r6, #24]
 8004e0c:	68c2      	ldr	r2, [r0, #12]
 8004e0e:	68cb      	ldr	r3, [r1, #12]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	f040 812d 	bne.w	8005070 <ai_platform_network_process+0x46c>
 8004e16:	6882      	ldr	r2, [r0, #8]
 8004e18:	688b      	ldr	r3, [r1, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	f040 8128 	bne.w	8005070 <ai_platform_network_process+0x46c>
 8004e20:	6842      	ldr	r2, [r0, #4]
 8004e22:	684b      	ldr	r3, [r1, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	f040 8123 	bne.w	8005070 <ai_platform_network_process+0x46c>
 8004e2a:	69ab      	ldr	r3, [r5, #24]
 8004e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e30:	f001 f8bc 	bl	8005fac <ai_array_get_data_byte_size>
 8004e34:	9002      	str	r0, [sp, #8]
 8004e36:	4628      	mov	r0, r5
 8004e38:	f001 f8d0 	bl	8005fdc <get_tensor_byte_size>
 8004e3c:	9b02      	ldr	r3, [sp, #8]
 8004e3e:	4283      	cmp	r3, r0
 8004e40:	f0c0 8116 	bcc.w	8005070 <ai_platform_network_process+0x46c>
 8004e44:	69ab      	ldr	r3, [r5, #24]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	f001 f81c 	bl	8005e84 <ai_array_to_buffer_fmt>
 8004e4c:	6833      	ldr	r3, [r6, #0]
 8004e4e:	4058      	eors	r0, r3
 8004e50:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004e54:	f040 8136 	bne.w	80050c4 <ai_platform_network_process+0x4c0>
 8004e58:	6873      	ldr	r3, [r6, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 814d 	beq.w	80050fa <ai_platform_network_process+0x4f6>
 8004e60:	69b3      	ldr	r3, [r6, #24]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 813f 	beq.w	80050e8 <ai_platform_network_process+0x4e4>
 8004e6a:	9a01      	ldr	r2, [sp, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	bf38      	it	cc
 8004e70:	461a      	movcc	r2, r3
 8004e72:	4628      	mov	r0, r5
 8004e74:	9201      	str	r2, [sp, #4]
 8004e76:	f001 f8b1 	bl	8005fdc <get_tensor_byte_size>
 8004e7a:	f8ca 0008 	str.w	r0, [sl, #8]
 8004e7e:	69b3      	ldr	r3, [r6, #24]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	fb00 f303 	mul.w	r3, r0, r3
 8004e86:	f8ca 300c 	str.w	r3, [sl, #12]
 8004e8a:	6871      	ldr	r1, [r6, #4]
 8004e8c:	f8ca 1004 	str.w	r1, [sl, #4]
 8004e90:	440b      	add	r3, r1
 8004e92:	f848 300b 	str.w	r3, [r8, fp]
 8004e96:	69a8      	ldr	r0, [r5, #24]
 8004e98:	6803      	ldr	r3, [r0, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	f107 0701 	add.w	r7, r7, #1
 8004ea0:	f106 061c 	add.w	r6, r6, #28
 8004ea4:	d445      	bmi.n	8004f32 <ai_platform_network_process+0x32e>
 8004ea6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	4419      	add	r1, r3
 8004eae:	6081      	str	r1, [r0, #8]
 8004eb0:	69ab      	ldr	r3, [r5, #24]
 8004eb2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004ebc:	429f      	cmp	r7, r3
 8004ebe:	d384      	bcc.n	8004dca <ai_platform_network_process+0x1c6>
 8004ec0:	e03c      	b.n	8004f3c <ai_platform_network_process+0x338>
 8004ec2:	e7fe      	b.n	8004ec2 <ai_platform_network_process+0x2be>
 8004ec4:	68ea      	ldr	r2, [r5, #12]
 8004ec6:	616b      	str	r3, [r5, #20]
 8004ec8:	f002 0203 	and.w	r2, r2, #3
 8004ecc:	2a03      	cmp	r2, #3
 8004ece:	d11d      	bne.n	8004f0c <ai_platform_network_process+0x308>
 8004ed0:	2217      	movs	r2, #23
 8004ed2:	2112      	movs	r1, #18
 8004ed4:	f105 0010 	add.w	r0, r5, #16
 8004ed8:	f000 f920 	bl	800511c <core_set_error>
 8004edc:	2400      	movs	r4, #0
 8004ede:	4620      	mov	r0, r4
 8004ee0:	b005      	add	sp, #20
 8004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	f8ba 3000 	ldrh.w	r3, [sl]
 8004eea:	429f      	cmp	r7, r3
 8004eec:	f4ff aee2 	bcc.w	8004cb4 <ai_platform_network_process+0xb0>
 8004ef0:	e757      	b.n	8004da2 <ai_platform_network_process+0x19e>
 8004ef2:	bf00      	nop
 8004ef4:	a1c00100 	.word	0xa1c00100
 8004ef8:	e0042000 	.word	0xe0042000
 8004efc:	58024000 	.word	0x58024000
 8004f00:	f407a5c2 	.word	0xf407a5c2
 8004f04:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f08:	40023000 	.word	0x40023000
 8004f0c:	2230      	movs	r2, #48	; 0x30
 8004f0e:	2111      	movs	r1, #17
 8004f10:	f105 0010 	add.w	r0, r5, #16
 8004f14:	f000 f902 	bl	800511c <core_set_error>
 8004f18:	2400      	movs	r4, #0
 8004f1a:	e7e0      	b.n	8004ede <ai_platform_network_process+0x2da>
 8004f1c:	462c      	mov	r4, r5
 8004f1e:	e7de      	b.n	8004ede <ai_platform_network_process+0x2da>
 8004f20:	9d02      	ldr	r5, [sp, #8]
 8004f22:	2218      	movs	r2, #24
 8004f24:	2112      	movs	r1, #18
 8004f26:	f105 0010 	add.w	r0, r5, #16
 8004f2a:	f000 f8f7 	bl	800511c <core_set_error>
 8004f2e:	2400      	movs	r4, #0
 8004f30:	e7d5      	b.n	8004ede <ai_platform_network_process+0x2da>
 8004f32:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004f36:	429f      	cmp	r7, r3
 8004f38:	f4ff af47 	bcc.w	8004dca <ai_platform_network_process+0x1c6>
 8004f3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f40:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004f42:	82a3      	strh	r3, [r4, #20]
 8004f44:	4625      	mov	r5, r4
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	f040 808c 	bne.w	8005064 <ai_platform_network_process+0x460>
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	4617      	mov	r7, r2
 8004f50:	8aec      	ldrh	r4, [r5, #22]
 8004f52:	429c      	cmp	r4, r3
 8004f54:	bf38      	it	cc
 8004f56:	46ab      	movcc	fp, r5
 8004f58:	d2c1      	bcs.n	8004ede <ai_platform_network_process+0x2da>
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	d030      	beq.n	8004fc0 <ai_platform_network_process+0x3bc>
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	e014      	b.n	8004f8e <ai_platform_network_process+0x38a>
 8004f64:	6882      	ldr	r2, [r0, #8]
 8004f66:	68c5      	ldr	r5, [r0, #12]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	1b52      	subs	r2, r2, r5
 8004f6c:	4413      	add	r3, r2
 8004f6e:	6083      	str	r3, [r0, #8]
 8004f70:	698b      	ldr	r3, [r1, #24]
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004f7a:	f859 200a 	ldr.w	r2, [r9, sl]
 8004f7e:	440b      	add	r3, r1
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bf24      	itt	cs
 8004f84:	68e3      	ldrcs	r3, [r4, #12]
 8004f86:	1ad3      	subcs	r3, r2, r3
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	f108 0801 	add.w	r8, r8, #1
 8004f8e:	8833      	ldrh	r3, [r6, #0]
 8004f90:	4543      	cmp	r3, r8
 8004f92:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8004f96:	d913      	bls.n	8004fc0 <ai_platform_network_process+0x3bc>
 8004f98:	6873      	ldr	r3, [r6, #4]
 8004f9a:	b18b      	cbz	r3, 8004fc0 <ai_platform_network_process+0x3bc>
 8004f9c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004fa0:	b171      	cbz	r1, 8004fc0 <ai_platform_network_process+0x3bc>
 8004fa2:	6988      	ldr	r0, [r1, #24]
 8004fa4:	68b2      	ldr	r2, [r6, #8]
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	f8d2 9000 	ldr.w	r9, [r2]
 8004fac:	009d      	lsls	r5, r3, #2
 8004fae:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004fb2:	d5d7      	bpl.n	8004f64 <ai_platform_network_process+0x360>
 8004fb4:	6881      	ldr	r1, [r0, #8]
 8004fb6:	68a2      	ldr	r2, [r4, #8]
 8004fb8:	6860      	ldr	r0, [r4, #4]
 8004fba:	f000 fedd 	bl	8005d78 <st_int8_copy>
 8004fbe:	e7da      	b.n	8004f76 <ai_platform_network_process+0x372>
 8004fc0:	4658      	mov	r0, fp
 8004fc2:	f000 f903 	bl	80051cc <ai_layers_forward_all>
 8004fc6:	2f00      	cmp	r7, #0
 8004fc8:	d03d      	beq.n	8005046 <ai_platform_network_process+0x442>
 8004fca:	2400      	movs	r4, #0
 8004fcc:	e016      	b.n	8004ffc <ai_platform_network_process+0x3f8>
 8004fce:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004fd2:	f859 100a 	ldr.w	r1, [r9, sl]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf24      	itt	cs
 8004fdc:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004fe0:	1acb      	subcs	r3, r1, r3
 8004fe2:	f8c8 3004 	str.w	r3, [r8, #4]
 8004fe6:	6981      	ldr	r1, [r0, #24]
 8004fe8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004fec:	1b52      	subs	r2, r2, r5
 8004fee:	4413      	add	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
 8004ff2:	6983      	ldr	r3, [r0, #24]
 8004ff4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	883b      	ldrh	r3, [r7, #0]
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	d921      	bls.n	8005046 <ai_platform_network_process+0x442>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	b1fb      	cbz	r3, 8005046 <ai_platform_network_process+0x442>
 8005006:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800500a:	b1e0      	cbz	r0, 8005046 <ai_platform_network_process+0x442>
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	6983      	ldr	r3, [r0, #24]
 8005010:	f8d2 9000 	ldr.w	r9, [r2]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800501c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005020:	d5d5      	bpl.n	8004fce <ai_platform_network_process+0x3ca>
 8005022:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005026:	6898      	ldr	r0, [r3, #8]
 8005028:	f000 fea6 	bl	8005d78 <st_int8_copy>
 800502c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005030:	f859 200a 	ldr.w	r2, [r9, sl]
 8005034:	440b      	add	r3, r1
 8005036:	4293      	cmp	r3, r2
 8005038:	bf24      	itt	cs
 800503a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800503e:	1ad3      	subcs	r3, r2, r3
 8005040:	f8c8 3004 	str.w	r3, [r8, #4]
 8005044:	e7d9      	b.n	8004ffa <ai_platform_network_process+0x3f6>
 8005046:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800504a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800504e:	3401      	adds	r4, #1
 8005050:	b2a4      	uxth	r4, r4
 8005052:	42a3      	cmp	r3, r4
 8005054:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005058:	f63f af7f 	bhi.w	8004f5a <ai_platform_network_process+0x356>
 800505c:	4620      	mov	r0, r4
 800505e:	b005      	add	sp, #20
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	2a01      	cmp	r2, #1
 8005066:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005068:	d03c      	beq.n	80050e4 <ai_platform_network_process+0x4e0>
 800506a:	f106 070c 	add.w	r7, r6, #12
 800506e:	e76f      	b.n	8004f50 <ai_platform_network_process+0x34c>
 8005070:	4625      	mov	r5, r4
 8005072:	2218      	movs	r2, #24
 8005074:	2113      	movs	r1, #19
 8005076:	f105 0010 	add.w	r0, r5, #16
 800507a:	f000 f84f 	bl	800511c <core_set_error>
 800507e:	2400      	movs	r4, #0
 8005080:	e72d      	b.n	8004ede <ai_platform_network_process+0x2da>
 8005082:	9d02      	ldr	r5, [sp, #8]
 8005084:	4604      	mov	r4, r0
 8005086:	2221      	movs	r2, #33	; 0x21
 8005088:	2112      	movs	r1, #18
 800508a:	f105 0010 	add.w	r0, r5, #16
 800508e:	f000 f845 	bl	800511c <core_set_error>
 8005092:	e724      	b.n	8004ede <ai_platform_network_process+0x2da>
 8005094:	9d02      	ldr	r5, [sp, #8]
 8005096:	e71b      	b.n	8004ed0 <ai_platform_network_process+0x2cc>
 8005098:	9d02      	ldr	r5, [sp, #8]
 800509a:	4604      	mov	r4, r0
 800509c:	2217      	movs	r2, #23
 800509e:	2112      	movs	r1, #18
 80050a0:	f105 0010 	add.w	r0, r5, #16
 80050a4:	f000 f83a 	bl	800511c <core_set_error>
 80050a8:	e719      	b.n	8004ede <ai_platform_network_process+0x2da>
 80050aa:	9d02      	ldr	r5, [sp, #8]
 80050ac:	2219      	movs	r2, #25
 80050ae:	2112      	movs	r1, #18
 80050b0:	f105 0010 	add.w	r0, r5, #16
 80050b4:	f000 f832 	bl	800511c <core_set_error>
 80050b8:	2400      	movs	r4, #0
 80050ba:	e710      	b.n	8004ede <ai_platform_network_process+0x2da>
 80050bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80050c0:	82ab      	strh	r3, [r5, #20]
 80050c2:	e740      	b.n	8004f46 <ai_platform_network_process+0x342>
 80050c4:	f104 0010 	add.w	r0, r4, #16
 80050c8:	2219      	movs	r2, #25
 80050ca:	2113      	movs	r1, #19
 80050cc:	f000 f826 	bl	800511c <core_set_error>
 80050d0:	2400      	movs	r4, #0
 80050d2:	e704      	b.n	8004ede <ai_platform_network_process+0x2da>
 80050d4:	f104 0010 	add.w	r0, r4, #16
 80050d8:	2217      	movs	r2, #23
 80050da:	2113      	movs	r1, #19
 80050dc:	f000 f81e 	bl	800511c <core_set_error>
 80050e0:	4654      	mov	r4, sl
 80050e2:	e6fc      	b.n	8004ede <ai_platform_network_process+0x2da>
 80050e4:	2700      	movs	r7, #0
 80050e6:	e733      	b.n	8004f50 <ai_platform_network_process+0x34c>
 80050e8:	4625      	mov	r5, r4
 80050ea:	2221      	movs	r2, #33	; 0x21
 80050ec:	4604      	mov	r4, r0
 80050ee:	2113      	movs	r1, #19
 80050f0:	f105 0010 	add.w	r0, r5, #16
 80050f4:	f000 f812 	bl	800511c <core_set_error>
 80050f8:	e6f1      	b.n	8004ede <ai_platform_network_process+0x2da>
 80050fa:	4625      	mov	r5, r4
 80050fc:	2217      	movs	r2, #23
 80050fe:	4604      	mov	r4, r0
 8005100:	2113      	movs	r1, #19
 8005102:	f105 0010 	add.w	r0, r5, #16
 8005106:	f000 f809 	bl	800511c <core_set_error>
 800510a:	e6e8      	b.n	8004ede <ai_platform_network_process+0x2da>

0800510c <core_init>:
 800510c:	2001      	movs	r0, #1
 800510e:	4770      	bx	lr

08005110 <core_get_error>:
 8005110:	4603      	mov	r3, r0
 8005112:	2200      	movs	r2, #0
 8005114:	6800      	ldr	r0, [r0, #0]
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop

0800511c <core_set_error>:
 800511c:	4603      	mov	r3, r0
 800511e:	7800      	ldrb	r0, [r0, #0]
 8005120:	b108      	cbz	r0, 8005126 <core_set_error+0xa>
 8005122:	2000      	movs	r0, #0
 8005124:	4770      	bx	lr
 8005126:	7019      	strb	r1, [r3, #0]
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	f362 211f 	bfi	r1, r2, #8, #24
 800512e:	2001      	movs	r0, #1
 8005130:	6019      	str	r1, [r3, #0]
 8005132:	4770      	bx	lr

08005134 <ai_check_custom_types>:
 8005134:	b082      	sub	sp, #8
 8005136:	4b13      	ldr	r3, [pc, #76]	; (8005184 <ai_check_custom_types+0x50>)
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	b118      	cbz	r0, 8005144 <ai_check_custom_types+0x10>
 800513c:	7803      	ldrb	r3, [r0, #0]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d002      	beq.n	8005148 <ai_check_custom_types+0x14>
 8005142:	2000      	movs	r0, #0
 8005144:	b002      	add	sp, #8
 8005146:	4770      	bx	lr
 8005148:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <ai_check_custom_types+0x26>
 8005150:	2001      	movs	r0, #1
 8005152:	f080 0001 	eor.w	r0, r0, #1
 8005156:	b002      	add	sp, #8
 8005158:	4770      	bx	lr
 800515a:	7842      	ldrb	r2, [r0, #1]
 800515c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005160:	429a      	cmp	r2, r3
 8005162:	f100 0001 	add.w	r0, r0, #1
 8005166:	d1f3      	bne.n	8005150 <ai_check_custom_types+0x1c>
 8005168:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800516c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005170:	429a      	cmp	r2, r3
 8005172:	d1ed      	bne.n	8005150 <ai_check_custom_types+0x1c>
 8005174:	7842      	ldrb	r2, [r0, #1]
 8005176:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800517a:	429a      	cmp	r2, r3
 800517c:	d1e8      	bne.n	8005150 <ai_check_custom_types+0x1c>
 800517e:	2000      	movs	r0, #0
 8005180:	e7e7      	b.n	8005152 <ai_check_custom_types+0x1e>
 8005182:	bf00      	nop
 8005184:	84048403 	.word	0x84048403

08005188 <ai_layers_init_all>:
 8005188:	4601      	mov	r1, r0
 800518a:	2000      	movs	r0, #0
 800518c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800518e:	b143      	cbz	r3, 80051a2 <ai_layers_init_all+0x1a>
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	60d9      	str	r1, [r3, #12]
 8005194:	429a      	cmp	r2, r3
 8005196:	f100 0001 	add.w	r0, r0, #1
 800519a:	d002      	beq.n	80051a2 <ai_layers_init_all+0x1a>
 800519c:	b10a      	cbz	r2, 80051a2 <ai_layers_init_all+0x1a>
 800519e:	4613      	mov	r3, r2
 80051a0:	e7f5      	b.n	800518e <ai_layers_init_all+0x6>
 80051a2:	4770      	bx	lr

080051a4 <ai_layers_post_init_all>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80051a8:	2500      	movs	r5, #0
 80051aa:	b16c      	cbz	r4, 80051c8 <ai_layers_post_init_all+0x24>
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	07db      	lsls	r3, r3, #31
 80051b0:	d504      	bpl.n	80051bc <ai_layers_post_init_all+0x18>
 80051b2:	6a23      	ldr	r3, [r4, #32]
 80051b4:	4620      	mov	r0, r4
 80051b6:	b10b      	cbz	r3, 80051bc <ai_layers_post_init_all+0x18>
 80051b8:	4798      	blx	r3
 80051ba:	3501      	adds	r5, #1
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	42a3      	cmp	r3, r4
 80051c0:	d002      	beq.n	80051c8 <ai_layers_post_init_all+0x24>
 80051c2:	b10b      	cbz	r3, 80051c8 <ai_layers_post_init_all+0x24>
 80051c4:	461c      	mov	r4, r3
 80051c6:	e7f0      	b.n	80051aa <ai_layers_post_init_all+0x6>
 80051c8:	4628      	mov	r0, r5
 80051ca:	bd38      	pop	{r3, r4, r5, pc}

080051cc <ai_layers_forward_all>:
 80051cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80051d4:	4604      	mov	r4, r0
 80051d6:	f1b8 0f00 	cmp.w	r8, #0
 80051da:	d02b      	beq.n	8005234 <ai_layers_forward_all+0x68>
 80051dc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80051de:	6381      	str	r1, [r0, #56]	; 0x38
 80051e0:	b321      	cbz	r1, 800522c <ai_layers_forward_all+0x60>
 80051e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80051e4:	2001      	movs	r0, #1
 80051e6:	47c0      	blx	r8
 80051e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80051ea:	b1fe      	cbz	r6, 800522c <ai_layers_forward_all+0x60>
 80051ec:	2700      	movs	r7, #0
 80051ee:	4631      	mov	r1, r6
 80051f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051f2:	2002      	movs	r0, #2
 80051f4:	47c0      	blx	r8
 80051f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80051f8:	4628      	mov	r0, r5
 80051fa:	696b      	ldr	r3, [r5, #20]
 80051fc:	4798      	blx	r3
 80051fe:	692e      	ldr	r6, [r5, #16]
 8005200:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005202:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005204:	42b5      	cmp	r5, r6
 8005206:	f04f 0003 	mov.w	r0, #3
 800520a:	d007      	beq.n	800521c <ai_layers_forward_all+0x50>
 800520c:	47c0      	blx	r8
 800520e:	3701      	adds	r7, #1
 8005210:	63a6      	str	r6, [r4, #56]	; 0x38
 8005212:	2e00      	cmp	r6, #0
 8005214:	d1eb      	bne.n	80051ee <ai_layers_forward_all+0x22>
 8005216:	4638      	mov	r0, r7
 8005218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800521c:	2003      	movs	r0, #3
 800521e:	47c0      	blx	r8
 8005220:	2300      	movs	r3, #0
 8005222:	3701      	adds	r7, #1
 8005224:	63a3      	str	r3, [r4, #56]	; 0x38
 8005226:	4638      	mov	r0, r7
 8005228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522c:	2700      	movs	r7, #0
 800522e:	4638      	mov	r0, r7
 8005230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005234:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005236:	6385      	str	r5, [r0, #56]	; 0x38
 8005238:	2d00      	cmp	r5, #0
 800523a:	d0f7      	beq.n	800522c <ai_layers_forward_all+0x60>
 800523c:	4647      	mov	r7, r8
 800523e:	696b      	ldr	r3, [r5, #20]
 8005240:	4628      	mov	r0, r5
 8005242:	4798      	blx	r3
 8005244:	462b      	mov	r3, r5
 8005246:	692d      	ldr	r5, [r5, #16]
 8005248:	429d      	cmp	r5, r3
 800524a:	d004      	beq.n	8005256 <ai_layers_forward_all+0x8a>
 800524c:	63a5      	str	r5, [r4, #56]	; 0x38
 800524e:	3701      	adds	r7, #1
 8005250:	2d00      	cmp	r5, #0
 8005252:	d1f4      	bne.n	800523e <ai_layers_forward_all+0x72>
 8005254:	e7df      	b.n	8005216 <ai_layers_forward_all+0x4a>
 8005256:	2300      	movs	r3, #0
 8005258:	63a3      	str	r3, [r4, #56]	; 0x38
 800525a:	3701      	adds	r7, #1
 800525c:	e7db      	b.n	8005216 <ai_layers_forward_all+0x4a>
 800525e:	bf00      	nop

08005260 <forward_dense>:
 8005260:	6983      	ldr	r3, [r0, #24]
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	2a00      	cmp	r2, #0
 8005266:	f000 8181 	beq.w	800556c <forward_dense+0x30c>
 800526a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526e:	ed2d 8b02 	vpush	{d8}
 8005272:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005276:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800527a:	b095      	sub	sp, #84	; 0x54
 800527c:	b105      	cbz	r5, 8005280 <forward_dense+0x20>
 800527e:	682d      	ldr	r5, [r5, #0]
 8005280:	2a01      	cmp	r2, #1
 8005282:	f000 828f 	beq.w	80057a4 <forward_dense+0x544>
 8005286:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800528a:	b106      	cbz	r6, 800528e <forward_dense+0x2e>
 800528c:	6836      	ldr	r6, [r6, #0]
 800528e:	2a02      	cmp	r2, #2
 8005290:	f000 816e 	beq.w	8005570 <forward_dense+0x310>
 8005294:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005298:	930b      	str	r3, [sp, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 8274 	beq.w	8005788 <forward_dense+0x528>
 80052a0:	4619      	mov	r1, r3
 80052a2:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80052a6:	6809      	ldr	r1, [r1, #0]
 80052a8:	910d      	str	r1, [sp, #52]	; 0x34
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	f240 826e 	bls.w	800578c <forward_dense+0x52c>
 80052b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052b6:	460b      	mov	r3, r1
 80052b8:	68e8      	ldr	r0, [r5, #12]
 80052ba:	68f7      	ldr	r7, [r6, #12]
 80052bc:	6840      	ldr	r0, [r0, #4]
 80052be:	6999      	ldr	r1, [r3, #24]
 80052c0:	9013      	str	r0, [sp, #76]	; 0x4c
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	680b      	ldr	r3, [r1, #0]
 80052c6:	9012      	str	r0, [sp, #72]	; 0x48
 80052c8:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80052cc:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80052d0:	fb00 f404 	mul.w	r4, r0, r4
 80052d4:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80052d8:	fa4e f000 	asr.w	r0, lr, r0
 80052dc:	2a03      	cmp	r2, #3
 80052de:	9010      	str	r0, [sp, #64]	; 0x40
 80052e0:	f000 825d 	beq.w	800579e <forward_dense+0x53e>
 80052e4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80052e8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	f000 8246 	beq.w	800577e <forward_dense+0x51e>
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	2a00      	cmp	r2, #0
 80052f6:	f000 8242 	beq.w	800577e <forward_dense+0x51e>
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005300:	f000 822c 	beq.w	800575c <forward_dense+0x4fc>
 8005304:	2b08      	cmp	r3, #8
 8005306:	f000 8229 	beq.w	800575c <forward_dense+0x4fc>
 800530a:	f04f 0b00 	mov.w	fp, #0
 800530e:	69b2      	ldr	r2, [r6, #24]
 8005310:	69ab      	ldr	r3, [r5, #24]
 8005312:	6891      	ldr	r1, [r2, #8]
 8005314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	6952      	ldr	r2, [r2, #20]
 800531a:	9106      	str	r1, [sp, #24]
 800531c:	fb07 f404 	mul.w	r4, r7, r4
 8005320:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005326:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800532a:	4281      	cmp	r1, r0
 800532c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8005330:	900e      	str	r0, [sp, #56]	; 0x38
 8005332:	940c      	str	r4, [sp, #48]	; 0x30
 8005334:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8005338:	f080 8113 	bcs.w	8005562 <forward_dense+0x302>
 800533c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800533e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800558c <forward_dense+0x32c>
 8005342:	f021 0201 	bic.w	r2, r1, #1
 8005346:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800534a:	9204      	str	r2, [sp, #16]
 800534c:	f001 0201 	and.w	r2, r1, #1
 8005350:	08c8      	lsrs	r0, r1, #3
 8005352:	9208      	str	r2, [sp, #32]
 8005354:	008a      	lsls	r2, r1, #2
 8005356:	f001 0a07 	and.w	sl, r1, #7
 800535a:	920f      	str	r2, [sp, #60]	; 0x3c
 800535c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8005360:	3320      	adds	r3, #32
 8005362:	465c      	mov	r4, fp
 8005364:	9007      	str	r0, [sp, #28]
 8005366:	46cb      	mov	fp, r9
 8005368:	9205      	str	r2, [sp, #20]
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	46c1      	mov	r9, r8
 800536e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8005372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	9b02      	ldr	r3, [sp, #8]
 800537a:	3b20      	subs	r3, #32
 800537c:	930a      	str	r3, [sp, #40]	; 0x28
 800537e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005380:	b10b      	cbz	r3, 8005386 <forward_dense+0x126>
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2c00      	cmp	r4, #0
 8005388:	f000 81da 	beq.w	8005740 <forward_dense+0x4e0>
 800538c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800538e:	2904      	cmp	r1, #4
 8005390:	9906      	ldr	r1, [sp, #24]
 8005392:	f000 80fd 	beq.w	8005590 <forward_dense+0x330>
 8005396:	4549      	cmp	r1, r9
 8005398:	f080 80d2 	bcs.w	8005540 <forward_dense+0x2e0>
 800539c:	460f      	mov	r7, r1
 800539e:	9907      	ldr	r1, [sp, #28]
 80053a0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80053a4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80053a8:	1c4e      	adds	r6, r1, #1
 80053aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80053ae:	4694      	mov	ip, r2
 80053b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80053b2:	468e      	mov	lr, r1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80de 	beq.w	8005576 <forward_dense+0x316>
 80053ba:	ecf3 2a01 	vldmia	r3!, {s5}
 80053be:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800558c <forward_dense+0x32c>
 80053c2:	f1be 0f00 	cmp.w	lr, #0
 80053c6:	f000 80de 	beq.w	8005586 <forward_dense+0x326>
 80053ca:	f10c 0108 	add.w	r1, ip, #8
 80053ce:	4640      	mov	r0, r8
 80053d0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80053d4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80053d8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80053dc:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80053e0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80053e4:	ed10 5a04 	vldr	s10, [r0, #-16]
 80053e8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80053ec:	ed10 6a02 	vldr	s12, [r0, #-8]
 80053f0:	ed50 6a01 	vldr	s13, [r0, #-4]
 80053f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80053f8:	edd5 7a00 	vldr	s15, [r5]
 80053fc:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8005400:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005404:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005408:	ed95 3a00 	vldr	s6, [r5]
 800540c:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8005410:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005414:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005418:	3108      	adds	r1, #8
 800541a:	edd5 3a00 	vldr	s7, [r5]
 800541e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005422:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005426:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800542a:	3020      	adds	r0, #32
 800542c:	ed95 4a00 	vldr	s8, [r5]
 8005430:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005434:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005438:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800543c:	edd5 4a00 	vldr	s9, [r5]
 8005440:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005444:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005448:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800544c:	ed95 5a00 	vldr	s10, [r5]
 8005450:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005454:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005458:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800545c:	edd5 5a00 	vldr	s11, [r5]
 8005460:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005464:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005468:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800546c:	428e      	cmp	r6, r1
 800546e:	ed95 6a00 	vldr	s12, [r5]
 8005472:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800547a:	d1a9      	bne.n	80053d0 <forward_dense+0x170>
 800547c:	f1a6 0108 	sub.w	r1, r6, #8
 8005480:	4650      	mov	r0, sl
 8005482:	2a00      	cmp	r2, #0
 8005484:	d04a      	beq.n	800551c <forward_dense+0x2bc>
 8005486:	780d      	ldrb	r5, [r1, #0]
 8005488:	edd0 6a00 	vldr	s13, [r0]
 800548c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005490:	edd5 7a00 	vldr	s15, [r5]
 8005494:	2a01      	cmp	r2, #1
 8005496:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800549a:	d03f      	beq.n	800551c <forward_dense+0x2bc>
 800549c:	784d      	ldrb	r5, [r1, #1]
 800549e:	edd0 6a01 	vldr	s13, [r0, #4]
 80054a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054a6:	edd5 7a00 	vldr	s15, [r5]
 80054aa:	2a02      	cmp	r2, #2
 80054ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054b0:	d034      	beq.n	800551c <forward_dense+0x2bc>
 80054b2:	788d      	ldrb	r5, [r1, #2]
 80054b4:	edd0 6a02 	vldr	s13, [r0, #8]
 80054b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054bc:	edd5 7a00 	vldr	s15, [r5]
 80054c0:	2a03      	cmp	r2, #3
 80054c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054c6:	d029      	beq.n	800551c <forward_dense+0x2bc>
 80054c8:	78cd      	ldrb	r5, [r1, #3]
 80054ca:	edd0 6a03 	vldr	s13, [r0, #12]
 80054ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054d2:	edd5 7a00 	vldr	s15, [r5]
 80054d6:	2a04      	cmp	r2, #4
 80054d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054dc:	d01e      	beq.n	800551c <forward_dense+0x2bc>
 80054de:	790d      	ldrb	r5, [r1, #4]
 80054e0:	edd0 6a04 	vldr	s13, [r0, #16]
 80054e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054e8:	edd5 7a00 	vldr	s15, [r5]
 80054ec:	2a05      	cmp	r2, #5
 80054ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054f2:	d013      	beq.n	800551c <forward_dense+0x2bc>
 80054f4:	794d      	ldrb	r5, [r1, #5]
 80054f6:	edd0 6a05 	vldr	s13, [r0, #20]
 80054fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80054fe:	edd5 7a00 	vldr	s15, [r5]
 8005502:	2a06      	cmp	r2, #6
 8005504:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005508:	d008      	beq.n	800551c <forward_dense+0x2bc>
 800550a:	7989      	ldrb	r1, [r1, #6]
 800550c:	edd0 7a06 	vldr	s15, [r0, #24]
 8005510:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005514:	edd1 6a00 	vldr	s13, [r1]
 8005518:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800551c:	44dc      	add	ip, fp
 800551e:	445e      	add	r6, fp
 8005520:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005524:	eca7 7a01 	vstmia	r7!, {s14}
 8005528:	454f      	cmp	r7, r9
 800552a:	f4ff af43 	bcc.w	80053b4 <forward_dense+0x154>
 800552e:	9a06      	ldr	r2, [sp, #24]
 8005530:	eba9 0302 	sub.w	r3, r9, r2
 8005534:	3b01      	subs	r3, #1
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	3304      	adds	r3, #4
 800553c:	18d3      	adds	r3, r2, r3
 800553e:	9306      	str	r3, [sp, #24]
 8005540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005542:	9a05      	ldr	r2, [sp, #20]
 8005544:	4499      	add	r9, r3
 8005546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005548:	441a      	add	r2, r3
 800554a:	9205      	str	r2, [sp, #20]
 800554c:	9a02      	ldr	r2, [sp, #8]
 800554e:	441a      	add	r2, r3
 8005550:	9202      	str	r2, [sp, #8]
 8005552:	9a04      	ldr	r2, [sp, #16]
 8005554:	441a      	add	r2, r3
 8005556:	9204      	str	r2, [sp, #16]
 8005558:	9b06      	ldr	r3, [sp, #24]
 800555a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800555c:	4293      	cmp	r3, r2
 800555e:	f4ff af08 	bcc.w	8005372 <forward_dense+0x112>
 8005562:	b015      	add	sp, #84	; 0x54
 8005564:	ecbd 8b02 	vpop	{d8}
 8005568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556c:	6853      	ldr	r3, [r2, #4]
 800556e:	deff      	udf	#255	; 0xff
 8005570:	2300      	movs	r3, #0
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	deff      	udf	#255	; 0xff
 8005576:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800558c <forward_dense+0x32c>
 800557a:	eef0 2a48 	vmov.f32	s5, s16
 800557e:	f1be 0f00 	cmp.w	lr, #0
 8005582:	f47f af22 	bne.w	80053ca <forward_dense+0x16a>
 8005586:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005588:	4661      	mov	r1, ip
 800558a:	e77a      	b.n	8005482 <forward_dense+0x222>
 800558c:	00000000 	.word	0x00000000
 8005590:	4549      	cmp	r1, r9
 8005592:	d2d5      	bcs.n	8005540 <forward_dense+0x2e0>
 8005594:	9807      	ldr	r0, [sp, #28]
 8005596:	9103      	str	r1, [sp, #12]
 8005598:	9904      	ldr	r1, [sp, #16]
 800559a:	f100 0c01 	add.w	ip, r0, #1
 800559e:	3901      	subs	r1, #1
 80055a0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80055a4:	9109      	str	r1, [sp, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80b2 	beq.w	8005710 <forward_dense+0x4b0>
 80055ac:	9907      	ldr	r1, [sp, #28]
 80055ae:	ecf3 2a01 	vldmia	r3!, {s5}
 80055b2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800558c <forward_dense+0x32c>
 80055b6:	2900      	cmp	r1, #0
 80055b8:	f000 80b2 	beq.w	8005720 <forward_dense+0x4c0>
 80055bc:	9902      	ldr	r1, [sp, #8]
 80055be:	1d10      	adds	r0, r2, #4
 80055c0:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80055c4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80055c8:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80055cc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80055d0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80055d4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80055d8:	ed11 5a04 	vldr	s10, [r1, #-16]
 80055dc:	ed51 5a03 	vldr	s11, [r1, #-12]
 80055e0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80055e4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80055e8:	f006 070f 	and.w	r7, r6, #15
 80055ec:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80055f0:	edd7 7a00 	vldr	s15, [r7]
 80055f4:	0936      	lsrs	r6, r6, #4
 80055f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80055fa:	ed96 3a00 	vldr	s6, [r6]
 80055fe:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005602:	092e      	lsrs	r6, r5, #4
 8005604:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005608:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800560c:	f005 050f 	and.w	r5, r5, #15
 8005610:	edd6 3a00 	vldr	s7, [r6]
 8005614:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005618:	eee3 7a84 	vfma.f32	s15, s7, s8
 800561c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005620:	0937      	lsrs	r7, r6, #4
 8005622:	ed95 4a00 	vldr	s8, [r5]
 8005626:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800562a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800562e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005632:	f006 060f 	and.w	r6, r6, #15
 8005636:	edd7 4a00 	vldr	s9, [r7]
 800563a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800563e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005642:	3004      	adds	r0, #4
 8005644:	ed96 5a00 	vldr	s10, [r6]
 8005648:	092e      	lsrs	r6, r5, #4
 800564a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800564e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005652:	f005 050f 	and.w	r5, r5, #15
 8005656:	edd6 5a00 	vldr	s11, [r6]
 800565a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800565e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005662:	4584      	cmp	ip, r0
 8005664:	ed95 6a00 	vldr	s12, [r5]
 8005668:	eee6 7a26 	vfma.f32	s15, s12, s13
 800566c:	f101 0120 	add.w	r1, r1, #32
 8005670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005674:	d1a4      	bne.n	80055c0 <forward_dense+0x360>
 8005676:	f8dd e014 	ldr.w	lr, [sp, #20]
 800567a:	f1ac 0804 	sub.w	r8, ip, #4
 800567e:	9904      	ldr	r1, [sp, #16]
 8005680:	458e      	cmp	lr, r1
 8005682:	d22a      	bcs.n	80056da <forward_dense+0x47a>
 8005684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005686:	eba1 070e 	sub.w	r7, r1, lr
 800568a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800568e:	f10e 0008 	add.w	r0, lr, #8
 8005692:	f108 36ff 	add.w	r6, r8, #4294967295
 8005696:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800569a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800569e:	ed50 5a01 	vldr	s11, [r0, #-4]
 80056a2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80056a6:	f001 050f 	and.w	r5, r1, #15
 80056aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80056ae:	edd5 7a00 	vldr	s15, [r5]
 80056b2:	0909      	lsrs	r1, r1, #4
 80056b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80056b8:	ed91 6a00 	vldr	s12, [r1]
 80056bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80056c0:	42b7      	cmp	r7, r6
 80056c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80056c6:	f100 0008 	add.w	r0, r0, #8
 80056ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ce:	d1e4      	bne.n	800569a <forward_dense+0x43a>
 80056d0:	f10a 0a01 	add.w	sl, sl, #1
 80056d4:	44d0      	add	r8, sl
 80056d6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80056da:	9908      	ldr	r1, [sp, #32]
 80056dc:	b321      	cbz	r1, 8005728 <forward_dense+0x4c8>
 80056de:	f898 1000 	ldrb.w	r1, [r8]
 80056e2:	edde 7a00 	vldr	s15, [lr]
 80056e6:	0909      	lsrs	r1, r1, #4
 80056e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80056ec:	edd1 6a00 	vldr	s13, [r1]
 80056f0:	9903      	ldr	r1, [sp, #12]
 80056f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056f6:	445a      	add	r2, fp
 80056f8:	44dc      	add	ip, fp
 80056fa:	ee72 2a87 	vadd.f32	s5, s5, s14
 80056fe:	ece1 2a01 	vstmia	r1!, {s5}
 8005702:	4589      	cmp	r9, r1
 8005704:	9103      	str	r1, [sp, #12]
 8005706:	f67f af12 	bls.w	800552e <forward_dense+0x2ce>
 800570a:	2b00      	cmp	r3, #0
 800570c:	f47f af4e 	bne.w	80055ac <forward_dense+0x34c>
 8005710:	9907      	ldr	r1, [sp, #28]
 8005712:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800558c <forward_dense+0x32c>
 8005716:	eef0 2a48 	vmov.f32	s5, s16
 800571a:	2900      	cmp	r1, #0
 800571c:	f47f af4e 	bne.w	80055bc <forward_dense+0x35c>
 8005720:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005724:	4690      	mov	r8, r2
 8005726:	e7aa      	b.n	800567e <forward_dense+0x41e>
 8005728:	9903      	ldr	r1, [sp, #12]
 800572a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800572e:	445a      	add	r2, fp
 8005730:	eca1 7a01 	vstmia	r1!, {s14}
 8005734:	4549      	cmp	r1, r9
 8005736:	9103      	str	r1, [sp, #12]
 8005738:	44dc      	add	ip, fp
 800573a:	f4ff af34 	bcc.w	80055a6 <forward_dense+0x346>
 800573e:	e6f6      	b.n	800552e <forward_dense+0x2ce>
 8005740:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005742:	9d06      	ldr	r5, [sp, #24]
 8005744:	9101      	str	r1, [sp, #4]
 8005746:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005748:	9100      	str	r1, [sp, #0]
 800574a:	4628      	mov	r0, r5
 800574c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800574e:	f000 f9ef 	bl	8005b30 <forward_lite_dense_if32of32wf32>
 8005752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005754:	462b      	mov	r3, r5
 8005756:	4413      	add	r3, r2
 8005758:	9306      	str	r3, [sp, #24]
 800575a:	e6f1      	b.n	8005540 <forward_dense+0x2e0>
 800575c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005760:	f1b9 0f00 	cmp.w	r9, #0
 8005764:	d016      	beq.n	8005794 <forward_dense+0x534>
 8005766:	e9d9 0100 	ldrd	r0, r1, [r9]
 800576a:	f000 fbf7 	bl	8005f5c <ai_array_get_byte_size>
 800576e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005772:	4602      	mov	r2, r0
 8005774:	4659      	mov	r1, fp
 8005776:	4640      	mov	r0, r8
 8005778:	f000 fafe 	bl	8005d78 <st_int8_copy>
 800577c:	e5c7      	b.n	800530e <forward_dense+0xae>
 800577e:	2b04      	cmp	r3, #4
 8005780:	d00a      	beq.n	8005798 <forward_dense+0x538>
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	e5bd      	b.n	8005304 <forward_dense+0xa4>
 8005788:	930d      	str	r3, [sp, #52]	; 0x34
 800578a:	e595      	b.n	80052b8 <forward_dense+0x58>
 800578c:	2300      	movs	r3, #0
 800578e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005790:	460b      	mov	r3, r1
 8005792:	e591      	b.n	80052b8 <forward_dense+0x58>
 8005794:	46c3      	mov	fp, r8
 8005796:	e5ba      	b.n	800530e <forward_dense+0xae>
 8005798:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800579c:	e5b7      	b.n	800530e <forward_dense+0xae>
 800579e:	2300      	movs	r3, #0
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	deff      	udf	#255	; 0xff
 80057a4:	2300      	movs	r3, #0
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	deff      	udf	#255	; 0xff
 80057aa:	bf00      	nop

080057ac <forward_relu>:
 80057ac:	6982      	ldr	r2, [r0, #24]
 80057ae:	8813      	ldrh	r3, [r2, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d05b      	beq.n	800586c <forward_relu+0xc0>
 80057b4:	6851      	ldr	r1, [r2, #4]
 80057b6:	684a      	ldr	r2, [r1, #4]
 80057b8:	b102      	cbz	r2, 80057bc <forward_relu+0x10>
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	f000 8123 	beq.w	8005a08 <forward_relu+0x25c>
 80057c2:	b470      	push	{r4, r5, r6}
 80057c4:	6909      	ldr	r1, [r1, #16]
 80057c6:	b101      	cbz	r1, 80057ca <forward_relu+0x1e>
 80057c8:	6809      	ldr	r1, [r1, #0]
 80057ca:	69c6      	ldr	r6, [r0, #28]
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	f000 8097 	beq.w	8005900 <forward_relu+0x154>
 80057d2:	6873      	ldr	r3, [r6, #4]
 80057d4:	6988      	ldr	r0, [r1, #24]
 80057d6:	6991      	ldr	r1, [r2, #24]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f000 80c1 	beq.w	8005960 <forward_relu+0x1b4>
 80057de:	6893      	ldr	r3, [r2, #8]
 80057e0:	6880      	ldr	r0, [r0, #8]
 80057e2:	688c      	ldr	r4, [r1, #8]
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	f000 80f2 	beq.w	80059ce <forward_relu+0x222>
 80057ea:	68d5      	ldr	r5, [r2, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80057f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057f6:	42ab      	cmp	r3, r5
 80057f8:	fb01 f202 	mul.w	r2, r1, r2
 80057fc:	d1f9      	bne.n	80057f2 <forward_relu+0x46>
 80057fe:	68b3      	ldr	r3, [r6, #8]
 8005800:	ed93 7a02 	vldr	s14, [r3, #8]
 8005804:	edd3 6a00 	vldr	s13, [r3]
 8005808:	ed93 6a01 	vldr	s12, [r3, #4]
 800580c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005810:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005814:	3a01      	subs	r2, #1
 8005816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800581e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005822:	d425      	bmi.n	8005870 <forward_relu+0xc4>
 8005824:	429c      	cmp	r4, r3
 8005826:	d81f      	bhi.n	8005868 <forward_relu+0xbc>
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	1d01      	adds	r1, r0, #4
 800582c:	e00d      	b.n	800584a <forward_relu+0x9e>
 800582e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005836:	db03      	blt.n	8005840 <forward_relu+0x94>
 8005838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800583c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005840:	3b08      	subs	r3, #8
 8005842:	429c      	cmp	r4, r3
 8005844:	ed61 7a01 	vstmdb	r1!, {s15}
 8005848:	d80e      	bhi.n	8005868 <forward_relu+0xbc>
 800584a:	4613      	mov	r3, r2
 800584c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005858:	d9e9      	bls.n	800582e <forward_relu+0x82>
 800585a:	3b08      	subs	r3, #8
 800585c:	eef0 7a47 	vmov.f32	s15, s14
 8005860:	429c      	cmp	r4, r3
 8005862:	ed61 7a01 	vstmdb	r1!, {s15}
 8005866:	d9f0      	bls.n	800584a <forward_relu+0x9e>
 8005868:	bc70      	pop	{r4, r5, r6}
 800586a:	4770      	bx	lr
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	deff      	udf	#255	; 0xff
 8005870:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	d11f      	bne.n	80058ba <forward_relu+0x10e>
 800587a:	429c      	cmp	r4, r3
 800587c:	d8f4      	bhi.n	8005868 <forward_relu+0xbc>
 800587e:	1b1c      	subs	r4, r3, r4
 8005880:	f024 0403 	bic.w	r4, r4, #3
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	2500      	movs	r5, #0
 8005888:	1b1b      	subs	r3, r3, r4
 800588a:	1d01      	adds	r1, r0, #4
 800588c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005890:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005898:	dc0a      	bgt.n	80058b0 <forward_relu+0x104>
 800589a:	429a      	cmp	r2, r3
 800589c:	f841 5d04 	str.w	r5, [r1, #-4]!
 80058a0:	d0e2      	beq.n	8005868 <forward_relu+0xbc>
 80058a2:	ed72 7a01 	vldmdb	r2!, {s15}
 80058a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80058aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ae:	ddf4      	ble.n	800589a <forward_relu+0xee>
 80058b0:	429a      	cmp	r2, r3
 80058b2:	ed61 7a01 	vstmdb	r1!, {s15}
 80058b6:	d1e9      	bne.n	800588c <forward_relu+0xe0>
 80058b8:	e7d6      	b.n	8005868 <forward_relu+0xbc>
 80058ba:	429c      	cmp	r4, r3
 80058bc:	d8d4      	bhi.n	8005868 <forward_relu+0xbc>
 80058be:	1b1c      	subs	r4, r3, r4
 80058c0:	f024 0403 	bic.w	r4, r4, #3
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	1d01      	adds	r1, r0, #4
 80058c8:	1b1b      	subs	r3, r3, r4
 80058ca:	ed72 7a01 	vldmdb	r2!, {s15}
 80058ce:	eef4 6ae7 	vcmpe.f32	s13, s15
 80058d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d6:	db0e      	blt.n	80058f6 <forward_relu+0x14a>
 80058d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058dc:	4293      	cmp	r3, r2
 80058de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80058e2:	ed61 7a01 	vstmdb	r1!, {s15}
 80058e6:	d0bf      	beq.n	8005868 <forward_relu+0xbc>
 80058e8:	ed72 7a01 	vldmdb	r2!, {s15}
 80058ec:	eef4 6ae7 	vcmpe.f32	s13, s15
 80058f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f4:	daf0      	bge.n	80058d8 <forward_relu+0x12c>
 80058f6:	4293      	cmp	r3, r2
 80058f8:	ed61 7a01 	vstmdb	r1!, {s15}
 80058fc:	d1e5      	bne.n	80058ca <forward_relu+0x11e>
 80058fe:	e7b3      	b.n	8005868 <forward_relu+0xbc>
 8005900:	6893      	ldr	r3, [r2, #8]
 8005902:	6989      	ldr	r1, [r1, #24]
 8005904:	6990      	ldr	r0, [r2, #24]
 8005906:	6889      	ldr	r1, [r1, #8]
 8005908:	6884      	ldr	r4, [r0, #8]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	d075      	beq.n	80059fa <forward_relu+0x24e>
 800590e:	68d5      	ldr	r5, [r2, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005916:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800591a:	429d      	cmp	r5, r3
 800591c:	fb00 f202 	mul.w	r2, r0, r2
 8005920:	d1f9      	bne.n	8005916 <forward_relu+0x16a>
 8005922:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005926:	3b01      	subs	r3, #1
 8005928:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800592c:	4294      	cmp	r4, r2
 800592e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005932:	d899      	bhi.n	8005868 <forward_relu+0xbc>
 8005934:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005a10 <forward_relu+0x264>
 8005938:	3204      	adds	r2, #4
 800593a:	3104      	adds	r1, #4
 800593c:	4613      	mov	r3, r2
 800593e:	ed72 7a01 	vldmdb	r2!, {s15}
 8005942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594a:	f1a3 0308 	sub.w	r3, r3, #8
 800594e:	bfb8      	it	lt
 8005950:	eef0 7a47 	vmovlt.f32	s15, s14
 8005954:	429c      	cmp	r4, r3
 8005956:	ed61 7a01 	vstmdb	r1!, {s15}
 800595a:	d9ef      	bls.n	800593c <forward_relu+0x190>
 800595c:	bc70      	pop	{r4, r5, r6}
 800595e:	4770      	bx	lr
 8005960:	688c      	ldr	r4, [r1, #8]
 8005962:	6891      	ldr	r1, [r2, #8]
 8005964:	6880      	ldr	r0, [r0, #8]
 8005966:	0a09      	lsrs	r1, r1, #8
 8005968:	d049      	beq.n	80059fe <forward_relu+0x252>
 800596a:	68d5      	ldr	r5, [r2, #12]
 800596c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005970:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005974:	42aa      	cmp	r2, r5
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	d1f9      	bne.n	8005970 <forward_relu+0x1c4>
 800597c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005980:	3a01      	subs	r2, #1
 8005982:	68b1      	ldr	r1, [r6, #8]
 8005984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005988:	429c      	cmp	r4, r3
 800598a:	ed91 7a00 	vldr	s14, [r1]
 800598e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005992:	f63f af69 	bhi.w	8005868 <forward_relu+0xbc>
 8005996:	2500      	movs	r5, #0
 8005998:	3304      	adds	r3, #4
 800599a:	1d02      	adds	r2, r0, #4
 800599c:	ed53 7a01 	vldr	s15, [r3, #-4]
 80059a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	f1a3 0104 	sub.w	r1, r3, #4
 80059ac:	f1a3 0308 	sub.w	r3, r3, #8
 80059b0:	d406      	bmi.n	80059c0 <forward_relu+0x214>
 80059b2:	429c      	cmp	r4, r3
 80059b4:	f842 5d04 	str.w	r5, [r2, #-4]!
 80059b8:	f63f af56 	bhi.w	8005868 <forward_relu+0xbc>
 80059bc:	460b      	mov	r3, r1
 80059be:	e7ed      	b.n	800599c <forward_relu+0x1f0>
 80059c0:	429c      	cmp	r4, r3
 80059c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80059c6:	f63f af4f 	bhi.w	8005868 <forward_relu+0xbc>
 80059ca:	460b      	mov	r3, r1
 80059cc:	e7e6      	b.n	800599c <forward_relu+0x1f0>
 80059ce:	68b3      	ldr	r3, [r6, #8]
 80059d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80059d4:	edd3 6a00 	vldr	s13, [r3]
 80059d8:	ed93 6a01 	vldr	s12, [r3, #4]
 80059dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80059e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e4:	d401      	bmi.n	80059ea <forward_relu+0x23e>
 80059e6:	4623      	mov	r3, r4
 80059e8:	e71e      	b.n	8005828 <forward_relu+0x7c>
 80059ea:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	4623      	mov	r3, r4
 80059f4:	f47f af63 	bne.w	80058be <forward_relu+0x112>
 80059f8:	e741      	b.n	800587e <forward_relu+0xd2>
 80059fa:	4622      	mov	r2, r4
 80059fc:	e79a      	b.n	8005934 <forward_relu+0x188>
 80059fe:	68b2      	ldr	r2, [r6, #8]
 8005a00:	4623      	mov	r3, r4
 8005a02:	ed92 7a00 	vldr	s14, [r2]
 8005a06:	e7c6      	b.n	8005996 <forward_relu+0x1ea>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	deff      	udf	#255	; 0xff
 8005a0e:	bf00      	nop
 8005a10:	00000000 	.word	0x00000000

08005a14 <forward_sm>:
 8005a14:	6982      	ldr	r2, [r0, #24]
 8005a16:	8813      	ldrh	r3, [r2, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d07c      	beq.n	8005b16 <forward_sm+0x102>
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	ed2d 8b04 	vpush	{d8-d9}
 8005a24:	6852      	ldr	r2, [r2, #4]
 8005a26:	6854      	ldr	r4, [r2, #4]
 8005a28:	b085      	sub	sp, #20
 8005a2a:	b104      	cbz	r4, 8005a2e <forward_sm+0x1a>
 8005a2c:	6824      	ldr	r4, [r4, #0]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d076      	beq.n	8005b20 <forward_sm+0x10c>
 8005a32:	6913      	ldr	r3, [r2, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d076      	beq.n	8005b26 <forward_sm+0x112>
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	68e0      	ldr	r0, [r4, #12]
 8005a3e:	68f2      	ldr	r2, [r6, #12]
 8005a40:	6845      	ldr	r5, [r0, #4]
 8005a42:	6857      	ldr	r7, [r2, #4]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	d068      	beq.n	8005b1a <forward_sm+0x106>
 8005a48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a52:	4298      	cmp	r0, r3
 8005a54:	fb01 f202 	mul.w	r2, r1, r2
 8005a58:	d1f9      	bne.n	8005a4e <forward_sm+0x3a>
 8005a5a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8005a5e:	69a2      	ldr	r2, [r4, #24]
 8005a60:	69b3      	ldr	r3, [r6, #24]
 8005a62:	6892      	ldr	r2, [r2, #8]
 8005a64:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8005a68:	eb02 0309 	add.w	r3, r2, r9
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	d24c      	bcs.n	8005b0c <forward_sm+0xf8>
 8005a72:	00bb      	lsls	r3, r7, #2
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8005a7a:	00ab      	lsls	r3, r5, #2
 8005a7c:	2d01      	cmp	r5, #1
 8005a7e:	ed92 8a00 	vldr	s16, [r2]
 8005a82:	9302      	str	r3, [sp, #8]
 8005a84:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005a88:	463e      	mov	r6, r7
 8005a8a:	d93c      	bls.n	8005b06 <forward_sm+0xf2>
 8005a8c:	1d13      	adds	r3, r2, #4
 8005a8e:	ecf3 7a01 	vldmia	r3!, {s15}
 8005a92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9a:	bfb8      	it	lt
 8005a9c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005aa0:	429e      	cmp	r6, r3
 8005aa2:	d1f4      	bne.n	8005a8e <forward_sm+0x7a>
 8005aa4:	eddf 8a21 	vldr	s17, [pc, #132]	; 8005b2c <forward_sm+0x118>
 8005aa8:	4692      	mov	sl, r2
 8005aaa:	46c3      	mov	fp, r8
 8005aac:	46c1      	mov	r9, r8
 8005aae:	2400      	movs	r4, #0
 8005ab0:	ecba 0a01 	vldmia	sl!, {s0}
 8005ab4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005ab8:	f001 fa26 	bl	8006f08 <expf>
 8005abc:	3401      	adds	r4, #1
 8005abe:	42a5      	cmp	r5, r4
 8005ac0:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005ac4:	eca9 0a01 	vstmia	r9!, {s0}
 8005ac8:	d8f2      	bhi.n	8005ab0 <forward_sm+0x9c>
 8005aca:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	d00b      	beq.n	8005aec <forward_sm+0xd8>
 8005ad4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8005ad8:	2300      	movs	r3, #0
 8005ada:	3301      	adds	r3, #1
 8005adc:	429d      	cmp	r5, r3
 8005ade:	eddb 7a00 	vldr	s15, [fp]
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	eceb 7a01 	vstmia	fp!, {s15}
 8005aea:	d8f6      	bhi.n	8005ada <forward_sm+0xc6>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	9901      	ldr	r1, [sp, #4]
 8005af0:	4498      	add	r8, r3
 8005af2:	9b02      	ldr	r3, [sp, #8]
 8005af4:	42b9      	cmp	r1, r7
 8005af6:	463a      	mov	r2, r7
 8005af8:	441e      	add	r6, r3
 8005afa:	d907      	bls.n	8005b0c <forward_sm+0xf8>
 8005afc:	2d01      	cmp	r5, #1
 8005afe:	ed92 8a00 	vldr	s16, [r2]
 8005b02:	441f      	add	r7, r3
 8005b04:	d8c2      	bhi.n	8005a8c <forward_sm+0x78>
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	d0f0      	beq.n	8005aec <forward_sm+0xd8>
 8005b0a:	e7cb      	b.n	8005aa4 <forward_sm+0x90>
 8005b0c:	b005      	add	sp, #20
 8005b0e:	ecbd 8b04 	vpop	{d8-d9}
 8005b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	deff      	udf	#255	; 0xff
 8005b1a:	f04f 0904 	mov.w	r9, #4
 8005b1e:	e79e      	b.n	8005a5e <forward_sm+0x4a>
 8005b20:	2300      	movs	r3, #0
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	deff      	udf	#255	; 0xff
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	deff      	udf	#255	; 0xff
 8005b2a:	bf00      	nop
 8005b2c:	00000000 	.word	0x00000000

08005b30 <forward_lite_dense_if32of32wf32>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8005b38:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8005b3c:	4287      	cmp	r7, r0
 8005b3e:	f240 8106 	bls.w	8005d4e <forward_lite_dense_if32of32wf32+0x21e>
 8005b42:	f1a6 0810 	sub.w	r8, r6, #16
 8005b46:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8005b4a:	f108 0801 	add.w	r8, r8, #1
 8005b4e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8005b52:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8005b56:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	f006 0a0f 	and.w	sl, r6, #15
 8005b60:	2e0f      	cmp	r6, #15
 8005b62:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005d74 <forward_lite_dense_if32of32wf32+0x244>
 8005b66:	f240 8101 	bls.w	8005d6c <forward_lite_dense_if32of32wf32+0x23c>
 8005b6a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8005b6e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8005b72:	46b6      	mov	lr, r6
 8005b74:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8005b78:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8005b7c:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8005b80:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8005b84:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8005b88:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8005b8c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8005b90:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8005b94:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8005b98:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8005b9c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8005ba0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8005ba4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005ba8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005bac:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8005bb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bb4:	f1ae 0e10 	sub.w	lr, lr, #16
 8005bb8:	f1be 0f0f 	cmp.w	lr, #15
 8005bbc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8005bc0:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8005bc4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005bc8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005bcc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005bd0:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8005bd4:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8005bd8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005bdc:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8005be0:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8005be4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005be8:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8005bec:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8005bf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bf4:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8005bf8:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8005bfc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c00:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005c04:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8005c08:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c0c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8005c10:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005c14:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c18:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005c1c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8005c20:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c24:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8005c28:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005c2c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005c30:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005c34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c38:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c48:	d894      	bhi.n	8005b74 <forward_lite_dense_if32of32wf32+0x44>
 8005c4a:	eb02 0e0b 	add.w	lr, r2, fp
 8005c4e:	4654      	mov	r4, sl
 8005c50:	46c4      	mov	ip, r8
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	d075      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005c56:	eddc 6a00 	vldr	s13, [ip]
 8005c5a:	edde 7a00 	vldr	s15, [lr]
 8005c5e:	2c01      	cmp	r4, #1
 8005c60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c64:	d06d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005c66:	eddc 6a01 	vldr	s13, [ip, #4]
 8005c6a:	edde 7a01 	vldr	s15, [lr, #4]
 8005c6e:	2c02      	cmp	r4, #2
 8005c70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c74:	d065      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005c76:	eddc 6a02 	vldr	s13, [ip, #8]
 8005c7a:	edde 7a02 	vldr	s15, [lr, #8]
 8005c7e:	2c03      	cmp	r4, #3
 8005c80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c84:	d05d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005c86:	eddc 6a03 	vldr	s13, [ip, #12]
 8005c8a:	edde 7a03 	vldr	s15, [lr, #12]
 8005c8e:	2c04      	cmp	r4, #4
 8005c90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c94:	d055      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005c96:	eddc 6a04 	vldr	s13, [ip, #16]
 8005c9a:	edde 7a04 	vldr	s15, [lr, #16]
 8005c9e:	2c05      	cmp	r4, #5
 8005ca0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ca4:	d04d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005ca6:	eddc 6a05 	vldr	s13, [ip, #20]
 8005caa:	edde 7a05 	vldr	s15, [lr, #20]
 8005cae:	2c06      	cmp	r4, #6
 8005cb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cb4:	d045      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005cb6:	eddc 6a06 	vldr	s13, [ip, #24]
 8005cba:	edde 7a06 	vldr	s15, [lr, #24]
 8005cbe:	2c07      	cmp	r4, #7
 8005cc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cc4:	d03d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005cc6:	eddc 6a07 	vldr	s13, [ip, #28]
 8005cca:	edde 7a07 	vldr	s15, [lr, #28]
 8005cce:	2c08      	cmp	r4, #8
 8005cd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cd4:	d035      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005cd6:	eddc 6a08 	vldr	s13, [ip, #32]
 8005cda:	edde 7a08 	vldr	s15, [lr, #32]
 8005cde:	2c09      	cmp	r4, #9
 8005ce0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ce4:	d02d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005ce6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8005cea:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8005cee:	2c0a      	cmp	r4, #10
 8005cf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005cf4:	d025      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005cf6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8005cfa:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8005cfe:	2c0b      	cmp	r4, #11
 8005d00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d04:	d01d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005d06:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8005d0a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8005d0e:	2c0c      	cmp	r4, #12
 8005d10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d14:	d015      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005d16:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8005d1a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8005d1e:	3c0d      	subs	r4, #13
 8005d20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d24:	d00d      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005d26:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8005d2a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8005d2e:	2c01      	cmp	r4, #1
 8005d30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d34:	d005      	beq.n	8005d42 <forward_lite_dense_if32of32wf32+0x212>
 8005d36:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8005d3a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8005d3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d42:	444a      	add	r2, r9
 8005d44:	eca5 7a01 	vstmia	r5!, {s14}
 8005d48:	42af      	cmp	r7, r5
 8005d4a:	f63f af09 	bhi.w	8005b60 <forward_lite_dense_if32of32wf32+0x30>
 8005d4e:	b15b      	cbz	r3, 8005d68 <forward_lite_dense_if32of32wf32+0x238>
 8005d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d52:	b14a      	cbz	r2, 8005d68 <forward_lite_dense_if32of32wf32+0x238>
 8005d54:	edd0 7a00 	vldr	s15, [r0]
 8005d58:	ecb3 7a01 	vldmia	r3!, {s14}
 8005d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d60:	ece0 7a01 	vstmia	r0!, {s15}
 8005d64:	4287      	cmp	r7, r0
 8005d66:	d1f5      	bne.n	8005d54 <forward_lite_dense_if32of32wf32+0x224>
 8005d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6c:	4634      	mov	r4, r6
 8005d6e:	4696      	mov	lr, r2
 8005d70:	468c      	mov	ip, r1
 8005d72:	e76e      	b.n	8005c52 <forward_lite_dense_if32of32wf32+0x122>
 8005d74:	00000000 	.word	0x00000000

08005d78 <st_int8_copy>:
 8005d78:	4288      	cmp	r0, r1
 8005d7a:	d057      	beq.n	8005e2c <st_int8_copy+0xb4>
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	d055      	beq.n	8005e2c <st_int8_copy+0xb4>
 8005d80:	4288      	cmp	r0, r1
 8005d82:	d354      	bcc.n	8005e2e <st_int8_copy+0xb6>
 8005d84:	078b      	lsls	r3, r1, #30
 8005d86:	d102      	bne.n	8005d8e <st_int8_copy+0x16>
 8005d88:	e009      	b.n	8005d9e <st_int8_copy+0x26>
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	d05c      	beq.n	8005e48 <st_int8_copy+0xd0>
 8005d8e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8005d92:	f801 3b01 	strb.w	r3, [r1], #1
 8005d96:	078b      	lsls	r3, r1, #30
 8005d98:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d9c:	d1f5      	bne.n	8005d8a <st_int8_copy+0x12>
 8005d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8005da6:	d069      	beq.n	8005e7c <st_int8_copy+0x104>
 8005da8:	ea41 0300 	orr.w	r3, r1, r0
 8005dac:	075b      	lsls	r3, r3, #29
 8005dae:	d14c      	bne.n	8005e4a <st_int8_copy+0xd2>
 8005db0:	f10e 33ff 	add.w	r3, lr, #4294967295
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d948      	bls.n	8005e4a <st_int8_copy+0xd2>
 8005db8:	f100 0310 	add.w	r3, r0, #16
 8005dbc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005dc0:	f101 0c10 	add.w	ip, r1, #16
 8005dc4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8005dc8:	ed13 6b04 	vldr	d6, [r3, #-16]
 8005dcc:	ed13 7b02 	vldr	d7, [r3, #-8]
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	4573      	cmp	r3, lr
 8005dd4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8005dd8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8005ddc:	f10c 0c10 	add.w	ip, ip, #16
 8005de0:	d1f2      	bne.n	8005dc8 <st_int8_copy+0x50>
 8005de2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8005de6:	4421      	add	r1, r4
 8005de8:	4420      	add	r0, r4
 8005dea:	f002 0203 	and.w	r2, r2, #3
 8005dee:	b16b      	cbz	r3, 8005e0c <st_int8_copy+0x94>
 8005df0:	6804      	ldr	r4, [r0, #0]
 8005df2:	600c      	str	r4, [r1, #0]
 8005df4:	1e5c      	subs	r4, r3, #1
 8005df6:	d005      	beq.n	8005e04 <st_int8_copy+0x8c>
 8005df8:	6845      	ldr	r5, [r0, #4]
 8005dfa:	604d      	str	r5, [r1, #4]
 8005dfc:	2c01      	cmp	r4, #1
 8005dfe:	bf1c      	itt	ne
 8005e00:	6884      	ldrne	r4, [r0, #8]
 8005e02:	608c      	strne	r4, [r1, #8]
 8005e04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005e08:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005e0c:	b162      	cbz	r2, 8005e28 <st_int8_copy+0xb0>
 8005e0e:	f990 3000 	ldrsb.w	r3, [r0]
 8005e12:	700b      	strb	r3, [r1, #0]
 8005e14:	3a01      	subs	r2, #1
 8005e16:	d007      	beq.n	8005e28 <st_int8_copy+0xb0>
 8005e18:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005e1c:	704b      	strb	r3, [r1, #1]
 8005e1e:	2a01      	cmp	r2, #1
 8005e20:	bf1c      	itt	ne
 8005e22:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8005e26:	708b      	strbne	r3, [r1, #2]
 8005e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2c:	4770      	bx	lr
 8005e2e:	1883      	adds	r3, r0, r2
 8005e30:	428b      	cmp	r3, r1
 8005e32:	d9a7      	bls.n	8005d84 <st_int8_copy+0xc>
 8005e34:	4283      	cmp	r3, r0
 8005e36:	440a      	add	r2, r1
 8005e38:	d9f8      	bls.n	8005e2c <st_int8_copy+0xb4>
 8005e3a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005e3e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005e42:	4283      	cmp	r3, r0
 8005e44:	d1f9      	bne.n	8005e3a <st_int8_copy+0xc2>
 8005e46:	4770      	bx	lr
 8005e48:	4770      	bx	lr
 8005e4a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005e4e:	460b      	mov	r3, r1
 8005e50:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8005e54:	4684      	mov	ip, r0
 8005e56:	f8dc 7000 	ldr.w	r7, [ip]
 8005e5a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005e5e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8005e62:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8005e66:	f8c3 800c 	str.w	r8, [r3, #12]
 8005e6a:	601f      	str	r7, [r3, #0]
 8005e6c:	605e      	str	r6, [r3, #4]
 8005e6e:	609d      	str	r5, [r3, #8]
 8005e70:	3310      	adds	r3, #16
 8005e72:	459e      	cmp	lr, r3
 8005e74:	f10c 0c10 	add.w	ip, ip, #16
 8005e78:	d1ed      	bne.n	8005e56 <st_int8_copy+0xde>
 8005e7a:	e7b2      	b.n	8005de2 <st_int8_copy+0x6a>
 8005e7c:	0893      	lsrs	r3, r2, #2
 8005e7e:	f002 0203 	and.w	r2, r2, #3
 8005e82:	e7b4      	b.n	8005dee <st_int8_copy+0x76>

08005e84 <ai_array_to_buffer_fmt>:
 8005e84:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d050      	beq.n	8005f2e <ai_array_to_buffer_fmt+0xaa>
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	; (8005f38 <ai_array_to_buffer_fmt+0xb4>)
 8005e8e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d00b      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005e96:	dc1c      	bgt.n	8005ed2 <ai_array_to_buffer_fmt+0x4e>
 8005e98:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <ai_array_to_buffer_fmt+0xb8>)
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d007      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005e9e:	dd0b      	ble.n	8005eb8 <ai_array_to_buffer_fmt+0x34>
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <ai_array_to_buffer_fmt+0xbc>)
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d003      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005ea6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d131      	bne.n	8005f12 <ai_array_to_buffer_fmt+0x8e>
 8005eae:	4613      	mov	r3, r2
 8005eb0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005eb4:	4318      	orrs	r0, r3
 8005eb6:	4770      	bx	lr
 8005eb8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d0f6      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005ec0:	dd2c      	ble.n	8005f1c <ai_array_to_buffer_fmt+0x98>
 8005ec2:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <ai_array_to_buffer_fmt+0xc0>)
 8005ec4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	bf18      	it	ne
 8005ecc:	2340      	movne	r3, #64	; 0x40
 8005ece:	4318      	orrs	r0, r3
 8005ed0:	4770      	bx	lr
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <ai_array_to_buffer_fmt+0xc4>)
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d0ea      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005ed8:	dd0e      	ble.n	8005ef8 <ai_array_to_buffer_fmt+0x74>
 8005eda:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <ai_array_to_buffer_fmt+0xc8>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d0e6      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005ee0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d0e2      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005ee8:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <ai_array_to_buffer_fmt+0xcc>)
 8005eea:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bf18      	it	ne
 8005ef2:	2340      	movne	r3, #64	; 0x40
 8005ef4:	4318      	orrs	r0, r3
 8005ef6:	4770      	bx	lr
 8005ef8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d0d6      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005f00:	3307      	adds	r3, #7
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d0d3      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005f06:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf18      	it	ne
 8005f0e:	2340      	movne	r3, #64	; 0x40
 8005f10:	e7ce      	b.n	8005eb0 <ai_array_to_buffer_fmt+0x2c>
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <ai_array_to_buffer_fmt+0xd0>)
 8005f14:	429a      	cmp	r2, r3
 8005f16:	bf18      	it	ne
 8005f18:	2340      	movne	r3, #64	; 0x40
 8005f1a:	e7c9      	b.n	8005eb0 <ai_array_to_buffer_fmt+0x2c>
 8005f1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d0c4      	beq.n	8005eae <ai_array_to_buffer_fmt+0x2a>
 8005f24:	3380      	adds	r3, #128	; 0x80
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf18      	it	ne
 8005f2a:	2340      	movne	r3, #64	; 0x40
 8005f2c:	e7c0      	b.n	8005eb0 <ai_array_to_buffer_fmt+0x2c>
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <ai_array_to_buffer_fmt+0xd4>)
 8005f30:	4003      	ands	r3, r0
 8005f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f36:	e7bb      	b.n	8005eb0 <ai_array_to_buffer_fmt+0x2c>
 8005f38:	00840040 	.word	0x00840040
 8005f3c:	00040840 	.word	0x00040840
 8005f40:	00041040 	.word	0x00041040
 8005f44:	00040447 	.word	0x00040447
 8005f48:	00840840 	.word	0x00840840
 8005f4c:	00841040 	.word	0x00841040
 8005f50:	0084084f 	.word	0x0084084f
 8005f54:	0004084f 	.word	0x0004084f
 8005f58:	00803fff 	.word	0x00803fff

08005f5c <ai_array_get_byte_size>:
 8005f5c:	b319      	cbz	r1, 8005fa6 <ai_array_get_byte_size+0x4a>
 8005f5e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005f62:	fb03 f101 	mul.w	r1, r3, r1
 8005f66:	3107      	adds	r1, #7
 8005f68:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8005f6c:	f021 0307 	bic.w	r3, r1, #7
 8005f70:	2a04      	cmp	r2, #4
 8005f72:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8005f76:	fa23 f101 	lsr.w	r1, r3, r1
 8005f7a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8005f7e:	d00b      	beq.n	8005f98 <ai_array_get_byte_size+0x3c>
 8005f80:	2a08      	cmp	r2, #8
 8005f82:	d002      	beq.n	8005f8a <ai_array_get_byte_size+0x2e>
 8005f84:	3107      	adds	r1, #7
 8005f86:	08c8      	lsrs	r0, r1, #3
 8005f88:	4770      	bx	lr
 8005f8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005f8e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8005f92:	3107      	adds	r1, #7
 8005f94:	08c8      	lsrs	r0, r1, #3
 8005f96:	4770      	bx	lr
 8005f98:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005f9c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8005fa0:	3107      	adds	r1, #7
 8005fa2:	08c8      	lsrs	r0, r1, #3
 8005fa4:	4770      	bx	lr
 8005fa6:	4608      	mov	r0, r1
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <ai_array_get_data_byte_size>:
 8005fac:	b169      	cbz	r1, 8005fca <ai_array_get_data_byte_size+0x1e>
 8005fae:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8005fb2:	fb02 f101 	mul.w	r1, r2, r1
 8005fb6:	1dcb      	adds	r3, r1, #7
 8005fb8:	f023 0307 	bic.w	r3, r3, #7
 8005fbc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8005fc0:	fa23 f000 	lsr.w	r0, r3, r0
 8005fc4:	3007      	adds	r0, #7
 8005fc6:	08c0      	lsrs	r0, r0, #3
 8005fc8:	4770      	bx	lr
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop

08005fd0 <ai_version_get>:
 8005fd0:	0212      	lsls	r2, r2, #8
 8005fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005fd6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005fda:	4770      	bx	lr

08005fdc <get_tensor_byte_size>:
 8005fdc:	b410      	push	{r4}
 8005fde:	6983      	ldr	r3, [r0, #24]
 8005fe0:	68c4      	ldr	r4, [r0, #12]
 8005fe2:	6941      	ldr	r1, [r0, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	4a07      	ldr	r2, [pc, #28]	; (8006008 <get_tensor_byte_size+0x2c>)
 8005fea:	68c9      	ldr	r1, [r1, #12]
 8005fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005ff4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ff8:	fb01 f000 	mul.w	r0, r1, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bf04      	itt	eq
 8006000:	3007      	addeq	r0, #7
 8006002:	08c0      	lsreq	r0, r0, #3
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	000400c0 	.word	0x000400c0

0800600c <sbrk_aligned>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4e0e      	ldr	r6, [pc, #56]	; (8006048 <sbrk_aligned+0x3c>)
 8006010:	460c      	mov	r4, r1
 8006012:	6831      	ldr	r1, [r6, #0]
 8006014:	4605      	mov	r5, r0
 8006016:	b911      	cbnz	r1, 800601e <sbrk_aligned+0x12>
 8006018:	f000 fad6 	bl	80065c8 <_sbrk_r>
 800601c:	6030      	str	r0, [r6, #0]
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 fad1 	bl	80065c8 <_sbrk_r>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d00a      	beq.n	8006040 <sbrk_aligned+0x34>
 800602a:	1cc4      	adds	r4, r0, #3
 800602c:	f024 0403 	bic.w	r4, r4, #3
 8006030:	42a0      	cmp	r0, r4
 8006032:	d007      	beq.n	8006044 <sbrk_aligned+0x38>
 8006034:	1a21      	subs	r1, r4, r0
 8006036:	4628      	mov	r0, r5
 8006038:	f000 fac6 	bl	80065c8 <_sbrk_r>
 800603c:	3001      	adds	r0, #1
 800603e:	d101      	bne.n	8006044 <sbrk_aligned+0x38>
 8006040:	f04f 34ff 	mov.w	r4, #4294967295
 8006044:	4620      	mov	r0, r4
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	20000824 	.word	0x20000824

0800604c <_malloc_r>:
 800604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006050:	1ccd      	adds	r5, r1, #3
 8006052:	f025 0503 	bic.w	r5, r5, #3
 8006056:	3508      	adds	r5, #8
 8006058:	2d0c      	cmp	r5, #12
 800605a:	bf38      	it	cc
 800605c:	250c      	movcc	r5, #12
 800605e:	2d00      	cmp	r5, #0
 8006060:	4607      	mov	r7, r0
 8006062:	db01      	blt.n	8006068 <_malloc_r+0x1c>
 8006064:	42a9      	cmp	r1, r5
 8006066:	d905      	bls.n	8006074 <_malloc_r+0x28>
 8006068:	230c      	movs	r3, #12
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	2600      	movs	r6, #0
 800606e:	4630      	mov	r0, r6
 8006070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006074:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006148 <_malloc_r+0xfc>
 8006078:	f000 f868 	bl	800614c <__malloc_lock>
 800607c:	f8d8 3000 	ldr.w	r3, [r8]
 8006080:	461c      	mov	r4, r3
 8006082:	bb5c      	cbnz	r4, 80060dc <_malloc_r+0x90>
 8006084:	4629      	mov	r1, r5
 8006086:	4638      	mov	r0, r7
 8006088:	f7ff ffc0 	bl	800600c <sbrk_aligned>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	4604      	mov	r4, r0
 8006090:	d155      	bne.n	800613e <_malloc_r+0xf2>
 8006092:	f8d8 4000 	ldr.w	r4, [r8]
 8006096:	4626      	mov	r6, r4
 8006098:	2e00      	cmp	r6, #0
 800609a:	d145      	bne.n	8006128 <_malloc_r+0xdc>
 800609c:	2c00      	cmp	r4, #0
 800609e:	d048      	beq.n	8006132 <_malloc_r+0xe6>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	4631      	mov	r1, r6
 80060a4:	4638      	mov	r0, r7
 80060a6:	eb04 0903 	add.w	r9, r4, r3
 80060aa:	f000 fa8d 	bl	80065c8 <_sbrk_r>
 80060ae:	4581      	cmp	r9, r0
 80060b0:	d13f      	bne.n	8006132 <_malloc_r+0xe6>
 80060b2:	6821      	ldr	r1, [r4, #0]
 80060b4:	1a6d      	subs	r5, r5, r1
 80060b6:	4629      	mov	r1, r5
 80060b8:	4638      	mov	r0, r7
 80060ba:	f7ff ffa7 	bl	800600c <sbrk_aligned>
 80060be:	3001      	adds	r0, #1
 80060c0:	d037      	beq.n	8006132 <_malloc_r+0xe6>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	442b      	add	r3, r5
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	f8d8 3000 	ldr.w	r3, [r8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d038      	beq.n	8006142 <_malloc_r+0xf6>
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	42a2      	cmp	r2, r4
 80060d4:	d12b      	bne.n	800612e <_malloc_r+0xe2>
 80060d6:	2200      	movs	r2, #0
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	e00f      	b.n	80060fc <_malloc_r+0xb0>
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	1b52      	subs	r2, r2, r5
 80060e0:	d41f      	bmi.n	8006122 <_malloc_r+0xd6>
 80060e2:	2a0b      	cmp	r2, #11
 80060e4:	d917      	bls.n	8006116 <_malloc_r+0xca>
 80060e6:	1961      	adds	r1, r4, r5
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	6025      	str	r5, [r4, #0]
 80060ec:	bf18      	it	ne
 80060ee:	6059      	strne	r1, [r3, #4]
 80060f0:	6863      	ldr	r3, [r4, #4]
 80060f2:	bf08      	it	eq
 80060f4:	f8c8 1000 	streq.w	r1, [r8]
 80060f8:	5162      	str	r2, [r4, r5]
 80060fa:	604b      	str	r3, [r1, #4]
 80060fc:	4638      	mov	r0, r7
 80060fe:	f104 060b 	add.w	r6, r4, #11
 8006102:	f000 f829 	bl	8006158 <__malloc_unlock>
 8006106:	f026 0607 	bic.w	r6, r6, #7
 800610a:	1d23      	adds	r3, r4, #4
 800610c:	1af2      	subs	r2, r6, r3
 800610e:	d0ae      	beq.n	800606e <_malloc_r+0x22>
 8006110:	1b9b      	subs	r3, r3, r6
 8006112:	50a3      	str	r3, [r4, r2]
 8006114:	e7ab      	b.n	800606e <_malloc_r+0x22>
 8006116:	42a3      	cmp	r3, r4
 8006118:	6862      	ldr	r2, [r4, #4]
 800611a:	d1dd      	bne.n	80060d8 <_malloc_r+0x8c>
 800611c:	f8c8 2000 	str.w	r2, [r8]
 8006120:	e7ec      	b.n	80060fc <_malloc_r+0xb0>
 8006122:	4623      	mov	r3, r4
 8006124:	6864      	ldr	r4, [r4, #4]
 8006126:	e7ac      	b.n	8006082 <_malloc_r+0x36>
 8006128:	4634      	mov	r4, r6
 800612a:	6876      	ldr	r6, [r6, #4]
 800612c:	e7b4      	b.n	8006098 <_malloc_r+0x4c>
 800612e:	4613      	mov	r3, r2
 8006130:	e7cc      	b.n	80060cc <_malloc_r+0x80>
 8006132:	230c      	movs	r3, #12
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4638      	mov	r0, r7
 8006138:	f000 f80e 	bl	8006158 <__malloc_unlock>
 800613c:	e797      	b.n	800606e <_malloc_r+0x22>
 800613e:	6025      	str	r5, [r4, #0]
 8006140:	e7dc      	b.n	80060fc <_malloc_r+0xb0>
 8006142:	605b      	str	r3, [r3, #4]
 8006144:	deff      	udf	#255	; 0xff
 8006146:	bf00      	nop
 8006148:	20000820 	.word	0x20000820

0800614c <__malloc_lock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_lock+0x8>)
 800614e:	f000 ba87 	b.w	8006660 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	20000968 	.word	0x20000968

08006158 <__malloc_unlock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_unlock+0x8>)
 800615a:	f000 ba82 	b.w	8006662 <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	20000968 	.word	0x20000968

08006164 <std>:
 8006164:	2300      	movs	r3, #0
 8006166:	b510      	push	{r4, lr}
 8006168:	4604      	mov	r4, r0
 800616a:	e9c0 3300 	strd	r3, r3, [r0]
 800616e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006172:	6083      	str	r3, [r0, #8]
 8006174:	8181      	strh	r1, [r0, #12]
 8006176:	6643      	str	r3, [r0, #100]	; 0x64
 8006178:	81c2      	strh	r2, [r0, #14]
 800617a:	6183      	str	r3, [r0, #24]
 800617c:	4619      	mov	r1, r3
 800617e:	2208      	movs	r2, #8
 8006180:	305c      	adds	r0, #92	; 0x5c
 8006182:	f000 f9e5 	bl	8006550 <memset>
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <std+0x38>)
 8006188:	6263      	str	r3, [r4, #36]	; 0x24
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <std+0x3c>)
 800618c:	62a3      	str	r3, [r4, #40]	; 0x28
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <std+0x40>)
 8006190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <std+0x44>)
 8006194:	6224      	str	r4, [r4, #32]
 8006196:	6323      	str	r3, [r4, #48]	; 0x30
 8006198:	bd10      	pop	{r4, pc}
 800619a:	bf00      	nop
 800619c:	080063a1 	.word	0x080063a1
 80061a0:	080063c3 	.word	0x080063c3
 80061a4:	080063fb 	.word	0x080063fb
 80061a8:	0800641f 	.word	0x0800641f

080061ac <stdio_exit_handler>:
 80061ac:	4a02      	ldr	r2, [pc, #8]	; (80061b8 <stdio_exit_handler+0xc>)
 80061ae:	4903      	ldr	r1, [pc, #12]	; (80061bc <stdio_exit_handler+0x10>)
 80061b0:	4803      	ldr	r0, [pc, #12]	; (80061c0 <stdio_exit_handler+0x14>)
 80061b2:	f000 b869 	b.w	8006288 <_fwalk_sglue>
 80061b6:	bf00      	nop
 80061b8:	20000558 	.word	0x20000558
 80061bc:	08006db1 	.word	0x08006db1
 80061c0:	20000564 	.word	0x20000564

080061c4 <cleanup_stdio>:
 80061c4:	6841      	ldr	r1, [r0, #4]
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <cleanup_stdio+0x34>)
 80061c8:	4299      	cmp	r1, r3
 80061ca:	b510      	push	{r4, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	d001      	beq.n	80061d4 <cleanup_stdio+0x10>
 80061d0:	f000 fdee 	bl	8006db0 <_fflush_r>
 80061d4:	68a1      	ldr	r1, [r4, #8]
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <cleanup_stdio+0x38>)
 80061d8:	4299      	cmp	r1, r3
 80061da:	d002      	beq.n	80061e2 <cleanup_stdio+0x1e>
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 fde7 	bl	8006db0 <_fflush_r>
 80061e2:	68e1      	ldr	r1, [r4, #12]
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <cleanup_stdio+0x3c>)
 80061e6:	4299      	cmp	r1, r3
 80061e8:	d004      	beq.n	80061f4 <cleanup_stdio+0x30>
 80061ea:	4620      	mov	r0, r4
 80061ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f0:	f000 bdde 	b.w	8006db0 <_fflush_r>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	bf00      	nop
 80061f8:	20000828 	.word	0x20000828
 80061fc:	20000890 	.word	0x20000890
 8006200:	200008f8 	.word	0x200008f8

08006204 <global_stdio_init.part.0>:
 8006204:	b510      	push	{r4, lr}
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <global_stdio_init.part.0+0x30>)
 8006208:	4c0b      	ldr	r4, [pc, #44]	; (8006238 <global_stdio_init.part.0+0x34>)
 800620a:	4a0c      	ldr	r2, [pc, #48]	; (800623c <global_stdio_init.part.0+0x38>)
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	4620      	mov	r0, r4
 8006210:	2200      	movs	r2, #0
 8006212:	2104      	movs	r1, #4
 8006214:	f7ff ffa6 	bl	8006164 <std>
 8006218:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800621c:	2201      	movs	r2, #1
 800621e:	2109      	movs	r1, #9
 8006220:	f7ff ffa0 	bl	8006164 <std>
 8006224:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006228:	2202      	movs	r2, #2
 800622a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800622e:	2112      	movs	r1, #18
 8006230:	f7ff bf98 	b.w	8006164 <std>
 8006234:	20000960 	.word	0x20000960
 8006238:	20000828 	.word	0x20000828
 800623c:	080061ad 	.word	0x080061ad

08006240 <__sfp_lock_acquire>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_acquire+0x8>)
 8006242:	f000 ba0d 	b.w	8006660 <__retarget_lock_acquire_recursive>
 8006246:	bf00      	nop
 8006248:	20000969 	.word	0x20000969

0800624c <__sfp_lock_release>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sfp_lock_release+0x8>)
 800624e:	f000 ba08 	b.w	8006662 <__retarget_lock_release_recursive>
 8006252:	bf00      	nop
 8006254:	20000969 	.word	0x20000969

08006258 <__sinit>:
 8006258:	b510      	push	{r4, lr}
 800625a:	4604      	mov	r4, r0
 800625c:	f7ff fff0 	bl	8006240 <__sfp_lock_acquire>
 8006260:	6a23      	ldr	r3, [r4, #32]
 8006262:	b11b      	cbz	r3, 800626c <__sinit+0x14>
 8006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006268:	f7ff bff0 	b.w	800624c <__sfp_lock_release>
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <__sinit+0x28>)
 800626e:	6223      	str	r3, [r4, #32]
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <__sinit+0x2c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f5      	bne.n	8006264 <__sinit+0xc>
 8006278:	f7ff ffc4 	bl	8006204 <global_stdio_init.part.0>
 800627c:	e7f2      	b.n	8006264 <__sinit+0xc>
 800627e:	bf00      	nop
 8006280:	080061c5 	.word	0x080061c5
 8006284:	20000960 	.word	0x20000960

08006288 <_fwalk_sglue>:
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	4607      	mov	r7, r0
 800628e:	4688      	mov	r8, r1
 8006290:	4614      	mov	r4, r2
 8006292:	2600      	movs	r6, #0
 8006294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006298:	f1b9 0901 	subs.w	r9, r9, #1
 800629c:	d505      	bpl.n	80062aa <_fwalk_sglue+0x22>
 800629e:	6824      	ldr	r4, [r4, #0]
 80062a0:	2c00      	cmp	r4, #0
 80062a2:	d1f7      	bne.n	8006294 <_fwalk_sglue+0xc>
 80062a4:	4630      	mov	r0, r6
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d907      	bls.n	80062c0 <_fwalk_sglue+0x38>
 80062b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062b4:	3301      	adds	r3, #1
 80062b6:	d003      	beq.n	80062c0 <_fwalk_sglue+0x38>
 80062b8:	4629      	mov	r1, r5
 80062ba:	4638      	mov	r0, r7
 80062bc:	47c0      	blx	r8
 80062be:	4306      	orrs	r6, r0
 80062c0:	3568      	adds	r5, #104	; 0x68
 80062c2:	e7e9      	b.n	8006298 <_fwalk_sglue+0x10>

080062c4 <iprintf>:
 80062c4:	b40f      	push	{r0, r1, r2, r3}
 80062c6:	b507      	push	{r0, r1, r2, lr}
 80062c8:	4906      	ldr	r1, [pc, #24]	; (80062e4 <iprintf+0x20>)
 80062ca:	ab04      	add	r3, sp, #16
 80062cc:	6808      	ldr	r0, [r1, #0]
 80062ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d2:	6881      	ldr	r1, [r0, #8]
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	f000 fa3b 	bl	8006750 <_vfiprintf_r>
 80062da:	b003      	add	sp, #12
 80062dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e0:	b004      	add	sp, #16
 80062e2:	4770      	bx	lr
 80062e4:	200005b0 	.word	0x200005b0

080062e8 <_puts_r>:
 80062e8:	6a03      	ldr	r3, [r0, #32]
 80062ea:	b570      	push	{r4, r5, r6, lr}
 80062ec:	6884      	ldr	r4, [r0, #8]
 80062ee:	4605      	mov	r5, r0
 80062f0:	460e      	mov	r6, r1
 80062f2:	b90b      	cbnz	r3, 80062f8 <_puts_r+0x10>
 80062f4:	f7ff ffb0 	bl	8006258 <__sinit>
 80062f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062fa:	07db      	lsls	r3, r3, #31
 80062fc:	d405      	bmi.n	800630a <_puts_r+0x22>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	0598      	lsls	r0, r3, #22
 8006302:	d402      	bmi.n	800630a <_puts_r+0x22>
 8006304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006306:	f000 f9ab 	bl	8006660 <__retarget_lock_acquire_recursive>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	0719      	lsls	r1, r3, #28
 800630e:	d513      	bpl.n	8006338 <_puts_r+0x50>
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	b18b      	cbz	r3, 8006338 <_puts_r+0x50>
 8006314:	3e01      	subs	r6, #1
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800631c:	3b01      	subs	r3, #1
 800631e:	60a3      	str	r3, [r4, #8]
 8006320:	b9e9      	cbnz	r1, 800635e <_puts_r+0x76>
 8006322:	2b00      	cmp	r3, #0
 8006324:	da2e      	bge.n	8006384 <_puts_r+0x9c>
 8006326:	4622      	mov	r2, r4
 8006328:	210a      	movs	r1, #10
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f87b 	bl	8006426 <__swbuf_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d007      	beq.n	8006344 <_puts_r+0x5c>
 8006334:	250a      	movs	r5, #10
 8006336:	e007      	b.n	8006348 <_puts_r+0x60>
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f8b0 	bl	80064a0 <__swsetup_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	d0e7      	beq.n	8006314 <_puts_r+0x2c>
 8006344:	f04f 35ff 	mov.w	r5, #4294967295
 8006348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800634a:	07da      	lsls	r2, r3, #31
 800634c:	d405      	bmi.n	800635a <_puts_r+0x72>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	059b      	lsls	r3, r3, #22
 8006352:	d402      	bmi.n	800635a <_puts_r+0x72>
 8006354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006356:	f000 f984 	bl	8006662 <__retarget_lock_release_recursive>
 800635a:	4628      	mov	r0, r5
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	2b00      	cmp	r3, #0
 8006360:	da04      	bge.n	800636c <_puts_r+0x84>
 8006362:	69a2      	ldr	r2, [r4, #24]
 8006364:	429a      	cmp	r2, r3
 8006366:	dc06      	bgt.n	8006376 <_puts_r+0x8e>
 8006368:	290a      	cmp	r1, #10
 800636a:	d004      	beq.n	8006376 <_puts_r+0x8e>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	6022      	str	r2, [r4, #0]
 8006372:	7019      	strb	r1, [r3, #0]
 8006374:	e7cf      	b.n	8006316 <_puts_r+0x2e>
 8006376:	4622      	mov	r2, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f000 f854 	bl	8006426 <__swbuf_r>
 800637e:	3001      	adds	r0, #1
 8006380:	d1c9      	bne.n	8006316 <_puts_r+0x2e>
 8006382:	e7df      	b.n	8006344 <_puts_r+0x5c>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	250a      	movs	r5, #10
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	6022      	str	r2, [r4, #0]
 800638c:	701d      	strb	r5, [r3, #0]
 800638e:	e7db      	b.n	8006348 <_puts_r+0x60>

08006390 <puts>:
 8006390:	4b02      	ldr	r3, [pc, #8]	; (800639c <puts+0xc>)
 8006392:	4601      	mov	r1, r0
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	f7ff bfa7 	b.w	80062e8 <_puts_r>
 800639a:	bf00      	nop
 800639c:	200005b0 	.word	0x200005b0

080063a0 <__sread>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	460c      	mov	r4, r1
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	f000 f8fc 	bl	80065a4 <_read_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	bfab      	itete	ge
 80063b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063b2:	89a3      	ldrhlt	r3, [r4, #12]
 80063b4:	181b      	addge	r3, r3, r0
 80063b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ba:	bfac      	ite	ge
 80063bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063be:	81a3      	strhlt	r3, [r4, #12]
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <__swrite>:
 80063c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	461f      	mov	r7, r3
 80063c8:	898b      	ldrh	r3, [r1, #12]
 80063ca:	05db      	lsls	r3, r3, #23
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4616      	mov	r6, r2
 80063d2:	d505      	bpl.n	80063e0 <__swrite+0x1e>
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	2302      	movs	r3, #2
 80063da:	2200      	movs	r2, #0
 80063dc:	f000 f8d0 	bl	8006580 <_lseek_r>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	4632      	mov	r2, r6
 80063ee:	463b      	mov	r3, r7
 80063f0:	4628      	mov	r0, r5
 80063f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f6:	f000 b8f7 	b.w	80065e8 <_write_r>

080063fa <__sseek>:
 80063fa:	b510      	push	{r4, lr}
 80063fc:	460c      	mov	r4, r1
 80063fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006402:	f000 f8bd 	bl	8006580 <_lseek_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	bf15      	itete	ne
 800640c:	6560      	strne	r0, [r4, #84]	; 0x54
 800640e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006416:	81a3      	strheq	r3, [r4, #12]
 8006418:	bf18      	it	ne
 800641a:	81a3      	strhne	r3, [r4, #12]
 800641c:	bd10      	pop	{r4, pc}

0800641e <__sclose>:
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 b89d 	b.w	8006560 <_close_r>

08006426 <__swbuf_r>:
 8006426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006428:	460e      	mov	r6, r1
 800642a:	4614      	mov	r4, r2
 800642c:	4605      	mov	r5, r0
 800642e:	b118      	cbz	r0, 8006438 <__swbuf_r+0x12>
 8006430:	6a03      	ldr	r3, [r0, #32]
 8006432:	b90b      	cbnz	r3, 8006438 <__swbuf_r+0x12>
 8006434:	f7ff ff10 	bl	8006258 <__sinit>
 8006438:	69a3      	ldr	r3, [r4, #24]
 800643a:	60a3      	str	r3, [r4, #8]
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	071a      	lsls	r2, r3, #28
 8006440:	d525      	bpl.n	800648e <__swbuf_r+0x68>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	b31b      	cbz	r3, 800648e <__swbuf_r+0x68>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	6922      	ldr	r2, [r4, #16]
 800644a:	1a98      	subs	r0, r3, r2
 800644c:	6963      	ldr	r3, [r4, #20]
 800644e:	b2f6      	uxtb	r6, r6
 8006450:	4283      	cmp	r3, r0
 8006452:	4637      	mov	r7, r6
 8006454:	dc04      	bgt.n	8006460 <__swbuf_r+0x3a>
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f000 fca9 	bl	8006db0 <_fflush_r>
 800645e:	b9e0      	cbnz	r0, 800649a <__swbuf_r+0x74>
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	3b01      	subs	r3, #1
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	701e      	strb	r6, [r3, #0]
 800646e:	6962      	ldr	r2, [r4, #20]
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	429a      	cmp	r2, r3
 8006474:	d004      	beq.n	8006480 <__swbuf_r+0x5a>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	07db      	lsls	r3, r3, #31
 800647a:	d506      	bpl.n	800648a <__swbuf_r+0x64>
 800647c:	2e0a      	cmp	r6, #10
 800647e:	d104      	bne.n	800648a <__swbuf_r+0x64>
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 fc94 	bl	8006db0 <_fflush_r>
 8006488:	b938      	cbnz	r0, 800649a <__swbuf_r+0x74>
 800648a:	4638      	mov	r0, r7
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648e:	4621      	mov	r1, r4
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f805 	bl	80064a0 <__swsetup_r>
 8006496:	2800      	cmp	r0, #0
 8006498:	d0d5      	beq.n	8006446 <__swbuf_r+0x20>
 800649a:	f04f 37ff 	mov.w	r7, #4294967295
 800649e:	e7f4      	b.n	800648a <__swbuf_r+0x64>

080064a0 <__swsetup_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4b2a      	ldr	r3, [pc, #168]	; (800654c <__swsetup_r+0xac>)
 80064a4:	4605      	mov	r5, r0
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	460c      	mov	r4, r1
 80064aa:	b118      	cbz	r0, 80064b4 <__swsetup_r+0x14>
 80064ac:	6a03      	ldr	r3, [r0, #32]
 80064ae:	b90b      	cbnz	r3, 80064b4 <__swsetup_r+0x14>
 80064b0:	f7ff fed2 	bl	8006258 <__sinit>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064ba:	0718      	lsls	r0, r3, #28
 80064bc:	d422      	bmi.n	8006504 <__swsetup_r+0x64>
 80064be:	06d9      	lsls	r1, r3, #27
 80064c0:	d407      	bmi.n	80064d2 <__swsetup_r+0x32>
 80064c2:	2309      	movs	r3, #9
 80064c4:	602b      	str	r3, [r5, #0]
 80064c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e034      	b.n	800653c <__swsetup_r+0x9c>
 80064d2:	0758      	lsls	r0, r3, #29
 80064d4:	d512      	bpl.n	80064fc <__swsetup_r+0x5c>
 80064d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d8:	b141      	cbz	r1, 80064ec <__swsetup_r+0x4c>
 80064da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064de:	4299      	cmp	r1, r3
 80064e0:	d002      	beq.n	80064e8 <__swsetup_r+0x48>
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 f8be 	bl	8006664 <_free_r>
 80064e8:	2300      	movs	r3, #0
 80064ea:	6363      	str	r3, [r4, #52]	; 0x34
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	2300      	movs	r3, #0
 80064f6:	6063      	str	r3, [r4, #4]
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f043 0308 	orr.w	r3, r3, #8
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	b94b      	cbnz	r3, 800651c <__swsetup_r+0x7c>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800650e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006512:	d003      	beq.n	800651c <__swsetup_r+0x7c>
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fc98 	bl	8006e4c <__smakebuf_r>
 800651c:	89a0      	ldrh	r0, [r4, #12]
 800651e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006522:	f010 0301 	ands.w	r3, r0, #1
 8006526:	d00a      	beq.n	800653e <__swsetup_r+0x9e>
 8006528:	2300      	movs	r3, #0
 800652a:	60a3      	str	r3, [r4, #8]
 800652c:	6963      	ldr	r3, [r4, #20]
 800652e:	425b      	negs	r3, r3
 8006530:	61a3      	str	r3, [r4, #24]
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	b943      	cbnz	r3, 8006548 <__swsetup_r+0xa8>
 8006536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800653a:	d1c4      	bne.n	80064c6 <__swsetup_r+0x26>
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	0781      	lsls	r1, r0, #30
 8006540:	bf58      	it	pl
 8006542:	6963      	ldrpl	r3, [r4, #20]
 8006544:	60a3      	str	r3, [r4, #8]
 8006546:	e7f4      	b.n	8006532 <__swsetup_r+0x92>
 8006548:	2000      	movs	r0, #0
 800654a:	e7f7      	b.n	800653c <__swsetup_r+0x9c>
 800654c:	200005b0 	.word	0x200005b0

08006550 <memset>:
 8006550:	4402      	add	r2, r0
 8006552:	4603      	mov	r3, r0
 8006554:	4293      	cmp	r3, r2
 8006556:	d100      	bne.n	800655a <memset+0xa>
 8006558:	4770      	bx	lr
 800655a:	f803 1b01 	strb.w	r1, [r3], #1
 800655e:	e7f9      	b.n	8006554 <memset+0x4>

08006560 <_close_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d06      	ldr	r5, [pc, #24]	; (800657c <_close_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f000 fe00 	bl	8007170 <_close>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_close_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_close_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	20000964 	.word	0x20000964

08006580 <_lseek_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d07      	ldr	r5, [pc, #28]	; (80065a0 <_lseek_r+0x20>)
 8006584:	4604      	mov	r4, r0
 8006586:	4608      	mov	r0, r1
 8006588:	4611      	mov	r1, r2
 800658a:	2200      	movs	r2, #0
 800658c:	602a      	str	r2, [r5, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fe06 	bl	80071a0 <_lseek>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_lseek_r+0x1e>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_lseek_r+0x1e>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	20000964 	.word	0x20000964

080065a4 <_read_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d07      	ldr	r5, [pc, #28]	; (80065c4 <_read_r+0x20>)
 80065a8:	4604      	mov	r4, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	4611      	mov	r1, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	602a      	str	r2, [r5, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 fdfc 	bl	80071b0 <_read>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_read_r+0x1e>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_read_r+0x1e>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000964 	.word	0x20000964

080065c8 <_sbrk_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d06      	ldr	r5, [pc, #24]	; (80065e4 <_sbrk_r+0x1c>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	f7fa f9c6 	bl	8000964 <_sbrk>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_sbrk_r+0x1a>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_sbrk_r+0x1a>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000964 	.word	0x20000964

080065e8 <_write_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	; (8006608 <_write_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f000 fde2 	bl	80071c0 <_write>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_write_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_write_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20000964 	.word	0x20000964

0800660c <__errno>:
 800660c:	4b01      	ldr	r3, [pc, #4]	; (8006614 <__errno+0x8>)
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	200005b0 	.word	0x200005b0

08006618 <__libc_init_array>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	4d0d      	ldr	r5, [pc, #52]	; (8006650 <__libc_init_array+0x38>)
 800661c:	4c0d      	ldr	r4, [pc, #52]	; (8006654 <__libc_init_array+0x3c>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	2600      	movs	r6, #0
 8006624:	42a6      	cmp	r6, r4
 8006626:	d109      	bne.n	800663c <__libc_init_array+0x24>
 8006628:	4d0b      	ldr	r5, [pc, #44]	; (8006658 <__libc_init_array+0x40>)
 800662a:	4c0c      	ldr	r4, [pc, #48]	; (800665c <__libc_init_array+0x44>)
 800662c:	f000 fdd0 	bl	80071d0 <_init>
 8006630:	1b64      	subs	r4, r4, r5
 8006632:	10a4      	asrs	r4, r4, #2
 8006634:	2600      	movs	r6, #0
 8006636:	42a6      	cmp	r6, r4
 8006638:	d105      	bne.n	8006646 <__libc_init_array+0x2e>
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006640:	4798      	blx	r3
 8006642:	3601      	adds	r6, #1
 8006644:	e7ee      	b.n	8006624 <__libc_init_array+0xc>
 8006646:	f855 3b04 	ldr.w	r3, [r5], #4
 800664a:	4798      	blx	r3
 800664c:	3601      	adds	r6, #1
 800664e:	e7f2      	b.n	8006636 <__libc_init_array+0x1e>
 8006650:	08008364 	.word	0x08008364
 8006654:	08008364 	.word	0x08008364
 8006658:	08008364 	.word	0x08008364
 800665c:	08008368 	.word	0x08008368

08006660 <__retarget_lock_acquire_recursive>:
 8006660:	4770      	bx	lr

08006662 <__retarget_lock_release_recursive>:
 8006662:	4770      	bx	lr

08006664 <_free_r>:
 8006664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006666:	2900      	cmp	r1, #0
 8006668:	d044      	beq.n	80066f4 <_free_r+0x90>
 800666a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800666e:	9001      	str	r0, [sp, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f1a1 0404 	sub.w	r4, r1, #4
 8006676:	bfb8      	it	lt
 8006678:	18e4      	addlt	r4, r4, r3
 800667a:	f7ff fd67 	bl	800614c <__malloc_lock>
 800667e:	4a1e      	ldr	r2, [pc, #120]	; (80066f8 <_free_r+0x94>)
 8006680:	9801      	ldr	r0, [sp, #4]
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	b933      	cbnz	r3, 8006694 <_free_r+0x30>
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	6014      	str	r4, [r2, #0]
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006690:	f7ff bd62 	b.w	8006158 <__malloc_unlock>
 8006694:	42a3      	cmp	r3, r4
 8006696:	d908      	bls.n	80066aa <_free_r+0x46>
 8006698:	6825      	ldr	r5, [r4, #0]
 800669a:	1961      	adds	r1, r4, r5
 800669c:	428b      	cmp	r3, r1
 800669e:	bf01      	itttt	eq
 80066a0:	6819      	ldreq	r1, [r3, #0]
 80066a2:	685b      	ldreq	r3, [r3, #4]
 80066a4:	1949      	addeq	r1, r1, r5
 80066a6:	6021      	streq	r1, [r4, #0]
 80066a8:	e7ed      	b.n	8006686 <_free_r+0x22>
 80066aa:	461a      	mov	r2, r3
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b10b      	cbz	r3, 80066b4 <_free_r+0x50>
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d9fa      	bls.n	80066aa <_free_r+0x46>
 80066b4:	6811      	ldr	r1, [r2, #0]
 80066b6:	1855      	adds	r5, r2, r1
 80066b8:	42a5      	cmp	r5, r4
 80066ba:	d10b      	bne.n	80066d4 <_free_r+0x70>
 80066bc:	6824      	ldr	r4, [r4, #0]
 80066be:	4421      	add	r1, r4
 80066c0:	1854      	adds	r4, r2, r1
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	6011      	str	r1, [r2, #0]
 80066c6:	d1e0      	bne.n	800668a <_free_r+0x26>
 80066c8:	681c      	ldr	r4, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	6053      	str	r3, [r2, #4]
 80066ce:	440c      	add	r4, r1
 80066d0:	6014      	str	r4, [r2, #0]
 80066d2:	e7da      	b.n	800668a <_free_r+0x26>
 80066d4:	d902      	bls.n	80066dc <_free_r+0x78>
 80066d6:	230c      	movs	r3, #12
 80066d8:	6003      	str	r3, [r0, #0]
 80066da:	e7d6      	b.n	800668a <_free_r+0x26>
 80066dc:	6825      	ldr	r5, [r4, #0]
 80066de:	1961      	adds	r1, r4, r5
 80066e0:	428b      	cmp	r3, r1
 80066e2:	bf04      	itt	eq
 80066e4:	6819      	ldreq	r1, [r3, #0]
 80066e6:	685b      	ldreq	r3, [r3, #4]
 80066e8:	6063      	str	r3, [r4, #4]
 80066ea:	bf04      	itt	eq
 80066ec:	1949      	addeq	r1, r1, r5
 80066ee:	6021      	streq	r1, [r4, #0]
 80066f0:	6054      	str	r4, [r2, #4]
 80066f2:	e7ca      	b.n	800668a <_free_r+0x26>
 80066f4:	b003      	add	sp, #12
 80066f6:	bd30      	pop	{r4, r5, pc}
 80066f8:	20000820 	.word	0x20000820

080066fc <__sfputc_r>:
 80066fc:	6893      	ldr	r3, [r2, #8]
 80066fe:	3b01      	subs	r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	b410      	push	{r4}
 8006704:	6093      	str	r3, [r2, #8]
 8006706:	da08      	bge.n	800671a <__sfputc_r+0x1e>
 8006708:	6994      	ldr	r4, [r2, #24]
 800670a:	42a3      	cmp	r3, r4
 800670c:	db01      	blt.n	8006712 <__sfputc_r+0x16>
 800670e:	290a      	cmp	r1, #10
 8006710:	d103      	bne.n	800671a <__sfputc_r+0x1e>
 8006712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006716:	f7ff be86 	b.w	8006426 <__swbuf_r>
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	1c58      	adds	r0, r3, #1
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	7019      	strb	r1, [r3, #0]
 8006722:	4608      	mov	r0, r1
 8006724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006728:	4770      	bx	lr

0800672a <__sfputs_r>:
 800672a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672c:	4606      	mov	r6, r0
 800672e:	460f      	mov	r7, r1
 8006730:	4614      	mov	r4, r2
 8006732:	18d5      	adds	r5, r2, r3
 8006734:	42ac      	cmp	r4, r5
 8006736:	d101      	bne.n	800673c <__sfputs_r+0x12>
 8006738:	2000      	movs	r0, #0
 800673a:	e007      	b.n	800674c <__sfputs_r+0x22>
 800673c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006740:	463a      	mov	r2, r7
 8006742:	4630      	mov	r0, r6
 8006744:	f7ff ffda 	bl	80066fc <__sfputc_r>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d1f3      	bne.n	8006734 <__sfputs_r+0xa>
 800674c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006750 <_vfiprintf_r>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	460d      	mov	r5, r1
 8006756:	b09d      	sub	sp, #116	; 0x74
 8006758:	4614      	mov	r4, r2
 800675a:	4698      	mov	r8, r3
 800675c:	4606      	mov	r6, r0
 800675e:	b118      	cbz	r0, 8006768 <_vfiprintf_r+0x18>
 8006760:	6a03      	ldr	r3, [r0, #32]
 8006762:	b90b      	cbnz	r3, 8006768 <_vfiprintf_r+0x18>
 8006764:	f7ff fd78 	bl	8006258 <__sinit>
 8006768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800676a:	07d9      	lsls	r1, r3, #31
 800676c:	d405      	bmi.n	800677a <_vfiprintf_r+0x2a>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	059a      	lsls	r2, r3, #22
 8006772:	d402      	bmi.n	800677a <_vfiprintf_r+0x2a>
 8006774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006776:	f7ff ff73 	bl	8006660 <__retarget_lock_acquire_recursive>
 800677a:	89ab      	ldrh	r3, [r5, #12]
 800677c:	071b      	lsls	r3, r3, #28
 800677e:	d501      	bpl.n	8006784 <_vfiprintf_r+0x34>
 8006780:	692b      	ldr	r3, [r5, #16]
 8006782:	b99b      	cbnz	r3, 80067ac <_vfiprintf_r+0x5c>
 8006784:	4629      	mov	r1, r5
 8006786:	4630      	mov	r0, r6
 8006788:	f7ff fe8a 	bl	80064a0 <__swsetup_r>
 800678c:	b170      	cbz	r0, 80067ac <_vfiprintf_r+0x5c>
 800678e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006790:	07dc      	lsls	r4, r3, #31
 8006792:	d504      	bpl.n	800679e <_vfiprintf_r+0x4e>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	b01d      	add	sp, #116	; 0x74
 800679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679e:	89ab      	ldrh	r3, [r5, #12]
 80067a0:	0598      	lsls	r0, r3, #22
 80067a2:	d4f7      	bmi.n	8006794 <_vfiprintf_r+0x44>
 80067a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067a6:	f7ff ff5c 	bl	8006662 <__retarget_lock_release_recursive>
 80067aa:	e7f3      	b.n	8006794 <_vfiprintf_r+0x44>
 80067ac:	2300      	movs	r3, #0
 80067ae:	9309      	str	r3, [sp, #36]	; 0x24
 80067b0:	2320      	movs	r3, #32
 80067b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ba:	2330      	movs	r3, #48	; 0x30
 80067bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006970 <_vfiprintf_r+0x220>
 80067c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067c4:	f04f 0901 	mov.w	r9, #1
 80067c8:	4623      	mov	r3, r4
 80067ca:	469a      	mov	sl, r3
 80067cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d0:	b10a      	cbz	r2, 80067d6 <_vfiprintf_r+0x86>
 80067d2:	2a25      	cmp	r2, #37	; 0x25
 80067d4:	d1f9      	bne.n	80067ca <_vfiprintf_r+0x7a>
 80067d6:	ebba 0b04 	subs.w	fp, sl, r4
 80067da:	d00b      	beq.n	80067f4 <_vfiprintf_r+0xa4>
 80067dc:	465b      	mov	r3, fp
 80067de:	4622      	mov	r2, r4
 80067e0:	4629      	mov	r1, r5
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ffa1 	bl	800672a <__sfputs_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	f000 80a9 	beq.w	8006940 <_vfiprintf_r+0x1f0>
 80067ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067f0:	445a      	add	r2, fp
 80067f2:	9209      	str	r2, [sp, #36]	; 0x24
 80067f4:	f89a 3000 	ldrb.w	r3, [sl]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80a1 	beq.w	8006940 <_vfiprintf_r+0x1f0>
 80067fe:	2300      	movs	r3, #0
 8006800:	f04f 32ff 	mov.w	r2, #4294967295
 8006804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006808:	f10a 0a01 	add.w	sl, sl, #1
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	9307      	str	r3, [sp, #28]
 8006810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006814:	931a      	str	r3, [sp, #104]	; 0x68
 8006816:	4654      	mov	r4, sl
 8006818:	2205      	movs	r2, #5
 800681a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681e:	4854      	ldr	r0, [pc, #336]	; (8006970 <_vfiprintf_r+0x220>)
 8006820:	f7f9 fcd6 	bl	80001d0 <memchr>
 8006824:	9a04      	ldr	r2, [sp, #16]
 8006826:	b9d8      	cbnz	r0, 8006860 <_vfiprintf_r+0x110>
 8006828:	06d1      	lsls	r1, r2, #27
 800682a:	bf44      	itt	mi
 800682c:	2320      	movmi	r3, #32
 800682e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006832:	0713      	lsls	r3, r2, #28
 8006834:	bf44      	itt	mi
 8006836:	232b      	movmi	r3, #43	; 0x2b
 8006838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800683c:	f89a 3000 	ldrb.w	r3, [sl]
 8006840:	2b2a      	cmp	r3, #42	; 0x2a
 8006842:	d015      	beq.n	8006870 <_vfiprintf_r+0x120>
 8006844:	9a07      	ldr	r2, [sp, #28]
 8006846:	4654      	mov	r4, sl
 8006848:	2000      	movs	r0, #0
 800684a:	f04f 0c0a 	mov.w	ip, #10
 800684e:	4621      	mov	r1, r4
 8006850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006854:	3b30      	subs	r3, #48	; 0x30
 8006856:	2b09      	cmp	r3, #9
 8006858:	d94d      	bls.n	80068f6 <_vfiprintf_r+0x1a6>
 800685a:	b1b0      	cbz	r0, 800688a <_vfiprintf_r+0x13a>
 800685c:	9207      	str	r2, [sp, #28]
 800685e:	e014      	b.n	800688a <_vfiprintf_r+0x13a>
 8006860:	eba0 0308 	sub.w	r3, r0, r8
 8006864:	fa09 f303 	lsl.w	r3, r9, r3
 8006868:	4313      	orrs	r3, r2
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	46a2      	mov	sl, r4
 800686e:	e7d2      	b.n	8006816 <_vfiprintf_r+0xc6>
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	1d19      	adds	r1, r3, #4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	9103      	str	r1, [sp, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfbb      	ittet	lt
 800687c:	425b      	neglt	r3, r3
 800687e:	f042 0202 	orrlt.w	r2, r2, #2
 8006882:	9307      	strge	r3, [sp, #28]
 8006884:	9307      	strlt	r3, [sp, #28]
 8006886:	bfb8      	it	lt
 8006888:	9204      	strlt	r2, [sp, #16]
 800688a:	7823      	ldrb	r3, [r4, #0]
 800688c:	2b2e      	cmp	r3, #46	; 0x2e
 800688e:	d10c      	bne.n	80068aa <_vfiprintf_r+0x15a>
 8006890:	7863      	ldrb	r3, [r4, #1]
 8006892:	2b2a      	cmp	r3, #42	; 0x2a
 8006894:	d134      	bne.n	8006900 <_vfiprintf_r+0x1b0>
 8006896:	9b03      	ldr	r3, [sp, #12]
 8006898:	1d1a      	adds	r2, r3, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	9203      	str	r2, [sp, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfb8      	it	lt
 80068a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80068a6:	3402      	adds	r4, #2
 80068a8:	9305      	str	r3, [sp, #20]
 80068aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006980 <_vfiprintf_r+0x230>
 80068ae:	7821      	ldrb	r1, [r4, #0]
 80068b0:	2203      	movs	r2, #3
 80068b2:	4650      	mov	r0, sl
 80068b4:	f7f9 fc8c 	bl	80001d0 <memchr>
 80068b8:	b138      	cbz	r0, 80068ca <_vfiprintf_r+0x17a>
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	eba0 000a 	sub.w	r0, r0, sl
 80068c0:	2240      	movs	r2, #64	; 0x40
 80068c2:	4082      	lsls	r2, r0
 80068c4:	4313      	orrs	r3, r2
 80068c6:	3401      	adds	r4, #1
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ce:	4829      	ldr	r0, [pc, #164]	; (8006974 <_vfiprintf_r+0x224>)
 80068d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068d4:	2206      	movs	r2, #6
 80068d6:	f7f9 fc7b 	bl	80001d0 <memchr>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d03f      	beq.n	800695e <_vfiprintf_r+0x20e>
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <_vfiprintf_r+0x228>)
 80068e0:	bb1b      	cbnz	r3, 800692a <_vfiprintf_r+0x1da>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	3307      	adds	r3, #7
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	3308      	adds	r3, #8
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	443b      	add	r3, r7
 80068f2:	9309      	str	r3, [sp, #36]	; 0x24
 80068f4:	e768      	b.n	80067c8 <_vfiprintf_r+0x78>
 80068f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80068fa:	460c      	mov	r4, r1
 80068fc:	2001      	movs	r0, #1
 80068fe:	e7a6      	b.n	800684e <_vfiprintf_r+0xfe>
 8006900:	2300      	movs	r3, #0
 8006902:	3401      	adds	r4, #1
 8006904:	9305      	str	r3, [sp, #20]
 8006906:	4619      	mov	r1, r3
 8006908:	f04f 0c0a 	mov.w	ip, #10
 800690c:	4620      	mov	r0, r4
 800690e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006912:	3a30      	subs	r2, #48	; 0x30
 8006914:	2a09      	cmp	r2, #9
 8006916:	d903      	bls.n	8006920 <_vfiprintf_r+0x1d0>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0c6      	beq.n	80068aa <_vfiprintf_r+0x15a>
 800691c:	9105      	str	r1, [sp, #20]
 800691e:	e7c4      	b.n	80068aa <_vfiprintf_r+0x15a>
 8006920:	fb0c 2101 	mla	r1, ip, r1, r2
 8006924:	4604      	mov	r4, r0
 8006926:	2301      	movs	r3, #1
 8006928:	e7f0      	b.n	800690c <_vfiprintf_r+0x1bc>
 800692a:	ab03      	add	r3, sp, #12
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	462a      	mov	r2, r5
 8006930:	4b12      	ldr	r3, [pc, #72]	; (800697c <_vfiprintf_r+0x22c>)
 8006932:	a904      	add	r1, sp, #16
 8006934:	4630      	mov	r0, r6
 8006936:	f3af 8000 	nop.w
 800693a:	4607      	mov	r7, r0
 800693c:	1c78      	adds	r0, r7, #1
 800693e:	d1d6      	bne.n	80068ee <_vfiprintf_r+0x19e>
 8006940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006942:	07d9      	lsls	r1, r3, #31
 8006944:	d405      	bmi.n	8006952 <_vfiprintf_r+0x202>
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	059a      	lsls	r2, r3, #22
 800694a:	d402      	bmi.n	8006952 <_vfiprintf_r+0x202>
 800694c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800694e:	f7ff fe88 	bl	8006662 <__retarget_lock_release_recursive>
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	065b      	lsls	r3, r3, #25
 8006956:	f53f af1d 	bmi.w	8006794 <_vfiprintf_r+0x44>
 800695a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800695c:	e71c      	b.n	8006798 <_vfiprintf_r+0x48>
 800695e:	ab03      	add	r3, sp, #12
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	462a      	mov	r2, r5
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <_vfiprintf_r+0x22c>)
 8006966:	a904      	add	r1, sp, #16
 8006968:	4630      	mov	r0, r6
 800696a:	f000 f879 	bl	8006a60 <_printf_i>
 800696e:	e7e4      	b.n	800693a <_vfiprintf_r+0x1ea>
 8006970:	08008310 	.word	0x08008310
 8006974:	0800831a 	.word	0x0800831a
 8006978:	00000000 	.word	0x00000000
 800697c:	0800672b 	.word	0x0800672b
 8006980:	08008316 	.word	0x08008316

08006984 <_printf_common>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	4616      	mov	r6, r2
 800698a:	4699      	mov	r9, r3
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006994:	4293      	cmp	r3, r2
 8006996:	bfb8      	it	lt
 8006998:	4613      	movlt	r3, r2
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a0:	4607      	mov	r7, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	b10a      	cbz	r2, 80069aa <_printf_common+0x26>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	bf42      	ittt	mi
 80069b0:	6833      	ldrmi	r3, [r6, #0]
 80069b2:	3302      	addmi	r3, #2
 80069b4:	6033      	strmi	r3, [r6, #0]
 80069b6:	6825      	ldr	r5, [r4, #0]
 80069b8:	f015 0506 	ands.w	r5, r5, #6
 80069bc:	d106      	bne.n	80069cc <_printf_common+0x48>
 80069be:	f104 0a19 	add.w	sl, r4, #25
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc26      	bgt.n	8006a1a <_printf_common+0x96>
 80069cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d0:	1e13      	subs	r3, r2, #0
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d42b      	bmi.n	8006a34 <_printf_common+0xb0>
 80069dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e0:	4649      	mov	r1, r9
 80069e2:	4638      	mov	r0, r7
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d01e      	beq.n	8006a28 <_printf_common+0xa4>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	f003 0306 	and.w	r3, r3, #6
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	bf02      	ittt	eq
 80069f6:	68e5      	ldreq	r5, [r4, #12]
 80069f8:	6833      	ldreq	r3, [r6, #0]
 80069fa:	1aed      	subeq	r5, r5, r3
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	bf0c      	ite	eq
 8006a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a04:	2500      	movne	r5, #0
 8006a06:	4293      	cmp	r3, r2
 8006a08:	bfc4      	itt	gt
 8006a0a:	1a9b      	subgt	r3, r3, r2
 8006a0c:	18ed      	addgt	r5, r5, r3
 8006a0e:	2600      	movs	r6, #0
 8006a10:	341a      	adds	r4, #26
 8006a12:	42b5      	cmp	r5, r6
 8006a14:	d11a      	bne.n	8006a4c <_printf_common+0xc8>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e008      	b.n	8006a2c <_printf_common+0xa8>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4638      	mov	r0, r7
 8006a22:	47c0      	blx	r8
 8006a24:	3001      	adds	r0, #1
 8006a26:	d103      	bne.n	8006a30 <_printf_common+0xac>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	3501      	adds	r5, #1
 8006a32:	e7c6      	b.n	80069c2 <_printf_common+0x3e>
 8006a34:	18e1      	adds	r1, r4, r3
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	2030      	movs	r0, #48	; 0x30
 8006a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a3e:	4422      	add	r2, r4
 8006a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a48:	3302      	adds	r3, #2
 8006a4a:	e7c7      	b.n	80069dc <_printf_common+0x58>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4649      	mov	r1, r9
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c0      	blx	r8
 8006a56:	3001      	adds	r0, #1
 8006a58:	d0e6      	beq.n	8006a28 <_printf_common+0xa4>
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7d9      	b.n	8006a12 <_printf_common+0x8e>
	...

08006a60 <_printf_i>:
 8006a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	7e0f      	ldrb	r7, [r1, #24]
 8006a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a68:	2f78      	cmp	r7, #120	; 0x78
 8006a6a:	4691      	mov	r9, r2
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	469a      	mov	sl, r3
 8006a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a76:	d807      	bhi.n	8006a88 <_printf_i+0x28>
 8006a78:	2f62      	cmp	r7, #98	; 0x62
 8006a7a:	d80a      	bhi.n	8006a92 <_printf_i+0x32>
 8006a7c:	2f00      	cmp	r7, #0
 8006a7e:	f000 80d4 	beq.w	8006c2a <_printf_i+0x1ca>
 8006a82:	2f58      	cmp	r7, #88	; 0x58
 8006a84:	f000 80c0 	beq.w	8006c08 <_printf_i+0x1a8>
 8006a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a90:	e03a      	b.n	8006b08 <_printf_i+0xa8>
 8006a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a96:	2b15      	cmp	r3, #21
 8006a98:	d8f6      	bhi.n	8006a88 <_printf_i+0x28>
 8006a9a:	a101      	add	r1, pc, #4	; (adr r1, 8006aa0 <_printf_i+0x40>)
 8006a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006b0d 	.word	0x08006b0d
 8006aa8:	08006a89 	.word	0x08006a89
 8006aac:	08006a89 	.word	0x08006a89
 8006ab0:	08006a89 	.word	0x08006a89
 8006ab4:	08006a89 	.word	0x08006a89
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006a89 	.word	0x08006a89
 8006ac0:	08006a89 	.word	0x08006a89
 8006ac4:	08006a89 	.word	0x08006a89
 8006ac8:	08006a89 	.word	0x08006a89
 8006acc:	08006c11 	.word	0x08006c11
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006bcb 	.word	0x08006bcb
 8006ad8:	08006a89 	.word	0x08006a89
 8006adc:	08006a89 	.word	0x08006a89
 8006ae0:	08006c33 	.word	0x08006c33
 8006ae4:	08006a89 	.word	0x08006a89
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006a89 	.word	0x08006a89
 8006af0:	08006a89 	.word	0x08006a89
 8006af4:	08006bd3 	.word	0x08006bd3
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	1d1a      	adds	r2, r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e09f      	b.n	8006c4c <_printf_i+0x1ec>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	0607      	lsls	r7, r0, #24
 8006b12:	f103 0104 	add.w	r1, r3, #4
 8006b16:	6029      	str	r1, [r5, #0]
 8006b18:	d501      	bpl.n	8006b1e <_printf_i+0xbe>
 8006b1a:	681e      	ldr	r6, [r3, #0]
 8006b1c:	e003      	b.n	8006b26 <_printf_i+0xc6>
 8006b1e:	0646      	lsls	r6, r0, #25
 8006b20:	d5fb      	bpl.n	8006b1a <_printf_i+0xba>
 8006b22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	da03      	bge.n	8006b32 <_printf_i+0xd2>
 8006b2a:	232d      	movs	r3, #45	; 0x2d
 8006b2c:	4276      	negs	r6, r6
 8006b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b32:	485a      	ldr	r0, [pc, #360]	; (8006c9c <_printf_i+0x23c>)
 8006b34:	230a      	movs	r3, #10
 8006b36:	e012      	b.n	8006b5e <_printf_i+0xfe>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	6820      	ldr	r0, [r4, #0]
 8006b3c:	1d19      	adds	r1, r3, #4
 8006b3e:	6029      	str	r1, [r5, #0]
 8006b40:	0605      	lsls	r5, r0, #24
 8006b42:	d501      	bpl.n	8006b48 <_printf_i+0xe8>
 8006b44:	681e      	ldr	r6, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <_printf_i+0xee>
 8006b48:	0641      	lsls	r1, r0, #25
 8006b4a:	d5fb      	bpl.n	8006b44 <_printf_i+0xe4>
 8006b4c:	881e      	ldrh	r6, [r3, #0]
 8006b4e:	4853      	ldr	r0, [pc, #332]	; (8006c9c <_printf_i+0x23c>)
 8006b50:	2f6f      	cmp	r7, #111	; 0x6f
 8006b52:	bf0c      	ite	eq
 8006b54:	2308      	moveq	r3, #8
 8006b56:	230a      	movne	r3, #10
 8006b58:	2100      	movs	r1, #0
 8006b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b5e:	6865      	ldr	r5, [r4, #4]
 8006b60:	60a5      	str	r5, [r4, #8]
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	bfa2      	ittt	ge
 8006b66:	6821      	ldrge	r1, [r4, #0]
 8006b68:	f021 0104 	bicge.w	r1, r1, #4
 8006b6c:	6021      	strge	r1, [r4, #0]
 8006b6e:	b90e      	cbnz	r6, 8006b74 <_printf_i+0x114>
 8006b70:	2d00      	cmp	r5, #0
 8006b72:	d04b      	beq.n	8006c0c <_printf_i+0x1ac>
 8006b74:	4615      	mov	r5, r2
 8006b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8006b7e:	5dc7      	ldrb	r7, [r0, r7]
 8006b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b84:	4637      	mov	r7, r6
 8006b86:	42bb      	cmp	r3, r7
 8006b88:	460e      	mov	r6, r1
 8006b8a:	d9f4      	bls.n	8006b76 <_printf_i+0x116>
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d10b      	bne.n	8006ba8 <_printf_i+0x148>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	07de      	lsls	r6, r3, #31
 8006b94:	d508      	bpl.n	8006ba8 <_printf_i+0x148>
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	6861      	ldr	r1, [r4, #4]
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	bfde      	ittt	le
 8006b9e:	2330      	movle	r3, #48	; 0x30
 8006ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ba8:	1b52      	subs	r2, r2, r5
 8006baa:	6122      	str	r2, [r4, #16]
 8006bac:	f8cd a000 	str.w	sl, [sp]
 8006bb0:	464b      	mov	r3, r9
 8006bb2:	aa03      	add	r2, sp, #12
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f7ff fee4 	bl	8006984 <_printf_common>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d14a      	bne.n	8006c56 <_printf_i+0x1f6>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	b004      	add	sp, #16
 8006bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	f043 0320 	orr.w	r3, r3, #32
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	4833      	ldr	r0, [pc, #204]	; (8006ca0 <_printf_i+0x240>)
 8006bd4:	2778      	movs	r7, #120	; 0x78
 8006bd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	6829      	ldr	r1, [r5, #0]
 8006bde:	061f      	lsls	r7, r3, #24
 8006be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006be4:	d402      	bmi.n	8006bec <_printf_i+0x18c>
 8006be6:	065f      	lsls	r7, r3, #25
 8006be8:	bf48      	it	mi
 8006bea:	b2b6      	uxthmi	r6, r6
 8006bec:	07df      	lsls	r7, r3, #31
 8006bee:	bf48      	it	mi
 8006bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf4:	6029      	str	r1, [r5, #0]
 8006bf6:	bf48      	it	mi
 8006bf8:	6023      	strmi	r3, [r4, #0]
 8006bfa:	b91e      	cbnz	r6, 8006c04 <_printf_i+0x1a4>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	f023 0320 	bic.w	r3, r3, #32
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	2310      	movs	r3, #16
 8006c06:	e7a7      	b.n	8006b58 <_printf_i+0xf8>
 8006c08:	4824      	ldr	r0, [pc, #144]	; (8006c9c <_printf_i+0x23c>)
 8006c0a:	e7e4      	b.n	8006bd6 <_printf_i+0x176>
 8006c0c:	4615      	mov	r5, r2
 8006c0e:	e7bd      	b.n	8006b8c <_printf_i+0x12c>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	6826      	ldr	r6, [r4, #0]
 8006c14:	6961      	ldr	r1, [r4, #20]
 8006c16:	1d18      	adds	r0, r3, #4
 8006c18:	6028      	str	r0, [r5, #0]
 8006c1a:	0635      	lsls	r5, r6, #24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0x1c4>
 8006c20:	6019      	str	r1, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <_printf_i+0x1ca>
 8006c24:	0670      	lsls	r0, r6, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0x1c0>
 8006c28:	8019      	strh	r1, [r3, #0]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	4615      	mov	r5, r2
 8006c30:	e7bc      	b.n	8006bac <_printf_i+0x14c>
 8006c32:	682b      	ldr	r3, [r5, #0]
 8006c34:	1d1a      	adds	r2, r3, #4
 8006c36:	602a      	str	r2, [r5, #0]
 8006c38:	681d      	ldr	r5, [r3, #0]
 8006c3a:	6862      	ldr	r2, [r4, #4]
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7f9 fac6 	bl	80001d0 <memchr>
 8006c44:	b108      	cbz	r0, 8006c4a <_printf_i+0x1ea>
 8006c46:	1b40      	subs	r0, r0, r5
 8006c48:	6060      	str	r0, [r4, #4]
 8006c4a:	6863      	ldr	r3, [r4, #4]
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c54:	e7aa      	b.n	8006bac <_printf_i+0x14c>
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	47d0      	blx	sl
 8006c60:	3001      	adds	r0, #1
 8006c62:	d0ad      	beq.n	8006bc0 <_printf_i+0x160>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	079b      	lsls	r3, r3, #30
 8006c68:	d413      	bmi.n	8006c92 <_printf_i+0x232>
 8006c6a:	68e0      	ldr	r0, [r4, #12]
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	4298      	cmp	r0, r3
 8006c70:	bfb8      	it	lt
 8006c72:	4618      	movlt	r0, r3
 8006c74:	e7a6      	b.n	8006bc4 <_printf_i+0x164>
 8006c76:	2301      	movs	r3, #1
 8006c78:	4632      	mov	r2, r6
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	47d0      	blx	sl
 8006c80:	3001      	adds	r0, #1
 8006c82:	d09d      	beq.n	8006bc0 <_printf_i+0x160>
 8006c84:	3501      	adds	r5, #1
 8006c86:	68e3      	ldr	r3, [r4, #12]
 8006c88:	9903      	ldr	r1, [sp, #12]
 8006c8a:	1a5b      	subs	r3, r3, r1
 8006c8c:	42ab      	cmp	r3, r5
 8006c8e:	dcf2      	bgt.n	8006c76 <_printf_i+0x216>
 8006c90:	e7eb      	b.n	8006c6a <_printf_i+0x20a>
 8006c92:	2500      	movs	r5, #0
 8006c94:	f104 0619 	add.w	r6, r4, #25
 8006c98:	e7f5      	b.n	8006c86 <_printf_i+0x226>
 8006c9a:	bf00      	nop
 8006c9c:	08008321 	.word	0x08008321
 8006ca0:	08008332 	.word	0x08008332

08006ca4 <__sflush_r>:
 8006ca4:	898a      	ldrh	r2, [r1, #12]
 8006ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	4605      	mov	r5, r0
 8006cac:	0710      	lsls	r0, r2, #28
 8006cae:	460c      	mov	r4, r1
 8006cb0:	d458      	bmi.n	8006d64 <__sflush_r+0xc0>
 8006cb2:	684b      	ldr	r3, [r1, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc05      	bgt.n	8006cc4 <__sflush_r+0x20>
 8006cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc02      	bgt.n	8006cc4 <__sflush_r+0x20>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d0f9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	6a21      	ldr	r1, [r4, #32]
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	d032      	beq.n	8006d3e <__sflush_r+0x9a>
 8006cd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	075a      	lsls	r2, r3, #29
 8006cde:	d505      	bpl.n	8006cec <__sflush_r+0x48>
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	1ac0      	subs	r0, r0, r3
 8006ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce6:	b10b      	cbz	r3, 8006cec <__sflush_r+0x48>
 8006ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cea:	1ac0      	subs	r0, r0, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	4602      	mov	r2, r0
 8006cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf2:	6a21      	ldr	r1, [r4, #32]
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b0      	blx	r6
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	d106      	bne.n	8006d0c <__sflush_r+0x68>
 8006cfe:	6829      	ldr	r1, [r5, #0]
 8006d00:	291d      	cmp	r1, #29
 8006d02:	d82b      	bhi.n	8006d5c <__sflush_r+0xb8>
 8006d04:	4a29      	ldr	r2, [pc, #164]	; (8006dac <__sflush_r+0x108>)
 8006d06:	410a      	asrs	r2, r1
 8006d08:	07d6      	lsls	r6, r2, #31
 8006d0a:	d427      	bmi.n	8006d5c <__sflush_r+0xb8>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	6062      	str	r2, [r4, #4]
 8006d10:	04d9      	lsls	r1, r3, #19
 8006d12:	6922      	ldr	r2, [r4, #16]
 8006d14:	6022      	str	r2, [r4, #0]
 8006d16:	d504      	bpl.n	8006d22 <__sflush_r+0x7e>
 8006d18:	1c42      	adds	r2, r0, #1
 8006d1a:	d101      	bne.n	8006d20 <__sflush_r+0x7c>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b903      	cbnz	r3, 8006d22 <__sflush_r+0x7e>
 8006d20:	6560      	str	r0, [r4, #84]	; 0x54
 8006d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d24:	602f      	str	r7, [r5, #0]
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d0c9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2e:	4299      	cmp	r1, r3
 8006d30:	d002      	beq.n	8006d38 <__sflush_r+0x94>
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7ff fc96 	bl	8006664 <_free_r>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3c:	e7c0      	b.n	8006cc0 <__sflush_r+0x1c>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b0      	blx	r6
 8006d44:	1c41      	adds	r1, r0, #1
 8006d46:	d1c8      	bne.n	8006cda <__sflush_r+0x36>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c5      	beq.n	8006cda <__sflush_r+0x36>
 8006d4e:	2b1d      	cmp	r3, #29
 8006d50:	d001      	beq.n	8006d56 <__sflush_r+0xb2>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	d101      	bne.n	8006d5a <__sflush_r+0xb6>
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	e7b1      	b.n	8006cbe <__sflush_r+0x1a>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	e7ad      	b.n	8006cc0 <__sflush_r+0x1c>
 8006d64:	690f      	ldr	r7, [r1, #16]
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d0a9      	beq.n	8006cbe <__sflush_r+0x1a>
 8006d6a:	0793      	lsls	r3, r2, #30
 8006d6c:	680e      	ldr	r6, [r1, #0]
 8006d6e:	bf08      	it	eq
 8006d70:	694b      	ldreq	r3, [r1, #20]
 8006d72:	600f      	str	r7, [r1, #0]
 8006d74:	bf18      	it	ne
 8006d76:	2300      	movne	r3, #0
 8006d78:	eba6 0807 	sub.w	r8, r6, r7
 8006d7c:	608b      	str	r3, [r1, #8]
 8006d7e:	f1b8 0f00 	cmp.w	r8, #0
 8006d82:	dd9c      	ble.n	8006cbe <__sflush_r+0x1a>
 8006d84:	6a21      	ldr	r1, [r4, #32]
 8006d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d88:	4643      	mov	r3, r8
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b0      	blx	r6
 8006d90:	2800      	cmp	r0, #0
 8006d92:	dc06      	bgt.n	8006da2 <__sflush_r+0xfe>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e78e      	b.n	8006cc0 <__sflush_r+0x1c>
 8006da2:	4407      	add	r7, r0
 8006da4:	eba8 0800 	sub.w	r8, r8, r0
 8006da8:	e7e9      	b.n	8006d7e <__sflush_r+0xda>
 8006daa:	bf00      	nop
 8006dac:	dfbffffe 	.word	0xdfbffffe

08006db0 <_fflush_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	690b      	ldr	r3, [r1, #16]
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b913      	cbnz	r3, 8006dc0 <_fflush_r+0x10>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	b118      	cbz	r0, 8006dca <_fflush_r+0x1a>
 8006dc2:	6a03      	ldr	r3, [r0, #32]
 8006dc4:	b90b      	cbnz	r3, 8006dca <_fflush_r+0x1a>
 8006dc6:	f7ff fa47 	bl	8006258 <__sinit>
 8006dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f3      	beq.n	8006dba <_fflush_r+0xa>
 8006dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dd4:	07d0      	lsls	r0, r2, #31
 8006dd6:	d404      	bmi.n	8006de2 <_fflush_r+0x32>
 8006dd8:	0599      	lsls	r1, r3, #22
 8006dda:	d402      	bmi.n	8006de2 <_fflush_r+0x32>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dde:	f7ff fc3f 	bl	8006660 <__retarget_lock_acquire_recursive>
 8006de2:	4628      	mov	r0, r5
 8006de4:	4621      	mov	r1, r4
 8006de6:	f7ff ff5d 	bl	8006ca4 <__sflush_r>
 8006dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dec:	07da      	lsls	r2, r3, #31
 8006dee:	4605      	mov	r5, r0
 8006df0:	d4e4      	bmi.n	8006dbc <_fflush_r+0xc>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	d4e1      	bmi.n	8006dbc <_fflush_r+0xc>
 8006df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfa:	f7ff fc32 	bl	8006662 <__retarget_lock_release_recursive>
 8006dfe:	e7dd      	b.n	8006dbc <_fflush_r+0xc>

08006e00 <__swhatbuf_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	b096      	sub	sp, #88	; 0x58
 8006e0c:	4615      	mov	r5, r2
 8006e0e:	461e      	mov	r6, r3
 8006e10:	da0d      	bge.n	8006e2e <__swhatbuf_r+0x2e>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	bf0c      	ite	eq
 8006e1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e22:	2340      	movne	r3, #64	; 0x40
 8006e24:	2000      	movs	r0, #0
 8006e26:	6031      	str	r1, [r6, #0]
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	b016      	add	sp, #88	; 0x58
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	466a      	mov	r2, sp
 8006e30:	f000 f848 	bl	8006ec4 <_fstat_r>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	dbec      	blt.n	8006e12 <__swhatbuf_r+0x12>
 8006e38:	9901      	ldr	r1, [sp, #4]
 8006e3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e42:	4259      	negs	r1, r3
 8006e44:	4159      	adcs	r1, r3
 8006e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4a:	e7eb      	b.n	8006e24 <__swhatbuf_r+0x24>

08006e4c <__smakebuf_r>:
 8006e4c:	898b      	ldrh	r3, [r1, #12]
 8006e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e50:	079d      	lsls	r5, r3, #30
 8006e52:	4606      	mov	r6, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	d507      	bpl.n	8006e68 <__smakebuf_r+0x1c>
 8006e58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	2301      	movs	r3, #1
 8006e62:	6163      	str	r3, [r4, #20]
 8006e64:	b002      	add	sp, #8
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	ab01      	add	r3, sp, #4
 8006e6a:	466a      	mov	r2, sp
 8006e6c:	f7ff ffc8 	bl	8006e00 <__swhatbuf_r>
 8006e70:	9900      	ldr	r1, [sp, #0]
 8006e72:	4605      	mov	r5, r0
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff f8e9 	bl	800604c <_malloc_r>
 8006e7a:	b948      	cbnz	r0, 8006e90 <__smakebuf_r+0x44>
 8006e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e80:	059a      	lsls	r2, r3, #22
 8006e82:	d4ef      	bmi.n	8006e64 <__smakebuf_r+0x18>
 8006e84:	f023 0303 	bic.w	r3, r3, #3
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	81a3      	strh	r3, [r4, #12]
 8006e8e:	e7e3      	b.n	8006e58 <__smakebuf_r+0xc>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	6020      	str	r0, [r4, #0]
 8006e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	9b00      	ldr	r3, [sp, #0]
 8006e9c:	6163      	str	r3, [r4, #20]
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	6120      	str	r0, [r4, #16]
 8006ea2:	b15b      	cbz	r3, 8006ebc <__smakebuf_r+0x70>
 8006ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 f81d 	bl	8006ee8 <_isatty_r>
 8006eae:	b128      	cbz	r0, 8006ebc <__smakebuf_r+0x70>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	431d      	orrs	r5, r3
 8006ec0:	81a5      	strh	r5, [r4, #12]
 8006ec2:	e7cf      	b.n	8006e64 <__smakebuf_r+0x18>

08006ec4 <_fstat_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	; (8006ee4 <_fstat_r+0x20>)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	f000 f955 	bl	8007180 <_fstat>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d102      	bne.n	8006ee0 <_fstat_r+0x1c>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	b103      	cbz	r3, 8006ee0 <_fstat_r+0x1c>
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000964 	.word	0x20000964

08006ee8 <_isatty_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d06      	ldr	r5, [pc, #24]	; (8006f04 <_isatty_r+0x1c>)
 8006eec:	2300      	movs	r3, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	f000 f94c 	bl	8007190 <_isatty>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_isatty_r+0x1a>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_isatty_r+0x1a>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000964 	.word	0x20000964

08006f08 <expf>:
 8006f08:	b508      	push	{r3, lr}
 8006f0a:	ed2d 8b02 	vpush	{d8}
 8006f0e:	eef0 8a40 	vmov.f32	s17, s0
 8006f12:	f000 f85f 	bl	8006fd4 <__ieee754_expf>
 8006f16:	eeb0 8a40 	vmov.f32	s16, s0
 8006f1a:	eeb0 0a68 	vmov.f32	s0, s17
 8006f1e:	f000 f829 	bl	8006f74 <finitef>
 8006f22:	b160      	cbz	r0, 8006f3e <expf+0x36>
 8006f24:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006f64 <expf+0x5c>
 8006f28:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f30:	dd0a      	ble.n	8006f48 <expf+0x40>
 8006f32:	f7ff fb6b 	bl	800660c <__errno>
 8006f36:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8006f68 <expf+0x60>
 8006f3a:	2322      	movs	r3, #34	; 0x22
 8006f3c:	6003      	str	r3, [r0, #0]
 8006f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8006f42:	ecbd 8b02 	vpop	{d8}
 8006f46:	bd08      	pop	{r3, pc}
 8006f48:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006f6c <expf+0x64>
 8006f4c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f54:	d5f3      	bpl.n	8006f3e <expf+0x36>
 8006f56:	f7ff fb59 	bl	800660c <__errno>
 8006f5a:	2322      	movs	r3, #34	; 0x22
 8006f5c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006f70 <expf+0x68>
 8006f60:	6003      	str	r3, [r0, #0]
 8006f62:	e7ec      	b.n	8006f3e <expf+0x36>
 8006f64:	42b17217 	.word	0x42b17217
 8006f68:	7f800000 	.word	0x7f800000
 8006f6c:	c2cff1b5 	.word	0xc2cff1b5
 8006f70:	00000000 	.word	0x00000000

08006f74 <finitef>:
 8006f74:	b082      	sub	sp, #8
 8006f76:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006f7a:	9801      	ldr	r0, [sp, #4]
 8006f7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f80:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006f84:	bfac      	ite	ge
 8006f86:	2000      	movge	r0, #0
 8006f88:	2001      	movlt	r0, #1
 8006f8a:	b002      	add	sp, #8
 8006f8c:	4770      	bx	lr

08006f8e <with_errnof>:
 8006f8e:	b513      	push	{r0, r1, r4, lr}
 8006f90:	4604      	mov	r4, r0
 8006f92:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006f96:	f7ff fb39 	bl	800660c <__errno>
 8006f9a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006f9e:	6004      	str	r4, [r0, #0]
 8006fa0:	b002      	add	sp, #8
 8006fa2:	bd10      	pop	{r4, pc}

08006fa4 <xflowf>:
 8006fa4:	b130      	cbz	r0, 8006fb4 <xflowf+0x10>
 8006fa6:	eef1 7a40 	vneg.f32	s15, s0
 8006faa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006fae:	2022      	movs	r0, #34	; 0x22
 8006fb0:	f7ff bfed 	b.w	8006f8e <with_errnof>
 8006fb4:	eef0 7a40 	vmov.f32	s15, s0
 8006fb8:	e7f7      	b.n	8006faa <xflowf+0x6>
	...

08006fbc <__math_uflowf>:
 8006fbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fc4 <__math_uflowf+0x8>
 8006fc0:	f7ff bff0 	b.w	8006fa4 <xflowf>
 8006fc4:	10000000 	.word	0x10000000

08006fc8 <__math_oflowf>:
 8006fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fd0 <__math_oflowf+0x8>
 8006fcc:	f7ff bfea 	b.w	8006fa4 <xflowf>
 8006fd0:	70000000 	.word	0x70000000

08006fd4 <__ieee754_expf>:
 8006fd4:	ee10 2a10 	vmov	r2, s0
 8006fd8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006fdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fe0:	d902      	bls.n	8006fe8 <__ieee754_expf+0x14>
 8006fe2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006fe6:	4770      	bx	lr
 8006fe8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8006fec:	d106      	bne.n	8006ffc <__ieee754_expf+0x28>
 8006fee:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007128 <__ieee754_expf+0x154>
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	bf18      	it	ne
 8006ff6:	eeb0 0a67 	vmovne.f32	s0, s15
 8006ffa:	4770      	bx	lr
 8006ffc:	484b      	ldr	r0, [pc, #300]	; (800712c <__ieee754_expf+0x158>)
 8006ffe:	4282      	cmp	r2, r0
 8007000:	dd02      	ble.n	8007008 <__ieee754_expf+0x34>
 8007002:	2000      	movs	r0, #0
 8007004:	f7ff bfe0 	b.w	8006fc8 <__math_oflowf>
 8007008:	2a00      	cmp	r2, #0
 800700a:	da05      	bge.n	8007018 <__ieee754_expf+0x44>
 800700c:	4a48      	ldr	r2, [pc, #288]	; (8007130 <__ieee754_expf+0x15c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d902      	bls.n	8007018 <__ieee754_expf+0x44>
 8007012:	2000      	movs	r0, #0
 8007014:	f7ff bfd2 	b.w	8006fbc <__math_uflowf>
 8007018:	4a46      	ldr	r2, [pc, #280]	; (8007134 <__ieee754_expf+0x160>)
 800701a:	4293      	cmp	r3, r2
 800701c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007020:	d952      	bls.n	80070c8 <__ieee754_expf+0xf4>
 8007022:	4a45      	ldr	r2, [pc, #276]	; (8007138 <__ieee754_expf+0x164>)
 8007024:	4293      	cmp	r3, r2
 8007026:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800702a:	d834      	bhi.n	8007096 <__ieee754_expf+0xc2>
 800702c:	4b43      	ldr	r3, [pc, #268]	; (800713c <__ieee754_expf+0x168>)
 800702e:	4413      	add	r3, r2
 8007030:	ed93 7a00 	vldr	s14, [r3]
 8007034:	4b42      	ldr	r3, [pc, #264]	; (8007140 <__ieee754_expf+0x16c>)
 8007036:	4413      	add	r3, r2
 8007038:	ee30 7a47 	vsub.f32	s14, s0, s14
 800703c:	f1c1 0201 	rsb	r2, r1, #1
 8007040:	edd3 7a00 	vldr	s15, [r3]
 8007044:	1a52      	subs	r2, r2, r1
 8007046:	ee37 0a67 	vsub.f32	s0, s14, s15
 800704a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800704e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007144 <__ieee754_expf+0x170>
 8007052:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007148 <__ieee754_expf+0x174>
 8007056:	eee6 6a05 	vfma.f32	s13, s12, s10
 800705a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800714c <__ieee754_expf+0x178>
 800705e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007062:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007150 <__ieee754_expf+0x17c>
 8007066:	eee5 6a06 	vfma.f32	s13, s10, s12
 800706a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007154 <__ieee754_expf+0x180>
 800706e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007072:	eef0 6a40 	vmov.f32	s13, s0
 8007076:	eee5 6a46 	vfms.f32	s13, s10, s12
 800707a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800707e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007082:	bb92      	cbnz	r2, 80070ea <__ieee754_expf+0x116>
 8007084:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007088:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800708c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007090:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007094:	4770      	bx	lr
 8007096:	4b30      	ldr	r3, [pc, #192]	; (8007158 <__ieee754_expf+0x184>)
 8007098:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800715c <__ieee754_expf+0x188>
 800709c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007160 <__ieee754_expf+0x18c>
 80070a0:	4413      	add	r3, r2
 80070a2:	edd3 7a00 	vldr	s15, [r3]
 80070a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80070aa:	eeb0 7a40 	vmov.f32	s14, s0
 80070ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b2:	ee17 2a90 	vmov	r2, s15
 80070b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ba:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80070be:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007164 <__ieee754_expf+0x190>
 80070c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80070c6:	e7be      	b.n	8007046 <__ieee754_expf+0x72>
 80070c8:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80070cc:	d20b      	bcs.n	80070e6 <__ieee754_expf+0x112>
 80070ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007168 <__ieee754_expf+0x194>
 80070d2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80070d6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	dd02      	ble.n	80070e6 <__ieee754_expf+0x112>
 80070e0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80070e4:	4770      	bx	lr
 80070e6:	2200      	movs	r2, #0
 80070e8:	e7af      	b.n	800704a <__ieee754_expf+0x76>
 80070ea:	ee36 6a66 	vsub.f32	s12, s12, s13
 80070ee:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80070f2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80070f6:	bfb8      	it	lt
 80070f8:	3264      	addlt	r2, #100	; 0x64
 80070fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007102:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007106:	ee17 3a90 	vmov	r3, s15
 800710a:	bfab      	itete	ge
 800710c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007110:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007114:	ee00 3a10 	vmovge	s0, r3
 8007118:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800716c <__ieee754_expf+0x198>
 800711c:	bfbc      	itt	lt
 800711e:	ee00 3a10 	vmovlt	s0, r3
 8007122:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007126:	4770      	bx	lr
 8007128:	00000000 	.word	0x00000000
 800712c:	42b17217 	.word	0x42b17217
 8007130:	42cff1b5 	.word	0x42cff1b5
 8007134:	3eb17218 	.word	0x3eb17218
 8007138:	3f851591 	.word	0x3f851591
 800713c:	0800834c 	.word	0x0800834c
 8007140:	08008354 	.word	0x08008354
 8007144:	3331bb4c 	.word	0x3331bb4c
 8007148:	b5ddea0e 	.word	0xb5ddea0e
 800714c:	388ab355 	.word	0x388ab355
 8007150:	bb360b61 	.word	0xbb360b61
 8007154:	3e2aaaab 	.word	0x3e2aaaab
 8007158:	08008344 	.word	0x08008344
 800715c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007160:	3f317180 	.word	0x3f317180
 8007164:	3717f7d1 	.word	0x3717f7d1
 8007168:	7149f2ca 	.word	0x7149f2ca
 800716c:	0d800000 	.word	0x0d800000

08007170 <_close>:
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <_close+0xc>)
 8007172:	2258      	movs	r2, #88	; 0x58
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	4770      	bx	lr
 800717c:	20000964 	.word	0x20000964

08007180 <_fstat>:
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <_fstat+0xc>)
 8007182:	2258      	movs	r2, #88	; 0x58
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f04f 30ff 	mov.w	r0, #4294967295
 800718a:	4770      	bx	lr
 800718c:	20000964 	.word	0x20000964

08007190 <_isatty>:
 8007190:	4b02      	ldr	r3, [pc, #8]	; (800719c <_isatty+0xc>)
 8007192:	2258      	movs	r2, #88	; 0x58
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	2000      	movs	r0, #0
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20000964 	.word	0x20000964

080071a0 <_lseek>:
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <_lseek+0xc>)
 80071a2:	2258      	movs	r2, #88	; 0x58
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	4770      	bx	lr
 80071ac:	20000964 	.word	0x20000964

080071b0 <_read>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <_read+0xc>)
 80071b2:	2258      	movs	r2, #88	; 0x58
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	4770      	bx	lr
 80071bc:	20000964 	.word	0x20000964

080071c0 <_write>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <_write+0xc>)
 80071c2:	2258      	movs	r2, #88	; 0x58
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	4770      	bx	lr
 80071cc:	20000964 	.word	0x20000964

080071d0 <_init>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	bf00      	nop
 80071d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d6:	bc08      	pop	{r3}
 80071d8:	469e      	mov	lr, r3
 80071da:	4770      	bx	lr

080071dc <_fini>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	bf00      	nop
 80071e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e2:	bc08      	pop	{r3}
 80071e4:	469e      	mov	lr, r3
 80071e6:	4770      	bx	lr
